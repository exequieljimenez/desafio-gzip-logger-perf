v8-version,9,4,146,24,-node.20,0
v8-platform,windows,unknown
shared-library,C:\\Program Files\\nodejs\\node.exe,0x7ff7c00e0000,0x7ff7c3e02000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\ntdll.dll,0x7ffdf6780000,0x7ffdf6970000,0
shared-library,C:\\Program Files\\AVG\\Antivirus\\aswhook.dll,0x7ffdc9740000,0x7ffdc9759000,0
shared-library,C:\\WINDOWS\\System32\\KERNEL32.DLL,0x7ffdf5e50000,0x7ffdf5f02000,0
shared-library,C:\\WINDOWS\\System32\\KERNELBASE.dll,0x7ffdf3c40000,0x7ffdf3ee5000,0
shared-library,C:\\WINDOWS\\System32\\WS2_32.dll,0x7ffdf66d0000,0x7ffdf673f000,0
shared-library,C:\\WINDOWS\\System32\\RPCRT4.dll,0x7ffdf5f20000,0x7ffdf6040000,0
shared-library,C:\\WINDOWS\\System32\\PSAPI.DLL,0x7ffdf6560000,0x7ffdf6568000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\dbghelp.dll,0x7ffdebf00000,0x7ffdec0f4000,0
shared-library,C:\\WINDOWS\\System32\\ADVAPI32.dll,0x7ffdf5000000,0x7ffdf50a3000,0
shared-library,C:\\WINDOWS\\System32\\ucrtbase.dll,0x7ffdf4080000,0x7ffdf417a000,0
shared-library,C:\\WINDOWS\\System32\\msvcrt.dll,0x7ffdf4ae0000,0x7ffdf4b7e000,0
shared-library,C:\\WINDOWS\\System32\\sechost.dll,0x7ffdf6570000,0x7ffdf6607000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\IPHLPAPI.DLL,0x7ffdf2c00000,0x7ffdf2c3a000,0
shared-library,C:\\WINDOWS\\System32\\USER32.dll,0x7ffdf50e0000,0x7ffdf5274000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\USERENV.dll,0x7ffdf3620000,0x7ffdf3645000,0
shared-library,C:\\WINDOWS\\System32\\win32u.dll,0x7ffdf3fe0000,0x7ffdf4001000,0
shared-library,C:\\WINDOWS\\System32\\profapi.dll,0x7ffdf37a0000,0x7ffdf37c3000,0
shared-library,C:\\WINDOWS\\System32\\GDI32.dll,0x7ffdf50b0000,0x7ffdf50d6000,0
shared-library,C:\\WINDOWS\\System32\\gdi32full.dll,0x7ffdf3880000,0x7ffdf3a16000,0
shared-library,C:\\WINDOWS\\System32\\msvcp_win.dll,0x7ffdf3b70000,0x7ffdf3c0e000,0
shared-library,C:\\WINDOWS\\System32\\CRYPT32.dll,0x7ffdf3a20000,0x7ffdf3b69000,0
shared-library,C:\\WINDOWS\\System32\\MSASN1.dll,0x7ffdf3730000,0x7ffdf3742000,0
shared-library,C:\\WINDOWS\\System32\\bcrypt.dll,0x7ffdf3c10000,0x7ffdf3c36000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\WINMM.dll,0x7ffdf1710000,0x7ffdf1734000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\winmmbase.dll,0x7ffdf16e0000,0x7ffdf170d000,0
shared-library,C:\\WINDOWS\\System32\\cfgmgr32.dll,0x7ffdf4010000,0x7ffdf405a000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\CRYPTBASE.DLL,0x7ffdf30c0000,0x7ffdf30cc000,0
shared-library,C:\\WINDOWS\\System32\\bcryptPrimitives.dll,0x7ffdf3ef0000,0x7ffdf3f71000,0
shared-library,C:\\WINDOWS\\System32\\IMM32.DLL,0x7ffdf5970000,0x7ffdf599e000,0
shared-library,C:\\WINDOWS\\System32\\powrprof.dll,0x7ffdf3750000,0x7ffdf379a000,0
shared-library,C:\\WINDOWS\\System32\\UMPDC.dll,0x7ffdf3700000,0x7ffdf3710000,0
shared-library,C:\\WINDOWS\\system32\\uxtheme.dll,0x7ffdf1a40000,0x7ffdf1ad9000,0
shared-library,C:\\WINDOWS\\System32\\combase.dll,0x7ffdf4cc0000,0x7ffdf4ff6000,0
shared-library,C:\\WINDOWS\\system32\\mswsock.dll,0x7ffdf2ef0000,0x7ffdf2f57000,0
shared-library,C:\\WINDOWS\\System32\\kernel.appcore.dll,0x7ffdf3710000,0x7ffdf3721000,0
shared-library-end
profiler,begin,1000
tick,0x7ffdf681c774,112235,0,0x0,6
new,CodeRange,0x231d0d80000,0
new,MemoryChunk,0x39cf2800000,262144
new,MemoryChunk,0x21175700000,262144
new,MemoryChunk,0x3c700680000,262144
new,MemoryChunk,0x68cd040000,262144
new,MemoryChunk,0x6613dc0000,262144
heap-capacity,1031072
heap-available,4346136384
new,MemoryChunk,0xa829680000,262144
new,MemoryChunk,0x1b3f71c0000,262144
new,MemoryChunk,0x2e6f8140000,262144
new,MemoryChunk,0x273fd300000,262144
tick,0x7ff7c07eab6c,113378,0,0x0,6
new,MemoryChunk,0x375c9f40000,262144
new,MemoryChunk,0x10741680000,262144
new,MemoryChunk,0x379432c0000,262144
new,MemoryChunk,0x231d0dc0000,262144
new,MemoryChunk,0x204c4f00000,262144
tick,0x7ff7c07e556d,115381,0,0x0,6
code-creation,Builtin,2,115595,0x7ff7c0c504a4,1356,RecordWriteEmitRememberedSetSaveFP
code-creation,Builtin,2,115608,0x7ff7c0c50a04,448,RecordWriteOmitRememberedSetSaveFP
code-creation,Builtin,2,115614,0x7ff7c0c50be4,636,RecordWriteEmitRememberedSetIgnoreFP
code-creation,Builtin,2,115620,0x7ff7c0c50e64,204,RecordWriteOmitRememberedSetIgnoreFP
code-creation,Builtin,2,115647,0x7ff7c0c50f44,364,EphemeronKeyBarrierSaveFP
code-creation,Builtin,2,115656,0x7ff7c0c510c4,128,EphemeronKeyBarrierIgnoreFP
code-creation,Builtin,2,115661,0x7ff7c0c51164,60,AdaptorWithBuiltinExitFrame
code-creation,Builtin,2,115667,0x7ff7c0c511a4,360,CallFunction_ReceiverIsNullOrUndefined
code-creation,Builtin,2,115673,0x7ff7c0c51324,416,CallFunction_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,115680,0x7ff7c0c514e4,444,CallFunction_ReceiverIsAny
code-creation,Builtin,2,115685,0x7ff7c0c516a4,104,CallBoundFunction
code-creation,Builtin,2,115690,0x7ff7c0c51724,120,Call_ReceiverIsNullOrUndefined
code-creation,Builtin,2,115695,0x7ff7c0c517a4,120,Call_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,115700,0x7ff7c0c51824,120,Call_ReceiverIsAny
code-creation,Builtin,2,115705,0x7ff7c0c518a4,992,Call_ReceiverIsNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,115711,0x7ff7c0c51ca4,992,Call_ReceiverIsNullOrUndefined_Baseline
code-creation,Builtin,2,115717,0x7ff7c0c520a4,1080,Call_ReceiverIsNotNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,115723,0x7ff7c0c524e4,1076,Call_ReceiverIsNotNullOrUndefined_Baseline
code-creation,Builtin,2,115729,0x7ff7c0c52924,1080,Call_ReceiverIsAny_Baseline_Compact
code-creation,Builtin,2,115734,0x7ff7c0c52d64,1076,Call_ReceiverIsAny_Baseline
code-creation,Builtin,2,115740,0x7ff7c0c531a4,948,Call_ReceiverIsNullOrUndefined_WithFeedback
code-creation,Builtin,2,115746,0x7ff7c0c53564,948,Call_ReceiverIsNotNullOrUndefined_WithFeedback
code-creation,Builtin,2,115752,0x7ff7c0c53924,948,Call_ReceiverIsAny_WithFeedback
code-creation,Builtin,2,115757,0x7ff7c0c53ce4,736,CallProxy
code-creation,Builtin,2,115763,0x7ff7c0c53fe4,148,CallVarargs
code-creation,Builtin,2,115767,0x7ff7c0c54084,944,CallWithSpread
code-creation,Builtin,2,115773,0x7ff7c0c54444,1956,CallWithSpread_Baseline
code-creation,Builtin,2,115778,0x7ff7c0c54c04,1928,CallWithSpread_WithFeedback
code-creation,Builtin,2,115784,0x7ff7c0c553a4,864,CallWithArrayLike
code-creation,Builtin,2,115789,0x7ff7c0c55724,1820,CallWithArrayLike_WithFeedback
code-creation,Builtin,2,115794,0x7ff7c0c55e44,156,CallForwardVarargs
code-creation,Builtin,2,115799,0x7ff7c0c55ee4,156,CallFunctionForwardVarargs
code-creation,Builtin,2,115805,0x7ff7c0c55f84,132,CallFunctionTemplate_CheckAccess
code-creation,Builtin,2,115810,0x7ff7c0c56024,228,CallFunctionTemplate_CheckCompatibleReceiver
code-creation,Builtin,2,115816,0x7ff7c0c56124,316,CallFunctionTemplate_CheckAccessAndCompatibleReceiver
code-creation,Builtin,2,115821,0x7ff7c0c56264,28,ConstructFunction
code-creation,Builtin,2,115826,0x7ff7c0c56284,104,ConstructBoundFunction
code-creation,Builtin,2,115832,0x7ff7c0c56304,28,ConstructedNonConstructable
code-creation,Builtin,2,115837,0x7ff7c0c56324,100,Construct
code-creation,Builtin,2,115842,0x7ff7c0c563a4,148,ConstructVarargs
code-creation,Builtin,2,115847,0x7ff7c0c56444,968,ConstructWithSpread
code-creation,Builtin,2,115852,0x7ff7c0c56824,1748,ConstructWithSpread_Baseline
code-creation,Builtin,2,115857,0x7ff7c0c56f04,1764,ConstructWithSpread_WithFeedback
code-creation,Builtin,2,115862,0x7ff7c0c57604,924,ConstructWithArrayLike
code-creation,Builtin,2,115867,0x7ff7c0c579a4,1652,ConstructWithArrayLike_WithFeedback
code-creation,Builtin,2,115873,0x7ff7c0c58024,196,ConstructForwardVarargs
code-creation,Builtin,2,115878,0x7ff7c0c58104,196,ConstructFunctionForwardVarargs
code-creation,Builtin,2,115884,0x7ff7c0c581e4,804,Construct_Baseline
code-creation,Builtin,2,115889,0x7ff7c0c58524,820,Construct_WithFeedback
code-creation,Builtin,2,115894,0x7ff7c0c58864,476,JSConstructStubGeneric
code-creation,Builtin,2,115899,0x7ff7c0c58a44,376,JSBuiltinsConstructStub
code-creation,Builtin,2,115904,0x7ff7c0c58bc4,676,FastNewObject
code-creation,Builtin,2,115909,0x7ff7c0c58e84,292,FastNewClosure
code-creation,Builtin,2,115914,0x7ff7c0c58fc4,720,ConstructProxy
code-creation,Builtin,2,115919,0x7ff7c0c592a4,360,JSEntry
code-creation,Builtin,2,115924,0x7ff7c0c59424,360,JSConstructEntry
code-creation,Builtin,2,115929,0x7ff7c0c595a4,360,JSRunMicrotasksEntry
code-creation,Builtin,2,115945,0x7ff7c0c59724,96,JSEntryTrampoline
code-creation,Builtin,2,115952,0x7ff7c0c597a4,96,JSConstructEntryTrampoline
code-creation,Builtin,2,115957,0x7ff7c0c59824,280,ResumeGeneratorTrampoline
code-creation,Builtin,2,115962,0x7ff7c0c59944,1116,StringCodePointAt
code-creation,Builtin,2,115967,0x7ff7c0c59da4,1552,StringFromCodePointAt
code-creation,Builtin,2,115973,0x7ff7c0c5a3c4,544,StringEqual
code-creation,Builtin,2,115979,0x7ff7c0c5a604,276,StringGreaterThan
code-creation,Builtin,2,115984,0x7ff7c0c5a724,276,StringGreaterThanOrEqual
code-creation,Builtin,2,115989,0x7ff7c0c5a844,276,StringLessThan
code-creation,Builtin,2,115994,0x7ff7c0c5a964,276,StringLessThanOrEqual
code-creation,Builtin,2,115999,0x7ff7c0c5aa84,2492,StringSubstring
code-creation,Builtin,2,116004,0x7ff7c0c5b444,80,OrderedHashTableHealIndex
code-creation,Builtin,2,116009,0x7ff7c0c5b4a4,1168,InterpreterEntryTrampoline
code-creation,Builtin,2,116015,0x7ff7c0c5b944,76,InterpreterPushArgsThenCall
code-creation,Builtin,2,116020,0x7ff7c0c5b9a4,84,InterpreterPushUndefinedAndArgsThenCall
code-creation,Builtin,2,116026,0x7ff7c0c5ba04,84,InterpreterPushArgsThenCallWithFinalSpread
code-creation,Builtin,2,116031,0x7ff7c0c5ba64,80,InterpreterPushArgsThenConstruct
code-creation,Builtin,2,116037,0x7ff7c0c5bac4,80,InterpreterPushArgsThenConstructArrayFunction
code-creation,Builtin,2,116042,0x7ff7c0c5bb24,84,InterpreterPushArgsThenConstructWithFinalSpread
code-creation,Builtin,2,116048,0x7ff7c0c5bb84,84,InterpreterEnterAtBytecode
code-creation,Builtin,2,116054,0x7ff7c0c5bbe4,220,InterpreterEnterAtNextBytecode
code-creation,Builtin,2,116059,0x7ff7c0c5bcc4,52,InterpreterOnStackReplacement
code-creation,Builtin,2,116065,0x7ff7c0c5bd04,592,BaselineOutOfLinePrologue
code-creation,Builtin,2,116070,0x7ff7c0c5bf64,56,BaselineOnStackReplacement
code-creation,Builtin,2,116075,0x7ff7c0c5bfa4,84,BaselineLeaveFrame
code-creation,Builtin,2,116080,0x7ff7c0c5c004,216,BaselineOrInterpreterEnterAtBytecode
code-creation,Builtin,2,116085,0x7ff7c0c5c0e4,224,BaselineOrInterpreterEnterAtNextBytecode
code-creation,Builtin,2,116091,0x7ff7c0c5c1e4,192,InterpreterOnStackReplacement_ToBaseline
code-creation,Builtin,2,116097,0x7ff7c0c5c2c4,1004,CompileLazy
code-creation,Builtin,2,116102,0x7ff7c0c5c6c4,68,CompileLazyDeoptimizedCode
code-creation,Builtin,2,116107,0x7ff7c0c5c724,252,InstantiateAsmJs
code-creation,Builtin,2,116112,0x7ff7c0c5c824,32,NotifyDeoptimized
code-creation,Builtin,2,116117,0x7ff7c0c5c864,796,DeoptimizationEntry_Eager
code-creation,Builtin,2,116122,0x7ff7c0c5cb84,796,DeoptimizationEntry_Soft
code-creation,Builtin,2,116127,0x7ff7c0c5cea4,796,DeoptimizationEntry_Bailout
code-creation,Builtin,2,116133,0x7ff7c0c5d1c4,796,DeoptimizationEntry_Lazy
code-creation,Builtin,2,116138,0x7ff7c0c5d4e4,52,ContinueToCodeStubBuiltin
code-creation,Builtin,2,116144,0x7ff7c0c5d524,60,ContinueToCodeStubBuiltinWithResult
code-creation,Builtin,2,116149,0x7ff7c0c5d564,56,ContinueToJavaScriptBuiltin
code-creation,Builtin,2,116154,0x7ff7c0c5d5a4,64,ContinueToJavaScriptBuiltinWithResult
code-creation,Builtin,2,116160,0x7ff7c0c5d604,288,CallApiCallback
code-creation,Builtin,2,116165,0x7ff7c0c5d744,268,CallApiGetter
code-creation,Builtin,2,116169,0x7ff7c0c5d864,12,HandleApiCall
code-creation,Builtin,2,116174,0x7ff7c0c5d884,12,HandleApiCallAsFunction
code-creation,Builtin,2,116180,0x7ff7c0c5d8a4,12,HandleApiCallAsConstructor
code-creation,Builtin,2,116185,0x7ff7c0c5d8c4,64,AllocateInYoungGeneration
code-creation,Builtin,2,116191,0x7ff7c0c5d924,52,AllocateRegularInYoungGeneration
code-creation,Builtin,2,116197,0x7ff7c0c5d964,64,AllocateInOldGeneration
code-creation,Builtin,2,116202,0x7ff7c0c5d9c4,52,AllocateRegularInOldGeneration
code-creation,Builtin,2,116207,0x7ff7c0c5da04,420,CopyFastSmiOrObjectElements
code-creation,Builtin,2,116213,0x7ff7c0c5dbc4,496,GrowFastDoubleElements
code-creation,Builtin,2,116218,0x7ff7c0c5ddc4,400,GrowFastSmiOrObjectElements
code-creation,Builtin,2,116224,0x7ff7c0c5df64,388,DebugBreakTrampoline
code-creation,Builtin,2,116229,0x7ff7c0c5e104,180,ToNumber
code-creation,Builtin,2,116234,0x7ff7c0c5e1c4,292,ToNumber_Baseline
code-creation,Builtin,2,116239,0x7ff7c0c5e304,360,ToNumeric_Baseline
code-creation,Builtin,2,116244,0x7ff7c0c5e484,104,PlainPrimitiveToNumber
code-creation,Builtin,2,116249,0x7ff7c0c5e504,212,ToNumberConvertBigInt
code-creation,Builtin,2,116255,0x7ff7c0c5e5e4,132,Typeof
code-creation,Builtin,2,116260,0x7ff7c0c5e684,104,BigIntToI64
code-creation,Builtin,2,116265,0x7ff7c0c5e704,4,BigIntToI32Pair
code-creation,Builtin,2,116270,0x7ff7c0c5e724,232,I64ToBigInt
code-creation,Builtin,2,116275,0x7ff7c0c5e824,4,I32PairToBigInt
code-creation,Builtin,2,116279,0x7ff7c0c5e844,100,ToBooleanLazyDeoptContinuation
code-creation,Builtin,2,116285,0x7ff7c0c5e8c4,4232,KeyedLoadIC_PolymorphicName
code-creation,Builtin,2,116290,0x7ff7c0c5f964,15848,KeyedStoreIC_Megamorphic
code-creation,Builtin,2,116296,0x7ff7c0c63764,280,LoadGlobalIC_NoFeedback
code-creation,Builtin,2,116301,0x7ff7c0c63884,60,LoadIC_FunctionPrototype
code-creation,Builtin,2,116307,0x7ff7c0c638c4,12,LoadIC_StringLength
code-creation,Builtin,2,116312,0x7ff7c0c638e4,16,LoadIC_StringWrapperLength
code-creation,Builtin,2,116317,0x7ff7c0c63904,3056,LoadIC_NoFeedback
code-creation,Builtin,2,116322,0x7ff7c0c64504,32,StoreGlobalIC_Slow
code-creation,Builtin,2,116327,0x7ff7c0c64544,7332,StoreIC_NoFeedback
code-creation,Builtin,2,116332,0x7ff7c0c66204,180,KeyedLoadIC_SloppyArguments
code-creation,Builtin,2,116338,0x7ff7c0c662c4,72,LoadIndexedInterceptorIC
code-creation,Builtin,2,116343,0x7ff7c0c66324,236,KeyedStoreIC_SloppyArguments_Standard
code-creation,Builtin,2,116348,0x7ff7c0c66424,236,KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW
code-creation,Builtin,2,116354,0x7ff7c0c66524,236,KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB
code-creation,Builtin,2,116360,0x7ff7c0c66624,236,KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW
code-creation,Builtin,2,116366,0x7ff7c0c66724,14344,StoreFastElementIC_Standard
code-creation,Builtin,2,116371,0x7ff7c0c69f44,9616,StoreFastElementIC_GrowNoTransitionHandleCOW
code-creation,Builtin,2,116377,0x7ff7c0c6c4e4,13364,StoreFastElementIC_NoTransitionIgnoreOOB
code-creation,Builtin,2,116382,0x7ff7c0c6f924,6088,StoreFastElementIC_NoTransitionHandleCOW
code-creation,Builtin,2,116388,0x7ff7c0c71104,8484,ElementsTransitionAndStore_Standard
code-creation,Builtin,2,116394,0x7ff7c0c73244,19368,ElementsTransitionAndStore_GrowNoTransitionHandleCOW
code-creation,Builtin,2,116399,0x7ff7c0c77e04,8484,ElementsTransitionAndStore_NoTransitionIgnoreOOB
code-creation,Builtin,2,116405,0x7ff7c0c79f44,11024,ElementsTransitionAndStore_NoTransitionHandleCOW
code-creation,Builtin,2,116411,0x7ff7c0c7ca64,792,KeyedHasIC_PolymorphicName
code-creation,Builtin,2,116416,0x7ff7c0c7cd84,164,KeyedHasIC_SloppyArguments
code-creation,Builtin,2,116421,0x7ff7c0c7ce44,72,HasIndexedInterceptorIC
code-creation,Builtin,2,116427,0x7ff7c0c7cea4,96,DynamicCheckMapsTrampoline
code-creation,Builtin,2,116432,0x7ff7c0c7cf24,224,DynamicCheckMaps
code-creation,Builtin,2,116438,0x7ff7c0c7d024,96,DynamicCheckMapsWithFeedbackVectorTrampoline
code-creation,Builtin,2,116444,0x7ff7c0c7d0a4,188,DynamicCheckMapsWithFeedbackVector
code-creation,Builtin,2,116449,0x7ff7c0c7d164,152,EnqueueMicrotask
code-creation,Builtin,2,116454,0x7ff7c0c7d204,8,RunMicrotasksTrampoline
code-creation,Builtin,2,116460,0x7ff7c0c7d224,3476,RunMicrotasks
code-creation,Builtin,2,116465,0x7ff7c0c7dfc4,2636,HasProperty
code-creation,Builtin,2,116470,0x7ff7c0c7ea24,1156,DeleteProperty
code-creation,Builtin,2,116475,0x7ff7c0c7eec4,1972,CopyDataProperties
code-creation,Builtin,2,116480,0x7ff7c0c7f684,9184,SetDataProperties
code-creation,Builtin,2,116485,0x7ff7c0c81a84,28,Abort
code-creation,Builtin,2,116490,0x7ff7c0c81aa4,28,AbortCSAAssert
code-creation,Builtin,2,116495,0x7ff7c0c81ac4,12,EmptyFunction
code-creation,Builtin,2,116500,0x7ff7c0c81ae4,12,Illegal
code-creation,Builtin,2,116505,0x7ff7c0c81b04,12,StrictPoisonPillThrower
code-creation,Builtin,2,116510,0x7ff7c0c81b24,12,UnsupportedThrower
code-creation,Builtin,2,116515,0x7ff7c0c81b44,64,ReturnReceiver
code-creation,Builtin,2,116534,0x7ff7c0c81ba4,28,ArrayConstructor
code-creation,Builtin,2,116541,0x7ff7c0c81bc4,404,ArrayConstructorImpl
code-creation,Builtin,2,116546,0x7ff7c0c81d64,216,ArrayNoArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,116552,0x7ff7c0c81e44,216,ArrayNoArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,116558,0x7ff7c0c81f24,176,ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,116564,0x7ff7c0c81fe4,176,ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,116570,0x7ff7c0c820a4,176,ArrayNoArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,116576,0x7ff7c0c82164,176,ArrayNoArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,116582,0x7ff7c0c82224,188,ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,116589,0x7ff7c0c822e4,188,ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,116595,0x7ff7c0c823a4,512,ArraySingleArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,116601,0x7ff7c0c825c4,480,ArraySingleArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,116607,0x7ff7c0c827c4,436,ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,116613,0x7ff7c0c82984,404,ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,116619,0x7ff7c0c82b24,436,ArraySingleArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,116625,0x7ff7c0c82ce4,404,ArraySingleArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,116631,0x7ff7c0c82e84,448,ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,116637,0x7ff7c0c83064,412,ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,116643,0x7ff7c0c83204,64,ArrayNArgumentsConstructor
code-creation,Builtin,2,116649,0x7ff7c0c83264,12,ArrayConcat
code-creation,Builtin,2,116654,0x7ff7c0c83284,12,ArrayPrototypeFill
code-creation,Builtin,2,116659,0x7ff7c0c832a4,932,ArrayIncludesSmiOrObject
code-creation,Builtin,2,116664,0x7ff7c0c83664,140,ArrayIncludesPackedDoubles
code-creation,Builtin,2,116669,0x7ff7c0c83704,208,ArrayIncludesHoleyDoubles
code-creation,Builtin,2,116674,0x7ff7c0c837e4,548,ArrayIncludes
code-creation,Builtin,2,116679,0x7ff7c0c83a24,856,ArrayIndexOfSmiOrObject
code-creation,Builtin,2,116684,0x7ff7c0c83d84,116,ArrayIndexOfPackedDoubles
code-creation,Builtin,2,116690,0x7ff7c0c83e04,116,ArrayIndexOfHoleyDoubles
code-creation,Builtin,2,116695,0x7ff7c0c83e84,552,ArrayIndexOf
code-creation,Builtin,2,116700,0x7ff7c0c840c4,12,ArrayPop
code-creation,Builtin,2,116705,0x7ff7c0c840e4,616,ArrayPrototypePop
code-creation,Builtin,2,116710,0x7ff7c0c84364,12,ArrayPush
code-creation,Builtin,2,116715,0x7ff7c0c84384,2424,ArrayPrototypePush
code-creation,Builtin,2,116720,0x7ff7c0c84d04,12,ArrayShift
code-creation,Builtin,2,116725,0x7ff7c0c84d24,12,ArrayUnshift
code-creation,Builtin,2,116730,0x7ff7c0c84d44,956,CloneFastJSArray
code-creation,Builtin,2,116735,0x7ff7c0c85104,2196,CloneFastJSArrayFillingHoles
code-creation,Builtin,2,116740,0x7ff7c0c859a4,976,ExtractFastJSArray
code-creation,Builtin,2,116745,0x7ff7c0c85d84,260,ArrayPrototypeEntries
code-creation,Builtin,2,116751,0x7ff7c0c85ea4,248,ArrayPrototypeKeys
code-creation,Builtin,2,116756,0x7ff7c0c85fa4,260,ArrayPrototypeValues
code-creation,Builtin,2,116761,0x7ff7c0c860c4,4428,ArrayIteratorPrototypeNext
code-creation,Builtin,2,116766,0x7ff7c0c87224,4168,FlattenIntoArray
code-creation,Builtin,2,116771,0x7ff7c0c88284,4172,FlatMapIntoArray
code-creation,Builtin,2,116776,0x7ff7c0c892e4,372,ArrayPrototypeFlat
code-creation,Builtin,2,116781,0x7ff7c0c89464,428,ArrayPrototypeFlatMap
code-creation,Builtin,2,116787,0x7ff7c0c89624,12,ArrayBufferConstructor
code-creation,Builtin,2,116792,0x7ff7c0c89644,12,ArrayBufferConstructor_DoNotInitialize
code-creation,Builtin,2,116797,0x7ff7c0c89664,12,ArrayBufferPrototypeSlice
code-creation,Builtin,2,116802,0x7ff7c0c89684,12,ArrayBufferPrototypeResize
code-creation,Builtin,2,116808,0x7ff7c0c896a4,804,AsyncFunctionEnter
code-creation,Builtin,2,116814,0x7ff7c0c899e4,132,AsyncFunctionReject
code-creation,Builtin,2,116819,0x7ff7c0c89a84,128,AsyncFunctionResolve
code-creation,Builtin,2,116824,0x7ff7c0c89b24,12,AsyncFunctionLazyDeoptContinuation
code-creation,Builtin,2,116830,0x7ff7c0c89b44,2804,AsyncFunctionAwaitCaught
code-creation,Builtin,2,116835,0x7ff7c0c8a644,2804,AsyncFunctionAwaitUncaught
code-creation,Builtin,2,116840,0x7ff7c0c8b144,172,AsyncFunctionAwaitRejectClosure
code-creation,Builtin,2,116845,0x7ff7c0c8b204,164,AsyncFunctionAwaitResolveClosure
code-creation,Builtin,2,116851,0x7ff7c0c8b2c4,12,BigIntConstructor
code-creation,Builtin,2,116856,0x7ff7c0c8b2e4,12,BigIntAsUintN
code-creation,Builtin,2,116861,0x7ff7c0c8b304,12,BigIntAsIntN
code-creation,Builtin,2,116866,0x7ff7c0c8b324,12,BigIntPrototypeToLocaleString
code-creation,Builtin,2,116871,0x7ff7c0c8b344,12,BigIntPrototypeToString
code-creation,Builtin,2,116876,0x7ff7c0c8b364,12,BigIntPrototypeValueOf
code-creation,Builtin,2,116881,0x7ff7c0c8b384,12,CallSitePrototypeGetColumnNumber
code-creation,Builtin,2,116887,0x7ff7c0c8b3a4,12,CallSitePrototypeGetEnclosingColumnNumber
code-creation,Builtin,2,116892,0x7ff7c0c8b3c4,12,CallSitePrototypeGetEnclosingLineNumber
code-creation,Builtin,2,116898,0x7ff7c0c8b3e4,12,CallSitePrototypeGetEvalOrigin
code-creation,Builtin,2,116903,0x7ff7c0c8b404,12,CallSitePrototypeGetFileName
code-creation,Builtin,2,116909,0x7ff7c0c8b424,12,CallSitePrototypeGetFunction
code-creation,Builtin,2,116914,0x7ff7c0c8b444,12,CallSitePrototypeGetFunctionName
code-creation,Builtin,2,116919,0x7ff7c0c8b464,12,CallSitePrototypeGetLineNumber
code-creation,Builtin,2,116925,0x7ff7c0c8b484,12,CallSitePrototypeGetMethodName
code-creation,Builtin,2,116930,0x7ff7c0c8b4a4,12,CallSitePrototypeGetPosition
code-creation,Builtin,2,116935,0x7ff7c0c8b4c4,12,CallSitePrototypeGetPromiseIndex
code-creation,Builtin,2,116941,0x7ff7c0c8b4e4,12,CallSitePrototypeGetScriptNameOrSourceURL
code-creation,Builtin,2,116946,0x7ff7c0c8b504,12,CallSitePrototypeGetThis
code-creation,Builtin,2,116952,0x7ff7c0c8b524,12,CallSitePrototypeGetTypeName
code-creation,Builtin,2,116957,0x7ff7c0c8b544,12,CallSitePrototypeIsAsync
code-creation,Builtin,2,116962,0x7ff7c0c8b564,12,CallSitePrototypeIsConstructor
code-creation,Builtin,2,116967,0x7ff7c0c8b584,12,CallSitePrototypeIsEval
code-creation,Builtin,2,116972,0x7ff7c0c8b5a4,12,CallSitePrototypeIsNative
code-creation,Builtin,2,116977,0x7ff7c0c8b5c4,12,CallSitePrototypeIsPromiseAll
code-creation,Builtin,2,116983,0x7ff7c0c8b5e4,12,CallSitePrototypeIsToplevel
code-creation,Builtin,2,116988,0x7ff7c0c8b604,12,CallSitePrototypeToString
code-creation,Builtin,2,116994,0x7ff7c0c8b624,12,ConsoleDebug
code-creation,Builtin,2,116998,0x7ff7c0c8b644,12,ConsoleError
code-creation,Builtin,2,117003,0x7ff7c0c8b664,12,ConsoleInfo
code-creation,Builtin,2,117008,0x7ff7c0c8b684,12,ConsoleLog
code-creation,Builtin,2,117013,0x7ff7c0c8b6a4,12,ConsoleWarn
code-creation,Builtin,2,117017,0x7ff7c0c8b6c4,12,ConsoleDir
code-creation,Builtin,2,117023,0x7ff7c0c8b6e4,12,ConsoleDirXml
code-creation,Builtin,2,117028,0x7ff7c0c8b704,12,ConsoleTable
code-creation,Builtin,2,117032,0x7ff7c0c8b724,12,ConsoleTrace
code-creation,Builtin,2,117037,0x7ff7c0c8b744,12,ConsoleGroup
code-creation,Builtin,2,117042,0x7ff7c0c8b764,12,ConsoleGroupCollapsed
code-creation,Builtin,2,117047,0x7ff7c0c8b784,12,ConsoleGroupEnd
code-creation,Builtin,2,117052,0x7ff7c0c8b7a4,12,ConsoleClear
code-creation,Builtin,2,117057,0x7ff7c0c8b7c4,12,ConsoleCount
code-creation,Builtin,2,117062,0x7ff7c0c8b7e4,12,ConsoleCountReset
code-creation,Builtin,2,117067,0x7ff7c0c8b804,12,ConsoleAssert
code-creation,Builtin,2,117072,0x7ff7c0c8b824,12,ConsoleProfile
code-creation,Builtin,2,117077,0x7ff7c0c8b844,12,ConsoleProfileEnd
code-creation,Builtin,2,117082,0x7ff7c0c8b864,12,ConsoleTime
code-creation,Builtin,2,117087,0x7ff7c0c8b884,12,ConsoleTimeLog
code-creation,Builtin,2,117092,0x7ff7c0c8b8a4,12,ConsoleTimeEnd
code-creation,Builtin,2,117097,0x7ff7c0c8b8c4,12,ConsoleTimeStamp
code-creation,Builtin,2,117103,0x7ff7c0c8b8e4,12,ConsoleContext
code-creation,Builtin,2,117108,0x7ff7c0c8b904,12,DataViewConstructor
code-creation,Builtin,2,117113,0x7ff7c0c8b924,12,DateConstructor
code-creation,Builtin,2,117119,0x7ff7c0c8b944,216,DatePrototypeGetDate
code-creation,Builtin,2,117124,0x7ff7c0c8ba24,216,DatePrototypeGetDay
code-creation,Builtin,2,117129,0x7ff7c0c8bb04,216,DatePrototypeGetFullYear
code-creation,Builtin,2,117134,0x7ff7c0c8bbe4,216,DatePrototypeGetHours
code-creation,Builtin,2,117139,0x7ff7c0c8bcc4,196,DatePrototypeGetMilliseconds
code-creation,Builtin,2,117145,0x7ff7c0c8bda4,216,DatePrototypeGetMinutes
code-creation,Builtin,2,117150,0x7ff7c0c8be84,216,DatePrototypeGetMonth
code-creation,Builtin,2,117155,0x7ff7c0c8bf64,216,DatePrototypeGetSeconds
code-creation,Builtin,2,117161,0x7ff7c0c8c044,124,DatePrototypeGetTime
code-creation,Builtin,2,117166,0x7ff7c0c8c0c4,196,DatePrototypeGetTimezoneOffset
code-creation,Builtin,2,117171,0x7ff7c0c8c1a4,196,DatePrototypeGetUTCDate
code-creation,Builtin,2,117176,0x7ff7c0c8c284,196,DatePrototypeGetUTCDay
code-creation,Builtin,2,117181,0x7ff7c0c8c364,196,DatePrototypeGetUTCFullYear
code-creation,Builtin,2,117187,0x7ff7c0c8c444,196,DatePrototypeGetUTCHours
code-creation,Builtin,2,117192,0x7ff7c0c8c524,196,DatePrototypeGetUTCMilliseconds
code-creation,Builtin,2,117197,0x7ff7c0c8c604,196,DatePrototypeGetUTCMinutes
code-creation,Builtin,2,117203,0x7ff7c0c8c6e4,196,DatePrototypeGetUTCMonth
code-creation,Builtin,2,117208,0x7ff7c0c8c7c4,196,DatePrototypeGetUTCSeconds
code-creation,Builtin,2,117213,0x7ff7c0c8c8a4,124,DatePrototypeValueOf
code-creation,Builtin,2,117218,0x7ff7c0c8c924,352,DatePrototypeToPrimitive
code-creation,Builtin,2,117223,0x7ff7c0c8caa4,12,DatePrototypeGetYear
code-creation,Builtin,2,117228,0x7ff7c0c8cac4,12,DatePrototypeSetYear
code-creation,Builtin,2,117234,0x7ff7c0c8cae4,12,DateNow
code-creation,Builtin,2,117239,0x7ff7c0c8cb04,12,DateParse
code-creation,Builtin,2,117244,0x7ff7c0c8cb24,12,DatePrototypeSetDate
code-creation,Builtin,2,117249,0x7ff7c0c8cb44,12,DatePrototypeSetFullYear
code-creation,Builtin,2,117254,0x7ff7c0c8cb64,12,DatePrototypeSetHours
code-creation,Builtin,2,117259,0x7ff7c0c8cb84,12,DatePrototypeSetMilliseconds
code-creation,Builtin,2,117264,0x7ff7c0c8cba4,12,DatePrototypeSetMinutes
code-creation,Builtin,2,117269,0x7ff7c0c8cbc4,12,DatePrototypeSetMonth
code-creation,Builtin,2,117275,0x7ff7c0c8cbe4,12,DatePrototypeSetSeconds
code-creation,Builtin,2,117280,0x7ff7c0c8cc04,12,DatePrototypeSetTime
code-creation,Builtin,2,117285,0x7ff7c0c8cc24,12,DatePrototypeSetUTCDate
code-creation,Builtin,2,117291,0x7ff7c0c8cc44,12,DatePrototypeSetUTCFullYear
code-creation,Builtin,2,117296,0x7ff7c0c8cc64,12,DatePrototypeSetUTCHours
code-creation,Builtin,2,117301,0x7ff7c0c8cc84,12,DatePrototypeSetUTCMilliseconds
code-creation,Builtin,2,117307,0x7ff7c0c8cca4,12,DatePrototypeSetUTCMinutes
code-creation,Builtin,2,117312,0x7ff7c0c8ccc4,12,DatePrototypeSetUTCMonth
code-creation,Builtin,2,117318,0x7ff7c0c8cce4,12,DatePrototypeSetUTCSeconds
code-creation,Builtin,2,117323,0x7ff7c0c8cd04,12,DatePrototypeToDateString
code-creation,Builtin,2,117328,0x7ff7c0c8cd24,12,DatePrototypeToISOString
code-creation,Builtin,2,117351,0x7ff7c0c8cd44,12,DatePrototypeToUTCString
code-creation,Builtin,2,117357,0x7ff7c0c8cd64,12,DatePrototypeToString
code-creation,Builtin,2,117362,0x7ff7c0c8cd84,12,DatePrototypeToTimeString
code-creation,Builtin,2,117367,0x7ff7c0c8cda4,12,DatePrototypeToJson
code-creation,Builtin,2,117372,0x7ff7c0c8cdc4,12,DateUTC
code-creation,Builtin,2,117377,0x7ff7c0c8cde4,12,ErrorConstructor
code-creation,Builtin,2,117384,0x7ff7c0c8ce04,12,ErrorCaptureStackTrace
code-creation,Builtin,2,117390,0x7ff7c0c8ce24,12,ErrorPrototypeToString
code-creation,Builtin,2,117395,0x7ff7c0c8ce44,12,FunctionConstructor
code-creation,Builtin,2,117400,0x7ff7c0c8ce64,68,FunctionPrototypeApply
code-creation,Builtin,2,117405,0x7ff7c0c8cec4,12,FunctionPrototypeBind
code-creation,Builtin,2,117411,0x7ff7c0c8cee4,32,FunctionPrototypeCall
code-creation,Builtin,2,117416,0x7ff7c0c8cf24,12,FunctionPrototypeToString
code-creation,Builtin,2,117422,0x7ff7c0c8cf44,192,CreateIterResultObject
code-creation,Builtin,2,117428,0x7ff7c0c8d024,788,CreateGeneratorObject
code-creation,Builtin,2,117433,0x7ff7c0c8d344,12,GeneratorFunctionConstructor
code-creation,Builtin,2,117439,0x7ff7c0c8d364,412,GeneratorPrototypeNext
code-creation,Builtin,2,117445,0x7ff7c0c8d504,420,GeneratorPrototypeReturn
code-creation,Builtin,2,117451,0x7ff7c0c8d6c4,424,GeneratorPrototypeThrow
code-creation,Builtin,2,117457,0x7ff7c0c8d884,12,AsyncFunctionConstructor
code-creation,Builtin,2,117463,0x7ff7c0c8d8a4,372,SuspendGeneratorBaseline
code-creation,Builtin,2,117469,0x7ff7c0c8da24,88,ResumeGeneratorBaseline
code-creation,Builtin,2,117475,0x7ff7c0c8da84,36,GetIteratorWithFeedbackLazyDeoptContinuation
code-creation,Builtin,2,117481,0x7ff7c0c8dac4,12,GlobalDecodeURI
code-creation,Builtin,2,117487,0x7ff7c0c8dae4,12,GlobalDecodeURIComponent
code-creation,Builtin,2,117493,0x7ff7c0c8db04,12,GlobalEncodeURI
code-creation,Builtin,2,117499,0x7ff7c0c8db24,12,GlobalEncodeURIComponent
code-creation,Builtin,2,117505,0x7ff7c0c8db44,12,GlobalEscape
code-creation,Builtin,2,117510,0x7ff7c0c8db64,12,GlobalUnescape
code-creation,Builtin,2,117516,0x7ff7c0c8db84,12,GlobalEval
code-creation,Builtin,2,117521,0x7ff7c0c8dba4,132,GlobalIsFinite
code-creation,Builtin,2,117526,0x7ff7c0c8dc44,124,GlobalIsNaN
code-creation,Builtin,2,117532,0x7ff7c0c8dcc4,12,JsonParse
code-creation,Builtin,2,117537,0x7ff7c0c8dce4,12,JsonStringify
code-creation,Builtin,2,117543,0x7ff7c0c8dd04,4608,LoadIC
code-creation,Builtin,2,117549,0x7ff7c0c8ef24,4296,LoadIC_Megamorphic
code-creation,Builtin,2,117555,0x7ff7c0c90004,4520,LoadIC_Noninlined
code-creation,Builtin,2,117560,0x7ff7c0c911c4,44,LoadICTrampoline
code-creation,Builtin,2,117566,0x7ff7c0c91204,24,LoadICBaseline
code-creation,Builtin,2,117571,0x7ff7c0c91224,44,LoadICTrampoline_Megamorphic
code-creation,Builtin,2,117577,0x7ff7c0c91264,7376,LoadSuperIC
code-creation,Builtin,2,117582,0x7ff7c0c92f44,24,LoadSuperICBaseline
code-creation,Builtin,2,117588,0x7ff7c0c92f64,8148,KeyedLoadIC
code-creation,Builtin,2,117593,0x7ff7c0c94f44,13088,KeyedLoadIC_Megamorphic
code-creation,Builtin,2,117599,0x7ff7c0c98284,44,KeyedLoadICTrampoline
code-creation,Builtin,2,117604,0x7ff7c0c982c4,24,KeyedLoadICBaseline
code-creation,Builtin,2,117610,0x7ff7c0c982e4,44,KeyedLoadICTrampoline_Megamorphic
code-creation,Builtin,2,117616,0x7ff7c0c98324,5104,StoreGlobalIC
code-creation,Builtin,2,117622,0x7ff7c0c99724,44,StoreGlobalICTrampoline
code-creation,Builtin,2,117627,0x7ff7c0c99764,24,StoreGlobalICBaseline
code-creation,Builtin,2,117633,0x7ff7c0c99784,5340,StoreIC
code-creation,Builtin,2,117638,0x7ff7c0c9ac64,44,StoreICTrampoline
code-creation,Builtin,2,117643,0x7ff7c0c9aca4,24,StoreICBaseline
code-creation,Builtin,2,117649,0x7ff7c0c9acc4,5780,KeyedStoreIC
code-creation,Builtin,2,117655,0x7ff7c0c9c364,44,KeyedStoreICTrampoline
code-creation,Builtin,2,117661,0x7ff7c0c9c3a4,24,KeyedStoreICBaseline
code-creation,Builtin,2,117666,0x7ff7c0c9c3c4,404,StoreInArrayLiteralIC
code-creation,Builtin,2,117672,0x7ff7c0c9c564,24,StoreInArrayLiteralICBaseline
code-creation,Builtin,2,117678,0x7ff7c0c9c584,140,LookupContextBaseline
code-creation,Builtin,2,117683,0x7ff7c0c9c624,140,LookupContextInsideTypeofBaseline
code-creation,Builtin,2,117689,0x7ff7c0c9c6c4,3244,LoadGlobalIC
code-creation,Builtin,2,117695,0x7ff7c0c9d384,3220,LoadGlobalICInsideTypeof
code-creation,Builtin,2,117700,0x7ff7c0c9e024,44,LoadGlobalICTrampoline
code-creation,Builtin,2,117706,0x7ff7c0c9e064,24,LoadGlobalICBaseline
code-creation,Builtin,2,117711,0x7ff7c0c9e084,44,LoadGlobalICInsideTypeofTrampoline
code-creation,Builtin,2,117717,0x7ff7c0c9e0c4,24,LoadGlobalICInsideTypeofBaseline
code-creation,Builtin,2,117722,0x7ff7c0c9e0e4,140,LookupGlobalICBaseline
code-creation,Builtin,2,117727,0x7ff7c0c9e184,140,LookupGlobalICInsideTypeofBaseline
code-creation,Builtin,2,117733,0x7ff7c0c9e224,2064,CloneObjectIC
code-creation,Builtin,2,117738,0x7ff7c0c9ea44,24,CloneObjectICBaseline
code-creation,Builtin,2,117755,0x7ff7c0c9ea64,1988,CloneObjectIC_Slow
code-creation,Builtin,2,117762,0x7ff7c0c9f244,2756,KeyedHasIC
code-creation,Builtin,2,117767,0x7ff7c0c9fd24,24,KeyedHasICBaseline
code-creation,Builtin,2,117772,0x7ff7c0c9fd44,2640,KeyedHasIC_Megamorphic
code-creation,Builtin,2,117777,0x7ff7c0ca07a4,1436,IterableToList
code-creation,Builtin,2,117782,0x7ff7c0ca0d44,1240,IterableToFixedArray
code-creation,Builtin,2,117788,0x7ff7c0ca1224,748,IterableToListWithSymbolLookup
code-creation,Builtin,2,117794,0x7ff7c0ca1524,56,IterableToFixedArrayWithSymbolLookupSlow
code-creation,Builtin,2,117800,0x7ff7c0ca1564,124,IterableToListMayPreserveHoles
code-creation,Builtin,2,117806,0x7ff7c0ca15e4,984,IterableToFixedArrayForWasm
code-creation,Builtin,2,117812,0x7ff7c0ca19c4,1616,StringListFromIterable
code-creation,Builtin,2,117817,0x7ff7c0ca2024,1228,FindOrderedHashMapEntry
code-creation,Builtin,2,117823,0x7ff7c0ca2504,4156,MapConstructor
code-creation,Builtin,2,117828,0x7ff7c0ca3544,1996,MapPrototypeSet
code-creation,Builtin,2,117833,0x7ff7c0ca3d24,1524,MapPrototypeDelete
code-creation,Builtin,2,117838,0x7ff7c0ca4324,204,MapPrototypeGet
code-creation,Builtin,2,117843,0x7ff7c0ca4404,164,MapPrototypeHas
code-creation,Builtin,2,117847,0x7ff7c0ca44c4,12,MapPrototypeClear
code-creation,Builtin,2,117853,0x7ff7c0ca44e4,284,MapPrototypeEntries
code-creation,Builtin,2,117858,0x7ff7c0ca4604,144,MapPrototypeGetSize
code-creation,Builtin,2,117863,0x7ff7c0ca46a4,492,MapPrototypeForEach
code-creation,Builtin,2,117869,0x7ff7c0ca48a4,284,MapPrototypeKeys
code-creation,Builtin,2,117874,0x7ff7c0ca49c4,284,MapPrototypeValues
code-creation,Builtin,2,117879,0x7ff7c0ca4ae4,1052,MapIteratorPrototypeNext
code-creation,Builtin,2,117885,0x7ff7c0ca4f04,1168,MapIteratorToList
code-creation,Builtin,2,117891,0x7ff7c0ca53a4,12,NumberPrototypeToExponential
code-creation,Builtin,2,117897,0x7ff7c0ca53c4,12,NumberPrototypeToFixed
code-creation,Builtin,2,117903,0x7ff7c0ca53e4,12,NumberPrototypeToLocaleString
code-creation,Builtin,2,117909,0x7ff7c0ca5404,12,NumberPrototypeToPrecision
code-creation,Builtin,2,117915,0x7ff7c0ca5424,328,SameValue
code-creation,Builtin,2,117921,0x7ff7c0ca5584,204,SameValueNumbersOnly
code-creation,Builtin,2,117927,0x7ff7c0ca5664,792,Add_Baseline
code-creation,Builtin,2,117932,0x7ff7c0ca5984,828,Subtract_Baseline
code-creation,Builtin,2,117937,0x7ff7c0ca5cc4,808,Multiply_Baseline
code-creation,Builtin,2,117942,0x7ff7c0ca6004,832,Divide_Baseline
code-creation,Builtin,2,117948,0x7ff7c0ca6364,764,Modulus_Baseline
code-creation,Builtin,2,117953,0x7ff7c0ca6664,808,Exponentiate_Baseline
code-creation,Builtin,2,117958,0x7ff7c0ca69a4,708,BitwiseAnd_Baseline
code-creation,Builtin,2,117964,0x7ff7c0ca6c84,700,BitwiseOr_Baseline
code-creation,Builtin,2,117970,0x7ff7c0ca6f44,708,BitwiseXor_Baseline
code-creation,Builtin,2,117976,0x7ff7c0ca7224,720,ShiftLeft_Baseline
code-creation,Builtin,2,117981,0x7ff7c0ca7504,720,ShiftRight_Baseline
code-creation,Builtin,2,117987,0x7ff7c0ca77e4,836,ShiftRightLogical_Baseline
code-creation,Builtin,2,117992,0x7ff7c0ca7b44,720,Add_WithFeedback
code-creation,Builtin,2,117997,0x7ff7c0ca7e24,780,Subtract_WithFeedback
code-creation,Builtin,2,118002,0x7ff7c0ca8144,776,Multiply_WithFeedback
code-creation,Builtin,2,118007,0x7ff7c0ca8464,804,Divide_WithFeedback
code-creation,Builtin,2,118012,0x7ff7c0ca87a4,724,Modulus_WithFeedback
code-creation,Builtin,2,118018,0x7ff7c0ca8a84,764,Exponentiate_WithFeedback
code-creation,Builtin,2,118023,0x7ff7c0ca8d84,684,BitwiseAnd_WithFeedback
code-creation,Builtin,2,118029,0x7ff7c0ca9044,676,BitwiseOr_WithFeedback
code-creation,Builtin,2,118034,0x7ff7c0ca9304,684,BitwiseXor_WithFeedback
code-creation,Builtin,2,118039,0x7ff7c0ca95c4,692,ShiftLeft_WithFeedback
code-creation,Builtin,2,118044,0x7ff7c0ca9884,692,ShiftRight_WithFeedback
code-creation,Builtin,2,118049,0x7ff7c0ca9b44,808,ShiftRightLogical_WithFeedback
code-creation,Builtin,2,118055,0x7ff7c0ca9e84,1696,Equal_Baseline
code-creation,Builtin,2,118061,0x7ff7c0caa544,908,StrictEqual_Baseline
code-creation,Builtin,2,118067,0x7ff7c0caa8e4,1264,LessThan_Baseline
code-creation,Builtin,2,118082,0x7ff7c0caade4,1264,GreaterThan_Baseline
code-creation,Builtin,2,118089,0x7ff7c0cab2e4,1264,LessThanOrEqual_Baseline
code-creation,Builtin,2,118095,0x7ff7c0cab7e4,1264,GreaterThanOrEqual_Baseline
code-creation,Builtin,2,118100,0x7ff7c0cabce4,1620,Equal_WithFeedback
code-creation,Builtin,2,118105,0x7ff7c0cac344,940,StrictEqual_WithFeedback
code-creation,Builtin,2,118111,0x7ff7c0cac704,1240,LessThan_WithFeedback
code-creation,Builtin,2,118116,0x7ff7c0cacbe4,1240,GreaterThan_WithFeedback
code-creation,Builtin,2,118121,0x7ff7c0cad0c4,1240,LessThanOrEqual_WithFeedback
code-creation,Builtin,2,118126,0x7ff7c0cad5a4,1240,GreaterThanOrEqual_WithFeedback
code-creation,Builtin,2,118132,0x7ff7c0cada84,332,BitwiseNot_Baseline
code-creation,Builtin,2,118137,0x7ff7c0cadbe4,460,Decrement_Baseline
code-creation,Builtin,2,118142,0x7ff7c0caddc4,464,Increment_Baseline
code-creation,Builtin,2,118148,0x7ff7c0cadfa4,488,Negate_Baseline
code-creation,Builtin,2,118153,0x7ff7c0cae1a4,316,BitwiseNot_WithFeedback
code-creation,Builtin,2,118158,0x7ff7c0cae2e4,440,Decrement_WithFeedback
code-creation,Builtin,2,118163,0x7ff7c0cae4a4,444,Increment_WithFeedback
code-creation,Builtin,2,118168,0x7ff7c0cae664,472,Negate_WithFeedback
code-creation,Builtin,2,118173,0x7ff7c0cae844,252,ObjectAssign
code-creation,Builtin,2,118178,0x7ff7c0cae944,864,ObjectCreate
code-creation,Builtin,2,118183,0x7ff7c0caecc4,12,ObjectDefineGetter
code-creation,Builtin,2,118188,0x7ff7c0caece4,12,ObjectDefineProperties
code-creation,Builtin,2,118194,0x7ff7c0caed04,12,ObjectDefineProperty
code-creation,Builtin,2,118200,0x7ff7c0caed24,12,ObjectDefineSetter
code-creation,Builtin,2,118204,0x7ff7c0caed44,1516,ObjectEntries
code-creation,Builtin,2,118209,0x7ff7c0caf344,12,ObjectFreeze
code-creation,Builtin,2,118214,0x7ff7c0caf364,5620,ObjectGetOwnPropertyDescriptor
code-creation,Builtin,2,118220,0x7ff7c0cb0964,12,ObjectGetOwnPropertyDescriptors
code-creation,Builtin,2,118225,0x7ff7c0cb0984,600,ObjectGetOwnPropertyNames
code-creation,Builtin,2,118230,0x7ff7c0cb0be4,12,ObjectGetOwnPropertySymbols
code-creation,Builtin,2,118236,0x7ff7c0cb0c04,164,ObjectHasOwn
code-creation,Builtin,2,118241,0x7ff7c0cb0cc4,388,ObjectIs
code-creation,Builtin,2,118247,0x7ff7c0cb0e64,12,ObjectIsFrozen
code-creation,Builtin,2,118252,0x7ff7c0cb0e84,12,ObjectIsSealed
code-creation,Builtin,2,118258,0x7ff7c0cb0ea4,536,ObjectKeys
code-creation,Builtin,2,118264,0x7ff7c0cb10c4,12,ObjectLookupGetter
code-creation,Builtin,2,118269,0x7ff7c0cb10e4,12,ObjectLookupSetter
code-creation,Builtin,2,118275,0x7ff7c0cb1104,2280,ObjectPrototypeHasOwnProperty
code-creation,Builtin,2,118280,0x7ff7c0cb1a04,216,ObjectPrototypeIsPrototypeOf
code-creation,Builtin,2,118287,0x7ff7c0cb1ae4,12,ObjectPrototypePropertyIsEnumerable
code-creation,Builtin,2,118293,0x7ff7c0cb1b04,12,ObjectPrototypeGetProto
code-creation,Builtin,2,118299,0x7ff7c0cb1b24,12,ObjectPrototypeSetProto
code-creation,Builtin,2,118304,0x7ff7c0cb1b44,12,ObjectSeal
code-creation,Builtin,2,118309,0x7ff7c0cb1b64,1108,ObjectToString
code-creation,Builtin,2,118315,0x7ff7c0cb1fc4,1284,ObjectValues
code-creation,Builtin,2,118319,0x7ff7c0cb24e4,280,OrdinaryHasInstance
code-creation,Builtin,2,118325,0x7ff7c0cb2604,344,InstanceOf
code-creation,Builtin,2,118330,0x7ff7c0cb2764,632,InstanceOf_WithFeedback
code-creation,Builtin,2,118335,0x7ff7c0cb29e4,648,InstanceOf_Baseline
code-creation,Builtin,2,118340,0x7ff7c0cb2c84,268,ForInEnumerate
code-creation,Builtin,2,118345,0x7ff7c0cb2da4,148,ForInPrepare
code-creation,Builtin,2,118350,0x7ff7c0cb2e44,2584,ForInFilter
code-creation,Builtin,2,118355,0x7ff7c0cb3864,52,ReflectApply
code-creation,Builtin,2,118361,0x7ff7c0cb38a4,60,ReflectConstruct
code-creation,Builtin,2,118367,0x7ff7c0cb38e4,12,ReflectDefineProperty
code-creation,Builtin,2,118372,0x7ff7c0cb3904,12,ReflectGetOwnPropertyDescriptor
code-creation,Builtin,2,118378,0x7ff7c0cb3924,12,ReflectOwnKeys
code-creation,Builtin,2,118383,0x7ff7c0cb3944,12,ReflectSet
code-creation,Builtin,2,118389,0x7ff7c0cb3964,12,RegExpCapture1Getter
code-creation,Builtin,2,118404,0x7ff7c0cb3984,12,RegExpCapture2Getter
code-creation,Builtin,2,118411,0x7ff7c0cb39a4,12,RegExpCapture3Getter
code-creation,Builtin,2,118418,0x7ff7c0cb39c4,12,RegExpCapture4Getter
code-creation,Builtin,2,118423,0x7ff7c0cb39e4,12,RegExpCapture5Getter
code-creation,Builtin,2,118428,0x7ff7c0cb3a04,12,RegExpCapture6Getter
code-creation,Builtin,2,118433,0x7ff7c0cb3a24,12,RegExpCapture7Getter
code-creation,Builtin,2,118438,0x7ff7c0cb3a44,12,RegExpCapture8Getter
code-creation,Builtin,2,118444,0x7ff7c0cb3a64,12,RegExpCapture9Getter
code-creation,Builtin,2,118449,0x7ff7c0cb3a84,2212,RegExpConstructor
code-creation,Builtin,2,118454,0x7ff7c0cb4344,12,RegExpInputGetter
code-creation,Builtin,2,118459,0x7ff7c0cb4364,12,RegExpInputSetter
code-creation,Builtin,2,118465,0x7ff7c0cb4384,12,RegExpLastMatchGetter
code-creation,Builtin,2,118470,0x7ff7c0cb43a4,12,RegExpLastParenGetter
code-creation,Builtin,2,118475,0x7ff7c0cb43c4,12,RegExpLeftContextGetter
code-creation,Builtin,2,118480,0x7ff7c0cb43e4,908,RegExpPrototypeCompile
code-creation,Builtin,2,118485,0x7ff7c0cb4784,12,RegExpPrototypeToString
code-creation,Builtin,2,118491,0x7ff7c0cb47a4,12,RegExpRightContextGetter
code-creation,Builtin,2,118496,0x7ff7c0cb47c4,252,RegExpExecAtom
code-creation,Builtin,2,118501,0x7ff7c0cb48c4,1040,RegExpExecInternal
code-creation,Builtin,2,118506,0x7ff7c0cb4ce4,8,RegExpInterpreterTrampoline
code-creation,Builtin,2,118512,0x7ff7c0cb4d04,8,RegExpExperimentalTrampoline
code-creation,Builtin,2,118517,0x7ff7c0cb4d24,2684,SetConstructor
code-creation,Builtin,2,118522,0x7ff7c0cb57a4,1284,SetPrototypeHas
code-creation,Builtin,2,118527,0x7ff7c0cb5cc4,1736,SetPrototypeAdd
code-creation,Builtin,2,118532,0x7ff7c0cb63a4,1476,SetPrototypeDelete
code-creation,Builtin,2,118537,0x7ff7c0cb6984,12,SetPrototypeClear
code-creation,Builtin,2,118543,0x7ff7c0cb69a4,284,SetPrototypeEntries
code-creation,Builtin,2,118548,0x7ff7c0cb6ac4,144,SetPrototypeGetSize
code-creation,Builtin,2,118553,0x7ff7c0cb6b64,444,SetPrototypeForEach
code-creation,Builtin,2,118558,0x7ff7c0cb6d24,284,SetPrototypeValues
code-creation,Builtin,2,118563,0x7ff7c0cb6e44,988,SetIteratorPrototypeNext
code-creation,Builtin,2,118568,0x7ff7c0cb7224,1112,SetOrSetIteratorToList
code-creation,Builtin,2,118573,0x7ff7c0cb7684,12,SharedArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,118579,0x7ff7c0cb76a4,12,SharedArrayBufferPrototypeSlice
code-creation,Builtin,2,118585,0x7ff7c0cb76c4,12,SharedArrayBufferPrototypeGrow
code-creation,Builtin,2,118590,0x7ff7c0cb76e4,1280,AtomicsLoad
code-creation,Builtin,2,118595,0x7ff7c0cb7c04,1008,AtomicsStore
code-creation,Builtin,2,118601,0x7ff7c0cb8004,1704,AtomicsExchange
code-creation,Builtin,2,118606,0x7ff7c0cb86c4,2092,AtomicsCompareExchange
code-creation,Builtin,2,118612,0x7ff7c0cb8f04,1804,AtomicsAdd
code-creation,Builtin,2,118617,0x7ff7c0cb9624,1804,AtomicsSub
code-creation,Builtin,2,118623,0x7ff7c0cb9d44,1804,AtomicsAnd
code-creation,Builtin,2,118629,0x7ff7c0cba464,1804,AtomicsOr
code-creation,Builtin,2,118634,0x7ff7c0cbab84,1804,AtomicsXor
code-creation,Builtin,2,118639,0x7ff7c0cbb2a4,12,AtomicsNotify
code-creation,Builtin,2,118644,0x7ff7c0cbb2c4,12,AtomicsIsLockFree
code-creation,Builtin,2,118649,0x7ff7c0cbb2e4,12,AtomicsWait
code-creation,Builtin,2,118654,0x7ff7c0cbb304,12,AtomicsWaitAsync
code-creation,Builtin,2,118659,0x7ff7c0cbb324,12,StringFromCodePoint
code-creation,Builtin,2,118664,0x7ff7c0cbb344,1428,StringFromCharCode
code-creation,Builtin,2,118669,0x7ff7c0cbb8e4,12,StringPrototypeLastIndexOf
code-creation,Builtin,2,118674,0x7ff7c0cbb904,4360,StringPrototypeMatchAll
code-creation,Builtin,2,118680,0x7ff7c0cbca24,12,StringPrototypeLocaleCompare
code-creation,Builtin,2,118685,0x7ff7c0cbca44,1228,StringPrototypeReplace
code-creation,Builtin,2,118691,0x7ff7c0cbcf24,2900,StringPrototypeSplit
code-creation,Builtin,2,118696,0x7ff7c0cbda84,12,StringRaw
code-creation,Builtin,2,118701,0x7ff7c0cbdaa4,12,SymbolConstructor
code-creation,Builtin,2,118706,0x7ff7c0cbdac4,12,SymbolFor
code-creation,Builtin,2,118711,0x7ff7c0cbdae4,12,SymbolKeyFor
code-creation,Builtin,2,118798,0x7ff7c0cbdb04,88,TypedArrayBaseConstructor
code-creation,Builtin,2,118806,0x7ff7c0cbdb64,256,TypedArrayConstructor
code-creation,Builtin,2,118811,0x7ff7c0cbdc84,12,TypedArrayPrototypeBuffer
code-creation,Builtin,2,118816,0x7ff7c0cbdca4,888,TypedArrayPrototypeByteLength
code-creation,Builtin,2,118822,0x7ff7c0cbe024,368,TypedArrayPrototypeByteOffset
code-creation,Builtin,2,118827,0x7ff7c0cbe1a4,584,TypedArrayPrototypeLength
code-creation,Builtin,2,118832,0x7ff7c0cbe404,12,TypedArrayPrototypeCopyWithin
code-creation,Builtin,2,118838,0x7ff7c0cbe424,12,TypedArrayPrototypeFill
code-creation,Builtin,2,118843,0x7ff7c0cbe444,12,TypedArrayPrototypeIncludes
code-creation,Builtin,2,118848,0x7ff7c0cbe464,12,TypedArrayPrototypeIndexOf
code-creation,Builtin,2,118853,0x7ff7c0cbe484,12,TypedArrayPrototypeLastIndexOf
code-creation,Builtin,2,118859,0x7ff7c0cbe4a4,12,TypedArrayPrototypeReverse
code-creation,Builtin,2,118864,0x7ff7c0cbe4c4,316,TypedArrayPrototypeToStringTag
code-creation,Builtin,2,118869,0x7ff7c0cbe604,10664,TypedArrayPrototypeMap
code-creation,Builtin,2,118875,0x7ff7c0cc0fc4,792,GenericJSToWasmWrapper
code-creation,Builtin,2,118880,0x7ff7c0cc12e4,148,WasmCompileLazy
code-creation,Builtin,2,118885,0x7ff7c0cc1384,168,WasmDebugBreak
code-creation,Builtin,2,118890,0x7ff7c0cc1444,16,WasmOnStackReplace
code-creation,Builtin,2,118895,0x7ff7c0cc1464,140,WasmFloat32ToNumber
code-creation,Builtin,2,118900,0x7ff7c0cc1504,152,WasmFloat64ToNumber
code-creation,Builtin,2,118905,0x7ff7c0cc15a4,4,WasmI32AtomicWait32
code-creation,Builtin,2,118910,0x7ff7c0cc15c4,4,WasmI64AtomicWait32
code-creation,Builtin,2,118916,0x7ff7c0cc15e4,24,JSToWasmLazyDeoptContinuation
code-creation,Builtin,2,118921,0x7ff7c0cc1604,4320,WeakMapConstructor
code-creation,Builtin,2,118926,0x7ff7c0cc2704,196,WeakMapLookupHashIndex
code-creation,Builtin,2,118931,0x7ff7c0cc27e4,220,WeakMapGet
code-creation,Builtin,2,118936,0x7ff7c0cc28c4,176,WeakMapPrototypeHas
code-creation,Builtin,2,118941,0x7ff7c0cc2984,204,WeakMapPrototypeSet
code-creation,Builtin,2,118946,0x7ff7c0cc2a64,144,WeakMapPrototypeDelete
code-creation,Builtin,2,118952,0x7ff7c0cc2b04,2876,WeakSetConstructor
code-creation,Builtin,2,118957,0x7ff7c0cc3644,176,WeakSetPrototypeHas
code-creation,Builtin,2,118963,0x7ff7c0cc3704,204,WeakSetPrototypeAdd
code-creation,Builtin,2,118968,0x7ff7c0cc37e4,144,WeakSetPrototypeDelete
code-creation,Builtin,2,118973,0x7ff7c0cc3884,372,WeakCollectionDelete
code-creation,Builtin,2,118978,0x7ff7c0cc3a04,764,WeakCollectionSet
code-creation,Builtin,2,118983,0x7ff7c0cc3d04,296,AsyncGeneratorResolve
code-creation,Builtin,2,118989,0x7ff7c0cc3e44,100,AsyncGeneratorReject
code-creation,Builtin,2,118994,0x7ff7c0cc3ec4,2760,AsyncGeneratorYield
code-creation,Builtin,2,118999,0x7ff7c0cc49a4,2872,AsyncGeneratorReturn
code-creation,Builtin,2,119004,0x7ff7c0cc54e4,292,AsyncGeneratorResumeNext
code-creation,Builtin,2,119010,0x7ff7c0cc5624,12,AsyncGeneratorFunctionConstructor
code-creation,Builtin,2,119015,0x7ff7c0cc5644,1020,AsyncGeneratorPrototypeNext
code-creation,Builtin,2,119020,0x7ff7c0cc5a44,1028,AsyncGeneratorPrototypeReturn
code-creation,Builtin,2,119026,0x7ff7c0cc5e64,1028,AsyncGeneratorPrototypeThrow
code-creation,Builtin,2,119031,0x7ff7c0cc6284,2736,AsyncGeneratorAwaitCaught
code-creation,Builtin,2,119037,0x7ff7c0cc6d44,2736,AsyncGeneratorAwaitUncaught
code-creation,Builtin,2,119042,0x7ff7c0cc7804,116,AsyncGeneratorAwaitResolveClosure
code-creation,Builtin,2,119047,0x7ff7c0cc7884,128,AsyncGeneratorAwaitRejectClosure
code-creation,Builtin,2,119053,0x7ff7c0cc7924,116,AsyncGeneratorYieldResolveClosure
code-creation,Builtin,2,119058,0x7ff7c0cc79a4,116,AsyncGeneratorReturnClosedResolveClosure
code-creation,Builtin,2,119063,0x7ff7c0cc7a24,112,AsyncGeneratorReturnClosedRejectClosure
code-creation,Builtin,2,119070,0x7ff7c0cc7aa4,128,AsyncGeneratorReturnResolveClosure
code-creation,Builtin,2,119076,0x7ff7c0cc7b44,1592,AsyncFromSyncIteratorPrototypeNext
code-creation,Builtin,2,119082,0x7ff7c0cc8184,1696,AsyncFromSyncIteratorPrototypeThrow
code-creation,Builtin,2,119089,0x7ff7c0cc8844,1716,AsyncFromSyncIteratorPrototypeReturn
code-creation,Builtin,2,119095,0x7ff7c0cc8f04,100,AsyncIteratorValueUnwrap
code-creation,Builtin,2,119101,0x7ff7c0cc8f84,224,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,119107,0x7ff7c0cc9084,224,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,119113,0x7ff7c0cc9184,208,CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,119119,0x7ff7c0cc9264,400,CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,119125,0x7ff7c0cc9404,400,CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,119130,0x7ff7c0cc95a4,240,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,119136,0x7ff7c0cc96a4,240,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,119142,0x7ff7c0cc97a4,224,CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,119148,0x7ff7c0cc98a4,412,CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,119154,0x7ff7c0cc9a44,412,CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,119160,0x7ff7c0cc9be4,4,DirectCEntry
code-creation,Builtin,2,119165,0x7ff7c0cc9c04,1096,StringAdd_CheckNone
code-creation,Builtin,2,119170,0x7ff7c0cca064,2484,SubString
code-creation,Builtin,2,119175,0x7ff7c0ccaa24,16,StackCheck
code-creation,Builtin,2,119180,0x7ff7c0ccaa44,84,DoubleToI
code-creation,Builtin,2,119184,0x7ff7c0ccaaa4,2236,GetProperty
code-creation,Builtin,2,119189,0x7ff7c0ccb364,2308,GetPropertyWithReceiver
code-creation,Builtin,2,119195,0x7ff7c0ccbc84,16004,SetProperty
code-creation,Builtin,2,119200,0x7ff7c0ccfb24,13480,SetPropertyInLiteral
code-creation,Builtin,2,119205,0x7ff7c0cd2fe4,8,MemCopyUint8Uint8
code-creation,Builtin,2,119210,0x7ff7c0cd3004,8,MemMove
code-creation,Builtin,2,119216,0x7ff7c0cd3024,12,IsTraceCategoryEnabled
code-creation,Builtin,2,119221,0x7ff7c0cd3044,12,Trace
code-creation,Builtin,2,119227,0x7ff7c0cd3064,12,FinalizationRegistryUnregister
code-creation,Builtin,2,119232,0x7ff7c0cd3084,416,AsyncModuleEvaluate
code-creation,Builtin,2,119237,0x7ff7c0cd3244,12,CallAsyncModuleFulfilled
code-creation,Builtin,2,119242,0x7ff7c0cd3264,12,CallAsyncModuleRejected
code-creation,Builtin,2,119247,0x7ff7c0cd3284,260,AggregateErrorConstructor
code-creation,Builtin,2,119253,0x7ff7c0cd33a4,856,ArrayPrototypeAt
code-creation,Builtin,2,119257,0x7ff7c0cd3704,656,ArrayPrototypeConcat
code-creation,Builtin,2,119262,0x7ff7c0cd39a4,5824,ArrayPrototypeCopyWithin
code-creation,Builtin,2,119268,0x7ff7c0cd5084,212,ArrayEveryLoopEagerDeoptContinuation
code-creation,Builtin,2,119274,0x7ff7c0cd5164,612,ArrayEveryLoopLazyDeoptContinuation
code-creation,Builtin,2,119279,0x7ff7c0cd53e4,3316,ArrayEveryLoopContinuation
code-creation,Builtin,2,119285,0x7ff7c0cd60e4,1464,ArrayEvery
code-creation,Builtin,2,119290,0x7ff7c0cd66a4,284,ArrayFilterLoopEagerDeoptContinuation
code-creation,Builtin,2,119295,0x7ff7c0cd67c4,988,ArrayFilterLoopLazyDeoptContinuation
code-creation,Builtin,2,119301,0x7ff7c0cd6ba4,3564,ArrayFilterLoopContinuation
code-creation,Builtin,2,119306,0x7ff7c0cd79a4,4260,ArrayFilter
code-creation,Builtin,2,119311,0x7ff7c0cd8a64,204,ArrayFindLoopEagerDeoptContinuation
code-creation,Builtin,2,119318,0x7ff7c0cd8b44,32,ArrayFindLoopLazyDeoptContinuation
code-creation,Builtin,2,119340,0x7ff7c0cd8b84,312,ArrayFindLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,119347,0x7ff7c0cd8cc4,528,ArrayFindLoopContinuation
code-creation,Builtin,2,119353,0x7ff7c0cd8ee4,1460,ArrayPrototypeFind
code-creation,Builtin,2,119358,0x7ff7c0cd94a4,204,ArrayFindIndexLoopEagerDeoptContinuation
code-creation,Builtin,2,119363,0x7ff7c0cd9584,32,ArrayFindIndexLoopLazyDeoptContinuation
code-creation,Builtin,2,119369,0x7ff7c0cd95c4,312,ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,119375,0x7ff7c0cd9704,524,ArrayFindIndexLoopContinuation
code-creation,Builtin,2,119381,0x7ff7c0cd9924,1460,ArrayPrototypeFindIndex
code-creation,Builtin,2,119388,0x7ff7c0cd9ee4,448,ArrayFindLastLoopContinuation
code-creation,Builtin,2,119394,0x7ff7c0cda0c4,1700,ArrayPrototypeFindLast
code-creation,Builtin,2,119399,0x7ff7c0cda784,448,ArrayFindLastIndexLoopContinuation
code-creation,Builtin,2,119405,0x7ff7c0cda964,1700,ArrayPrototypeFindLastIndex
code-creation,Builtin,2,119410,0x7ff7c0cdb024,212,ArrayForEachLoopEagerDeoptContinuation
code-creation,Builtin,2,119415,0x7ff7c0cdb104,212,ArrayForEachLoopLazyDeoptContinuation
code-creation,Builtin,2,119421,0x7ff7c0cdb1e4,3156,ArrayForEachLoopContinuation
code-creation,Builtin,2,119426,0x7ff7c0cdbe44,1328,ArrayForEach
code-creation,Builtin,2,119432,0x7ff7c0cdc384,3572,ArrayFrom
code-creation,Builtin,2,119437,0x7ff7c0cdd184,148,ArrayIsArray
code-creation,Builtin,2,119442,0x7ff7c0cdd224,404,LoadJoinElement_DictionaryElements_0
code-creation,Builtin,2,119448,0x7ff7c0cdd3c4,36,LoadJoinElement_FastSmiOrObjectElements_0
code-creation,Builtin,2,119454,0x7ff7c0cdd404,140,LoadJoinElement_FastDoubleElements_0
code-creation,Builtin,2,119460,0x7ff7c0cdd4a4,312,ConvertToLocaleString
code-creation,Builtin,2,119465,0x7ff7c0cdd5e4,752,JoinStackPush
code-creation,Builtin,2,119470,0x7ff7c0cdd8e4,272,JoinStackPop
code-creation,Builtin,2,119475,0x7ff7c0cdda04,6628,ArrayPrototypeJoin
code-creation,Builtin,2,119480,0x7ff7c0cdf404,5360,ArrayPrototypeToLocaleString
code-creation,Builtin,2,119485,0x7ff7c0ce0904,236,ArrayPrototypeToString
code-creation,Builtin,2,119490,0x7ff7c0ce0a04,5924,TypedArrayPrototypeJoin
code-creation,Builtin,2,119496,0x7ff7c0ce2144,4636,TypedArrayPrototypeToLocaleString
code-creation,Builtin,2,119502,0x7ff7c0ce3364,3824,ArrayPrototypeLastIndexOf
code-creation,Builtin,2,119508,0x7ff7c0ce4264,260,ArrayMapPreLoopLazyDeoptContinuation
code-creation,Builtin,2,119514,0x7ff7c0ce4384,252,ArrayMapLoopEagerDeoptContinuation
code-creation,Builtin,2,119519,0x7ff7c0ce4484,532,ArrayMapLoopLazyDeoptContinuation
code-creation,Builtin,2,119524,0x7ff7c0ce46a4,3192,ArrayMapLoopContinuation
code-creation,Builtin,2,119529,0x7ff7c0ce5324,3912,ArrayMap
code-creation,Builtin,2,119534,0x7ff7c0ce6284,1000,ArrayOf
code-creation,Builtin,2,119539,0x7ff7c0ce6684,444,ArrayReduceRightPreLoopEagerDeoptContinuation
code-creation,Builtin,2,119545,0x7ff7c0ce6844,204,ArrayReduceRightLoopEagerDeoptContinuation
code-creation,Builtin,2,119551,0x7ff7c0ce6924,204,ArrayReduceRightLoopLazyDeoptContinuation
code-creation,Builtin,2,119556,0x7ff7c0ce6a04,3200,ArrayReduceRightLoopContinuation
code-creation,Builtin,2,119561,0x7ff7c0ce76a4,2000,ArrayReduceRight
code-creation,Builtin,2,119566,0x7ff7c0ce7e84,176,ArrayReducePreLoopEagerDeoptContinuation
code-creation,Builtin,2,119572,0x7ff7c0ce7f44,204,ArrayReduceLoopEagerDeoptContinuation
code-creation,Builtin,2,119577,0x7ff7c0ce8024,204,ArrayReduceLoopLazyDeoptContinuation
code-creation,Builtin,2,119583,0x7ff7c0ce8104,3252,ArrayReduceLoopContinuation
code-creation,Builtin,2,119588,0x7ff7c0ce8dc4,1604,ArrayReduce
code-creation,Builtin,2,119593,0x7ff7c0ce9424,3216,ArrayPrototypeReverse
code-creation,Builtin,2,119599,0x7ff7c0cea0c4,3592,ArrayPrototypeShift
code-creation,Builtin,2,119603,0x7ff7c0ceaee4,5220,ArrayPrototypeSlice
code-creation,Builtin,2,119608,0x7ff7c0cec364,212,ArraySomeLoopEagerDeoptContinuation
code-creation,Builtin,2,119614,0x7ff7c0cec444,580,ArraySomeLoopLazyDeoptContinuation
code-creation,Builtin,2,119619,0x7ff7c0cec6a4,3304,ArraySomeLoopContinuation
code-creation,Builtin,2,119625,0x7ff7c0ced3a4,1448,ArraySome
code-creation,Builtin,2,119630,0x7ff7c0ced964,14216,ArrayPrototypeSplice
code-creation,Builtin,2,119635,0x7ff7c0cf1104,3264,ArrayPrototypeUnshift
code-creation,Builtin,2,119640,0x7ff7c0cf1de4,332,ArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,119646,0x7ff7c0cf1f44,348,ArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,119651,0x7ff7c0cf20a4,208,ArrayBufferPrototypeGetResizable
code-creation,Builtin,2,119656,0x7ff7c0cf2184,332,SharedArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,119662,0x7ff7c0cf22e4,208,SharedArrayBufferPrototypeGetGrowable
code-creation,Builtin,2,119668,0x7ff7c0cf23c4,96,ArrayBufferIsView
code-creation,Builtin,2,119674,0x7ff7c0cf2444,396,ToInteger
code-creation,Builtin,2,119679,0x7ff7c0cf25e4,3084,FastCreateDataProperty
code-creation,Builtin,2,119684,0x7ff7c0cf3204,676,CheckNumberInRange
code-creation,Builtin,2,119689,0x7ff7c0cf34c4,584,CheckSameObject
code-creation,Builtin,2,119694,0x7ff7c0cf3724,904,BooleanConstructor
code-creation,Builtin,2,119699,0x7ff7c0cf3ac4,164,BooleanPrototypeToString
code-creation,Builtin,2,119704,0x7ff7c0cf3b84,156,BooleanPrototypeValueOf
code-creation,Builtin,2,119709,0x7ff7c0cf3c24,1184,BigIntAddNoThrow
code-creation,Builtin,2,119714,0x7ff7c0cf40e4,1280,BigIntAdd
code-creation,Builtin,2,119719,0x7ff7c0cf4604,1184,BigIntSubtractNoThrow
code-creation,Builtin,2,119724,0x7ff7c0cf4ac4,1280,BigIntSubtract
code-creation,Builtin,2,119729,0x7ff7c0cf4fe4,284,BigIntUnaryMinus
code-creation,Builtin,2,119734,0x7ff7c0cf5104,1360,ToString
code-creation,Builtin,2,119740,0x7ff7c0cf5664,156,StringPrototypeToString
code-creation,Builtin,2,119745,0x7ff7c0cf5704,156,StringPrototypeValueOf
code-creation,Builtin,2,119751,0x7ff7c0cf57a4,2480,StringToList
code-creation,Builtin,2,119756,0x7ff7c0cf6164,1012,StringPrototypeCharAt
code-creation,Builtin,2,119762,0x7ff7c0cf6564,700,StringPrototypeCharCodeAt
code-creation,Builtin,2,119767,0x7ff7c0cf6824,1288,StringPrototypeCodePointAt
code-creation,Builtin,2,119773,0x7ff7c0cf6d44,400,StringPrototypeConcat
code-creation,Builtin,2,119778,0x7ff7c0cf6ee4,992,StringConstructor
code-creation,Builtin,2,119784,0x7ff7c0cf72e4,1436,StringAddConvertLeft
code-creation,Builtin,2,119790,0x7ff7c0cf7884,1464,StringAddConvertRight
code-creation,Builtin,2,119795,0x7ff7c0cf7e44,816,StringCharAt
code-creation,Builtin,2,119800,0x7ff7c0cf8184,16,FastNewClosureBaseline
code-creation,Builtin,2,119806,0x7ff7c0cf81a4,196,FastNewFunctionContextEval
code-creation,Builtin,2,119812,0x7ff7c0cf8284,196,FastNewFunctionContextFunction
code-creation,Builtin,2,119818,0x7ff7c0cf8364,248,CreateRegExpLiteral
code-creation,Builtin,2,119824,0x7ff7c0cf8464,1060,CreateShallowArrayLiteral
code-creation,Builtin,2,119830,0x7ff7c0cf88a4,504,CreateEmptyArrayLiteral
code-creation,Builtin,2,119837,0x7ff7c0cf8aa4,1736,CreateShallowObjectLiteral
code-creation,Builtin,2,119842,0x7ff7c0cf9184,384,ObjectConstructor
code-creation,Builtin,2,119848,0x7ff7c0cf9324,176,CreateEmptyLiteralObject
code-creation,Builtin,2,119853,0x7ff7c0cf93e4,536,NumberConstructor
code-creation,Builtin,2,119858,0x7ff7c0cf9604,64,GenericLazyDeoptContinuation
code-creation,Builtin,2,119864,0x7ff7c0cf9664,64,StringToNumber
code-creation,Builtin,2,119869,0x7ff7c0cf96c4,184,NonNumberToNumber
code-creation,Builtin,2,119874,0x7ff7c0cf9784,240,NonNumberToNumeric
code-creation,Builtin,2,119879,0x7ff7c0cf9884,36,ToNumeric
code-creation,Builtin,2,119884,0x7ff7c0cf98c4,1184,NumberToString
code-creation,Builtin,2,119888,0x7ff7c0cf9d84,92,ToBoolean
code-creation,Builtin,2,119894,0x7ff7c0cf9de4,96,ToBooleanForBaselineJump
code-creation,Builtin,2,119900,0x7ff7c0cf9e64,728,ToLength
code-creation,Builtin,2,119906,0x7ff7c0cfa144,1312,ToName
code-creation,Builtin,2,119911,0x7ff7c0cfa684,756,ToObject
code-creation,Builtin,2,119916,0x7ff7c0cfa984,208,NonPrimitiveToPrimitive_Default
code-creation,Builtin,2,119921,0x7ff7c0cfaa64,208,NonPrimitiveToPrimitive_Number
code-creation,Builtin,2,119927,0x7ff7c0cfab44,208,NonPrimitiveToPrimitive_String
code-creation,Builtin,2,119932,0x7ff7c0cfac24,288,OrdinaryToPrimitive_Number
code-creation,Builtin,2,119937,0x7ff7c0cfad64,288,OrdinaryToPrimitive_String
code-creation,Builtin,2,119942,0x7ff7c0cfaea4,216,FastConsoleAssert
code-creation,Builtin,2,119947,0x7ff7c0cfaf84,160,DataViewPrototypeGetBuffer
code-creation,Builtin,2,119953,0x7ff7c0cfb044,336,DataViewPrototypeGetByteLength
code-creation,Builtin,2,119958,0x7ff7c0cfb1a4,336,DataViewPrototypeGetByteOffset
code-creation,Builtin,2,119963,0x7ff7c0cfb304,572,DataViewPrototypeGetUint8
code-creation,Builtin,2,119969,0x7ff7c0cfb544,572,DataViewPrototypeGetInt8
code-creation,Builtin,2,119974,0x7ff7c0cfb784,644,DataViewPrototypeGetUint16
code-creation,Builtin,2,119980,0x7ff7c0cfba24,644,DataViewPrototypeGetInt16
code-creation,Builtin,2,119986,0x7ff7c0cfbcc4,808,DataViewPrototypeGetUint32
code-creation,Builtin,2,119991,0x7ff7c0cfc004,684,DataViewPrototypeGetInt32
code-creation,Builtin,2,119997,0x7ff7c0cfc2c4,848,DataViewPrototypeGetFloat32
code-creation,Builtin,2,120002,0x7ff7c0cfc624,912,DataViewPrototypeGetFloat64
code-creation,Builtin,2,120007,0x7ff7c0cfc9c4,984,DataViewPrototypeGetBigUint64
code-creation,Builtin,2,120013,0x7ff7c0cfcda4,1004,DataViewPrototypeGetBigInt64
code-creation,Builtin,2,120019,0x7ff7c0cfd1a4,928,DataViewPrototypeSetUint8
code-creation,Builtin,2,120025,0x7ff7c0cfd564,928,DataViewPrototypeSetInt8
code-creation,Builtin,2,120030,0x7ff7c0cfd924,1028,DataViewPrototypeSetUint16
code-creation,Builtin,2,120035,0x7ff7c0cfdd44,1028,DataViewPrototypeSetInt16
code-creation,Builtin,2,120040,0x7ff7c0cfe164,1064,DataViewPrototypeSetUint32
code-creation,Builtin,2,120046,0x7ff7c0cfe5a4,1064,DataViewPrototypeSetInt32
code-creation,Builtin,2,120051,0x7ff7c0cfe9e4,1032,DataViewPrototypeSetFloat32
code-creation,Builtin,2,120056,0x7ff7c0cfee04,1096,DataViewPrototypeSetFloat64
code-creation,Builtin,2,120062,0x7ff7c0cff264,944,DataViewPrototypeSetBigUint64
code-creation,Builtin,2,120067,0x7ff7c0cff624,944,DataViewPrototypeSetBigInt64
code-creation,Builtin,2,120072,0x7ff7c0cff9e4,828,FinalizationRegistryConstructor
code-creation,Builtin,2,120078,0x7ff7c0cffd24,1152,FinalizationRegistryRegister
code-creation,Builtin,2,120083,0x7ff7c0d001c4,648,FinalizationRegistryPrototypeCleanupSome
code-creation,Builtin,2,120089,0x7ff7c0d00464,328,FunctionPrototypeHasInstance
code-creation,Builtin,2,120094,0x7ff7c0d005c4,924,FastFunctionPrototypeBind
code-creation,Builtin,2,120100,0x7ff7c0d00964,88,IncBlockCounter
code-creation,Builtin,2,120105,0x7ff7c0d009c4,228,GetTemplateObject
code-creation,Builtin,2,120111,0x7ff7c0d00ac4,28,BytecodeBudgetInterruptFromCode
code-creation,Builtin,2,120117,0x7ff7c0d00ae4,92,ForInNext
code-creation,Builtin,2,120123,0x7ff7c0d00b44,128,GetImportMetaObjectBaseline
code-creation,Builtin,2,120129,0x7ff7c0d00be4,116,GetIteratorWithFeedback
code-creation,Builtin,2,120135,0x7ff7c0d00c64,100,GetIteratorBaseline
code-creation,Builtin,2,120141,0x7ff7c0d00ce4,268,CreateAsyncFromSyncIteratorBaseline
code-creation,Builtin,2,120147,0x7ff7c0d00e04,1084,CallIteratorWithFeedback
code-creation,Builtin,2,120152,0x7ff7c0d01244,288,MathAbs
code-creation,Builtin,2,120157,0x7ff7c0d01384,428,MathCeil
code-creation,Builtin,2,120162,0x7ff7c0d01544,432,MathFloor
code-creation,Builtin,2,120167,0x7ff7c0d01704,488,MathRound
code-creation,Builtin,2,120171,0x7ff7c0d01904,428,MathTrunc
code-creation,Builtin,2,120177,0x7ff7c0d01ac4,368,MathPow
code-creation,Builtin,2,120182,0x7ff7c0d01c44,396,MathMax
code-creation,Builtin,2,120186,0x7ff7c0d01de4,404,MathMin
code-creation,Builtin,2,120191,0x7ff7c0d01f84,320,MathAcos
code-creation,Builtin,2,120196,0x7ff7c0d020e4,320,MathAcosh
code-creation,Builtin,2,120201,0x7ff7c0d02244,320,MathAsin
code-creation,Builtin,2,120205,0x7ff7c0d023a4,320,MathAsinh
code-creation,Builtin,2,120210,0x7ff7c0d02504,320,MathAtan
code-creation,Builtin,2,120215,0x7ff7c0d02664,416,MathAtan2
code-creation,Builtin,2,120220,0x7ff7c0d02824,320,MathAtanh
code-creation,Builtin,2,120225,0x7ff7c0d02984,320,MathCbrt
code-creation,Builtin,2,120230,0x7ff7c0d02ae4,168,MathClz32
code-creation,Builtin,2,120235,0x7ff7c0d02ba4,320,MathCos
code-creation,Builtin,2,120240,0x7ff7c0d02d04,320,MathCosh
code-creation,Builtin,2,120246,0x7ff7c0d02e64,320,MathExp
code-creation,Builtin,2,120251,0x7ff7c0d02fc4,320,MathExpm1
code-creation,Builtin,2,120256,0x7ff7c0d03124,272,MathFround
code-creation,Builtin,2,120261,0x7ff7c0d03244,304,MathImul
code-creation,Builtin,2,120266,0x7ff7c0d03384,320,MathLog
code-creation,Builtin,2,120271,0x7ff7c0d034e4,320,MathLog1p
code-creation,Builtin,2,120276,0x7ff7c0d03644,320,MathLog10
code-creation,Builtin,2,120281,0x7ff7c0d037a4,320,MathLog2
code-creation,Builtin,2,120286,0x7ff7c0d03904,320,MathSin
code-creation,Builtin,2,120291,0x7ff7c0d03a64,180,MathSign
code-creation,Builtin,2,120297,0x7ff7c0d03b24,320,MathSinh
code-creation,Builtin,2,120302,0x7ff7c0d03c84,268,MathSqrt
code-creation,Builtin,2,120307,0x7ff7c0d03da4,320,MathTan
code-creation,Builtin,2,120312,0x7ff7c0d03f04,320,MathTanh
code-creation,Builtin,2,120317,0x7ff7c0d04064,1060,MathHypot
code-creation,Builtin,2,120323,0x7ff7c0d044a4,332,MathRandom
code-creation,Builtin,2,120328,0x7ff7c0d04604,2956,NumberPrototypeToString
code-creation,Builtin,2,120334,0x7ff7c0d051a4,136,NumberIsFinite
code-creation,Builtin,2,120339,0x7ff7c0d05244,340,NumberIsInteger
code-creation,Builtin,2,120344,0x7ff7c0d053a4,116,NumberIsNaN
code-creation,Builtin,2,120349,0x7ff7c0d05424,372,NumberIsSafeInteger
code-creation,Builtin,2,120354,0x7ff7c0d055a4,156,NumberPrototypeValueOf
code-creation,Builtin,2,120360,0x7ff7c0d05644,196,NumberParseFloat
code-creation,Builtin,2,120365,0x7ff7c0d05724,248,ParseInt
code-creation,Builtin,2,120370,0x7ff7c0d05824,84,NumberParseInt
code-creation,Builtin,2,120375,0x7ff7c0d05884,860,Add
code-creation,Builtin,2,120380,0x7ff7c0d05be4,424,Subtract
code-creation,Builtin,2,120385,0x7ff7c0d05da4,608,Multiply
code-creation,Builtin,2,120390,0x7ff7c0d06024,532,Divide
code-creation,Builtin,2,120395,0x7ff7c0d06244,592,Modulus
code-creation,Builtin,2,120400,0x7ff7c0d064a4,524,Exponentiate
code-creation,Builtin,2,120405,0x7ff7c0d066c4,344,Negate
code-creation,Builtin,2,120409,0x7ff7c0d06824,112,BitwiseNot
code-creation,Builtin,2,120414,0x7ff7c0d068a4,112,Decrement
code-creation,Builtin,2,120419,0x7ff7c0d06924,112,Increment
code-creation,Builtin,2,120424,0x7ff7c0d069a4,392,ShiftLeft
code-creation,Builtin,2,120429,0x7ff7c0d06b44,392,ShiftRight
code-creation,Builtin,2,120434,0x7ff7c0d06ce4,508,ShiftRightLogical
code-creation,Builtin,2,120439,0x7ff7c0d06ee4,388,BitwiseAnd
code-creation,Builtin,2,120444,0x7ff7c0d07084,388,BitwiseOr
code-creation,Builtin,2,120449,0x7ff7c0d07224,388,BitwiseXor
code-creation,Builtin,2,120454,0x7ff7c0d073c4,796,LessThan
code-creation,Builtin,2,120460,0x7ff7c0d076e4,796,LessThanOrEqual
code-creation,Builtin,2,120465,0x7ff7c0d07a04,796,GreaterThan
code-creation,Builtin,2,120471,0x7ff7c0d07d24,796,GreaterThanOrEqual
code-creation,Builtin,2,120477,0x7ff7c0d08044,860,Equal
code-creation,Builtin,2,120482,0x7ff7c0d083a4,348,StrictEqual
code-creation,Builtin,2,120487,0x7ff7c0d08504,3132,ObjectFromEntries
code-creation,Builtin,2,120492,0x7ff7c0d09144,756,CreateObjectWithoutProperties
code-creation,Builtin,2,120497,0x7ff7c0d09444,144,ObjectIsExtensible
code-creation,Builtin,2,120502,0x7ff7c0d094e4,148,ObjectPreventExtensions
code-creation,Builtin,2,120507,0x7ff7c0d09584,144,ObjectGetPrototypeOf
code-creation,Builtin,2,120512,0x7ff7c0d09624,300,ObjectSetPrototypeOf
code-creation,Builtin,2,120517,0x7ff7c0d09764,80,ObjectPrototypeToString
code-creation,Builtin,2,120523,0x7ff7c0d097c4,96,ObjectPrototypeValueOf
code-creation,Builtin,2,120528,0x7ff7c0d09844,164,ObjectPrototypeToLocaleString
code-creation,Builtin,2,120533,0x7ff7c0d09904,868,FulfillPromise
code-creation,Builtin,2,120538,0x7ff7c0d09c84,988,RejectPromise
code-creation,Builtin,2,120543,0x7ff7c0d0a064,2416,NewPromiseCapability
code-creation,Builtin,2,120548,0x7ff7c0d0a9e4,164,PromiseCapabilityDefaultReject
code-creation,Builtin,2,120554,0x7ff7c0d0aaa4,148,PromiseCapabilityDefaultResolve
code-creation,Builtin,2,120559,0x7ff7c0d0ab44,1416,PerformPromiseThen
code-creation,Builtin,2,120564,0x7ff7c0d0b0e4,648,PromiseReject
code-creation,Builtin,2,120569,0x7ff7c0d0b384,284,PromiseGetCapabilitiesExecutor
code-creation,Builtin,2,120575,0x7ff7c0d0b4a4,104,PromiseConstructorLazyDeoptContinuation
code-creation,Builtin,2,120581,0x7ff7c0d0b524,4560,PromiseAll
code-creation,Builtin,2,120586,0x7ff7c0d0c704,4880,PromiseAllSettled
code-creation,Builtin,2,120591,0x7ff7c0d0da24,1104,PromiseAllResolveElementClosure
code-creation,Builtin,2,120597,0x7ff7c0d0de84,1392,PromiseAllSettledResolveElementClosure
code-creation,Builtin,2,120602,0x7ff7c0d0e404,1400,PromiseAllSettledRejectElementClosure
code-creation,Builtin,2,120608,0x7ff7c0d0e984,1180,PromiseAnyRejectElementClosure
code-creation,Builtin,2,120615,0x7ff7c0d0ee24,2368,PromiseAny
code-creation,Builtin,2,120620,0x7ff7c0d0f784,2908,PromiseConstructor
code-creation,Builtin,2,120626,0x7ff7c0d102e4,296,PromisePrototypeCatch
code-creation,Builtin,2,120631,0x7ff7c0d10424,88,PromiseValueThunkFinally
code-creation,Builtin,2,120636,0x7ff7c0d10484,84,PromiseThrowerFinally
code-creation,Builtin,2,120641,0x7ff7c0d104e4,904,PromiseCatchFinally
code-creation,Builtin,2,120646,0x7ff7c0d10884,904,PromiseThenFinally
code-creation,Builtin,2,120652,0x7ff7c0d10c24,1700,PromisePrototypeFinally
code-creation,Builtin,2,120657,0x7ff7c0d112e4,1336,PromiseRace
code-creation,Builtin,2,120662,0x7ff7c0d11824,268,PromiseFulfillReactionJob
code-creation,Builtin,2,120667,0x7ff7c0d11944,364,PromiseRejectReactionJob
code-creation,Builtin,2,120672,0x7ff7c0d11ac4,156,PromiseResolveTrampoline
code-creation,Builtin,2,120678,0x7ff7c0d11b64,656,PromiseResolve
code-creation,Builtin,2,120682,0x7ff7c0d11e04,712,ResolvePromise
code-creation,Builtin,2,120688,0x7ff7c0d120e4,2224,PromisePrototypeThen
code-creation,Builtin,2,120693,0x7ff7c0d129a4,1144,PromiseResolveThenableJob
code-creation,Builtin,2,120698,0x7ff7c0d12e24,448,ProxyConstructor
code-creation,Builtin,2,120703,0x7ff7c0d13004,1760,ProxyDeleteProperty
code-creation,Builtin,2,120708,0x7ff7c0d13704,2112,ProxyGetProperty
code-creation,Builtin,2,120713,0x7ff7c0d13f64,1060,ProxyGetPrototypeOf
code-creation,Builtin,2,120719,0x7ff7c0d143a4,1668,ProxyHasProperty
code-creation,Builtin,2,120725,0x7ff7c0d14a44,760,ProxyIsExtensible
code-creation,Builtin,2,120731,0x7ff7c0d14d44,800,ProxyPreventExtensions
code-creation,Builtin,2,120736,0x7ff7c0d15084,1148,ProxyRevocable
code-creation,Builtin,2,120741,0x7ff7c0d15504,120,ProxyRevoke
code-creation,Builtin,2,120746,0x7ff7c0d15584,2216,ProxySetProperty
code-creation,Builtin,2,120751,0x7ff7c0d15e44,1292,ProxySetPrototypeOf
code-creation,Builtin,2,120756,0x7ff7c0d16364,208,ReflectIsExtensible
code-creation,Builtin,2,120761,0x7ff7c0d16444,212,ReflectPreventExtensions
code-creation,Builtin,2,120767,0x7ff7c0d16524,188,ReflectGetPrototypeOf
code-creation,Builtin,2,120773,0x7ff7c0d165e4,292,ReflectSetPrototypeOf
code-creation,Builtin,2,120778,0x7ff7c0d16724,284,ReflectGet
code-creation,Builtin,2,120783,0x7ff7c0d16844,160,ReflectDeleteProperty
code-creation,Builtin,2,120789,0x7ff7c0d16904,148,ReflectHas
code-creation,Builtin,2,120795,0x7ff7c0d169a4,5132,RegExpPrototypeExecSlow
code-creation,Builtin,2,120801,0x7ff7c0d17dc4,5104,RegExpPrototypeExec
code-creation,Builtin,2,120806,0x7ff7c0d191c4,2360,RegExpPrototypeMatchAll
code-creation,Builtin,2,120811,0x7ff7c0d19b04,9428,RegExpStringIteratorPrototypeNext
code-creation,Builtin,2,120817,0x7ff7c0d1bfe4,8840,RegExpMatchFast
code-creation,Builtin,2,120822,0x7ff7c0d1e284,3600,RegExpPrototypeMatch
code-creation,Builtin,2,120828,0x7ff7c0d1f0a4,6328,RegExpReplace
code-creation,Builtin,2,120832,0x7ff7c0d20964,524,RegExpPrototypeReplace
code-creation,Builtin,2,120838,0x7ff7c0d20b84,1424,RegExpSearchFast
code-creation,Builtin,2,120843,0x7ff7c0d21124,1640,RegExpPrototypeSearch
code-creation,Builtin,2,120849,0x7ff7c0d217a4,200,RegExpPrototypeSourceGetter
code-creation,Builtin,2,120855,0x7ff7c0d21884,5872,RegExpSplit
code-creation,Builtin,2,120860,0x7ff7c0d22f84,476,RegExpPrototypeSplit
code-creation,Builtin,2,120866,0x7ff7c0d23164,2252,RegExpPrototypeTest
code-creation,Builtin,2,120872,0x7ff7c0d23a44,1360,RegExpPrototypeTestFast
code-creation,Builtin,2,120877,0x7ff7c0d23fa4,228,RegExpPrototypeGlobalGetter
code-creation,Builtin,2,120883,0x7ff7c0d240a4,244,RegExpPrototypeIgnoreCaseGetter
code-creation,Builtin,2,120889,0x7ff7c0d241a4,244,RegExpPrototypeMultilineGetter
code-creation,Builtin,2,120895,0x7ff7c0d242a4,244,RegExpPrototypeHasIndicesGetter
code-creation,Builtin,2,120900,0x7ff7c0d243a4,244,RegExpPrototypeLinearGetter
code-creation,Builtin,2,120905,0x7ff7c0d244a4,244,RegExpPrototypeDotAllGetter
code-creation,Builtin,2,120910,0x7ff7c0d245a4,272,RegExpPrototypeStickyGetter
code-creation,Builtin,2,120916,0x7ff7c0d246c4,272,RegExpPrototypeUnicodeGetter
code-creation,Builtin,2,120922,0x7ff7c0d247e4,2256,RegExpPrototypeFlagsGetter
code-creation,Builtin,2,120927,0x7ff7c0d250c4,1500,StringPrototypeAt
code-creation,Builtin,2,120933,0x7ff7c0d256a4,3008,StringPrototypeEndsWith
code-creation,Builtin,2,120938,0x7ff7c0d26284,480,CreateHTML
code-creation,Builtin,2,120943,0x7ff7c0d26484,164,StringPrototypeAnchor
code-creation,Builtin,2,120948,0x7ff7c0d26544,128,StringPrototypeBig
code-creation,Builtin,2,120953,0x7ff7c0d265e4,128,StringPrototypeBlink
code-creation,Builtin,2,120958,0x7ff7c0d26684,128,StringPrototypeBold
code-creation,Builtin,2,120963,0x7ff7c0d26724,168,StringPrototypeFontcolor
code-creation,Builtin,2,120968,0x7ff7c0d267e4,168,StringPrototypeFontsize
code-creation,Builtin,2,120974,0x7ff7c0d268a4,128,StringPrototypeFixed
code-creation,Builtin,2,120979,0x7ff7c0d26944,128,StringPrototypeItalics
code-creation,Builtin,2,120984,0x7ff7c0d269e4,168,StringPrototypeLink
code-creation,Builtin,2,120989,0x7ff7c0d26aa4,128,StringPrototypeSmall
code-creation,Builtin,2,120994,0x7ff7c0d26b44,128,StringPrototypeStrike
code-creation,Builtin,2,120999,0x7ff7c0d26be4,128,StringPrototypeSub
code-creation,Builtin,2,121004,0x7ff7c0d26c84,128,StringPrototypeSup
code-creation,Builtin,2,121009,0x7ff7c0d26d24,1028,StringPrototypeIncludes
code-creation,Builtin,2,121015,0x7ff7c0d27144,628,StringPrototypeIndexOf
code-creation,Builtin,2,121020,0x7ff7c0d273c4,344,StringPrototypeIterator
code-creation,Builtin,2,121025,0x7ff7c0d27524,2024,StringIteratorPrototypeNext
code-creation,Builtin,2,121030,0x7ff7c0d27d24,1304,StringPrototypeMatch
code-creation,Builtin,2,121035,0x7ff7c0d28244,1304,StringPrototypeSearch
code-creation,Builtin,2,121040,0x7ff7c0d28764,824,StringPrototypePadStart
code-creation,Builtin,2,121046,0x7ff7c0d28aa4,824,StringPrototypePadEnd
code-creation,Builtin,2,121051,0x7ff7c0d28de4,120,StringRepeat
code-creation,Builtin,2,121056,0x7ff7c0d28e64,400,StringPrototypeRepeat
code-creation,Builtin,2,121061,0x7ff7c0d29004,11188,StringPrototypeReplaceAll
code-creation,Builtin,2,121066,0x7ff7c0d2bbc4,3388,StringPrototypeSlice
code-creation,Builtin,2,121071,0x7ff7c0d2c904,3028,StringPrototypeStartsWith
code-creation,Builtin,2,121076,0x7ff7c0d2d4e4,3328,StringPrototypeSubstr
code-creation,Builtin,2,121082,0x7ff7c0d2e204,3260,StringPrototypeSubstring
code-creation,Builtin,2,121087,0x7ff7c0d2eec4,6916,StringPrototypeTrim
code-creation,Builtin,2,121092,0x7ff7c0d309e4,6332,StringPrototypeTrimStart
code-creation,Builtin,2,121098,0x7ff7c0d322a4,5836,StringPrototypeTrimEnd
code-creation,Builtin,2,121103,0x7ff7c0d33984,160,SymbolPrototypeDescriptionGetter
code-creation,Builtin,2,121108,0x7ff7c0d33a44,156,SymbolPrototypeToPrimitive
code-creation,Builtin,2,121113,0x7ff7c0d33ae4,172,SymbolPrototypeToString
code-creation,Builtin,2,121118,0x7ff7c0d33ba4,156,SymbolPrototypeValueOf
code-creation,Builtin,2,121124,0x7ff7c0d33c44,832,TypedArrayPrototypeAt
code-creation,Builtin,2,121130,0x7ff7c0d33fa4,10064,CreateTypedArray
code-creation,Builtin,2,121135,0x7ff7c0d36704,1000,TypedArrayPrototypeEvery
code-creation,Builtin,2,121141,0x7ff7c0d36b04,372,TypedArrayPrototypeEntries
code-creation,Builtin,2,121146,0x7ff7c0d36c84,3512,TypedArrayPrototypeFilter
code-creation,Builtin,2,121151,0x7ff7c0d37a44,996,TypedArrayPrototypeFind
code-creation,Builtin,2,121156,0x7ff7c0d37e44,1004,TypedArrayPrototypeFindIndex
code-creation,Builtin,2,121162,0x7ff7c0d38244,428,FindLastAllElementsDetachedContinuation
code-creation,Builtin,2,121167,0x7ff7c0d38404,1208,TypedArrayPrototypeFindLast
code-creation,Builtin,2,121173,0x7ff7c0d388c4,436,FindLastIndexAllElementsDetachedContinuation
code-creation,Builtin,2,121179,0x7ff7c0d38a84,1216,TypedArrayPrototypeFindLastIndex
code-creation,Builtin,2,121185,0x7ff7c0d38f64,864,TypedArrayPrototypeForEach
code-creation,Builtin,2,121191,0x7ff7c0d392e4,2352,TypedArrayFrom
code-creation,Builtin,2,121197,0x7ff7c0d39c24,356,TypedArrayPrototypeKeys
code-creation,Builtin,2,121203,0x7ff7c0d39da4,1028,TypedArrayOf
code-creation,Builtin,2,121208,0x7ff7c0d3a1c4,952,TypedArrayPrototypeReduce
code-creation,Builtin,2,121214,0x7ff7c0d3a584,944,TypedArrayPrototypeReduceRight
code-creation,Builtin,2,121220,0x7ff7c0d3a944,2508,TypedArrayPrototypeSet
code-creation,Builtin,2,121225,0x7ff7c0d3b324,3040,TypedArrayPrototypeSlice
code-creation,Builtin,2,121231,0x7ff7c0d3bf24,992,TypedArrayPrototypeSome
code-creation,Builtin,2,121237,0x7ff7c0d3c324,1060,TypedArrayMergeSort
code-creation,Builtin,2,121242,0x7ff7c0d3c764,1620,TypedArrayPrototypeSort
code-creation,Builtin,2,121247,0x7ff7c0d3cdc4,2736,TypedArrayPrototypeSubArray
tick,0x7ffdf67ba8cf,121253,0,0x0,6
tick,0x7ffdf681d4c4,121268,0,0x0,6
code-creation,Builtin,2,121276,0x7ff7c0d3d884,372,TypedArrayPrototypeValues
code-creation,Builtin,2,121283,0x7ff7c0d3da04,952,WeakRefConstructor
code-creation,Builtin,2,121288,0x7ff7c0d3ddc4,184,WeakRefDeref
code-creation,Builtin,2,121293,0x7ff7c0d3de84,680,NewSloppyArgumentsElements
code-creation,Builtin,2,121299,0x7ff7c0d3e144,296,NewStrictArgumentsElements
code-creation,Builtin,2,121304,0x7ff7c0d3e284,320,NewRestArgumentsElements
code-creation,Builtin,2,121350,0x7ff7c0d3e3e4,1388,FastNewSloppyArguments
code-creation,Builtin,2,121356,0x7ff7c0d3e964,524,FastNewStrictArguments
code-creation,Builtin,2,121361,0x7ff7c0d3eb84,556,FastNewRestArguments
code-creation,Builtin,2,121366,0x7ff7c0d3edc4,676,StringSlowFlatten
code-creation,Builtin,2,121371,0x7ff7c0d3f084,2068,StringIndexOf
code-creation,Builtin,2,121376,0x7ff7c0d3f8a4,4,GenericBuiltinTest_JSAny_0
code-creation,Builtin,2,121382,0x7ff7c0d3f8c4,20,TestHelperPlus1
code-creation,Builtin,2,121387,0x7ff7c0d3f8e4,20,TestHelperPlus2
code-creation,Builtin,2,121393,0x7ff7c0d3f904,96,NewSmiBox
code-creation,Builtin,2,121398,0x7ff7c0d3f984,24,ReturnTwoValues
code-creation,Builtin,2,121403,0x7ff7c0d3f9a4,32,Load_FastSmiElements_0
code-creation,Builtin,2,121409,0x7ff7c0d3f9e4,32,Load_FastObjectElements_0
code-creation,Builtin,2,121415,0x7ff7c0d3fa24,144,Load_FastDoubleElements_0
code-creation,Builtin,2,121420,0x7ff7c0d3fac4,32,Store_FastSmiElements_0
code-creation,Builtin,2,121426,0x7ff7c0d3fb04,96,Store_FastObjectElements_0
code-creation,Builtin,2,121431,0x7ff7c0d3fb84,48,Store_FastDoubleElements_0
code-creation,Builtin,2,121437,0x7ff7c0d3fbc4,36,Delete_FastSmiElements_0
code-creation,Builtin,2,121443,0x7ff7c0d3fc04,36,Delete_FastObjectElements_0
code-creation,Builtin,2,121449,0x7ff7c0d3fc44,44,Delete_FastDoubleElements_0
code-creation,Builtin,2,121455,0x7ff7c0d3fc84,308,SortCompareDefault
code-creation,Builtin,2,121461,0x7ff7c0d3fdc4,92,SortCompareUserFn
code-creation,Builtin,2,121466,0x7ff7c0d3fe24,8,CanUseSameAccessor_GenericElementsAccessor_0
code-creation,Builtin,2,121472,0x7ff7c0d3fe44,312,Copy
code-creation,Builtin,2,121477,0x7ff7c0d3ff84,5776,MergeAt
code-creation,Builtin,2,121482,0x7ff7c0d41624,792,GallopLeft
code-creation,Builtin,2,121487,0x7ff7c0d41944,832,GallopRight
code-creation,Builtin,2,121492,0x7ff7c0d41ca4,3832,ArrayTimSort
code-creation,Builtin,2,121498,0x7ff7c0d42ba4,2112,ArrayPrototypeSort
code-creation,Builtin,2,121503,0x7ff7c0d43404,100,WasmInt32ToHeapNumber
code-creation,Builtin,2,121509,0x7ff7c0d43484,124,WasmTaggedNonSmiToInt32
code-creation,Builtin,2,121514,0x7ff7c0d43504,76,WasmTaggedToFloat64
code-creation,Builtin,2,121520,0x7ff7c0d43564,72,WasmMemoryGrow
code-creation,Builtin,2,121525,0x7ff7c0d435c4,100,WasmTableInit
code-creation,Builtin,2,121531,0x7ff7c0d43644,100,WasmTableCopy
code-creation,Builtin,2,121536,0x7ff7c0d436c4,84,WasmTableFill
code-creation,Builtin,2,121542,0x7ff7c0d43724,72,WasmTableGrow
code-creation,Builtin,2,121547,0x7ff7c0d43784,144,WasmTableGet
code-creation,Builtin,2,121552,0x7ff7c0d43824,236,WasmTableSet
code-creation,Builtin,2,121558,0x7ff7c0d43924,88,WasmRefFunc
code-creation,Builtin,2,121564,0x7ff7c0d43984,144,WasmAllocateFixedArray
code-creation,Builtin,2,121570,0x7ff7c0d43a24,44,WasmThrow
code-creation,Builtin,2,121575,0x7ff7c0d43a64,52,WasmRethrow
code-creation,Builtin,2,121580,0x7ff7c0d43aa4,44,WasmTriggerTierUp
code-creation,Builtin,2,121585,0x7ff7c0d43ae4,32,WasmStackGuard
code-creation,Builtin,2,121590,0x7ff7c0d43b24,32,WasmStackOverflow
code-creation,Builtin,2,121596,0x7ff7c0d43b64,40,WasmTraceMemory
code-creation,Builtin,2,121602,0x7ff7c0d43ba4,32,WasmTraceEnter
code-creation,Builtin,2,121607,0x7ff7c0d43be4,40,WasmTraceExit
code-creation,Builtin,2,121613,0x7ff7c0d43c24,332,WasmAllocateJSArray
code-creation,Builtin,2,121619,0x7ff7c0d43d84,104,WasmAllocatePair
code-creation,Builtin,2,121624,0x7ff7c0d43e04,64,WasmAllocateRtt
code-creation,Builtin,2,121629,0x7ff7c0d43e64,72,WasmAllocateFreshRtt
code-creation,Builtin,2,121634,0x7ff7c0d43ec4,124,WasmAllocateStructWithRtt
code-creation,Builtin,2,121639,0x7ff7c0d43f44,140,WasmAllocateArray_Uninitialized
code-creation,Builtin,2,121644,0x7ff7c0d43fe4,176,WasmAllocateArray_InitZero
code-creation,Builtin,2,121650,0x7ff7c0d440a4,176,WasmAllocateArray_InitNull
code-creation,Builtin,2,121655,0x7ff7c0d44164,116,WasmArrayCopyWithChecks
code-creation,Builtin,2,121661,0x7ff7c0d441e4,60,WasmArrayCopy
code-creation,Builtin,2,121666,0x7ff7c0d44224,240,WasmAllocateObjectWrapper
code-creation,Builtin,2,121671,0x7ff7c0d44324,52,WasmSubtypeCheck
code-creation,Builtin,2,121676,0x7ff7c0d44364,8,WasmInt32ToNumber
code-creation,Builtin,2,121681,0x7ff7c0d44384,116,WasmUint32ToNumber
code-creation,Builtin,2,121686,0x7ff7c0d44404,144,UintPtr53ToNumber
code-creation,Builtin,2,121691,0x7ff7c0d444a4,96,WasmAtomicNotify
code-creation,Builtin,2,121696,0x7ff7c0d44524,116,WasmI32AtomicWait64
code-creation,Builtin,2,121701,0x7ff7c0d445a4,116,WasmI64AtomicWait64
code-creation,Builtin,2,121707,0x7ff7c0d44624,580,WasmGetOwnProperty
code-creation,Builtin,2,121711,0x7ff7c0d44884,40,WasmTrap
code-creation,Builtin,2,121716,0x7ff7c0d448c4,16,ThrowWasmTrapUnreachable
code-creation,Builtin,2,121721,0x7ff7c0d448e4,16,ThrowWasmTrapMemOutOfBounds
code-creation,Builtin,2,121727,0x7ff7c0d44904,16,ThrowWasmTrapUnalignedAccess
code-creation,Builtin,2,121734,0x7ff7c0d44924,16,ThrowWasmTrapDivByZero
code-creation,Builtin,2,121740,0x7ff7c0d44944,16,ThrowWasmTrapDivUnrepresentable
code-creation,Builtin,2,121746,0x7ff7c0d44964,16,ThrowWasmTrapRemByZero
code-creation,Builtin,2,121751,0x7ff7c0d44984,16,ThrowWasmTrapFloatUnrepresentable
code-creation,Builtin,2,121757,0x7ff7c0d449a4,16,ThrowWasmTrapFuncSigMismatch
code-creation,Builtin,2,121762,0x7ff7c0d449c4,16,ThrowWasmTrapDataSegmentDropped
code-creation,Builtin,2,121768,0x7ff7c0d449e4,16,ThrowWasmTrapElemSegmentDropped
code-creation,Builtin,2,121773,0x7ff7c0d44a04,16,ThrowWasmTrapTableOutOfBounds
code-creation,Builtin,2,121778,0x7ff7c0d44a24,16,ThrowWasmTrapRethrowNull
code-creation,Builtin,2,121783,0x7ff7c0d44a44,16,ThrowWasmTrapNullDereference
code-creation,Builtin,2,121789,0x7ff7c0d44a64,16,ThrowWasmTrapIllegalCast
code-creation,Builtin,2,121794,0x7ff7c0d44a84,16,ThrowWasmTrapArrayOutOfBounds
code-creation,Builtin,2,121799,0x7ff7c0d44aa4,16,ThrowWasmTrapArrayTooLarge
code-creation,Builtin,2,121805,0x7ff7c0d44ac4,172,LoadJoinElement_GenericElementsAccessor_0
code-creation,Builtin,2,121810,0x7ff7c0d44b84,24,LoadJoinTypedElement_Int32Elements_0
code-creation,Builtin,2,121816,0x7ff7c0d44ba4,116,LoadJoinTypedElement_Float32Elements_0
code-creation,Builtin,2,121821,0x7ff7c0d44c24,112,LoadJoinTypedElement_Float64Elements_0
code-creation,Builtin,2,121827,0x7ff7c0d44ca4,24,LoadJoinTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,121833,0x7ff7c0d44cc4,220,LoadJoinTypedElement_BigUint64Elements_0
code-creation,Builtin,2,121839,0x7ff7c0d44da4,248,LoadJoinTypedElement_BigInt64Elements_0
code-creation,Builtin,2,121845,0x7ff7c0d44ea4,24,LoadJoinTypedElement_Uint8Elements_0
code-creation,Builtin,2,121850,0x7ff7c0d44ec4,24,LoadJoinTypedElement_Int8Elements_0
code-creation,Builtin,2,121856,0x7ff7c0d44ee4,24,LoadJoinTypedElement_Uint16Elements_0
code-creation,Builtin,2,121861,0x7ff7c0d44f04,24,LoadJoinTypedElement_Int16Elements_0
code-creation,Builtin,2,121866,0x7ff7c0d44f24,132,LoadJoinTypedElement_Uint32Elements_0
code-creation,Builtin,2,121872,0x7ff7c0d44fc4,8,GenericBuiltinTest_Smi_0
code-creation,Builtin,2,121877,0x7ff7c0d44fe4,32,CanUseSameAccessor_FastDoubleElements_0
code-creation,Builtin,2,121883,0x7ff7c0d45024,32,CanUseSameAccessor_FastSmiElements_0
code-creation,Builtin,2,121889,0x7ff7c0d45064,32,CanUseSameAccessor_FastObjectElements_0
code-creation,Builtin,2,121895,0x7ff7c0d450a4,2680,Load_GenericElementsAccessor_0
code-creation,Builtin,2,121901,0x7ff7c0d45b24,24,Store_GenericElementsAccessor_0
code-creation,Builtin,2,121906,0x7ff7c0d45b44,36,Delete_GenericElementsAccessor_0
code-creation,Builtin,2,121911,0x7ff7c0d45b84,24,LoadTypedElement_Int32Elements_0
code-creation,Builtin,2,121917,0x7ff7c0d45ba4,164,StoreTypedElementNumeric_Int32Elements_0
code-creation,Builtin,2,121923,0x7ff7c0d45c64,180,StoreTypedElementJSAny_Int32Elements_0
code-creation,Builtin,2,121928,0x7ff7c0d45d24,116,LoadTypedElement_Float32Elements_0
code-creation,Builtin,2,121933,0x7ff7c0d45da4,32,StoreTypedElementNumeric_Float32Elements_0
code-creation,Builtin,2,121939,0x7ff7c0d45de4,156,StoreTypedElementJSAny_Float32Elements_0
code-creation,Builtin,2,121944,0x7ff7c0d45e84,112,LoadTypedElement_Float64Elements_0
code-creation,Builtin,2,121950,0x7ff7c0d45f04,28,StoreTypedElementNumeric_Float64Elements_0
code-creation,Builtin,2,121957,0x7ff7c0d45f24,152,StoreTypedElementJSAny_Float64Elements_0
code-creation,Builtin,2,121962,0x7ff7c0d45fc4,24,LoadTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,121968,0x7ff7c0d45fe4,24,StoreTypedElementNumeric_Uint8ClampedElements_0
code-creation,Builtin,2,121974,0x7ff7c0d46004,620,StoreTypedElementJSAny_Uint8ClampedElements_0
code-creation,Builtin,2,121979,0x7ff7c0d46284,220,LoadTypedElement_BigUint64Elements_0
code-creation,Builtin,2,121985,0x7ff7c0d46364,56,StoreTypedElementNumeric_BigUint64Elements_0
code-creation,Builtin,2,121990,0x7ff7c0d463a4,200,StoreTypedElementJSAny_BigUint64Elements_0
code-creation,Builtin,2,121996,0x7ff7c0d46484,248,LoadTypedElement_BigInt64Elements_0
code-creation,Builtin,2,122002,0x7ff7c0d46584,56,StoreTypedElementNumeric_BigInt64Elements_0
code-creation,Builtin,2,122007,0x7ff7c0d465c4,200,StoreTypedElementJSAny_BigInt64Elements_0
code-creation,Builtin,2,122013,0x7ff7c0d466a4,24,LoadTypedElement_Uint8Elements_0
code-creation,Builtin,2,122018,0x7ff7c0d466c4,24,StoreTypedElementNumeric_Uint8Elements_0
code-creation,Builtin,2,122024,0x7ff7c0d466e4,180,StoreTypedElementJSAny_Uint8Elements_0
code-creation,Builtin,2,122029,0x7ff7c0d467a4,24,LoadTypedElement_Int8Elements_0
code-creation,Builtin,2,122034,0x7ff7c0d467c4,24,StoreTypedElementNumeric_Int8Elements_0
code-creation,Builtin,2,122040,0x7ff7c0d467e4,180,StoreTypedElementJSAny_Int8Elements_0
code-creation,Builtin,2,122046,0x7ff7c0d468a4,24,LoadTypedElement_Uint16Elements_0
code-creation,Builtin,2,122053,0x7ff7c0d468c4,24,StoreTypedElementNumeric_Uint16Elements_0
code-creation,Builtin,2,122059,0x7ff7c0d468e4,180,StoreTypedElementJSAny_Uint16Elements_0
code-creation,Builtin,2,122065,0x7ff7c0d469a4,24,LoadTypedElement_Int16Elements_0
code-creation,Builtin,2,122071,0x7ff7c0d469c4,24,StoreTypedElementNumeric_Int16Elements_0
code-creation,Builtin,2,122078,0x7ff7c0d469e4,180,StoreTypedElementJSAny_Int16Elements_0
code-creation,Builtin,2,122083,0x7ff7c0d46aa4,132,LoadTypedElement_Uint32Elements_0
code-creation,Builtin,2,122089,0x7ff7c0d46b44,164,StoreTypedElementNumeric_Uint32Elements_0
code-creation,Builtin,2,122095,0x7ff7c0d46c04,180,StoreTypedElementJSAny_Uint32Elements_0
code-creation,Builtin,2,122101,0x7ff7c0d46cc4,12,CollatorConstructor
code-creation,Builtin,2,122106,0x7ff7c0d46ce4,12,CollatorInternalCompare
code-creation,Builtin,2,122111,0x7ff7c0d46d04,12,CollatorPrototypeCompare
code-creation,Builtin,2,122116,0x7ff7c0d46d24,12,CollatorSupportedLocalesOf
code-creation,Builtin,2,122121,0x7ff7c0d46d44,12,CollatorPrototypeResolvedOptions
code-creation,Builtin,2,122127,0x7ff7c0d46d64,12,DatePrototypeToLocaleDateString
code-creation,Builtin,2,122132,0x7ff7c0d46d84,12,DatePrototypeToLocaleString
code-creation,Builtin,2,122137,0x7ff7c0d46da4,12,DatePrototypeToLocaleTimeString
code-creation,Builtin,2,122143,0x7ff7c0d46dc4,12,DateTimeFormatConstructor
code-creation,Builtin,2,122148,0x7ff7c0d46de4,12,DateTimeFormatInternalFormat
code-creation,Builtin,2,122154,0x7ff7c0d46e04,12,DateTimeFormatPrototypeFormat
code-creation,Builtin,2,122159,0x7ff7c0d46e24,12,DateTimeFormatPrototypeFormatRange
code-creation,Builtin,2,122165,0x7ff7c0d46e44,12,DateTimeFormatPrototypeFormatRangeToParts
code-creation,Builtin,2,122171,0x7ff7c0d46e64,12,DateTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,122177,0x7ff7c0d46e84,12,DateTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,122182,0x7ff7c0d46ea4,12,DateTimeFormatSupportedLocalesOf
code-creation,Builtin,2,122188,0x7ff7c0d46ec4,12,DisplayNamesConstructor
code-creation,Builtin,2,122193,0x7ff7c0d46ee4,12,DisplayNamesPrototypeOf
code-creation,Builtin,2,122198,0x7ff7c0d46f04,12,DisplayNamesPrototypeResolvedOptions
code-creation,Builtin,2,122204,0x7ff7c0d46f24,12,DisplayNamesSupportedLocalesOf
code-creation,Builtin,2,122209,0x7ff7c0d46f44,12,IntlGetCanonicalLocales
code-creation,Builtin,2,122214,0x7ff7c0d46f64,12,ListFormatConstructor
code-creation,Builtin,2,122219,0x7ff7c0d46f84,224,ListFormatPrototypeFormat
code-creation,Builtin,2,122224,0x7ff7c0d47084,224,ListFormatPrototypeFormatToParts
code-creation,Builtin,2,122230,0x7ff7c0d47184,12,ListFormatPrototypeResolvedOptions
code-creation,Builtin,2,122235,0x7ff7c0d471a4,12,ListFormatSupportedLocalesOf
code-creation,Builtin,2,122241,0x7ff7c0d471c4,12,LocaleConstructor
code-creation,Builtin,2,122247,0x7ff7c0d471e4,12,LocalePrototypeBaseName
code-creation,Builtin,2,122252,0x7ff7c0d47204,12,LocalePrototypeCalendar
code-creation,Builtin,2,122257,0x7ff7c0d47224,12,LocalePrototypeCalendars
code-creation,Builtin,2,122262,0x7ff7c0d47244,12,LocalePrototypeCaseFirst
code-creation,Builtin,2,122268,0x7ff7c0d47264,12,LocalePrototypeCollation
code-creation,Builtin,2,122273,0x7ff7c0d47284,12,LocalePrototypeCollations
code-creation,Builtin,2,122279,0x7ff7c0d472a4,12,LocalePrototypeHourCycle
code-creation,Builtin,2,122285,0x7ff7c0d472c4,12,LocalePrototypeHourCycles
code-creation,Builtin,2,122290,0x7ff7c0d472e4,12,LocalePrototypeLanguage
code-creation,Builtin,2,122295,0x7ff7c0d47304,12,LocalePrototypeMaximize
code-creation,Builtin,2,122301,0x7ff7c0d47324,12,LocalePrototypeMinimize
code-creation,Builtin,2,122306,0x7ff7c0d47344,12,LocalePrototypeNumeric
code-creation,Builtin,2,122311,0x7ff7c0d47364,12,LocalePrototypeNumberingSystem
code-creation,Builtin,2,122316,0x7ff7c0d47384,12,LocalePrototypeNumberingSystems
code-creation,Builtin,2,122322,0x7ff7c0d473a4,12,LocalePrototypeRegion
code-creation,Builtin,2,122327,0x7ff7c0d473c4,12,LocalePrototypeScript
code-creation,Builtin,2,122332,0x7ff7c0d473e4,12,LocalePrototypeTextInfo
code-creation,Builtin,2,122337,0x7ff7c0d47404,12,LocalePrototypeTimeZones
code-creation,Builtin,2,122343,0x7ff7c0d47424,12,LocalePrototypeToString
code-creation,Builtin,2,122348,0x7ff7c0d47444,12,LocalePrototypeWeekInfo
code-creation,Builtin,2,122353,0x7ff7c0d47464,12,NumberFormatConstructor
code-creation,Builtin,2,122358,0x7ff7c0d47484,12,NumberFormatInternalFormatNumber
code-creation,Builtin,2,122363,0x7ff7c0d474a4,12,NumberFormatPrototypeFormatNumber
code-creation,Builtin,2,122369,0x7ff7c0d474c4,12,NumberFormatPrototypeFormatToParts
code-creation,Builtin,2,122375,0x7ff7c0d474e4,12,NumberFormatPrototypeResolvedOptions
code-creation,Builtin,2,122382,0x7ff7c0d47504,12,NumberFormatSupportedLocalesOf
code-creation,Builtin,2,122387,0x7ff7c0d47524,12,PluralRulesConstructor
code-creation,Builtin,2,122393,0x7ff7c0d47544,12,PluralRulesPrototypeResolvedOptions
code-creation,Builtin,2,122398,0x7ff7c0d47564,12,PluralRulesPrototypeSelect
code-creation,Builtin,2,122403,0x7ff7c0d47584,12,PluralRulesSupportedLocalesOf
code-creation,Builtin,2,122409,0x7ff7c0d475a4,12,RelativeTimeFormatConstructor
code-creation,Builtin,2,122414,0x7ff7c0d475c4,12,RelativeTimeFormatPrototypeFormat
code-creation,Builtin,2,122420,0x7ff7c0d475e4,12,RelativeTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,122425,0x7ff7c0d47604,12,RelativeTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,122431,0x7ff7c0d47624,12,RelativeTimeFormatSupportedLocalesOf
code-creation,Builtin,2,122437,0x7ff7c0d47644,12,SegmenterConstructor
code-creation,Builtin,2,122442,0x7ff7c0d47664,12,SegmenterPrototypeResolvedOptions
code-creation,Builtin,2,122448,0x7ff7c0d47684,12,SegmenterPrototypeSegment
code-creation,Builtin,2,122453,0x7ff7c0d476a4,12,SegmenterSupportedLocalesOf
code-creation,Builtin,2,122459,0x7ff7c0d476c4,12,SegmentIteratorPrototypeNext
code-creation,Builtin,2,122464,0x7ff7c0d476e4,12,SegmentsPrototypeContaining
code-creation,Builtin,2,122469,0x7ff7c0d47704,12,SegmentsPrototypeIterator
code-creation,Builtin,2,122475,0x7ff7c0d47724,12,StringPrototypeNormalizeIntl
code-creation,Builtin,2,122480,0x7ff7c0d47744,12,StringPrototypeToLocaleLowerCase
code-creation,Builtin,2,122485,0x7ff7c0d47764,12,StringPrototypeToLocaleUpperCase
code-creation,Builtin,2,122491,0x7ff7c0d47784,200,StringPrototypeToLowerCaseIntl
code-creation,Builtin,2,122497,0x7ff7c0d47864,12,StringPrototypeToUpperCaseIntl
code-creation,Builtin,2,122502,0x7ff7c0d47884,636,StringToLowerCaseIntl
code-creation,Builtin,2,122508,0x7ff7c0d47b04,12,V8BreakIteratorConstructor
code-creation,Builtin,2,122513,0x7ff7c0d47b24,12,V8BreakIteratorInternalAdoptText
code-creation,Builtin,2,122518,0x7ff7c0d47b44,12,V8BreakIteratorInternalBreakType
code-creation,Builtin,2,122524,0x7ff7c0d47b64,12,V8BreakIteratorInternalCurrent
code-creation,Builtin,2,122530,0x7ff7c0d47b84,12,V8BreakIteratorInternalFirst
code-creation,Builtin,2,122535,0x7ff7c0d47ba4,12,V8BreakIteratorInternalNext
code-creation,Builtin,2,122541,0x7ff7c0d47bc4,12,V8BreakIteratorPrototypeAdoptText
code-creation,Builtin,2,122546,0x7ff7c0d47be4,12,V8BreakIteratorPrototypeBreakType
code-creation,Builtin,2,122552,0x7ff7c0d47c04,12,V8BreakIteratorPrototypeCurrent
code-creation,Builtin,2,122557,0x7ff7c0d47c24,12,V8BreakIteratorPrototypeFirst
code-creation,Builtin,2,122562,0x7ff7c0d47c44,12,V8BreakIteratorPrototypeNext
code-creation,Builtin,2,122567,0x7ff7c0d47c64,12,V8BreakIteratorPrototypeResolvedOptions
code-creation,Builtin,2,122573,0x7ff7c0d47c84,12,V8BreakIteratorSupportedLocalesOf
code-creation,BytecodeHandler,0,122581,0x7ff7c0d47ca4,24,Wide
code-creation,BytecodeHandler,0,122586,0x7ff7c0d47cc4,24,ExtraWide
code-creation,BytecodeHandler,0,122592,0x7ff7c0d47ce4,104,DebugBreakWide
code-creation,BytecodeHandler,0,122597,0x7ff7c0d47d64,104,DebugBreakExtraWide
code-creation,BytecodeHandler,0,122602,0x7ff7c0d47de4,164,DebugBreak0
code-creation,BytecodeHandler,0,122608,0x7ff7c0d47ea4,104,DebugBreak1
code-creation,BytecodeHandler,0,122613,0x7ff7c0d47f24,104,DebugBreak2
code-creation,BytecodeHandler,0,122618,0x7ff7c0d47fa4,104,DebugBreak3
code-creation,BytecodeHandler,0,122623,0x7ff7c0d48024,104,DebugBreak4
code-creation,BytecodeHandler,0,122628,0x7ff7c0d480a4,104,DebugBreak5
code-creation,BytecodeHandler,0,122633,0x7ff7c0d48124,104,DebugBreak6
code-creation,BytecodeHandler,0,122639,0x7ff7c0d481a4,32,Ldar
code-creation,BytecodeHandler,0,122643,0x7ff7c0d481e4,68,LdaZero
code-creation,BytecodeHandler,0,122648,0x7ff7c0d48244,76,LdaSmi
code-creation,BytecodeHandler,0,122653,0x7ff7c0d482a4,68,LdaUndefined
code-creation,BytecodeHandler,0,122659,0x7ff7c0d48304,68,LdaNull
code-creation,BytecodeHandler,0,122664,0x7ff7c0d48364,68,LdaTheHole
code-creation,BytecodeHandler,0,122669,0x7ff7c0d483c4,20,LdaTrue
code-creation,BytecodeHandler,0,122674,0x7ff7c0d483e4,20,LdaFalse
code-creation,BytecodeHandler,0,122679,0x7ff7c0d48404,76,LdaConstant
code-creation,BytecodeHandler,0,122684,0x7ff7c0d48464,132,LdaContextSlot
code-creation,BytecodeHandler,0,122689,0x7ff7c0d48504,132,LdaImmutableContextSlot
code-creation,BytecodeHandler,0,122694,0x7ff7c0d485a4,88,LdaCurrentContextSlot
code-creation,BytecodeHandler,0,122700,0x7ff7c0d48604,88,LdaImmutableCurrentContextSlot
code-creation,BytecodeHandler,0,122706,0x7ff7c0d48664,32,Star
code-creation,BytecodeHandler,0,122711,0x7ff7c0d486a4,40,Mov
code-creation,BytecodeHandler,0,122715,0x7ff7c0d486e4,40,PushContext
code-creation,BytecodeHandler,0,122720,0x7ff7c0d48724,36,PopContext
code-creation,BytecodeHandler,0,122726,0x7ff7c0d48764,48,TestReferenceEqual
code-creation,BytecodeHandler,0,122731,0x7ff7c0d487a4,52,TestUndetectable
code-creation,BytecodeHandler,0,122737,0x7ff7c0d487e4,36,TestNull
code-creation,BytecodeHandler,0,122742,0x7ff7c0d48824,36,TestUndefined
code-creation,BytecodeHandler,0,122748,0x7ff7c0d48864,336,TestTypeOf
code-creation,BytecodeHandler,0,122753,0x7ff7c0d489c4,6036,LdaGlobal
code-creation,BytecodeHandler,0,122758,0x7ff7c0d4a164,4536,LdaGlobalInsideTypeof
code-creation,BytecodeHandler,0,122763,0x7ff7c0d4b324,168,StaGlobal
code-creation,BytecodeHandler,0,122768,0x7ff7c0d4b3e4,160,StaContextSlot
code-creation,BytecodeHandler,0,122774,0x7ff7c0d4b4a4,116,StaCurrentContextSlot
code-creation,BytecodeHandler,0,122779,0x7ff7c0d4b524,124,LdaLookupSlot
code-creation,BytecodeHandler,0,122784,0x7ff7c0d4b5a4,240,LdaLookupContextSlot
code-creation,BytecodeHandler,0,122790,0x7ff7c0d4b6a4,4776,LdaLookupGlobalSlot
code-creation,BytecodeHandler,0,122795,0x7ff7c0d4c964,124,LdaLookupSlotInsideTypeof
code-creation,BytecodeHandler,0,122801,0x7ff7c0d4c9e4,240,LdaLookupContextSlotInsideTypeof
code-creation,BytecodeHandler,0,122807,0x7ff7c0d4cae4,4740,LdaLookupGlobalSlotInsideTypeof
code-creation,BytecodeHandler,0,122812,0x7ff7c0d4dd84,220,StaLookupSlot
code-creation,BytecodeHandler,0,122817,0x7ff7c0d4de64,5216,LdaNamedProperty
code-creation,BytecodeHandler,0,122823,0x7ff7c0d4f2e4,180,LdaNamedPropertyFromSuper
code-creation,BytecodeHandler,0,122829,0x7ff7c0d4f3a4,212,LdaKeyedProperty
code-creation,BytecodeHandler,0,122835,0x7ff7c0d4f484,160,LdaModuleVariable
code-creation,BytecodeHandler,0,122840,0x7ff7c0d4f544,292,StaModuleVariable
code-creation,BytecodeHandler,0,122845,0x7ff7c0d4f684,172,StaNamedProperty
code-creation,BytecodeHandler,0,122851,0x7ff7c0d4f744,172,StaNamedOwnProperty
code-creation,BytecodeHandler,0,122856,0x7ff7c0d4f804,164,StaKeyedProperty
code-creation,BytecodeHandler,0,122861,0x7ff7c0d4f8c4,164,StaInArrayLiteral
code-creation,BytecodeHandler,0,122867,0x7ff7c0d4f984,196,StaDataPropertyInLiteral
code-creation,BytecodeHandler,0,122872,0x7ff7c0d4fa64,160,CollectTypeProfile
code-creation,BytecodeHandler,0,122878,0x7ff7c0d4fb24,1028,Add
code-creation,BytecodeHandler,0,122883,0x7ff7c0d4ff44,1064,Sub
code-creation,BytecodeHandler,0,122888,0x7ff7c0d50384,1024,Mul
code-creation,BytecodeHandler,0,122893,0x7ff7c0d507a4,988,Div
code-creation,BytecodeHandler,0,122898,0x7ff7c0d50b84,912,Mod
code-creation,BytecodeHandler,0,122903,0x7ff7c0d50f24,964,Exp
code-creation,BytecodeHandler,0,122909,0x7ff7c0d51304,876,BitwiseOr
code-creation,BytecodeHandler,0,122914,0x7ff7c0d51684,888,BitwiseXor
code-creation,BytecodeHandler,0,122920,0x7ff7c0d51a04,888,BitwiseAnd
code-creation,BytecodeHandler,0,122926,0x7ff7c0d51d84,900,ShiftLeft
code-creation,BytecodeHandler,0,122931,0x7ff7c0d52124,900,ShiftRight
code-creation,BytecodeHandler,0,122937,0x7ff7c0d524c4,1020,ShiftRightLogical
code-creation,BytecodeHandler,0,122943,0x7ff7c0d528c4,960,AddSmi
code-creation,BytecodeHandler,0,122948,0x7ff7c0d52ca4,1000,SubSmi
code-creation,BytecodeHandler,0,122953,0x7ff7c0d530a4,916,MulSmi
code-creation,BytecodeHandler,0,122959,0x7ff7c0d53444,920,DivSmi
code-creation,BytecodeHandler,0,122964,0x7ff7c0d537e4,816,ModSmi
code-creation,BytecodeHandler,0,122970,0x7ff7c0d53b24,872,ExpSmi
code-creation,BytecodeHandler,0,122976,0x7ff7c0d53ea4,488,BitwiseOrSmi
code-creation,BytecodeHandler,0,122982,0x7ff7c0d540a4,488,BitwiseXorSmi
code-creation,BytecodeHandler,0,122988,0x7ff7c0d542a4,488,BitwiseAndSmi
code-creation,BytecodeHandler,0,122994,0x7ff7c0d544a4,488,ShiftLeftSmi
code-creation,BytecodeHandler,0,123000,0x7ff7c0d546a4,488,ShiftRightSmi
code-creation,BytecodeHandler,0,123005,0x7ff7c0d548a4,640,ShiftRightLogicalSmi
code-creation,BytecodeHandler,0,123010,0x7ff7c0d54b44,656,Inc
code-creation,BytecodeHandler,0,123015,0x7ff7c0d54de4,656,Dec
code-creation,BytecodeHandler,0,123020,0x7ff7c0d55084,640,Negate
code-creation,BytecodeHandler,0,123026,0x7ff7c0d55324,480,BitwiseNot
code-creation,BytecodeHandler,0,123031,0x7ff7c0d55524,108,ToBooleanLogicalNot
code-creation,BytecodeHandler,0,123036,0x7ff7c0d555a4,36,LogicalNot
code-creation,BytecodeHandler,0,123042,0x7ff7c0d555e4,208,TypeOf
code-creation,BytecodeHandler,0,123048,0x7ff7c0d556c4,120,DeletePropertyStrict
code-creation,BytecodeHandler,0,123055,0x7ff7c0d55744,112,DeletePropertySloppy
code-creation,BytecodeHandler,0,123060,0x7ff7c0d557c4,40,GetSuperConstructor
code-creation,BytecodeHandler,0,123067,0x7ff7c0d55804,1132,CallAnyReceiver
code-creation,BytecodeHandler,0,123072,0x7ff7c0d55c84,1132,CallProperty
code-creation,BytecodeHandler,0,123077,0x7ff7c0d56104,1012,CallProperty0
code-creation,BytecodeHandler,0,123083,0x7ff7c0d56504,1028,CallProperty1
code-creation,BytecodeHandler,0,123088,0x7ff7c0d56924,1040,CallProperty2
code-creation,BytecodeHandler,0,123093,0x7ff7c0d56d44,1016,CallUndefinedReceiver
code-creation,BytecodeHandler,0,123099,0x7ff7c0d57144,1048,CallUndefinedReceiver0
code-creation,BytecodeHandler,0,123104,0x7ff7c0d57564,1020,CallUndefinedReceiver1
code-creation,BytecodeHandler,0,123110,0x7ff7c0d57964,1040,CallUndefinedReceiver2
code-creation,BytecodeHandler,0,123115,0x7ff7c0d57d84,1132,CallWithSpread
code-creation,BytecodeHandler,0,123121,0x7ff7c0d58204,124,CallRuntime
code-creation,BytecodeHandler,0,123127,0x7ff7c0d58284,156,CallRuntimeForPair
code-creation,BytecodeHandler,0,123133,0x7ff7c0d58324,80,CallJSRuntime
code-creation,BytecodeHandler,0,123139,0x7ff7c0d58384,1236,InvokeIntrinsic
code-creation,BytecodeHandler,0,123145,0x7ff7c0d58864,1020,Construct
code-creation,BytecodeHandler,0,123150,0x7ff7c0d58c64,536,ConstructWithSpread
code-creation,BytecodeHandler,0,123156,0x7ff7c0d58e84,1936,TestEqual
code-creation,BytecodeHandler,0,123161,0x7ff7c0d59624,1064,TestEqualStrict
code-creation,BytecodeHandler,0,123166,0x7ff7c0d59a64,1624,TestLessThan
code-creation,BytecodeHandler,0,123171,0x7ff7c0d5a0c4,1624,TestGreaterThan
code-creation,BytecodeHandler,0,123177,0x7ff7c0d5a724,1624,TestLessThanOrEqual
code-creation,BytecodeHandler,0,123182,0x7ff7c0d5ad84,1624,TestGreaterThanOrEqual
code-creation,BytecodeHandler,0,123188,0x7ff7c0d5b3e4,860,TestInstanceOf
code-creation,BytecodeHandler,0,123193,0x7ff7c0d5b744,156,TestIn
code-creation,BytecodeHandler,0,123198,0x7ff7c0d5b7e4,112,ToName
code-creation,BytecodeHandler,0,123203,0x7ff7c0d5b864,212,ToNumber
code-creation,BytecodeHandler,0,123209,0x7ff7c0d5b944,232,ToNumeric
code-creation,BytecodeHandler,0,123214,0x7ff7c0d5ba44,112,ToObject
code-creation,BytecodeHandler,0,123219,0x7ff7c0d5bac4,116,ToString
code-creation,BytecodeHandler,0,123224,0x7ff7c0d5bb44,400,CreateRegExpLiteral
code-creation,BytecodeHandler,0,123229,0x7ff7c0d5bce4,1468,CreateArrayLiteral
code-creation,BytecodeHandler,0,123235,0x7ff7c0d5c2a4,92,CreateArrayFromIterable
code-creation,BytecodeHandler,0,123240,0x7ff7c0d5c304,788,CreateEmptyArrayLiteral
code-creation,BytecodeHandler,0,123246,0x7ff7c0d5c624,2140,CreateObjectLiteral
code-creation,BytecodeHandler,0,123251,0x7ff7c0d5ce84,224,CreateEmptyObjectLiteral
code-creation,BytecodeHandler,0,123257,0x7ff7c0d5cf84,168,CloneObject
code-creation,BytecodeHandler,0,123262,0x7ff7c0d5d044,212,GetTemplateObject
code-creation,BytecodeHandler,0,123267,0x7ff7c0d5d124,328,CreateClosure
code-creation,BytecodeHandler,0,123273,0x7ff7c0d5d284,120,CreateBlockContext
code-creation,BytecodeHandler,0,123279,0x7ff7c0d5d304,132,CreateCatchContext
code-creation,BytecodeHandler,0,123284,0x7ff7c0d5d3a4,256,CreateFunctionContext
code-creation,BytecodeHandler,0,123290,0x7ff7c0d5d4c4,256,CreateEvalContext
code-creation,BytecodeHandler,0,123295,0x7ff7c0d5d5e4,132,CreateWithContext
code-creation,BytecodeHandler,0,123317,0x7ff7c0d5d684,1568,CreateMappedArguments
code-creation,BytecodeHandler,0,123324,0x7ff7c0d5dcc4,592,CreateUnmappedArguments
code-creation,BytecodeHandler,0,123329,0x7ff7c0d5df24,632,CreateRestParameter
code-creation,BytecodeHandler,0,123335,0x7ff7c0d5e1a4,424,JumpLoop
code-creation,BytecodeHandler,0,123340,0x7ff7c0d5e364,44,Jump
code-creation,BytecodeHandler,0,123345,0x7ff7c0d5e3a4,56,JumpConstant
code-creation,BytecodeHandler,0,123350,0x7ff7c0d5e3e4,80,JumpIfNullConstant
code-creation,BytecodeHandler,0,123355,0x7ff7c0d5e444,80,JumpIfNotNullConstant
code-creation,BytecodeHandler,0,123361,0x7ff7c0d5e4a4,80,JumpIfUndefinedConstant
code-creation,BytecodeHandler,0,123367,0x7ff7c0d5e504,80,JumpIfNotUndefinedConstant
code-creation,BytecodeHandler,0,123373,0x7ff7c0d5e564,84,JumpIfUndefinedOrNullConstant
code-creation,BytecodeHandler,0,123379,0x7ff7c0d5e5c4,80,JumpIfTrueConstant
code-creation,BytecodeHandler,0,123384,0x7ff7c0d5e624,80,JumpIfFalseConstant
code-creation,BytecodeHandler,0,123389,0x7ff7c0d5e684,88,JumpIfJSReceiverConstant
code-creation,BytecodeHandler,0,123395,0x7ff7c0d5e6e4,152,JumpIfToBooleanTrueConstant
code-creation,BytecodeHandler,0,123400,0x7ff7c0d5e784,152,JumpIfToBooleanFalseConstant
code-creation,BytecodeHandler,0,123406,0x7ff7c0d5e824,136,JumpIfToBooleanTrue
code-creation,BytecodeHandler,0,123412,0x7ff7c0d5e8c4,136,JumpIfToBooleanFalse
code-creation,BytecodeHandler,0,123418,0x7ff7c0d5e964,64,JumpIfTrue
code-creation,BytecodeHandler,0,123423,0x7ff7c0d5e9c4,64,JumpIfFalse
code-creation,BytecodeHandler,0,123429,0x7ff7c0d5ea24,64,JumpIfNull
code-creation,BytecodeHandler,0,123434,0x7ff7c0d5ea84,64,JumpIfNotNull
code-creation,BytecodeHandler,0,123439,0x7ff7c0d5eae4,64,JumpIfUndefined
code-creation,BytecodeHandler,0,123445,0x7ff7c0d5eb44,64,JumpIfNotUndefined
code-creation,BytecodeHandler,0,123450,0x7ff7c0d5eba4,72,JumpIfUndefinedOrNull
code-creation,BytecodeHandler,0,123456,0x7ff7c0d5ec04,76,JumpIfJSReceiver
code-creation,BytecodeHandler,0,123461,0x7ff7c0d5ec64,108,SwitchOnSmiNoFeedback
code-creation,BytecodeHandler,0,123466,0x7ff7c0d5ece4,464,ForInEnumerate
code-creation,BytecodeHandler,0,123471,0x7ff7c0d5eec4,252,ForInPrepare
code-creation,BytecodeHandler,0,123476,0x7ff7c0d5efc4,60,ForInContinue
code-creation,BytecodeHandler,0,123482,0x7ff7c0d5f004,256,ForInNext
code-creation,BytecodeHandler,0,123487,0x7ff7c0d5f124,48,ForInStep
code-creation,BytecodeHandler,0,123493,0x7ff7c0d5f164,36,SetPendingMessage
code-creation,BytecodeHandler,0,123498,0x7ff7c0d5f1a4,116,Throw
code-creation,BytecodeHandler,0,123504,0x7ff7c0d5f224,116,ReThrow
code-creation,BytecodeHandler,0,123510,0x7ff7c0d5f2a4,112,Return
code-creation,BytecodeHandler,0,123516,0x7ff7c0d5f324,196,ThrowReferenceErrorIfHole
code-creation,BytecodeHandler,0,123522,0x7ff7c0d5f404,132,ThrowSuperNotCalledIfHole
code-creation,BytecodeHandler,0,123528,0x7ff7c0d5f4a4,132,ThrowSuperAlreadyCalledIfNotHole
code-creation,BytecodeHandler,0,123535,0x7ff7c0d5f544,156,ThrowIfNotSuperConstructor
code-creation,BytecodeHandler,0,123541,0x7ff7c0d5f5e4,120,SwitchOnGeneratorState
code-creation,BytecodeHandler,0,123547,0x7ff7c0d5f664,512,SuspendGenerator
code-creation,BytecodeHandler,0,123552,0x7ff7c0d5f884,128,ResumeGenerator
code-creation,BytecodeHandler,0,123557,0x7ff7c0d5f924,152,GetIterator
code-creation,BytecodeHandler,0,123564,0x7ff7c0d5f9c4,116,Debugger
code-creation,BytecodeHandler,0,123569,0x7ff7c0d5fa44,124,IncBlockCounter
code-creation,BytecodeHandler,0,123574,0x7ff7c0d5fac4,56,Abort
code-creation,BytecodeHandler,0,123580,0x7ff7c0d5fb04,32,Star0
code-creation,BytecodeHandler,0,123584,0x7ff7c0d5fb44,60,Illegal
code-creation,BytecodeHandler,0,123591,0x7ff7c0d5fb84,108,DebugBreak1.Wide
code-creation,BytecodeHandler,0,123597,0x7ff7c0d5fc04,108,DebugBreak2.Wide
code-creation,BytecodeHandler,0,123603,0x7ff7c0d5fc84,108,DebugBreak3.Wide
code-creation,BytecodeHandler,0,123608,0x7ff7c0d5fd04,108,DebugBreak4.Wide
code-creation,BytecodeHandler,0,123614,0x7ff7c0d5fd84,108,DebugBreak5.Wide
code-creation,BytecodeHandler,0,123619,0x7ff7c0d5fe04,108,DebugBreak6.Wide
code-creation,BytecodeHandler,0,123625,0x7ff7c0d5fe84,32,Ldar.Wide
code-creation,BytecodeHandler,0,123630,0x7ff7c0d5fec4,32,LdaSmi.Wide
code-creation,BytecodeHandler,0,123635,0x7ff7c0d5ff04,32,LdaConstant.Wide
code-creation,BytecodeHandler,0,123641,0x7ff7c0d5ff44,92,LdaContextSlot.Wide
code-creation,BytecodeHandler,0,123647,0x7ff7c0d5ffa4,92,LdaImmutableContextSlot.Wide
code-creation,BytecodeHandler,0,123653,0x7ff7c0d60004,48,LdaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,123660,0x7ff7c0d60044,48,LdaImmutableCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,123666,0x7ff7c0d60084,32,Star.Wide
code-creation,BytecodeHandler,0,123672,0x7ff7c0d600c4,40,Mov.Wide
code-creation,BytecodeHandler,0,123677,0x7ff7c0d60104,40,PushContext.Wide
code-creation,BytecodeHandler,0,123683,0x7ff7c0d60144,36,PopContext.Wide
code-creation,BytecodeHandler,0,123688,0x7ff7c0d60184,48,TestReferenceEqual.Wide
code-creation,BytecodeHandler,0,123694,0x7ff7c0d601c4,4668,LdaGlobal.Wide
code-creation,BytecodeHandler,0,123699,0x7ff7c0d61404,4604,LdaGlobalInsideTypeof.Wide
code-creation,BytecodeHandler,0,123705,0x7ff7c0d62604,172,StaGlobal.Wide
code-creation,BytecodeHandler,0,123711,0x7ff7c0d626c4,160,StaContextSlot.Wide
code-creation,BytecodeHandler,0,123717,0x7ff7c0d62784,116,StaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,123724,0x7ff7c0d62804,128,LdaLookupSlot.Wide
code-creation,BytecodeHandler,0,123730,0x7ff7c0d628a4,244,LdaLookupContextSlot.Wide
code-creation,BytecodeHandler,0,123736,0x7ff7c0d629a4,4852,LdaLookupGlobalSlot.Wide
code-creation,BytecodeHandler,0,123742,0x7ff7c0d63ca4,128,LdaLookupSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,123749,0x7ff7c0d63d44,244,LdaLookupContextSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,123755,0x7ff7c0d63e44,4812,LdaLookupGlobalSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,123761,0x7ff7c0d65124,220,StaLookupSlot.Wide
code-creation,BytecodeHandler,0,123767,0x7ff7c0d65204,5216,LdaNamedProperty.Wide
code-creation,BytecodeHandler,0,123772,0x7ff7c0d66684,188,LdaNamedPropertyFromSuper.Wide
code-creation,BytecodeHandler,0,123778,0x7ff7c0d66744,160,LdaKeyedProperty.Wide
code-creation,BytecodeHandler,0,123783,0x7ff7c0d66804,160,LdaModuleVariable.Wide
code-creation,BytecodeHandler,0,123789,0x7ff7c0d668c4,300,StaModuleVariable.Wide
code-creation,BytecodeHandler,0,123795,0x7ff7c0d66a04,176,StaNamedProperty.Wide
code-creation,BytecodeHandler,0,123800,0x7ff7c0d66ac4,176,StaNamedOwnProperty.Wide
code-creation,BytecodeHandler,0,123806,0x7ff7c0d66b84,168,StaKeyedProperty.Wide
code-creation,BytecodeHandler,0,123811,0x7ff7c0d66c44,168,StaInArrayLiteral.Wide
code-creation,BytecodeHandler,0,123817,0x7ff7c0d66d04,200,StaDataPropertyInLiteral.Wide
code-creation,BytecodeHandler,0,123823,0x7ff7c0d66de4,164,CollectTypeProfile.Wide
code-creation,BytecodeHandler,0,123828,0x7ff7c0d66ea4,984,Add.Wide
code-creation,BytecodeHandler,0,123833,0x7ff7c0d67284,1020,Sub.Wide
code-creation,BytecodeHandler,0,123838,0x7ff7c0d67684,972,Mul.Wide
code-creation,BytecodeHandler,0,123844,0x7ff7c0d67a64,988,Div.Wide
code-creation,BytecodeHandler,0,123849,0x7ff7c0d67e44,916,Mod.Wide
code-creation,BytecodeHandler,0,123854,0x7ff7c0d681e4,988,Exp.Wide
code-creation,BytecodeHandler,0,123859,0x7ff7c0d685c4,904,BitwiseOr.Wide
code-creation,BytecodeHandler,0,123864,0x7ff7c0d68964,920,BitwiseXor.Wide
code-creation,BytecodeHandler,0,123870,0x7ff7c0d68d04,920,BitwiseAnd.Wide
code-creation,BytecodeHandler,0,123875,0x7ff7c0d690a4,932,ShiftLeft.Wide
code-creation,BytecodeHandler,0,123880,0x7ff7c0d69464,932,ShiftRight.Wide
code-creation,BytecodeHandler,0,123886,0x7ff7c0d69824,1052,ShiftRightLogical.Wide
code-creation,BytecodeHandler,0,123891,0x7ff7c0d69c44,916,AddSmi.Wide
code-creation,BytecodeHandler,0,123896,0x7ff7c0d69fe4,960,SubSmi.Wide
code-creation,BytecodeHandler,0,123901,0x7ff7c0d6a3c4,912,MulSmi.Wide
code-creation,BytecodeHandler,0,123907,0x7ff7c0d6a764,920,DivSmi.Wide
code-creation,BytecodeHandler,0,123913,0x7ff7c0d6ab04,816,ModSmi.Wide
code-creation,BytecodeHandler,0,123919,0x7ff7c0d6ae44,872,ExpSmi.Wide
code-creation,BytecodeHandler,0,123924,0x7ff7c0d6b1c4,496,BitwiseOrSmi.Wide
code-creation,BytecodeHandler,0,123930,0x7ff7c0d6b3c4,496,BitwiseXorSmi.Wide
code-creation,BytecodeHandler,0,123935,0x7ff7c0d6b5c4,496,BitwiseAndSmi.Wide
code-creation,BytecodeHandler,0,123941,0x7ff7c0d6b7c4,496,ShiftLeftSmi.Wide
code-creation,BytecodeHandler,0,123946,0x7ff7c0d6b9c4,496,ShiftRightSmi.Wide
code-creation,BytecodeHandler,0,123952,0x7ff7c0d6bbc4,648,ShiftRightLogicalSmi.Wide
code-creation,BytecodeHandler,0,123958,0x7ff7c0d6be64,616,Inc.Wide
code-creation,BytecodeHandler,0,123963,0x7ff7c0d6c0e4,616,Dec.Wide
code-creation,BytecodeHandler,0,123968,0x7ff7c0d6c364,648,Negate.Wide
code-creation,BytecodeHandler,0,123973,0x7ff7c0d6c604,492,BitwiseNot.Wide
code-creation,BytecodeHandler,0,123979,0x7ff7c0d6c804,124,DeletePropertyStrict.Wide
code-creation,BytecodeHandler,0,123985,0x7ff7c0d6c884,116,DeletePropertySloppy.Wide
code-creation,BytecodeHandler,0,123990,0x7ff7c0d6c904,40,GetSuperConstructor.Wide
code-creation,BytecodeHandler,0,123996,0x7ff7c0d6c944,1136,CallAnyReceiver.Wide
code-creation,BytecodeHandler,0,124002,0x7ff7c0d6cdc4,1136,CallProperty.Wide
code-creation,BytecodeHandler,0,124008,0x7ff7c0d6d244,1016,CallProperty0.Wide
code-creation,BytecodeHandler,0,124014,0x7ff7c0d6d644,1032,CallProperty1.Wide
code-creation,BytecodeHandler,0,124019,0x7ff7c0d6da64,1044,CallProperty2.Wide
code-creation,BytecodeHandler,0,124024,0x7ff7c0d6de84,1020,CallUndefinedReceiver.Wide
code-creation,BytecodeHandler,0,124030,0x7ff7c0d6e284,1052,CallUndefinedReceiver0.Wide
code-creation,BytecodeHandler,0,124036,0x7ff7c0d6e6a4,1024,CallUndefinedReceiver1.Wide
code-creation,BytecodeHandler,0,124042,0x7ff7c0d6eac4,1044,CallUndefinedReceiver2.Wide
code-creation,BytecodeHandler,0,124048,0x7ff7c0d6eee4,1136,CallWithSpread.Wide
code-creation,BytecodeHandler,0,124053,0x7ff7c0d6f364,128,CallRuntime.Wide
code-creation,BytecodeHandler,0,124058,0x7ff7c0d6f404,168,CallRuntimeForPair.Wide
code-creation,BytecodeHandler,0,124064,0x7ff7c0d6f4c4,84,CallJSRuntime.Wide
code-creation,BytecodeHandler,0,124069,0x7ff7c0d6f524,1240,InvokeIntrinsic.Wide
code-creation,BytecodeHandler,0,124074,0x7ff7c0d6fa04,968,Construct.Wide
code-creation,BytecodeHandler,0,124080,0x7ff7c0d6fde4,476,ConstructWithSpread.Wide
code-creation,BytecodeHandler,0,124086,0x7ff7c0d6ffc4,1964,TestEqual.Wide
code-creation,BytecodeHandler,0,124091,0x7ff7c0d70784,1068,TestEqualStrict.Wide
code-creation,BytecodeHandler,0,124097,0x7ff7c0d70bc4,1512,TestLessThan.Wide
code-creation,BytecodeHandler,0,124103,0x7ff7c0d711c4,1512,TestGreaterThan.Wide
code-creation,BytecodeHandler,0,124108,0x7ff7c0d717c4,1512,TestLessThanOrEqual.Wide
code-creation,BytecodeHandler,0,124114,0x7ff7c0d71dc4,1512,TestGreaterThanOrEqual.Wide
code-creation,BytecodeHandler,0,124120,0x7ff7c0d723c4,864,TestInstanceOf.Wide
code-creation,BytecodeHandler,0,124125,0x7ff7c0d72744,160,TestIn.Wide
code-creation,BytecodeHandler,0,124131,0x7ff7c0d72804,116,ToName.Wide
code-creation,BytecodeHandler,0,124136,0x7ff7c0d72884,216,ToNumber.Wide
code-creation,BytecodeHandler,0,124141,0x7ff7c0d72964,236,ToNumeric.Wide
code-creation,BytecodeHandler,0,124146,0x7ff7c0d72a64,116,ToObject.Wide
code-creation,BytecodeHandler,0,124151,0x7ff7c0d72ae4,404,CreateRegExpLiteral.Wide
code-creation,BytecodeHandler,0,124157,0x7ff7c0d72c84,1376,CreateArrayLiteral.Wide
code-creation,BytecodeHandler,0,124163,0x7ff7c0d73204,788,CreateEmptyArrayLiteral.Wide
code-creation,BytecodeHandler,0,124169,0x7ff7c0d73524,2040,CreateObjectLiteral.Wide
code-creation,BytecodeHandler,0,124174,0x7ff7c0d73d24,172,CloneObject.Wide
code-creation,BytecodeHandler,0,124180,0x7ff7c0d73de4,164,GetTemplateObject.Wide
code-creation,BytecodeHandler,0,124185,0x7ff7c0d73ea4,320,CreateClosure.Wide
code-creation,BytecodeHandler,0,124191,0x7ff7c0d74004,124,CreateBlockContext.Wide
code-creation,BytecodeHandler,0,124196,0x7ff7c0d74084,136,CreateCatchContext.Wide
code-creation,BytecodeHandler,0,124201,0x7ff7c0d74124,256,CreateFunctionContext.Wide
code-creation,BytecodeHandler,0,124207,0x7ff7c0d74244,256,CreateEvalContext.Wide
code-creation,BytecodeHandler,0,124214,0x7ff7c0d74364,136,CreateWithContext.Wide
code-creation,BytecodeHandler,0,124219,0x7ff7c0d74404,440,JumpLoop.Wide
code-creation,BytecodeHandler,0,124225,0x7ff7c0d745c4,44,Jump.Wide
code-creation,BytecodeHandler,0,124230,0x7ff7c0d74604,56,JumpConstant.Wide
code-creation,BytecodeHandler,0,124236,0x7ff7c0d74644,80,JumpIfNullConstant.Wide
code-creation,BytecodeHandler,0,124242,0x7ff7c0d746a4,80,JumpIfNotNullConstant.Wide
code-creation,BytecodeHandler,0,124248,0x7ff7c0d74704,80,JumpIfUndefinedConstant.Wide
code-creation,BytecodeHandler,0,124254,0x7ff7c0d74764,80,JumpIfNotUndefinedConstant.Wide
code-creation,BytecodeHandler,0,124260,0x7ff7c0d747c4,84,JumpIfUndefinedOrNullConstant.Wide
code-creation,BytecodeHandler,0,124266,0x7ff7c0d74824,80,JumpIfTrueConstant.Wide
code-creation,BytecodeHandler,0,124273,0x7ff7c0d74884,80,JumpIfFalseConstant.Wide
code-creation,BytecodeHandler,0,124280,0x7ff7c0d748e4,88,JumpIfJSReceiverConstant.Wide
code-creation,BytecodeHandler,0,124287,0x7ff7c0d74944,152,JumpIfToBooleanTrueConstant.Wide
code-creation,BytecodeHandler,0,124294,0x7ff7c0d749e4,152,JumpIfToBooleanFalseConstant.Wide
code-creation,BytecodeHandler,0,124299,0x7ff7c0d74a84,136,JumpIfToBooleanTrue.Wide
code-creation,BytecodeHandler,0,124305,0x7ff7c0d74b24,136,JumpIfToBooleanFalse.Wide
code-creation,BytecodeHandler,0,124311,0x7ff7c0d74bc4,64,JumpIfTrue.Wide
code-creation,BytecodeHandler,0,124317,0x7ff7c0d74c24,64,JumpIfFalse.Wide
code-creation,BytecodeHandler,0,124322,0x7ff7c0d74c84,64,JumpIfNull.Wide
code-creation,BytecodeHandler,0,124327,0x7ff7c0d74ce4,64,JumpIfNotNull.Wide
code-creation,BytecodeHandler,0,124333,0x7ff7c0d74d44,64,JumpIfUndefined.Wide
code-creation,BytecodeHandler,0,124339,0x7ff7c0d74da4,64,JumpIfNotUndefined.Wide
code-creation,BytecodeHandler,0,124346,0x7ff7c0d74e04,72,JumpIfUndefinedOrNull.Wide
code-creation,BytecodeHandler,0,124352,0x7ff7c0d74e64,76,JumpIfJSReceiver.Wide
code-creation,BytecodeHandler,0,124358,0x7ff7c0d74ec4,108,SwitchOnSmiNoFeedback.Wide
code-creation,BytecodeHandler,0,124364,0x7ff7c0d74f44,468,ForInEnumerate.Wide
code-creation,BytecodeHandler,0,124370,0x7ff7c0d75124,252,ForInPrepare.Wide
code-creation,BytecodeHandler,0,124377,0x7ff7c0d75224,60,ForInContinue.Wide
code-creation,BytecodeHandler,0,124383,0x7ff7c0d75264,260,ForInNext.Wide
code-creation,BytecodeHandler,0,124389,0x7ff7c0d75384,48,ForInStep.Wide
code-creation,BytecodeHandler,0,124395,0x7ff7c0d753c4,156,ThrowReferenceErrorIfHole.Wide
code-creation,BytecodeHandler,0,124402,0x7ff7c0d75464,160,ThrowIfNotSuperConstructor.Wide
code-creation,BytecodeHandler,0,124408,0x7ff7c0d75524,120,SwitchOnGeneratorState.Wide
code-creation,BytecodeHandler,0,124414,0x7ff7c0d755a4,516,SuspendGenerator.Wide
code-creation,BytecodeHandler,0,124421,0x7ff7c0d757c4,128,ResumeGenerator.Wide
code-creation,BytecodeHandler,0,124426,0x7ff7c0d75864,156,GetIterator.Wide
code-creation,BytecodeHandler,0,124432,0x7ff7c0d75904,128,IncBlockCounter.Wide
code-creation,BytecodeHandler,0,124438,0x7ff7c0d759a4,56,Abort.Wide
code-creation,BytecodeHandler,0,124443,0x7ff7c0d759e4,108,DebugBreak1.ExtraWide
code-creation,BytecodeHandler,0,124448,0x7ff7c0d75a64,108,DebugBreak2.ExtraWide
code-creation,BytecodeHandler,0,124454,0x7ff7c0d75ae4,108,DebugBreak3.ExtraWide
code-creation,BytecodeHandler,0,124459,0x7ff7c0d75b64,108,DebugBreak4.ExtraWide
code-creation,BytecodeHandler,0,124464,0x7ff7c0d75be4,108,DebugBreak5.ExtraWide
code-creation,BytecodeHandler,0,124470,0x7ff7c0d75c64,108,DebugBreak6.ExtraWide
code-creation,BytecodeHandler,0,124476,0x7ff7c0d75ce4,32,Ldar.ExtraWide
code-creation,BytecodeHandler,0,124482,0x7ff7c0d75d24,28,LdaSmi.ExtraWide
code-creation,BytecodeHandler,0,124488,0x7ff7c0d75d44,32,LdaConstant.ExtraWide
code-creation,BytecodeHandler,0,124495,0x7ff7c0d75d84,88,LdaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124501,0x7ff7c0d75de4,88,LdaImmutableContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124508,0x7ff7c0d75e44,48,LdaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124514,0x7ff7c0d75e84,48,LdaImmutableCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124520,0x7ff7c0d75ec4,28,Star.ExtraWide
code-creation,BytecodeHandler,0,124525,0x7ff7c0d75ee4,40,Mov.ExtraWide
code-creation,BytecodeHandler,0,124531,0x7ff7c0d75f24,36,PushContext.ExtraWide
code-creation,BytecodeHandler,0,124537,0x7ff7c0d75f64,32,PopContext.ExtraWide
code-creation,BytecodeHandler,0,124542,0x7ff7c0d75fa4,48,TestReferenceEqual.ExtraWide
code-creation,BytecodeHandler,0,124548,0x7ff7c0d75fe4,4656,LdaGlobal.ExtraWide
code-creation,BytecodeHandler,0,124554,0x7ff7c0d77224,4592,LdaGlobalInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,124559,0x7ff7c0d78424,168,StaGlobal.ExtraWide
code-creation,BytecodeHandler,0,124566,0x7ff7c0d784e4,156,StaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124572,0x7ff7c0d78584,116,StaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124578,0x7ff7c0d78604,128,LdaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,124584,0x7ff7c0d786a4,240,LdaLookupContextSlot.ExtraWide
code-creation,BytecodeHandler,0,124589,0x7ff7c0d787a4,4836,LdaLookupGlobalSlot.ExtraWide
code-creation,BytecodeHandler,0,124595,0x7ff7c0d79aa4,128,LdaLookupSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,124601,0x7ff7c0d79b44,240,LdaLookupContextSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,124607,0x7ff7c0d79c44,4800,LdaLookupGlobalSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,124613,0x7ff7c0d7af24,220,StaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,124619,0x7ff7c0d7b004,5196,LdaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,124625,0x7ff7c0d7c464,184,LdaNamedPropertyFromSuper.ExtraWide
code-creation,BytecodeHandler,0,124631,0x7ff7c0d7c524,156,LdaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,124637,0x7ff7c0d7c5c4,160,LdaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,124642,0x7ff7c0d7c684,296,StaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,124648,0x7ff7c0d7c7c4,172,StaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,124654,0x7ff7c0d7c884,172,StaNamedOwnProperty.ExtraWide
code-creation,BytecodeHandler,0,124659,0x7ff7c0d7c944,168,StaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,124665,0x7ff7c0d7ca04,168,StaInArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,124671,0x7ff7c0d7cac4,196,StaDataPropertyInLiteral.ExtraWide
code-creation,BytecodeHandler,0,124677,0x7ff7c0d7cba4,164,CollectTypeProfile.ExtraWide
code-creation,BytecodeHandler,0,124683,0x7ff7c0d7cc64,980,Add.ExtraWide
code-creation,BytecodeHandler,0,124688,0x7ff7c0d7d044,1016,Sub.ExtraWide
code-creation,BytecodeHandler,0,124693,0x7ff7c0d7d444,972,Mul.ExtraWide
code-creation,BytecodeHandler,0,124698,0x7ff7c0d7d824,988,Div.ExtraWide
code-creation,BytecodeHandler,0,124703,0x7ff7c0d7dc04,916,Mod.ExtraWide
code-creation,BytecodeHandler,0,124709,0x7ff7c0d7dfa4,984,Exp.ExtraWide
code-creation,BytecodeHandler,0,124714,0x7ff7c0d7e384,904,BitwiseOr.ExtraWide
code-creation,BytecodeHandler,0,124720,0x7ff7c0d7e724,916,BitwiseXor.ExtraWide
code-creation,BytecodeHandler,0,124725,0x7ff7c0d7eac4,916,BitwiseAnd.ExtraWide
code-creation,BytecodeHandler,0,124731,0x7ff7c0d7ee64,928,ShiftLeft.ExtraWide
code-creation,BytecodeHandler,0,124736,0x7ff7c0d7f224,928,ShiftRight.ExtraWide
code-creation,BytecodeHandler,0,124742,0x7ff7c0d7f5e4,1048,ShiftRightLogical.ExtraWide
code-creation,BytecodeHandler,0,124747,0x7ff7c0d7fa04,916,AddSmi.ExtraWide
code-creation,BytecodeHandler,0,124753,0x7ff7c0d7fda4,960,SubSmi.ExtraWide
code-creation,BytecodeHandler,0,124758,0x7ff7c0d80184,912,MulSmi.ExtraWide
code-creation,BytecodeHandler,0,124764,0x7ff7c0d80524,916,DivSmi.ExtraWide
code-creation,BytecodeHandler,0,124769,0x7ff7c0d808c4,816,ModSmi.ExtraWide
code-creation,BytecodeHandler,0,124775,0x7ff7c0d80c04,872,ExpSmi.ExtraWide
code-creation,BytecodeHandler,0,124780,0x7ff7c0d80f84,492,BitwiseOrSmi.ExtraWide
code-creation,BytecodeHandler,0,124785,0x7ff7c0d81184,492,BitwiseXorSmi.ExtraWide
code-creation,BytecodeHandler,0,124791,0x7ff7c0d81384,492,BitwiseAndSmi.ExtraWide
code-creation,BytecodeHandler,0,124797,0x7ff7c0d81584,492,ShiftLeftSmi.ExtraWide
code-creation,BytecodeHandler,0,124802,0x7ff7c0d81784,492,ShiftRightSmi.ExtraWide
code-creation,BytecodeHandler,0,124808,0x7ff7c0d81984,644,ShiftRightLogicalSmi.ExtraWide
code-creation,BytecodeHandler,0,124813,0x7ff7c0d81c24,616,Inc.ExtraWide
code-creation,BytecodeHandler,0,124819,0x7ff7c0d81ea4,616,Dec.ExtraWide
code-creation,BytecodeHandler,0,124824,0x7ff7c0d82124,644,Negate.ExtraWide
code-creation,BytecodeHandler,0,124829,0x7ff7c0d823c4,488,BitwiseNot.ExtraWide
code-creation,BytecodeHandler,0,124835,0x7ff7c0d825c4,124,DeletePropertyStrict.ExtraWide
code-creation,BytecodeHandler,0,124841,0x7ff7c0d82644,116,DeletePropertySloppy.ExtraWide
code-creation,BytecodeHandler,0,124848,0x7ff7c0d826c4,36,GetSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,124854,0x7ff7c0d82704,1128,CallAnyReceiver.ExtraWide
code-creation,BytecodeHandler,0,124860,0x7ff7c0d82b84,1128,CallProperty.ExtraWide
code-creation,BytecodeHandler,0,124865,0x7ff7c0d83004,1012,CallProperty0.ExtraWide
code-creation,BytecodeHandler,0,124871,0x7ff7c0d83404,1024,CallProperty1.ExtraWide
code-creation,BytecodeHandler,0,124876,0x7ff7c0d83824,1036,CallProperty2.ExtraWide
code-creation,BytecodeHandler,0,124883,0x7ff7c0d83c44,1016,CallUndefinedReceiver.ExtraWide
code-creation,BytecodeHandler,0,124889,0x7ff7c0d84044,1048,CallUndefinedReceiver0.ExtraWide
code-creation,BytecodeHandler,0,124895,0x7ff7c0d84464,1020,CallUndefinedReceiver1.ExtraWide
code-creation,BytecodeHandler,0,124901,0x7ff7c0d84864,1040,CallUndefinedReceiver2.ExtraWide
code-creation,BytecodeHandler,0,124907,0x7ff7c0d84c84,1128,CallWithSpread.ExtraWide
code-creation,BytecodeHandler,0,124912,0x7ff7c0d85104,128,CallRuntime.ExtraWide
code-creation,BytecodeHandler,0,124918,0x7ff7c0d851a4,164,CallRuntimeForPair.ExtraWide
code-creation,BytecodeHandler,0,124924,0x7ff7c0d85264,80,CallJSRuntime.ExtraWide
code-creation,BytecodeHandler,0,124929,0x7ff7c0d852c4,1240,InvokeIntrinsic.ExtraWide
code-creation,BytecodeHandler,0,124935,0x7ff7c0d857a4,964,Construct.ExtraWide
code-creation,BytecodeHandler,0,124940,0x7ff7c0d85b84,472,ConstructWithSpread.ExtraWide
code-creation,BytecodeHandler,0,124946,0x7ff7c0d85d64,1964,TestEqual.ExtraWide
code-creation,BytecodeHandler,0,124951,0x7ff7c0d86524,1068,TestEqualStrict.ExtraWide
code-creation,BytecodeHandler,0,124957,0x7ff7c0d86964,1508,TestLessThan.ExtraWide
code-creation,BytecodeHandler,0,124962,0x7ff7c0d86f64,1508,TestGreaterThan.ExtraWide
code-creation,BytecodeHandler,0,124968,0x7ff7c0d87564,1508,TestLessThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,124974,0x7ff7c0d87b64,1508,TestGreaterThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,124980,0x7ff7c0d88164,864,TestInstanceOf.ExtraWide
code-creation,BytecodeHandler,0,124986,0x7ff7c0d884e4,156,TestIn.ExtraWide
code-creation,BytecodeHandler,0,124991,0x7ff7c0d88584,116,ToName.ExtraWide
code-creation,BytecodeHandler,0,124996,0x7ff7c0d88604,216,ToNumber.ExtraWide
code-creation,BytecodeHandler,0,125003,0x7ff7c0d886e4,236,ToNumeric.ExtraWide
code-creation,BytecodeHandler,0,125009,0x7ff7c0d887e4,116,ToObject.ExtraWide
code-creation,BytecodeHandler,0,125015,0x7ff7c0d88864,400,CreateRegExpLiteral.ExtraWide
code-creation,BytecodeHandler,0,125022,0x7ff7c0d88a04,1376,CreateArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,125028,0x7ff7c0d88f84,788,CreateEmptyArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,125034,0x7ff7c0d892a4,2040,CreateObjectLiteral.ExtraWide
code-creation,BytecodeHandler,0,125040,0x7ff7c0d89aa4,168,CloneObject.ExtraWide
code-creation,BytecodeHandler,0,125046,0x7ff7c0d89b64,160,GetTemplateObject.ExtraWide
code-creation,BytecodeHandler,0,125052,0x7ff7c0d89c24,320,CreateClosure.ExtraWide
code-creation,BytecodeHandler,0,125057,0x7ff7c0d89d84,124,CreateBlockContext.ExtraWide
code-creation,BytecodeHandler,0,125063,0x7ff7c0d89e04,132,CreateCatchContext.ExtraWide
code-creation,BytecodeHandler,0,125068,0x7ff7c0d89ea4,256,CreateFunctionContext.ExtraWide
code-creation,BytecodeHandler,0,125074,0x7ff7c0d89fc4,256,CreateEvalContext.ExtraWide
code-creation,BytecodeHandler,0,125080,0x7ff7c0d8a0e4,132,CreateWithContext.ExtraWide
code-creation,BytecodeHandler,0,125086,0x7ff7c0d8a184,436,JumpLoop.ExtraWide
code-creation,BytecodeHandler,0,125093,0x7ff7c0d8a344,44,Jump.ExtraWide
code-creation,BytecodeHandler,0,125098,0x7ff7c0d8a384,56,JumpConstant.ExtraWide
code-creation,BytecodeHandler,0,125105,0x7ff7c0d8a3c4,76,JumpIfNullConstant.ExtraWide
code-creation,BytecodeHandler,0,125111,0x7ff7c0d8a424,76,JumpIfNotNullConstant.ExtraWide
code-creation,BytecodeHandler,0,125118,0x7ff7c0d8a484,76,JumpIfUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,125125,0x7ff7c0d8a4e4,76,JumpIfNotUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,125144,0x7ff7c0d8a544,84,JumpIfUndefinedOrNullConstant.ExtraWide
code-creation,BytecodeHandler,0,125152,0x7ff7c0d8a5a4,76,JumpIfTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,125158,0x7ff7c0d8a604,76,JumpIfFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,125163,0x7ff7c0d8a664,88,JumpIfJSReceiverConstant.ExtraWide
code-creation,BytecodeHandler,0,125169,0x7ff7c0d8a6c4,148,JumpIfToBooleanTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,125175,0x7ff7c0d8a764,148,JumpIfToBooleanFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,125182,0x7ff7c0d8a804,136,JumpIfToBooleanTrue.ExtraWide
code-creation,BytecodeHandler,0,125188,0x7ff7c0d8a8a4,136,JumpIfToBooleanFalse.ExtraWide
code-creation,BytecodeHandler,0,125194,0x7ff7c0d8a944,64,JumpIfTrue.ExtraWide
code-creation,BytecodeHandler,0,125200,0x7ff7c0d8a9a4,64,JumpIfFalse.ExtraWide
code-creation,BytecodeHandler,0,125206,0x7ff7c0d8aa04,64,JumpIfNull.ExtraWide
code-creation,BytecodeHandler,0,125211,0x7ff7c0d8aa64,64,JumpIfNotNull.ExtraWide
code-creation,BytecodeHandler,0,125216,0x7ff7c0d8aac4,64,JumpIfUndefined.ExtraWide
code-creation,BytecodeHandler,0,125222,0x7ff7c0d8ab24,64,JumpIfNotUndefined.ExtraWide
code-creation,BytecodeHandler,0,125228,0x7ff7c0d8ab84,68,JumpIfUndefinedOrNull.ExtraWide
code-creation,BytecodeHandler,0,125234,0x7ff7c0d8abe4,72,JumpIfJSReceiver.ExtraWide
code-creation,BytecodeHandler,0,125239,0x7ff7c0d8ac44,108,SwitchOnSmiNoFeedback.ExtraWide
code-creation,BytecodeHandler,0,125245,0x7ff7c0d8acc4,464,ForInEnumerate.ExtraWide
code-creation,BytecodeHandler,0,125251,0x7ff7c0d8aea4,252,ForInPrepare.ExtraWide
code-creation,BytecodeHandler,0,125257,0x7ff7c0d8afa4,56,ForInContinue.ExtraWide
code-creation,BytecodeHandler,0,125262,0x7ff7c0d8afe4,256,ForInNext.ExtraWide
code-creation,BytecodeHandler,0,125269,0x7ff7c0d8b104,44,ForInStep.ExtraWide
code-creation,BytecodeHandler,0,125275,0x7ff7c0d8b144,156,ThrowReferenceErrorIfHole.ExtraWide
code-creation,BytecodeHandler,0,125281,0x7ff7c0d8b1e4,160,ThrowIfNotSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,125287,0x7ff7c0d8b2a4,120,SwitchOnGeneratorState.ExtraWide
code-creation,BytecodeHandler,0,125292,0x7ff7c0d8b324,512,SuspendGenerator.ExtraWide
code-creation,BytecodeHandler,0,125298,0x7ff7c0d8b544,124,ResumeGenerator.ExtraWide
code-creation,BytecodeHandler,0,125346,0x7ff7c0d8b5c4,152,GetIterator.ExtraWide
code-creation,BytecodeHandler,0,125352,0x7ff7c0d8b664,124,IncBlockCounter.ExtraWide
code-creation,BytecodeHandler,0,125358,0x7ff7c0d8b6e4,56,Abort.ExtraWide
tick,0x7ff7c01f0a8d,125401,0,0x0,6
tick,0x7ffdf681c7f4,125416,0,0x0,6
tick,0x7ff7c11f00d5,125423,0,0x0,6
new,MemoryChunk,0xf98a040000,262144
new,MemoryChunk,0x2fdd0c0000,262144
new,MemoryChunk,0x14ac8e00000,262144
tick,0x7ff7c07eca8d,127340,0,0x0,5
new,MemoryChunk,0x18ed8ec0000,262144
new,MemoryChunk,0x2c63eb00000,262144
code-creation,Eval,10,129141,0x2c63eb01fae,5, node:internal/main/run_main_module:1:1,0x2c63eb01e68,~
script-source,95,node:internal/main/run_main_module,'use strict';\x0d\n\x0d\nconst {\x0d\n  prepareMainThreadExecution\x0d\n} = require('internal/bootstrap/pre_execution');\x0d\n\x0d\nprepareMainThreadExecution(true);\x0d\n\x0d\nmarkBootstrapComplete();\x0d\n\x0d\n// Note: this loads the module through the ESM loader if the module is\x0d\n// determined to be an ES module. This hangs from the CJS module loader\x0d\n// because we currently allow monkey-patching of the module loaders\x0d\n// in the preloaded scripts through require('module').\x0d\n// runMain here might be monkey-patched by users in --require.\x0d\n// XXX: the monkey-patchability here should probably be deprecated.\x0d\nrequire('internal/modules/cjs/loader').Module.runMain(process.argv[1]);\x0d\n
code-source-info,0x2c63eb01fae,95,0,649,C0O0C4O649,,
code-creation,Function,10,129194,0x2c63eb02056,58, node:internal/main/run_main_module:1:1,0x2c63eb01f28,~
code-source-info,0x2c63eb02056,95,0,649,C0O60C3O60C8O28C13O108C15O108C19O145C22O576C25O576C30O614C35O621C40O638C47O642C51O622C57O648,,
tick,0x7ff7c07ca144,129352,0,0x0,6
code-creation,LazyCompile,10,129442,0x2c63eb02296,76,nativeModuleRequire node:internal/bootstrap/loaders:332:29,0xa82968fdc0,~
script-source,9,node:internal/bootstrap/loaders,// This file creates the internal module & binding loaders used by built-in\x0d\n// modules. In contrast\x2C user land modules are loaded using\x0d\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\x0d\n// lib/internal/modules/esm/* (ES Modules).\x0d\n//\x0d\n// This file is compiled and run by node.cc before bootstrap/node.js\x0d\n// was called\x2C therefore the loaders are bootstrapped before we start to\x0d\n// actually bootstrap Node.js. It creates the following objects:\x0d\n//\x0d\n// C++ binding loaders:\x0d\n// - process.binding(): the legacy C++ binding loader\x2C accessible from user land\x0d\n//   because it is an object attached to the global process object.\x0d\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\x0d\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\x0d\n//   about the stability of these bindings\x2C but still have to take care of\x0d\n//   compatibility issues caused by them from time to time.\x0d\n// - process._linkedBinding(): intended to be used by embedders to add\x0d\n//   additional C++ bindings in their applications. These C++ bindings\x0d\n//   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag\x0d\n//   NM_F_LINKED.\x0d\n// - internalBinding(): the private internal C++ binding loader\x2C inaccessible\x0d\n//   from user land unless through `require('internal/test/binding')`.\x0d\n//   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()\x0d\n//   and have their nm_flags set to NM_F_INTERNAL.\x0d\n//\x0d\n// Internal JavaScript module loader:\x0d\n// - NativeModule: a minimal module system used to load the JavaScript core\x0d\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\x0d\n//   compiled into the node binary via node_javascript.cc generated by js2c.py\x2C\x0d\n//   so they can be loaded faster without the cost of I/O. This class makes the\x0d\n//   lib/internal/*\x2C deps/internal/* modules and internalBinding() available by\x0d\n//   default to core modules\x2C and lets the core modules require itself via\x0d\n//   require('internal/bootstrap/loaders') even when this file is not written in\x0d\n//   CommonJS style.\x0d\n//\x0d\n// Other objects:\x0d\n// - process.moduleLoadList: an array recording the bindings and the modules\x0d\n//   loaded in the process and the order in which they are loaded.\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// This file is compiled as if it's wrapped in a function with arguments\x0d\n// passed by node::RunBootstrapping()\x0d\n/* global process\x2C getLinkedBinding\x2C getInternalBinding\x2C primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  Error\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ReflectGet\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Set up process.moduleLoadList.\x0d\nconst moduleLoadList = [];\x0d\nObjectDefineProperty(process\x2C 'moduleLoadList'\x2C {\x0d\n  value: moduleLoadList\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x2C\x0d\n  writable: false\x0d\n});\x0d\n\x0d\n\x0d\n// internalBindingAllowlist contains the name of internalBinding modules\x0d\n// that are allowed for access via process.binding()... This is used\x0d\n// to provide a transition path for modules that are being moved over to\x0d\n// internalBinding.\x0d\nconst internalBindingAllowlist = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'buffer'\x2C\x0d\n  'cares_wrap'\x2C\x0d\n  'config'\x2C\x0d\n  'constants'\x2C\x0d\n  'contextify'\x2C\x0d\n  'crypto'\x2C\x0d\n  'fs'\x2C\x0d\n  'fs_event_wrap'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'icu'\x2C\x0d\n  'inspector'\x2C\x0d\n  'js_stream'\x2C\x0d\n  'natives'\x2C\x0d\n  'os'\x2C\x0d\n  'pipe_wrap'\x2C\x0d\n  'process_wrap'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'spawn_sync'\x2C\x0d\n  'stream_wrap'\x2C\x0d\n  'tcp_wrap'\x2C\x0d\n  'tls_wrap'\x2C\x0d\n  'tty_wrap'\x2C\x0d\n  'udp_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'util'\x2C\x0d\n  'uv'\x2C\x0d\n  'v8'\x2C\x0d\n  'zlib'\x2C\x0d\n]);\x0d\n\x0d\nconst runtimeDeprecatedList = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'crypto'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'v8'\x2C\x0d\n]);\x0d\n\x0d\nconst legacyWrapperList = new SafeSet([\x0d\n  'util'\x2C\x0d\n]);\x0d\n\x0d\n// Set up process.binding() and process._linkedBinding().\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n\x0d\n  process.binding = function binding(module) {\x0d\n    module = String(module);\x0d\n    // Deprecated specific process.binding() modules\x2C but not all\x2C allow\x0d\n    // selective fallback to internalBinding for the deprecated ones.\x0d\n    if (internalBindingAllowlist.has(module)) {\x0d\n      if (runtimeDeprecatedList.has(module)) {\x0d\n        runtimeDeprecatedList.delete(module);\x0d\n        process.emitWarning(\x0d\n          `Access to process.binding('${module}') is deprecated.`\x2C\x0d\n          'DeprecationWarning'\x2C\x0d\n          'DEP0111');\x0d\n      }\x0d\n      if (legacyWrapperList.has(module)) {\x0d\n        return nativeModuleRequire('internal/legacy/processbinding')[module]();\x0d\n      }\x0d\n      return internalBinding(module);\x0d\n    }\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    throw new Error(`No such module: ${module}`);\x0d\n  };\x0d\n\x0d\n  process._linkedBinding = function _linkedBinding(module) {\x0d\n    module = String(module);\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object')\x0d\n      mod = bindingObj[module] = getLinkedBinding(module);\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\n// Set up internalBinding() in the closure.\x0d\n/**\x0d\n * @type {InternalBinding}\x0d\n */\x0d\nlet internalBinding;\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n  // eslint-disable-next-line no-global-assign\x0d\n  internalBinding = function internalBinding(module) {\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object') {\x0d\n      mod = bindingObj[module] = getInternalBinding(module);\x0d\n      ArrayPrototypePush(moduleLoadList\x2C `Internal Binding ${module}`);\x0d\n    }\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\nconst loaderId = 'internal/bootstrap/loaders';\x0d\nconst {\x0d\n  moduleIds\x2C\x0d\n  compileFunction\x0d\n} = internalBinding('native_module');\x0d\n\x0d\nconst getOwn = (target\x2C property\x2C receiver) => {\x0d\n  return ObjectPrototypeHasOwnProperty(target\x2C property) ?\x0d\n    ReflectGet(target\x2C property\x2C receiver) :\x0d\n    undefined;\x0d\n};\x0d\n\x0d\n/**\x0d\n * An internal abstraction for the built-in JavaScript modules of Node.js.\x0d\n * Be careful not to expose this to user land unless --expose-internals is\x0d\n * used\x2C in which case there is no compatibility guarantee about this class.\x0d\n */\x0d\nclass NativeModule {\x0d\n  /**\x0d\n   * A map from the module IDs to the module instances.\x0d\n   * @type {Map<string\x2C NativeModule>}\x0d\n   */\x0d\n  static map = new SafeMap(\x0d\n    ArrayPrototypeMap(moduleIds\x2C (id) => [id\x2C new NativeModule(id)])\x0d\n  );\x0d\n\x0d\n  constructor(id) {\x0d\n    this.filename = `${id}.js`;\x0d\n    this.id = id;\x0d\n    this.canBeRequiredByUsers = !StringPrototypeStartsWith(id\x2C 'internal/');\x0d\n\x0d\n    // The CJS exports object of the module.\x0d\n    this.exports = {};\x0d\n    // States used to work around circular dependencies.\x0d\n    this.loaded = false;\x0d\n    this.loading = false;\x0d\n\x0d\n    // The following properties are used by the ESM implementation and only\x0d\n    // initialized when the native module is loaded by users.\x0d\n    /**\x0d\n     * The C++ ModuleWrap binding used to interface with the ESM implementation.\x0d\n     * @type {ModuleWrap|undefined}\x0d\n     */\x0d\n    this.module = undefined;\x0d\n    /**\x0d\n     * Exported names for the ESM imports.\x0d\n     * @type {string[]|undefined}\x0d\n     */\x0d\n    this.exportKeys = undefined;\x0d\n  }\x0d\n\x0d\n  // To be called during pre-execution when --expose-internals is on.\x0d\n  // Enables the user-land module loader to access internal modules.\x0d\n  static exposeInternals() {\x0d\n    for (const { 0: id\x2C 1: mod } of NativeModule.map) {\x0d\n      // Do not expose this to user land even with --expose-internals.\x0d\n      if (id !== loaderId) {\x0d\n        mod.canBeRequiredByUsers = true;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  static exists(id) {\x0d\n    return NativeModule.map.has(id);\x0d\n  }\x0d\n\x0d\n  static canBeRequiredByUsers(id) {\x0d\n    const mod = NativeModule.map.get(id);\x0d\n    return mod && mod.canBeRequiredByUsers;\x0d\n  }\x0d\n\x0d\n  // Used by user-land module loaders to compile and load builtins.\x0d\n  compileForPublicLoader() {\x0d\n    if (!this.canBeRequiredByUsers) {\x0d\n      // No code because this is an assertion against bugs\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new Error(`Should not compile ${this.id} for public use`);\x0d\n    }\x0d\n    this.compileForInternalLoader();\x0d\n    if (!this.exportKeys) {\x0d\n      // When using --expose-internals\x2C we do not want to reflect the named\x0d\n      // exports from core modules as this can trigger unnecessary getters.\x0d\n      const internal = StringPrototypeStartsWith(this.id\x2C 'internal/');\x0d\n      this.exportKeys = internal ? [] : ObjectKeys(this.exports);\x0d\n    }\x0d\n    this.getESMFacade();\x0d\n    this.syncExports();\x0d\n    return this.exports;\x0d\n  }\x0d\n\x0d\n  getESMFacade() {\x0d\n    if (this.module) return this.module;\x0d\n    const { ModuleWrap } = internalBinding('module_wrap');\x0d\n    const url = `node:${this.id}`;\x0d\n    const nativeModule = this;\x0d\n    const exportsKeys = ArrayPrototypeSlice(this.exportKeys);\x0d\n    ArrayPrototypePush(exportsKeys\x2C 'default');\x0d\n    this.module = new ModuleWrap(\x0d\n      url\x2C undefined\x2C exportsKeys\x2C\x0d\n      function() {\x0d\n        nativeModule.syncExports();\x0d\n        this.setExport('default'\x2C nativeModule.exports);\x0d\n      });\x0d\n    // Ensure immediate sync execution to capture exports now\x0d\n    this.module.instantiate();\x0d\n    this.module.evaluate(-1\x2C false);\x0d\n    return this.module;\x0d\n  }\x0d\n\x0d\n  // Provide named exports for all builtin libraries so that the libraries\x0d\n  // may be imported in a nicer way for ESM users. The default export is left\x0d\n  // as the entire namespace (module.exports) and updates when this function is\x0d\n  // called so that APMs and other behavior are supported.\x0d\n  syncExports() {\x0d\n    const names = this.exportKeys;\x0d\n    if (this.module) {\x0d\n      for (let i = 0; i < names.length; i++) {\x0d\n        const exportName = names[i];\x0d\n        if (exportName === 'default') continue;\x0d\n        this.module.setExport(exportName\x2C\x0d\n                              getOwn(this.exports\x2C exportName\x2C this.exports));\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  compileForInternalLoader() {\x0d\n    if (this.loaded || this.loading) {\x0d\n      return this.exports;\x0d\n    }\x0d\n\x0d\n    const id = this.id;\x0d\n    this.loading = true;\x0d\n\x0d\n    try {\x0d\n      const requireFn = StringPrototypeStartsWith(this.id\x2C 'internal/deps/') ?\x0d\n        requireWithFallbackInDeps : nativeModuleRequire;\x0d\n\x0d\n      const fn = compileFunction(id);\x0d\n      fn(this.exports\x2C requireFn\x2C this\x2C process\x2C internalBinding\x2C primordials);\x0d\n\x0d\n      this.loaded = true;\x0d\n    } finally {\x0d\n      this.loading = false;\x0d\n    }\x0d\n\x0d\n    ArrayPrototypePush(moduleLoadList\x2C `NativeModule ${id}`);\x0d\n    return this.exports;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Think of this as module.exports in this file even though it is not\x0d\n// written in CommonJS style.\x0d\nconst loaderExports = {\x0d\n  internalBinding\x2C\x0d\n  NativeModule\x2C\x0d\n  require: nativeModuleRequire\x0d\n};\x0d\n\x0d\nfunction nativeModuleRequire(id) {\x0d\n  if (id === loaderId) {\x0d\n    return loaderExports;\x0d\n  }\x0d\n\x0d\n  const mod = NativeModule.map.get(id);\x0d\n  // Can't load the internal errors module from here\x2C have to use a raw error.\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\x0d\n  return mod.compileForInternalLoader();\x0d\n}\x0d\n\x0d\n// Allow internal modules from dependencies to require\x0d\n// other modules from dependencies by providing fallbacks.\x0d\nfunction requireWithFallbackInDeps(request) {\x0d\n  if (!NativeModule.map.has(request)) {\x0d\n    request = `internal/deps/${request}`;\x0d\n  }\x0d\n  return nativeModuleRequire(request);\x0d\n}\x0d\n\x0d\n// Pass the exports back to C++ land for C++ internals to use.\x0d\nreturn loaderExports;\x0d\n
code-source-info,0x2c63eb02296,9,10647,11000,C0O10657C2O10668C4O10664C9O10685C13O10706C14O10729C19O10742C24O10746C29O10746C35O10890C37O10900C47O10948C60O10906C65O10900C66O10970C71O10970C75O10997,,
code-creation,LazyCompile,10,129994,0x2c63eb02fa6,175,compileForInternalLoader node:internal/bootstrap/loaders:299:27,0xa82968fcf0,~
code-source-info,0x2c63eb02fa6,9,9827,10410,C0O9846C6O9861C12O9891C16O9899C17O9930C22O9939C23O9952C30O9998C37O10029C45O9998C63O10131C70O10131C75O10167C89O10202C103O10159C108O10242C109O10254C124O10286C126O10299C141O10322C152O10341C160O10373C165O10322C170O10397C174O10405,,
code-creation,Eval,10,130337,0x2c63eb03f7e,5, node:internal/bootstrap/pre_execution:1:1,0x2c63eb03b88,~
script-source,96,node:internal/bootstrap/pre_execution,'use strict';\x0d\n\x0d\nconst {\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  getOptionValue\x2C\x0d\n  getEmbedderOptions\x2C\x0d\n} = require('internal/options');\x0d\nconst { reconnectZeroFillToggle } = require('internal/buffer');\x0d\nconst {\x0d\n  defineOperation\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  exposeInterface\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nfunction prepareMainThreadExecution(expandArgv1 = false) {\x0d\n  // TODO(joyeecheung): this is also necessary for workers when they deserialize\x0d\n  // this toggle from the snapshot.\x0d\n  reconnectZeroFillToggle();\x0d\n\x0d\n  // Patch the process object with legacy properties and normalizations\x0d\n  patchProcessObject(expandArgv1);\x0d\n  setupTraceCategoryState();\x0d\n  setupPerfHooks();\x0d\n  setupInspectorHooks();\x0d\n  setupWarningHandler();\x0d\n  setupFetch();\x0d\n  setupWebCrypto();\x0d\n\x0d\n  // Resolve the coverage directory to an absolute path\x2C and\x0d\n  // overwrite process.env so that the original path gets passed\x0d\n  // to child processes even when they switch cwd.\x0d\n  if (process.env.NODE_V8_COVERAGE) {\x0d\n    process.env.NODE_V8_COVERAGE =\x0d\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\x0d\n  }\x0d\n\x0d\n\x0d\n  setupDebugEnv();\x0d\n\x0d\n  // Print stack trace on `SIGINT` if option `--trace-sigint` presents.\x0d\n  setupStacktracePrinterOnSigint();\x0d\n\x0d\n  // Process initial diagnostic reporting configuration\x2C if present.\x0d\n  initializeReport();\x0d\n  initializeReportSignalHandlers();  // Main-thread-only.\x0d\n\x0d\n  initializeHeapSnapshotSignalHandlers();\x0d\n\x0d\n  // If the process is spawned with env NODE_CHANNEL_FD\x2C it's probably\x0d\n  // spawned by our child_process module\x2C then initialize IPC.\x0d\n  // This attaches some internal event listeners and creates:\x0d\n  // process.send()\x2C process.channel\x2C process.connected\x2C\x0d\n  // process.disconnect().\x0d\n  setupChildProcessIpcChannel();\x0d\n\x0d\n  // Load policy from disk and parse it.\x0d\n  initializePolicy();\x0d\n\x0d\n  // If this is a worker in cluster mode\x2C start up the communication\x0d\n  // channel. This needs to be done before any user code gets executed\x0d\n  // (including preload modules).\x0d\n  initializeClusterIPC();\x0d\n\x0d\n  initializeSourceMapsHandlers();\x0d\n  initializeDeprecations();\x0d\n  initializeWASI();\x0d\n  initializeCJSLoader();\x0d\n  initializeESMLoader();\x0d\n\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  assert(!CJSLoader.hasLoadedAnyUserCJSModule);\x0d\n  loadPreloadModules();\x0d\n  initializeFrozenIntrinsics();\x0d\n}\x0d\n\x0d\nfunction patchProcessObject(expandArgv1) {\x0d\n  const binding = internalBinding('process_methods');\x0d\n  binding.patchProcessObject(process);\x0d\n\x0d\n  require('internal/process/per_thread').refreshHrtimeBuffer();\x0d\n\x0d\n  ObjectDefineProperty(process\x2C 'argv0'\x2C {\x0d\n    enumerable: true\x2C\x0d\n    configurable: false\x2C\x0d\n    value: process.argv[0]\x0d\n  });\x0d\n  process.argv[0] = process.execPath;\x0d\n\x0d\n  if (expandArgv1 && process.argv[1] &&\x0d\n      !StringPrototypeStartsWith(process.argv[1]\x2C '-')) {\x0d\n    // Expand process.argv[1] into a full path.\x0d\n    const path = require('path');\x0d\n    try {\x0d\n      process.argv[1] = path.resolve(process.argv[1]);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // TODO(joyeecheung): most of these should be deprecated and removed\x2C\x0d\n  // except some that we need to be able to mutate during run time.\x0d\n  addReadOnlyProcessAlias('_eval'\x2C '--eval');\x0d\n  addReadOnlyProcessAlias('_print_eval'\x2C '--print');\x0d\n  addReadOnlyProcessAlias('_syntax_check_only'\x2C '--check');\x0d\n  addReadOnlyProcessAlias('_forceRepl'\x2C '--interactive');\x0d\n  addReadOnlyProcessAlias('_preload_modules'\x2C '--require');\x0d\n  addReadOnlyProcessAlias('noDeprecation'\x2C '--no-deprecation');\x0d\n  addReadOnlyProcessAlias('noProcessWarnings'\x2C '--no-warnings');\x0d\n  addReadOnlyProcessAlias('traceProcessWarnings'\x2C '--trace-warnings');\x0d\n  addReadOnlyProcessAlias('throwDeprecation'\x2C '--throw-deprecation');\x0d\n  addReadOnlyProcessAlias('profProcess'\x2C '--prof-process');\x0d\n  addReadOnlyProcessAlias('traceDeprecation'\x2C '--trace-deprecation');\x0d\n  addReadOnlyProcessAlias('_breakFirstLine'\x2C '--inspect-brk'\x2C false);\x0d\n  addReadOnlyProcessAlias('_breakNodeFirstLine'\x2C '--inspect-brk-node'\x2C false);\x0d\n}\x0d\n\x0d\nfunction addReadOnlyProcessAlias(name\x2C option\x2C enumerable = true) {\x0d\n  const value = getOptionValue(option);\x0d\n  if (value) {\x0d\n    ObjectDefineProperty(process\x2C name\x2C {\x0d\n      writable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable\x2C\x0d\n      value\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction setupWarningHandler() {\x0d\n  const {\x0d\n    onWarning\x0d\n  } = require('internal/process/warning');\x0d\n  if (getOptionValue('--warnings') &&\x0d\n    process.env.NODE_NO_WARNINGS !== '1') {\x0d\n    process.on('warning'\x2C onWarning);\x0d\n  }\x0d\n}\x0d\n\x0d\n// https://fetch.spec.whatwg.org/\x0d\nfunction setupFetch() {\x0d\n  if (!getOptionValue('--experimental-fetch')) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  emitExperimentalWarning('Fetch');\x0d\n\x0d\n  const undici = require('internal/deps/undici/undici');\x0d\n  defineOperation(globalThis\x2C 'fetch'\x2C undici.fetch);\x0d\n  exposeInterface(globalThis\x2C 'FormData'\x2C undici.FormData);\x0d\n  exposeInterface(globalThis\x2C 'Headers'\x2C undici.Headers);\x0d\n  exposeInterface(globalThis\x2C 'Request'\x2C undici.Request);\x0d\n  exposeInterface(globalThis\x2C 'Response'\x2C undici.Response);\x0d\n}\x0d\n\x0d\n// TODO(aduh95): move this to internal/bootstrap/browser when the CLI flag is\x0d\n//               removed.\x0d\nfunction setupWebCrypto() {\x0d\n  if (process.config.variables.node_no_browser_globals ||\x0d\n      !getOptionValue('--experimental-global-webcrypto')) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  let webcrypto;\x0d\n  ObjectDefineProperty(globalThis\x2C 'crypto'\x2C\x0d\n                       ObjectGetOwnPropertyDescriptor({\x0d\n                         get crypto() {\x0d\n                           webcrypto ??= require('internal/crypto/webcrypto');\x0d\n                           return webcrypto.crypto;\x0d\n                         }\x0d\n                       }\x2C 'crypto'));\x0d\n  if (internalBinding('config').hasOpenSSL) {\x0d\n    webcrypto ??= require('internal/crypto/webcrypto');\x0d\n    ObjectDefineProperty(globalThis\x2C 'Crypto'\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.Crypto\x0d\n    });\x0d\n    ObjectDefineProperty(globalThis\x2C 'CryptoKey'\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.CryptoKey\x0d\n    });\x0d\n    ObjectDefineProperty(globalThis\x2C 'SubtleCrypto'\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.SubtleCrypto\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// Setup User-facing NODE_V8_COVERAGE environment variable that writes\x0d\n// ScriptCoverage to a specified file.\x0d\nfunction setupCoverageHooks(dir) {\x0d\n  const cwd = require('internal/process/execution').tryGetCwd();\x0d\n  const { resolve } = require('path');\x0d\n  const coverageDirectory = resolve(cwd\x2C dir);\x0d\n  const { sourceMapCacheToObject } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n\x0d\n  if (process.features.inspector) {\x0d\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\x0d\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\x0d\n  } else {\x0d\n    process.emitWarning('The inspector is disabled\x2C ' +\x0d\n                        'coverage could not be collected'\x2C\x0d\n                        'Warning');\x0d\n    return '';\x0d\n  }\x0d\n  return coverageDirectory;\x0d\n}\x0d\n\x0d\nfunction setupStacktracePrinterOnSigint() {\x0d\n  if (!getOptionValue('--trace-sigint')) {\x0d\n    return;\x0d\n  }\x0d\n  const { SigintWatchdog } = require('internal/watchdog');\x0d\n\x0d\n  const watchdog = new SigintWatchdog();\x0d\n  watchdog.start();\x0d\n}\x0d\n\x0d\nfunction initializeReport() {\x0d\n  const { report } = require('internal/process/report');\x0d\n  ObjectDefineProperty(process\x2C 'report'\x2C {\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    get() {\x0d\n      return report;\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupDebugEnv() {\x0d\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\x0d\n  if (getOptionValue('--expose-internals')) {\x0d\n    require('internal/bootstrap/loaders').NativeModule.exposeInternals();\x0d\n  }\x0d\n}\x0d\n\x0d\n// This has to be called after initializeReport() is called\x0d\nfunction initializeReportSignalHandlers() {\x0d\n  const { addSignalHandler } = require('internal/process/report');\x0d\n\x0d\n  addSignalHandler();\x0d\n}\x0d\n\x0d\nfunction initializeHeapSnapshotSignalHandlers() {\x0d\n  const signal = getOptionValue('--heapsnapshot-signal');\x0d\n\x0d\n  if (!signal)\x0d\n    return;\x0d\n\x0d\n  require('internal/validators').validateSignalName(signal);\x0d\n  const { writeHeapSnapshot } = require('v8');\x0d\n\x0d\n  process.on(signal\x2C () => {\x0d\n    writeHeapSnapshot();\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupTraceCategoryState() {\x0d\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\x0d\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\x0d\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\x0d\n}\x0d\n\x0d\nfunction setupPerfHooks() {\x0d\n  require('internal/perf/performance').refreshTimeOrigin();\x0d\n  require('internal/perf/utils').refreshTimeOrigin();\x0d\n}\x0d\n\x0d\nfunction setupInspectorHooks() {\x0d\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap\x2C\x0d\n  // we cannot immediately call into JS to enable the hooks\x2C which could\x0d\n  // interrupt the JS execution of bootstrap. So instead we save the\x0d\n  // notification in the inspector agent if it's sent in the middle of\x0d\n  // bootstrap\x2C and process the notification later here.\x0d\n  if (internalBinding('config').hasInspector) {\x0d\n    const {\x0d\n      enable\x2C\x0d\n      disable\x0d\n    } = require('internal/inspector_async_hook');\x0d\n    internalBinding('inspector').registerAsyncHook(enable\x2C disable);\x0d\n  }\x0d\n}\x0d\n\x0d\n// In general deprecations are initialized wherever the APIs are implemented\x2C\x0d\n// this is used to deprecate APIs implemented in C++ where the deprecation\x0d\n// utilities are not easily accessible.\x0d\nfunction initializeDeprecations() {\x0d\n  const { deprecate } = require('internal/util');\x0d\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\n  // DEP0103: access to `process.binding('util').isX` type checkers\x0d\n  // TODO(addaleax): Turn into a full runtime deprecation.\x0d\n  const utilBinding = internalBinding('util');\x0d\n  const types = require('internal/util/types');\x0d\n  for (const name of [\x0d\n    'isArrayBuffer'\x2C\x0d\n    'isArrayBufferView'\x2C\x0d\n    'isAsyncFunction'\x2C\x0d\n    'isDataView'\x2C\x0d\n    'isDate'\x2C\x0d\n    'isExternal'\x2C\x0d\n    'isMap'\x2C\x0d\n    'isMapIterator'\x2C\x0d\n    'isNativeError'\x2C\x0d\n    'isPromise'\x2C\x0d\n    'isRegExp'\x2C\x0d\n    'isSet'\x2C\x0d\n    'isSetIterator'\x2C\x0d\n    'isTypedArray'\x2C\x0d\n    'isUint8Array'\x2C\x0d\n    'isAnyArrayBuffer'\x2C\x0d\n  ]) {\x0d\n    utilBinding[name] = pendingDeprecation ?\x0d\n      deprecate(types[name]\x2C\x0d\n                'Accessing native typechecking bindings of Node ' +\x0d\n                'directly is deprecated. ' +\x0d\n                `Please use \\`util.types.${name}\\` instead.`\x2C\x0d\n                'DEP0103') :\x0d\n      types[name];\x0d\n  }\x0d\n\x0d\n  // TODO(joyeecheung): this is a legacy property exposed to process.\x0d\n  // Now that we use the config binding to carry this information\x2C remove\x0d\n  // it from the process. We may consider exposing it properly in\x0d\n  // process.features.\x0d\n  const { noBrowserGlobals } = internalBinding('config');\x0d\n  if (noBrowserGlobals) {\x0d\n    ObjectDefineProperty(process\x2C '_noBrowserGlobals'\x2C {\x0d\n      writable: false\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: noBrowserGlobals\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (pendingDeprecation) {\x0d\n    process.binding = deprecate(process.binding\x2C\x0d\n                                'process.binding() is deprecated. ' +\x0d\n                                'Please use public APIs instead.'\x2C 'DEP0111');\x0d\n\x0d\n    process._tickCallback = deprecate(process._tickCallback\x2C\x0d\n                                      'process._tickCallback() is deprecated'\x2C\x0d\n                                      'DEP0134');\x0d\n  }\x0d\n\x0d\n  // Create global.process and global.Buffer as getters so that we have a\x0d\n  // deprecation path for these in ES Modules.\x0d\n  // See https://github.com/nodejs/node/pull/26334.\x0d\n  let _process = process;\x0d\n  ObjectDefineProperty(globalThis\x2C 'process'\x2C {\x0d\n    get() {\x0d\n      return _process;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _process = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n\x0d\n  let _Buffer = Buffer;\x0d\n  ObjectDefineProperty(globalThis\x2C 'Buffer'\x2C {\x0d\n    get() {\x0d\n      return _Buffer;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _Buffer = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupChildProcessIpcChannel() {\x0d\n  if (process.env.NODE_CHANNEL_FD) {\x0d\n    const assert = require('internal/assert');\x0d\n\x0d\n    const fd = NumberParseInt(process.env.NODE_CHANNEL_FD\x2C 10);\x0d\n    assert(fd >= 0);\x0d\n\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_CHANNEL_FD;\x0d\n\x0d\n    const serializationMode =\x0d\n      process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';\x0d\n    delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;\x0d\n\x0d\n    require('child_process')._forkChild(fd\x2C serializationMode);\x0d\n    assert(process.send);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeClusterIPC() {\x0d\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\x0d\n    const cluster = require('cluster');\x0d\n    cluster._setupWorker();\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_UNIQUE_ID;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializePolicy() {\x0d\n  const experimentalPolicy = getOptionValue('--experimental-policy');\x0d\n  if (experimentalPolicy) {\x0d\n    process.emitWarning('Policies are experimental.'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    const { pathToFileURL\x2C URL } = require('internal/url');\x0d\n    // URL here as it is slightly different parsing\x0d\n    // no bare specifiers for now\x0d\n    let manifestURL;\x0d\n    if (require('path').isAbsolute(experimentalPolicy)) {\x0d\n      manifestURL = new URL(`file://${experimentalPolicy}`);\x0d\n    } else {\x0d\n      const cwdURL = pathToFileURL(process.cwd());\x0d\n      cwdURL.pathname += '/';\x0d\n      manifestURL = new URL(experimentalPolicy\x2C cwdURL);\x0d\n    }\x0d\n    const fs = require('fs');\x0d\n    const src = fs.readFileSync(manifestURL\x2C 'utf8');\x0d\n    const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');\x0d\n    if (experimentalPolicyIntegrity) {\x0d\n      const SRI = require('internal/policy/sri');\x0d\n      const { createHash\x2C timingSafeEqual } = require('crypto');\x0d\n      const realIntegrities = new SafeMap();\x0d\n      const integrityEntries = SRI.parse(experimentalPolicyIntegrity);\x0d\n      let foundMatch = false;\x0d\n      for (let i = 0; i < integrityEntries.length; i++) {\x0d\n        const {\x0d\n          algorithm\x2C\x0d\n          value: expected\x0d\n        } = integrityEntries[i];\x0d\n        const hash = createHash(algorithm);\x0d\n        hash.update(src);\x0d\n        const digest = hash.digest();\x0d\n        if (digest.length === expected.length &&\x0d\n          timingSafeEqual(digest\x2C expected)) {\x0d\n          foundMatch = true;\x0d\n          break;\x0d\n        }\x0d\n        realIntegrities.set(algorithm\x2C digest.toString('base64'));\x0d\n      }\x0d\n      if (!foundMatch) {\x0d\n        throw new ERR_MANIFEST_ASSERT_INTEGRITY(manifestURL\x2C realIntegrities);\x0d\n      }\x0d\n    }\x0d\n    require('internal/process/policy')\x0d\n      .setup(src\x2C manifestURL.href);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeWASI() {\x0d\n  const { NativeModule } = require('internal/bootstrap/loaders');\x0d\n  const mod = NativeModule.map.get('wasi');\x0d\n  mod.canBeRequiredByUsers =\x0d\n    getOptionValue('--experimental-wasi-unstable-preview1');\x0d\n}\x0d\n\x0d\nfunction initializeCJSLoader() {\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  if (!getEmbedderOptions().noGlobalSearchPaths) {\x0d\n    CJSLoader.Module._initPaths();\x0d\n  }\x0d\n  // TODO(joyeecheung): deprecate this in favor of a proper hook?\x0d\n  CJSLoader.Module.runMain =\x0d\n    require('internal/modules/run_main').executeUserEntryPoint;\x0d\n}\x0d\n\x0d\nfunction initializeESMLoader() {\x0d\n  // Create this WeakMap in js-land because V8 has no C++ API for WeakMap.\x0d\n  internalBinding('module_wrap').callbackMap = new SafeWeakMap();\x0d\n\x0d\n  if (getEmbedderOptions().shouldNotRegisterESMLoader) return;\x0d\n\x0d\n  const {\x0d\n    setImportModuleDynamicallyCallback\x2C\x0d\n    setInitializeImportMetaObjectCallback\x0d\n  } = internalBinding('module_wrap');\x0d\n  const esm = require('internal/process/esm_loader');\x0d\n  // Setup per-isolate callbacks that locate data or callbacks that we keep\x0d\n  // track of for different ESM modules.\x0d\n  setInitializeImportMetaObjectCallback(esm.initializeImportMetaObject);\x0d\n  setImportModuleDynamicallyCallback(esm.importModuleDynamicallyCallback);\x0d\n\x0d\n  // Patch the vm module when --experimental-vm-modules is on.\x0d\n  // Please update the comments in vm.js when this block changes.\x0d\n  if (getOptionValue('--experimental-vm-modules')) {\x0d\n    const {\x0d\n      Module\x2C SourceTextModule\x2C SyntheticModule\x2C\x0d\n    } = require('internal/vm/module');\x0d\n    const vm = require('vm');\x0d\n    vm.Module = Module;\x0d\n    vm.SourceTextModule = SourceTextModule;\x0d\n    vm.SyntheticModule = SyntheticModule;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeSourceMapsHandlers() {\x0d\n  const { setSourceMapsEnabled } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction initializeFrozenIntrinsics() {\x0d\n  if (getOptionValue('--frozen-intrinsics')) {\x0d\n    process.emitWarning('The --frozen-intrinsics flag is experimental'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    require('internal/freeze_intrinsics')();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction loadPreloadModules() {\x0d\n  // For user code\x2C we preload modules if `-r` is passed\x0d\n  const preloadModules = getOptionValue('--require');\x0d\n  if (preloadModules && preloadModules.length > 0) {\x0d\n    const {\x0d\n      Module: {\x0d\n        _preloadModules\x0d\n      }\x2C\x0d\n    } = require('internal/modules/cjs/loader');\x0d\n    _preloadModules(preloadModules);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  patchProcessObject\x2C\x0d\n  setupCoverageHooks\x2C\x0d\n  setupWarningHandler\x2C\x0d\n  setupFetch\x2C\x0d\n  setupWebCrypto\x2C\x0d\n  setupDebugEnv\x2C\x0d\n  setupPerfHooks\x2C\x0d\n  prepareMainThreadExecution\x2C\x0d\n  initializeDeprecations\x2C\x0d\n  initializeESMLoader\x2C\x0d\n  initializeFrozenIntrinsics\x2C\x0d\n  initializeSourceMapsHandlers\x2C\x0d\n  loadPreloadModules\x2C\x0d\n  setupTraceCategoryState\x2C\x0d\n  setupInspectorHooks\x2C\x0d\n  initializeReport\x2C\x0d\n  initializeCJSLoader\x2C\x0d\n  initializeWASI\x0d\n};\x0d\n
code-source-info,0x2c63eb03f7e,96,0,18262,C0O0C4O18262,,
code-creation,Function,10,131078,0x2c63eb04bae,497, node:internal/bootstrap/pre_execution:1:1,0x2c63eb03ef8,~
code-source-info,0x2c63eb04bae,96,0,18262,C0O0C214O28C220O47C226O72C232O107C238O119C244O135C250O165C256O253C262O253C267O209C273O228C279O319C285O319C290O291C296O429C302O429C307O359C313O379C319O407C325O477C331O477C336O466C342O539C348O539C353O565C358O505C364O589C370O589C374O589C376O17813C383O17835C389O17858C395O17881C401O17905C407O17920C413O17939C419O17957C425O17976C431O18007C437O18034C443O18058C449O18089C455O18122C461O18145C467O18173C473O18197C479O18218C485O18242C491O17828C496O18261,,
code-creation,LazyCompile,10,131322,0x2c63eb06476,225,prepareMainThreadExecution node:internal/bootstrap/pre_execution:28:36,0x2c63eb03fb0,~
code-source-info,0x2c63eb
tick,0x7ff7c08d5ad4,131414,0,0x0,3,0x7ff7c08240c0,0x2c63eb02065
code-creation,LazyCompile,10,131439,0x2c63eb07886,19,reconnectZeroFillToggle node:internal/buffer:1072:33,0x273fd30bdb8,~
script-source,25,node:internal/buffer,'use strict';\x0d\n\x0d\nconst {\x0d\n  BigInt\x2C\x0d\n  Float32Array\x2C\x0d\n  Float64Array\x2C\x0d\n  MathFloor\x2C\x0d\n  Number\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x0d\n} = require('internal/errors').codes;\x0d\nconst { validateNumber } = require('internal/validators');\x0d\nconst {\x0d\n  asciiSlice\x2C\x0d\n  base64Slice\x2C\x0d\n  base64urlSlice\x2C\x0d\n  latin1Slice\x2C\x0d\n  hexSlice\x2C\x0d\n  ucs2Slice\x2C\x0d\n  utf8Slice\x2C\x0d\n  asciiWrite\x2C\x0d\n  base64Write\x2C\x0d\n  base64urlWrite\x2C\x0d\n  latin1Write\x2C\x0d\n  hexWrite\x2C\x0d\n  ucs2Write\x2C\x0d\n  utf8Write\x2C\x0d\n  getZeroFillToggle\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  untransferable_object_private_symbol\x2C\x0d\n  setHiddenValue\x2C\x0d\n} = internalBinding('util');\x0d\n\x0d\n// Temporary buffers to convert numbers.\x0d\nconst float32Array = new Float32Array(1);\x0d\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\x0d\nconst float64Array = new Float64Array(1);\x0d\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\x0d\n\x0d\n// Check endianness.\x0d\nfloat32Array[0] = -1; // 0xBF800000\x0d\n// Either it is [0\x2C 0\x2C 128\x2C 191] or [191\x2C 128\x2C 0\x2C 0]. It is not possible to\x0d\n// check this with `os.endianness()` because that is determined at compile time.\x0d\nconst bigEndian = uInt8Float32Array[3] === 0;\x0d\n\x0d\nfunction checkBounds(buf\x2C offset\x2C byteLength) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\x0d\n    boundsError(offset\x2C buf.length - (byteLength + 1));\x0d\n}\x0d\n\x0d\nfunction checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C byteLength) {\x0d\n  if (value > max || value < min) {\x0d\n    const n = typeof min === 'bigint' ? 'n' : '';\x0d\n    let range;\x0d\n    if (byteLength > 3) {\x0d\n      if (min === 0 || min === 0n) {\x0d\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\x0d\n      } else {\x0d\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and ` +\x0d\n                `< 2${n} ** ${(byteLength + 1) * 8 - 1}${n}`;\x0d\n      }\x0d\n    } else {\x0d\n      range = `>= ${min}${n} and <= ${max}${n}`;\x0d\n    }\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C range\x2C value);\x0d\n  }\x0d\n  checkBounds(buf\x2C offset\x2C byteLength);\x0d\n}\x0d\n\x0d\nfunction boundsError(value\x2C length\x2C type) {\x0d\n  if (MathFloor(value) !== value) {\x0d\n    validateNumber(value\x2C type);\x0d\n    throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C 'an integer'\x2C value);\x0d\n  }\x0d\n\x0d\n  if (length < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n  throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C\x0d\n                             `>= ${type ? 1 : 0} and <= ${length}`\x2C\x0d\n                             value);\x0d\n}\x0d\n\x0d\n// Read integers.\x0d\nfunction readBigUInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const lo = first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24;\x0d\n\x0d\n  const hi = this[++offset] +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n\x0d\n  return BigInt(lo) + (BigInt(hi) << 32n);\x0d\n}\x0d\n\x0d\nfunction readBigUInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const hi = first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n\x0d\n  const lo = this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n\x0d\n  return (BigInt(hi) << 32n) + BigInt(lo);\x0d\n}\x0d\n\x0d\nfunction readBigInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = this[offset + 4] +\x0d\n    this[offset + 5] * 2 ** 8 +\x0d\n    this[offset + 6] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24);\x0d\n}\x0d\n\x0d\nfunction readBigInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last);\x0d\n}\x0d\n\x0d\nfunction readUIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    last * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readUInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n}\x0d\n\x0d\nfunction readUInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first + last * 2 ** 8;\x0d\n}\x0d\n\x0d\nfunction readUInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val;\x0d\n}\x0d\n\x0d\nfunction readUIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readUInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[offset + 4] + last * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n}\x0d\n\x0d\nfunction readInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first + last * 2 ** 8;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\nfunction readInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val | (val & 2 ** 7) * 0x1fffffe;\x0d\n}\x0d\n\x0d\nfunction readIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[++offset] + first * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\n// Read floats\x0d\nfunction readFloatBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[3] = first;\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[0] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readFloatForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[0] = first;\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[3] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[7] = first;\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[0] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[0] = first;\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[7] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\n// Write integers.\x0d\nfunction writeBigU_Int64LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigU_Int64BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset + 7] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 6] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 5] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 4] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset + 3] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 2] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 1] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset] = hi;\x0d\n  return offset + 8;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeUIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  const newVal = value;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = MathFloor(newVal * 2 ** -32);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int8(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  // `checkInt()` can not be used here because it checks two entries.\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (value > max || value < min) {\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C `>= ${min} and <= ${max}`\x2C value);\x0d\n  }\x0d\n  if (buf[offset] === undefined)\x0d\n    boundsError(offset\x2C buf.length - 1);\x0d\n\x0d\n  buf[offset] = value;\x0d\n  return offset + 1;\x0d\n}\x0d\n\x0d\nfunction writeUInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n}\x0d\n\x0d\nfunction writeUIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  buf[offset++] = MathFloor(value * 2 ** -32);\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeUInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 3;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\nfunction writeInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n}\x0d\n\x0d\nfunction writeIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\n// Write floats.\x0d\nfunction writeDoubleForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeDoubleBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nclass FastBuffer extends Uint8Array {\x0d\n  // Using an explicit constructor here is necessary to avoid relying on\x0d\n  // `Array.prototype[Symbol.iterator]`\x2C which can be mutated by users.\x0d\n  // eslint-disable-next-line no-useless-constructor\x0d\n  constructor(bufferOrLength\x2C byteOffset\x2C length) {\x0d\n    super(bufferOrLength\x2C byteOffset\x2C length);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addBufferPrototypeMethods(proto) {\x0d\n  proto.readBigUInt64LE = readBigUInt64LE;\x0d\n  proto.readBigUInt64BE = readBigUInt64BE;\x0d\n  proto.readBigUint64LE = readBigUInt64LE;\x0d\n  proto.readBigUint64BE = readBigUInt64BE;\x0d\n  proto.readBigInt64LE = readBigInt64LE;\x0d\n  proto.readBigInt64BE = readBigInt64BE;\x0d\n  proto.writeBigUInt64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUInt64BE = writeBigUInt64BE;\x0d\n  proto.writeBigUint64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUint64BE = writeBigUInt64BE;\x0d\n  proto.writeBigInt64LE = writeBigInt64LE;\x0d\n  proto.writeBigInt64BE = writeBigInt64BE;\x0d\n\x0d\n  proto.readUIntLE = readUIntLE;\x0d\n  proto.readUInt32LE = readUInt32LE;\x0d\n  proto.readUInt16LE = readUInt16LE;\x0d\n  proto.readUInt8 = readUInt8;\x0d\n  proto.readUIntBE = readUIntBE;\x0d\n  proto.readUInt32BE = readUInt32BE;\x0d\n  proto.readUInt16BE = readUInt16BE;\x0d\n  proto.readUintLE = readUIntLE;\x0d\n  proto.readUint32LE = readUInt32LE;\x0d\n  proto.readUint16LE = readUInt16LE;\x0d\n  proto.readUint8 = readUInt8;\x0d\n  proto.readUintBE = readUIntBE;\x0d\n  proto.readUint32BE = readUInt32BE;\x0d\n  proto.readUint16BE = readUInt16BE;\x0d\n  proto.readIntLE = readIntLE;\x0d\n  proto.readInt32LE = readInt32LE;\x0d\n  proto.readInt16LE = readInt16LE;\x0d\n  proto.readInt8 = readInt8;\x0d\n  proto.readIntBE = readIntBE;\x0d\n  proto.readInt32BE = readInt32BE;\x0d\n  proto.readInt16BE = readInt16BE;\x0d\n\x0d\n  proto.writeUIntLE = writeUIntLE;\x0d\n  proto.writeUInt32LE = writeUInt32LE;\x0d\n  proto.writeUInt16LE = writeUInt16LE;\x0d\n  proto.writeUInt8 = writeUInt8;\x0d\n  proto.writeUIntBE = writeUIntBE;\x0d\n  proto.writeUInt32BE = writeUInt32BE;\x0d\n  proto.writeUInt16BE = writeUInt16BE;\x0d\n  proto.writeUintLE = writeUIntLE;\x0d\n  proto.writeUint32LE = writeUInt32LE;\x0d\n  proto.writeUint16LE = writeUInt16LE;\x0d\n  proto.writeUint8 = writeUInt8;\x0d\n  proto.writeUintBE = writeUIntBE;\x0d\n  proto.writeUint32BE = writeUInt32BE;\x0d\n  proto.writeUint16BE = writeUInt16BE;\x0d\n  proto.writeIntLE = writeIntLE;\x0d\n  proto.writeInt32LE = writeInt32LE;\x0d\n  proto.writeInt16LE = writeInt16LE;\x0d\n  proto.writeInt8 = writeInt8;\x0d\n  proto.writeIntBE = writeIntBE;\x0d\n  proto.writeInt32BE = writeInt32BE;\x0d\n  proto.writeInt16BE = writeInt16BE;\x0d\n\x0d\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\x0d\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\x0d\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\x0d\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\x0d\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\x0d\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\x0d\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\x0d\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\x0d\n\x0d\n  proto.asciiSlice = asciiSlice;\x0d\n  proto.base64Slice = base64Slice;\x0d\n  proto.base64urlSlice = base64urlSlice;\x0d\n  proto.latin1Slice = latin1Slice;\x0d\n  proto.hexSlice = hexSlice;\x0d\n  proto.ucs2Slice = ucs2Slice;\x0d\n  proto.utf8Slice = utf8Slice;\x0d\n  proto.asciiWrite = asciiWrite;\x0d\n  proto.base64Write = base64Write;\x0d\n  proto.base64urlWrite = base64urlWrite;\x0d\n  proto.latin1Write = latin1Write;\x0d\n  proto.hexWrite = hexWrite;\x0d\n  proto.ucs2Write = ucs2Write;\x0d\n  proto.utf8Write = utf8Write;\x0d\n}\x0d\n\x0d\n// This would better be placed in internal/worker/io.js\x2C but that doesn't work\x0d\n// because Buffer needs this and that would introduce a cyclic dependency.\x0d\nfunction markAsUntransferable(obj) {\x0d\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\x0d\n    return;  // This object is a primitive and therefore already untransferable.\x0d\n  setHiddenValue(obj\x2C untransferable_object_private_symbol\x2C true);\x0d\n}\x0d\n\x0d\n// A toggle used to access the zero fill setting of the array buffer allocator\x0d\n// in C++.\x0d\n// |zeroFill| can be undefined when running inside an isolate where we\x0d\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\x0d\nlet zeroFill = getZeroFillToggle();\x0d\nfunction createUnsafeBuffer(size) {\x0d\n  zeroFill[0] = 0;\x0d\n  try {\x0d\n    return new FastBuffer(size);\x0d\n  } finally {\x0d\n    zeroFill[0] = 1;\x0d\n  }\x0d\n}\x0d\n\x0d\n// The connection between the JS land zero fill toggle and the\x0d\n// C++ one in the NodeArrayBufferAllocator gets lost if the toggle\x0d\n// is deserialized from the snapshot\x2C because V8 owns the underlying\x0d\n// memory of this toggle. This resets the connection.\x0d\nfunction reconnectZeroFillToggle() {\x0d\n  zeroFill = getZeroFillToggle();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  FastBuffer\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  createUnsafeBuffer\x2C\x0d\n  readUInt16BE\x2C\x0d\n  readUInt32BE\x2C\x0d\n  reconnectZeroFillToggle\x0d\n};\x0d\n
code-source-info,0x2c63eb07886,25,31788,31830,C0O31796C5O31807C11O31805C18O31829,,
code-creation,LazyCompile,10,132767,0x2c63eb0a0be,397,patchProcessObject node:internal/bootstrap/pre_execution:89:28,0x2c63eb04000,~
code-source-info,0x2c63eb0a0be
code-creation,LazyCompile,10,132851,0x2c63eb0a3ee,69,internalBinding node:internal/bootstrap/loaders:164:45,0xa82968f840,~
code-source-info,0x2c63eb0a3ee,9,5278,5523,C0O5304C7O5314C11O5329C15O5367C25O5394C30O5392C37O5429C48O5448C56O5484C61O5429C66O5507C68O5518,,
code-creation,LazyCompile,10,132950,0x2c63eb0a6a6,69,refreshHrtimeBuffer node:internal/process/per_thread:66:29,0x273fd318598,~
script-source,30,node:internal/process/per_thread,'use strict';\x0d\n\x0d\n// This files contains process bootstrappers that can be\x0d\n// run when setting up each thread\x2C including the main\x0d\n// thread and the worker threads.\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeEvery\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  BigUint64Array\x2C\x0d\n  Float64Array\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  Set\x2C\x0d\n  SetPrototypeEntries\x2C\x0d\n  SetPrototypeValues\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  Uint32Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n  codes: {\x0d\n    ERR_ASSERTION\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst format = require('internal/util/inspect').format;\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\nconst constants = internalBinding('constants').os.signals;\x0d\n\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nconst kInternal = Symbol('internal properties');\x0d\n\x0d\nfunction assert(x\x2C msg) {\x0d\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\x0d\n}\x0d\n\x0d\nconst binding = internalBinding('process_methods');\x0d\n\x0d\nlet hrValues;\x0d\nlet hrBigintValues;\x0d\n\x0d\nfunction refreshHrtimeBuffer() {\x0d\n  // The 3 entries filled in by the original process.hrtime contains\x0d\n  // the upper/lower 32 bits of the second part of the value\x2C\x0d\n  // and the remaining nanoseconds of the value.\x0d\n  hrValues = new Uint32Array(binding.hrtimeBuffer);\x0d\n  // Use a BigUint64Array in the closure because this is actually a bit\x0d\n  // faster than simply returning a BigInt from C++ in V8 7.1.\x0d\n  hrBigintValues = new BigUint64Array(binding.hrtimeBuffer\x2C 0\x2C 1);\x0d\n}\x0d\n\x0d\n// Create the buffers.\x0d\nrefreshHrtimeBuffer();\x0d\n\x0d\nfunction hrtime(time) {\x0d\n  binding.hrtime();\x0d\n\x0d\n  if (time !== undefined) {\x0d\n    validateArray(time\x2C 'time');\x0d\n    if (time.length !== 2) {\x0d\n      throw new ERR_OUT_OF_RANGE('time'\x2C 2\x2C time.length);\x0d\n    }\x0d\n\x0d\n    const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\x0d\n    const nsec = hrValues[2] - time[1];\x0d\n    const needsBorrow = nsec < 0;\x0d\n    return [needsBorrow ? sec - 1 : sec\x2C needsBorrow ? nsec + 1e9 : nsec];\x0d\n  }\x0d\n\x0d\n  return [\x0d\n    hrValues[0] * 0x100000000 + hrValues[1]\x2C\x0d\n    hrValues[2]\x2C\x0d\n  ];\x0d\n}\x0d\n\x0d\nfunction hrtimeBigInt() {\x0d\n  binding.hrtimeBigInt();\x0d\n  return hrBigintValues[0];\x0d\n}\x0d\n\x0d\n// The execution of this function itself should not cause any side effects.\x0d\nfunction wrapProcessMethods(binding) {\x0d\n  const {\x0d\n    cpuUsage: _cpuUsage\x2C\x0d\n    memoryUsage: _memoryUsage\x2C\x0d\n    rss\x2C\x0d\n    resourceUsage: _resourceUsage\x0d\n  } = binding;\x0d\n\x0d\n  function _rawDebug(...args) {\x0d\n    binding._rawDebug(ReflectApply(format\x2C null\x2C args));\x0d\n  }\x0d\n\x0d\n  // Create the argument array that will be passed to the native function.\x0d\n  const cpuValues = new Float64Array(2);\x0d\n\x0d\n  // Replace the native function with the JS version that calls the native\x0d\n  // function.\x0d\n  function cpuUsage(prevValue) {\x0d\n    // If a previous value was passed in\x2C ensure it has the correct shape.\x0d\n    if (prevValue) {\x0d\n      if (!previousValueIsValid(prevValue.user)) {\x0d\n        validateObject(prevValue\x2C 'prevValue');\x0d\n\x0d\n        validateNumber(prevValue.user\x2C 'prevValue.user');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.user'\x2C\x0d\n                                                   prevValue.user);\x0d\n      }\x0d\n\x0d\n      if (!previousValueIsValid(prevValue.system)) {\x0d\n        validateNumber(prevValue.system\x2C 'prevValue.system');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.system'\x2C\x0d\n                                                   prevValue.system);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Call the native function to get the current values.\x0d\n    _cpuUsage(cpuValues);\x0d\n\x0d\n    // If a previous value was passed in\x2C return diff of current from previous.\x0d\n    if (prevValue) {\x0d\n      return {\x0d\n        user: cpuValues[0] - prevValue.user\x2C\x0d\n        system: cpuValues[1] - prevValue.system\x0d\n      };\x0d\n    }\x0d\n\x0d\n    // If no previous value passed in\x2C return current value.\x0d\n    return {\x0d\n      user: cpuValues[0]\x2C\x0d\n      system: cpuValues[1]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // Ensure that a previously passed in value is valid. Currently\x2C the native\x0d\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\x0d\n  function previousValueIsValid(num) {\x0d\n    return typeof num === 'number' &&\x0d\n        num <= NumberMAX_SAFE_INTEGER &&\x0d\n        num >= 0;\x0d\n  }\x0d\n\x0d\n  const memValues = new Float64Array(5);\x0d\n  function memoryUsage() {\x0d\n    _memoryUsage(memValues);\x0d\n    return {\x0d\n      rss: memValues[0]\x2C\x0d\n      heapTotal: memValues[1]\x2C\x0d\n      heapUsed: memValues[2]\x2C\x0d\n      external: memValues[3]\x2C\x0d\n      arrayBuffers: memValues[4]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  memoryUsage.rss = rss;\x0d\n\x0d\n  function exit(code) {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n\x0d\n    if (code || code === 0)\x0d\n      process.exitCode = code;\x0d\n\x0d\n    if (!process._exiting) {\x0d\n      process._exiting = true;\x0d\n      process.emit('exit'\x2C process.exitCode || 0);\x0d\n    }\x0d\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\x0d\n    // in the user land. Either document it\x2C or deprecate it in favor of a\x0d\n    // better public alternative.\x0d\n    process.reallyExit(process.exitCode || 0);\x0d\n  }\x0d\n\x0d\n  function kill(pid\x2C sig) {\x0d\n    let err;\x0d\n\x0d\n    // eslint-disable-next-line eqeqeq\x0d\n    if (pid != (pid | 0)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('pid'\x2C 'number'\x2C pid);\x0d\n    }\x0d\n\x0d\n    // Preserve null signal\x0d\n    if (sig === (sig | 0)) {\x0d\n      // XXX(joyeecheung): we have to use process._kill here because\x0d\n      // it's monkey-patched by tests.\x0d\n      err = process._kill(pid\x2C sig);\x0d\n    } else {\x0d\n      sig = sig || 'SIGTERM';\x0d\n      if (constants[sig]) {\x0d\n        err = process._kill(pid\x2C constants[sig]);\x0d\n      } else {\x0d\n        throw new ERR_UNKNOWN_SIGNAL(sig);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'kill');\x0d\n\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  const resourceValues = new Float64Array(16);\x0d\n  function resourceUsage() {\x0d\n    _resourceUsage(resourceValues);\x0d\n    return {\x0d\n      userCPUTime: resourceValues[0]\x2C\x0d\n      systemCPUTime: resourceValues[1]\x2C\x0d\n      maxRSS: resourceValues[2]\x2C\x0d\n      sharedMemorySize: resourceValues[3]\x2C\x0d\n      unsharedDataSize: resourceValues[4]\x2C\x0d\n      unsharedStackSize: resourceValues[5]\x2C\x0d\n      minorPageFault: resourceValues[6]\x2C\x0d\n      majorPageFault: resourceValues[7]\x2C\x0d\n      swappedOut: resourceValues[8]\x2C\x0d\n      fsRead: resourceValues[9]\x2C\x0d\n      fsWrite: resourceValues[10]\x2C\x0d\n      ipcSent: resourceValues[11]\x2C\x0d\n      ipcReceived: resourceValues[12]\x2C\x0d\n      signalsCount: resourceValues[13]\x2C\x0d\n      voluntaryContextSwitches: resourceValues[14]\x2C\x0d\n      involuntaryContextSwitches: resourceValues[15]\x0d\n    };\x0d\n  }\x0d\n\x0d\n\x0d\n  return {\x0d\n    _rawDebug\x2C\x0d\n    cpuUsage\x2C\x0d\n    resourceUsage\x2C\x0d\n    memoryUsage\x2C\x0d\n    kill\x2C\x0d\n    exit\x0d\n  };\x0d\n}\x0d\n\x0d\nconst replaceUnderscoresRegex = /_/g;\x0d\nconst leadingDashesRegex = /^--?/;\x0d\nconst trailingValuesRegex = /=.*$/;\x0d\n\x0d\n// This builds the initial process.allowedNodeEnvironmentFlags\x0d\n// from data in the config binding.\x0d\nfunction buildAllowedFlags() {\x0d\n  const {\x0d\n    envSettings: { kAllowedInEnvironment }\x2C\x0d\n    types: { kBoolean }\x2C\x0d\n  } = internalBinding('options');\x0d\n  const { options\x2C aliases } = require('internal/options');\x0d\n\x0d\n  const allowedNodeEnvironmentFlags = [];\x0d\n  for (const { 0: name\x2C 1: info } of options) {\x0d\n    if (info.envVarSettings === kAllowedInEnvironment) {\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C name);\x0d\n      if (info.type === kBoolean) {\x0d\n        const negatedName = `--no-${name.slice(2)}`;\x0d\n        ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C negatedName);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function isAccepted(to) {\x0d\n    if (!StringPrototypeStartsWith(to\x2C '-') || to === '--') return true;\x0d\n    const recursiveExpansion = aliases.get(to);\x0d\n    if (recursiveExpansion) {\x0d\n      if (recursiveExpansion[0] === to)\x0d\n        ArrayPrototypeSplice(recursiveExpansion\x2C 0\x2C 1);\x0d\n      return ArrayPrototypeEvery(recursiveExpansion\x2C isAccepted);\x0d\n    }\x0d\n    return options.get(to).envVarSettings === kAllowedInEnvironment;\x0d\n  }\x0d\n  for (const { 0: from\x2C 1: expansion } of aliases) {\x0d\n    if (ArrayPrototypeEvery(expansion\x2C isAccepted)) {\x0d\n      let canonical = from;\x0d\n      if (StringPrototypeEndsWith(canonical\x2C '='))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 1);\x0d\n      if (StringPrototypeEndsWith(canonical\x2C ' <arg>'))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 4);\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C canonical);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const trimLeadingDashes =\x0d\n    (flag) => StringPrototypeReplace(flag\x2C leadingDashesRegex\x2C '');\x0d\n\x0d\n  // Save these for comparison against flags provided to\x0d\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\x0d\n  const nodeFlags = ArrayPrototypeMap(allowedNodeEnvironmentFlags\x2C\x0d\n                                      trimLeadingDashes);\x0d\n\x0d\n  class NodeEnvironmentFlagsSet extends Set {\x0d\n    constructor(array) {\x0d\n      super();\x0d\n      this[kInternal] = { array };\x0d\n    }\x0d\n\x0d\n    add() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    delete() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    clear() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n    }\x0d\n\x0d\n    has(key) {\x0d\n      // This will return `true` based on various possible\x0d\n      // permutations of a flag\x2C including present/missing leading\x0d\n      // dash(es) and/or underscores-for-dashes.\x0d\n      // Strips any values after `=`\x2C inclusive.\x0d\n      // TODO(addaleax): It might be more flexible to run the option parser\x0d\n      // on a dummy option set and see whether it rejects the argument or\x0d\n      // not.\x0d\n      if (typeof key === 'string') {\x0d\n        key = StringPrototypeReplace(key\x2C replaceUnderscoresRegex\x2C '-');\x0d\n        if (RegExpPrototypeTest(leadingDashesRegex\x2C key)) {\x0d\n          key = StringPrototypeReplace(key\x2C trailingValuesRegex\x2C '');\x0d\n          return ArrayPrototypeIncludes(this[kInternal].array\x2C key);\x0d\n        }\x0d\n        return ArrayPrototypeIncludes(nodeFlags\x2C key);\x0d\n      }\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    entries() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeEntries(this[kInternal].set);\x0d\n    }\x0d\n\x0d\n    forEach(callback\x2C thisArg = undefined) {\x0d\n      ArrayPrototypeForEach(\x0d\n        this[kInternal].array\x2C\x0d\n        (v) => ReflectApply(callback\x2C thisArg\x2C [v\x2C v\x2C this])\x0d\n      );\x0d\n    }\x0d\n\x0d\n    get size() {\x0d\n      return this[kInternal].array.length;\x0d\n    }\x0d\n\x0d\n    values() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeValues(this[kInternal].set);\x0d\n    }\x0d\n  }\x0d\n  NodeEnvironmentFlagsSet.prototype.keys =\x0d\n  NodeEnvironmentFlagsSet.prototype[SymbolIterator] =\x0d\n    NodeEnvironmentFlagsSet.prototype.values;\x0d\n\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype.constructor);\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype);\x0d\n\x0d\n  return ObjectFreeze(new NodeEnvironmentFlagsSet(\x0d\n    allowedNodeEnvironmentFlags\x0d\n  ));\x0d\n}\x0d\n\x0d\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\x0d\n// trace event category is enabled.\x0d\nlet traceEventsAsyncHook;\x0d\n// Dynamically enable/disable the traceEventsAsyncHook\x0d\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\x0d\n  if (asyncHooksEnabled) {\x0d\n    if (!traceEventsAsyncHook) {\x0d\n      traceEventsAsyncHook =\x0d\n        require('internal/trace_events_async_hooks').createHook();\x0d\n    }\x0d\n    traceEventsAsyncHook.enable();\x0d\n  } else if (traceEventsAsyncHook) {\x0d\n    traceEventsAsyncHook.disable();\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  toggleTraceCategoryState\x2C\x0d\n  assert\x2C\x0d\n  buildAllowedFlags\x2C\x0d\n  wrapProcessMethods\x2C\x0d\n  hrtime\x2C\x0d\n  hrtimeBigInt\x2C\x0d\n  refreshHrtimeBuffer\x2C\x0d\n};\x0d\n
code-source-info,0x2c63eb0a6a6,30,1477,1925,C0O1668C7O1695C10O1703C17O1679C25O1677C31O1858C38O1894C41O1902C53O1875C61O1873C68O1924,,
tick,0x7ffdf67ba8cf,133478,0,0x0,3,0x7ff7c08240c0,0x2c63eb0a0e6,0x2c63eb0648b,0x2c63eb02065
code-creation,LazyCompile,10,133672,0x2c63eb0b766,832,resolve node:path:158:10,0x375c9f4d510,~
script-source,41,node:path,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  CHAR_UPPERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_UPPERCASE_Z\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_DOT\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x2C\x0d\n  CHAR_QUESTION_MARK\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst platformIsWin32 = (process.platform === 'win32');\x0d\n\x0d\nfunction isPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isPosixPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isWindowsDeviceRoot(code) {\x0d\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\x0d\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\x0d\n}\x0d\n\x0d\n// Resolves . and .. elements in a path with directory names\x0d\nfunction normalizeString(path\x2C allowAboveRoot\x2C separator\x2C isPathSeparator) {\x0d\n  let res = '';\x0d\n  let lastSegmentLength = 0;\x0d\n  let lastSlash = -1;\x0d\n  let dots = 0;\x0d\n  let code = 0;\x0d\n  for (let i = 0; i <= path.length; ++i) {\x0d\n    if (i < path.length)\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n    else if (isPathSeparator(code))\x0d\n      break;\x0d\n    else\x0d\n      code = CHAR_FORWARD_SLASH;\x0d\n\x0d\n    if (isPathSeparator(code)) {\x0d\n      if (lastSlash === i - 1 || dots === 1) {\x0d\n        // NOOP\x0d\n      } else if (dots === 2) {\x0d\n        if (res.length < 2 || lastSegmentLength !== 2 ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 1) !== CHAR_DOT ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 2) !== CHAR_DOT) {\x0d\n          if (res.length > 2) {\x0d\n            const lastSlashIndex = StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            if (lastSlashIndex === -1) {\x0d\n              res = '';\x0d\n              lastSegmentLength = 0;\x0d\n            } else {\x0d\n              res = StringPrototypeSlice(res\x2C 0\x2C lastSlashIndex);\x0d\n              lastSegmentLength =\x0d\n                res.length - 1 - StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            }\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          } else if (res.length !== 0) {\x0d\n            res = '';\x0d\n            lastSegmentLength = 0;\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          }\x0d\n        }\x0d\n        if (allowAboveRoot) {\x0d\n          res += res.length > 0 ? `${separator}..` : '..';\x0d\n          lastSegmentLength = 2;\x0d\n        }\x0d\n      } else {\x0d\n        if (res.length > 0)\x0d\n          res += `${separator}${StringPrototypeSlice(path\x2C lastSlash + 1\x2C i)}`;\x0d\n        else\x0d\n          res = StringPrototypeSlice(path\x2C lastSlash + 1\x2C i);\x0d\n        lastSegmentLength = i - lastSlash - 1;\x0d\n      }\x0d\n      lastSlash = i;\x0d\n      dots = 0;\x0d\n    } else if (code === CHAR_DOT && dots !== -1) {\x0d\n      ++dots;\x0d\n    } else {\x0d\n      dots = -1;\x0d\n    }\x0d\n  }\x0d\n  return res;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} sep\x0d\n * @param {{\x0d\n *  dir?: string;\x0d\n *  root?: string;\x0d\n *  base?: string;\x0d\n *  name?: string;\x0d\n *  ext?: string;\x0d\n *  }} pathObject\x0d\n * @returns {string}\x0d\n */\x0d\nfunction _format(sep\x2C pathObject) {\x0d\n  validateObject(pathObject\x2C 'pathObject');\x0d\n  const dir = pathObject.dir || pathObject.root;\x0d\n  const base = pathObject.base ||\x0d\n    `${pathObject.name || ''}${pathObject.ext || ''}`;\x0d\n  if (!dir) {\x0d\n    return base;\x0d\n  }\x0d\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\x0d\n}\x0d\n\x0d\nconst win32 = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedDevice = '';\x0d\n    let resolvedTail = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1; i--) {\x0d\n      let path;\x0d\n      if (i >= 0) {\x0d\n        path = args[i];\x0d\n        validateString(path\x2C 'path');\x0d\n\x0d\n        // Skip empty entries\x0d\n        if (path.length === 0) {\x0d\n          continue;\x0d\n        }\x0d\n      } else if (resolvedDevice.length === 0) {\x0d\n        path = process.cwd();\x0d\n      } else {\x0d\n        // Windows has the concept of drive-specific current working\x0d\n        // directories. If we've resolved a drive letter but not yet an\x0d\n        // absolute path\x2C get cwd for that drive\x2C or the process cwd if\x0d\n        // the drive cwd is not available. We're sure the device is not\x0d\n        // a UNC path at this points\x2C because UNC paths are always absolute.\x0d\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\x0d\n\x0d\n        // Verify that a cwd was found and that it actually points\x0d\n        // to our drive. If not\x2C default to the drive's root.\x0d\n        if (path === undefined ||\x0d\n            (StringPrototypeToLowerCase(StringPrototypeSlice(path\x2C 0\x2C 2)) !==\x0d\n            StringPrototypeToLowerCase(resolvedDevice) &&\x0d\n            StringPrototypeCharCodeAt(path\x2C 2) === CHAR_BACKWARD_SLASH)) {\x0d\n          path = `${resolvedDevice}\\\\`;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      const len = path.length;\x0d\n      let rootEnd = 0;\x0d\n      let device = '';\x0d\n      let isAbsolute = false;\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n      // Try to match a root\x0d\n      if (len === 1) {\x0d\n        if (isPathSeparator(code)) {\x0d\n          // `path` contains just a path separator\x0d\n          rootEnd = 1;\x0d\n          isAbsolute = true;\x0d\n        }\x0d\n      } else if (isPathSeparator(code)) {\x0d\n        // Possible UNC root\x0d\n\x0d\n        // If we started with a separator\x2C we know we at least have an\x0d\n        // absolute path of some kind (UNC or otherwise)\x0d\n        isAbsolute = true;\x0d\n\x0d\n        if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n          // Matched double path separator at beginning\x0d\n          let j = 2;\x0d\n          let last = j;\x0d\n          // Match 1 or more non-path separators\x0d\n          while (j < len &&\x0d\n                 !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more path separators\x0d\n            while (j < len &&\x0d\n                   isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j < len && j !== last) {\x0d\n              // Matched!\x0d\n              last = j;\x0d\n              // Match 1 or more non-path separators\x0d\n              while (j < len &&\x0d\n                     !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n                j++;\x0d\n              }\x0d\n              if (j === len || j !== last) {\x0d\n                // We matched a UNC root\x0d\n                device =\x0d\n                  `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n                rootEnd = j;\x0d\n              }\x0d\n            }\x0d\n          }\x0d\n        } else {\x0d\n          rootEnd = 1;\x0d\n        }\x0d\n      } else if (isWindowsDeviceRoot(code) &&\x0d\n                  StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n        // Possible device root\x0d\n        device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n        rootEnd = 2;\x0d\n        if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n          // Treat separator following drive name as an absolute path\x0d\n          // indicator\x0d\n          isAbsolute = true;\x0d\n          rootEnd = 3;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (device.length > 0) {\x0d\n        if (resolvedDevice.length > 0) {\x0d\n          if (StringPrototypeToLowerCase(device) !==\x0d\n              StringPrototypeToLowerCase(resolvedDevice))\x0d\n            // This path points to another device so it is not applicable\x0d\n            continue;\x0d\n        } else {\x0d\n          resolvedDevice = device;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (resolvedAbsolute) {\x0d\n        if (resolvedDevice.length > 0)\x0d\n          break;\x0d\n      } else {\x0d\n        resolvedTail =\x0d\n          `${StringPrototypeSlice(path\x2C rootEnd)}\\\\${resolvedTail}`;\x0d\n        resolvedAbsolute = isAbsolute;\x0d\n        if (isAbsolute && resolvedDevice.length > 0) {\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C\x0d\n    // but handle relative paths to be safe (might happen when process.cwd()\x0d\n    // fails)\x0d\n\x0d\n    // Normalize the tail path\x0d\n    resolvedTail = normalizeString(resolvedTail\x2C !resolvedAbsolute\x2C '\\\\'\x2C\x0d\n                                   isPathSeparator);\x0d\n\x0d\n    return resolvedAbsolute ?\x0d\n      `${resolvedDevice}\\\\${resolvedTail}` :\x0d\n      `${resolvedDevice}${resolvedTail}` || '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = 0;\x0d\n    let device;\x0d\n    let isAbsolute = false;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    // Try to match a root\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a single char\x2C exit early to avoid\x0d\n      // unnecessary work\x0d\n      return isPosixPathSeparator(code) ? '\\\\' : path;\x0d\n    }\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      // If we started with a separator\x2C we know we at least have an absolute\x0d\n      // path of some kind (UNC or otherwise)\x0d\n      isAbsolute = true;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              // Return the normalized version of the UNC root since there\x0d\n              // is nothing left to process\x0d\n              return `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last)}\\\\`;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              device =\x0d\n                `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n              rootEnd = j;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      } else {\x0d\n        rootEnd = 1;\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n      rootEnd = 2;\x0d\n      if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        // Treat separator following drive name as an absolute path\x0d\n        // indicator\x0d\n        isAbsolute = true;\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let tail = rootEnd < len ?\x0d\n      normalizeString(StringPrototypeSlice(path\x2C rootEnd)\x2C\x0d\n                      !isAbsolute\x2C '\\\\'\x2C isPathSeparator) :\x0d\n      '';\x0d\n    if (tail.length === 0 && !isAbsolute)\x0d\n      tail = '.';\x0d\n    if (tail.length > 0 &&\x0d\n        isPathSeparator(StringPrototypeCharCodeAt(path\x2C len - 1)))\x0d\n      tail += '\\\\';\x0d\n    if (device === undefined) {\x0d\n      return isAbsolute ? `\\\\${tail}` : tail;\x0d\n    }\x0d\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return false;\x0d\n\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n    return isPathSeparator(code) ||\x0d\n      // Possible device root\x0d\n      (len > 2 &&\x0d\n      isWindowsDeviceRoot(code) &&\x0d\n      StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n      isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)));\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    let joined;\x0d\n    let firstPart;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = firstPart = arg;\x0d\n        else\x0d\n          joined += `\\\\${arg}`;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n\x0d\n    // Make sure that the joined path doesn't start with two slashes\x2C because\x0d\n    // normalize() will mistake it for a UNC path then.\x0d\n    //\x0d\n    // This step is skipped when it is very clear that the user actually\x0d\n    // intended to point at a UNC path. This is assumed when the first\x0d\n    // non-empty string arguments starts with exactly two slashes followed by\x0d\n    // at least one more non-slash character.\x0d\n    //\x0d\n    // Note that for normalize() to treat a path as a UNC path it needs to\x0d\n    // have at least 2 components\x2C so we don't filter for that here.\x0d\n    // This means that the user can use join to construct UNC paths from\x0d\n    // a server name and a share name; for example:\x0d\n    //   path.join('//server'\x2C 'share') -> '\\\\\\\\server\\\\share\\\\')\x0d\n    let needsReplace = true;\x0d\n    let slashCount = 0;\x0d\n    if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 0))) {\x0d\n      ++slashCount;\x0d\n      const firstLen = firstPart.length;\x0d\n      if (firstLen > 1 &&\x0d\n          isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 1))) {\x0d\n        ++slashCount;\x0d\n        if (firstLen > 2) {\x0d\n          if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 2)))\x0d\n            ++slashCount;\x0d\n          else {\x0d\n            // We matched a UNC path in the first part\x0d\n            needsReplace = false;\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    if (needsReplace) {\x0d\n      // Find any more consecutive slashes we need to replace\x0d\n      while (slashCount < joined.length &&\x0d\n             isPathSeparator(StringPrototypeCharCodeAt(joined\x2C slashCount))) {\x0d\n        slashCount++;\x0d\n      }\x0d\n\x0d\n      // Replace the slashes if needed\x0d\n      if (slashCount >= 2)\x0d\n        joined = `\\\\${StringPrototypeSlice(joined\x2C slashCount)}`;\x0d\n    }\x0d\n\x0d\n    return win32.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * It will solve the relative path from `from` to `to`\x2C for instance\x0d\n   * from = 'C:\\\\orandea\\\\test\\\\aaa'\x0d\n   * to = 'C:\\\\orandea\\\\impl\\\\bbb'\x0d\n   * The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromOrig = win32.resolve(from);\x0d\n    const toOrig = win32.resolve(to);\x0d\n\x0d\n    if (fromOrig === toOrig)\x0d\n      return '';\x0d\n\x0d\n    from = StringPrototypeToLowerCase(fromOrig);\x0d\n    to = StringPrototypeToLowerCase(toOrig);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let fromStart = 0;\x0d\n    while (fromStart < from.length &&\x0d\n           StringPrototypeCharCodeAt(from\x2C fromStart) === CHAR_BACKWARD_SLASH) {\x0d\n      fromStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let fromEnd = from.length;\x0d\n    while (\x0d\n      fromEnd - 1 > fromStart &&\x0d\n      StringPrototypeCharCodeAt(from\x2C fromEnd - 1) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      fromEnd--;\x0d\n    }\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let toStart = 0;\x0d\n    while (toStart < to.length &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toStart) === CHAR_BACKWARD_SLASH) {\x0d\n      toStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let toEnd = to.length;\x0d\n    while (toEnd - 1 > toStart &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toEnd - 1) === CHAR_BACKWARD_SLASH) {\x0d\n      toEnd--;\x0d\n    }\x0d\n    const toLen = toEnd - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = fromLen < toLen ? fromLen : toLen;\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_BACKWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n\x0d\n    // We found a mismatch before the first common path separator was seen\x2C so\x0d\n    // return the original `to`.\x0d\n    if (i !== length) {\x0d\n      if (lastCommonSep === -1)\x0d\n        return toOrig;\x0d\n    } else {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 2) {\x0d\n          // We get here if `from` is the device root.\x0d\n          // For example: from='C:\\\\'; to='C:\\\\foo'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i);\x0d\n        }\x0d\n      }\x0d\n      if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 2) {\x0d\n          // We get here if `to` is the device root.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\x0d\n          lastCommonSep = 3;\x0d\n        }\x0d\n      }\x0d\n      if (lastCommonSep === -1)\x0d\n        lastCommonSep = 0;\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to` and\x0d\n    // `from`\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_BACKWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '\\\\..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    toStart += lastCommonSep;\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts\x0d\n    if (out.length > 0)\x0d\n      return `${out}${StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd)}`;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(toOrig\x2C toStart) === CHAR_BACKWARD_SLASH)\x0d\n      ++toStart;\x0d\n    return StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Note: this will *probably* throw somewhere.\x0d\n    if (typeof path !== 'string' || path.length === 0)\x0d\n      return path;\x0d\n\x0d\n    const resolvedPath = win32.resolve(path);\x0d\n\x0d\n    if (resolvedPath.length <= 2)\x0d\n      return path;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(resolvedPath\x2C 0) === CHAR_BACKWARD_SLASH) {\x0d\n      // Possible UNC root\x0d\n      if (StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_BACKWARD_SLASH) {\x0d\n        const code = StringPrototypeCharCodeAt(resolvedPath\x2C 2);\x0d\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\x0d\n          // Matched non-long UNC root\x2C convert the path to a long UNC path\x0d\n          return `\\\\\\\\?\\\\UNC\\\\${StringPrototypeSlice(resolvedPath\x2C 2)}`;\x0d\n        }\x0d\n      }\x0d\n    } else if (\x0d\n      isWindowsDeviceRoot(StringPrototypeCharCodeAt(resolvedPath\x2C 0)) &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_COLON &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 2) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      // Matched device root\x2C convert the path to a long UNC path\x0d\n      return `\\\\\\\\?\\\\${resolvedPath}`;\x0d\n    }\x0d\n\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = -1;\x0d\n    let offset = 0;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a path separator\x2C exit early to avoid\x0d\n      // unnecessary work or a dot.\x0d\n      return isPathSeparator(code) ? path : '.';\x0d\n    }\x0d\n\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = offset = 1;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              return path;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n\x0d\n              // Offset by 1 to include the separator after the UNC root to\x0d\n              // treat it as a "normal root" on top of a (UNC) root\x0d\n              rootEnd = offset = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    // Possible device root\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      rootEnd =\x0d\n        len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)) ? 3 : 2;\x0d\n      offset = rootEnd;\x0d\n    }\x0d\n\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = len - 1; i >= offset; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1) {\x0d\n      if (rootEnd === -1)\x0d\n        return '.';\x0d\n\x0d\n      end = rootEnd;\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [ext]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C ext) {\x0d\n    if (ext !== undefined)\x0d\n      validateString(ext\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n    if (path.length >= 2 &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0)) &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      start = 2;\x0d\n    }\x0d\n\x0d\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\x0d\n      if (ext === path)\x0d\n        return '';\x0d\n      let extIdx = ext.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= start; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (isPathSeparator(code)) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(ext\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n\x0d\n    if (path.length >= 2 &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0))) {\x0d\n      start = startPart = 2;\x0d\n    }\x0d\n\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '\\\\')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *  dir: string;\x0d\n   *  root: string;\x0d\n   *  base: string;\x0d\n   *  name: string;\x0d\n   *  ext: string;\x0d\n   *  }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n\x0d\n    const len = path.length;\x0d\n    let rootEnd = 0;\x0d\n    let code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      if (isPathSeparator(code)) {\x0d\n        // `path` contains just a path separator\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      ret.base = ret.name = path;\x0d\n      return ret;\x0d\n    }\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = 1;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              rootEnd = j;\x0d\n            } else if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              rootEnd = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      if (len <= 2) {\x0d\n        // `path` contains just a drive root\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      rootEnd = 2;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        if (len === 3) {\x0d\n          // `path` contains just a drive root\x2C exit early to avoid\x0d\n          // unnecessary work\x0d\n          ret.root = ret.dir = path;\x0d\n          return ret;\x0d\n        }\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n    if (rootEnd > 0)\x0d\n      ret.root = StringPrototypeSlice(path\x2C 0\x2C rootEnd);\x0d\n\x0d\n    let startDot = -1;\x0d\n    let startPart = rootEnd;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= rootEnd; --i) {\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n           startDot === end - 1 &&\x0d\n           startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C startPart\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // If the directory is the root\x2C use the entire root as the `dir` including\x0d\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise\x2C strip out the\x0d\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\x0d\n    if (startPart > 0 && startPart !== rootEnd)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else\x0d\n      ret.dir = ret.root;\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '\\\\'\x2C\x0d\n  delimiter: ';'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nconst posixCwd = (() => {\x0d\n  if (platformIsWin32) {\x0d\n    // Converts Windows' backslash path separators to POSIX forward slashes\x0d\n    // and truncates any drive indicator\x0d\n    const regexp = /\\\\/g;\x0d\n    return () => {\x0d\n      const cwd = StringPrototypeReplace(process.cwd()\x2C regexp\x2C '/');\x0d\n      return StringPrototypeSlice(cwd\x2C StringPrototypeIndexOf(cwd\x2C '/'));\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // We're already on POSIX\x2C no need for any transformations\x0d\n  return () => process.cwd();\x0d\n})();\x0d\n\x0d\nconst posix = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedPath = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\x0d\n      const path = i >= 0 ? args[i] : posixCwd();\x0d\n\x0d\n      validateString(path\x2C 'path');\x0d\n\x0d\n      // Skip empty entries\x0d\n      if (path.length === 0) {\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      resolvedPath = `${path}/${resolvedPath}`;\x0d\n      resolvedAbsolute =\x0d\n        StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C but\x0d\n    // handle relative paths to be safe (might happen when process.cwd() fails)\x0d\n\x0d\n    // Normalize the path\x0d\n    resolvedPath = normalizeString(resolvedPath\x2C !resolvedAbsolute\x2C '/'\x2C\x0d\n                                   isPosixPathSeparator);\x0d\n\x0d\n    if (resolvedAbsolute) {\x0d\n      return `/${resolvedPath}`;\x0d\n    }\x0d\n    return resolvedPath.length > 0 ? resolvedPath : '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    const trailingSeparator =\x0d\n      StringPrototypeCharCodeAt(path\x2C path.length - 1) === CHAR_FORWARD_SLASH;\x0d\n\x0d\n    // Normalize the path\x0d\n    path = normalizeString(path\x2C !isAbsolute\x2C '/'\x2C isPosixPathSeparator);\x0d\n\x0d\n    if (path.length === 0) {\x0d\n      if (isAbsolute)\x0d\n        return '/';\x0d\n      return trailingSeparator ? './' : '.';\x0d\n    }\x0d\n    if (trailingSeparator)\x0d\n      path += '/';\x0d\n\x0d\n    return isAbsolute ? `/${path}` : path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    return path.length > 0 &&\x0d\n           StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n    let joined;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = arg;\x0d\n        else\x0d\n          joined += `/${arg}`;\x0d\n      }\x0d\n    }\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n    return posix.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim leading forward slashes.\x0d\n    from = posix.resolve(from);\x0d\n    to = posix.resolve(to);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromStart = 1;\x0d\n    const fromEnd = from.length;\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n    const toStart = 1;\x0d\n    const toLen = to.length - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = (fromLen < toLen ? fromLen : toLen);\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_FORWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n    if (i === length) {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) === CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 0) {\x0d\n          // We get here if `from` is the root\x0d\n          // For example: from='/'; to='/foo'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i);\x0d\n        }\x0d\n      } else if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 0) {\x0d\n          // We get here if `to` is the root.\x0d\n          // For example: from='/foo/bar'; to='/'\x0d\n          lastCommonSep = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to`\x0d\n    // and `from`.\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '/..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts.\x0d\n    return `${out}${StringPrototypeSlice(to\x2C toStart + lastCommonSep)}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Non-op on posix systems\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n    const hasRoot = StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = path.length - 1; i >= 1; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return hasRoot ? '/' : '.';\x0d\n    if (hasRoot && end === 1)\x0d\n      return '//';\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [ext]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C ext) {\x0d\n    if (ext !== undefined)\x0d\n      validateString(ext\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\x0d\n      if (ext === path)\x0d\n        return '';\x0d\n      let extIdx = ext.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= 0; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (code === CHAR_FORWARD_SLASH) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(ext\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '/')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *   dir: string;\x0d\n   *   root: string;\x0d\n   *   base: string;\x0d\n   *   name: string;\x0d\n   *   ext: string;\x0d\n   *   }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let start;\x0d\n    if (isAbsolute) {\x0d\n      ret.root = '/';\x0d\n      start = 1;\x0d\n    } else {\x0d\n      start = 0;\x0d\n    }\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n          startDot === end - 1 &&\x0d\n          startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C start\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startPart > 0)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else if (isAbsolute)\x0d\n      ret.dir = '/';\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '/'\x2C\x0d\n  delimiter: ':'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nposix.win32 = win32.win32 = win32;\x0d\nposix.posix = win32.posix = posix;\x0d\n\x0d\n// Legacy internal API\x2C docs-only deprecated: DEP0080\x0d\nwin32._makeLong = win32.toNamespacedPath;\x0d\nposix._makeLong = posix.toNamespacedPath;\x0d\n\x0d\nmodule.exports = platformIsWin32 ? win32 : posix;\x0d\n
code-source-info,0x2c63eb0b
tick,0x7ff7c11dbe7a,135836,0,0x0,3,0x7ff7c08240c0,0x2c63eb0a180,0x2c63eb0648b,0x2c63eb02065
code-creation,LazyCompile,10,135851,0x2c63eb0ed7e,30,validateString node:internal/validators:118:24,0xa8296bce70,~
script-source,15,node:internal/validators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  NumberParseInt\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_SOCKET_BAD_PORT\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x2C\x0d\n    ERR_INVALID_CALLBACK\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { normalizeEncoding } = require('internal/util');\x0d\nconst {\x0d\n  isAsyncFunction\x2C\x0d\n  isArrayBufferView\x0d\n} = require('internal/util/types');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\nfunction isInt32(value) {\x0d\n  return value === (value | 0);\x0d\n}\x0d\n\x0d\nfunction isUint32(value) {\x0d\n  return value === (value >>> 0);\x0d\n}\x0d\n\x0d\nconst octalReg = /^[0-7]+$/;\x0d\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\x0d\n\x0d\n/**\x0d\n * Parse and validate values that will be converted into mode_t (the S_*\x0d\n * constants). Only valid numbers and octal strings are allowed. They could be\x0d\n * converted to 32-bit unsigned integers or non-negative signed integers in the\x0d\n * C++ land\x2C but any value higher than 0o777 will result in platform-specific\x0d\n * behaviors.\x0d\n *\x0d\n * @param {*} value Values to be validated\x0d\n * @param {string} name Name of the argument\x0d\n * @param {number} [def] If specified\x2C will be returned for invalid values\x0d\n * @returns {number}\x0d\n */\x0d\nfunction parseFileMode(value\x2C name\x2C def) {\x0d\n  value ??= def;\x0d\n  if (typeof value === 'string') {\x0d\n    if (!RegExpPrototypeTest(octalReg\x2C value)) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C modeDesc);\x0d\n    }\x0d\n    value = NumberParseInt(value\x2C 8);\x0d\n  }\x0d\n\x0d\n  validateInt32(value\x2C name\x2C 0\x2C 2 ** 32 - 1);\x0d\n  return value;\x0d\n}\x0d\n\x0d\nconst validateInteger = hideStackFrames(\x0d\n  (value\x2C name\x2C min = NumberMIN_SAFE_INTEGER\x2C max = NumberMAX_SAFE_INTEGER) => {\x0d\n    if (typeof value !== 'number')\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    if (!NumberIsInteger(value))\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    if (value < min || value > max)\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateInt32 = hideStackFrames(\x0d\n  (value\x2C name\x2C min = -2147483648\x2C max = 2147483647) => {\x0d\n    // The defaults for min and max correspond to the limits of 32-bit integers.\x0d\n    if (!isInt32(value)) {\x0d\n      if (typeof value !== 'number') {\x0d\n        throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n      }\x0d\n      if (!NumberIsInteger(value)) {\x0d\n        throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n      }\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n    }\x0d\n    if (value < min || value > max) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateUint32 = hideStackFrames((value\x2C name\x2C positive) => {\x0d\n  if (!isUint32(value)) {\x0d\n    if (typeof value !== 'number') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    }\x0d\n    if (!NumberIsInteger(value)) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    }\x0d\n    const min = positive ? 1 : 0;\x0d\n    // 2 ** 32 === 4294967296\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && < 4294967296`\x2C value);\x0d\n  }\x0d\n  if (positive && value === 0) {\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C '>= 1 && < 4294967296'\x2C value);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateString(value\x2C name) {\x0d\n  if (typeof value !== 'string')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'string'\x2C value);\x0d\n}\x0d\n\x0d\nfunction validateNumber(value\x2C name) {\x0d\n  if (typeof value !== 'number')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n}\x0d\n\x0d\nconst validateOneOf = hideStackFrames((value\x2C name\x2C oneOf) => {\x0d\n  if (!ArrayPrototypeIncludes(oneOf\x2C value)) {\x0d\n    const allowed = ArrayPrototypeJoin(\x0d\n      ArrayPrototypeMap(oneOf\x2C (v) =>\x0d\n        (typeof v === 'string' ? `'${v}'` : String(v)))\x2C\x0d\n      '\x2C ');\x0d\n    const reason = 'must be one of: ' + allowed;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateBoolean(value\x2C name) {\x0d\n  if (typeof value !== 'boolean')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'boolean'\x2C value);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {unknown} value\x0d\n * @param {string} name\x0d\n * @param {{\x0d\n *   allowArray?: boolean\x2C\x0d\n *   allowFunction?: boolean\x2C\x0d\n *   nullable?: boolean\x0d\n * }} [options]\x0d\n */\x0d\nconst validateObject = hideStackFrames(\x0d\n  (value\x2C name\x2C options) => {\x0d\n    const useDefaultOptions = options == null;\x0d\n    const allowArray = useDefaultOptions ? false : options.allowArray;\x0d\n    const allowFunction = useDefaultOptions ? false : options.allowFunction;\x0d\n    const nullable = useDefaultOptions ? false : options.nullable;\x0d\n    if ((!nullable && value === null) ||\x0d\n        (!allowArray && ArrayIsArray(value)) ||\x0d\n        (typeof value !== 'object' && (\x0d\n          !allowFunction || typeof value !== 'function'\x0d\n        ))) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'Object'\x2C value);\x0d\n    }\x0d\n  });\x0d\n\x0d\nconst validateArray = hideStackFrames((value\x2C name\x2C minLength = 0) => {\x0d\n  if (!ArrayIsArray(value)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Array'\x2C value);\x0d\n  }\x0d\n  if (value.length < minLength) {\x0d\n    const reason = `must be longer than ${minLength}`;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateSignalName(signal\x2C name = 'signal') {\x0d\n  validateString(signal\x2C name);\x0d\n\x0d\n  if (signals[signal] === undefined) {\x0d\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\x0d\n      throw new ERR_UNKNOWN_SIGNAL(signal +\x0d\n                                   ' (signals must use all capital letters)');\x0d\n    }\x0d\n\x0d\n    throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateBuffer = hideStackFrames((buffer\x2C name = 'buffer') => {\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C\x0d\n                                   ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateEncoding(data\x2C encoding) {\x0d\n  const normalizedEncoding = normalizeEncoding(encoding);\x0d\n  const length = data.length;\x0d\n\x0d\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('encoding'\x2C encoding\x2C\x0d\n                                    `is invalid for data of length ${length}`);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Check that the port number is not NaN when coerced to a number\x2C\x0d\n// is an integer and that it falls within the legal range of port numbers.\x0d\nfunction validatePort(port\x2C name = 'Port'\x2C allowZero = true) {\x0d\n  if ((typeof port !== 'number' && typeof port !== 'string') ||\x0d\n      (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\x0d\n      +port !== (+port >>> 0) ||\x0d\n      port > 0xFFFF ||\x0d\n      (port === 0 && !allowZero)) {\x0d\n    throw new ERR_SOCKET_BAD_PORT(name\x2C port\x2C allowZero);\x0d\n  }\x0d\n  return port | 0;\x0d\n}\x0d\n\x0d\nconst validateCallback = hideStackFrames((callback) => {\x0d\n  if (typeof callback !== 'function')\x0d\n    throw new ERR_INVALID_CALLBACK(callback);\x0d\n});\x0d\n\x0d\nconst validateAbortSignal = hideStackFrames((signal\x2C name) => {\x0d\n  if (signal !== undefined &&\x0d\n      (signal === null ||\x0d\n       typeof signal !== 'object' ||\x0d\n       !('aborted' in signal))) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'AbortSignal'\x2C signal);\x0d\n  }\x0d\n});\x0d\n\x0d\nconst validateFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\nconst validatePlainFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function' || isAsyncFunction(value))\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\nconst validateUndefined = hideStackFrames((value\x2C name) => {\x0d\n  if (value !== undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'undefined'\x2C value);\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  isInt32\x2C\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validatePlainFunction\x2C\x0d\n  validatePort\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n  validateUndefined\x2C\x0d\n  validateCallback\x2C\x0d\n  validateAbortSignal\x2C\x0d\n};\x0d\n
code-source-info,0x2c63eb0ed7e,15,3534,3646,C0O3553C6O3589C22O3595C27O3589C29O3645,,
code-creation,LazyCompile,10,136223,0x2c63eb0f71e,17,isPathSeparator node:path:52:25,0x375c9f4cf90,~
code-source-info,0x2c63eb0f71e,41,1794,1876,C0O1806C2O1822C4O1818C11O1853C13O1849C16O1873,,
code-creation,LazyCompile,10,136258,0x2c63eb0f81e,35,isWindowsDeviceRoot node:path:60:29,0x375c9f4d408,~
code-source-info,0x2c63eb0f81e,41,1991,2136,C0O2003C2O2019C4O2016C11O2047C13O2044C20O2087C22O2084C29O2115C31O2112C34O2133,,
code-creation,LazyCompile,10,136306,0x2c63eb0f93e,40,wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20,0xa8296beee8,~
script-source,94,node:internal/bootstrap/switches/does_own_process_state,'use strict';\x0d\n\x0d\nconst credentials = internalBinding('credentials');\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\n\x0d\nprocess.abort = rawMethods.abort;\x0d\nprocess.umask = wrappedUmask;\x0d\nprocess.chdir = wrappedChdir;\x0d\nprocess.cwd = wrappedCwd;\x0d\n\x0d\nif (credentials.implementsPosixCredentials) {\x0d\n  const wrapped = wrapPosixCredentialSetters(credentials);\x0d\n\x0d\n  process.initgroups = wrapped.initgroups;\x0d\n  process.setgroups = wrapped.setgroups;\x0d\n  process.setegid = wrapped.setegid;\x0d\n  process.seteuid = wrapped.seteuid;\x0d\n  process.setgid = wrapped.setgid;\x0d\n  process.setuid = wrapped.setuid;\x0d\n}\x0d\n\x0d\n// ---- keep the attachment of the wrappers above so that it's easier to ----\x0d\n// ----              compare the setups side-by-side                    -----\x0d\n\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n\x0d\nfunction wrapPosixCredentialSetters(credentials) {\x0d\n  const {\x0d\n    codes: {\x0d\n      ERR_INVALID_ARG_TYPE\x2C\x0d\n      ERR_UNKNOWN_CREDENTIAL\x0d\n    }\x0d\n  } = require('internal/errors');\x0d\n  const {\x0d\n    validateUint32\x0d\n  } = require('internal/validators');\x0d\n\x0d\n  const {\x0d\n    initgroups: _initgroups\x2C\x0d\n    setgroups: _setgroups\x2C\x0d\n    setegid: _setegid\x2C\x0d\n    seteuid: _seteuid\x2C\x0d\n    setgid: _setgid\x2C\x0d\n    setuid: _setuid\x0d\n  } = credentials;\x0d\n\x0d\n  function initgroups(user\x2C extraGroup) {\x0d\n    validateId(user\x2C 'user');\x0d\n    validateId(extraGroup\x2C 'extraGroup');\x0d\n    // Result is 0 on success\x2C 1 if user is unknown\x2C 2 if group is unknown.\x0d\n    const result = _initgroups(user\x2C extraGroup);\x0d\n    if (result === 1) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('User'\x2C user);\x0d\n    } else if (result === 2) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C extraGroup);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function setgroups(groups) {\x0d\n    validateArray(groups\x2C 'groups');\x0d\n    for (let i = 0; i < groups.length; i++) {\x0d\n      validateId(groups[i]\x2C `groups[${i}]`);\x0d\n    }\x0d\n    // Result is 0 on success. A positive integer indicates that the\x0d\n    // corresponding group was not found.\x0d\n    const result = _setgroups(groups);\x0d\n    if (result > 0) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C groups[result - 1]);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function wrapIdSetter(type\x2C method) {\x0d\n    return function(id) {\x0d\n      validateId(id\x2C 'id');\x0d\n      if (typeof id === 'number') id |= 0;\x0d\n      // Result is 0 on success\x2C 1 if credential is unknown.\x0d\n      const result = method(id);\x0d\n      if (result === 1) {\x0d\n        throw new ERR_UNKNOWN_CREDENTIAL(type\x2C id);\x0d\n      }\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function validateId(id\x2C name) {\x0d\n    if (typeof id === 'number') {\x0d\n      validateUint32(id\x2C name);\x0d\n    } else if (typeof id !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C ['number'\x2C 'string']\x2C id);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    initgroups\x2C\x0d\n    setgroups\x2C\x0d\n    setegid: wrapIdSetter('Group'\x2C _setegid)\x2C\x0d\n    seteuid: wrapIdSetter('User'\x2C _seteuid)\x2C\x0d\n    setgid: wrapIdSetter('Group'\x2C _setgid)\x2C\x0d\n    setuid: wrapIdSetter('User'\x2C _setuid)\x0d\n  };\x0d\n}\x0d\n\x0d\n// Cache the working directory to prevent lots of lookups. If the working\x0d\n// directory is changed by `chdir`\x2C it'll be updated.\x0d\nlet cachedCwd = '';\x0d\n\x0d\nfunction wrappedChdir(directory) {\x0d\n  validateString(directory\x2C 'directory');\x0d\n  rawMethods.chdir(directory);\x0d\n  // Mark cache that it requires an update.\x0d\n  cachedCwd = '';\x0d\n}\x0d\n\x0d\nfunction wrappedUmask(mask) {\x0d\n  if (mask !== undefined) {\x0d\n    mask = parseFileMode(mask\x2C 'mask');\x0d\n  }\x0d\n  return rawMethods.umask(mask);\x0d\n}\x0d\n\x0d\nfunction wrappedCwd() {\x0d\n  if (cachedCwd === '')\x0d\n    cachedCwd = rawMethods.cwd();\x0d\n  return cachedCwd;\x0d\n}\x0d\n
code-source-info,0x2c63eb0f93e,94,3464,3552,C0O3472C7O3486C12O3499C17O3522C22O3522C29O3509C35O3532C39O3549,,
code-creation,LazyCompile,10,136568,0x2c63eb0ffa6,442,normalizeString node:path:66:25,0x375c9f4d458,~
code-source-info,0x2c63eb0ffa
code-creation,LazyCompile,10,136717,0x2c63eb106c6,63,addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:130:33,0x2c63eb04050,~
code-source-info,0x2c63eb106c6,96,4358,4593,C16O4411C21O4411C26O4438C28O4456C36O4486C43O4552C49O4571C56O4456C62O4592,,
code-creation,LazyCompile,10,136768,0x2c63eb10866,82,getOptionValue node:internal/options:39:24,0x379432fdb40,~
script-source,91,node:internal/options,'use strict';\x0d\n\x0d\nconst {\x0d\n  getCLIOptions\x2C\x0d\n  getEmbedderOptions: getEmbedderOptionsFromBinding\x2C\x0d\n} = internalBinding('options');\x0d\n\x0d\nlet warnOnAllowUnauthorized = true;\x0d\n\x0d\nlet optionsMap;\x0d\nlet aliasesMap;\x0d\nlet embedderOptions;\x0d\n\x0d\n// getCLIOptions() would serialize the option values from C++ land.\x0d\n// It would error if the values are queried before bootstrap is\x0d\n// complete so that we don't accidentally include runtime-dependent\x0d\n// states into a runtime-independent snapshot.\x0d\nfunction getCLIOptionsFromBinding() {\x0d\n  if (!optionsMap) {\x0d\n    ({ options: optionsMap } = getCLIOptions());\x0d\n  }\x0d\n  return optionsMap;\x0d\n}\x0d\n\x0d\nfunction getAliasesFromBinding() {\x0d\n  if (!aliasesMap) {\x0d\n    ({ aliases: aliasesMap } = getCLIOptions());\x0d\n  }\x0d\n  return aliasesMap;\x0d\n}\x0d\n\x0d\nfunction getEmbedderOptions() {\x0d\n  if (!embedderOptions) {\x0d\n    embedderOptions = getEmbedderOptionsFromBinding();\x0d\n  }\x0d\n  return embedderOptions;\x0d\n}\x0d\n\x0d\nfunction getOptionValue(optionName) {\x0d\n  const options = getCLIOptionsFromBinding();\x0d\n  if (optionName.startsWith('--no-')) {\x0d\n    const option = options.get('--' + optionName.slice(5));\x0d\n    return option && !option.value;\x0d\n  }\x0d\n  return options.get(optionName)?.value;\x0d\n}\x0d\n\x0d\nfunction getAllowUnauthorized() {\x0d\n  const allowUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0';\x0d\n\x0d\n  if (allowUnauthorized && warnOnAllowUnauthorized) {\x0d\n    warnOnAllowUnauthorized = false;\x0d\n    process.emitWarning(\x0d\n      'Setting the NODE_TLS_REJECT_UNAUTHORIZED ' +\x0d\n      'environment variable to \\'0\\' makes TLS connections ' +\x0d\n      'and HTTPS requests insecure by disabling ' +\x0d\n      'certificate verification.');\x0d\n  }\x0d\n  return allowUnauthorized;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  get options() {\x0d\n    return getCLIOptionsFromBinding();\x0d\n  }\x2C\x0d\n  get aliases() {\x0d\n    return getAliasesFromBinding();\x0d\n  }\x2C\x0d\n  getOptionValue\x2C\x0d\n  getAllowUnauthorized\x2C\x0d\n  getEmbedderOptions\x0d\n};\x0d\n
code-source-info,0x2c63eb10866,91,940,1190,C0O974C3O974C7O1020C15O1020C22O1071C30O1093C38O1093C43O1080C47O1071C53O1109C55O1134C60O1140C61O1164C66O1164C74O1179C81O1187,,
code-creation,LazyCompile,10,136888,0x2c63eb10c16,33,getCLIOptionsFromBinding node:internal/options:18:34,0x379432fd848,~
code-source-info,0x2c63eb10c16,91,514,620,C0O522C6O546C11O573C15O558C28O599C32O617,,
code-creation,LazyCompile,10,137133,0x2c63eb10d96,46,setupTraceCategoryState node:internal/bootstrap/pre_execution:277:33,0x2c63eb043c0,~
code-source-info,0x2c63eb10d96,96,8711,8942,C0O8754C6O8754C11O8727C16O8827C22O8827C27O8798C32O8870C35O8895C40O8870C45O8941,,
code-creation,LazyCompile,10,137184,0x2c63eb10f2e,77,toggleTraceCategoryState node:internal/process/per_thread:390:34,0x273fd318cb8,~
code-source-info,0x2c63eb10f2e,30,11548,11855,C0O11573C4O11603C10O11639C16O11671C21O11715C26O11716C33O11660C39O11742C44O11763C49O11763C55O11783C61O11816C66O11837C71O11837C76O11854,,
code-creation,LazyCompile,10,137225,0x2c63eb110de,42,setupPerfHooks node:internal/bootstrap/pre_execution:283:24,0x2c63eb04410,~
code-source-info,0x2c63eb110de,96,8969,9092,C0O8977C6O8977C11O9013C16O9014C20O9038C26O9038C31O9068C36O9069C41O9091,,
code-creation,LazyCompile,10,137316,0x2c63eb1125e,42,refreshTimeOrigin node:internal/perf/performance:181:27,0x107416ab218,~
script-source,73,node:internal/perf/performance,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ILLEGAL_CONSTRUCTOR\x2C\x0d\n    ERR_MISSING_ARGS\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  EventTarget\x2C\x0d\n} = require('internal/event_target');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\nconst {\x0d\n  mark\x2C\x0d\n  measure\x2C\x0d\n  clearMarkTimings\x2C\x0d\n} = require('internal/perf/usertiming');\x0d\nconst {\x0d\n  clearEntriesFromBuffer\x2C\x0d\n  filterBufferMapByNameAndType\x2C\x0d\n} = require('internal/perf/observe');\x0d\n\x0d\nconst eventLoopUtilization = require('internal/perf/event_loop_utilization');\x0d\nconst nodeTiming = require('internal/perf/nodetiming');\x0d\nconst timerify = require('internal/perf/timerify');\x0d\nconst { customInspectSymbol: kInspect } = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst {\x0d\n  getTimeOriginTimestamp\x0d\n} = internalBinding('performance');\x0d\n\x0d\nclass Performance extends EventTarget {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0) return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `Performance ${inspect({\x0d\n      nodeTiming: this.nodeTiming\x2C\x0d\n      timeOrigin: this.timeOrigin\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction toJSON() {\x0d\n  return {\x0d\n    nodeTiming: this.nodeTiming\x2C\x0d\n    timeOrigin: this.timeOrigin\x2C\x0d\n    eventLoopUtilization: this.eventLoopUtilization()\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction clearMarks(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearMarkTimings(name);\x0d\n  clearEntriesFromBuffer('mark'\x2C name);\x0d\n}\x0d\n\x0d\nfunction clearMeasures(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearEntriesFromBuffer('measure'\x2C name);\x0d\n}\x0d\n\x0d\nfunction getEntries() {\x0d\n  return filterBufferMapByNameAndType();\x0d\n}\x0d\n\x0d\nfunction getEntriesByName(name) {\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('name');\x0d\n  }\x0d\n  name = `${name}`;\x0d\n  return filterBufferMapByNameAndType(name\x2C undefined);\x0d\n}\x0d\n\x0d\nfunction getEntriesByType(type) {\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('type');\x0d\n  }\x0d\n  type = `${type}`;\x0d\n  return filterBufferMapByNameAndType(undefined\x2C type);\x0d\n}\x0d\n\x0d\nclass InternalPerformance extends EventTarget {}\x0d\nInternalPerformance.prototype.constructor = Performance.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalPerformance.prototype\x2C Performance.prototype);\x0d\n\x0d\nObjectDefineProperties(Performance.prototype\x2C {\x0d\n  clearMarks: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMarks\x2C\x0d\n  }\x2C\x0d\n  clearMeasures: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMeasures\x2C\x0d\n  }\x2C\x0d\n  eventLoopUtilization: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: eventLoopUtilization\x2C\x0d\n  }\x2C\x0d\n  getEntries: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntries\x2C\x0d\n  }\x2C\x0d\n  getEntriesByName: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByName\x2C\x0d\n  }\x2C\x0d\n  getEntriesByType: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByType\x2C\x0d\n  }\x2C\x0d\n  mark: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: mark\x2C\x0d\n  }\x2C\x0d\n  measure: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: measure\x2C\x0d\n  }\x2C\x0d\n  nodeTiming: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: nodeTiming\x2C\x0d\n  }\x2C\x0d\n  now: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: now\x2C\x0d\n  }\x2C\x0d\n  timerify: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: timerify\x2C\x0d\n  }\x2C\x0d\n  // This would be updated during pre-execution in case\x0d\n  // the process is launched from a snapshot.\x0d\n  // TODO(joyeecheung): we may want to warn about access to\x0d\n  // this during snapshot building.\x0d\n  timeOrigin: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  }\x2C\x0d\n  toJSON: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: toJSON\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  ObjectDefineProperty(Performance.prototype\x2C 'timeOrigin'\x2C {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  InternalPerformance\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2c63eb1125e,73,4040,4203,C0O4048C7O4069C10O4081C25O4168C28O4168C35O4048C41O4202,,
tick,0x7ff7c0a0df2d,137547,0,0x0,3,0x7ff7c08240c0,0x2c63eb110ee,0x2c63eb06498,0x2c63eb02065
code-creation,LazyCompile,10,137563,0x2c63eb11986,19,refreshTimeOrigin node:internal/perf/utils:25:27,0x375c9f62118,~
script-source,46,node:internal/perf/utils,'use strict';\x0d\n\x0d\nconst binding = internalBinding('performance');\x0d\nconst {\x0d\n  milestones\x2C\x0d\n  getTimeOrigin\x2C\x0d\n} = binding;\x0d\n\x0d\n// TODO(joyeecheung): we may want to warn about access to\x0d\n// this during snapshot building.\x0d\nlet timeOrigin = getTimeOrigin();\x0d\n\x0d\nfunction now() {\x0d\n  const hr = process.hrtime();\x0d\n  return (hr[0] * 1000 + hr[1] / 1e6) - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction getMilestoneTimestamp(milestoneIdx) {\x0d\n  const ns = milestones[milestoneIdx];\x0d\n  if (ns === -1)\x0d\n    return ns;\x0d\n  return ns / 1e6 - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  timeOrigin = getTimeOrigin();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  now\x2C\x0d\n  getMilestoneTimestamp\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2c63eb11986,46,549,589,C0O557C5O570C11O568C18O588,,
code-creation,LazyCompile,10,137637,0x2c63eb11bf6,62,setupInspectorHooks node:internal/bootstrap/pre_execution:288:29,0x2c63eb04460,~
code-source-info,0x2c63eb11bf6,96,9124,9690,C0O9473C6O9477C11O9502C17O9571C23O9571C28O9539C33O9554C38O9618C44O9618C49O9646C54O9647C61O9689,,
code-creation,Eval,10,137731,0x2c63eb11fa6,5, node:internal/inspector_async_hook:1:1,0x2c63eb11df0,~
script-source,97,node:internal/inspector_async_hook,'use strict';\x0d\n\x0d\nlet hook;\x0d\nlet config;\x0d\n\x0d\nconst {\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction lazyHookCreation() {\x0d\n  const inspector = internalBinding('inspector');\x0d\n  const { createHook } = require('async_hooks');\x0d\n  config = internalBinding('config');\x0d\n\x0d\n  hook = createHook({\x0d\n    init(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n    // It's difficult to tell which tasks will be recurring and which won't\x2C\x0d\n    // therefore we mark all tasks as recurring. Based on the discussion\x0d\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293\x2C\x0d\n    // this should be fine as long as we call asyncTaskCanceled() too.\x0d\n      const recurring = true;\x0d\n      if (type === 'PROMISE')\x0d\n        this.promiseIds.add(asyncId);\x0d\n      else\x0d\n        inspector.asyncTaskScheduled(type\x2C asyncId\x2C recurring);\x0d\n    }\x2C\x0d\n\x0d\n    before(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskStarted(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    after(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskFinished(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    destroy(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return this.promiseIds.delete(asyncId);\x0d\n      inspector.asyncTaskCanceled(asyncId);\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  hook.promiseIds = new SafeSet();\x0d\n}\x0d\n\x0d\nfunction enable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  if (config.bits < 64) {\x0d\n    // V8 Inspector stores task ids as (void*) pointers.\x0d\n    // async_hooks store ids as 64bit numbers.\x0d\n    // As a result\x2C we cannot reliably translate async_hook ids to V8 async_task\x0d\n    // ids on 32bit platforms.\x0d\n    process.emitWarning(\x0d\n      'Warning: Async stack traces in debugger are not available ' +\x0d\n      `on ${config.bits}bit platforms. The feature is disabled.`\x2C\x0d\n      {\x0d\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE'\x2C\x0d\n      });\x0d\n  } else {\x0d\n    hook.enable();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction disable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  hook.disable();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  enable\x2C\x0d\n  disable\x0d\n};\x0d\n
code-source-info,0x2c63eb11fa6,97,0,2048,C0O0C4O2048,,
code-creation,Function,10,137836,0x2c63eb121c6,79, node:internal/inspector_async_hook:1:1,0x2c63eb11f20,~
code-source-info,0x2c63eb121c6,97,0,2048,C0O0C42O21C43O21C45O32C46O32C48O54C54O2002C61O2024C67O2035C73O2017C78O2047,,
code-creation,LazyCompile,10,137915,0x2c63eb1282e,69,setupWarningHandler node:internal/bootstrap/pre_execution:142:29,0x2c63eb040a0,~
code-source-info,0x2c63eb1282e,96,4625,4830,C0O4663C6O4663C11O4646C16O4703C24O4707C33O4752C38O4756C45O4773C50O4789C53O4797C61O4797C68O4829,,
code-creation,LazyCompile,10,138012,0x2c63eb1298e,20,addListener node:events:618:58,0x2e6f816ba38,~
script-source,23,node:events,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  MathMin\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromiseReject\x2C\x0d\n  PromiseResolve\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolAsyncIterator\x2C\x0d\n} = primordials;\x0d\nconst kRejection = SymbolFor('nodejs.rejection');\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nlet spliceOne;\x0d\n\x0d\nconst {\x0d\n  AbortError\x2C\x0d\n  kEnhanceStackBeforeInspector\x2C\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNHANDLED_ERROR\x0d\n  }\x2C\x0d\n  genericNodeError\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst kCapture = Symbol('kCapture');\x0d\nconst kErrorMonitor = Symbol('events.errorMonitor');\x0d\nconst kMaxEventTargetListeners = Symbol('events.maxEventTargetListeners');\x0d\nconst kMaxEventTargetListenersWarned =\x0d\n  Symbol('events.maxEventTargetListenersWarned');\x0d\n\x0d\nlet EventEmitterAsyncResource;\x0d\n// The EventEmitterAsyncResource has to be initialized lazily because event.js\x0d\n// is loaded so early in the bootstrap process\x2C before async_hooks is available.\x0d\n//\x0d\n// This implementation was adapted straight from addaleax's\x0d\n// eventemitter-asyncresource MIT-licensed userland module.\x0d\n// https://github.com/addaleax/eventemitter-asyncresource\x0d\nfunction lazyEventEmitterAsyncResource() {\x0d\n  if (EventEmitterAsyncResource === undefined) {\x0d\n    const {\x0d\n      AsyncResource\x0d\n    } = require('async_hooks');\x0d\n\x0d\n    const kEventEmitter = Symbol('kEventEmitter');\x0d\n    const kAsyncResource = Symbol('kAsyncResource');\x0d\n    class EventEmitterReferencingAsyncResource extends AsyncResource {\x0d\n      /**\x0d\n       * @param {EventEmitter} ee\x0d\n       * @param {string} [type]\x0d\n       * @param {{\x0d\n       *   triggerAsyncId?: number\x2C\x0d\n       *   requireManualDestroy?: boolean\x2C\x0d\n       * }} [options]\x0d\n       */\x0d\n      constructor(ee\x2C type\x2C options) {\x0d\n        super(type\x2C options);\x0d\n        this[kEventEmitter] = ee;\x0d\n      }\x0d\n\x0d\n      /**\x0d\n       * @type {EventEmitter}\x0d\n       */\x0d\n      get eventEmitter() {\x0d\n        if (this[kEventEmitter] === undefined)\x0d\n          throw new ERR_INVALID_THIS('EventEmitterReferencingAsyncResource');\x0d\n        return this[kEventEmitter];\x0d\n      }\x0d\n    }\x0d\n\x0d\n    EventEmitterAsyncResource =\x0d\n      class EventEmitterAsyncResource extends EventEmitter {\x0d\n        /**\x0d\n         * @param {{\x0d\n         *   name?: string\x2C\x0d\n         *   triggerAsyncId?: number\x2C\x0d\n         *   requireManualDestroy?: boolean\x2C\x0d\n         * }} [options]\x0d\n         */\x0d\n        constructor(options = undefined) {\x0d\n          let name;\x0d\n          if (typeof options === 'string') {\x0d\n            name = options;\x0d\n            options = undefined;\x0d\n          } else {\x0d\n            if (new.target === EventEmitterAsyncResource) {\x0d\n              validateString(options?.name\x2C 'options.name');\x0d\n            }\x0d\n            name = options?.name || new.target.name;\x0d\n          }\x0d\n          super(options);\x0d\n\x0d\n          this[kAsyncResource] =\x0d\n            new EventEmitterReferencingAsyncResource(this\x2C name\x2C options);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @param {symbol\x2Cstring} event\x0d\n         * @param  {...any} args\x0d\n         * @returns {boolean}\x0d\n         */\x0d\n        emit(event\x2C ...args) {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          const { asyncResource } = this;\x0d\n          ArrayPrototypeUnshift(args\x2C super.emit\x2C this\x2C event);\x0d\n          return ReflectApply(asyncResource.runInAsyncScope\x2C asyncResource\x2C\x0d\n                              args);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @returns {void}\x0d\n         */\x0d\n        emitDestroy() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          this.asyncResource.emitDestroy();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get asyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.asyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get triggerAsyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.triggerAsyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {EventEmitterReferencingAsyncResource}\x0d\n         */\x0d\n        get asyncResource() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this[kAsyncResource];\x0d\n        }\x0d\n      };\x0d\n  }\x0d\n  return EventEmitterAsyncResource;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new `EventEmitter` instance.\x0d\n * @param {{ captureRejections?: boolean; }} [opts]\x0d\n * @constructs {EventEmitter}\x0d\n */\x0d\nfunction EventEmitter(opts) {\x0d\n  EventEmitter.init.call(this\x2C opts);\x0d\n}\x0d\nmodule.exports = EventEmitter;\x0d\nmodule.exports.once = once;\x0d\nmodule.exports.on = on;\x0d\nmodule.exports.getEventListeners = getEventListeners;\x0d\n// Backwards-compat with node 0.10.x\x0d\nEventEmitter.EventEmitter = EventEmitter;\x0d\n\x0d\nEventEmitter.usingDomains = false;\x0d\n\x0d\nEventEmitter.captureRejectionSymbol = kRejection;\x0d\nObjectDefineProperty(EventEmitter\x2C 'captureRejections'\x2C {\x0d\n  get() {\x0d\n    return EventEmitter.prototype[kCapture];\x0d\n  }\x2C\x0d\n  set(value) {\x0d\n    validateBoolean(value\x2C 'EventEmitter.captureRejections');\x0d\n\x0d\n    EventEmitter.prototype[kCapture] = value;\x0d\n  }\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'EventEmitterAsyncResource'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get: lazyEventEmitterAsyncResource\x2C\x0d\n  set: undefined\x2C\x0d\n  configurable: true\x2C\x0d\n});\x0d\n\x0d\nEventEmitter.errorMonitor = kErrorMonitor;\x0d\n\x0d\n// The default for captureRejections is false\x0d\nObjectDefineProperty(EventEmitter.prototype\x2C kCapture\x2C {\x0d\n  value: false\x2C\x0d\n  writable: true\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\nEventEmitter.prototype._events = undefined;\x0d\nEventEmitter.prototype._eventsCount = 0;\x0d\nEventEmitter.prototype._maxListeners = undefined;\x0d\n\x0d\n// By default EventEmitters will print a warning if more than 10 listeners are\x0d\n// added to it. This is a useful default which helps finding memory leaks.\x0d\nlet defaultMaxListeners = 10;\x0d\nlet isEventTarget;\x0d\n\x0d\nfunction checkListener(listener) {\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n}\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'defaultMaxListeners'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get: function() {\x0d\n    return defaultMaxListeners;\x0d\n  }\x2C\x0d\n  set: function(arg) {\x0d\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\x0d\n      throw new ERR_OUT_OF_RANGE('defaultMaxListeners'\x2C\x0d\n                                 'a non-negative number'\x2C\x0d\n                                 arg);\x0d\n    }\x0d\n    defaultMaxListeners = arg;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperties(EventEmitter\x2C {\x0d\n  kMaxEventTargetListeners: {\x0d\n    value: kMaxEventTargetListeners\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x2C\x0d\n  kMaxEventTargetListenersWarned: {\x0d\n    value: kMaxEventTargetListenersWarned\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Sets the max listeners.\x0d\n * @param {number} n\x0d\n * @param {EventTarget[] | EventEmitter[]} [eventTargets]\x0d\n * @returns {void}\x0d\n */\x0d\nEventEmitter.setMaxListeners =\x0d\n  function(n = defaultMaxListeners\x2C ...eventTargets) {\x0d\n    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n))\x0d\n      throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n    if (eventTargets.length === 0) {\x0d\n      defaultMaxListeners = n;\x0d\n    } else {\x0d\n      if (isEventTarget === undefined)\x0d\n        isEventTarget = require('internal/event_target').isEventTarget;\x0d\n\x0d\n      for (let i = 0; i < eventTargets.length; i++) {\x0d\n        const target = eventTargets[i];\x0d\n        if (isEventTarget(target)) {\x0d\n          target[kMaxEventTargetListeners] = n;\x0d\n          target[kMaxEventTargetListenersWarned] = false;\x0d\n        } else if (typeof target.setMaxListeners === 'function') {\x0d\n          target.setMaxListeners(n);\x0d\n        } else {\x0d\n          throw new ERR_INVALID_ARG_TYPE(\x0d\n            'eventTargets'\x2C\x0d\n            ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n            target);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  };\x0d\n\x0d\n// If you're updating this function definition\x2C please also update any\x0d\n// re-definitions\x2C such as the one in the Domain module (lib/domain.js).\x0d\nEventEmitter.init = function(opts) {\x0d\n\x0d\n  if (this._events === undefined ||\x0d\n      this._events === ObjectGetPrototypeOf(this)._events) {\x0d\n    this._events = ObjectCreate(null);\x0d\n    this._eventsCount = 0;\x0d\n  }\x0d\n\x0d\n  this._maxListeners = this._maxListeners || undefined;\x0d\n\x0d\n\x0d\n  if (opts?.captureRejections) {\x0d\n    validateBoolean(opts.captureRejections\x2C 'options.captureRejections');\x0d\n    this[kCapture] = Boolean(opts.captureRejections);\x0d\n  } else {\x0d\n    // Assigning the kCapture property directly saves an expensive\x0d\n    // prototype lookup in a very sensitive hot path.\x0d\n    this[kCapture] = EventEmitter.prototype[kCapture];\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addCatch(that\x2C promise\x2C type\x2C args) {\x0d\n  if (!that[kCapture]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Handle Promises/A+ spec\x2C then could be a getter\x0d\n  // that throws on second use.\x0d\n  try {\x0d\n    const then = promise.then;\x0d\n\x0d\n    if (typeof then === 'function') {\x0d\n      then.call(promise\x2C undefined\x2C function(err) {\x0d\n        // The callback is called with nextTick to avoid a follow-up\x0d\n        // rejection from this promise.\x0d\n        process.nextTick(emitUnhandledRejectionOrErr\x2C that\x2C err\x2C type\x2C args);\x0d\n      });\x0d\n    }\x0d\n  } catch (err) {\x0d\n    that.emit('error'\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUnhandledRejectionOrErr(ee\x2C err\x2C type\x2C args) {\x0d\n  if (typeof ee[kRejection] === 'function') {\x0d\n    ee[kRejection](err\x2C type\x2C ...args);\x0d\n  } else {\x0d\n    // We have to disable the capture rejections mechanism\x2C otherwise\x0d\n    // we might end up in an infinite loop.\x0d\n    const prev = ee[kCapture];\x0d\n\x0d\n    // If the error handler throws\x2C it is not catchable and it\x0d\n    // will end up in 'uncaughtException'. We restore the previous\x0d\n    // value of kCapture in case the uncaughtException is present\x0d\n    // and the exception is handled.\x0d\n    try {\x0d\n      ee[kCapture] = false;\x0d\n      ee.emit('error'\x2C err);\x0d\n    } finally {\x0d\n      ee[kCapture] = prev;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Increases the max listeners of the event emitter.\x0d\n * @param {number} n\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\x0d\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\x0d\n    throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n  }\x0d\n  this._maxListeners = n;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction _getMaxListeners(that) {\x0d\n  if (that._maxListeners === undefined)\x0d\n    return EventEmitter.defaultMaxListeners;\x0d\n  return that._maxListeners;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the current max listener value for the event emitter.\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\x0d\n  return _getMaxListeners(this);\x0d\n};\x0d\n\x0d\n// Returns the length and line number of the first sequence of `a` that fully\x0d\n// appears in `b` with a length of at least 4.\x0d\nfunction identicalSequenceRange(a\x2C b) {\x0d\n  for (let i = 0; i < a.length - 3; i++) {\x0d\n    // Find the first entry of b that matches the current entry of a.\x0d\n    const pos = ArrayPrototypeIndexOf(b\x2C a[i]);\x0d\n    if (pos !== -1) {\x0d\n      const rest = b.length - pos;\x0d\n      if (rest > 3) {\x0d\n        let len = 1;\x0d\n        const maxLen = MathMin(a.length - i\x2C rest);\x0d\n        // Count the number of consecutive entries.\x0d\n        while (maxLen > len && a[i + len] === b[pos + len]) {\x0d\n          len++;\x0d\n        }\x0d\n        if (len > 3) {\x0d\n          return [len\x2C i];\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return [0\x2C 0];\x0d\n}\x0d\n\x0d\nfunction enhanceStackTrace(err\x2C own) {\x0d\n  let ctorInfo = '';\x0d\n  try {\x0d\n    const { name } = this.constructor;\x0d\n    if (name !== 'EventEmitter')\x0d\n      ctorInfo = ` on ${name} instance`;\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\x0d\n\x0d\n  const errStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(err.stack\x2C '\\n')\x2C 1);\x0d\n  const ownStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(own.stack\x2C '\\n')\x2C 1);\x0d\n\x0d\n  const { 0: len\x2C 1: off } = identicalSequenceRange(ownStack\x2C errStack);\x0d\n  if (len > 0) {\x0d\n    ArrayPrototypeSplice(ownStack\x2C off + 1\x2C len - 2\x2C\x0d\n                         '    [... lines matching original stack trace ...]');\x0d\n  }\x0d\n\x0d\n  return err.stack + sep + ArrayPrototypeJoin(ownStack\x2C '\\n');\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously calls each of the listeners registered\x0d\n * for the event.\x0d\n * @param {string | symbol} type\x0d\n * @param {...any} [args]\x0d\n * @returns {boolean}\x0d\n */\x0d\nEventEmitter.prototype.emit = function emit(type\x2C ...args) {\x0d\n  let doError = (type === 'error');\x0d\n\x0d\n  const events = this._events;\x0d\n  if (events !== undefined) {\x0d\n    if (doError && events[kErrorMonitor] !== undefined)\x0d\n      this.emit(kErrorMonitor\x2C ...args);\x0d\n    doError = (doError && events.error === undefined);\x0d\n  } else if (!doError)\x0d\n    return false;\x0d\n\x0d\n  // If there is no 'error' event listener then throw.\x0d\n  if (doError) {\x0d\n    let er;\x0d\n    if (args.length > 0)\x0d\n      er = args[0];\x0d\n    if (er instanceof Error) {\x0d\n      try {\x0d\n        const capture = {};\x0d\n        ErrorCaptureStackTrace(capture\x2C EventEmitter.prototype.emit);\x0d\n        ObjectDefineProperty(er\x2C kEnhanceStackBeforeInspector\x2C {\x0d\n          value: FunctionPrototypeBind(enhanceStackTrace\x2C this\x2C er\x2C capture)\x2C\x0d\n          configurable: true\x0d\n        });\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n\x0d\n      // Note: The comments on the `throw` lines are intentional\x2C they show\x0d\n      // up in Node's output if this results in an unhandled exception.\x0d\n      throw er; // Unhandled 'error' event\x0d\n    }\x0d\n\x0d\n    let stringifiedEr;\x0d\n    try {\x0d\n      stringifiedEr = inspect(er);\x0d\n    } catch {\x0d\n      stringifiedEr = er;\x0d\n    }\x0d\n\x0d\n    // At least give some kind of context to the user\x0d\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\x0d\n    err.context = er;\x0d\n    throw err; // Unhandled 'error' event\x0d\n  }\x0d\n\x0d\n  const handler = events[type];\x0d\n\x0d\n  if (handler === undefined)\x0d\n    return false;\x0d\n\x0d\n  if (typeof handler === 'function') {\x0d\n    const result = handler.apply(this\x2C args);\x0d\n\x0d\n    // We check if result is undefined first because that\x0d\n    // is the most common case so we do not pay any perf\x0d\n    // penalty\x0d\n    if (result !== undefined && result !== null) {\x0d\n      addCatch(this\x2C result\x2C type\x2C args);\x0d\n    }\x0d\n  } else {\x0d\n    const len = handler.length;\x0d\n    const listeners = arrayClone(handler);\x0d\n    for (let i = 0; i < len; ++i) {\x0d\n      const result = listeners[i].apply(this\x2C args);\x0d\n\x0d\n      // We check if result is undefined first because that\x0d\n      // is the most common case so we do not pay any perf\x0d\n      // penalty.\x0d\n      // This code is duplicated because extracting it away\x0d\n      // would make it non-inlineable.\x0d\n      if (result !== undefined && result !== null) {\x0d\n        addCatch(this\x2C result\x2C type\x2C args);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return true;\x0d\n};\x0d\n\x0d\nfunction _addListener(target\x2C type\x2C listener\x2C prepend) {\x0d\n  let m;\x0d\n  let events;\x0d\n  let existing;\x0d\n\x0d\n  checkListener(listener);\x0d\n\x0d\n  events = target._events;\x0d\n  if (events === undefined) {\x0d\n    events = target._events = ObjectCreate(null);\x0d\n    target._eventsCount = 0;\x0d\n  } else {\x0d\n    // To avoid recursion in the case that type === "newListener"! Before\x0d\n    // adding it to the listeners\x2C first emit "newListener".\x0d\n    if (events.newListener !== undefined) {\x0d\n      target.emit('newListener'\x2C type\x2C\x0d\n                  listener.listener ?? listener);\x0d\n\x0d\n      // Re-assign `events` because a newListener handler could have caused the\x0d\n      // this._events to be assigned to a new object\x0d\n      events = target._events;\x0d\n    }\x0d\n    existing = events[type];\x0d\n  }\x0d\n\x0d\n  if (existing === undefined) {\x0d\n    // Optimize the case of one listener. Don't need the extra array object.\x0d\n    events[type] = listener;\x0d\n    ++target._eventsCount;\x0d\n  } else {\x0d\n    if (typeof existing === 'function') {\x0d\n      // Adding the second element\x2C need to change to array.\x0d\n      existing = events[type] =\x0d\n        prepend ? [listener\x2C existing] : [existing\x2C listener];\x0d\n      // If we've already got an array\x2C just append.\x0d\n    } else if (prepend) {\x0d\n      existing.unshift(listener);\x0d\n    } else {\x0d\n      existing.push(listener);\x0d\n    }\x0d\n\x0d\n    // Check for listener leak\x0d\n    m = _getMaxListeners(target);\x0d\n    if (m > 0 && existing.length > m && !existing.warned) {\x0d\n      existing.warned = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      const w = genericNodeError(\x0d\n        `Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners ` +\x0d\n        `added to ${inspect(target\x2C { depth: -1 })}. Use emitter.setMaxListeners() to increase limit`\x2C\x0d\n        { name: 'MaxListenersExceededWarning'\x2C emitter: target\x2C type: type\x2C count: existing.length });\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return target;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a listener to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.addListener = function addListener(type\x2C listener) {\x0d\n  return _addListener(this\x2C type\x2C listener\x2C false);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\x0d\n\x0d\n/**\x0d\n * Adds the `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependListener =\x0d\n    function prependListener(type\x2C listener) {\x0d\n      return _addListener(this\x2C type\x2C listener\x2C true);\x0d\n    };\x0d\n\x0d\nfunction onceWrapper() {\x0d\n  if (!this.fired) {\x0d\n    this.target.removeListener(this.type\x2C this.wrapFn);\x0d\n    this.fired = true;\x0d\n    if (arguments.length === 0)\x0d\n      return this.listener.call(this.target);\x0d\n    return this.listener.apply(this.target\x2C arguments);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction _onceWrap(target\x2C type\x2C listener) {\x0d\n  const state = { fired: false\x2C wrapFn: undefined\x2C target\x2C type\x2C listener };\x0d\n  const wrapped = onceWrapper.bind(state);\x0d\n  wrapped.listener = listener;\x0d\n  state.wrapFn = wrapped;\x0d\n  return wrapped;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.once = function once(type\x2C listener) {\x0d\n  checkListener(listener);\x0d\n\x0d\n  this.on(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n  return this;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependOnceListener =\x0d\n    function prependOnceListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      this.prependListener(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n      return this;\x0d\n    };\x0d\n\x0d\n/**\x0d\n * Removes the specified `listener` from the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeListener =\x0d\n    function removeListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      const list = events[type];\x0d\n      if (list === undefined)\x0d\n        return this;\x0d\n\x0d\n      if (list === listener || list.listener === listener) {\x0d\n        if (--this._eventsCount === 0)\x0d\n          this._events = ObjectCreate(null);\x0d\n        else {\x0d\n          delete events[type];\x0d\n          if (events.removeListener)\x0d\n            this.emit('removeListener'\x2C type\x2C list.listener || listener);\x0d\n        }\x0d\n      } else if (typeof list !== 'function') {\x0d\n        let position = -1;\x0d\n\x0d\n        for (let i = list.length - 1; i >= 0; i--) {\x0d\n          if (list[i] === listener || list[i].listener === listener) {\x0d\n            position = i;\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (position < 0)\x0d\n          return this;\x0d\n\x0d\n        if (position === 0)\x0d\n          list.shift();\x0d\n        else {\x0d\n          if (spliceOne === undefined)\x0d\n            spliceOne = require('internal/util').spliceOne;\x0d\n          spliceOne(list\x2C position);\x0d\n        }\x0d\n\x0d\n        if (list.length === 1)\x0d\n          events[type] = list[0];\x0d\n\x0d\n        if (events.removeListener !== undefined)\x0d\n          this.emit('removeListener'\x2C type\x2C listener);\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\x0d\n\x0d\n/**\x0d\n * Removes all listeners from the event emitter. (Only\x0d\n * removes listeners for a specific event name if specified\x0d\n * as `type`).\x0d\n * @param {string | symbol} [type]\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeAllListeners =\x0d\n    function removeAllListeners(type) {\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      // Not listening for removeListener\x2C no need to emit\x0d\n      if (events.removeListener === undefined) {\x0d\n        if (arguments.length === 0) {\x0d\n          this._events = ObjectCreate(null);\x0d\n          this._eventsCount = 0;\x0d\n        } else if (events[type] !== undefined) {\x0d\n          if (--this._eventsCount === 0)\x0d\n            this._events = ObjectCreate(null);\x0d\n          else\x0d\n            delete events[type];\x0d\n        }\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      // Emit removeListener for all listeners on all events\x0d\n      if (arguments.length === 0) {\x0d\n        for (const key of ReflectOwnKeys(events)) {\x0d\n          if (key === 'removeListener') continue;\x0d\n          this.removeAllListeners(key);\x0d\n        }\x0d\n        this.removeAllListeners('removeListener');\x0d\n        this._events = ObjectCreate(null);\x0d\n        this._eventsCount = 0;\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      const listeners = events[type];\x0d\n\x0d\n      if (typeof listeners === 'function') {\x0d\n        this.removeListener(type\x2C listeners);\x0d\n      } else if (listeners !== undefined) {\x0d\n        // LIFO order\x0d\n        for (let i = listeners.length - 1; i >= 0; i--) {\x0d\n          this.removeListener(type\x2C listeners[i]);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nfunction _listeners(target\x2C type\x2C unwrap) {\x0d\n  const events = target._events;\x0d\n\x0d\n  if (events === undefined)\x0d\n    return [];\x0d\n\x0d\n  const evlistener = events[type];\x0d\n  if (evlistener === undefined)\x0d\n    return [];\x0d\n\x0d\n  if (typeof evlistener === 'function')\x0d\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\x0d\n\x0d\n  return unwrap ?\x0d\n    unwrapListeners(evlistener) : arrayClone(evlistener);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.listeners = function listeners(type) {\x0d\n  return _listeners(this\x2C type\x2C true);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners and wrappers for\x0d\n * the event name specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\x0d\n  return _listeners(this\x2C type\x2C false);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to the event name\x0d\n * specified as `type`.\x0d\n * @deprecated since v3.2.0\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.listenerCount = function(emitter\x2C type) {\x0d\n  if (typeof emitter.listenerCount === 'function') {\x0d\n    return emitter.listenerCount(type);\x0d\n  }\x0d\n  return FunctionPrototypeCall(listenerCount\x2C emitter\x2C type);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.listenerCount = listenerCount;\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nfunction listenerCount(type) {\x0d\n  const events = this._events;\x0d\n\x0d\n  if (events !== undefined) {\x0d\n    const evlistener = events[type];\x0d\n\x0d\n    if (typeof evlistener === 'function') {\x0d\n      return 1;\x0d\n    } else if (evlistener !== undefined) {\x0d\n      return evlistener.length;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an array listing the events for which\x0d\n * the emitter has registered listeners.\x0d\n * @returns {any[]}\x0d\n */\x0d\nEventEmitter.prototype.eventNames = function eventNames() {\x0d\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\x0d\n};\x0d\n\x0d\nfunction arrayClone(arr) {\x0d\n  // At least since V8 8.3\x2C this implementation is faster than the previous\x0d\n  // which always used a simple for-loop\x0d\n  switch (arr.length) {\x0d\n    case 2: return [arr[0]\x2C arr[1]];\x0d\n    case 3: return [arr[0]\x2C arr[1]\x2C arr[2]];\x0d\n    case 4: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]];\x0d\n    case 5: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]];\x0d\n    case 6: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]\x2C arr[5]];\x0d\n  }\x0d\n  return ArrayPrototypeSlice(arr);\x0d\n}\x0d\n\x0d\nfunction unwrapListeners(arr) {\x0d\n  const ret = arrayClone(arr);\x0d\n  for (let i = 0; i < ret.length; ++i) {\x0d\n    const orig = ret[i].listener;\x0d\n    if (typeof orig === 'function')\x0d\n      ret[i] = orig;\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {EventEmitter | EventTarget} emitterOrTarget\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nfunction getEventListeners(emitterOrTarget\x2C type) {\x0d\n  // First check if EventEmitter\x0d\n  if (typeof emitterOrTarget.listeners === 'function') {\x0d\n    return emitterOrTarget.listeners(type);\x0d\n  }\x0d\n  // Require event target lazily to avoid always loading it\x0d\n  const { isEventTarget\x2C kEvents } = require('internal/event_target');\x0d\n  if (isEventTarget(emitterOrTarget)) {\x0d\n    const root = emitterOrTarget[kEvents].get(type);\x0d\n    const listeners = [];\x0d\n    let handler = root?.next;\x0d\n    while (handler?.listener !== undefined) {\x0d\n      const listener = handler.listener?.deref ?\x0d\n        handler.listener.deref() : handler.listener;\x0d\n      listeners.push(listener);\x0d\n      handler = handler.next;\x0d\n    }\x0d\n    return listeners;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE('emitter'\x2C\x0d\n                                 ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n                                 emitterOrTarget);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a `Promise` that is fulfilled when the emitter\x0d\n * emits the given event.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string} name\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {Promise}\x0d\n */\x0d\nasync function once(emitter\x2C name\x2C options = {}) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    const errorListener = (err) => {\x0d\n      emitter.removeListener(name\x2C resolver);\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      reject(err);\x0d\n    };\x0d\n    const resolver = (...args) => {\x0d\n      if (typeof emitter.removeListener === 'function') {\x0d\n        emitter.removeListener('error'\x2C errorListener);\x0d\n      }\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      resolve(args);\x0d\n    };\x0d\n    eventTargetAgnosticAddListener(emitter\x2C name\x2C resolver\x2C { once: true });\x0d\n    if (name !== 'error' && typeof emitter.once === 'function') {\x0d\n      emitter.once('error'\x2C errorListener);\x0d\n    }\x0d\n    function abortListener() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C name\x2C resolver);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorListener);\x0d\n      reject(new AbortError());\x0d\n    }\x0d\n    if (signal != null) {\x0d\n      eventTargetAgnosticAddListener(\x0d\n        signal\x2C 'abort'\x2C abortListener\x2C { once: true });\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nconst AsyncIteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf(async function* () {}).prototype);\x0d\n\x0d\nfunction createIterResult(value\x2C done) {\x0d\n  return { value\x2C done };\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticRemoveListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.removeListener === 'function') {\x0d\n    emitter.removeListener(name\x2C listener);\x0d\n  } else if (typeof emitter.removeEventListener === 'function') {\x0d\n    emitter.removeEventListener(name\x2C listener\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticAddListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.on === 'function') {\x0d\n    if (flags?.once) {\x0d\n      emitter.once(name\x2C listener);\x0d\n    } else {\x0d\n      emitter.on(name\x2C listener);\x0d\n    }\x0d\n  } else if (typeof emitter.addEventListener === 'function') {\x0d\n    // EventTarget does not have `error` event semantics like Node\x0d\n    // EventEmitters\x2C we do not listen to `error` events here.\x0d\n    emitter.addEventListener(name\x2C (arg) => { listener(arg); }\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an `AsyncIterator` that iterates `event` events.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} event\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {AsyncIterator}\x0d\n */\x0d\nfunction on(emitter\x2C event\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n\x0d\n  const unconsumedEvents = [];\x0d\n  const unconsumedPromises = [];\x0d\n  let error = null;\x0d\n  let finished = false;\x0d\n\x0d\n  const iterator = ObjectSetPrototypeOf({\x0d\n    next() {\x0d\n      // First\x2C we consume all unread events\x0d\n      const value = unconsumedEvents.shift();\x0d\n      if (value) {\x0d\n        return PromiseResolve(createIterResult(value\x2C false));\x0d\n      }\x0d\n\x0d\n      // Then we error\x2C if an error happened\x0d\n      // This happens one time if at all\x2C because after 'error'\x0d\n      // we stop listening\x0d\n      if (error) {\x0d\n        const p = PromiseReject(error);\x0d\n        // Only the first element errors\x0d\n        error = null;\x0d\n        return p;\x0d\n      }\x0d\n\x0d\n      // If the iterator is finished\x2C resolve to done\x0d\n      if (finished) {\x0d\n        return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      // Wait until an event happens\x0d\n      return new Promise(function(resolve\x2C reject) {\x0d\n        unconsumedPromises.push({ resolve\x2C reject });\x0d\n      });\x0d\n    }\x2C\x0d\n\x0d\n    return() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n\x0d\n      if (signal) {\x0d\n        eventTargetAgnosticRemoveListener(\x0d\n          signal\x2C\x0d\n          'abort'\x2C\x0d\n          abortListener\x2C\x0d\n          { once: true });\x0d\n      }\x0d\n\x0d\n      finished = true;\x0d\n\x0d\n      for (const promise of unconsumedPromises) {\x0d\n        promise.resolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n    }\x2C\x0d\n\x0d\n    throw(err) {\x0d\n      if (!err || !(err instanceof Error)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('EventEmitter.AsyncIterator'\x2C\x0d\n                                       'Error'\x2C err);\x0d\n      }\x0d\n      error = err;\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n    }\x2C\x0d\n\x0d\n    [SymbolAsyncIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x2C AsyncIteratorPrototype);\x0d\n\x0d\n  eventTargetAgnosticAddListener(emitter\x2C event\x2C eventHandler);\x0d\n  if (event !== 'error' && typeof emitter.on === 'function') {\x0d\n    emitter.on('error'\x2C errorHandler);\x0d\n  }\x0d\n\x0d\n  if (signal) {\x0d\n    eventTargetAgnosticAddListener(\x0d\n      signal\x2C\x0d\n      'abort'\x2C\x0d\n      abortListener\x2C\x0d\n      { once: true });\x0d\n  }\x0d\n\x0d\n  return iterator;\x0d\n\x0d\n  function abortListener() {\x0d\n    errorHandler(new AbortError());\x0d\n  }\x0d\n\x0d\n  function eventHandler(...args) {\x0d\n    const promise = ArrayPrototypeShift(unconsumedPromises);\x0d\n    if (promise) {\x0d\n      promise.resolve(createIterResult(args\x2C false));\x0d\n    } else {\x0d\n      unconsumedEvents.push(args);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function errorHandler(err) {\x0d\n    finished = true;\x0d\n\x0d\n    const toError = ArrayPrototypeShift(unconsumedPromises);\x0d\n\x0d\n    if (toError) {\x0d\n      toError.reject(err);\x0d\n    } else {\x0d\n      // The next time we call next()\x0d\n      error = err;\x0d\n    }\x0d\n\x0d\n    iterator.return();\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x2c63eb1298e,23,18854,18928,C0O18876C14O18883C19O18925,,
tick,0x7ff7c11d3ed7,139383,0,0x0,3,0x7ff7c08240c0,0x2c63eb1286b,0x2c63eb064a4,0x2c63eb02065
code-creation,LazyCompile,10,139418,0x2c63eb15056,378,_addListener node:events:555:22,0x2e6f816b998,~
code-source-info,0x2c63eb
code-creation,LazyCompile,10,139500,0x2c63eb15366,15,checkListener node:events:258:23,0x2e6f816b2f8,~
code-source-info,0x2c63eb15366,23,7884,7942,C0O7900C8O7900C14O7941,,
code-creation,LazyCompile,10,139532,0x2c63eb15456,30, node:internal/validators:236:42,0xa8296bd308,~
code-source-info,0x2c63eb15456,15,7461,7580,C0O7483C6O7521C22O7527C27O7521C29O7579,,
code-creation,LazyCompile,10,139629,0x2c63eb156d6,380,emit node:events:475:44,0x2e6f816b8d8,~
code-source-info,0x2c63eb156d
code-creation,LazyCompile,10,139746,0x2c63eb15a7e,172,startListeningIfSignal node:internal/process/signal:22:32,0xa8296bdca8,~
script-source,93,node:internal/process/signal,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\nlet Signal;\x0d\nconst signalWraps = new SafeMap();\x0d\n\x0d\nfunction isSignal(event) {\x0d\n  return typeof event === 'string' && signals[event] !== undefined;\x0d\n}\x0d\n\x0d\n// Detect presence of a listener for the special signal types\x0d\nfunction startListeningIfSignal(type) {\x0d\n  if (isSignal(type) && !signalWraps.has(type)) {\x0d\n    if (Signal === undefined)\x0d\n      Signal = internalBinding('signal_wrap').Signal;\x0d\n    const wrap = new Signal();\x0d\n\x0d\n    wrap.unref();\x0d\n\x0d\n    wrap.onsignal = FunctionPrototypeBind(process.emit\x2C process\x2C type\x2C type);\x0d\n\x0d\n    const signum = signals[type];\x0d\n    const err = wrap.start(signum);\x0d\n    if (err) {\x0d\n      wrap.close();\x0d\n      throw errnoException(err\x2C 'uv_signal_start');\x0d\n    }\x0d\n\x0d\n    signalWraps.set(type\x2C wrap);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction stopListeningIfSignal(type) {\x0d\n  const wrap = signalWraps.get(type);\x0d\n  if (wrap !== undefined && process.listenerCount(type) === 0) {\x0d\n    wrap.close();\x0d\n    signalWraps.delete(type);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  startListeningIfSignal\x2C\x0d\n  stopListeningIfSignal\x0d\n};\x0d\n
code-source-info,0x2c63eb15a7e,93,450,944,C0O462C3O466C11O485C14O497C19O497C26O515C32O548C38O557C43O587C50O555C56O614C61O614C67O640C72O640C76O656C78O672C84O702C98O672C103O670C107O752C114O759C118O789C123O789C129O809C131O832C136O832C140O848C148O854C153O848C154O908C159O920C164O920C171O943,,
code-creation,LazyCompile,10,139854,0x2c63eb15e3e,19,isSignal node:internal/process/signal:17:18,0xa8296bdaf0,~
code-source-info,0x2c63eb15e3e,93,271,352,C0O284C8O320C13O327C17O335C18O349,,
code-creation,LazyCompile,10,139901,0x2c63eb16076,156,setupFetch node:internal/bootstrap/pre_execution:153:20,0x2c63eb040f0,~
code-source-info,0x2c63eb16076,96,4888,5357,C0O4896C8O4901C14O4948C15O4955C16O4966C24O4966C28O5020C34O5020C39O5063C46O5079C52O5107C57O5063C62O5118C69O5134C75O5165C80O5118C85O5179C92O5195C98O5225C103O5179C108O5238C115O5254C121O5284C126O5238C131O5297C138O5313C144O5344C149O5297C155O5356,,
new,MemoryChunk,0x231d0e00000,262144
code-creation,Function,11,140014,0x231d0e03060,572,getOptionValue node:internal/options:39:24,0x379432fdb40,^
code-source-info,0x231d0e03060,91,940,1190,,,
code-creation,Function,11,140040,0x231d0e03300,216,isPathSeparator node:path:52:25,0x375c9f4cf90,^
code-source-info,0x231d0e03300,41,1794,1876,,,
code-creation,Function,11,140084,0x231d0e03440,3076,normalizeString node:path:66:25,0x375c9f4d458,^
code-source-info,0x231d0e03440,41,2226,4212,,,
code-creation,LazyCompile,10,140153,0x2c63eb16886,268,setupWebCrypto node:internal/bootstrap/pre_execution:170:24,0x2c63eb04140,~
code-source-info,0x2c63eb16886,96,5490,6624,C0O5490C8O5498C13O5510C18O5517C23O5527C33O5562C39O5562C45O5620C46O5627C47O5642C48O5642C50O5656C61O5677C71O5723C102O5723C108O5656C113O6000C121O6004C126O6029C132O6049C146O6063C150O6059C152O6106C163O6127C177O6251C185O6106C190O6272C201O6293C215O6420C223O6272C228O6444C239O6465C253O6595C261O6444C267O6623,,
code-creation,LazyCompile,10,140230,0x2c63eb16b06,5,get node:internal/bootstrap/node:135:6,0xa829694a28,~
script-source,10,node:internal/bootstrap/node,// Hello\x2C and welcome to hacking node.js!\x0d\n//\x0d\n// This file is invoked by `node::RunBootstrapping()` in `src/node.cc`\x2C and is\x0d\n// responsible for setting up node.js core before executing main scripts\x0d\n// under `lib/internal/main/`.\x0d\n//\x0d\n// This file is expected not to perform any asynchronous operations itself\x0d\n// when being executed - those should be done in either\x0d\n// `lib/internal/bootstrap/pre_execution.js` or in main scripts. The majority\x0d\n// of the code here focuses on setting up the global proxy and the process\x0d\n// object in a synchronous manner.\x0d\n// As special caution is given to the performance of the startup process\x2C\x0d\n// many dependencies are invoked lazily.\x0d\n//\x0d\n// Scripts run before this file:\x0d\n// - `lib/internal/per_context/primordials.js`: to save copies of JavaScript\x0d\n//   builtins that won't be affected by user land monkey-patching for internal\x0d\n//   modules to use.\x0d\n// - `lib/internal/bootstrap/loaders.js`: to setup internal binding and\x0d\n//   module loaders\x2C including `process.binding()`\x2C `process._linkedBinding()`\x2C\x0d\n//   `internalBinding()` and `NativeModule`.\x0d\n//\x0d\n// This file is run to bootstrap both the main thread and the worker threads.\x0d\n// After this file is run\x2C certain properties are setup according to the\x0d\n// configuration of the Node.js instance using the files in\x0d\n// `lib/internal/bootstrap/switches/`.\x0d\n//\x0d\n// Then\x2C depending on how the Node.js instance is launched\x2C one of the main\x0d\n// scripts in `lib/internal/main` will be selected by C++ to start the actual\x0d\n// execution. They may run additional setups exported by\x0d\n// `lib/internal/bootstrap/pre_execution.js` depending on the runtime states.\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// This file is compiled as if it's wrapped in a function with arguments\x0d\n// passed by node::RunBootstrapping()\x0d\n/* global process\x2C require\x2C internalBinding\x2C primordials */\x0d\n\x0d\nsetupPrepareStackTrace();\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeFill\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectPreventExtensions\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectGet\x2C\x0d\n  ReflectSet\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\nconst config = internalBinding('config');\x0d\nconst internalTimers = require('internal/timers');\x0d\nconst { deprecate } = require('internal/util');\x0d\n\x0d\nsetupProcessObject();\x0d\n\x0d\nsetupGlobalProxy();\x0d\nsetupBuffer();\x0d\n\x0d\nprocess.domain = null;\x0d\nprocess._exiting = false;\x0d\n\x0d\n// process.config is serialized config.gypi\x0d\nconst nativeModule = internalBinding('native_module');\x0d\n\x0d\n// TODO(@jasnell): Once this has gone through one full major\x0d\n// release cycle\x2C remove the Proxy and setter and update the\x0d\n// getter to either return a read-only object or always return\x0d\n// a freshly parsed version of nativeModule.config.\x0d\n\x0d\nconst deprecationHandler = {\x0d\n  warned: false\x2C\x0d\n  message: 'Setting process.config is deprecated. ' +\x0d\n           'In the future the property will be read-only.'\x2C\x0d\n  code: 'DEP0150'\x2C\x0d\n  maybeWarn() {\x0d\n    if (!this.warned) {\x0d\n      process.emitWarning(this.message\x2C {\x0d\n        type: 'DeprecationWarning'\x2C\x0d\n        code: this.code\x0d\n      });\x0d\n      this.warned = true;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  defineProperty(target\x2C key\x2C descriptor) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectDefineProperty(target\x2C key\x2C descriptor);\x0d\n  }\x2C\x0d\n\x0d\n  deleteProperty(target\x2C key) {\x0d\n    this.maybeWarn();\x0d\n    delete target[key];\x0d\n  }\x2C\x0d\n\x0d\n  preventExtensions(target) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectPreventExtensions(target);\x0d\n  }\x2C\x0d\n\x0d\n  set(target\x2C key\x2C value) {\x0d\n    this.maybeWarn();\x0d\n    return ReflectSet(target\x2C key\x2C value);\x0d\n  }\x2C\x0d\n\x0d\n  get(target\x2C key\x2C receiver) {\x0d\n    const val = ReflectGet(target\x2C key\x2C receiver);\x0d\n    if (val != null && typeof val === 'object') {\x0d\n      // eslint-disable-next-line node-core/prefer-primordials\x0d\n      return new Proxy(val\x2C deprecationHandler);\x0d\n    }\x0d\n    return val;\x0d\n  }\x2C\x0d\n\x0d\n  setPrototypeOf(target\x2C proto) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectSetPrototypeOf(target\x2C proto);\x0d\n  }\x0d\n};\x0d\n\x0d\n// eslint-disable-next-line node-core/prefer-primordials\x0d\nlet processConfig = new Proxy(\x0d\n  JSONParse(nativeModule.config)\x2C\x0d\n  deprecationHandler);\x0d\n\x0d\nObjectDefineProperty(process\x2C 'config'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  configurable: true\x2C\x0d\n  get() { return processConfig; }\x2C\x0d\n  set(value) {\x0d\n    deprecationHandler.maybeWarn();\x0d\n    processConfig = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nrequire('internal/worker/js_transferable').setup();\x0d\n\x0d\n// Bootstrappers for all threads\x2C including worker threads and main thread\x0d\nconst perThreadSetup = require('internal/process/per_thread');\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\n\x0d\n// Set up methods on the process object for all threads\x0d\n{\x0d\n  process.dlopen = rawMethods.dlopen;\x0d\n  process.uptime = rawMethods.uptime;\x0d\n\x0d\n  // TODO(joyeecheung): either remove them or make them public\x0d\n  process._getActiveRequests = rawMethods._getActiveRequests;\x0d\n  process._getActiveHandles = rawMethods._getActiveHandles;\x0d\n\x0d\n  process.getActiveResourcesInfo = function() {\x0d\n    const timerCounts = internalTimers.getTimerCounts();\x0d\n    return ArrayPrototypeConcat(\x0d\n      rawMethods._getActiveRequestsInfo()\x2C\x0d\n      rawMethods._getActiveHandlesInfo()\x2C\x0d\n      ArrayPrototypeFill(new Array(timerCounts.timeoutCount)\x2C 'Timeout')\x2C\x0d\n      ArrayPrototypeFill(new Array(timerCounts.immediateCount)\x2C 'Immediate'));\x0d\n  };\x0d\n\x0d\n  // TODO(joyeecheung): remove these\x0d\n  process.reallyExit = rawMethods.reallyExit;\x0d\n  process._kill = rawMethods._kill;\x0d\n\x0d\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\x0d\n  process._rawDebug = wrapped._rawDebug;\x0d\n  process.cpuUsage = wrapped.cpuUsage;\x0d\n  process.resourceUsage = wrapped.resourceUsage;\x0d\n  process.memoryUsage = wrapped.memoryUsage;\x0d\n  process.kill = wrapped.kill;\x0d\n  process.exit = wrapped.exit;\x0d\n\x0d\n  process.hrtime = perThreadSetup.hrtime;\x0d\n  process.hrtime.bigint = perThreadSetup.hrtimeBigInt;\x0d\n\x0d\n  process.openStdin = function() {\x0d\n    process.stdin.resume();\x0d\n    return process.stdin;\x0d\n  };\x0d\n}\x0d\n\x0d\nconst credentials = internalBinding('credentials');\x0d\nif (credentials.implementsPosixCredentials) {\x0d\n  process.getuid = credentials.getuid;\x0d\n  process.geteuid = credentials.geteuid;\x0d\n  process.getgid = credentials.getgid;\x0d\n  process.getegid = credentials.getegid;\x0d\n  process.getgroups = credentials.getgroups;\x0d\n}\x0d\n\x0d\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\x0d\n// process. They use the same functions as the JS embedder API. These callbacks\x0d\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\x0d\n// and the cost of doing so is negligible.\x0d\nconst { nativeHooks } = require('internal/async_hooks');\x0d\ninternalBinding('async_wrap').setupHooks(nativeHooks);\x0d\n\x0d\nconst {\x0d\n  setupTaskQueue\x2C\x0d\n  queueMicrotask\x0d\n} = require('internal/process/task_queues');\x0d\n\x0d\nif (!config.noBrowserGlobals) {\x0d\n  // Override global console from the one provided by the VM\x0d\n  // to the one implemented by Node.js\x0d\n  // https://console.spec.whatwg.org/#console-namespace\x0d\n  exposeNamespace(globalThis\x2C 'console'\x2C\x0d\n                  createGlobalConsole(globalThis.console));\x0d\n\x0d\n  const { URL\x2C URLSearchParams } = require('internal/url');\x0d\n  // https://url.spec.whatwg.org/#url\x0d\n  exposeInterface(globalThis\x2C 'URL'\x2C URL);\x0d\n  // https://url.spec.whatwg.org/#urlsearchparams\x0d\n  exposeInterface(globalThis\x2C 'URLSearchParams'\x2C URLSearchParams);\x0d\n\x0d\n  const {\x0d\n    TextEncoder\x2C TextDecoder\x0d\n  } = require('internal/encoding');\x0d\n  // https://encoding.spec.whatwg.org/#textencoder\x0d\n  exposeInterface(globalThis\x2C 'TextEncoder'\x2C TextEncoder);\x0d\n  // https://encoding.spec.whatwg.org/#textdecoder\x0d\n  exposeInterface(globalThis\x2C 'TextDecoder'\x2C TextDecoder);\x0d\n\x0d\n  const {\x0d\n    AbortController\x2C\x0d\n    AbortSignal\x2C\x0d\n  } = require('internal/abort_controller');\x0d\n  exposeInterface(globalThis\x2C 'AbortController'\x2C AbortController);\x0d\n  exposeInterface(globalThis\x2C 'AbortSignal'\x2C AbortSignal);\x0d\n\x0d\n  const {\x0d\n    EventTarget\x2C\x0d\n    Event\x2C\x0d\n  } = require('internal/event_target');\x0d\n  exposeInterface(globalThis\x2C 'EventTarget'\x2C EventTarget);\x0d\n  exposeInterface(globalThis\x2C 'Event'\x2C Event);\x0d\n  const {\x0d\n    MessageChannel\x2C\x0d\n    MessagePort\x2C\x0d\n    MessageEvent\x2C\x0d\n  } = require('internal/worker/io');\x0d\n  exposeInterface(globalThis\x2C 'MessageChannel'\x2C MessageChannel);\x0d\n  exposeInterface(globalThis\x2C 'MessagePort'\x2C MessagePort);\x0d\n  exposeInterface(globalThis\x2C 'MessageEvent'\x2C MessageEvent);\x0d\n\x0d\n  // https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope\x0d\n  const timers = require('timers');\x0d\n  defineOperation(globalThis\x2C 'clearInterval'\x2C timers.clearInterval);\x0d\n  defineOperation(globalThis\x2C 'clearTimeout'\x2C timers.clearTimeout);\x0d\n  defineOperation(globalThis\x2C 'setInterval'\x2C timers.setInterval);\x0d\n  defineOperation(globalThis\x2C 'setTimeout'\x2C timers.setTimeout);\x0d\n\x0d\n  defineOperation(globalThis\x2C 'queueMicrotask'\x2C queueMicrotask);\x0d\n\x0d\n  // https://www.w3.org/TR/hr-time-2/#the-performance-attribute\x0d\n  defineReplacableAttribute(globalThis\x2C 'performance'\x2C\x0d\n                            require('perf_hooks').performance);\x0d\n\x0d\n  // Non-standard extensions:\x0d\n  defineOperation(globalThis\x2C 'clearImmediate'\x2C timers.clearImmediate);\x0d\n  defineOperation(globalThis\x2C 'setImmediate'\x2C timers.setImmediate);\x0d\n}\x0d\n\x0d\n// Set the per-Environment callback that will be called\x0d\n// when the TrackingTraceStateObserver updates trace state.\x0d\n// Note that when NODE_USE_V8_PLATFORM is true\x2C the observer is\x0d\n// attached to the per-process TracingController.\x0d\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\x0d\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\x0d\n\x0d\n// process.allowedNodeEnvironmentFlags\x0d\nObjectDefineProperty(process\x2C 'allowedNodeEnvironmentFlags'\x2C {\x0d\n  get() {\x0d\n    const flags = perThreadSetup.buildAllowedFlags();\x0d\n    process.allowedNodeEnvironmentFlags = flags;\x0d\n    return process.allowedNodeEnvironmentFlags;\x0d\n  }\x2C\x0d\n  // If the user tries to set this to another value\x2C override\x0d\n  // this completely to that value.\x0d\n  set(value) {\x0d\n    ObjectDefineProperty(this\x2C 'allowedNodeEnvironmentFlags'\x2C {\x0d\n      value\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable: true\x2C\x0d\n      writable: true\x0d\n    });\x0d\n  }\x2C\x0d\n  enumerable: true\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\n// process.assert\x0d\nprocess.assert = deprecate(\x0d\n  perThreadSetup.assert\x2C\x0d\n  'process.assert() is deprecated. Please use the `assert` module instead.'\x2C\x0d\n  'DEP0100');\x0d\n\x0d\n// TODO(joyeecheung): this property has not been well-maintained\x2C should we\x0d\n// deprecate it in favor of a better API?\x0d\nconst { isDebugBuild\x2C hasOpenSSL\x2C hasInspector } = config;\x0d\nconst features = {\x0d\n  inspector: hasInspector\x2C\x0d\n  debug: isDebugBuild\x2C\x0d\n  uv: true\x2C\x0d\n  ipv6: true\x2C  // TODO(bnoordhuis) ping libuv\x0d\n  tls_alpn: hasOpenSSL\x2C\x0d\n  tls_sni: hasOpenSSL\x2C\x0d\n  tls_ocsp: hasOpenSSL\x2C\x0d\n  tls: hasOpenSSL\x2C\x0d\n  // This needs to be dynamic because snapshot is built without code cache.\x0d\n  // TODO(joyeecheung): https://github.com/nodejs/node/issues/31074\x0d\n  // Make it possible to build snapshot with code cache\x0d\n  get cached_builtins() {\x0d\n    return nativeModule.hasCachedBuiltins();\x0d\n  }\x0d\n};\x0d\n\x0d\nObjectDefineProperty(process\x2C 'features'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  writable: false\x2C\x0d\n  configurable: false\x2C\x0d\n  value: features\x0d\n});\x0d\n\x0d\n{\x0d\n  const {\x0d\n    onGlobalUncaughtException\x2C\x0d\n    setUncaughtExceptionCaptureCallback\x2C\x0d\n    hasUncaughtExceptionCaptureCallback\x0d\n  } = require('internal/process/execution');\x0d\n\x0d\n  // For legacy reasons this is still called `_fatalException`\x2C even\x0d\n  // though it is now a global uncaught exception handler.\x0d\n  // The C++ land node::errors::TriggerUncaughtException grabs it\x0d\n  // from the process object because it has been monkey-patchable.\x0d\n  // TODO(joyeecheung): investigate whether process._fatalException\x0d\n  // can be deprecated.\x0d\n  process._fatalException = onGlobalUncaughtException;\x0d\n  process.setUncaughtExceptionCaptureCallback =\x0d\n    setUncaughtExceptionCaptureCallback;\x0d\n  process.hasUncaughtExceptionCaptureCallback =\x0d\n    hasUncaughtExceptionCaptureCallback;\x0d\n}\x0d\n\x0d\nconst { emitWarning } = require('internal/process/warning');\x0d\nprocess.emitWarning = emitWarning;\x0d\n\x0d\n// We initialize the tick callbacks and the timer callbacks last during\x0d\n// bootstrap to make sure that any operation done before this are synchronous.\x0d\n// If any ticks or timers are scheduled before this they are unlikely to work.\x0d\n{\x0d\n  const { nextTick\x2C runNextTicks } = setupTaskQueue();\x0d\n  process.nextTick = nextTick;\x0d\n  // Used to emulate a tick manually in the JS land.\x0d\n  // A better name for this function would be `runNextTicks` but\x0d\n  // it has been exposed to the process object so we keep this legacy name\x0d\n  // TODO(joyeecheung): either remove it or make it public\x0d\n  process._tickCallback = runNextTicks;\x0d\n\x0d\n  const { setupTimers } = internalBinding('timers');\x0d\n  const {\x0d\n    processImmediate\x2C\x0d\n    processTimers\x2C\x0d\n  } = internalTimers.getTimerCallbacks(runNextTicks);\x0d\n  // Sets two per-Environment callbacks that will be run from libuv:\x0d\n  // - processImmediate will be run in the callback of the per-Environment\x0d\n  //   check handle.\x0d\n  // - processTimers will be run in the callback of the per-Environment timer.\x0d\n  setupTimers(processImmediate\x2C processTimers);\x0d\n  // Note: only after this point are the timers effective\x0d\n}\x0d\n\x0d\n// Preload modules so that they are included in the builtin snapshot.\x0d\nrequire('fs');\x0d\nrequire('v8');\x0d\nrequire('vm');\x0d\nrequire('url');\x0d\nrequire('internal/options');\x0d\n\x0d\nfunction setupPrepareStackTrace() {\x0d\n  const {\x0d\n    setEnhanceStackForFatalException\x2C\x0d\n    setPrepareStackTraceCallback\x0d\n  } = internalBinding('errors');\x0d\n  const {\x0d\n    prepareStackTrace\x2C\x0d\n    fatalExceptionStackEnhancers: {\x0d\n      beforeInspector\x2C\x0d\n      afterInspector\x0d\n    }\x0d\n  } = require('internal/errors');\x0d\n  // Tell our PrepareStackTraceCallback passed to the V8 API\x0d\n  // to call prepareStackTrace().\x0d\n  setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  // Set the function used to enhance the error stack for printing\x0d\n  setEnhanceStackForFatalException(beforeInspector\x2C afterInspector);\x0d\n}\x0d\n\x0d\nfunction setupProcessObject() {\x0d\n  const EventEmitter = require('events');\x0d\n  const origProcProto = ObjectGetPrototypeOf(process);\x0d\n  ObjectSetPrototypeOf(origProcProto\x2C EventEmitter.prototype);\x0d\n  FunctionPrototypeCall(EventEmitter\x2C process);\x0d\n  ObjectDefineProperty(process\x2C SymbolToStringTag\x2C {\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: false\x2C\x0d\n    value: 'process'\x0d\n  });\x0d\n  // Make process globally available to users by putting it on the global proxy\x0d\n  ObjectDefineProperty(globalThis\x2C 'process'\x2C {\x0d\n    value: process\x2C\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupGlobalProxy() {\x0d\n  ObjectDefineProperty(globalThis\x2C SymbolToStringTag\x2C {\x0d\n    value: 'global'\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupBuffer() {\x0d\n  const {\x0d\n    Buffer\x2C\x0d\n    atob\x2C\x0d\n    btoa\x2C\x0d\n  } = require('buffer');\x0d\n  const bufferBinding = internalBinding('buffer');\x0d\n\x0d\n  // Only after this point can C++ use Buffer::New()\x0d\n  bufferBinding.setBufferPrototype(Buffer.prototype);\x0d\n  delete bufferBinding.setBufferPrototype;\x0d\n  delete bufferBinding.zeroFill;\x0d\n\x0d\n  ObjectDefineProperties(globalThis\x2C {\x0d\n    'Buffer': {\x0d\n      value: Buffer\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n    'atob': {\x0d\n      value: atob\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n    'btoa': {\x0d\n      value: btoa\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction createGlobalConsole(consoleFromVM) {\x0d\n  const consoleFromNode =\x0d\n    require('internal/console/global');\x0d\n  if (config.hasInspector) {\x0d\n    const inspector = require('internal/util/inspector');\x0d\n    // This will be exposed by `require('inspector').console` later.\x0d\n    inspector.consoleFromVM = consoleFromVM;\x0d\n    // TODO(joyeecheung): postpone this until the first time inspector\x0d\n    // is activated.\x0d\n    inspector.wrapConsole(consoleFromNode\x2C consoleFromVM);\x0d\n    const { setConsoleExtensionInstaller } = internalBinding('inspector');\x0d\n    // Setup inspector command line API.\x0d\n    setConsoleExtensionInstaller(inspector.installConsoleExtensions);\x0d\n  }\x0d\n  return consoleFromNode;\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-namespaces\x0d\nfunction exposeNamespace(target\x2C name\x2C namespaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: namespaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-interfaces\x0d\nfunction exposeInterface(target\x2C name\x2C interfaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: interfaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#define-the-operations\x0d\nfunction defineOperation(target\x2C name\x2C method) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value: method\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#Replaceable\x0d\nfunction defineReplacableAttribute(target\x2C name\x2C value) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value\x2C\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x2c63eb16b06,10,4267,4295,C0O4272C4O4293,,
code-creation,LazyCompile,10,140941,0x2c63eb17c76,52,get node:internal/bootstrap/node:112:6,0xa829694988,~
code-source-info,0x2c63eb17c76,10,3630,3901,C0O3673C14O3673C20O3713C29O3830C35O3852C43O3837C48O3872C49O3885C51O3896,,
code-creation,LazyCompile,10,141015,0x2c63eb17e9e,75,setupDebugEnv node:internal/bootstrap/pre_execution:249:23,0x2c63eb042d0,~
code-source-info,0x2c63eb17e9e,96,7933,8148,C0O7941C6O7941C11O7974C19O8002C24O8006C29O7975C34O8022C42O8026C48O8071C54O8071C59O8108C64O8121C69O8122C74O8147,,
code-creation,LazyCompile,10,141093,0x2c63eb182d6,159,initializeDebugEnv node:internal/util/debuglog:22:28,0x2e6f81619f0,~
script-source,22,node:internal/util/debuglog,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect\x2C format\x2C formatWithOptions } = require('internal/util/inspect');\x0d\n\x0d\n// `debugImpls` and `testEnabled` are deliberately not initialized so any call\x0d\n// to `debuglog()` before `initializeDebugEnv()` is called will throw.\x0d\nlet debugImpls;\x0d\nlet testEnabled;\x0d\n\x0d\n\x0d\n// `debugEnv` is initial value of process.env.NODE_DEBUG\x0d\nfunction initializeDebugEnv(debugEnv) {\x0d\n  debugImpls = ObjectCreate(null);\x0d\n  if (debugEnv) {\x0d\n    // This is run before any user code\x2C it's OK not to use primordials.\x0d\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g\x2C '\\\\$&')\x0d\n      .replaceAll('*'\x2C '.*')\x0d\n      .replaceAll('\x2C'\x2C '$|^');\x0d\n    const debugEnvRegex = new RegExp(`^${debugEnv}$`\x2C 'i');\x0d\n    testEnabled = (str) => RegExpPrototypeExec(debugEnvRegex\x2C str) !== null;\x0d\n  } else {\x0d\n    testEnabled = () => false;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Emits warning when user sets\x0d\n// NODE_DEBUG=http or NODE_DEBUG=http2.\x0d\nfunction emitWarningIfNeeded(set) {\x0d\n  if ('HTTP' === set || 'HTTP2' === set) {\x0d\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\x0d\n      'to \\'' + StringPrototypeToLowerCase(set) + '\\' can expose sensitive ' +\x0d\n      'data (such as passwords\x2C tokens and authentication headers) ' +\x0d\n      'in the resulting log.');\x0d\n  }\x0d\n}\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nfunction debuglogImpl(enabled\x2C set) {\x0d\n  if (debugImpls[set] === undefined) {\x0d\n    if (enabled) {\x0d\n      const pid = process.pid;\x0d\n      emitWarningIfNeeded(set);\x0d\n      debugImpls[set] = function debug(...args) {\x0d\n        const colors = process.stderr.hasColors && process.stderr.hasColors();\x0d\n        const msg = formatWithOptions({ colors }\x2C ...args);\x0d\n        const coloredPID = inspect(pid\x2C { colors });\x0d\n        process.stderr.write(format('%s %s: %s\\n'\x2C set\x2C coloredPID\x2C msg));\x0d\n      };\x0d\n    } else {\x0d\n      debugImpls[set] = noop;\x0d\n    }\x0d\n  }\x0d\n  return debugImpls[set];\x0d\n}\x0d\n\x0d\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG\x2C\x0d\n// so it needs to be called lazily in top scopes of internal modules\x0d\n// that may be loaded before these run time states are allowed to\x0d\n// be accessed.\x0d\nfunction debuglog(set\x2C cb) {\x0d\n  function init() {\x0d\n    set = StringPrototypeToUpperCase(set);\x0d\n    enabled = testEnabled(set);\x0d\n  }\x0d\n  let debug = (...args) => {\x0d\n    init();\x0d\n    // Only invokes debuglogImpl() when the debug function is\x0d\n    // called for the first time.\x0d\n    debug = debuglogImpl(enabled\x2C set);\x0d\n    if (typeof cb === 'function')\x0d\n      cb(debug);\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  let enabled;\x0d\n  let test = () => {\x0d\n    init();\x0d\n    test = () => enabled;\x0d\n    return enabled;\x0d\n  };\x0d\n  const logger = (...args) => {\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  ObjectDefineProperty(logger\x2C 'enabled'\x2C {\x0d\n    get() {\x0d\n      return test();\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n  return logger;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  debuglog\x2C\x0d\n  initializeDebugEnv\x0d\n};\x0d\n
code-source-info,0x2c63eb182d6,22,567,1024,C0O583C7O596C14O594C20O619C31O734C44O734C51O779C62O780C69O809C80O810C88O861C100O876C116O861C121O861C123O900C132O912C144O990C151O1002C158O1023,,
tick,0x7ff7c01f0a60,141302,0,0x0,3,0x7ff7c08240c0,0x2c63eb17ebb,0x2c63eb064e4,0x2c63eb02065
code-creation,LazyCompile,10,141320,0x2c63eb188de,49,setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:228:40,0x2c63eb04208,~
code-source-info,0x2c63eb188de,96,7477,7671,C0O7485C8O7490C14O7531C15O7538C16O7574C22O7574C27O7555C32O7626C38O7660C43O7660C48O7670,,
code-creation,LazyCompile,10,141370,0x2c63eb18af6,62,initializeReport node:internal/bootstrap/pre_execution:238:26,0x2c63eb04258,~
code-source-info,0x2c63eb18af6,96,7700,7907,C0O7700C8O7727C16O7727C21O7716C27O7766C42O7787C47O7861C55O7766C61O7906,,
code-creation,Eval,10,141526,0x2c63eb190a6,5, node:internal/process/report:1:1,0x2c63eb18eb0,~
script-source,98,node:internal/process/report,'use strict';\x0d\nconst {\x0d\n  ERR_SYNTHETIC\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst nr = internalBinding('report');\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n} = primordials;\x0d\nconst report = {\x0d\n  writeReport(file\x2C err) {\x0d\n    if (typeof file === 'object' && file !== null) {\x0d\n      err = file;\x0d\n      file = undefined;\x0d\n    } else if (file !== undefined) {\x0d\n      validateString(file\x2C 'file');\x0d\n    }\x0d\n\x0d\n    if (err === undefined) {\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    } else {\x0d\n      validateObject(err\x2C 'err');\x0d\n    }\x0d\n\x0d\n    return nr.writeReport('JavaScript API'\x2C 'API'\x2C file\x2C err);\x0d\n  }\x2C\x0d\n  getReport(err) {\x0d\n    if (err === undefined)\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    else\x0d\n      validateObject(err\x2C 'err');\x0d\n\x0d\n    return JSONParse(nr.getReport(err));\x0d\n  }\x2C\x0d\n  get directory() {\x0d\n    return nr.getDirectory();\x0d\n  }\x2C\x0d\n  set directory(dir) {\x0d\n    validateString(dir\x2C 'directory');\x0d\n    nr.setDirectory(dir);\x0d\n  }\x2C\x0d\n  get filename() {\x0d\n    return nr.getFilename();\x0d\n  }\x2C\x0d\n  set filename(name) {\x0d\n    validateString(name\x2C 'filename');\x0d\n    nr.setFilename(name);\x0d\n  }\x2C\x0d\n  get compact() {\x0d\n    return nr.getCompact();\x0d\n  }\x2C\x0d\n  set compact(b) {\x0d\n    validateBoolean(b\x2C 'compact');\x0d\n    nr.setCompact(b);\x0d\n  }\x2C\x0d\n  get signal() {\x0d\n    return nr.getSignal();\x0d\n  }\x2C\x0d\n  set signal(sig) {\x0d\n    validateSignalName(sig\x2C 'signal');\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler(sig);\x0d\n    nr.setSignal(sig);\x0d\n  }\x2C\x0d\n  get reportOnFatalError() {\x0d\n    return nr.shouldReportOnFatalError();\x0d\n  }\x2C\x0d\n  set reportOnFatalError(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnFatalError(trigger);\x0d\n  }\x2C\x0d\n  get reportOnSignal() {\x0d\n    return nr.shouldReportOnSignal();\x0d\n  }\x2C\x0d\n  set reportOnSignal(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnSignal(trigger);\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler();\x0d\n  }\x2C\x0d\n  get reportOnUncaughtException() {\x0d\n    return nr.shouldReportOnUncaughtException();\x0d\n  }\x2C\x0d\n  set reportOnUncaughtException(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnUncaughtException(trigger);\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addSignalHandler(sig) {\x0d\n  if (nr.shouldReportOnSignal()) {\x0d\n    if (typeof sig !== 'string')\x0d\n      sig = nr.getSignal();\x0d\n\x0d\n    process.on(sig\x2C signalHandler);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction removeSignalHandler() {\x0d\n  const sig = nr.getSignal();\x0d\n\x0d\n  if (sig)\x0d\n    process.removeListener(sig\x2C signalHandler);\x0d\n}\x0d\n\x0d\nfunction signalHandler(sig) {\x0d\n  nr.writeReport(sig\x2C 'Signal'\x2C null\x2C '');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addSignalHandler\x2C\x0d\n  report\x0d\n};\x0d\n
code-source-info,0x2c63eb190a6,98,0,2666,C0O0C4O2666,,
code-creation,Function,10,141666,0x2c63eb19bb6,306, node:internal/process/report:1:1,0x2c63eb19020,~
code-source-info,0x2c63eb19bb6,98,0,2666,C0O0C48O45C51O45C56O71C61O26C67O174C70O174C75O91C81O111C87O130C93O153C99O218C102O218C106O218C108O257C114O302C119O307C127O709C281O2611C288O2633C294O2654C300O2626C305O2665,,
code-creation,LazyCompile,10,141845,0x2c63eb1ba6e,21,initializeReportSignalHandlers node:internal/bootstrap/pre_execution:257:40,0x2c63eb04320,~
code-source-info,0x2c63eb1ba6e,96,8252,8352,C0O8289C6O8289C11O8268C16O8330C20O8351,,
code-creation,LazyCompile,10,141893,0x2c63eb1bb76,57,addSignalHandler node:internal/process/report:98:26,0x2c63eb190d8,~
code-source-info,0x2c63eb1bb76,98,2241,2394,C0O2252C5O2259C10O2259C16O2290C22O2326C27O2335C32O2335C38O2355C41O2363C49O2363C56O2393,,
code-creation,LazyCompile,10,141941,0x2c63eb1c13e,92,initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:263:46,0x2c63eb04370,~
code-source-info,0x2c63eb1c13e,96,8401,8675,C0O8401C8O8424C18O8424C23O8470C25O8488C26O8495C27O8501C35O8501C40O8531C45O8532C50O8593C58O8593C63O8571C69O8613C74O8621C79O8624C84O8621C91O8674,,
code-creation,LazyCompile,10,142002,0x2c63eb1c3ce,138,setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:393:37,0x2c63eb04540,~
code-source-info,0x2c63eb1c3ce,96,12545,13091,C0O12553C3O12565C8O12569C14O12608C20O12608C25O12654C33O12677C38O12681C46O12654C52O12708C53O12718C57O12708C61O12802C64O12817C73O12878C76O12886C81O12890C90O12938C93O12953C102O12997C108O12997C113O13021C118O13022C124O13062C127O13077C132O13062C137O13090,,
code-creation,LazyCompile,10,142068,0x2c63eb1c55e,21,assert node:internal/assert:11:16,0x2e6f81609c8,~
script-source,21,node:internal/assert,'use strict';\x0d\n\x0d\nlet error;\x0d\nfunction lazyError() {\x0d\n  if (!error) {\x0d\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\x0d\n  }\x0d\n  return error;\x0d\n}\x0d\n\x0d\nfunction assert(value\x2C message) {\x0d\n  if (!value) {\x0d\n    const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n    throw new ERR_INTERNAL_ASSERTION(message);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction fail(message) {\x0d\n  const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n  throw new ERR_INTERNAL_ASSERTION(message);\x0d\n}\x0d\n\x0d\nassert.fail = fail;\x0d\n\x0d\nmodule.exports = assert;\x0d\n
code-source-info,0x2c63eb1c55e,21,182,322,C0O204C4O254C7O254C11O272C13O278C18O272C20O321,,
code-creation,Eval,10,142550,0x2c63eb1d3d6,5, node:child_process:1:1,0x2c63eb1cf00,~
script-source,99,node:child_process,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeLastIndexOf\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  promisify\x2C\x0d\n  convertToValidSignal\x2C\x0d\n  createDeferredPromise\x2C\x0d\n  getSystemErrorName\x0d\n} = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nlet debug = require('internal/util/debuglog').debuglog(\x0d\n  'child_process'\x2C\x0d\n  (fn) => {\x0d\n    debug = fn;\x0d\n  }\x0d\n);\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { Pipe\x2C constants: PipeConstants } = internalBinding('pipe_wrap');\x0d\n\x0d\nconst {\x0d\n  AbortError\x2C\x0d\n  codes: errorCodes\x2C\x0d\n  genericNodeError\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_CHILD_PROCESS_IPC_REQUIRED\x2C\x0d\n  ERR_CHILD_PROCESS_STDIO_MAXBUFFER\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x2C\x0d\n} = errorCodes;\x0d\nconst { clearTimeout\x2C setTimeout } = require('timers');\x0d\nconst { getValidatedPath } = require('internal/fs/utils');\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst child_process = require('internal/child_process');\x0d\nconst {\x0d\n  getValidStdio\x2C\x0d\n  setupChannel\x2C\x0d\n  ChildProcess\x2C\x0d\n  stdioStringToArray\x0d\n} = child_process;\x0d\n\x0d\nconst MAX_BUFFER = 1024 * 1024;\x0d\n\x0d\n/**\x0d\n * Spawns a new Node.js process + fork.\x0d\n * @param {string|URL} modulePath\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   detached?: boolean;\x0d\n *   env?: Object;\x0d\n *   execPath?: string;\x0d\n *   execArgv?: string[];\x0d\n *   gid?: number;\x0d\n *   serialization?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   killSignal?: string | number;\x0d\n *   silent?: boolean;\x0d\n *   stdio?: Array | string;\x0d\n *   uid?: number;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   timeout?: number;\x0d\n *   }} [options]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction fork(modulePath\x2C args = []\x2C options) {\x0d\n  modulePath = getValidatedPath(modulePath\x2C 'modulePath');\x0d\n\x0d\n  // Get options and args arguments.\x0d\n  let execArgv;\x0d\n\x0d\n  if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('args'\x2C args);\x0d\n  } else if (!ArrayIsArray(args)) {\x0d\n    options = args;\x0d\n    args = [];\x0d\n  }\x0d\n\x0d\n  if (options == null) {\x0d\n    options = {};\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n  } else {\x0d\n    options = { ...options };\x0d\n  }\x0d\n\x0d\n  // Prepare arguments for fork:\x0d\n  execArgv = options.execArgv || process.execArgv;\x0d\n\x0d\n  if (execArgv === process.execArgv && process._eval != null) {\x0d\n    const index = ArrayPrototypeLastIndexOf(execArgv\x2C process._eval);\x0d\n    if (index > 0) {\x0d\n      // Remove the -e switch to avoid fork bombing ourselves.\x0d\n      execArgv = ArrayPrototypeSlice(execArgv);\x0d\n      ArrayPrototypeSplice(execArgv\x2C index - 1\x2C 2);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  args = [...execArgv\x2C modulePath\x2C ...args];\x0d\n\x0d\n  if (typeof options.stdio === 'string') {\x0d\n    options.stdio = stdioStringToArray(options.stdio\x2C 'ipc');\x0d\n  } else if (!ArrayIsArray(options.stdio)) {\x0d\n    // Use a separate fd=3 for the IPC channel. Inherit stdin\x2C stdout\x2C\x0d\n    // and stderr from the parent if silent isn't set.\x0d\n    options.stdio = stdioStringToArray(\x0d\n      options.silent ? 'pipe' : 'inherit'\x2C\x0d\n      'ipc');\x0d\n  } else if (!ArrayPrototypeIncludes(options.stdio\x2C 'ipc')) {\x0d\n    throw new ERR_CHILD_PROCESS_IPC_REQUIRED('options.stdio');\x0d\n  }\x0d\n\x0d\n  options.execPath = options.execPath || process.execPath;\x0d\n  options.shell = false;\x0d\n\x0d\n  return spawn(options.execPath\x2C args\x2C options);\x0d\n}\x0d\n\x0d\nfunction _forkChild(fd\x2C serializationMode) {\x0d\n  // set process.send()\x0d\n  const p = new Pipe(PipeConstants.IPC);\x0d\n  p.open(fd);\x0d\n  p.unref();\x0d\n  const control = setupChannel(process\x2C p\x2C serializationMode);\x0d\n  process.on('newListener'\x2C function onNewListener(name) {\x0d\n    if (name === 'message' || name === 'disconnect') control.refCounted();\x0d\n  });\x0d\n  process.on('removeListener'\x2C function onRemoveListener(name) {\x0d\n    if (name === 'message' || name === 'disconnect') control.unrefCounted();\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction normalizeExecArgs(command\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  // Make a shallow copy so we don't clobber the user's options object.\x0d\n  options = { ...options };\x0d\n  options.shell = typeof options.shell === 'string' ? options.shell : true;\x0d\n\x0d\n  return {\x0d\n    file: command\x2C\x0d\n    options: options\x2C\x0d\n    callback: callback\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a shell executing the given command.\x0d\n * @param {string} command\x0d\n * @param {{\x0d\n *   cmd?: string;\x0d\n *   env?: Object;\x0d\n *   encoding?: string;\x0d\n *   shell?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   timeout?: number;\x0d\n *   maxBuffer?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   error?: Error\x2C\x0d\n *   stdout?: string | Buffer\x2C\x0d\n *   stderr?: string | Buffer\x0d\n *   ) => any} [callback]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction exec(command\x2C options\x2C callback) {\x0d\n  const opts = normalizeExecArgs(command\x2C options\x2C callback);\x0d\n  return module.exports.execFile(opts.file\x2C\x0d\n                                 opts.options\x2C\x0d\n                                 opts.callback);\x0d\n}\x0d\n\x0d\nconst customPromiseExecFunction = (orig) => {\x0d\n  return (...args) => {\x0d\n    const { promise\x2C resolve\x2C reject } = createDeferredPromise();\x0d\n\x0d\n    promise.child = orig(...args\x2C (err\x2C stdout\x2C stderr) => {\x0d\n      if (err !== null) {\x0d\n        err.stdout = stdout;\x0d\n        err.stderr = stderr;\x0d\n        reject(err);\x0d\n      } else {\x0d\n        resolve({ stdout\x2C stderr });\x0d\n      }\x0d\n    });\x0d\n\x0d\n    return promise;\x0d\n  };\x0d\n};\x0d\n\x0d\nObjectDefineProperty(exec\x2C promisify.custom\x2C {\x0d\n  enumerable: false\x2C\x0d\n  value: customPromiseExecFunction(exec)\x0d\n});\x0d\n\x0d\n/**\x0d\n * Spawns the specified file as a shell.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   env?: Object;\x0d\n *   encoding?: string;\x0d\n *   timeout?: number;\x0d\n *   maxBuffer?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   windowsHide?: boolean;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   shell?: boolean | string;\x0d\n *   signal?: AbortSignal;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   error?: Error\x2C\x0d\n *   stdout?: string | Buffer\x2C\x0d\n *   stderr?: string | Buffer\x0d\n *   ) => any} [callback]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction execFile(file\x2C args = []\x2C options\x2C callback) {\x0d\n  if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args === 'object') {\x0d\n    if (!ArrayIsArray(args)) {\x0d\n      callback = options;\x0d\n      options = args;\x0d\n      args = [];\x0d\n    }\x0d\n  } else if (typeof args === 'function') {\x0d\n    callback = args;\x0d\n    options = {};\x0d\n    args = [];\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_VALUE('args'\x2C args);\x0d\n  }\x0d\n\x0d\n  if (options == null) {\x0d\n    options = {};\x0d\n  } else if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n  }\x0d\n\x0d\n  if (callback && typeof callback !== 'function') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('callback'\x2C callback);\x0d\n  }\x0d\n\x0d\n  options = {\x0d\n    encoding: 'utf8'\x2C\x0d\n    timeout: 0\x2C\x0d\n    maxBuffer: MAX_BUFFER\x2C\x0d\n    killSignal: 'SIGTERM'\x2C\x0d\n    cwd: null\x2C\x0d\n    env: null\x2C\x0d\n    shell: false\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  // Validate the timeout\x2C if present.\x0d\n  validateTimeout(options.timeout);\x0d\n\x0d\n  // Validate maxBuffer\x2C if present.\x0d\n  validateMaxBuffer(options.maxBuffer);\x0d\n\x0d\n  options.killSignal = sanitizeKillSignal(options.killSignal);\x0d\n\x0d\n  const child = spawn(file\x2C args\x2C {\x0d\n    cwd: options.cwd\x2C\x0d\n    env: options.env\x2C\x0d\n    gid: options.gid\x2C\x0d\n    shell: options.shell\x2C\x0d\n    signal: options.signal\x2C\x0d\n    uid: options.uid\x2C\x0d\n    windowsHide: !!options.windowsHide\x2C\x0d\n    windowsVerbatimArguments: !!options.windowsVerbatimArguments\x0d\n  });\x0d\n\x0d\n  let encoding;\x0d\n  const _stdout = [];\x0d\n  const _stderr = [];\x0d\n  if (options.encoding !== 'buffer' && Buffer.isEncoding(options.encoding)) {\x0d\n    encoding = options.encoding;\x0d\n  } else {\x0d\n    encoding = null;\x0d\n  }\x0d\n  let stdoutLen = 0;\x0d\n  let stderrLen = 0;\x0d\n  let killed = false;\x0d\n  let exited = false;\x0d\n  let timeoutId;\x0d\n\x0d\n  let ex = null;\x0d\n\x0d\n  let cmd = file;\x0d\n\x0d\n  function exithandler(code\x2C signal) {\x0d\n    if (exited) return;\x0d\n    exited = true;\x0d\n\x0d\n    if (timeoutId) {\x0d\n      clearTimeout(timeoutId);\x0d\n      timeoutId = null;\x0d\n    }\x0d\n\x0d\n    if (!callback) return;\x0d\n\x0d\n    // merge chunks\x0d\n    let stdout;\x0d\n    let stderr;\x0d\n    if (encoding ||\x0d\n      (\x0d\n        child.stdout &&\x0d\n        child.stdout.readableEncoding\x0d\n      )) {\x0d\n      stdout = ArrayPrototypeJoin(_stdout\x2C '');\x0d\n    } else {\x0d\n      stdout = Buffer.concat(_stdout);\x0d\n    }\x0d\n    if (encoding ||\x0d\n      (\x0d\n        child.stderr &&\x0d\n        child.stderr.readableEncoding\x0d\n      )) {\x0d\n      stderr = ArrayPrototypeJoin(_stderr\x2C '');\x0d\n    } else {\x0d\n      stderr = Buffer.concat(_stderr);\x0d\n    }\x0d\n\x0d\n    if (!ex && code === 0 && signal === null) {\x0d\n      callback(null\x2C stdout\x2C stderr);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (args.length !== 0)\x0d\n      cmd += ` ${ArrayPrototypeJoin(args\x2C ' ')}`;\x0d\n\x0d\n    if (!ex) {\x0d\n      ex = genericNodeError(`Command failed: ${cmd}\\n${stderr}`\x2C {\x0d\n        code: code < 0 ? getSystemErrorName(code) : code\x2C\x0d\n        killed: child.killed || killed\x2C\x0d\n        signal: signal\x0d\n      });\x0d\n    }\x0d\n\x0d\n    ex.cmd = cmd;\x0d\n    callback(ex\x2C stdout\x2C stderr);\x0d\n  }\x0d\n\x0d\n  function errorhandler(e) {\x0d\n    ex = e;\x0d\n\x0d\n    if (child.stdout)\x0d\n      child.stdout.destroy();\x0d\n\x0d\n    if (child.stderr)\x0d\n      child.stderr.destroy();\x0d\n\x0d\n    exithandler();\x0d\n  }\x0d\n\x0d\n  function kill() {\x0d\n    if (child.stdout)\x0d\n      child.stdout.destroy();\x0d\n\x0d\n    if (child.stderr)\x0d\n      child.stderr.destroy();\x0d\n\x0d\n    killed = true;\x0d\n    try {\x0d\n      child.kill(options.killSignal);\x0d\n    } catch (e) {\x0d\n      ex = e;\x0d\n      exithandler();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (options.timeout > 0) {\x0d\n    timeoutId = setTimeout(function delayedKill() {\x0d\n      kill();\x0d\n      timeoutId = null;\x0d\n    }\x2C options.timeout);\x0d\n  }\x0d\n\x0d\n  if (child.stdout) {\x0d\n    if (encoding)\x0d\n      child.stdout.setEncoding(encoding);\x0d\n\x0d\n    child.stdout.on('data'\x2C function onChildStdout(chunk) {\x0d\n      const encoding = child.stdout.readableEncoding;\x0d\n      const length = encoding ?\x0d\n        Buffer.byteLength(chunk\x2C encoding) :\x0d\n        chunk.length;\x0d\n      const slice = encoding ? StringPrototypeSlice :\x0d\n        (buf\x2C ...args) => buf.slice(...args);\x0d\n      stdoutLen += length;\x0d\n\x0d\n      if (stdoutLen > options.maxBuffer) {\x0d\n        const truncatedLen = options.maxBuffer - (stdoutLen - length);\x0d\n        ArrayPrototypePush(_stdout\x2C slice(chunk\x2C 0\x2C truncatedLen));\x0d\n\x0d\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stdout');\x0d\n        kill();\x0d\n      } else {\x0d\n        ArrayPrototypePush(_stdout\x2C chunk);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (child.stderr) {\x0d\n    if (encoding)\x0d\n      child.stderr.setEncoding(encoding);\x0d\n\x0d\n    child.stderr.on('data'\x2C function onChildStderr(chunk) {\x0d\n      const encoding = child.stderr.readableEncoding;\x0d\n      const length = encoding ?\x0d\n        Buffer.byteLength(chunk\x2C encoding) :\x0d\n        chunk.length;\x0d\n      stderrLen += length;\x0d\n\x0d\n      if (stderrLen > options.maxBuffer) {\x0d\n        const truncatedLen = options.maxBuffer - (stderrLen - length);\x0d\n        ArrayPrototypePush(_stderr\x2C\x0d\n                           chunk.slice(0\x2C truncatedLen));\x0d\n\x0d\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stderr');\x0d\n        kill();\x0d\n      } else {\x0d\n        _stderr.push(chunk);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  child.addListener('close'\x2C exithandler);\x0d\n  child.addListener('error'\x2C errorhandler);\x0d\n\x0d\n  return child;\x0d\n}\x0d\n\x0d\nObjectDefineProperty(execFile\x2C promisify.custom\x2C {\x0d\n  enumerable: false\x2C\x0d\n  value: customPromiseExecFunction(execFile)\x0d\n});\x0d\n\x0d\nfunction normalizeSpawnArguments(file\x2C args\x2C options) {\x0d\n  validateString(file\x2C 'file');\x0d\n\x0d\n  if (file.length === 0)\x0d\n    throw new ERR_INVALID_ARG_VALUE('file'\x2C file\x2C 'cannot be empty');\x0d\n\x0d\n  if (ArrayIsArray(args)) {\x0d\n    args = ArrayPrototypeSlice(args);\x0d\n  } else if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('args'\x2C 'object'\x2C args);\x0d\n  } else {\x0d\n    options = args;\x0d\n    args = [];\x0d\n  }\x0d\n\x0d\n  if (options === undefined)\x0d\n    options = {};\x0d\n  else\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n  let cwd = options.cwd;\x0d\n\x0d\n  // Validate the cwd\x2C if present.\x0d\n  if (cwd != null) {\x0d\n    cwd = getValidatedPath(cwd\x2C 'options.cwd');\x0d\n  }\x0d\n\x0d\n  // Validate detached\x2C if present.\x0d\n  if (options.detached != null) {\x0d\n    validateBoolean(options.detached\x2C 'options.detached');\x0d\n  }\x0d\n\x0d\n  // Validate the uid\x2C if present.\x0d\n  if (options.uid != null && !isInt32(options.uid)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.uid'\x2C 'int32'\x2C options.uid);\x0d\n  }\x0d\n\x0d\n  // Validate the gid\x2C if present.\x0d\n  if (options.gid != null && !isInt32(options.gid)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.gid'\x2C 'int32'\x2C options.gid);\x0d\n  }\x0d\n\x0d\n  // Validate the shell\x2C if present.\x0d\n  if (options.shell != null &&\x0d\n      typeof options.shell !== 'boolean' &&\x0d\n      typeof options.shell !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.shell'\x2C\x0d\n                                   ['boolean'\x2C 'string']\x2C options.shell);\x0d\n  }\x0d\n\x0d\n  // Validate argv0\x2C if present.\x0d\n  if (options.argv0 != null) {\x0d\n    validateString(options.argv0\x2C 'options.argv0');\x0d\n  }\x0d\n\x0d\n  // Validate windowsHide\x2C if present.\x0d\n  if (options.windowsHide != null) {\x0d\n    validateBoolean(options.windowsHide\x2C 'options.windowsHide');\x0d\n  }\x0d\n\x0d\n  // Validate windowsVerbatimArguments\x2C if present.\x0d\n  let { windowsVerbatimArguments } = options;\x0d\n  if (windowsVerbatimArguments != null) {\x0d\n    validateBoolean(windowsVerbatimArguments\x2C\x0d\n                    'options.windowsVerbatimArguments');\x0d\n  }\x0d\n\x0d\n  if (options.shell) {\x0d\n    const command = ArrayPrototypeJoin([file\x2C ...args]\x2C ' ');\x0d\n    // Set the shell\x2C switches\x2C and commands.\x0d\n    if (process.platform === 'win32') {\x0d\n      if (typeof options.shell === 'string')\x0d\n        file = options.shell;\x0d\n      else\x0d\n        file = process.env.comspec || 'cmd.exe';\x0d\n      // '/d /s /c' is used only for cmd.exe.\x0d\n      if (RegExpPrototypeTest(/^(?:.*\\\\)?cmd(?:\\.exe)?$/i\x2C file)) {\x0d\n        args = ['/d'\x2C '/s'\x2C '/c'\x2C `"${command}"`];\x0d\n        windowsVerbatimArguments = true;\x0d\n      } else {\x0d\n        args = ['-c'\x2C command];\x0d\n      }\x0d\n    } else {\x0d\n      if (typeof options.shell === 'string')\x0d\n        file = options.shell;\x0d\n      else if (process.platform === 'android')\x0d\n        file = '/system/bin/sh';\x0d\n      else\x0d\n        file = '/bin/sh';\x0d\n      args = ['-c'\x2C command];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (typeof options.argv0 === 'string') {\x0d\n    ArrayPrototypeUnshift(args\x2C options.argv0);\x0d\n  } else {\x0d\n    ArrayPrototypeUnshift(args\x2C file);\x0d\n  }\x0d\n\x0d\n  const env = options.env || process.env;\x0d\n  const envPairs = [];\x0d\n\x0d\n  // process.env.NODE_V8_COVERAGE always propagates\x2C making it possible to\x0d\n  // collect coverage for programs that spawn with white-listed environment.\x0d\n  if (process.env.NODE_V8_COVERAGE &&\x0d\n      !ObjectPrototypeHasOwnProperty(options.env || {}\x2C 'NODE_V8_COVERAGE')) {\x0d\n    env.NODE_V8_COVERAGE = process.env.NODE_V8_COVERAGE;\x0d\n  }\x0d\n\x0d\n  let envKeys = [];\x0d\n  // Prototype values are intentionally included.\x0d\n  for (const key in env) {\x0d\n    ArrayPrototypePush(envKeys\x2C key);\x0d\n  }\x0d\n\x0d\n  if (process.platform === 'win32') {\x0d\n    // On Windows env keys are case insensitive. Filter out duplicates\x2C\x0d\n    // keeping only the first one (in lexicographic order)\x0d\n    const sawKey = new SafeSet();\x0d\n    envKeys = ArrayPrototypeFilter(\x0d\n      ArrayPrototypeSort(envKeys)\x2C\x0d\n      (key) => {\x0d\n        const uppercaseKey = StringPrototypeToUpperCase(key);\x0d\n        if (sawKey.has(uppercaseKey)) {\x0d\n          return false;\x0d\n        }\x0d\n        sawKey.add(uppercaseKey);\x0d\n        return true;\x0d\n      }\x0d\n    );\x0d\n  }\x0d\n\x0d\n  for (const key of envKeys) {\x0d\n    const value = env[key];\x0d\n    if (value !== undefined) {\x0d\n      ArrayPrototypePush(envPairs\x2C `${key}=${value}`);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    // Make a shallow copy so we don't clobber the user's options object.\x0d\n    ...options\x2C\x0d\n    args\x2C\x0d\n    cwd\x2C\x0d\n    detached: !!options.detached\x2C\x0d\n    envPairs\x2C\x0d\n    file\x2C\x0d\n    windowsHide: !!options.windowsHide\x2C\x0d\n    windowsVerbatimArguments: !!windowsVerbatimArguments\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction abortChildProcess(child\x2C killSignal) {\x0d\n  if (!child)\x0d\n    return;\x0d\n  try {\x0d\n    if (child.kill(killSignal)) {\x0d\n      child.emit('error'\x2C new AbortError());\x0d\n    }\x0d\n  } catch (err) {\x0d\n    child.emit('error'\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a new process using the given `file`.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   env?: Object;\x0d\n *   argv0?: string;\x0d\n *   stdio?: Array | string;\x0d\n *   detached?: boolean;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   serialization?: string;\x0d\n *   shell?: boolean | string;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   windowsHide?: boolean;\x0d\n *   signal?: AbortSignal;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   }} [options]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction spawn(file\x2C args\x2C options) {\x0d\n  options = normalizeSpawnArguments(file\x2C args\x2C options);\x0d\n  validateTimeout(options.timeout);\x0d\n  validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  const killSignal = sanitizeKillSignal(options.killSignal);\x0d\n  const child = new ChildProcess();\x0d\n\x0d\n  debug('spawn'\x2C options);\x0d\n  child.spawn(options);\x0d\n\x0d\n  if (options.timeout > 0) {\x0d\n    let timeoutId = setTimeout(() => {\x0d\n      if (timeoutId) {\x0d\n        try {\x0d\n          child.kill(killSignal);\x0d\n        } catch (err) {\x0d\n          child.emit('error'\x2C err);\x0d\n        }\x0d\n        timeoutId = null;\x0d\n      }\x0d\n    }\x2C options.timeout);\x0d\n\x0d\n    child.once('exit'\x2C () => {\x0d\n      if (timeoutId) {\x0d\n        clearTimeout(timeoutId);\x0d\n        timeoutId = null;\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (options.signal) {\x0d\n    const signal = options.signal;\x0d\n    if (signal.aborted) {\x0d\n      process.nextTick(onAbortListener);\x0d\n    } else {\x0d\n      signal.addEventListener('abort'\x2C onAbortListener\x2C { once: true });\x0d\n      child.once('exit'\x2C\x0d\n                 () => signal.removeEventListener('abort'\x2C onAbortListener));\x0d\n    }\x0d\n\x0d\n    function onAbortListener() {\x0d\n      abortChildProcess(child\x2C killSignal);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return child;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a new process synchronously using the given `file`.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   argv0?: string;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   shell?: boolean | string;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {{\x0d\n *   pid: number;\x0d\n *   output: Array;\x0d\n *   stdout: Buffer | string;\x0d\n *   stderr: Buffer | string;\x0d\n *   status: number | null;\x0d\n *   signal: string | null;\x0d\n *   error: Error;\x0d\n *   }}\x0d\n */\x0d\nfunction spawnSync(file\x2C args\x2C options) {\x0d\n  options = {\x0d\n    maxBuffer: MAX_BUFFER\x2C\x0d\n    ...normalizeSpawnArguments(file\x2C args\x2C options)\x0d\n  };\x0d\n\x0d\n  debug('spawnSync'\x2C options);\x0d\n\x0d\n  // Validate the timeout\x2C if present.\x0d\n  validateTimeout(options.timeout);\x0d\n\x0d\n  // Validate maxBuffer\x2C if present.\x0d\n  validateMaxBuffer(options.maxBuffer);\x0d\n\x0d\n  // Validate and translate the kill signal\x2C if present.\x0d\n  options.killSignal = sanitizeKillSignal(options.killSignal);\x0d\n\x0d\n  options.stdio = getValidStdio(options.stdio || 'pipe'\x2C true).stdio;\x0d\n\x0d\n  if (options.input) {\x0d\n    const stdin = options.stdio[0] = { ...options.stdio[0] };\x0d\n    stdin.input = options.input;\x0d\n  }\x0d\n\x0d\n  // We may want to pass data in on any given fd\x2C ensure it is a valid buffer\x0d\n  for (let i = 0; i < options.stdio.length; i++) {\x0d\n    const input = options.stdio[i] && options.stdio[i].input;\x0d\n    if (input != null) {\x0d\n      const pipe = options.stdio[i] = { ...options.stdio[i] };\x0d\n      if (isArrayBufferView(input)) {\x0d\n        pipe.input = input;\x0d\n      } else if (typeof input === 'string') {\x0d\n        pipe.input = Buffer.from(input\x2C options.encoding);\x0d\n      } else {\x0d\n        throw new ERR_INVALID_ARG_TYPE(`options.stdio[${i}]`\x2C\x0d\n                                       ['Buffer'\x2C\x0d\n                                        'TypedArray'\x2C\x0d\n                                        'DataView'\x2C\x0d\n                                        'string']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return child_process.spawnSync(options);\x0d\n}\x0d\n\x0d\n\x0d\nfunction checkExecSyncError(ret\x2C args\x2C cmd) {\x0d\n  let err;\x0d\n  if (ret.error) {\x0d\n    err = ret.error;\x0d\n    ObjectAssign(err\x2C ret);\x0d\n  } else if (ret.status !== 0) {\x0d\n    let msg = 'Command failed: ';\x0d\n    msg += cmd || ArrayPrototypeJoin(args\x2C ' ');\x0d\n    if (ret.stderr && ret.stderr.length > 0)\x0d\n      msg += `\\n${ret.stderr.toString()}`;\x0d\n    err = genericNodeError(msg\x2C ret);\x0d\n  }\x0d\n  return err;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a file as a shell synchronously.\x0d\n * @param {string} command\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   windowsHide?: boolean;\x0d\n *   shell?: boolean | string;\x0d\n *   }} [options]\x0d\n * @returns {Buffer | string}\x0d\n */\x0d\nfunction execFileSync(command\x2C args\x2C options) {\x0d\n  options = normalizeSpawnArguments(command\x2C args\x2C options);\x0d\n\x0d\n  const inheritStderr = !options.stdio;\x0d\n  const ret = spawnSync(options.file\x2C\x0d\n                        ArrayPrototypeSlice(options.args\x2C 1)\x2C options);\x0d\n\x0d\n  if (inheritStderr && ret.stderr)\x0d\n    process.stderr.write(ret.stderr);\x0d\n\x0d\n  const err = checkExecSyncError(ret\x2C options.args\x2C undefined);\x0d\n\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return ret.stdout;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a shell executing the given `command` synchronously.\x0d\n * @param {string} command\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   shell?: string;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Buffer | string}\x0d\n */\x0d\nfunction execSync(command\x2C options) {\x0d\n  const opts = normalizeExecArgs(command\x2C options\x2C null);\x0d\n  const inheritStderr = !opts.options.stdio;\x0d\n\x0d\n  const ret = spawnSync(opts.file\x2C opts.options);\x0d\n\x0d\n  if (inheritStderr && ret.stderr)\x0d\n    process.stderr.write(ret.stderr);\x0d\n\x0d\n  const err = checkExecSyncError(ret\x2C opts.args\x2C command);\x0d\n\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return ret.stdout;\x0d\n}\x0d\n\x0d\n\x0d\nfunction validateTimeout(timeout) {\x0d\n  if (timeout != null && !(NumberIsInteger(timeout) && timeout >= 0)) {\x0d\n    throw new ERR_OUT_OF_RANGE('timeout'\x2C 'an unsigned integer'\x2C timeout);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction validateMaxBuffer(maxBuffer) {\x0d\n  if (maxBuffer != null && !(typeof maxBuffer === 'number' && maxBuffer >= 0)) {\x0d\n    throw new ERR_OUT_OF_RANGE('options.maxBuffer'\x2C\x0d\n                               'a positive number'\x2C\x0d\n                               maxBuffer);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction sanitizeKillSignal(killSignal) {\x0d\n  if (typeof killSignal === 'string' || typeof killSignal === 'number') {\x0d\n    return convertToValidSignal(killSignal);\x0d\n  } else if (killSignal != null) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.killSignal'\x2C\x0d\n                                   ['string'\x2C 'number']\x2C\x0d\n                                   killSignal);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  _forkChild\x2C\x0d\n  ChildProcess\x2C\x0d\n  exec\x2C\x0d\n  execFile\x2C\x0d\n  execFileSync\x2C\x0d\n  execSync\x2C\x0d\n  fork\x2C\x0d\n  spawn\x2C\x0d\n  spawnSync\x0d\n};\x0d\n
code-source-info,0x2c63eb1d3d6,99,0,25421,C0O0C4O25421,,
code-creation,Function,10,143727,0x2c63eb1de36,748, node:child_process:1:1,0x2c63eb1d350,~
code-source-info,0x2c63eb1de
tick,0x7ffdf67ba8cf,143813,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x2c63eb02fec,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
code-creation,LazyCompile,10,143949,0x2c63eb20406,82,debuglog node:internal/util/debuglog:71:18,0x2e6f8161d40,~
code-source-info,0x2c63eb20406,22,2302,3328,C0O2302C28O2432C32O2432C34O2847C35O2847C37O2870C41O2870C43O2963C48O3169C58O3190C63O3216C74O3169C79O3311C81O3325,,
code-creation,Eval,10,144640,0x2c63eb233ee,5, node:internal/child_process:1:1,0x2c63eb22cf0,~
script-source,100,node:internal/child_process,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeReduce\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  FunctionPrototype\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_HANDLE_TYPE\x2C\x0d\n    ERR_INVALID_SYNC_FORK_INPUT\x2C\x0d\n    ERR_IPC_CHANNEL_CLOSED\x2C\x0d\n    ERR_IPC_DISCONNECTED\x2C\x0d\n    ERR_IPC_ONE_PIPE\x2C\x0d\n    ERR_IPC_SYNC_FORK\x2C\x0d\n    ERR_MISSING_ARGS\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst EventEmitter = require('events');\x0d\nconst net = require('net');\x0d\nconst dgram = require('dgram');\x0d\nconst inspect = require('internal/util/inspect').inspect;\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst { Process } = internalBinding('process_wrap');\x0d\nconst {\x0d\n  WriteWrap\x2C\x0d\n  kReadBytesOrError\x2C\x0d\n  kArrayBufferOffset\x2C\x0d\n  kLastWriteWasAsync\x2C\x0d\n  streamBaseState\x0d\n} = internalBinding('stream_wrap');\x0d\nconst { Pipe\x2C constants: PipeConstants } = internalBinding('pipe_wrap');\x0d\nconst { TCP } = internalBinding('tcp_wrap');\x0d\nconst { TTY } = internalBinding('tty_wrap');\x0d\nconst { UDP } = internalBinding('udp_wrap');\x0d\nconst SocketList = require('internal/socket_list');\x0d\nconst { owner_symbol } = require('internal/async_hooks').symbols;\x0d\nconst { convertToValidSignal\x2C deprecate } = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst spawn_sync = internalBinding('spawn_sync');\x0d\nconst { kStateSymbol } = require('internal/dgram');\x0d\n\x0d\nconst {\x0d\n  UV_EACCES\x2C\x0d\n  UV_EAGAIN\x2C\x0d\n  UV_EINVAL\x2C\x0d\n  UV_EMFILE\x2C\x0d\n  UV_ENFILE\x2C\x0d\n  UV_ENOENT\x2C\x0d\n  UV_ENOSYS\x2C\x0d\n  UV_ESRCH\x0d\n} = internalBinding('uv');\x0d\n\x0d\nconst { SocketListSend\x2C SocketListReceive } = SocketList;\x0d\n\x0d\n// Lazy loaded for startup performance and to allow monkey patching of\x0d\n// internalBinding('http_parser').HTTPParser.\x0d\nlet freeParser;\x0d\nlet HTTPParser;\x0d\n\x0d\nconst MAX_HANDLE_RETRANSMISSIONS = 3;\x0d\nconst kChannelHandle = Symbol('kChannelHandle');\x0d\nconst kIsUsedAsStdio = Symbol('kIsUsedAsStdio');\x0d\nconst kPendingMessages = Symbol('kPendingMessages');\x0d\n\x0d\n// This object contain function to convert TCP objects to native handle objects\x0d\n// and back again.\x0d\nconst handleConversion = {\x0d\n  'net.Native': {\x0d\n    simultaneousAccepts: true\x2C\x0d\n\x0d\n    send(message\x2C handle\x2C options) {\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      emit(handle);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'net.Server': {\x0d\n    simultaneousAccepts: true\x2C\x0d\n\x0d\n    send(message\x2C server\x2C options) {\x0d\n      return server._handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const server = new net.Server();\x0d\n      server.listen(handle\x2C () => {\x0d\n        emit(server);\x0d\n      });\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'net.Socket': {\x0d\n    send(message\x2C socket\x2C options) {\x0d\n      if (!socket._handle)\x0d\n        return;\x0d\n\x0d\n      // If the socket was created by net.Server\x0d\n      if (socket.server) {\x0d\n        // The worker should keep track of the socket\x0d\n        message.key = socket.server._connectionKey;\x0d\n\x0d\n        const firstTime = !this[kChannelHandle].sockets.send[message.key];\x0d\n        const socketList = getSocketList('send'\x2C this\x2C message.key);\x0d\n\x0d\n        // The server should no longer expose a .connection property\x0d\n        // and when asked to close it should query the socket status from\x0d\n        // the workers\x0d\n        if (firstTime) socket.server._setupWorker(socketList);\x0d\n\x0d\n        // Act like socket is detached\x0d\n        if (!options.keepOpen)\x0d\n          socket.server._connections--;\x0d\n      }\x0d\n\x0d\n      const handle = socket._handle;\x0d\n\x0d\n      // Remove handle from socket object\x2C it will be closed when the socket\x0d\n      // will be sent\x0d\n      if (!options.keepOpen) {\x0d\n        handle.onread = nop;\x0d\n        socket._handle = null;\x0d\n        socket.setTimeout(0);\x0d\n\x0d\n        if (freeParser === undefined)\x0d\n          freeParser = require('_http_common').freeParser;\x0d\n        if (HTTPParser === undefined)\x0d\n          HTTPParser = require('_http_common').HTTPParser;\x0d\n\x0d\n        // In case of an HTTP connection socket\x2C release the associated\x0d\n        // resources\x0d\n        if (socket.parser && socket.parser instanceof HTTPParser) {\x0d\n          freeParser(socket.parser\x2C null\x2C socket);\x0d\n          if (socket._httpMessage)\x0d\n            socket._httpMessage.detachSocket(socket);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    postSend(message\x2C handle\x2C options\x2C callback\x2C target) {\x0d\n      // Store the handle after successfully sending it\x2C so it can be closed\x0d\n      // when the NODE_HANDLE_ACK is received. If the handle could not be sent\x2C\x0d\n      // just close it.\x0d\n      if (handle && !options.keepOpen) {\x0d\n        if (target) {\x0d\n          // There can only be one _pendingMessage as passing handles are\x0d\n          // processed one at a time: handles are stored in _handleQueue while\x0d\n          // waiting for the NODE_HANDLE_ACK of the current passing handle.\x0d\n          assert(!target._pendingMessage);\x0d\n          target._pendingMessage =\x0d\n              { callback\x2C message\x2C handle\x2C options\x2C retransmissions: 0 };\x0d\n        } else {\x0d\n          handle.close();\x0d\n        }\x0d\n      }\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const socket = new net.Socket({\x0d\n        handle: handle\x2C\x0d\n        readable: true\x2C\x0d\n        writable: true\x0d\n      });\x0d\n\x0d\n      // If the socket was created by net.Server we will track the socket\x0d\n      if (message.key) {\x0d\n\x0d\n        // Add socket to connections list\x0d\n        const socketList = getSocketList('got'\x2C this\x2C message.key);\x0d\n        socketList.add({\x0d\n          socket: socket\x0d\n        });\x0d\n      }\x0d\n\x0d\n      emit(socket);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'dgram.Native': {\x0d\n    simultaneousAccepts: false\x2C\x0d\n\x0d\n    send(message\x2C handle\x2C options) {\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      emit(handle);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'dgram.Socket': {\x0d\n    simultaneousAccepts: false\x2C\x0d\n\x0d\n    send(message\x2C socket\x2C options) {\x0d\n      message.dgramType = socket.type;\x0d\n\x0d\n      return socket[kStateSymbol].handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const socket = new dgram.Socket(message.dgramType);\x0d\n\x0d\n      socket.bind(handle\x2C () => {\x0d\n        emit(socket);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction stdioStringToArray(stdio\x2C channel) {\x0d\n  const options = [];\x0d\n\x0d\n  switch (stdio) {\x0d\n    case 'ignore':\x0d\n    case 'overlapped':\x0d\n    case 'pipe': ArrayPrototypePush(options\x2C stdio\x2C stdio\x2C stdio); break;\x0d\n    case 'inherit': ArrayPrototypePush(options\x2C 0\x2C 1\x2C 2); break;\x0d\n    default:\x0d\n      throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n  }\x0d\n\x0d\n  if (channel) ArrayPrototypePush(options\x2C channel);\x0d\n\x0d\n  return options;\x0d\n}\x0d\n\x0d\nfunction ChildProcess() {\x0d\n  FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n\x0d\n  this._closesNeeded = 1;\x0d\n  this._closesGot = 0;\x0d\n  this.connected = false;\x0d\n\x0d\n  this.signalCode = null;\x0d\n  this.exitCode = null;\x0d\n  this.killed = false;\x0d\n  this.spawnfile = null;\x0d\n\x0d\n  this._handle = new Process();\x0d\n  this._handle[owner_symbol] = this;\x0d\n\x0d\n  this._handle.onexit = (exitCode\x2C signalCode) => {\x0d\n    if (signalCode) {\x0d\n      this.signalCode = signalCode;\x0d\n    } else {\x0d\n      this.exitCode = exitCode;\x0d\n    }\x0d\n\x0d\n    if (this.stdin) {\x0d\n      this.stdin.destroy();\x0d\n    }\x0d\n\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n\x0d\n    if (exitCode < 0) {\x0d\n      const syscall = this.spawnfile ? 'spawn ' + this.spawnfile : 'spawn';\x0d\n      const err = errnoException(exitCode\x2C syscall);\x0d\n\x0d\n      if (this.spawnfile)\x0d\n        err.path = this.spawnfile;\x0d\n\x0d\n      err.spawnargs = ArrayPrototypeSlice(this.spawnargs\x2C 1);\x0d\n      this.emit('error'\x2C err);\x0d\n    } else {\x0d\n      this.emit('exit'\x2C this.exitCode\x2C this.signalCode);\x0d\n    }\x0d\n\x0d\n    // If any of the stdio streams have not been touched\x2C\x0d\n    // then pull all the data through so that it can get the\x0d\n    // eof and emit a 'close' event.\x0d\n    // Do it on nextTick so that the user has one last chance\x0d\n    // to consume the output\x2C if for example they only want to\x0d\n    // start reading the data once the process exits.\x0d\n    process.nextTick(flushStdio\x2C this);\x0d\n\x0d\n    maybeClose(this);\x0d\n  };\x0d\n}\x0d\nObjectSetPrototypeOf(ChildProcess.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(ChildProcess\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction flushStdio(subprocess) {\x0d\n  const stdio = subprocess.stdio;\x0d\n\x0d\n  if (stdio == null) return;\x0d\n\x0d\n  for (let i = 0; i < stdio.length; i++) {\x0d\n    const stream = stdio[i];\x0d\n    // TODO(addaleax): This doesn't necessarily account for all the ways in\x0d\n    // which data can be read from a stream\x2C e.g. being consumed on the\x0d\n    // native layer directly as a StreamBase.\x0d\n    if (!stream || !stream.readable || stream[kIsUsedAsStdio]) {\x0d\n      continue;\x0d\n    }\x0d\n    stream.resume();\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction createSocket(pipe\x2C readable) {\x0d\n  return net.Socket({ handle: pipe\x2C readable\x2C writable: !readable });\x0d\n}\x0d\n\x0d\n\x0d\nfunction getHandleWrapType(stream) {\x0d\n  if (stream instanceof Pipe) return 'pipe';\x0d\n  if (stream instanceof TTY) return 'tty';\x0d\n  if (stream instanceof TCP) return 'tcp';\x0d\n  if (stream instanceof UDP) return 'udp';\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction closePendingHandle(target) {\x0d\n  target._pendingMessage.handle.close();\x0d\n  target._pendingMessage = null;\x0d\n}\x0d\n\x0d\n\x0d\nChildProcess.prototype.spawn = function(options) {\x0d\n  let i = 0;\x0d\n\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  // If no `stdio` option was given - use default\x0d\n  let stdio = options.stdio || 'pipe';\x0d\n\x0d\n  stdio = getValidStdio(stdio\x2C false);\x0d\n\x0d\n  const ipc = stdio.ipc;\x0d\n  const ipcFd = stdio.ipcFd;\x0d\n  stdio = options.stdio = stdio.stdio;\x0d\n\x0d\n\x0d\n  validateOneOf(options.serialization\x2C 'options.serialization'\x2C\x0d\n                [undefined\x2C 'json'\x2C 'advanced']);\x0d\n  const serialization = options.serialization || 'json';\x0d\n\x0d\n  if (ipc !== undefined) {\x0d\n    // Let child process know about opened IPC channel\x0d\n    if (options.envPairs === undefined)\x0d\n      options.envPairs = [];\x0d\n    else\x0d\n      validateArray(options.envPairs\x2C 'options.envPairs');\x0d\n\x0d\n    ArrayPrototypePush(options.envPairs\x2C `NODE_CHANNEL_FD=${ipcFd}`);\x0d\n    ArrayPrototypePush(options.envPairs\x2C\x0d\n                       `NODE_CHANNEL_SERIALIZATION_MODE=${serialization}`);\x0d\n  }\x0d\n\x0d\n  validateString(options.file\x2C 'options.file');\x0d\n  this.spawnfile = options.file;\x0d\n\x0d\n  if (options.args === undefined) {\x0d\n    this.spawnargs = [];\x0d\n  } else {\x0d\n    validateArray(options.args\x2C 'options.args');\x0d\n    this.spawnargs = options.args;\x0d\n  }\x0d\n\x0d\n  const err = this._handle.spawn(options);\x0d\n\x0d\n  // Run-time errors should emit an error\x2C not throw an exception.\x0d\n  if (err === UV_EACCES ||\x0d\n      err === UV_EAGAIN ||\x0d\n      err === UV_EMFILE ||\x0d\n      err === UV_ENFILE ||\x0d\n      err === UV_ENOENT) {\x0d\n    process.nextTick(onErrorNT\x2C this\x2C err);\x0d\n\x0d\n    // There is no point in continuing when we've hit EMFILE or ENFILE\x0d\n    // because we won't be able to set up the stdio file descriptors.\x0d\n    if (err === UV_EMFILE || err === UV_ENFILE)\x0d\n      return err;\x0d\n  } else if (err) {\x0d\n    // Close all opened fds on error\x0d\n    for (i = 0; i < stdio.length; i++) {\x0d\n      const stream = stdio[i];\x0d\n      if (stream.type === 'pipe') {\x0d\n        stream.handle.close();\x0d\n      }\x0d\n    }\x0d\n\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n    throw errnoException(err\x2C 'spawn');\x0d\n  } else {\x0d\n    process.nextTick(onSpawnNT\x2C this);\x0d\n  }\x0d\n\x0d\n  this.pid = this._handle.pid;\x0d\n\x0d\n  for (i = 0; i < stdio.length; i++) {\x0d\n    const stream = stdio[i];\x0d\n    if (stream.type === 'ignore') continue;\x0d\n\x0d\n    if (stream.ipc) {\x0d\n      this._closesNeeded++;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // The stream is already cloned and piped\x2C thus stop its readable side\x2C\x0d\n    // otherwise we might attempt to read from the stream when at the same time\x0d\n    // the child process does.\x0d\n    if (stream.type === 'wrap') {\x0d\n      stream.handle.reading = false;\x0d\n      stream.handle.readStop();\x0d\n      stream._stdio.pause();\x0d\n      stream._stdio.readableFlowing = false;\x0d\n      stream._stdio._readableState.reading = false;\x0d\n      stream._stdio[kIsUsedAsStdio] = true;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    if (stream.handle) {\x0d\n      // When i === 0 - we're dealing with stdin\x0d\n      // (which is the only one writable pipe).\x0d\n      stream.socket = createSocket(this.pid !== 0 ?\x0d\n        stream.handle : null\x2C i > 0);\x0d\n\x0d\n      if (i > 0 && this.pid !== 0) {\x0d\n        this._closesNeeded++;\x0d\n        stream.socket.on('close'\x2C () => {\x0d\n          maybeClose(this);\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this.stdin = stdio.length >= 1 && stdio[0].socket !== undefined ?\x0d\n    stdio[0].socket : null;\x0d\n  this.stdout = stdio.length >= 2 && stdio[1].socket !== undefined ?\x0d\n    stdio[1].socket : null;\x0d\n  this.stderr = stdio.length >= 3 && stdio[2].socket !== undefined ?\x0d\n    stdio[2].socket : null;\x0d\n\x0d\n  this.stdio = [];\x0d\n\x0d\n  for (i = 0; i < stdio.length; i++)\x0d\n    ArrayPrototypePush(this.stdio\x2C\x0d\n                       stdio[i].socket === undefined ? null : stdio[i].socket);\x0d\n\x0d\n  // Add .send() method and start listening for IPC data\x0d\n  if (ipc !== undefined) setupChannel(this\x2C ipc\x2C serialization);\x0d\n\x0d\n  return err;\x0d\n};\x0d\n\x0d\n\x0d\nfunction onErrorNT(self\x2C err) {\x0d\n  self._handle.onexit(err);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onSpawnNT(self) {\x0d\n  self.emit('spawn');\x0d\n}\x0d\n\x0d\n\x0d\nChildProcess.prototype.kill = function(sig) {\x0d\n\x0d\n  const signal = sig === 0 ? sig :\x0d\n    convertToValidSignal(sig === undefined ? 'SIGTERM' : sig);\x0d\n\x0d\n  if (this._handle) {\x0d\n    const err = this._handle.kill(signal);\x0d\n    if (err === 0) {\x0d\n      /* Success. */\x0d\n      this.killed = true;\x0d\n      return true;\x0d\n    }\x0d\n    if (err === UV_ESRCH) {\x0d\n      /* Already dead. */\x0d\n    } else if (err === UV_EINVAL || err === UV_ENOSYS) {\x0d\n      /* The underlying platform doesn't support this signal. */\x0d\n      throw errnoException(err\x2C 'kill');\x0d\n    } else {\x0d\n      /* Other error\x2C almost certainly EPERM. */\x0d\n      this.emit('error'\x2C errnoException(err\x2C 'kill'));\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /* Kill didn't succeed. */\x0d\n  return false;\x0d\n};\x0d\n\x0d\n\x0d\nChildProcess.prototype.ref = function() {\x0d\n  if (this._handle) this._handle.ref();\x0d\n};\x0d\n\x0d\n\x0d\nChildProcess.prototype.unref = function() {\x0d\n  if (this._handle) this._handle.unref();\x0d\n};\x0d\n\x0d\nclass Control extends EventEmitter {\x0d\n  #channel = null;\x0d\n  #refs = 0;\x0d\n  #refExplicitlySet = false;\x0d\n\x0d\n  constructor(channel) {\x0d\n    super();\x0d\n    this.#channel = channel;\x0d\n    this[kPendingMessages] = [];\x0d\n  }\x0d\n\x0d\n  // The methods keeping track of the counter are being used to track the\x0d\n  // listener count on the child process object as well as when writes are\x0d\n  // in progress. Once the user has explicitly requested a certain state\x2C these\x0d\n  // methods become no-ops in order to not interfere with the user's intentions.\x0d\n  refCounted() {\x0d\n    if (++this.#refs === 1 && !this.#refExplicitlySet) {\x0d\n      this.#channel.ref();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  unrefCounted() {\x0d\n    if (--this.#refs === 0 && !this.#refExplicitlySet) {\x0d\n      this.#channel.unref();\x0d\n      this.emit('unref');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  ref() {\x0d\n    this.#refExplicitlySet = true;\x0d\n    this.#channel.ref();\x0d\n  }\x0d\n\x0d\n  unref() {\x0d\n    this.#refExplicitlySet = true;\x0d\n    this.#channel.unref();\x0d\n  }\x0d\n\x0d\n  get fd() {\x0d\n    return this.#channel ? this.#channel.fd : undefined;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst channelDeprecationMsg = '_channel is deprecated. ' +\x0d\n                              'Use ChildProcess.channel instead.';\x0d\n\x0d\nlet serialization;\x0d\nfunction setupChannel(target\x2C channel\x2C serializationMode) {\x0d\n  const control = new Control(channel);\x0d\n  target.channel = control;\x0d\n  target[kChannelHandle] = channel;\x0d\n\x0d\n  ObjectDefineProperty(target\x2C '_channel'\x2C {\x0d\n    get: deprecate(() => {\x0d\n      return target.channel;\x0d\n    }\x2C channelDeprecationMsg\x2C 'DEP0129')\x2C\x0d\n    set: deprecate((val) => {\x0d\n      target.channel = val;\x0d\n    }\x2C channelDeprecationMsg\x2C 'DEP0129')\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x0d\n  });\x0d\n\x0d\n  target._handleQueue = null;\x0d\n  target._pendingMessage = null;\x0d\n\x0d\n  if (serialization === undefined)\x0d\n    serialization = require('internal/child_process/serialization');\x0d\n  const {\x0d\n    initMessageChannel\x2C\x0d\n    parseChannelMessages\x2C\x0d\n    writeChannelMessage\x0d\n  } = serialization[serializationMode];\x0d\n\x0d\n  let pendingHandle = null;\x0d\n  initMessageChannel(channel);\x0d\n  channel.pendingHandle = null;\x0d\n  channel.onread = function(arrayBuffer) {\x0d\n    const recvHandle = channel.pendingHandle;\x0d\n    channel.pendingHandle = null;\x0d\n    if (arrayBuffer) {\x0d\n      const nread = streamBaseState[kReadBytesOrError];\x0d\n      const offset = streamBaseState[kArrayBufferOffset];\x0d\n      const pool = new Uint8Array(arrayBuffer\x2C offset\x2C nread);\x0d\n      if (recvHandle)\x0d\n        pendingHandle = recvHandle;\x0d\n\x0d\n      for (const message of parseChannelMessages(channel\x2C pool)) {\x0d\n        // There will be at most one NODE_HANDLE message in every chunk we\x0d\n        // read because SCM_RIGHTS messages don't get coalesced. Make sure\x0d\n        // that we deliver the handle with the right message however.\x0d\n        if (isInternal(message)) {\x0d\n          if (message.cmd === 'NODE_HANDLE') {\x0d\n            handleMessage(message\x2C pendingHandle\x2C true);\x0d\n            pendingHandle = null;\x0d\n          } else {\x0d\n            handleMessage(message\x2C undefined\x2C true);\x0d\n          }\x0d\n        } else {\x0d\n          handleMessage(message\x2C undefined\x2C false);\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      this.buffering = false;\x0d\n      target.disconnect();\x0d\n      channel.onread = nop;\x0d\n      channel.close();\x0d\n      target.channel = null;\x0d\n      maybeClose(target);\x0d\n    }\x0d\n  };\x0d\n\x0d\n  // Object where socket lists will live\x0d\n  channel.sockets = { got: {}\x2C send: {} };\x0d\n\x0d\n  // Handlers will go through this\x0d\n  target.on('internalMessage'\x2C function(message\x2C handle) {\x0d\n    // Once acknowledged - continue sending handles.\x0d\n    if (message.cmd === 'NODE_HANDLE_ACK' ||\x0d\n        message.cmd === 'NODE_HANDLE_NACK') {\x0d\n\x0d\n      if (target._pendingMessage) {\x0d\n        if (message.cmd === 'NODE_HANDLE_ACK') {\x0d\n          closePendingHandle(target);\x0d\n        } else if (target._pendingMessage.retransmissions++ ===\x0d\n                   MAX_HANDLE_RETRANSMISSIONS) {\x0d\n          closePendingHandle(target);\x0d\n          process.emitWarning('Handle did not reach the receiving process ' +\x0d\n                              'correctly'\x2C 'SentHandleNotReceivedWarning');\x0d\n        }\x0d\n      }\x0d\n\x0d\n      assert(ArrayIsArray(target._handleQueue));\x0d\n      const queue = target._handleQueue;\x0d\n      target._handleQueue = null;\x0d\n\x0d\n      if (target._pendingMessage) {\x0d\n        target._send(target._pendingMessage.message\x2C\x0d\n                     target._pendingMessage.handle\x2C\x0d\n                     target._pendingMessage.options\x2C\x0d\n                     target._pendingMessage.callback);\x0d\n      }\x0d\n\x0d\n      for (let i = 0; i < queue.length; i++) {\x0d\n        const args = queue[i];\x0d\n        target._send(args.message\x2C args.handle\x2C args.options\x2C args.callback);\x0d\n      }\x0d\n\x0d\n      // Process a pending disconnect (if any).\x0d\n      if (!target.connected && target.channel && !target._handleQueue)\x0d\n        target._disconnect();\x0d\n\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (message.cmd !== 'NODE_HANDLE') return;\x0d\n\x0d\n    // It is possible that the handle is not received because of some error on\x0d\n    // ancillary data reception such as MSG_CTRUNC. In this case\x2C report the\x0d\n    // sender about it by sending a NODE_HANDLE_NACK message.\x0d\n    if (!handle)\x0d\n      return target._send({ cmd: 'NODE_HANDLE_NACK' }\x2C null\x2C true);\x0d\n\x0d\n    // Acknowledge handle receival. Don't emit error events (for example if\x0d\n    // the other side has disconnected) because this call to send() is not\x0d\n    // initiated by the user and it shouldn't be fatal to be unable to ACK\x0d\n    // a message.\x0d\n    target._send({ cmd: 'NODE_HANDLE_ACK' }\x2C null\x2C true);\x0d\n\x0d\n    const obj = handleConversion[message.type];\x0d\n\x0d\n    // Update simultaneous accepts on Windows\x0d\n    if (process.platform === 'win32') {\x0d\n      handle.setSimultaneousAccepts(false);\x0d\n    }\x0d\n\x0d\n    // Convert handle object\x0d\n    obj.got.call(this\x2C message\x2C handle\x2C (handle) => {\x0d\n      handleMessage(message.msg\x2C handle\x2C isInternal(message.msg));\x0d\n    });\x0d\n  });\x0d\n\x0d\n  target.on('newListener'\x2C function() {\x0d\n\x0d\n    process.nextTick(() => {\x0d\n      if (!target.channel || !target.listenerCount('message'))\x0d\n        return;\x0d\n\x0d\n      const messages = target.channel[kPendingMessages];\x0d\n      const { length } = messages;\x0d\n      if (!length) return;\x0d\n\x0d\n      for (let i = 0; i < length; i++) {\x0d\n        ReflectApply(target.emit\x2C target\x2C messages[i]);\x0d\n      }\x0d\n\x0d\n      target.channel[kPendingMessages] = [];\x0d\n    });\x0d\n  });\x0d\n\x0d\n  target.send = function(message\x2C handle\x2C options\x2C callback) {\x0d\n    if (typeof handle === 'function') {\x0d\n      callback = handle;\x0d\n      handle = undefined;\x0d\n      options = undefined;\x0d\n    } else if (typeof options === 'function') {\x0d\n      callback = options;\x0d\n      options = undefined;\x0d\n    } else if (options !== undefined) {\x0d\n      validateObject(options\x2C 'options');\x0d\n    }\x0d\n\x0d\n    options = { swallowErrors: false\x2C ...options };\x0d\n\x0d\n    if (this.connected) {\x0d\n      return this._send(message\x2C handle\x2C options\x2C callback);\x0d\n    }\x0d\n    const ex = new ERR_IPC_CHANNEL_CLOSED();\x0d\n    if (typeof callback === 'function') {\x0d\n      process.nextTick(callback\x2C ex);\x0d\n    } else {\x0d\n      process.nextTick(() => this.emit('error'\x2C ex));\x0d\n    }\x0d\n    return false;\x0d\n  };\x0d\n\x0d\n  target._send = function(message\x2C handle\x2C options\x2C callback) {\x0d\n    assert(this.connected || this.channel);\x0d\n\x0d\n    if (message === undefined)\x0d\n      throw new ERR_MISSING_ARGS('message');\x0d\n\x0d\n    // Non-serializable messages should not reach the remote\x0d\n    // end point; as any failure in the stringification there\x0d\n    // will result in error message that is weakly consumable.\x0d\n    // So perform a final check on message prior to sending.\x0d\n    if (typeof message !== 'string' &&\x0d\n        typeof message !== 'object' &&\x0d\n        typeof message !== 'number' &&\x0d\n        typeof message !== 'boolean') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'message'\x2C ['string'\x2C 'object'\x2C 'number'\x2C 'boolean']\x2C message);\x0d\n    }\x0d\n\x0d\n    // Support legacy function signature\x0d\n    if (typeof options === 'boolean') {\x0d\n      options = { swallowErrors: options };\x0d\n    }\x0d\n\x0d\n    let obj;\x0d\n\x0d\n    // Package messages with a handle object\x0d\n    if (handle) {\x0d\n      // This message will be handled by an internalMessage event handler\x0d\n      message = {\x0d\n        cmd: 'NODE_HANDLE'\x2C\x0d\n        type: null\x2C\x0d\n        msg: message\x0d\n      };\x0d\n\x0d\n      if (handle instanceof net.Socket) {\x0d\n        message.type = 'net.Socket';\x0d\n      } else if (handle instanceof net.Server) {\x0d\n        message.type = 'net.Server';\x0d\n      } else if (handle instanceof TCP || handle instanceof Pipe) {\x0d\n        message.type = 'net.Native';\x0d\n      } else if (handle instanceof dgram.Socket) {\x0d\n        message.type = 'dgram.Socket';\x0d\n      } else if (handle instanceof UDP) {\x0d\n        message.type = 'dgram.Native';\x0d\n      } else {\x0d\n        throw new ERR_INVALID_HANDLE_TYPE();\x0d\n      }\x0d\n\x0d\n      // Queue-up message and handle if we haven't received ACK yet.\x0d\n      if (this._handleQueue) {\x0d\n        ArrayPrototypePush(this._handleQueue\x2C {\x0d\n          callback: callback\x2C\x0d\n          handle: handle\x2C\x0d\n          options: options\x2C\x0d\n          message: message.msg\x2C\x0d\n        });\x0d\n        return this._handleQueue.length === 1;\x0d\n      }\x0d\n\x0d\n      obj = handleConversion[message.type];\x0d\n\x0d\n      // convert TCP object to native handle object\x0d\n      handle = ReflectApply(handleConversion[message.type].send\x2C\x0d\n                            target\x2C [message\x2C handle\x2C options]);\x0d\n\x0d\n      // If handle was sent twice\x2C or it is impossible to get native handle\x0d\n      // out of it - just send a text without the handle.\x0d\n      if (!handle)\x0d\n        message = message.msg;\x0d\n\x0d\n      // Update simultaneous accepts on Windows\x0d\n      if (obj.simultaneousAccepts && process.platform === 'win32') {\x0d\n        handle.setSimultaneousAccepts(true);\x0d\n      }\x0d\n    } else if (this._handleQueue &&\x0d\n               !(message && (message.cmd === 'NODE_HANDLE_ACK' ||\x0d\n                             message.cmd === 'NODE_HANDLE_NACK'))) {\x0d\n      // Queue request anyway to avoid out-of-order messages.\x0d\n      ArrayPrototypePush(this._handleQueue\x2C {\x0d\n        callback: callback\x2C\x0d\n        handle: null\x2C\x0d\n        options: options\x2C\x0d\n        message: message\x2C\x0d\n      });\x0d\n      return this._handleQueue.length === 1;\x0d\n    }\x0d\n\x0d\n    const req = new WriteWrap();\x0d\n\x0d\n    const err = writeChannelMessage(channel\x2C req\x2C message\x2C handle);\x0d\n    const wasAsyncWrite = streamBaseState[kLastWriteWasAsync];\x0d\n\x0d\n    if (err === 0) {\x0d\n      if (handle) {\x0d\n        if (!this._handleQueue)\x0d\n          this._handleQueue = [];\x0d\n        if (obj && obj.postSend)\x0d\n          obj.postSend(message\x2C handle\x2C options\x2C callback\x2C target);\x0d\n      }\x0d\n\x0d\n      if (wasAsyncWrite) {\x0d\n        req.oncomplete = () => {\x0d\n          control.unrefCounted();\x0d\n          if (typeof callback === 'function')\x0d\n            callback(null);\x0d\n        };\x0d\n        control.refCounted();\x0d\n      } else if (typeof callback === 'function') {\x0d\n        process.nextTick(callback\x2C null);\x0d\n      }\x0d\n    } else {\x0d\n      // Cleanup handle on error\x0d\n      if (obj && obj.postSend)\x0d\n        obj.postSend(message\x2C handle\x2C options\x2C callback);\x0d\n\x0d\n      if (!options.swallowErrors) {\x0d\n        const ex = errnoException(err\x2C 'write');\x0d\n        if (typeof callback === 'function') {\x0d\n          process.nextTick(callback\x2C ex);\x0d\n        } else {\x0d\n          process.nextTick(() => this.emit('error'\x2C ex));\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    /* If the primary is > 2 read() calls behind\x2C please stop sending. */\x0d\n    return channel.writeQueueSize < (65536 * 2);\x0d\n  };\x0d\n\x0d\n  // Connected will be set to false immediately when a disconnect() is\x0d\n  // requested\x2C even though the channel might still be alive internally to\x0d\n  // process queued messages. The three states are distinguished as follows:\x0d\n  // - disconnect() never requested: channel is not null and connected\x0d\n  //   is true\x0d\n  // - disconnect() requested\x2C messages in the queue: channel is not null\x0d\n  //   and connected is false\x0d\n  // - disconnect() requested\x2C channel actually disconnected: channel is\x0d\n  //   null and connected is false\x0d\n  target.connected = true;\x0d\n\x0d\n  target.disconnect = function() {\x0d\n    if (!this.connected) {\x0d\n      this.emit('error'\x2C new ERR_IPC_DISCONNECTED());\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    // Do not allow any new messages to be written.\x0d\n    this.connected = false;\x0d\n\x0d\n    // If there are no queued messages\x2C disconnect immediately. Otherwise\x2C\x0d\n    // postpone the disconnect so that it happens internally after the\x0d\n    // queue is flushed.\x0d\n    if (!this._handleQueue)\x0d\n      this._disconnect();\x0d\n  };\x0d\n\x0d\n  target._disconnect = function() {\x0d\n    assert(this.channel);\x0d\n\x0d\n    // This marks the fact that the channel is actually disconnected.\x0d\n    this.channel = null;\x0d\n    this[kChannelHandle] = null;\x0d\n\x0d\n    if (this._pendingMessage)\x0d\n      closePendingHandle(this);\x0d\n\x0d\n    let fired = false;\x0d\n    function finish() {\x0d\n      if (fired) return;\x0d\n      fired = true;\x0d\n\x0d\n      channel.close();\x0d\n      target.emit('disconnect');\x0d\n    }\x0d\n\x0d\n    // If a message is being read\x2C then wait for it to complete.\x0d\n    if (channel.buffering) {\x0d\n      this.once('message'\x2C finish);\x0d\n      this.once('internalMessage'\x2C finish);\x0d\n\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    process.nextTick(finish);\x0d\n  };\x0d\n\x0d\n  function emit(event\x2C message\x2C handle) {\x0d\n    if ('internalMessage' === event || target.listenerCount('message')) {\x0d\n      target.emit(event\x2C message\x2C handle);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    ArrayPrototypePush(\x0d\n      target.channel[kPendingMessages]\x2C\x0d\n      [event\x2C message\x2C handle]\x0d\n    );\x0d\n  }\x0d\n\x0d\n  function handleMessage(message\x2C handle\x2C internal) {\x0d\n    if (!target.channel)\x0d\n      return;\x0d\n\x0d\n    const eventName = (internal ? 'internalMessage' : 'message');\x0d\n\x0d\n    process.nextTick(emit\x2C eventName\x2C message\x2C handle);\x0d\n  }\x0d\n\x0d\n  channel.readStart();\x0d\n  return control;\x0d\n}\x0d\n\x0d\nconst INTERNAL_PREFIX = 'NODE_';\x0d\nfunction isInternal(message) {\x0d\n  return (message !== null &&\x0d\n          typeof message === 'object' &&\x0d\n          typeof message.cmd === 'string' &&\x0d\n          message.cmd.length > INTERNAL_PREFIX.length &&\x0d\n          StringPrototypeSlice(message.cmd\x2C 0\x2C INTERNAL_PREFIX.length) ===\x0d\n            INTERNAL_PREFIX);\x0d\n}\x0d\n\x0d\nconst nop = FunctionPrototype;\x0d\n\x0d\nfunction getValidStdio(stdio\x2C sync) {\x0d\n  let ipc;\x0d\n  let ipcFd;\x0d\n\x0d\n  // Replace shortcut with an array\x0d\n  if (typeof stdio === 'string') {\x0d\n    stdio = stdioStringToArray(stdio);\x0d\n  } else if (!ArrayIsArray(stdio)) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n  }\x0d\n\x0d\n  // At least 3 stdio will be created\x0d\n  // Don't concat() a new Array() because it would be sparse\x2C and\x0d\n  // stdio.reduce() would skip the sparse elements of stdio.\x0d\n  // See https://stackoverflow.com/a/5501711/3561\x0d\n  while (stdio.length < 3) ArrayPrototypePush(stdio\x2C undefined);\x0d\n\x0d\n  // Translate stdio into C++-readable form\x0d\n  // (i.e. PipeWraps or fds)\x0d\n  stdio = ArrayPrototypeReduce(stdio\x2C (acc\x2C stdio\x2C i) => {\x0d\n    function cleanup() {\x0d\n      for (let i = 0; i < acc.length; i++) {\x0d\n        if ((acc[i].type === 'pipe' || acc[i].type === 'ipc') && acc[i].handle)\x0d\n          acc[i].handle.close();\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Defaults\x0d\n    if (stdio == null) {\x0d\n      stdio = i < 3 ? 'pipe' : 'ignore';\x0d\n    }\x0d\n\x0d\n    if (stdio === 'ignore') {\x0d\n      ArrayPrototypePush(acc\x2C { type: 'ignore' });\x0d\n    } else if (stdio === 'pipe' || stdio === 'overlapped' ||\x0d\n               (typeof stdio === 'number' && stdio < 0)) {\x0d\n      const a = {\x0d\n        type: stdio === 'overlapped' ? 'overlapped' : 'pipe'\x2C\x0d\n        readable: i === 0\x2C\x0d\n        writable: i !== 0\x0d\n      };\x0d\n\x0d\n      if (!sync)\x0d\n        a.handle = new Pipe(PipeConstants.SOCKET);\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C a);\x0d\n    } else if (stdio === 'ipc') {\x0d\n      if (sync || ipc !== undefined) {\x0d\n        // Cleanup previously created pipes\x0d\n        cleanup();\x0d\n        if (!sync)\x0d\n          throw new ERR_IPC_ONE_PIPE();\x0d\n        else\x0d\n          throw new ERR_IPC_SYNC_FORK();\x0d\n      }\x0d\n\x0d\n      ipc = new Pipe(PipeConstants.IPC);\x0d\n      ipcFd = i;\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'pipe'\x2C\x0d\n        handle: ipc\x2C\x0d\n        ipc: true\x0d\n      });\x0d\n    } else if (stdio === 'inherit') {\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'inherit'\x2C\x0d\n        fd: i\x0d\n      });\x0d\n    } else if (typeof stdio === 'number' || typeof stdio.fd === 'number') {\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'fd'\x2C\x0d\n        fd: typeof stdio === 'number' ? stdio : stdio.fd\x0d\n      });\x0d\n    } else if (getHandleWrapType(stdio) || getHandleWrapType(stdio.handle) ||\x0d\n               getHandleWrapType(stdio._handle)) {\x0d\n      const handle = getHandleWrapType(stdio) ?\x0d\n        stdio :\x0d\n        getHandleWrapType(stdio.handle) ? stdio.handle : stdio._handle;\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'wrap'\x2C\x0d\n        wrapType: getHandleWrapType(handle)\x2C\x0d\n        handle: handle\x2C\x0d\n        _stdio: stdio\x0d\n      });\x0d\n    } else if (isArrayBufferView(stdio) || typeof stdio === 'string') {\x0d\n      if (!sync) {\x0d\n        cleanup();\x0d\n        throw new ERR_INVALID_SYNC_FORK_INPUT(inspect(stdio));\x0d\n      }\x0d\n    } else {\x0d\n      // Cleanup\x0d\n      cleanup();\x0d\n      throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n    }\x0d\n\x0d\n    return acc;\x0d\n  }\x2C []);\x0d\n\x0d\n  return { stdio\x2C ipc\x2C ipcFd };\x0d\n}\x0d\n\x0d\n\x0d\nfunction getSocketList(type\x2C worker\x2C key) {\x0d\n  const sockets = worker[kChannelHandle].sockets[type];\x0d\n  let socketList = sockets[key];\x0d\n  if (!socketList) {\x0d\n    const Construct = type === 'send' ? SocketListSend : SocketListReceive;\x0d\n    socketList = sockets[key] = new Construct(worker\x2C key);\x0d\n  }\x0d\n  return socketList;\x0d\n}\x0d\n\x0d\n\x0d\nfunction maybeClose(subprocess) {\x0d\n  subprocess._closesGot++;\x0d\n\x0d\n  if (subprocess._closesGot === subprocess._closesNeeded) {\x0d\n    subprocess.emit('close'\x2C subprocess.exitCode\x2C subprocess.signalCode);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction spawnSync(options) {\x0d\n  const result = spawn_sync.spawn(options);\x0d\n\x0d\n  if (result.output && options.encoding && options.encoding !== 'buffer') {\x0d\n    for (let i = 0; i < result.output.length; i++) {\x0d\n      if (!result.output[i])\x0d\n        continue;\x0d\n      result.output[i] = result.output[i].toString(options.encoding);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  result.stdout = result.output && result.output[1];\x0d\n  result.stderr = result.output && result.output[2];\x0d\n\x0d\n  if (result.error) {\x0d\n    result.error = errnoException(result.error\x2C 'spawnSync ' + options.file);\x0d\n    result.error.path = options.file;\x0d\n    result.error.spawnargs = ArrayPrototypeSlice(options.args\x2C 1);\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ChildProcess\x2C\x0d\n  kChannelHandle\x2C\x0d\n  setupChannel\x2C\x0d\n  getValidStdio\x2C\x0d\n  stdioStringToArray\x2C\x0d\n  spawnSync\x0d\n};\x0d\n
code-source-info,0x2c63eb233ee,100,0,32650,C0O0C4O32650,,
code-creation,Function,10,145990,0x2c63eb24a0e,1265, node:internal/child_process:1:1,0x2c63eb23368,~
code-source-info,0x2c63eb24a0e,100,0,32650,C0O0C296O28C302O45C308O68C314O93C320O117C325O139C331O165C337O190C342O215C348O232C354O257C359O268C365O594C371O594C376O312C387O345C393O372C399O400C405O430C411O464C417O493C423O520C429O543C435O567C441O710C447O710C452O634C458O652C464O671C470O689C476O764C482O764C486O764C488O796C494O796C498O796C500O827C506O827C510O827C512O862C518O862C523O894C527O862C529O920C535O920C539O920C541O971C544O971C549O959C555O1119C558O1119C563O1016C569O1030C575O1052C581O1075C587O1098C593O1195C596O1195C601O1160C607O1177C613O1242C616O1242C621O1234C627O1288C630O1288C635O1280C641O1334C644O1334C649O1326C655O1383C661O1383C666O1442C672O1442C677O1473C682O1425C688O1528C694O1528C699O1492C705O1514C711O1585C717O1585C722O1563C728O1637C731O1637C735O1637C737O1694C743O1694C748O1677C754O1847C757O1847C762O1735C768O1749C774O1763C780O1777C786O1791C792O1805C798O1819C804O1833C810O1881C816O1897C822O2057C823O2057C825O2074C826O2074C828O2124C830O2124C832O2151C835O2151C839O2151C841O2201C844O2201C848O2201C850O2253C853O2253C857O2253C859O2410C864O2429C869O2470C877O2540C891O2622C896O2663C904O2741C918O2913C923O2920C931O4529C939O5300C953O5801C958O5843C966O5913C980O5997C985O6039C993O6172C1009O2410C1011O8250C1019O8274C1024O8216C1029O8287C1032O8287C1037O9335C1046O9351C1050O13291C1059O13306C1063O14018C1072O14032C1076O14110C1085O14126C1137O14213C1193O14191C1195O15263C1200O15290C1203O15263C1205O15367C1206O15367C1208O27894C1210O27894C1212O28237C1214O28237C1216O32519C1223O32541C1229O32558C1235O32577C1241O32594C1247O32612C1253O32635C1259O32534C1264O32649,,
code-creation,Function,10,146127,0x2c63eb25186,35,<instance_members_initializer> node:internal/child_process:525:3,0x2c63eb240d0,~
code-source-info,0x2c63eb25186,100,14231,14290,C3O14242C16O14259C26O14285C34O14290,,
tick,0x7ff7c0172233,146146,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x2c63eb02fec,0x2c63eb022dd,0x2c63eb1e07a,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
code-creation,Eval,10,147123,0x2c63eb29476,5, node:net:1:1,0x2c63eb28c78,~
script-source,101,node:net,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  Boolean\x2C\x0d\n  Number\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst stream = require('stream');\x0d\nlet debug = require('internal/util/debuglog').debuglog('net'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  normalizedArgsSymbol\x2C\x0d\n  makeSyncWrite\x0d\n} = require('internal/net');\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  UV_EADDRINUSE\x2C\x0d\n  UV_EINVAL\x2C\x0d\n  UV_ENOTCONN\x0d\n} = internalBinding('uv');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst { ShutdownWrap } = internalBinding('stream_wrap');\x0d\nconst {\x0d\n  TCP\x2C\x0d\n  TCPConnectWrap\x2C\x0d\n  constants: TCPConstants\x0d\n} = internalBinding('tcp_wrap');\x0d\nconst {\x0d\n  Pipe\x2C\x0d\n  PipeConnectWrap\x2C\x0d\n  constants: PipeConstants\x0d\n} = internalBinding('pipe_wrap');\x0d\nconst {\x0d\n  newAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  symbols: { async_id_symbol\x2C owner_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst {\x0d\n  writevGeneric\x2C\x0d\n  writeGeneric\x2C\x0d\n  onStreamRead\x2C\x0d\n  kAfterAsyncWrite\x2C\x0d\n  kHandle\x2C\x0d\n  kUpdateTimer\x2C\x0d\n  setStreamTimeout\x2C\x0d\n  kBuffer\x2C\x0d\n  kBufferCb\x2C\x0d\n  kBufferGen\x0d\n} = require('internal/stream_base_commons');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ADDRESS_FAMILY\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FD_TYPE\x2C\x0d\n    ERR_INVALID_IP_ADDRESS\x2C\x0d\n    ERR_SERVER_ALREADY_LISTEN\x2C\x0d\n    ERR_SERVER_NOT_RUNNING\x2C\x0d\n    ERR_SOCKET_CLOSED\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n  }\x2C\x0d\n  errnoException\x2C\x0d\n  exceptionWithHostPort\x2C\x0d\n  genericNodeError\x2C\x0d\n  uvExceptionWithHostPort\x2C\x0d\n} = require('internal/errors');\x0d\nconst { isUint8Array } = require('internal/util/types');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateNumber\x2C\x0d\n  validatePort\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\nconst kLastWriteQueueSize = Symbol('lastWriteQueueSize');\x0d\nconst {\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n} = require('internal/dtrace');\x0d\n\x0d\n// Lazy loaded to improve startup performance.\x0d\nlet cluster;\x0d\nlet dns;\x0d\nlet BlockList;\x0d\nlet SocketAddress;\x0d\n\x0d\nconst { clearTimeout } = require('timers');\x0d\nconst { kTimeout } = require('internal/timers');\x0d\n\x0d\nconst DEFAULT_IPV4_ADDR = '0.0.0.0';\x0d\nconst DEFAULT_IPV6_ADDR = '::';\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nfunction getFlags(ipv6Only) {\x0d\n  return ipv6Only === true ? TCPConstants.UV_TCP_IPV6ONLY : 0;\x0d\n}\x0d\n\x0d\nfunction createHandle(fd\x2C is_server) {\x0d\n  validateInt32(fd\x2C 'fd'\x2C 0);\x0d\n  const type = guessHandleType(fd);\x0d\n  if (type === 'PIPE') {\x0d\n    return new Pipe(\x0d\n      is_server ? PipeConstants.SERVER : PipeConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  if (type === 'TCP') {\x0d\n    return new TCP(\x0d\n      is_server ? TCPConstants.SERVER : TCPConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_FD_TYPE(type);\x0d\n}\x0d\n\x0d\n\x0d\nfunction getNewAsyncId(handle) {\x0d\n  return (!handle || typeof handle.getAsyncId !== 'function') ?\x0d\n    newAsyncId() : handle.getAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\nfunction isPipeName(s) {\x0d\n  return typeof s === 'string' && toNumber(s) === false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new TCP or IPC server\x0d\n * @param {{\x0d\n *   allowHalfOpen?: boolean;\x0d\n *   pauseOnConnect?: boolean;\x0d\n *   }} [options]\x0d\n * @param {Function} [connectionListener]\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nfunction createServer(options\x2C connectionListener) {\x0d\n  return new Server(options\x2C connectionListener);\x0d\n}\x0d\n\x0d\n\x0d\n// Target API:\x0d\n//\x0d\n// let s = net.connect({port: 80\x2C host: 'google.com'}\x2C function() {\x0d\n//   ...\x0d\n// });\x0d\n//\x0d\n// There are various forms:\x0d\n//\x0d\n// connect(options\x2C [cb])\x0d\n// connect(port\x2C [host]\x2C [cb])\x0d\n// connect(path\x2C [cb]);\x0d\n//\x0d\nfunction connect(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  const options = normalized[0];\x0d\n  debug('createConnection'\x2C normalized);\x0d\n  const socket = new Socket(options);\x0d\n\x0d\n  if (options.timeout) {\x0d\n    socket.setTimeout(options.timeout);\x0d\n  }\x0d\n\x0d\n  return socket.connect(normalized);\x0d\n}\x0d\n\x0d\n\x0d\n// Returns an array [options\x2C cb]\x2C where options is an object\x2C\x0d\n// cb is either a function or null.\x0d\n// Used to normalize arguments of Socket.prototype.connect() and\x0d\n// Server.prototype.listen(). Possible combinations of parameters:\x0d\n//   (options[...][\x2C cb])\x0d\n//   (path[...][\x2C cb])\x0d\n//   ([port][\x2C host][...][\x2C cb])\x0d\n// For Socket.prototype.connect()\x2C the [...] part is ignored\x0d\n// For Server.prototype.listen()\x2C the [...] part is [\x2C backlog]\x0d\n// but will not be handled here (handled in listen())\x0d\nfunction normalizeArgs(args) {\x0d\n  let arr;\x0d\n\x0d\n  if (args.length === 0) {\x0d\n    arr = [{}\x2C null];\x0d\n    arr[normalizedArgsSymbol] = true;\x0d\n    return arr;\x0d\n  }\x0d\n\x0d\n  const arg0 = args[0];\x0d\n  let options = {};\x0d\n  if (typeof arg0 === 'object' && arg0 !== null) {\x0d\n    // (options[...][\x2C cb])\x0d\n    options = arg0;\x0d\n  } else if (isPipeName(arg0)) {\x0d\n    // (path[...][\x2C cb])\x0d\n    options.path = arg0;\x0d\n  } else {\x0d\n    // ([port][\x2C host][...][\x2C cb])\x0d\n    options.port = arg0;\x0d\n    if (args.length > 1 && typeof args[1] === 'string') {\x0d\n      options.host = args[1];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const cb = args[args.length - 1];\x0d\n  if (typeof cb !== 'function')\x0d\n    arr = [options\x2C null];\x0d\n  else\x0d\n    arr = [options\x2C cb];\x0d\n\x0d\n  arr[normalizedArgsSymbol] = true;\x0d\n  return arr;\x0d\n}\x0d\n\x0d\n\x0d\n// Called when creating new Socket\x2C or when re-using a closed Socket\x0d\nfunction initSocketHandle(self) {\x0d\n  self._undestroy();\x0d\n  self._sockname = null;\x0d\n\x0d\n  // Handle creation may be deferred to bind() or connect() time.\x0d\n  if (self._handle) {\x0d\n    self._handle[owner_symbol] = self;\x0d\n    self._handle.onread = onStreamRead;\x0d\n    self[async_id_symbol] = getNewAsyncId(self._handle);\x0d\n\x0d\n    let userBuf = self[kBuffer];\x0d\n    if (userBuf) {\x0d\n      const bufGen = self[kBufferGen];\x0d\n      if (bufGen !== null) {\x0d\n        userBuf = bufGen();\x0d\n        if (!isUint8Array(userBuf))\x0d\n          return;\x0d\n        self[kBuffer] = userBuf;\x0d\n      }\x0d\n      self._handle.useUserBuffer(userBuf);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nconst kBytesRead = Symbol('kBytesRead');\x0d\nconst kBytesWritten = Symbol('kBytesWritten');\x0d\nconst kSetNoDelay = Symbol('kSetNoDelay');\x0d\nconst kSetKeepAlive = Symbol('kSetKeepAlive');\x0d\nconst kSetKeepAliveInitialDelay = Symbol('kSetKeepAliveInitialDelay');\x0d\n\x0d\nfunction Socket(options) {\x0d\n  if (!(this instanceof Socket)) return new Socket(options);\x0d\n  if (options?.objectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      'options.objectMode'\x2C\x0d\n      options.objectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  } else if (options?.readableObjectMode || options?.writableObjectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      `options.${\x0d\n        options.readableObjectMode ? 'readableObjectMode' : 'writableObjectMode'\x0d\n      }`\x2C\x0d\n      options.readableObjectMode || options.writableObjectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  }\x0d\n  if (typeof options?.keepAliveInitialDelay !== 'undefined') {\x0d\n    validateNumber(\x0d\n      options?.keepAliveInitialDelay\x2C 'options.keepAliveInitialDelay'\x0d\n    );\x0d\n\x0d\n    if (options.keepAliveInitialDelay < 0) {\x0d\n      options.keepAliveInitialDelay = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this.connecting = false;\x0d\n  // Problem with this is that users can supply their own handle\x2C that may not\x0d\n  // have _handle.getAsyncId(). In this case an[async_id_symbol] should\x0d\n  // probably be supplied by async_hooks.\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._hadError = false;\x0d\n  this[kHandle] = null;\x0d\n  this._parent = null;\x0d\n  this._host = null;\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n  this[kTimeout] = null;\x0d\n  this[kBuffer] = null;\x0d\n  this[kBufferCb] = null;\x0d\n  this[kBufferGen] = null;\x0d\n\x0d\n  if (typeof options === 'number')\x0d\n    options = { fd: options }; // Legacy interface.\x0d\n  else\x0d\n    options = { ...options };\x0d\n\x0d\n  // Default to *not* allowing half open sockets.\x0d\n  options.allowHalfOpen = Boolean(options.allowHalfOpen);\x0d\n  // For backwards compat do not emit close on destroy.\x0d\n  options.emitClose = false;\x0d\n  options.autoDestroy = true;\x0d\n  // Handle strings directly.\x0d\n  options.decodeStrings = false;\x0d\n  stream.Duplex.call(this\x2C options);\x0d\n\x0d\n  if (options.handle) {\x0d\n    this._handle = options.handle; // private\x0d\n    this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  } else if (options.fd !== undefined) {\x0d\n    const { fd } = options;\x0d\n    let err;\x0d\n\x0d\n    // createHandle will throw ERR_INVALID_FD_TYPE if `fd` is not\x0d\n    // a valid `PIPE` or `TCP` descriptor\x0d\n    this._handle = createHandle(fd\x2C false);\x0d\n\x0d\n    err = this._handle.open(fd);\x0d\n\x0d\n    // While difficult to fabricate\x2C in some architectures\x0d\n    // `open` may return an error code for valid file descriptors\x0d\n    // which cannot be opened. This is difficult to test as most\x0d\n    // un-openable fds will throw on `createHandle`\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'open');\x0d\n\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n\x0d\n    if ((fd === 1 || fd === 2) &&\x0d\n        (this._handle instanceof Pipe) && isWindows) {\x0d\n      // Make stdout and stderr blocking on Windows\x0d\n      err = this._handle.setBlocking(true);\x0d\n      if (err)\x0d\n        throw errnoException(err\x2C 'setBlocking');\x0d\n\x0d\n      this._writev = null;\x0d\n      this._write = makeSyncWrite(fd);\x0d\n      // makeSyncWrite adjusts this value like the original handle would\x2C so\x0d\n      // we need to let it do that by turning it into a writable\x2C own\x0d\n      // property.\x0d\n      ObjectDefineProperty(this._handle\x2C 'bytesWritten'\x2C {\x0d\n        value: 0\x2C writable: true\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const onread = options.onread;\x0d\n  if (onread !== null && typeof onread === 'object' &&\x0d\n      (isUint8Array(onread.buffer) || typeof onread.buffer === 'function') &&\x0d\n      typeof onread.callback === 'function') {\x0d\n    if (typeof onread.buffer === 'function') {\x0d\n      this[kBuffer] = true;\x0d\n      this[kBufferGen] = onread.buffer;\x0d\n    } else {\x0d\n      this[kBuffer] = onread.buffer;\x0d\n    }\x0d\n    this[kBufferCb] = onread.callback;\x0d\n  }\x0d\n\x0d\n  this[kSetNoDelay] = Boolean(options.noDelay);\x0d\n  this[kSetKeepAlive] = Boolean(options.keepAlive);\x0d\n  this[kSetKeepAliveInitialDelay] = ~~(options.keepAliveInitialDelay / 1000);\x0d\n\x0d\n  // Shut down the socket when we're finished with it.\x0d\n  this.on('end'\x2C onReadableStreamEnd);\x0d\n\x0d\n  initSocketHandle(this);\x0d\n\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  // If we have a handle\x2C then start the flow of data into the\x0d\n  // buffer.  if not\x2C then this will happen when we connect\x0d\n  if (this._handle && options.readable !== false) {\x0d\n    if (options.pauseOnCreate) {\x0d\n      // Stop the handle from reading and pause the stream\x0d\n      this._handle.reading = false;\x0d\n      this._handle.readStop();\x0d\n      this.readableFlowing = false;\x0d\n    } else if (!options.manualStart) {\x0d\n      this.read(0);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Reserve properties\x0d\n  this.server = null;\x0d\n  this._server = null;\x0d\n\x0d\n  // Used after `.destroy()`\x0d\n  this[kBytesRead] = 0;\x0d\n  this[kBytesWritten] = 0;\x0d\n}\x0d\nObjectSetPrototypeOf(Socket.prototype\x2C stream.Duplex.prototype);\x0d\nObjectSetPrototypeOf(Socket\x2C stream.Duplex);\x0d\n\x0d\n// Refresh existing timeouts.\x0d\nSocket.prototype._unrefTimer = function _unrefTimer() {\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    if (s[kTimeout])\x0d\n      s[kTimeout].refresh();\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// The user has called .end()\x2C and all the bytes have been\x0d\n// sent out to the other side.\x0d\nSocket.prototype._final = function(cb) {\x0d\n  // If still connecting - defer handling `_final` until 'connect' will happen\x0d\n  if (this.pending) {\x0d\n    debug('_final: not yet connected');\x0d\n    return this.once('connect'\x2C () => this._final(cb));\x0d\n  }\x0d\n\x0d\n  if (!this._handle)\x0d\n    return cb();\x0d\n\x0d\n  debug('_final: not ended\x2C call shutdown()');\x0d\n\x0d\n  const req = new ShutdownWrap();\x0d\n  req.oncomplete = afterShutdown;\x0d\n  req.handle = this._handle;\x0d\n  req.callback = cb;\x0d\n  const err = this._handle.shutdown(req);\x0d\n\x0d\n  if (err === 1 || err === UV_ENOTCONN)  // synchronous finish\x0d\n    return cb();\x0d\n  else if (err !== 0)\x0d\n    return cb(errnoException(err\x2C 'shutdown'));\x0d\n};\x0d\n\x0d\nfunction afterShutdown() {\x0d\n  const self = this.handle[owner_symbol];\x0d\n\x0d\n  debug('afterShutdown destroyed=%j'\x2C self.destroyed\x2C\x0d\n        self._readableState);\x0d\n\x0d\n  this.callback();\x0d\n}\x0d\n\x0d\n// Provide a better error message when we call end() as a result\x0d\n// of the other side sending a FIN.  The standard 'write after end'\x0d\n// is overly vague\x2C and makes it seem like the user's code is to blame.\x0d\nfunction writeAfterFIN(chunk\x2C encoding\x2C cb) {\x0d\n  if (!this.writableEnded) {\x0d\n    return stream.Duplex.prototype.write.call(this\x2C chunk\x2C encoding\x2C cb);\x0d\n  }\x0d\n\x0d\n  if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = null;\x0d\n  }\x0d\n\x0d\n  const er = genericNodeError(\x0d\n    'This socket has been ended by the other party'\x2C\x0d\n    { code: 'EPIPE' }\x0d\n  );\x0d\n  if (typeof cb === 'function') {\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C process.nextTick\x2C cb\x2C er);\x0d\n  }\x0d\n  this.destroy(er);\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\nSocket.prototype.setTimeout = setStreamTimeout;\x0d\n\x0d\n\x0d\nSocket.prototype._onTimeout = function() {\x0d\n  const handle = this._handle;\x0d\n  const lastWriteQueueSize = this[kLastWriteQueueSize];\x0d\n  if (lastWriteQueueSize > 0 && handle) {\x0d\n    // `lastWriteQueueSize !== writeQueueSize` means there is\x0d\n    // an active write in progress\x2C so we suppress the timeout.\x0d\n    const { writeQueueSize } = handle;\x0d\n    if (lastWriteQueueSize !== writeQueueSize) {\x0d\n      this[kLastWriteQueueSize] = writeQueueSize;\x0d\n      this._unrefTimer();\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n  debug('_onTimeout');\x0d\n  this.emit('timeout');\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setNoDelay = function(enable) {\x0d\n  // Backwards compatibility: assume true when `enable` is omitted\x0d\n  enable = Boolean(enable === undefined ? true : enable);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this[kSetNoDelay] = enable;\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (this._handle.setNoDelay && enable !== this[kSetNoDelay]) {\x0d\n    this[kSetNoDelay] = enable;\x0d\n    this._handle.setNoDelay(enable);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setKeepAlive = function(enable\x2C initialDelayMsecs) {\x0d\n  enable = Boolean(enable);\x0d\n  const initialDelay = ~~(initialDelayMsecs / 1000);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this[kSetKeepAlive] = enable;\x0d\n    this[kSetKeepAliveInitialDelay] = initialDelay;\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (this._handle.setKeepAlive && enable !== this[kSetKeepAlive]) {\x0d\n    this[kSetKeepAlive] = enable;\x0d\n    this[kSetKeepAliveInitialDelay] = initialDelay;\x0d\n    this._handle.setKeepAlive(enable\x2C initialDelay);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.address = function() {\x0d\n  return this._getsockname();\x0d\n};\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_connecting'\x2C {\x0d\n  get: function() {\x0d\n    return this.connecting;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'pending'\x2C {\x0d\n  get() {\x0d\n    return !this._handle || this.connecting;\x0d\n  }\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'readyState'\x2C {\x0d\n  get: function() {\x0d\n    if (this.connecting) {\x0d\n      return 'opening';\x0d\n    } else if (this.readable && this.writable) {\x0d\n      return 'open';\x0d\n    } else if (this.readable && !this.writable) {\x0d\n      return 'readOnly';\x0d\n    } else if (!this.readable && this.writable) {\x0d\n      return 'writeOnly';\x0d\n    }\x0d\n    return 'closed';\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'bufferSize'\x2C {\x0d\n  get: function() {\x0d\n    if (this._handle) {\x0d\n      return this.writableLength;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C kUpdateTimer\x2C {\x0d\n  get: function() {\x0d\n    return this._unrefTimer;\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nfunction tryReadStart(socket) {\x0d\n  // Not already reading\x2C start the flow\x0d\n  debug('Socket._handle.readStart');\x0d\n  socket._handle.reading = true;\x0d\n  const err = socket._handle.readStart();\x0d\n  if (err)\x0d\n    socket.destroy(errnoException(err\x2C 'read'));\x0d\n}\x0d\n\x0d\n// Just call handle.readStart until we have enough in the buffer\x0d\nSocket.prototype._read = function(n) {\x0d\n  debug('_read');\x0d\n\x0d\n  if (this.connecting || !this._handle) {\x0d\n    debug('_read wait for connection');\x0d\n    this.once('connect'\x2C () => this._read(n));\x0d\n  } else if (!this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.end = function(data\x2C encoding\x2C callback) {\x0d\n  stream.Duplex.prototype.end.call(this\x2C\x0d\n                                   data\x2C encoding\x2C callback);\x0d\n  DTRACE_NET_STREAM_END(this);\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.pause = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      this._handle.reading) {\x0d\n    this._handle.reading = false;\x0d\n    if (!this.destroyed) {\x0d\n      const err = this._handle.readStop();\x0d\n      if (err)\x0d\n        this.destroy(errnoException(err\x2C 'read'));\x0d\n    }\x0d\n  }\x0d\n  return stream.Duplex.prototype.pause.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.resume = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.resume.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.read = function(n) {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.read.call(this\x2C n);\x0d\n};\x0d\n\x0d\n\x0d\n// Called when the 'end' event is emitted.\x0d\nfunction onReadableStreamEnd() {\x0d\n  if (!this.allowHalfOpen) {\x0d\n    this.write = writeAfterFIN;\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.destroySoon = function() {\x0d\n  if (this.writable)\x0d\n    this.end();\x0d\n\x0d\n  if (this.writableFinished)\x0d\n    this.destroy();\x0d\n  else\x0d\n    this.once('finish'\x2C this.destroy);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._destroy = function(exception\x2C cb) {\x0d\n  debug('destroy');\x0d\n\x0d\n  this.connecting = false;\x0d\n\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    clearTimeout(s[kTimeout]);\x0d\n  }\x0d\n\x0d\n  debug('close');\x0d\n  if (this._handle) {\x0d\n    if (this !== process.stderr)\x0d\n      debug('close handle');\x0d\n    const isException = exception ? true : false;\x0d\n    // `bytesRead` and `kBytesWritten` should be accessible after `.destroy()`\x0d\n    this[kBytesRead] = this._handle.bytesRead;\x0d\n    this[kBytesWritten] = this._handle.bytesWritten;\x0d\n\x0d\n    this._handle.close(() => {\x0d\n      debug('emit close');\x0d\n      this.emit('close'\x2C isException);\x0d\n    });\x0d\n    this._handle.onread = noop;\x0d\n    this._handle = null;\x0d\n    this._sockname = null;\x0d\n    cb(exception);\x0d\n  } else {\x0d\n    cb(exception);\x0d\n    process.nextTick(emitCloseNT\x2C this);\x0d\n  }\x0d\n\x0d\n  if (this._server) {\x0d\n    debug('has server');\x0d\n    this._server._connections--;\x0d\n    if (this._server._emitCloseIfDrained) {\x0d\n      this._server._emitCloseIfDrained();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype._getpeername = function() {\x0d\n  if (!this._handle || !this._handle.getpeername) {\x0d\n    return this._peername || {};\x0d\n  } else if (!this._peername) {\x0d\n    this._peername = {};\x0d\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\x0d\n    this._handle.getpeername(this._peername);\x0d\n  }\x0d\n  return this._peername;\x0d\n};\x0d\n\x0d\nfunction protoGetter(name\x2C callback) {\x0d\n  ObjectDefineProperty(Socket.prototype\x2C name\x2C {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    get: callback\x0d\n  });\x0d\n}\x0d\n\x0d\nprotoGetter('bytesRead'\x2C function bytesRead() {\x0d\n  return this._handle ? this._handle.bytesRead : this[kBytesRead];\x0d\n});\x0d\n\x0d\nprotoGetter('remoteAddress'\x2C function remoteAddress() {\x0d\n  return this._getpeername().address;\x0d\n});\x0d\n\x0d\nprotoGetter('remoteFamily'\x2C function remoteFamily() {\x0d\n  return this._getpeername().family;\x0d\n});\x0d\n\x0d\nprotoGetter('remotePort'\x2C function remotePort() {\x0d\n  return this._getpeername().port;\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype._getsockname = function() {\x0d\n  if (!this._handle || !this._handle.getsockname) {\x0d\n    return {};\x0d\n  } else if (!this._sockname) {\x0d\n    this._sockname = {};\x0d\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\x0d\n    this._handle.getsockname(this._sockname);\x0d\n  }\x0d\n  return this._sockname;\x0d\n};\x0d\n\x0d\n\x0d\nprotoGetter('localAddress'\x2C function localAddress() {\x0d\n  return this._getsockname().address;\x0d\n});\x0d\n\x0d\n\x0d\nprotoGetter('localPort'\x2C function localPort() {\x0d\n  return this._getsockname().port;\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype[kAfterAsyncWrite] = function() {\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n};\x0d\n\x0d\nSocket.prototype._writeGeneric = function(writev\x2C data\x2C encoding\x2C cb) {\x0d\n  // If we are still connecting\x2C then buffer this for later.\x0d\n  // The Writable logic will buffer up any more writes while\x0d\n  // waiting for this one to be done.\x0d\n  if (this.connecting) {\x0d\n    this._pendingData = data;\x0d\n    this._pendingEncoding = encoding;\x0d\n    this.once('connect'\x2C function connect() {\x0d\n      this._writeGeneric(writev\x2C data\x2C encoding\x2C cb);\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  if (!this._handle) {\x0d\n    cb(new ERR_SOCKET_CLOSED());\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  let req;\x0d\n  if (writev)\x0d\n    req = writevGeneric(this\x2C data\x2C cb);\x0d\n  else\x0d\n    req = writeGeneric(this\x2C data\x2C encoding\x2C cb);\x0d\n  if (req.async)\x0d\n    this[kLastWriteQueueSize] = req.bytes;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._writev = function(chunks\x2C cb) {\x0d\n  this._writeGeneric(true\x2C chunks\x2C ''\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._write = function(data\x2C encoding\x2C cb) {\x0d\n  this._writeGeneric(false\x2C data\x2C encoding\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias. Having this is probably being overly cautious\x2C but it doesn't\x0d\n// really hurt anyone either. This can probably be removed safely if desired.\x0d\nprotoGetter('_bytesDispatched'\x2C function _bytesDispatched() {\x0d\n  return this._handle ? this._handle.bytesWritten : this[kBytesWritten];\x0d\n});\x0d\n\x0d\nprotoGetter('bytesWritten'\x2C function bytesWritten() {\x0d\n  let bytes = this._bytesDispatched;\x0d\n  const data = this._pendingData;\x0d\n  const encoding = this._pendingEncoding;\x0d\n  const writableBuffer = this.writableBuffer;\x0d\n\x0d\n  if (!writableBuffer)\x0d\n    return undefined;\x0d\n\x0d\n  for (const el of writableBuffer) {\x0d\n    bytes += el.chunk instanceof Buffer ?\x0d\n      el.chunk.length :\x0d\n      Buffer.byteLength(el.chunk\x2C el.encoding);\x0d\n  }\x0d\n\x0d\n  if (ArrayIsArray(data)) {\x0d\n    // Was a writev\x2C iterate over chunks to get total length\x0d\n    for (let i = 0; i < data.length; i++) {\x0d\n      const chunk = data[i];\x0d\n\x0d\n      if (data.allBuffers || chunk instanceof Buffer)\x0d\n        bytes += chunk.length;\x0d\n      else\x0d\n        bytes += Buffer.byteLength(chunk.chunk\x2C chunk.encoding);\x0d\n    }\x0d\n  } else if (data) {\x0d\n    // Writes are either a string or a Buffer.\x0d\n    if (typeof data !== 'string')\x0d\n      bytes += data.length;\x0d\n    else\x0d\n      bytes += Buffer.byteLength(data\x2C encoding);\x0d\n  }\x0d\n\x0d\n  return bytes;\x0d\n});\x0d\n\x0d\n\x0d\nfunction checkBindError(err\x2C port\x2C handle) {\x0d\n  // EADDRINUSE may not be reported until we call listen() or connect().\x0d\n  // To complicate matters\x2C a failed bind() followed by listen() or connect()\x0d\n  // will implicitly bind to a random port. Ergo\x2C check that the socket is\x0d\n  // bound to the expected port before calling listen() or connect().\x0d\n  //\x0d\n  // FIXME(bnoordhuis) Doesn't work for pipe handles\x2C they don't have a\x0d\n  // getsockname() method. Non-issue for now\x2C the cluster module doesn't\x0d\n  // really support pipes anyway.\x0d\n  if (err === 0 && port > 0 && handle.getsockname) {\x0d\n    const out = {};\x0d\n    err = handle.getsockname(out);\x0d\n    if (err === 0 && port !== out.port) {\x0d\n      debug(`checkBindError\x2C bound to ${out.port} instead of ${port}`);\x0d\n      err = UV_EADDRINUSE;\x0d\n    }\x0d\n  }\x0d\n  return err;\x0d\n}\x0d\n\x0d\n\x0d\nfunction internalConnect(\x0d\n  self\x2C address\x2C port\x2C addressType\x2C localAddress\x2C localPort\x2C flags) {\x0d\n  // TODO return promise from Socket.prototype.connect which\x0d\n  // wraps _connectReq.\x0d\n\x0d\n  assert(self.connecting);\x0d\n\x0d\n  let err;\x0d\n\x0d\n  if (localAddress || localPort) {\x0d\n    if (addressType === 4) {\x0d\n      localAddress = localAddress || DEFAULT_IPV4_ADDR;\x0d\n      err = self._handle.bind(localAddress\x2C localPort);\x0d\n    } else { // addressType === 6\x0d\n      localAddress = localAddress || DEFAULT_IPV6_ADDR;\x0d\n      err = self._handle.bind6(localAddress\x2C localPort\x2C flags);\x0d\n    }\x0d\n    debug('binding to localAddress: %s and localPort: %d (addressType: %d)'\x2C\x0d\n          localAddress\x2C localPort\x2C addressType);\x0d\n\x0d\n    err = checkBindError(err\x2C localPort\x2C self._handle);\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C localAddress\x2C localPort);\x0d\n      self.destroy(ex);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (addressType === 6 || addressType === 4) {\x0d\n    const req = new TCPConnectWrap();\x0d\n    req.oncomplete = afterConnect;\x0d\n    req.address = address;\x0d\n    req.port = port;\x0d\n    req.localAddress = localAddress;\x0d\n    req.localPort = localPort;\x0d\n\x0d\n    if (addressType === 4)\x0d\n      err = self._handle.connect(req\x2C address\x2C port);\x0d\n    else\x0d\n      err = self._handle.connect6(req\x2C address\x2C port);\x0d\n  } else {\x0d\n    const req = new PipeConnectWrap();\x0d\n    req.address = address;\x0d\n    req.oncomplete = afterConnect;\x0d\n\x0d\n    err = self._handle.connect(req\x2C address\x2C afterConnect);\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    const sockname = self._getsockname();\x0d\n    let details;\x0d\n\x0d\n    if (sockname) {\x0d\n      details = sockname.address + ':' + sockname.port;\x0d\n    }\x0d\n\x0d\n    const ex = exceptionWithHostPort(err\x2C 'connect'\x2C address\x2C port\x2C details);\x0d\n    self.destroy(ex);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.connect = function(...args) {\x0d\n  let normalized;\x0d\n  // If passed an array\x2C it's treated as an array of arguments that have\x0d\n  // already been normalized (so we don't normalize more than once). This has\x0d\n  // been solved before in https://github.com/nodejs/node/pull/12342\x2C but was\x0d\n  // reverted as it had unintended side effects.\x0d\n  if (ArrayIsArray(args[0]) && args[0][normalizedArgsSymbol]) {\x0d\n    normalized = args[0];\x0d\n  } else {\x0d\n    normalized = normalizeArgs(args);\x0d\n  }\x0d\n  const options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  // options.port === null will be checked later.\x0d\n  if (options.port === undefined && options.path == null)\x0d\n    throw new ERR_MISSING_ARGS(['options'\x2C 'port'\x2C 'path']);\x0d\n\x0d\n  if (this.write !== Socket.prototype.write)\x0d\n    this.write = Socket.prototype.write;\x0d\n\x0d\n  if (this.destroyed) {\x0d\n    this._handle = null;\x0d\n    this._peername = null;\x0d\n    this._sockname = null;\x0d\n  }\x0d\n\x0d\n  const { path } = options;\x0d\n  const pipe = !!path;\x0d\n  debug('pipe'\x2C pipe\x2C path);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this._handle = pipe ?\x0d\n      new Pipe(PipeConstants.SOCKET) :\x0d\n      new TCP(TCPConstants.SOCKET);\x0d\n    initSocketHandle(this);\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('connect'\x2C cb);\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  this.connecting = true;\x0d\n\x0d\n  if (pipe) {\x0d\n    validateString(path\x2C 'options.path');\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C internalConnect\x2C this\x2C path\x0d\n    );\x0d\n  } else {\x0d\n    lookupAndConnect(this\x2C options);\x0d\n  }\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction lookupAndConnect(self\x2C options) {\x0d\n  const { localAddress\x2C localPort } = options;\x0d\n  const host = options.host || 'localhost';\x0d\n  let { port } = options;\x0d\n\x0d\n  if (localAddress && !isIP(localAddress)) {\x0d\n    throw new ERR_INVALID_IP_ADDRESS(localAddress);\x0d\n  }\x0d\n\x0d\n  if (localPort) {\x0d\n    validateNumber(localPort\x2C 'options.localPort');\x0d\n  }\x0d\n\x0d\n  if (typeof port !== 'undefined') {\x0d\n    if (typeof port !== 'number' && typeof port !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('options.port'\x2C\x0d\n                                     ['number'\x2C 'string']\x2C port);\x0d\n    }\x0d\n    validatePort(port);\x0d\n  }\x0d\n  port |= 0;\x0d\n\x0d\n  // If host is an IP\x2C skip performing a lookup\x0d\n  const addressType = isIP(host);\x0d\n  if (addressType) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C process.nextTick\x2C () => {\x0d\n      if (self.connecting)\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C host\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (options.lookup !== undefined)\x0d\n    validateFunction(options.lookup\x2C 'options.lookup');\x0d\n\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  const dnsopts = {\x0d\n    family: options.family\x2C\x0d\n    hints: options.hints || 0\x0d\n  };\x0d\n\x0d\n  if (!isWindows &&\x0d\n      dnsopts.family !== 4 &&\x0d\n      dnsopts.family !== 6 &&\x0d\n      dnsopts.hints === 0) {\x0d\n    dnsopts.hints = dns.ADDRCONFIG;\x0d\n  }\x0d\n\x0d\n  debug('connect: find host'\x2C host);\x0d\n  debug('connect: dns options'\x2C dnsopts);\x0d\n  self._host = host;\x0d\n  const lookup = options.lookup || dns.lookup;\x0d\n  defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C function() {\x0d\n    lookup(host\x2C dnsopts\x2C function emitLookup(err\x2C ip\x2C addressType) {\x0d\n      self.emit('lookup'\x2C err\x2C ip\x2C addressType\x2C host);\x0d\n\x0d\n      // It's possible we were destroyed while looking this up.\x0d\n      // XXX it would be great if we could cancel the promise returned by\x0d\n      // the look up.\x0d\n      if (!self.connecting) return;\x0d\n\x0d\n      if (err) {\x0d\n        // net.createConnection() creates a net.Socket object and immediately\x0d\n        // calls net.Socket.connect() on it (that's us). There are no event\x0d\n        // listeners registered yet so defer the error event to the next tick.\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (!isIP(ip)) {\x0d\n        err = new ERR_INVALID_IP_ADDRESS(ip);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (addressType !== 4 && addressType !== 6) {\x0d\n        err = new ERR_INVALID_ADDRESS_FAMILY(addressType\x2C\x0d\n                                             options.host\x2C\x0d\n                                             options.port);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else {\x0d\n        self._unrefTimer();\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C ip\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n      }\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction connectErrorNT(self\x2C err) {\x0d\n  self.destroy(err);\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.ref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.ref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.ref === 'function') {\x0d\n    this._handle.ref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.unref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.unref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.unref === 'function') {\x0d\n    this._handle.unref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction afterConnect(status\x2C handle\x2C req\x2C readable\x2C writable) {\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  // Callback may come after call to destroy\x0d\n  if (self.destroyed) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  debug('afterConnect');\x0d\n\x0d\n  assert(self.connecting);\x0d\n  self.connecting = false;\x0d\n  self._sockname = null;\x0d\n\x0d\n  if (status === 0) {\x0d\n    if (self.readable && !readable) {\x0d\n      self.push(null);\x0d\n      self.read();\x0d\n    }\x0d\n    if (self.writable && !writable) {\x0d\n      self.end();\x0d\n    }\x0d\n    self._unrefTimer();\x0d\n\x0d\n    if (self[kSetNoDelay] && self._handle.setNoDelay) {\x0d\n      self._handle.setNoDelay(true);\x0d\n    }\x0d\n\x0d\n    if (self[kSetKeepAlive] && self._handle.setKeepAlive) {\x0d\n      self._handle.setKeepAlive(true\x2C self[kSetKeepAliveInitialDelay]);\x0d\n    }\x0d\n\x0d\n    self.emit('connect');\x0d\n    self.emit('ready');\x0d\n\x0d\n    // Start the first read\x2C or get an immediate EOF.\x0d\n    // this doesn't actually consume any bytes\x2C because len=0.\x0d\n    if (readable && !self.isPaused())\x0d\n      self.read(0);\x0d\n\x0d\n  } else {\x0d\n    self.connecting = false;\x0d\n    let details;\x0d\n    if (req.localAddress && req.localPort) {\x0d\n      details = req.localAddress + ':' + req.localPort;\x0d\n    }\x0d\n    const ex = exceptionWithHostPort(status\x2C\x0d\n                                     'connect'\x2C\x0d\n                                     req.address\x2C\x0d\n                                     req.port\x2C\x0d\n                                     details);\x0d\n    if (details) {\x0d\n      ex.localAddress = req.localAddress;\x0d\n      ex.localPort = req.localPort;\x0d\n    }\x0d\n    self.destroy(ex);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addAbortSignalOption(self\x2C options) {\x0d\n  if (options?.signal === undefined) {\x0d\n    return;\x0d\n  }\x0d\n  validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  const { signal } = options;\x0d\n  const onAborted = () => {\x0d\n    self.close();\x0d\n  };\x0d\n  if (signal.aborted) {\x0d\n    process.nextTick(onAborted);\x0d\n  } else {\x0d\n    signal.addEventListener('abort'\x2C onAborted);\x0d\n    self.once('close'\x2C () => signal.removeEventListener('abort'\x2C onAborted));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction Server(options\x2C connectionListener) {\x0d\n  if (!(this instanceof Server))\x0d\n    return new Server(options\x2C connectionListener);\x0d\n\x0d\n  EventEmitter.call(this);\x0d\n\x0d\n  if (typeof options === 'function') {\x0d\n    connectionListener = options;\x0d\n    options = {};\x0d\n    this.on('connection'\x2C connectionListener);\x0d\n  } else if (options == null || typeof options === 'object') {\x0d\n    options = { ...options };\x0d\n\x0d\n    if (typeof connectionListener === 'function') {\x0d\n      this.on('connection'\x2C connectionListener);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C 'Object'\x2C options);\x0d\n  }\x0d\n  if (typeof options.keepAliveInitialDelay !== 'undefined') {\x0d\n    validateNumber(\x0d\n      options.keepAliveInitialDelay\x2C 'options.keepAliveInitialDelay'\x0d\n    );\x0d\n\x0d\n    if (options.keepAliveInitialDelay < 0) {\x0d\n      options.keepAliveInitialDelay = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this._connections = 0;\x0d\n\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._handle = null;\x0d\n  this._usingWorkers = false;\x0d\n  this._workers = [];\x0d\n  this._unref = false;\x0d\n\x0d\n  this.allowHalfOpen = options.allowHalfOpen || false;\x0d\n  this.pauseOnConnect = !!options.pauseOnConnect;\x0d\n  this.noDelay = Boolean(options.noDelay);\x0d\n  this.keepAlive = Boolean(options.keepAlive);\x0d\n  this.keepAliveInitialDelay = ~~(options.keepAliveInitialDelay / 1000);\x0d\n}\x0d\nObjectSetPrototypeOf(Server.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Server\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }\x0d\n\x0d\n// Returns handle if it can be created\x2C or error code if it can't\x0d\nfunction createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags) {\x0d\n  let err = 0;\x0d\n  // Assign handle in listen\x2C and clean up if bind or listen fails\x0d\n  let handle;\x0d\n\x0d\n  let isTCP = false;\x0d\n  if (typeof fd === 'number' && fd >= 0) {\x0d\n    try {\x0d\n      handle = createHandle(fd\x2C true);\x0d\n    } catch (e) {\x0d\n      // Not a fd we can listen on.  This will trigger an error.\x0d\n      debug('listen invalid fd=%d:'\x2C fd\x2C e.message);\x0d\n      return UV_EINVAL;\x0d\n    }\x0d\n\x0d\n    err = handle.open(fd);\x0d\n    if (err)\x0d\n      return err;\x0d\n\x0d\n    assert(!address && !port);\x0d\n  } else if (port === -1 && addressType === -1) {\x0d\n    handle = new Pipe(PipeConstants.SERVER);\x0d\n    if (isWindows) {\x0d\n      const instances = NumberParseInt(process.env.NODE_PENDING_PIPE_INSTANCES);\x0d\n      if (!NumberIsNaN(instances)) {\x0d\n        handle.setPendingInstances(instances);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    handle = new TCP(TCPConstants.SERVER);\x0d\n    isTCP = true;\x0d\n  }\x0d\n\x0d\n  if (address || port || isTCP) {\x0d\n    debug('bind to'\x2C address || 'any');\x0d\n    if (!address) {\x0d\n      // Try binding to ipv6 first\x0d\n      err = handle.bind6(DEFAULT_IPV6_ADDR\x2C port\x2C flags);\x0d\n      if (err) {\x0d\n        handle.close();\x0d\n        // Fallback to ipv4\x0d\n        return createServerHandle(DEFAULT_IPV4_ADDR\x2C port);\x0d\n      }\x0d\n    } else if (addressType === 6) {\x0d\n      err = handle.bind6(address\x2C port\x2C flags);\x0d\n    } else {\x0d\n      err = handle.bind(address\x2C port);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    handle.close();\x0d\n    return err;\x0d\n  }\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\nfunction setupListenHandle(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags) {\x0d\n  debug('setupListenHandle'\x2C address\x2C port\x2C addressType\x2C backlog\x2C fd);\x0d\n\x0d\n  // If there is not yet a handle\x2C we need to create one and bind.\x0d\n  // In the case of a server sent via IPC\x2C we don't need to do this.\x0d\n  if (this._handle) {\x0d\n    debug('setupListenHandle: have a handle already');\x0d\n  } else {\x0d\n    debug('setupListenHandle: create a handle');\x0d\n\x0d\n    let rval = null;\x0d\n\x0d\n    // Try to bind to the unspecified IPv6 address\x2C see if IPv6 is available\x0d\n    if (!address && typeof fd !== 'number') {\x0d\n      rval = createServerHandle(DEFAULT_IPV6_ADDR\x2C port\x2C 6\x2C fd\x2C flags);\x0d\n\x0d\n      if (typeof rval === 'number') {\x0d\n        rval = null;\x0d\n        address = DEFAULT_IPV4_ADDR;\x0d\n        addressType = 4;\x0d\n      } else {\x0d\n        address = DEFAULT_IPV6_ADDR;\x0d\n        addressType = 6;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (rval === null)\x0d\n      rval = createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags);\x0d\n\x0d\n    if (typeof rval === 'number') {\x0d\n      const error = uvExceptionWithHostPort(rval\x2C 'listen'\x2C address\x2C port);\x0d\n      process.nextTick(emitErrorNT\x2C this\x2C error);\x0d\n      return;\x0d\n    }\x0d\n    this._handle = rval;\x0d\n  }\x0d\n\x0d\n  this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  this._handle.onconnection = onconnection;\x0d\n  this._handle[owner_symbol] = this;\x0d\n\x0d\n  // Use a backlog of 512 entries. We pass 511 to the listen() call because\x0d\n  // the kernel does: backlogsize = roundup_pow_of_two(backlogsize + 1);\x0d\n  // which will thus give us a backlog of 512 entries.\x0d\n  const err = this._handle.listen(backlog || 511);\x0d\n\x0d\n  if (err) {\x0d\n    const ex = uvExceptionWithHostPort(err\x2C 'listen'\x2C address\x2C port);\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               emitErrorNT\x2C\x0d\n                               this\x2C\x0d\n                               ex);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Generate connection key\x2C this should be unique to the connection\x0d\n  this._connectionKey = addressType + ':' + address + ':' + port;\x0d\n\x0d\n  // Unref the handle if the server was unref'ed prior to listening\x0d\n  if (this._unref)\x0d\n    this.unref();\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitListeningNT\x2C\x0d\n                             this);\x0d\n}\x0d\n\x0d\nServer.prototype._listen2 = setupListenHandle;  // legacy alias\x0d\n\x0d\nfunction emitErrorNT(self\x2C err) {\x0d\n  self.emit('error'\x2C err);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitListeningNT(self) {\x0d\n  // Ensure handle hasn't closed\x0d\n  if (self._handle)\x0d\n    self.emit('listening');\x0d\n}\x0d\n\x0d\n\x0d\nfunction listenInCluster(server\x2C address\x2C port\x2C addressType\x2C\x0d\n                         backlog\x2C fd\x2C exclusive\x2C flags) {\x0d\n  exclusive = !!exclusive;\x0d\n\x0d\n  if (cluster === undefined) cluster = require('cluster');\x0d\n\x0d\n  if (cluster.isPrimary || exclusive) {\x0d\n    // Will create a new handle\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const serverQuery = {\x0d\n    address: address\x2C\x0d\n    port: port\x2C\x0d\n    addressType: addressType\x2C\x0d\n    fd: fd\x2C\x0d\n    flags\x2C\x0d\n    backlog\x2C\x0d\n  };\x0d\n\x0d\n  // Get the primary's server handle\x2C and listen on it\x0d\n  cluster._getServer(server\x2C serverQuery\x2C listenOnPrimaryHandle);\x0d\n\x0d\n  function listenOnPrimaryHandle(err\x2C handle) {\x0d\n    err = checkBindError(err\x2C port\x2C handle);\x0d\n\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C address\x2C port);\x0d\n      return server.emit('error'\x2C ex);\x0d\n    }\x0d\n\x0d\n    // Reuse primary's server handle\x0d\n    server._handle = handle;\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype.listen = function(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  let options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  if (this._handle) {\x0d\n    throw new ERR_SERVER_ALREADY_LISTEN();\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('listening'\x2C cb);\x0d\n  }\x0d\n  const backlogFromArgs =\x0d\n    // (handle\x2C backlog) or (path\x2C backlog) or (port\x2C backlog)\x0d\n    toNumber(args.length > 1 && args[1]) ||\x0d\n    toNumber(args.length > 2 && args[2]);  // (port\x2C host\x2C backlog)\x0d\n\x0d\n  options = options._handle || options.handle || options;\x0d\n  const flags = getFlags(options.ipv6Only);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a handle\x0d\n  if (options instanceof TCP) {\x0d\n    this._handle = options;\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n    listenInCluster(this\x2C null\x2C -1\x2C -1\x2C backlogFromArgs);\x0d\n    return this;\x0d\n  }\x0d\n  addAbortSignalOption(this\x2C options);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a fd\x0d\n  if (typeof options.fd === 'number' && options.fd >= 0) {\x0d\n    listenInCluster(this\x2C null\x2C null\x2C null\x2C backlogFromArgs\x2C options.fd);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is omitted\x2C\x0d\n  // that is\x2C listen()\x2C listen(null)\x2C listen(cb)\x2C or listen(null\x2C cb)\x0d\n  // or (options[\x2C cb]) where options.port is explicitly set as undefined or\x0d\n  // null\x2C bind to an arbitrary unused port\x0d\n  if (args.length === 0 || typeof args[0] === 'function' ||\x0d\n      (typeof options.port === 'undefined' && 'port' in options) ||\x0d\n      options.port === null) {\x0d\n    options.port = 0;\x0d\n  }\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is specified\x0d\n  // or (options[\x2C cb]) where options.port is specified\x0d\n  // or if options.port is normalized as 0 before\x0d\n  let backlog;\x0d\n  if (typeof options.port === 'number' || typeof options.port === 'string') {\x0d\n    validatePort(options.port\x2C 'options.port');\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    // start TCP server listening on host:port\x0d\n    if (options.host) {\x0d\n      lookupAndListen(this\x2C options.port | 0\x2C options.host\x2C backlog\x2C\x0d\n                      options.exclusive\x2C flags);\x0d\n    } else { // Undefined host\x2C listens on unspecified address\x0d\n      // Default addressType 4 will be used to search for primary server\x0d\n      listenInCluster(this\x2C null\x2C options.port | 0\x2C 4\x2C\x0d\n                      backlog\x2C undefined\x2C options.exclusive);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // (path[\x2C backlog][\x2C cb]) or (options[\x2C cb])\x0d\n  // where path or options.path is a UNIX domain socket or Windows pipe\x0d\n  if (options.path && isPipeName(options.path)) {\x0d\n    const pipeName = this._pipeName = options.path;\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    listenInCluster(this\x2C pipeName\x2C -1\x2C -1\x2C\x0d\n                    backlog\x2C undefined\x2C options.exclusive);\x0d\n\x0d\n    if (!this._handle) {\x0d\n      // Failed and an error shall be emitted in the next tick.\x0d\n      // Therefore\x2C we directly return.\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    let mode = 0;\x0d\n    if (options.readableAll === true)\x0d\n      mode |= PipeConstants.UV_READABLE;\x0d\n    if (options.writableAll === true)\x0d\n      mode |= PipeConstants.UV_WRITABLE;\x0d\n    if (mode !== 0) {\x0d\n      const err = this._handle.fchmod(mode);\x0d\n      if (err) {\x0d\n        this._handle.close();\x0d\n        this._handle = null;\x0d\n        throw errnoException(err\x2C 'uv_pipe_chmod');\x0d\n      }\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (!(('port' in options) || ('path' in options))) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options\x2C\x0d\n                                    'must have the property "port" or "path"');\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n};\x0d\n\x0d\nfunction lookupAndListen(self\x2C port\x2C address\x2C backlog\x2C exclusive\x2C flags) {\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  dns.lookup(address\x2C function doListen(err\x2C ip\x2C addressType) {\x0d\n    if (err) {\x0d\n      self.emit('error'\x2C err);\x0d\n    } else {\x0d\n      addressType = ip ? addressType : 4;\x0d\n      listenInCluster(self\x2C ip\x2C port\x2C addressType\x2C\x0d\n                      backlog\x2C undefined\x2C exclusive\x2C flags);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Server.prototype\x2C 'listening'\x2C {\x0d\n  get: function() {\x0d\n    return !!this._handle;\x0d\n  }\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nServer.prototype.address = function() {\x0d\n  if (this._handle && this._handle.getsockname) {\x0d\n    const out = {};\x0d\n    const err = this._handle.getsockname(out);\x0d\n    if (err) {\x0d\n      throw errnoException(err\x2C 'address');\x0d\n    }\x0d\n    return out;\x0d\n  } else if (this._pipeName) {\x0d\n    return this._pipeName;\x0d\n  }\x0d\n  return null;\x0d\n};\x0d\n\x0d\nfunction onconnection(err\x2C clientHandle) {\x0d\n  const handle = this;\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  debug('onconnection');\x0d\n\x0d\n  if (err) {\x0d\n    self.emit('error'\x2C errnoException(err\x2C 'accept'));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (self.maxConnections && self._connections >= self.maxConnections) {\x0d\n    clientHandle.close();\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const socket = new Socket({\x0d\n    handle: clientHandle\x2C\x0d\n    allowHalfOpen: self.allowHalfOpen\x2C\x0d\n    pauseOnCreate: self.pauseOnConnect\x2C\x0d\n    readable: true\x2C\x0d\n    writable: true\x0d\n  });\x0d\n\x0d\n  if (self.noDelay && handle.setNoDelay) {\x0d\n    handle.setNoDelay(true);\x0d\n  }\x0d\n\x0d\n  if (self.keepAlive && self.setKeepAlive) {\x0d\n    handle.setKeepAlive(true\x2C handle.keepAliveInitialDelay);\x0d\n  }\x0d\n\x0d\n  self._connections++;\x0d\n  socket.server = self;\x0d\n  socket._server = self;\x0d\n\x0d\n  DTRACE_NET_SERVER_CONNECTION(socket);\x0d\n  self.emit('connection'\x2C socket);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Gets the number of concurrent connections on the server\x0d\n * @param {Function} cb\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nServer.prototype.getConnections = function(cb) {\x0d\n  const self = this;\x0d\n\x0d\n  function end(err\x2C connections) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               cb\x2C\x0d\n                               err\x2C\x0d\n                               connections);\x0d\n  }\x0d\n\x0d\n  if (!this._usingWorkers) {\x0d\n    end(null\x2C this._connections);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Poll workers\x0d\n  let left = this._workers.length;\x0d\n  let total = this._connections;\x0d\n\x0d\n  function oncount(err\x2C count) {\x0d\n    if (err) {\x0d\n      left = -1;\x0d\n      return end(err);\x0d\n    }\x0d\n\x0d\n    total += count;\x0d\n    if (--left === 0) return end(null\x2C total);\x0d\n  }\x0d\n\x0d\n  for (let n = 0; n < this._workers.length; n++) {\x0d\n    this._workers[n].getConnections(oncount);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nServer.prototype.close = function(cb) {\x0d\n  if (typeof cb === 'function') {\x0d\n    if (!this._handle) {\x0d\n      this.once('close'\x2C function close() {\x0d\n        cb(new ERR_SERVER_NOT_RUNNING());\x0d\n      });\x0d\n    } else {\x0d\n      this.once('close'\x2C cb);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (this._handle) {\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n  }\x0d\n\x0d\n  if (this._usingWorkers) {\x0d\n    let left = this._workers.length;\x0d\n    const onWorkerClose = () => {\x0d\n      if (--left !== 0) return;\x0d\n\x0d\n      this._connections = 0;\x0d\n      this._emitCloseIfDrained();\x0d\n    };\x0d\n\x0d\n    // Increment connections to be sure that\x2C even if all sockets will be closed\x0d\n    // during polling of workers\x2C `close` event will be emitted only once.\x0d\n    this._connections++;\x0d\n\x0d\n    // Poll workers\x0d\n    for (let n = 0; n < this._workers.length; n++)\x0d\n      this._workers[n].close(onWorkerClose);\x0d\n  } else {\x0d\n    this._emitCloseIfDrained();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype._emitCloseIfDrained = function() {\x0d\n  debug('SERVER _emitCloseIfDrained');\x0d\n\x0d\n  if (this._handle || this._connections) {\x0d\n    debug('SERVER handle? %j   connections? %d'\x2C\x0d\n          !!this._handle\x2C this._connections);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitCloseNT\x2C\x0d\n                             this);\x0d\n};\x0d\n\x0d\n\x0d\nfunction emitCloseNT(self) {\x0d\n  debug('SERVER: emit close');\x0d\n  self.emit('close');\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype[EventEmitter.captureRejectionSymbol] = function(\x0d\n  err\x2C event\x2C sock) {\x0d\n\x0d\n  switch (event) {\x0d\n    case 'connection':\x0d\n      sock.destroy(err);\x0d\n      break;\x0d\n    default:\x0d\n      this.emit('error'\x2C err);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias on the C++ wrapper object. This is not public API\x2C so we may\x0d\n// want to runtime-deprecate it at some point. There's no hurry\x2C though.\x0d\nObjectDefineProperty(TCP.prototype\x2C 'owner'\x2C {\x0d\n  get() { return this[owner_symbol]; }\x2C\x0d\n  set(v) { return this[owner_symbol] = v; }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_handle'\x2C {\x0d\n  get() { return this[kHandle]; }\x2C\x0d\n  set(v) { return this[kHandle] = v; }\x0d\n});\x0d\n\x0d\nServer.prototype._setupWorker = function(socketList) {\x0d\n  this._usingWorkers = true;\x0d\n  this._workers.push(socketList);\x0d\n  socketList.once('exit'\x2C (socketList) => {\x0d\n    const index = ArrayPrototypeIndexOf(this._workers\x2C socketList);\x0d\n    this._workers.splice(index\x2C 1);\x0d\n  });\x0d\n};\x0d\n\x0d\nServer.prototype.ref = function() {\x0d\n  this._unref = false;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.ref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype.unref = function() {\x0d\n  this._unref = true;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.unref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nlet _setSimultaneousAccepts;\x0d\nlet warnSimultaneousAccepts = true;\x0d\n\x0d\nif (isWindows) {\x0d\n  let simultaneousAccepts;\x0d\n\x0d\n  _setSimultaneousAccepts = function(handle) {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n    if (handle === undefined) {\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (simultaneousAccepts === undefined) {\x0d\n      simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&\x0d\n                             process.env.NODE_MANY_ACCEPTS !== '0');\x0d\n    }\x0d\n\x0d\n    if (handle._simultaneousAccepts !== simultaneousAccepts) {\x0d\n      handle.setSimultaneousAccepts(!!simultaneousAccepts);\x0d\n      handle._simultaneousAccepts = simultaneousAccepts;\x0d\n    }\x0d\n  };\x0d\n} else {\x0d\n  _setSimultaneousAccepts = function() {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  _createServerHandle: createServerHandle\x2C\x0d\n  _normalizeArgs: normalizeArgs\x2C\x0d\n  _setSimultaneousAccepts\x2C\x0d\n  get BlockList() {\x0d\n    BlockList ??= require('internal/blocklist').BlockList;\x0d\n    return BlockList;\x0d\n  }\x2C\x0d\n  get SocketAddress() {\x0d\n    SocketAddress ??= require('internal/socketaddress').SocketAddress;\x0d\n    return SocketAddress;\x0d\n  }\x2C\x0d\n  connect\x2C\x0d\n  createConnection: connect\x2C\x0d\n  createServer\x2C\x0d\n  isIP: isIP\x2C\x0d\n  isIPv4: isIPv4\x2C\x0d\n  isIPv6: isIPv6\x2C\x0d\n  Server\x2C\x0d\n  Socket\x2C\x0d\n  Stream: Socket\x2C // Legacy naming\x0d\n};\x0d\n
code-source-info,0x2c63eb29476,101,0,51035,C0O0C4O51035,,
code-creation,Function,10,149405,0x2c63eb2c356,2547, node:net:1:1,0x2c63eb293f0,~
code-source-info,0x2c63eb2c356,101,0,51035,C0O0C417O1183C423O1200C429O1226C435O1238C441O1249C447O1265C453O1284C459O1309C464O1334C469O1384C475O1384C479O1384C481O1419C487O1419C491O1419C493O1451C499O1451C504O1484C518O1485C524O1451C526O1618C532O1618C537O1543C543O1552C548O1563C553O1574C559O1599C565O1659C571O1659C575O1659C577O1748C580O1748C585O1699C591O1717C597O1731C603O1793C609O1793C614O1782C620O1841C623O1841C628O1821C634O1892C637O1892C642O1875C648O1992C651O1992C656O1936C662O1944C668O1974C674O2092C677O2092C682O2033C688O2042C694O2073C700O2228C706O2228C711O2134C717O2149C728O2191C734O2208C740O2438C746O2438C751O2273C757O2291C763O2308C769O2325C774O2346C780O2358C785O2375C790O2396C796O2408C802O2422C808O2856C814O2856C819O2856C824O2505C830O2538C836O2565C842O2593C848O2619C854O2648C860O2680C866O2709C872O2733C878O2760C884O2779C890O2805C896O2826C902O2910C908O2910C913O2893C919O3073C925O3073C930O2954C936O2978C942O2999C948O3017C954O3036C960O3053C966O3134C969O3134C973O3134C975O3236C981O3236C986O3176C992O3209C998O3319C999O3319C1001O3333C1002O3333C1004O3343C1005O3343C1007O3359C1008O3359C1010O3402C1016O3402C1021O3385C1027O3443C1033O3443C1038O3430C1044O3500C1046O3500C1048O3538C1050O3538C1052O3565C1055O3573C1062O3582C1065O3565C1067O3611C1071O3611C1073O7211C1076O7211C1080O7211C1082O7256C1085O7256C1089O7256C1091O7302C1094O7302C1098O7302C1100O7348C1103O7348C1107O7348C1109O7408C1112O7408C1116O7408C1118O12064C1121O12092C1129O12110C1134O12117C1139O12064C1144O12130C1150O12166C1155O12130C1160O12209C1163O12216C1172O12238C1176O12474C1179O12481C1188O12498C1192O14068C1195O14075C1202O14096C1206O14121C1209O14128C1218O14149C1222O14677C1225O14684C1234O14705C1238O15106C1241O15113C1250O15136C1254O15642C1257O15649C1266O15667C1270O15722C1276O15750C1290O15786C1298O15722C1303O15841C1309O15869C1323O15896C1331O15841C1336O15988C1342O16016C1356O16051C1364O15988C1369O16388C1375O16416C1389O16451C1397O16388C1402O16544C1408O16572C1413O16583C1419O16607C1430O16544C1435O16988C1438O16995C1447O17011C1451O17258C1454O17265C1463O17279C1467O17480C1470O17487C1479O17503C1483O17857C1486O17864C1495O17881C1499O18080C1502O18087C1511O18102C1515O18456C1518O18463C1527O18485C1531O18649C1534O18656C1543O18675C1547O19674C1550O19681C1559O19704C1563O20184C1571O20184C1576O20308C1584O20308C1594O20411C1602O20411C1612O20511C1620O20511C1630O20607C1633O20614C1642O20637C1650O20931C1658O20931C1668O21034C1676O21034C1686O21128C1689O21135C1694O21145C1698O21163C1706O21219C1709O21226C1718O21250C1726O22049C1729O22056C1738O22074C1746O22153C1749O22160C1758O22177C1766O22428C1774O22428C1784O22572C1792O22572C1802O26164C1805O26171C1814O26189C1822O30744C1825O30751C1834O30765C1842O30972C1845O30979C1854O30995C1862O34520C1865O34548C1877O34572C1886O34520C1896O34585C1902O34585C1912O38706C1915O38713C1926O38732C1934O40250C1937O40257C1950O40274C1958O44343C1964O44371C1985O44405C1997O44343C2007O44503C2010O44510C2023O44528C2031O45846C2034O45853C2047O45878C2055O46675C2058O46682C2071O46698C2079O47609C2082O47616C2095O47646C2103O48146C2106O48153C2118O48176C2131O48200C2139O48533C2145O48558C2166O48583C2178O48624C2190O48533C2200O48674C2206O48702C2223O48729C2235O48765C2247O48674C2257O48810C2260O48817C2273O48840C2281O49095C2284O49102C2297O49116C2305O49228C2308O49235C2321O49251C2329O49368C2331O49424C2332O49424C2334O49433C2345O49457C2346O49457C2348O49483C2357O50213C2362O50495C2372O50538C2382O50577C2392O50595C2402O50863C2412O50893C2422O50905C2432O50928C2442O50945C2452O50964C2462O50975C2472O50986C2482O51005C2537O50510C2546O51034,,
tick,0x7ffdf67de43f,149721,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x2c63eb02fec,0x2c63eb022dd,0x2c63eb24bfc,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1e07a,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
tick,0x7ffdf67ba8e3,149742,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x2c63eb02fec,0x2c63eb022dd,0x2c63eb24bfc,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1e07a,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
code-creation,Eval,10,149999,0x2c63eb31cf6,5, node:internal/net:1:1,0x2c63eb31b30,~
script-source,102,node:internal/net,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst Buffer = require('buffer').Buffer;\x0d\nconst { writeBuffer } = internalBinding('fs');\x0d\nconst errors = require('internal/errors');\x0d\n\x0d\n// IPv4 Segment\x0d\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\x0d\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\x0d\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\x0d\n\x0d\n// IPv6 Segment\x0d\nconst v6Seg = '(?:[0-9a-fA-F]{1\x2C4})';\x0d\nconst IPv6Reg = new RegExp('^(' +\x0d\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1\x2C2}|:)|` +\x0d\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0\x2C1}:${v4Str}|(:${v6Seg}){1\x2C3}|:)|` +\x0d\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0\x2C2}:${v4Str}|(:${v6Seg}){1\x2C4}|:)|` +\x0d\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0\x2C3}:${v4Str}|(:${v6Seg}){1\x2C5}|:)|` +\x0d\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0\x2C4}:${v4Str}|(:${v6Seg}){1\x2C6}|:)|` +\x0d\n  `(?::((?::${v6Seg}){0\x2C5}:${v4Str}|(?::${v6Seg}){1\x2C7}|:))` +\x0d\n')(%[0-9a-zA-Z-.:]{1\x2C})?$');\x0d\n\x0d\nfunction isIPv4(s) {\x0d\n  return RegExpPrototypeTest(IPv4Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIPv6(s) {\x0d\n  return RegExpPrototypeTest(IPv6Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIP(s) {\x0d\n  if (isIPv4(s)) return 4;\x0d\n  if (isIPv6(s)) return 6;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\nfunction makeSyncWrite(fd) {\x0d\n  return function(chunk\x2C enc\x2C cb) {\x0d\n    if (enc !== 'buffer')\x0d\n      chunk = Buffer.from(chunk\x2C enc);\x0d\n\x0d\n    this._handle.bytesWritten += chunk.length;\x0d\n\x0d\n    const ctx = {};\x0d\n    writeBuffer(fd\x2C chunk\x2C 0\x2C chunk.length\x2C null\x2C undefined\x2C ctx);\x0d\n    if (ctx.errno !== undefined) {\x0d\n      const ex = errors.uvException(ctx);\x0d\n      ex.errno = ctx.errno;\x0d\n      return cb(ex);\x0d\n    }\x0d\n    cb();\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  makeSyncWrite\x2C\x0d\n  normalizedArgsSymbol: Symbol('normalizedArgs')\x0d\n};\x0d\n
code-source-info,0x2c63eb31cf6,102,0,1818,C0O0C4O1818,,
code-creation,Function,10,150097,0x2c63eb320e6,617, node:internal/net:1:1,0x2c63eb31c70,~
code-source-info,0x2c63eb320e6,102,0,1818,C0O0C45O28C50O39C56O63C61O107C64O107C69O124C73O107C75O158C78O158C83O142C89O197C92O197C96O197C98O259C101O330C106O334C119O349C124O375C129O390C142O375C147O375C149O435C152O476C160O503C173O519C183O492C192O542C205O558C218O568C228O531C237O591C250O608C263O619C273O580C282O648C295O666C308O681C321O692C331O637C340O721C353O739C366O754C379O765C389O710C398O794C411O812C424O827C437O838C447O783C456O867C469O885C482O900C495O911C505O856C514O946C527O961C540O974C550O929C556O992C562O476C567O476C569O1695C576O1717C582O1726C588O1737C594O1748C601O1788C611O1710C616O1817,,
code-creation,Eval,10,150372,0x2c63eb33aee,5, node:internal/dtrace:1:1,0x2c63eb339a8,~
script-source,103,node:internal/dtrace,'use strict';\x0d\n\x0d\nconst config = internalBinding('config');\x0d\n\x0d\nconst {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE = () => {}\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION = () => {}\x2C\x0d\n  DTRACE_NET_STREAM_END = () => {}\x0d\n} = (config.hasDtrace ? internalBinding('dtrace') : {});\x0d\n\x0d\nmodule.exports = {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n};\x0d\n
code-source-info,0x2c63eb33aee,103,0,589,C0O0C4O589,,
code-creation,Function,10,150422,0x2c63eb33fc6,140, node:internal/dtrace:1:1,0x2c63eb33a68,~
code-source-info,0x2c63eb33fc6,103,0,589,C0O32C3O32C8O333C17O345C25O73C36O115C47O158C58O200C69O243C80O287C91O381C98O403C104O434C110O466C116O497C122O529C128O562C134O396C139O588,,
code-creation,LazyCompile,10,150623,0x2c63eb34f8e,34,protoGetter node:net:740:21,0x2c63eb298b8,~
code-source-info,0x2c63eb34f8e,101,20034,20180,C0O20056C8O20084C13O20095C20O20162C27O20056C33O20179,,
code-creation,Eval,10,151225,0x2c63eb3a31e,5, node:dgram:1:1,0x2c63eb39db8,~
script-source,104,node:dgram,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst errors = require('internal/errors');\x0d\nconst {\x0d\n  kStateSymbol\x2C\x0d\n  _createSocketHandle\x2C\x0d\n  newHandle\x2C\x0d\n} = require('internal/dgram');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst {\x0d\n  ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_MISSING_ARGS\x2C\x0d\n  ERR_SOCKET_ALREADY_BOUND\x2C\x0d\n  ERR_SOCKET_BAD_BUFFER_SIZE\x2C\x0d\n  ERR_SOCKET_BUFFER_SIZE\x2C\x0d\n  ERR_SOCKET_DGRAM_IS_CONNECTED\x2C\x0d\n  ERR_SOCKET_DGRAM_NOT_CONNECTED\x2C\x0d\n  ERR_SOCKET_DGRAM_NOT_RUNNING\x2C\x0d\n  ERR_INVALID_FD_TYPE\x0d\n} = errors.codes;\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateString\x2C\x0d\n  validateNumber\x2C\x0d\n  validatePort\x2C\x0d\n} = require('internal/validators');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { deprecate } = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst EventEmitter = require('events');\x0d\nconst {\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  symbols: { async_id_symbol\x2C owner_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst { UV_UDP_REUSEADDR } = internalBinding('constants').os;\x0d\n\x0d\nconst {\x0d\n  constants: { UV_UDP_IPV6ONLY }\x2C\x0d\n  UDP\x2C\x0d\n  SendWrap\x0d\n} = internalBinding('udp_wrap');\x0d\n\x0d\nconst BIND_STATE_UNBOUND = 0;\x0d\nconst BIND_STATE_BINDING = 1;\x0d\nconst BIND_STATE_BOUND = 2;\x0d\n\x0d\nconst CONNECT_STATE_DISCONNECTED = 0;\x0d\nconst CONNECT_STATE_CONNECTING = 1;\x0d\nconst CONNECT_STATE_CONNECTED = 2;\x0d\n\x0d\nconst RECV_BUFFER = true;\x0d\nconst SEND_BUFFER = false;\x0d\n\x0d\n// Lazily loaded\x0d\nlet _cluster = null;\x0d\nfunction lazyLoadCluster() {\x0d\n  if (!_cluster) _cluster = require('cluster');\x0d\n  return _cluster;\x0d\n}\x0d\n\x0d\nconst errnoException = errors.errnoException;\x0d\nconst exceptionWithHostPort = errors.exceptionWithHostPort;\x0d\n\x0d\n\x0d\nfunction Socket(type\x2C listener) {\x0d\n  FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n  let lookup;\x0d\n  let recvBufferSize;\x0d\n  let sendBufferSize;\x0d\n\x0d\n  let options;\x0d\n  if (type !== null && typeof type === 'object') {\x0d\n    options = type;\x0d\n    type = options.type;\x0d\n    lookup = options.lookup;\x0d\n    recvBufferSize = options.recvBufferSize;\x0d\n    sendBufferSize = options.sendBufferSize;\x0d\n  }\x0d\n\x0d\n  const handle = newHandle(type\x2C lookup);\x0d\n  handle[owner_symbol] = this;\x0d\n\x0d\n  this[async_id_symbol] = handle.getAsyncId();\x0d\n  this.type = type;\x0d\n\x0d\n  if (typeof listener === 'function')\x0d\n    this.on('message'\x2C listener);\x0d\n\x0d\n  this[kStateSymbol] = {\x0d\n    handle\x2C\x0d\n    receiving: false\x2C\x0d\n    bindState: BIND_STATE_UNBOUND\x2C\x0d\n    connectState: CONNECT_STATE_DISCONNECTED\x2C\x0d\n    queue: undefined\x2C\x0d\n    reuseAddr: options && options.reuseAddr\x2C // Use UV_UDP_REUSEADDR if true.\x0d\n    ipv6Only: options && options.ipv6Only\x2C\x0d\n    recvBufferSize\x2C\x0d\n    sendBufferSize\x0d\n  };\x0d\n\x0d\n  if (options?.signal !== undefined) {\x0d\n    const { signal } = options;\x0d\n    validateAbortSignal(signal\x2C 'options.signal');\x0d\n    const onAborted = () => {\x0d\n      this.close();\x0d\n    };\x0d\n    if (signal.aborted) {\x0d\n      onAborted();\x0d\n    } else {\x0d\n      signal.addEventListener('abort'\x2C onAborted);\x0d\n      this.once('close'\x2C () => signal.removeEventListener('abort'\x2C onAborted));\x0d\n    }\x0d\n  }\x0d\n}\x0d\nObjectSetPrototypeOf(Socket.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Socket\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction createSocket(type\x2C listener) {\x0d\n  return new Socket(type\x2C listener);\x0d\n}\x0d\n\x0d\n\x0d\nfunction startListening(socket) {\x0d\n  const state = socket[kStateSymbol];\x0d\n\x0d\n  state.handle.onmessage = onMessage;\x0d\n  // Todo: handle errors\x0d\n  state.handle.recvStart();\x0d\n  state.receiving = true;\x0d\n  state.bindState = BIND_STATE_BOUND;\x0d\n\x0d\n  if (state.recvBufferSize)\x0d\n    bufferSize(socket\x2C state.recvBufferSize\x2C RECV_BUFFER);\x0d\n\x0d\n  if (state.sendBufferSize)\x0d\n    bufferSize(socket\x2C state.sendBufferSize\x2C SEND_BUFFER);\x0d\n\x0d\n  socket.emit('listening');\x0d\n}\x0d\n\x0d\nfunction replaceHandle(self\x2C newHandle) {\x0d\n  const state = self[kStateSymbol];\x0d\n  const oldHandle = state.handle;\x0d\n\x0d\n  // Set up the handle that we got from primary.\x0d\n  newHandle.lookup = oldHandle.lookup;\x0d\n  newHandle.bind = oldHandle.bind;\x0d\n  newHandle.send = oldHandle.send;\x0d\n  newHandle[owner_symbol] = self;\x0d\n\x0d\n  // Replace the existing handle by the handle we got from primary.\x0d\n  oldHandle.close();\x0d\n  state.handle = newHandle;\x0d\n}\x0d\n\x0d\nfunction bufferSize(self\x2C size\x2C buffer) {\x0d\n  if (size >>> 0 !== size)\x0d\n    throw new ERR_SOCKET_BAD_BUFFER_SIZE();\x0d\n\x0d\n  const ctx = {};\x0d\n  const ret = self[kStateSymbol].handle.bufferSize(size\x2C buffer\x2C ctx);\x0d\n  if (ret === undefined) {\x0d\n    throw new ERR_SOCKET_BUFFER_SIZE(ctx);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n// Query primary process to get the server handle and utilize it.\x0d\nfunction bindServerHandle(self\x2C options\x2C errCb) {\x0d\n  const cluster = lazyLoadCluster();\x0d\n\x0d\n  const state = self[kStateSymbol];\x0d\n  cluster._getServer(self\x2C options\x2C (err\x2C handle) => {\x0d\n    if (err) {\x0d\n      errCb(err);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (!state.handle) {\x0d\n      // Handle has been closed in the mean time.\x0d\n      return handle.close();\x0d\n    }\x0d\n\x0d\n    replaceHandle(self\x2C handle);\x0d\n    startListening(self);\x0d\n  });\x0d\n}\x0d\n\x0d\nSocket.prototype.bind = function(port_\x2C address_ /* \x2C callback */) {\x0d\n  let port = port_;\x0d\n\x0d\n  healthCheck(this);\x0d\n  const state = this[kStateSymbol];\x0d\n\x0d\n  if (state.bindState !== BIND_STATE_UNBOUND)\x0d\n    throw new ERR_SOCKET_ALREADY_BOUND();\x0d\n\x0d\n  state.bindState = BIND_STATE_BINDING;\x0d\n\x0d\n  const cb = arguments.length && arguments[arguments.length - 1];\x0d\n  if (typeof cb === 'function') {\x0d\n    function removeListeners() {\x0d\n      this.removeListener('error'\x2C removeListeners);\x0d\n      this.removeListener('listening'\x2C onListening);\x0d\n    }\x0d\n\x0d\n    function onListening() {\x0d\n      FunctionPrototypeCall(removeListeners\x2C this);\x0d\n      FunctionPrototypeCall(cb\x2C this);\x0d\n    }\x0d\n\x0d\n    this.on('error'\x2C removeListeners);\x0d\n    this.on('listening'\x2C onListening);\x0d\n  }\x0d\n\x0d\n  if (port !== null &&\x0d\n      typeof port === 'object' &&\x0d\n      typeof port.recvStart === 'function') {\x0d\n    replaceHandle(this\x2C port);\x0d\n    startListening(this);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Open an existing fd instead of creating a new one.\x0d\n  if (port !== null && typeof port === 'object' &&\x0d\n      isInt32(port.fd) && port.fd > 0) {\x0d\n    const fd = port.fd;\x0d\n    const exclusive = !!port.exclusive;\x0d\n    const state = this[kStateSymbol];\x0d\n\x0d\n    const cluster = lazyLoadCluster();\x0d\n\x0d\n    if (cluster.isWorker && !exclusive) {\x0d\n      bindServerHandle(this\x2C {\x0d\n        address: null\x2C\x0d\n        port: null\x2C\x0d\n        addressType: this.type\x2C\x0d\n        fd\x2C\x0d\n        flags: null\x0d\n      }\x2C (err) => {\x0d\n        // Callback to handle error.\x0d\n        const ex = errnoException(err\x2C 'open');\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n      });\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    const type = guessHandleType(fd);\x0d\n    if (type !== 'UDP')\x0d\n      throw new ERR_INVALID_FD_TYPE(type);\x0d\n    const err = state.handle.open(fd);\x0d\n\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'open');\x0d\n\x0d\n    startListening(this);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  let address;\x0d\n  let exclusive;\x0d\n\x0d\n  if (port !== null && typeof port === 'object') {\x0d\n    address = port.address || '';\x0d\n    exclusive = !!port.exclusive;\x0d\n    port = port.port;\x0d\n  } else {\x0d\n    address = typeof address_ === 'function' ? '' : address_;\x0d\n    exclusive = false;\x0d\n  }\x0d\n\x0d\n  // Defaulting address for bind to all interfaces\x0d\n  if (!address) {\x0d\n    if (this.type === 'udp4')\x0d\n      address = '0.0.0.0';\x0d\n    else\x0d\n      address = '::';\x0d\n  }\x0d\n\x0d\n  // Resolve address first\x0d\n  state.handle.lookup(address\x2C (err\x2C ip) => {\x0d\n    if (err) {\x0d\n      state.bindState = BIND_STATE_UNBOUND;\x0d\n      this.emit('error'\x2C err);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    const cluster = lazyLoadCluster();\x0d\n\x0d\n    let flags = 0;\x0d\n    if (state.reuseAddr)\x0d\n      flags |= UV_UDP_REUSEADDR;\x0d\n    if (state.ipv6Only)\x0d\n      flags |= UV_UDP_IPV6ONLY;\x0d\n\x0d\n    if (cluster.isWorker && !exclusive) {\x0d\n      bindServerHandle(this\x2C {\x0d\n        address: ip\x2C\x0d\n        port: port\x2C\x0d\n        addressType: this.type\x2C\x0d\n        fd: -1\x2C\x0d\n        flags: flags\x0d\n      }\x2C (err) => {\x0d\n        // Callback to handle error.\x0d\n        const ex = exceptionWithHostPort(err\x2C 'bind'\x2C ip\x2C port);\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n      });\x0d\n    } else {\x0d\n      if (!state.handle)\x0d\n        return; // Handle has been closed in the mean time\x0d\n\x0d\n      const err = state.handle.bind(ip\x2C port || 0\x2C flags);\x0d\n      if (err) {\x0d\n        const ex = exceptionWithHostPort(err\x2C 'bind'\x2C ip\x2C port);\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n        // Todo: close?\x0d\n        return;\x0d\n      }\x0d\n\x0d\n      startListening(this);\x0d\n    }\x0d\n  });\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nSocket.prototype.connect = function(port\x2C address\x2C callback) {\x0d\n  port = validatePort(port\x2C 'Port'\x2C false);\x0d\n  if (typeof address === 'function') {\x0d\n    callback = address;\x0d\n    address = '';\x0d\n  } else if (address === undefined) {\x0d\n    address = '';\x0d\n  }\x0d\n\x0d\n  validateString(address\x2C 'address');\x0d\n\x0d\n  const state = this[kStateSymbol];\x0d\n\x0d\n  if (state.connectState !== CONNECT_STATE_DISCONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\x0d\n\x0d\n  state.connectState = CONNECT_STATE_CONNECTING;\x0d\n  if (state.bindState === BIND_STATE_UNBOUND)\x0d\n    this.bind({ port: 0\x2C exclusive: true }\x2C null);\x0d\n\x0d\n  if (state.bindState !== BIND_STATE_BOUND) {\x0d\n    enqueue(this\x2C FunctionPrototypeBind(_connect\x2C this\x2C\x0d\n                                        port\x2C address\x2C callback));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  ReflectApply(_connect\x2C this\x2C [port\x2C address\x2C callback]);\x0d\n};\x0d\n\x0d\n\x0d\nfunction _connect(port\x2C address\x2C callback) {\x0d\n  const state = this[kStateSymbol];\x0d\n  if (callback)\x0d\n    this.once('connect'\x2C callback);\x0d\n\x0d\n  const afterDns = (ex\x2C ip) => {\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C\x0d\n      doConnect\x2C\x0d\n      ex\x2C this\x2C ip\x2C address\x2C port\x2C callback\x0d\n    );\x0d\n  };\x0d\n\x0d\n  state.handle.lookup(address\x2C afterDns);\x0d\n}\x0d\n\x0d\n\x0d\nfunction doConnect(ex\x2C self\x2C ip\x2C address\x2C port\x2C callback) {\x0d\n  const state = self[kStateSymbol];\x0d\n  if (!state.handle)\x0d\n    return;\x0d\n\x0d\n  if (!ex) {\x0d\n    const err = state.handle.connect(ip\x2C port);\x0d\n    if (err) {\x0d\n      ex = exceptionWithHostPort(err\x2C 'connect'\x2C address\x2C port);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (ex) {\x0d\n    state.connectState = CONNECT_STATE_DISCONNECTED;\x0d\n    return process.nextTick(() => {\x0d\n      if (callback) {\x0d\n        self.removeListener('connect'\x2C callback);\x0d\n        callback(ex);\x0d\n      } else {\x0d\n        self.emit('error'\x2C ex);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  state.connectState = CONNECT_STATE_CONNECTED;\x0d\n  process.nextTick(() => self.emit('connect'));\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.disconnect = function() {\x0d\n  const state = this[kStateSymbol];\x0d\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\x0d\n\x0d\n  const err = state.handle.disconnect();\x0d\n  if (err)\x0d\n    throw errnoException(err\x2C 'connect');\x0d\n  else\x0d\n    state.connectState = CONNECT_STATE_DISCONNECTED;\x0d\n};\x0d\n\x0d\n\x0d\n// Thin wrapper around `send`\x2C here for compatibility with dgram_legacy.js\x0d\nSocket.prototype.sendto = function(buffer\x2C\x0d\n                                   offset\x2C\x0d\n                                   length\x2C\x0d\n                                   port\x2C\x0d\n                                   address\x2C\x0d\n                                   callback) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  validateNumber(length\x2C 'length');\x0d\n  validateNumber(port\x2C 'port');\x0d\n  validateString(address\x2C 'address');\x0d\n\x0d\n  this.send(buffer\x2C offset\x2C length\x2C port\x2C address\x2C callback);\x0d\n};\x0d\n\x0d\n\x0d\nfunction sliceBuffer(buffer\x2C offset\x2C length) {\x0d\n  if (typeof buffer === 'string') {\x0d\n    buffer = Buffer.from(buffer);\x0d\n  } else if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buffer'\x2C\x0d\n                                   ['Buffer'\x2C\x0d\n                                    'TypedArray'\x2C\x0d\n                                    'DataView'\x2C\x0d\n                                    'string']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n\x0d\n  offset = offset >>> 0;\x0d\n  length = length >>> 0;\x0d\n  if (offset > buffer.byteLength) {\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\x0d\n  }\x0d\n\x0d\n  if (offset + length > buffer.byteLength) {\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\x0d\n  }\x0d\n\x0d\n  return Buffer.from(buffer.buffer\x2C buffer.byteOffset + offset\x2C length);\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixBufferList(list) {\x0d\n  const newlist = new Array(list.length);\x0d\n\x0d\n  for (let i = 0\x2C l = list.length; i < l; i++) {\x0d\n    const buf = list[i];\x0d\n    if (typeof buf === 'string')\x0d\n      newlist[i] = Buffer.from(buf);\x0d\n    else if (!isArrayBufferView(buf))\x0d\n      return null;\x0d\n    else\x0d\n      newlist[i] = Buffer.from(buf.buffer\x2C buf.byteOffset\x2C buf.byteLength);\x0d\n  }\x0d\n\x0d\n  return newlist;\x0d\n}\x0d\n\x0d\n\x0d\nfunction enqueue(self\x2C toEnqueue) {\x0d\n  const state = self[kStateSymbol];\x0d\n\x0d\n  // If the send queue hasn't been initialized yet\x2C do it\x2C and install an\x0d\n  // event handler that flushes the send queue after binding is done.\x0d\n  if (state.queue === undefined) {\x0d\n    state.queue = [];\x0d\n    self.once(EventEmitter.errorMonitor\x2C onListenError);\x0d\n    self.once('listening'\x2C onListenSuccess);\x0d\n  }\x0d\n  ArrayPrototypePush(state.queue\x2C toEnqueue);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onListenSuccess() {\x0d\n  this.removeListener(EventEmitter.errorMonitor\x2C onListenError);\x0d\n  FunctionPrototypeCall(clearQueue\x2C this);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onListenError(err) {\x0d\n  this.removeListener('listening'\x2C onListenSuccess);\x0d\n  this[kStateSymbol].queue = undefined;\x0d\n}\x0d\n\x0d\n\x0d\nfunction clearQueue() {\x0d\n  const state = this[kStateSymbol];\x0d\n  const queue = state.queue;\x0d\n  state.queue = undefined;\x0d\n\x0d\n  // Flush the send queue.\x0d\n  for (const queueEntry of queue)\x0d\n    queueEntry();\x0d\n}\x0d\n\x0d\n// valid combinations\x0d\n// For connectionless sockets\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C address\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C address)\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length\x2C port)\x0d\n// send(bufferOrList\x2C port\x2C address\x2C callback)\x0d\n// send(bufferOrList\x2C port\x2C address)\x0d\n// send(bufferOrList\x2C port\x2C callback)\x0d\n// send(bufferOrList\x2C port)\x0d\n// For connected sockets\x0d\n// send(buffer\x2C offset\x2C length\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length)\x0d\n// send(bufferOrList\x2C callback)\x0d\n// send(bufferOrList)\x0d\nSocket.prototype.send = function(buffer\x2C\x0d\n                                 offset\x2C\x0d\n                                 length\x2C\x0d\n                                 port\x2C\x0d\n                                 address\x2C\x0d\n                                 callback) {\x0d\n\x0d\n  let list;\x0d\n  const state = this[kStateSymbol];\x0d\n  const connected = state.connectState === CONNECT_STATE_CONNECTED;\x0d\n  if (!connected) {\x0d\n    if (address || (port && typeof port !== 'function')) {\x0d\n      buffer = sliceBuffer(buffer\x2C offset\x2C length);\x0d\n    } else {\x0d\n      callback = port;\x0d\n      port = offset;\x0d\n      address = length;\x0d\n    }\x0d\n  } else {\x0d\n    if (typeof length === 'number') {\x0d\n      buffer = sliceBuffer(buffer\x2C offset\x2C length);\x0d\n      if (typeof port === 'function') {\x0d\n        callback = port;\x0d\n        port = null;\x0d\n      }\x0d\n    } else {\x0d\n      callback = offset;\x0d\n    }\x0d\n\x0d\n    if (port || address)\x0d\n      throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\x0d\n  }\x0d\n\x0d\n  if (!ArrayIsArray(buffer)) {\x0d\n    if (typeof buffer === 'string') {\x0d\n      list = [ Buffer.from(buffer) ];\x0d\n    } else if (!isArrayBufferView(buffer)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('buffer'\x2C\x0d\n                                     ['Buffer'\x2C\x0d\n                                      'TypedArray'\x2C\x0d\n                                      'DataView'\x2C\x0d\n                                      'string']\x2C\x0d\n                                     buffer);\x0d\n    } else {\x0d\n      list = [ buffer ];\x0d\n    }\x0d\n  } else if (!(list = fixBufferList(buffer))) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buffer list arguments'\x2C\x0d\n                                   ['Buffer'\x2C\x0d\n                                    'TypedArray'\x2C\x0d\n                                    'DataView'\x2C\x0d\n                                    'string']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n\x0d\n  if (!connected)\x0d\n    port = validatePort(port\x2C 'Port'\x2C false);\x0d\n\x0d\n  // Normalize callback so it's either a function or undefined but not anything\x0d\n  // else.\x0d\n  if (typeof callback !== 'function')\x0d\n    callback = undefined;\x0d\n\x0d\n  if (typeof address === 'function') {\x0d\n    callback = address;\x0d\n    address = undefined;\x0d\n  } else if (address && typeof address !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('address'\x2C ['string'\x2C 'falsy']\x2C address);\x0d\n  }\x0d\n\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (state.bindState === BIND_STATE_UNBOUND)\x0d\n    this.bind({ port: 0\x2C exclusive: true }\x2C null);\x0d\n\x0d\n  if (list.length === 0)\x0d\n    ArrayPrototypePush(list\x2C Buffer.alloc(0));\x0d\n\x0d\n  // If the socket hasn't been bound yet\x2C push the outbound packet onto the\x0d\n  // send queue and send after binding is complete.\x0d\n  if (state.bindState !== BIND_STATE_BOUND) {\x0d\n    enqueue(this\x2C FunctionPrototypeBind(this.send\x2C this\x2C\x0d\n                                        list\x2C port\x2C address\x2C callback));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const afterDns = (ex\x2C ip) => {\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C\x0d\n      doSend\x2C\x0d\n      ex\x2C this\x2C ip\x2C list\x2C address\x2C port\x2C callback\x0d\n    );\x0d\n  };\x0d\n\x0d\n  if (!connected) {\x0d\n    state.handle.lookup(address\x2C afterDns);\x0d\n  } else {\x0d\n    afterDns(null\x2C null);\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction doSend(ex\x2C self\x2C ip\x2C list\x2C address\x2C port\x2C callback) {\x0d\n  const state = self[kStateSymbol];\x0d\n\x0d\n  if (ex) {\x0d\n    if (typeof callback === 'function') {\x0d\n      process.nextTick(callback\x2C ex);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    process.nextTick(() => self.emit('error'\x2C ex));\x0d\n    return;\x0d\n  } else if (!state.handle) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const req = new SendWrap();\x0d\n  req.list = list;  // Keep reference alive.\x0d\n  req.address = address;\x0d\n  req.port = port;\x0d\n  if (callback) {\x0d\n    req.callback = callback;\x0d\n    req.oncomplete = afterSend;\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n  if (port)\x0d\n    err = state.handle.send(req\x2C list\x2C list.length\x2C port\x2C ip\x2C !!callback);\x0d\n  else\x0d\n    err = state.handle.send(req\x2C list\x2C list.length\x2C !!callback);\x0d\n\x0d\n  if (err >= 1) {\x0d\n    // Synchronous finish. The return code is msg_length + 1 so that we can\x0d\n    // distinguish between synchronous success and asynchronous success.\x0d\n    if (callback)\x0d\n      process.nextTick(callback\x2C null\x2C err - 1);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (err && callback) {\x0d\n    // Don't emit as error\x2C dgram_legacy.js compatibility\x0d\n    const ex = exceptionWithHostPort(err\x2C 'send'\x2C address\x2C port);\x0d\n    process.nextTick(callback\x2C ex);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction afterSend(err\x2C sent) {\x0d\n  if (err) {\x0d\n    err = exceptionWithHostPort(err\x2C 'send'\x2C this.address\x2C this.port);\x0d\n  } else {\x0d\n    err = null;\x0d\n  }\x0d\n\x0d\n  this.callback(err\x2C sent);\x0d\n}\x0d\n\x0d\nSocket.prototype.close = function(callback) {\x0d\n  const state = this[kStateSymbol];\x0d\n  const queue = state.queue;\x0d\n\x0d\n  if (typeof callback === 'function')\x0d\n    this.on('close'\x2C callback);\x0d\n\x0d\n  if (queue !== undefined) {\x0d\n    ArrayPrototypePush(queue\x2C FunctionPrototypeBind(this.close\x2C this));\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  healthCheck(this);\x0d\n  stopReceiving(this);\x0d\n  state.handle.close();\x0d\n  state.handle = null;\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             socketCloseNT\x2C\x0d\n                             this);\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction socketCloseNT(self) {\x0d\n  self.emit('close');\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.address = function() {\x0d\n  healthCheck(this);\x0d\n\x0d\n  const out = {};\x0d\n  const err = this[kStateSymbol].handle.getsockname(out);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'getsockname');\x0d\n  }\x0d\n\x0d\n  return out;\x0d\n};\x0d\n\x0d\nSocket.prototype.remoteAddress = function() {\x0d\n  healthCheck(this);\x0d\n\x0d\n  const state = this[kStateSymbol];\x0d\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\x0d\n\x0d\n  const out = {};\x0d\n  const err = state.handle.getpeername(out);\x0d\n  if (err)\x0d\n    throw errnoException(err\x2C 'getpeername');\x0d\n\x0d\n  return out;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setBroadcast = function(arg) {\x0d\n  const err = this[kStateSymbol].handle.setBroadcast(arg ? 1 : 0);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setBroadcast');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setTTL = function(ttl) {\x0d\n  validateNumber(ttl\x2C 'ttl');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setTTL(ttl);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setTTL');\x0d\n  }\x0d\n\x0d\n  return ttl;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastTTL = function(ttl) {\x0d\n  validateNumber(ttl\x2C 'ttl');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setMulticastTTL(ttl);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastTTL');\x0d\n  }\x0d\n\x0d\n  return ttl;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastLoopback = function(arg) {\x0d\n  const err = this[kStateSymbol].handle.setMulticastLoopback(arg ? 1 : 0);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastLoopback');\x0d\n  }\x0d\n\x0d\n  return arg; // 0.4 compatibility\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastInterface = function(interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n  validateString(interfaceAddress\x2C 'interfaceAddress');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setMulticastInterface(interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastInterface');\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype.addMembership = function(multicastAddress\x2C\x0d\n                                          interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (!multicastAddress) {\x0d\n    throw new ERR_MISSING_ARGS('multicastAddress');\x0d\n  }\x0d\n\x0d\n  const { handle } = this[kStateSymbol];\x0d\n  const err = handle.addMembership(multicastAddress\x2C interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'addMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.dropMembership = function(multicastAddress\x2C\x0d\n                                           interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (!multicastAddress) {\x0d\n    throw new ERR_MISSING_ARGS('multicastAddress');\x0d\n  }\x0d\n\x0d\n  const { handle } = this[kStateSymbol];\x0d\n  const err = handle.dropMembership(multicastAddress\x2C interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'dropMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype.addSourceSpecificMembership = function(sourceAddress\x2C\x0d\n                                                        groupAddress\x2C\x0d\n                                                        interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  validateString(sourceAddress\x2C 'sourceAddress');\x0d\n  validateString(groupAddress\x2C 'groupAddress');\x0d\n\x0d\n  const err =\x0d\n    this[kStateSymbol].handle.addSourceSpecificMembership(sourceAddress\x2C\x0d\n                                                          groupAddress\x2C\x0d\n                                                          interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'addSourceSpecificMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.dropSourceSpecificMembership = function(sourceAddress\x2C\x0d\n                                                         groupAddress\x2C\x0d\n                                                         interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  validateString(sourceAddress\x2C 'sourceAddress');\x0d\n  validateString(groupAddress\x2C 'groupAddress');\x0d\n\x0d\n  const err =\x0d\n    this[kStateSymbol].handle.dropSourceSpecificMembership(sourceAddress\x2C\x0d\n                                                           groupAddress\x2C\x0d\n                                                           interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'dropSourceSpecificMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nfunction healthCheck(socket) {\x0d\n  if (!socket[kStateSymbol].handle) {\x0d\n    // Error message from dgram_legacy.js.\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_RUNNING();\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction stopReceiving(socket) {\x0d\n  const state = socket[kStateSymbol];\x0d\n\x0d\n  if (!state.receiving)\x0d\n    return;\x0d\n\x0d\n  state.handle.recvStop();\x0d\n  state.receiving = false;\x0d\n}\x0d\n\x0d\n\x0d\nfunction onMessage(nread\x2C handle\x2C buf\x2C rinfo) {\x0d\n  const self = handle[owner_symbol];\x0d\n  if (nread < 0) {\x0d\n    return self.emit('error'\x2C errnoException(nread\x2C 'recvmsg'));\x0d\n  }\x0d\n  rinfo.size = buf.length; // compatibility\x0d\n  self.emit('message'\x2C buf\x2C rinfo);\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.ref = function() {\x0d\n  const handle = this[kStateSymbol].handle;\x0d\n\x0d\n  if (handle)\x0d\n    handle.ref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.unref = function() {\x0d\n  const handle = this[kStateSymbol].handle;\x0d\n\x0d\n  if (handle)\x0d\n    handle.unref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setRecvBufferSize = function(size) {\x0d\n  bufferSize(this\x2C size\x2C RECV_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setSendBufferSize = function(size) {\x0d\n  bufferSize(this\x2C size\x2C SEND_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.getRecvBufferSize = function() {\x0d\n  return bufferSize(this\x2C 0\x2C RECV_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.getSendBufferSize = function() {\x0d\n  return bufferSize(this\x2C 0\x2C SEND_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\n// Deprecated private APIs.\x0d\nObjectDefineProperty(Socket.prototype\x2C '_handle'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].handle;\x0d\n  }\x2C 'Socket.prototype._handle is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].handle = val;\x0d\n  }\x2C 'Socket.prototype._handle is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_receiving'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].receiving;\x0d\n  }\x2C 'Socket.prototype._receiving is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].receiving = val;\x0d\n  }\x2C 'Socket.prototype._receiving is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_bindState'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].bindState;\x0d\n  }\x2C 'Socket.prototype._bindState is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].bindState = val;\x0d\n  }\x2C 'Socket.prototype._bindState is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_queue'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].queue;\x0d\n  }\x2C 'Socket.prototype._queue is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].queue = val;\x0d\n  }\x2C 'Socket.prototype._queue is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_reuseAddr'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].reuseAddr;\x0d\n  }\x2C 'Socket.prototype._reuseAddr is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].reuseAddr = val;\x0d\n  }\x2C 'Socket.prototype._reuseAddr is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype._healthCheck = deprecate(function() {\x0d\n  healthCheck(this);\x0d\n}\x2C 'Socket.prototype._healthCheck() is deprecated'\x2C 'DEP0112');\x0d\n\x0d\n\x0d\nSocket.prototype._stopReceiving = deprecate(function() {\x0d\n  stopReceiving(this);\x0d\n}\x2C 'Socket.prototype._stopReceiving() is deprecated'\x2C 'DEP0112');\x0d\n\x0d\n\x0d\n// Legacy alias on the C++ wrapper object. This is not public API\x2C so we may\x0d\n// want to runtime-deprecate it at some point. There's no hurry\x2C though.\x0d\nObjectDefineProperty(UDP.prototype\x2C 'owner'\x2C {\x0d\n  get() { return this[owner_symbol]; }\x2C\x0d\n  set(v) { return this[owner_symbol] = v; }\x0d\n});\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  _createSocketHandle: deprecate(\x0d\n    _createSocketHandle\x2C\x0d\n    'dgram._createSocketHandle() is deprecated'\x2C\x0d\n    'DEP0112'\x0d\n  )\x2C\x0d\n  createSocket\x2C\x0d\n  Socket\x0d\n};\x0d\n
code-source-info,0x2c63eb3a31e,104,0,28325,C0O0C4O28325,,
code-creation,Function,10,152412,0x2c63eb3c22e,1501, node:dgram:1:1,0x2c63eb3a298,~
code-source-info,0x2c63eb3c22e
tick,0x7ff7c11dbdf2,152621,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x2c63eb02fec,0x2c63eb022dd,0x2c63eb24c08,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1e07a,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
code-creation,Eval,10,152782,0x2c63eb3f636,5, node:internal/dgram:1:1,0x2c63eb3f430,~
script-source,105,node:internal/dgram,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { codes } = require('internal/errors');\x0d\nconst { UDP } = internalBinding('udp_wrap');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\nconst { UV_EINVAL } = internalBinding('uv');\x0d\nconst {\x0d\n  ERR_SOCKET_BAD_TYPE\x2C\x0d\n} = codes;\x0d\nconst kStateSymbol = Symbol('state symbol');\x0d\nlet dns;  // Lazy load for startup performance.\x0d\n\x0d\n\x0d\nfunction lookup4(lookup\x2C address\x2C callback) {\x0d\n  return lookup(address || '127.0.0.1'\x2C 4\x2C callback);\x0d\n}\x0d\n\x0d\n\x0d\nfunction lookup6(lookup\x2C address\x2C callback) {\x0d\n  return lookup(address || '::1'\x2C 6\x2C callback);\x0d\n}\x0d\n\x0d\nfunction newHandle(type\x2C lookup) {\x0d\n  if (lookup === undefined) {\x0d\n    if (dns === undefined) {\x0d\n      dns = require('dns');\x0d\n    }\x0d\n\x0d\n    lookup = dns.lookup;\x0d\n  } else {\x0d\n    validateFunction(lookup\x2C 'lookup');\x0d\n  }\x0d\n\x0d\n  if (type === 'udp4') {\x0d\n    const handle = new UDP();\x0d\n\x0d\n    handle.lookup = FunctionPrototypeBind(lookup4\x2C handle\x2C lookup);\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  if (type === 'udp6') {\x0d\n    const handle = new UDP();\x0d\n\x0d\n    handle.lookup = FunctionPrototypeBind(lookup6\x2C handle\x2C lookup);\x0d\n    handle.bind = handle.bind6;\x0d\n    handle.connect = handle.connect6;\x0d\n    handle.send = handle.send6;\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  throw new ERR_SOCKET_BAD_TYPE();\x0d\n}\x0d\n\x0d\n\x0d\nfunction _createSocketHandle(address\x2C port\x2C addressType\x2C fd\x2C flags) {\x0d\n  const handle = newHandle(addressType);\x0d\n  let err;\x0d\n\x0d\n  if (isInt32(fd) && fd > 0) {\x0d\n    const type = guessHandleType(fd);\x0d\n    if (type !== 'UDP') {\x0d\n      err = UV_EINVAL;\x0d\n    } else {\x0d\n      err = handle.open(fd);\x0d\n    }\x0d\n  } else if (port || address) {\x0d\n    err = handle.bind(address\x2C port || 0\x2C flags);\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    handle.close();\x0d\n    return err;\x0d\n  }\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  kStateSymbol\x2C\x0d\n  _createSocketHandle\x2C\x0d\n  newHandle\x0d\n};\x0d\n
code-source-info,0x2c63eb3f636,105,0,1941,C0O0C4O1941,,
code-creation,Function,10,152890,0x2c63eb3f8fe,196, node:internal/dgram:1:1,0x2c63eb3f5b0,~
code-source-info,0x2c63eb3f8fe,105,0,1941,C0O0C56O28C62O54C67O101C73O101C78O91C83O146C86O146C91O138C97O204C100O204C105O184C111O276C117O276C122O241C128O253C134O331C137O331C142O317C148O366C154O421C157O421C162O450C163O450C165O1863C172O1885C178O1902C184O1926C190O1878C195O1940,,
new,MemoryChunk,0x36339d00000,262144
code-creation,LazyCompile,10,153129,0x36339d03406,152,deprecate node:internal/util:96:19,0x2e6f8145aa8,~
script-source,16,node:internal/util,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  Error\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectConstruct\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  overrideStackTrace\x2C\x0d\n} = require('internal/errors');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\nconst {\x0d\n  getHiddenValue\x2C\x0d\n  setHiddenValue\x2C\x0d\n  arrow_message_private_symbol: kArrowMessagePrivateSymbolIndex\x2C\x0d\n  decorated_private_symbol: kDecoratedPrivateSymbolIndex\x2C\x0d\n  sleep: _sleep\x2C\x0d\n  toUSVString: _toUSVString\x2C\x0d\n} = internalBinding('util');\x0d\nconst { isNativeError } = internalBinding('types');\x0d\n\x0d\nconst noCrypto = !process.versions.openssl;\x0d\n\x0d\nconst experimentalWarnings = new SafeSet();\x0d\n\x0d\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\x0d\n\x0d\nconst unpairedSurrogateRe =\x0d\n  /(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])/;\x0d\nfunction toUSVString(val) {\x0d\n  const str = `${val}`;\x0d\n  // As of V8 5.5\x2C `str.search()` (and `unpairedSurrogateRe[@@search]()`) are\x0d\n  // slower than `unpairedSurrogateRe.exec()`.\x0d\n  const match = RegExpPrototypeExec(unpairedSurrogateRe\x2C str);\x0d\n  if (!match)\x0d\n    return str;\x0d\n  return _toUSVString(str\x2C match.index);\x0d\n}\x0d\n\x0d\nlet uvBinding;\x0d\n\x0d\nfunction lazyUv() {\x0d\n  uvBinding ??= internalBinding('uv');\x0d\n  return uvBinding;\x0d\n}\x0d\n\x0d\nfunction removeColors(str) {\x0d\n  return StringPrototypeReplace(str\x2C colorRegExp\x2C '');\x0d\n}\x0d\n\x0d\nfunction isError(e) {\x0d\n  // An error could be an instance of Error while not being a native error\x0d\n  // or could be from a different realm and not be instance of Error but still\x0d\n  // be a native error.\x0d\n  return isNativeError(e) || e instanceof Error;\x0d\n}\x0d\n\x0d\n// Keep a list of deprecation codes that have been warned on so we only warn on\x0d\n// each one once.\x0d\nconst codesWarned = new SafeSet();\x0d\n\x0d\nlet validateString;\x0d\n\x0d\n// Mark that a method should not be used.\x0d\n// Returns a modified function which warns once by default.\x0d\n// If --no-deprecation is set\x2C then it is a no-op.\x0d\nfunction deprecate(fn\x2C msg\x2C code) {\x0d\n  if (process.noDeprecation === true) {\x0d\n    return fn;\x0d\n  }\x0d\n\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateString === undefined)\x0d\n    ({ validateString } = require('internal/validators'));\x0d\n\x0d\n  if (code !== undefined)\x0d\n    validateString(code\x2C 'code');\x0d\n\x0d\n  let warned = false;\x0d\n  function deprecated(...args) {\x0d\n    if (!warned) {\x0d\n      warned = true;\x0d\n      if (code !== undefined) {\x0d\n        if (!codesWarned.has(code)) {\x0d\n          process.emitWarning(msg\x2C 'DeprecationWarning'\x2C code\x2C deprecated);\x0d\n          codesWarned.add(code);\x0d\n        }\x0d\n      } else {\x0d\n        process.emitWarning(msg\x2C 'DeprecationWarning'\x2C deprecated);\x0d\n      }\x0d\n    }\x0d\n    if (new.target) {\x0d\n      return ReflectConstruct(fn\x2C args\x2C new.target);\x0d\n    }\x0d\n    return ReflectApply(fn\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\x0d\n  ObjectSetPrototypeOf(deprecated\x2C fn);\x0d\n  if (fn.prototype) {\x0d\n    // Setting this (rather than using Object.setPrototype\x2C as above) ensures\x0d\n    // that calling the unwrapped constructor gives an instanceof the wrapped\x0d\n    // constructor.\x0d\n    deprecated.prototype = fn.prototype;\x0d\n  }\x0d\n\x0d\n  return deprecated;\x0d\n}\x0d\n\x0d\nfunction decorateErrorStack(err) {\x0d\n  if (!(isError(err) && err.stack) ||\x0d\n      getHiddenValue(err\x2C kDecoratedPrivateSymbolIndex) === true)\x0d\n    return;\x0d\n\x0d\n  const arrow = getHiddenValue(err\x2C kArrowMessagePrivateSymbolIndex);\x0d\n\x0d\n  if (arrow) {\x0d\n    err.stack = arrow + err.stack;\x0d\n    setHiddenValue(err\x2C kDecoratedPrivateSymbolIndex\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction assertCrypto() {\x0d\n  if (noCrypto)\x0d\n    throw new ERR_NO_CRYPTO();\x0d\n}\x0d\n\x0d\n// Return undefined if there is no match.\x0d\n// Move the "slow cases" to a separate function to make sure this function gets\x0d\n// inlined properly. That prioritizes the common case.\x0d\nfunction normalizeEncoding(enc) {\x0d\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\x0d\n  return slowCases(enc);\x0d\n}\x0d\n\x0d\nfunction slowCases(enc) {\x0d\n  switch (enc.length) {\x0d\n    case 4:\x0d\n      if (enc === 'UTF8') return 'utf8';\x0d\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf8') return 'utf8';\x0d\n      if (enc === 'ucs2') return 'utf16le';\x0d\n      break;\x0d\n    case 3:\x0d\n      if (enc === 'hex' || enc === 'HEX' ||\x0d\n          `${enc}`.toLowerCase() === 'hex')\x0d\n        return 'hex';\x0d\n      break;\x0d\n    case 5:\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      if (enc === 'UTF-8') return 'utf8';\x0d\n      if (enc === 'ASCII') return 'ascii';\x0d\n      if (enc === 'UCS-2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf-8') return 'utf8';\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      break;\x0d\n    case 6:\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      if (enc === 'BASE64') return 'base64';\x0d\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      break;\x0d\n    case 7:\x0d\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\x0d\n          `${enc}`.toLowerCase() === 'utf16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 8:\x0d\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\x0d\n        `${enc}`.toLowerCase() === 'utf-16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 9:\x0d\n      if (enc === 'base64url' || enc === 'BASE64URL' ||\x0d\n          `${enc}`.toLowerCase() === 'base64url')\x0d\n        return 'base64url';\x0d\n      break;\x0d\n    default:\x0d\n      if (enc === '') return 'utf8';\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitExperimentalWarning(feature) {\x0d\n  if (experimentalWarnings.has(feature)) return;\x0d\n  const msg = `${feature} is an experimental feature. This feature could ` +\x0d\n       'change at any time';\x0d\n  experimentalWarnings.add(feature);\x0d\n  process.emitWarning(msg\x2C 'ExperimentalWarning');\x0d\n}\x0d\n\x0d\nfunction filterDuplicateStrings(items\x2C low) {\x0d\n  const map = new SafeMap();\x0d\n  for (let i = 0; i < items.length; i++) {\x0d\n    const item = items[i];\x0d\n    const key = StringPrototypeToLowerCase(item);\x0d\n    if (low) {\x0d\n      map.set(key\x2C key);\x0d\n    } else {\x0d\n      map.set(key\x2C item);\x0d\n    }\x0d\n  }\x0d\n  return ArrayPrototypeSort(ArrayFrom(map.values()));\x0d\n}\x0d\n\x0d\nfunction cachedResult(fn) {\x0d\n  let result;\x0d\n  return () => {\x0d\n    if (result === undefined)\x0d\n      result = fn();\x0d\n    return ArrayPrototypeSlice(result);\x0d\n  };\x0d\n}\x0d\n\x0d\n// Useful for Wrapping an ES6 Class with a constructor Function that\x0d\n// does not require the new keyword. For instance:\x0d\n//   class A { constructor(x) {this.x = x;}}\x0d\n//   const B = createClassWrapper(A);\x0d\n//   B() instanceof A // true\x0d\n//   B() instanceof B // true\x0d\nfunction createClassWrapper(type) {\x0d\n  function fn(...args) {\x0d\n    return ReflectConstruct(type\x2C args\x2C new.target || type);\x0d\n  }\x0d\n  // Mask the wrapper function name and length values\x0d\n  ObjectDefineProperties(fn\x2C {\x0d\n    name: { value: type.name }\x2C\x0d\n    length: { value: type.length }\x0d\n  });\x0d\n  ObjectSetPrototypeOf(fn\x2C type);\x0d\n  fn.prototype = type.prototype;\x0d\n  return fn;\x0d\n}\x0d\n\x0d\nlet signalsToNamesMapping;\x0d\nfunction getSignalsToNamesMapping() {\x0d\n  if (signalsToNamesMapping !== undefined)\x0d\n    return signalsToNamesMapping;\x0d\n\x0d\n  signalsToNamesMapping = ObjectCreate(null);\x0d\n  for (const key in signals) {\x0d\n    signalsToNamesMapping[signals[key]] = key;\x0d\n  }\x0d\n\x0d\n  return signalsToNamesMapping;\x0d\n}\x0d\n\x0d\nfunction convertToValidSignal(signal) {\x0d\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\x0d\n    return signal;\x0d\n\x0d\n  if (typeof signal === 'string') {\x0d\n    const signalName = signals[StringPrototypeToUpperCase(signal)];\x0d\n    if (signalName) return signalName;\x0d\n  }\x0d\n\x0d\n  throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n}\x0d\n\x0d\nfunction getConstructorOf(obj) {\x0d\n  while (obj) {\x0d\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj\x2C 'constructor');\x0d\n    if (descriptor !== undefined &&\x0d\n        typeof descriptor.value === 'function' &&\x0d\n        descriptor.value.name !== '') {\x0d\n      return descriptor.value;\x0d\n    }\x0d\n\x0d\n    obj = ObjectGetPrototypeOf(obj);\x0d\n  }\x0d\n\x0d\n  return null;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorName(err) {\x0d\n  const entry = uvErrmapGet(err);\x0d\n  return entry ? entry[0] : `Unknown system error ${err}`;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorMap() {\x0d\n  return lazyUv().getErrorMap();\x0d\n}\x0d\n\x0d\nconst kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\x0d\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\x0d\n\x0d\nlet validateFunction;\x0d\n\x0d\nfunction promisify(original) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateFunction === undefined)\x0d\n    ({ validateFunction } = require('internal/validators'));\x0d\n\x0d\n  validateFunction(original\x2C 'original');\x0d\n\x0d\n  if (original[kCustomPromisifiedSymbol]) {\x0d\n    const fn = original[kCustomPromisifiedSymbol];\x0d\n\x0d\n    validateFunction(fn\x2C 'util.promisify.custom');\x0d\n\x0d\n    return ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n      value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n    });\x0d\n  }\x0d\n\x0d\n  // Names to create an object from in case the callback receives multiple\x0d\n  // arguments\x2C e.g. ['bytesRead'\x2C 'buffer'] for fs.read.\x0d\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\x0d\n\x0d\n  function fn(...args) {\x0d\n    return new Promise((resolve\x2C reject) => {\x0d\n      ArrayPrototypePush(args\x2C (err\x2C ...values) => {\x0d\n        if (err) {\x0d\n          return reject(err);\x0d\n        }\x0d\n        if (argumentNames !== undefined && values.length > 1) {\x0d\n          const obj = {};\x0d\n          for (let i = 0; i < argumentNames.length; i++)\x0d\n            obj[argumentNames[i]] = values[i];\x0d\n          resolve(obj);\x0d\n        } else {\x0d\n          resolve(values[0]);\x0d\n        }\x0d\n      });\x0d\n      ReflectApply(original\x2C this\x2C args);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  ObjectSetPrototypeOf(fn\x2C ObjectGetPrototypeOf(original));\x0d\n\x0d\n  ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n    value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n  });\x0d\n  return ObjectDefineProperties(\x0d\n    fn\x2C\x0d\n    ObjectGetOwnPropertyDescriptors(original)\x0d\n  );\x0d\n}\x0d\n\x0d\npromisify.custom = kCustomPromisifiedSymbol;\x0d\n\x0d\n// The built-in Array#join is slower in v8 6.0\x0d\nfunction join(output\x2C separator) {\x0d\n  let str = '';\x0d\n  if (output.length !== 0) {\x0d\n    const lastIndex = output.length - 1;\x0d\n    for (let i = 0; i < lastIndex; i++) {\x0d\n      // It is faster not to use a template string here\x0d\n      str += output[i];\x0d\n      str += separator;\x0d\n    }\x0d\n    str += output[lastIndex];\x0d\n  }\x0d\n  return str;\x0d\n}\x0d\n\x0d\n// As of V8 6.6\x2C depending on the size of the array\x2C this is anywhere\x0d\n// between 1.5-10x faster than the two-arg version of Array#splice()\x0d\nfunction spliceOne(list\x2C index) {\x0d\n  for (; index + 1 < list.length; index++)\x0d\n    list[index] = list[index + 1];\x0d\n  list.pop();\x0d\n}\x0d\n\x0d\nconst kNodeModulesRE = /^(.*)[\\\\/]node_modules[\\\\/]/;\x0d\n\x0d\nlet getStructuredStack;\x0d\n\x0d\nfunction isInsideNodeModules() {\x0d\n  if (getStructuredStack === undefined) {\x0d\n    // Lazy-load to avoid a circular dependency.\x0d\n    const { runInNewContext } = require('vm');\x0d\n    // Use `runInNewContext()` to get something tamper-proof and\x0d\n    // side-effect-free. Since this is currently only used for a deprecated API\x2C\x0d\n    // the perf implications should be okay.\x0d\n    getStructuredStack = runInNewContext(`(function() {\x0d\n      try { Error.stackTraceLimit = Infinity; } catch {}\x0d\n      return function structuredStack() {\x0d\n        const e = new Error();\x0d\n        overrideStackTrace.set(e\x2C (err\x2C trace) => trace);\x0d\n        return e.stack;\x0d\n      };\x0d\n    })()`\x2C { overrideStackTrace }\x2C { filename: 'structured-stack' });\x0d\n  }\x0d\n\x0d\n  const stack = getStructuredStack();\x0d\n\x0d\n  // Iterate over all stack frames and look for the first one not coming\x0d\n  // from inside Node.js itself:\x0d\n  if (ArrayIsArray(stack)) {\x0d\n    for (const frame of stack) {\x0d\n      const filename = frame.getFileName();\x0d\n      // If a filename does not start with / or contain \\\x2C\x0d\n      // it's likely from Node.js core.\x0d\n      if (!RegExpPrototypeTest(/^\\/|\\\\/\x2C filename))\x0d\n        continue;\x0d\n      return RegExpPrototypeTest(kNodeModulesRE\x2C filename);\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction once(callback) {\x0d\n  let called = false;\x0d\n  return function(...args) {\x0d\n    if (called) return;\x0d\n    called = true;\x0d\n    ReflectApply(callback\x2C this\x2C args);\x0d\n  };\x0d\n}\x0d\n\x0d\nlet validateUint32;\x0d\n\x0d\nfunction sleep(msec) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateUint32 === undefined)\x0d\n    ({ validateUint32 } = require('internal/validators'));\x0d\n\x0d\n  validateUint32(msec\x2C 'msec');\x0d\n  _sleep(msec);\x0d\n}\x0d\n\x0d\nfunction createDeferredPromise() {\x0d\n  let resolve;\x0d\n  let reject;\x0d\n  const promise = new Promise((res\x2C rej) => {\x0d\n    resolve = res;\x0d\n    reject = rej;\x0d\n  });\x0d\n\x0d\n  return { promise\x2C resolve\x2C reject };\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#define-the-operations\x0d\nfunction defineOperation(target\x2C name\x2C method) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value: method\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-interfaces\x0d\nfunction exposeInterface(target\x2C name\x2C interfaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: interfaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\nlet DOMException;\x0d\nconst lazyDOMException = hideStackFrames((message\x2C name) => {\x0d\n  if (DOMException === undefined)\x0d\n    DOMException = internalBinding('messaging').DOMException;\x0d\n  return new DOMException(message\x2C name);\x0d\n});\x0d\n\x0d\nfunction structuredClone(value) {\x0d\n  const {\x0d\n    DefaultSerializer\x2C\x0d\n    DefaultDeserializer\x2C\x0d\n  } = require('v8');\x0d\n  const ser = new DefaultSerializer();\x0d\n  ser._getDataCloneError = hideStackFrames((message) =>\x0d\n    lazyDOMException(message\x2C 'DataCloneError'));\x0d\n  ser.writeValue(value);\x0d\n  const serialized = ser.releaseBuffer();\x0d\n\x0d\n  const des = new DefaultDeserializer(serialized);\x0d\n  return des.readValue();\x0d\n}\x0d\n\x0d\nconst kEnumerableProperty = ObjectCreate(null);\x0d\nkEnumerableProperty.enumerable = true;\x0d\n\x0d\nmodule.exports = {\x0d\n  assertCrypto\x2C\x0d\n  cachedResult\x2C\x0d\n  convertToValidSignal\x2C\x0d\n  createClassWrapper\x2C\x0d\n  createDeferredPromise\x2C\x0d\n  decorateErrorStack\x2C\x0d\n  defineOperation\x2C\x0d\n  deprecate\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  exposeInterface\x2C\x0d\n  filterDuplicateStrings\x2C\x0d\n  getConstructorOf\x2C\x0d\n  getSystemErrorMap\x2C\x0d\n  getSystemErrorName\x2C\x0d\n  isError\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  join\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  once\x2C\x0d\n  promisify\x2C\x0d\n  sleep\x2C\x0d\n  spliceOne\x2C\x0d\n  structuredClone\x2C\x0d\n  toUSVString\x2C\x0d\n  removeColors\x2C\x0d\n\x0d\n  // Symbol used to customize promisify conversion\x0d\n  customPromisifyArgs: kCustomPromisifyArgsSymbol\x2C\x0d\n\x0d\n  // Symbol used to provide a custom inspect function for an object as an\x0d\n  // alternative to using 'inspect'\x0d\n  customInspectSymbol: SymbolFor('nodejs.util.inspect.custom')\x2C\x0d\n\x0d\n  // Used by the buffer module to capture an internal reference to the\x0d\n  // default isEncoding implementation\x2C just in case userland overrides it.\x0d\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol')\x2C\x0d\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol')\x2C\x0d\n\x0d\n  kEnumerableProperty\x2C\x0d\n};\x0d\n
code-source-info,0x36339d03406,16,2503,3720,C0O2503C26O2524C31O2536C37O2550C42O2567C44O2577C45O2636C53O2675C61O2697C66O2678C83O2735C87O2764C100O2764C105O2812C106O2812C108O3407C121O3407C126O3448C129O3455C135O3652C141O3678C145O3673C149O3699C151O3717,,
tick,0x7ff7c01f0a54,153854,0,0x0,3,0x7ff7c08240c0,0x2c63eb3c670,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb24c08,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1e07a,0x2c63eb0300d,0x2c63eb022dd,0x2c63eb1c43a,0x2c63eb06502,0x2c63eb02065
code-creation,Function,11,153942,0x231d0e040c0,1344,deprecate node:internal/util:96:19,0x2e6f8145aa8,^
code-source-info,0x231d0e040c0,16,2503,3720,,,
code-creation,Function,11,153971,0x231d0e04660,664,nativeModuleRequire node:internal/bootstrap/loaders:332:29,0xa82968fdc0,^
code-source-info,0x231d0e04660,9,10647,11000,,,
code-creation,Function,11,153994,0x231d0e04960,548,internalBinding node:internal/bootstrap/loaders:164:45,0xa82968f840,^
code-source-info,0x231d0e04960,9,5278,5523,,,
code-creation,Function,11,154023,0x231d0e04c00,1252,compileForInternalLoader node:internal/bootstrap/loaders:299:27,0xa82968fcf0,^
code-source-info,0x231d0e04c00,9,9827,10410,,,
code-creation,Eval,10,154211,0x36339d05ad6,5, node:internal/socket_list:1:1,0x36339d05980,~
script-source,106,node:internal/socket_list,'use strict';\x0d\n\x0d\nconst { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('internal/errors').codes;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\n\x0d\n// This object keeps track of the sockets that are sent\x0d\nclass SocketListSend extends EventEmitter {\x0d\n  constructor(child\x2C key) {\x0d\n    super();\x0d\n    this.key = key;\x0d\n    this.child = child;\x0d\n    child.once('exit'\x2C () => this.emit('exit'\x2C this));\x0d\n  }\x0d\n\x0d\n  _request(msg\x2C cmd\x2C swallowErrors\x2C callback) {\x0d\n    const self = this;\x0d\n\x0d\n    if (!this.child.connected) return onclose();\x0d\n    this.child._send(msg\x2C undefined\x2C swallowErrors);\x0d\n\x0d\n    function onclose() {\x0d\n      self.child.removeListener('internalMessage'\x2C onreply);\x0d\n      callback(new ERR_CHILD_CLOSED_BEFORE_REPLY());\x0d\n    }\x0d\n\x0d\n    function onreply(msg) {\x0d\n      if (!(msg.cmd === cmd && msg.key === self.key)) return;\x0d\n      self.child.removeListener('disconnect'\x2C onclose);\x0d\n      self.child.removeListener('internalMessage'\x2C onreply);\x0d\n\x0d\n      callback(null\x2C msg);\x0d\n    }\x0d\n\x0d\n    this.child.once('disconnect'\x2C onclose);\x0d\n    this.child.on('internalMessage'\x2C onreply);\x0d\n  }\x0d\n\x0d\n  close(callback) {\x0d\n    this._request({\x0d\n      cmd: 'NODE_SOCKET_NOTIFY_CLOSE'\x2C\x0d\n      key: this.key\x0d\n    }\x2C 'NODE_SOCKET_ALL_CLOSED'\x2C true\x2C callback);\x0d\n  }\x0d\n\x0d\n  getConnections(callback) {\x0d\n    this._request({\x0d\n      cmd: 'NODE_SOCKET_GET_COUNT'\x2C\x0d\n      key: this.key\x0d\n    }\x2C 'NODE_SOCKET_COUNT'\x2C false\x2C (err\x2C msg) => {\x0d\n      if (err) return callback(err);\x0d\n      callback(null\x2C msg.count);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\n// This object keeps track of the sockets that are received\x0d\nclass SocketListReceive extends EventEmitter {\x0d\n  constructor(child\x2C key) {\x0d\n    super();\x0d\n\x0d\n    this.connections = 0;\x0d\n    this.key = key;\x0d\n    this.child = child;\x0d\n\x0d\n    function onempty(self) {\x0d\n      if (!self.child.connected) return;\x0d\n\x0d\n      self.child._send({\x0d\n        cmd: 'NODE_SOCKET_ALL_CLOSED'\x2C\x0d\n        key: self.key\x0d\n      }\x2C undefined\x2C true);\x0d\n    }\x0d\n\x0d\n    this.child.on('internalMessage'\x2C (msg) => {\x0d\n      if (msg.key !== this.key) return;\x0d\n\x0d\n      if (msg.cmd === 'NODE_SOCKET_NOTIFY_CLOSE') {\x0d\n        // Already empty\x0d\n        if (this.connections === 0) return onempty(this);\x0d\n\x0d\n        // Wait for sockets to get closed\x0d\n        this.once('empty'\x2C onempty);\x0d\n      } else if (msg.cmd === 'NODE_SOCKET_GET_COUNT') {\x0d\n        if (!this.child.connected) return;\x0d\n        this.child._send({\x0d\n          cmd: 'NODE_SOCKET_COUNT'\x2C\x0d\n          key: this.key\x2C\x0d\n          count: this.connections\x0d\n        });\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  add(obj) {\x0d\n    this.connections++;\x0d\n\x0d\n    // Notify the previous owner of the socket about its state change\x0d\n    obj.socket.once('close'\x2C () => {\x0d\n      this.connections--;\x0d\n\x0d\n      if (this.connections === 0) this.emit('empty'\x2C this);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = { SocketListSend\x2C SocketListReceive };\x0d\n
code-source-info,0x36339d05ad6,106,0,2813,C0O0C4O2813,,
code-creation,Function,10,154377,0x36339d06116,126, node:internal/socket_list:1:1,0x36339d05a50,~
code-source-info,0x36339d06116,106,0,2813,C0O0C8O59C11O59C16O85C21O25C27O117C30O117C35O225C73O1583C101O2756C108O2775C114O2791C120O2771C125O2812,,
code-creation,LazyCompile,10,154563,0x36339d06cb6,14,customPromiseExecFunction node:child_process:230:35,0x2c63eb1d9b8,~
code-source-info,0x36339d06cb6,99,6803,7183,C0O6803C9O6818C13O7180,,
code-creation,LazyCompile,10,154635,0x36339d08cd6,129,_forkChild node:child_process:169:20,0x2c63eb1d458,~
code-source-info,0x36339d08cd6,99,5058,5540,C0O5058C8O5122C19O5131C22O5145C29O5122C35O5156C40O5156C45O5171C50O5171C54O5199C72O5199C77O5199C79O5247C84O5255C97O5255C103O5390C108O5398C121O5398C128O5539,,
tick,0x7ffdf681cdb4,155203,1,0x7ff7c0229b60,6,0x7ff7c0bf59a0,0x36339d08cfe,0x2c63eb1c444,0x2c63eb06502,0x2c63eb02065
tick,0x7ffdf5e70239,157200,1,0x7ff7c0229b60,6,0x7ff7c0bf59a0,0x36339d08cfe,0x2c63eb1c444,0x2c63eb06502,0x2c63eb02065
code-creation,LazyCompile,10,158104,0x36339d096d6,396,setupChannel node:internal/child_process:571:22,0x2c63eb236a0,~
code-source-info,0x36339d096d
code-creation,LazyCompile,10,158206,0x36339d0beae,72,Control node:internal/child_process:529:14,0x2c63eb23ed8,~
code-source-info,0x36339d0beae,100,14308,14402,C3O14325C11O14325C40O14339C48O14353C52O14369C59O14374C64O14392C71O14401,,
code-creation,LazyCompile,10,158247,0x36339d0bfe6,21,EventEmitter node:events:208:22,0x2e6f816b1b0,~
code-source-info,0x36339d0bfe6,23,6474,6524,C0O6486C3O6499C8O6504C13O6504C20O6523,,
code-creation,LazyCompile,10,158308,0x36339d0c12e,149,EventEmitter.init node:events:327:29,0x2e6f816b5a8,~
code-source-info,0x36339d0c12e,23,10006,10614,C0O10029C6O10066C13O10078C16O10078C21O10104C25O10074C30O10121C32O10136C37O10136C41O10134C45O10161C46O10179C50O10220C60O10213C64O10255C71O10263C80O10291C85O10312C93O10291C98O10366C100O10371C105O10383C108O10396C113O10383C117O10381C123O10556C125O10561C131O10586C138O10596C140O10595C143O10571C148O10613,,
code-creation,Eval,10,158559,0x36339d0cc76,5, node:internal/child_process/serialization:1:1,0x36339d0c990,~
script-source,107,node:internal/child_process/serialization,'use strict';\x0d\n\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  TypedArrayPrototypeSubarray\x2C\x0d\n} = primordials;\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { StringDecoder } = require('string_decoder');\x0d\nconst v8 = require('v8');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst assert = require('internal/assert');\x0d\nconst { streamBaseState\x2C kLastWriteWasAsync } = internalBinding('stream_wrap');\x0d\n\x0d\nconst kMessageBuffer = Symbol('kMessageBuffer');\x0d\nconst kJSONBuffer = Symbol('kJSONBuffer');\x0d\nconst kStringDecoder = Symbol('kStringDecoder');\x0d\n\x0d\n// Extend V8's serializer APIs to give more JSON-like behaviour in\x0d\n// some cases; in particular\x2C for native objects this serializes them the same\x0d\n// way that JSON does rather than throwing an exception.\x0d\nconst kArrayBufferViewTag = 0;\x0d\nconst kNotArrayBufferViewTag = 1;\x0d\nclass ChildProcessSerializer extends v8.DefaultSerializer {\x0d\n  _writeHostObject(object) {\x0d\n    if (isArrayBufferView(object)) {\x0d\n      this.writeUint32(kArrayBufferViewTag);\x0d\n      return super._writeHostObject(object);\x0d\n    }\x0d\n    this.writeUint32(kNotArrayBufferViewTag);\x0d\n    this.writeValue({ ...object });\x0d\n  }\x0d\n}\x0d\n\x0d\nclass ChildProcessDeserializer extends v8.DefaultDeserializer {\x0d\n  _readHostObject() {\x0d\n    const tag = this.readUint32();\x0d\n    if (tag === kArrayBufferViewTag)\x0d\n      return super._readHostObject();\x0d\n\x0d\n    assert(tag === kNotArrayBufferViewTag);\x0d\n    return this.readValue();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Messages are parsed in either of the following formats:\x0d\n// - Newline-delimited JSON\x2C or\x0d\n// - V8-serialized buffers\x2C prefixed with their length as a big endian uint32\x0d\n//   (aka 'advanced')\x0d\nconst advanced = {\x0d\n  initMessageChannel(channel) {\x0d\n    channel[kMessageBuffer] = Buffer.alloc(0);\x0d\n    channel.buffering = false;\x0d\n  }\x2C\x0d\n\x0d\n  *parseChannelMessages(channel\x2C readData) {\x0d\n    if (readData.length === 0) return;\x0d\n\x0d\n    let messageBuffer = Buffer.concat([channel[kMessageBuffer]\x2C readData]);\x0d\n    while (messageBuffer.length > 4) {\x0d\n      const size = messageBuffer.readUInt32BE();\x0d\n      if (messageBuffer.length < 4 + size) {\x0d\n        break;\x0d\n      }\x0d\n\x0d\n      const deserializer = new ChildProcessDeserializer(\x0d\n        TypedArrayPrototypeSubarray(messageBuffer\x2C 4\x2C 4 + size));\x0d\n      messageBuffer = TypedArrayPrototypeSubarray(messageBuffer\x2C 4 + size);\x0d\n\x0d\n      deserializer.readHeader();\x0d\n      yield deserializer.readValue();\x0d\n    }\x0d\n    channel[kMessageBuffer] = messageBuffer;\x0d\n    channel.buffering = messageBuffer.length > 0;\x0d\n  }\x2C\x0d\n\x0d\n  writeChannelMessage(channel\x2C req\x2C message\x2C handle) {\x0d\n    const ser = new ChildProcessSerializer();\x0d\n    ser.writeHeader();\x0d\n    ser.writeValue(message);\x0d\n    const serializedMessage = ser.releaseBuffer();\x0d\n    const sizeBuffer = Buffer.allocUnsafe(4);\x0d\n    sizeBuffer.writeUInt32BE(serializedMessage.length);\x0d\n\x0d\n    const buffer = Buffer.concat([\x0d\n      sizeBuffer\x2C\x0d\n      serializedMessage\x2C\x0d\n    ]);\x0d\n    const result = channel.writeBuffer(req\x2C buffer\x2C handle);\x0d\n    // Mirror what stream_base_commons.js does for Buffer retention.\x0d\n    if (streamBaseState[kLastWriteWasAsync])\x0d\n      req.buffer = buffer;\x0d\n    return result;\x0d\n  }\x2C\x0d\n};\x0d\n\x0d\nconst json = {\x0d\n  initMessageChannel(channel) {\x0d\n    channel[kJSONBuffer] = '';\x0d\n    channel[kStringDecoder] = undefined;\x0d\n  }\x2C\x0d\n\x0d\n  *parseChannelMessages(channel\x2C readData) {\x0d\n    if (readData.length === 0) return;\x0d\n\x0d\n    if (channel[kStringDecoder] === undefined)\x0d\n      channel[kStringDecoder] = new StringDecoder('utf8');\x0d\n    const chunks =\x0d\n      StringPrototypeSplit(channel[kStringDecoder].write(readData)\x2C '\\n');\x0d\n    const numCompleteChunks = chunks.length - 1;\x0d\n    // Last line does not have trailing linebreak\x0d\n    const incompleteChunk = chunks[numCompleteChunks];\x0d\n    if (numCompleteChunks === 0) {\x0d\n      channel[kJSONBuffer] += incompleteChunk;\x0d\n    } else {\x0d\n      chunks[0] = channel[kJSONBuffer] + chunks[0];\x0d\n      for (let i = 0; i < numCompleteChunks; i++)\x0d\n        yield JSONParse(chunks[i]);\x0d\n      channel[kJSONBuffer] = incompleteChunk;\x0d\n    }\x0d\n    channel.buffering = channel[kJSONBuffer].length !== 0;\x0d\n  }\x2C\x0d\n\x0d\n  writeChannelMessage(channel\x2C req\x2C message\x2C handle) {\x0d\n    const string = JSONStringify(message) + '\\n';\x0d\n    return channel.writeUtf8String(req\x2C string\x2C handle);\x0d\n  }\x2C\x0d\n};\x0d\n\x0d\nmodule.exports = { advanced\x2C json };\x0d\n
code-source-info,0x36339d0cc76,107,0,4335,C0O0C4O4335,,
code-creation,Function,10,158752,0x36339d0d4de,369, node:internal/child_process/serialization:1:1,0x36339d0cbf0,~
code-source-info,0x36339d0d4de,107,0,4335,C0O0C56O28C62O42C68O60C74O85C79O96C85O163C88O163C93O152C99O209C102O209C107O191C113O248C116O248C121O294C124O294C129O272C135O342C138O342C142O342C144O419C147O419C152O379C158O396C164O477C167O477C171O477C173O524C176O524C180O524C182O571C185O571C189O571C191O834C192O834C194O869C196O869C202O913C237O873C243O1237C278O1195C280O1695C285O1700C293O1821C301O2538C312O3192C317O3197C325O3312C333O4122C344O4297C351O4316C357O4326C363O4312C368O4334,,
code-creation,LazyCompile,10,158909,0x36339d0e17e,23,initMessageChannel node:internal/child_process/serialization:100:21,0x36339d0ced8,~
code-source-info,0x36339d0e17e,107,3215,3305,C0O3232C2O3240C7O3253C11O3264C13O3272C17O3288C22O3304,,
code-creation,LazyCompile,10,158980,0x36339d0e7d6,19,_getMaxListeners node:events:404:26,0x2e6f816b778,~
code-source-info,0x36339d0e7d6,23,12272,12400,C0O12293C6O12327C9O12347C13O12367C14O12383C18O12397,,
code-creation,LazyCompile,10,159011,0x36339d0e8ce,5,get node:events:264:16,0x2e6f816b398,~
code-source-info,0x36339d0e8ce,23,8043,8085,C0O8053C4O8080,,
code-creation,LazyCompile,10,159072,0x36339d0ec2e,322,arrayClone node:events:879:20,0x2e6f816c040,~
code-source-info,0x36339d0ec2e,23,26079,26544,C0O26221C42O26244C50O26255C62O26263C71O26268C72O26282C80O26293C92O26301C104O26309C113O26314C114O26328C122O26339C134O26347C146O26355C158O26363C167O26368C168O26382C176O26393C188O26401C200O26409C212O26417C224O26425C233O26430C234O26444C242O26455C254O26463C266O26471C278O26479C290O26487C302O26495C311O26500C312O26509C317O26516C321O26541,,
code-creation,LazyCompile,10,159142,0x36339d0eefe,22, node:internal/child_process:706:36,0x36339d091f0,~
code-source-info,0x36339d0eefe,100,20095,20508,C0O20107C5O20115C15O20115C21O20507,,
tick,0x7ff7c0879e33,159197,0,0x0,2,0x7ff7c08240c0,0x36339d0ef0d,0x2c63eb15827,0x2c63eb150a3,0x2c63eb1299c,0x36339d08d37,0x2c63eb1c444,0x2c63eb06502,0x2c63eb02065
code-creation,LazyCompile,10,159251,0x36339d0f19e,368,nextTick node:internal/process/task_queues:104:18,0x273fd31aa50,~
script-source,32,node:internal/process/task_queues,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  // For easy access to the nextTick state in the C++ land\x2C\x0d\n  // and to avoid unnecessary calls into JS land.\x0d\n  tickInfo\x2C\x0d\n  // Used to run V8's micro task queue.\x0d\n  runMicrotasks\x2C\x0d\n  setTickCallback\x2C\x0d\n  enqueueMicrotask\x0d\n} = internalBinding('task_queue');\x0d\n\x0d\nconst {\x0d\n  setHasRejectionToWarn\x2C\x0d\n  hasRejectionToWarn\x2C\x0d\n  listenForRejections\x2C\x0d\n  processPromiseRejections\x0d\n} = require('internal/process/promises');\x0d\n\x0d\nconst {\x0d\n  getDefaultTriggerAsyncId\x2C\x0d\n  newAsyncId\x2C\x0d\n  initHooksExist\x2C\x0d\n  destroyHooksExist\x2C\x0d\n  emitInit\x2C\x0d\n  emitBefore\x2C\x0d\n  emitAfter\x2C\x0d\n  emitDestroy\x2C\x0d\n  symbols: { async_id_symbol\x2C trigger_async_id_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst FixedQueue = require('internal/fixed_queue');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { AsyncResource } = require('async_hooks');\x0d\n\x0d\n// *Must* match Environment::TickInfo::Fields in src/env.h.\x0d\nconst kHasTickScheduled = 0;\x0d\n\x0d\nfunction hasTickScheduled() {\x0d\n  return tickInfo[kHasTickScheduled] === 1;\x0d\n}\x0d\n\x0d\nfunction setHasTickScheduled(value) {\x0d\n  tickInfo[kHasTickScheduled] = value ? 1 : 0;\x0d\n}\x0d\n\x0d\nconst queue = new FixedQueue();\x0d\n\x0d\n// Should be in sync with RunNextTicksNative in node_task_queue.cc\x0d\nfunction runNextTicks() {\x0d\n  if (!hasTickScheduled() && !hasRejectionToWarn())\x0d\n    runMicrotasks();\x0d\n  if (!hasTickScheduled() && !hasRejectionToWarn())\x0d\n    return;\x0d\n\x0d\n  processTicksAndRejections();\x0d\n}\x0d\n\x0d\nfunction processTicksAndRejections() {\x0d\n  let tock;\x0d\n  do {\x0d\n    while ((tock = queue.shift()) !== null) {\x0d\n      const asyncId = tock[async_id_symbol];\x0d\n      emitBefore(asyncId\x2C tock[trigger_async_id_symbol]\x2C tock);\x0d\n\x0d\n      try {\x0d\n        const callback = tock.callback;\x0d\n        if (tock.args === undefined) {\x0d\n          callback();\x0d\n        } else {\x0d\n          const args = tock.args;\x0d\n          switch (args.length) {\x0d\n            case 1: callback(args[0]); break;\x0d\n            case 2: callback(args[0]\x2C args[1]); break;\x0d\n            case 3: callback(args[0]\x2C args[1]\x2C args[2]); break;\x0d\n            case 4: callback(args[0]\x2C args[1]\x2C args[2]\x2C args[3]); break;\x0d\n            default: callback(...args);\x0d\n          }\x0d\n        }\x0d\n      } finally {\x0d\n        if (destroyHooksExist())\x0d\n          emitDestroy(asyncId);\x0d\n      }\x0d\n\x0d\n      emitAfter(asyncId);\x0d\n    }\x0d\n    runMicrotasks();\x0d\n  } while (!queue.isEmpty() || processPromiseRejections());\x0d\n  setHasTickScheduled(false);\x0d\n  setHasRejectionToWarn(false);\x0d\n}\x0d\n\x0d\n// `nextTick()` will not enqueue any callback when the process is about to\x0d\n// exit since the callback would not have a chance to be executed.\x0d\nfunction nextTick(callback) {\x0d\n  validateCallback(callback);\x0d\n\x0d\n  if (process._exiting)\x0d\n    return;\x0d\n\x0d\n  let args;\x0d\n  switch (arguments.length) {\x0d\n    case 1: break;\x0d\n    case 2: args = [arguments[1]]; break;\x0d\n    case 3: args = [arguments[1]\x2C arguments[2]]; break;\x0d\n    case 4: args = [arguments[1]\x2C arguments[2]\x2C arguments[3]]; break;\x0d\n    default:\x0d\n      args = new Array(arguments.length - 1);\x0d\n      for (let i = 1; i < arguments.length; i++)\x0d\n        args[i - 1] = arguments[i];\x0d\n  }\x0d\n\x0d\n  if (queue.isEmpty())\x0d\n    setHasTickScheduled(true);\x0d\n  const asyncId = newAsyncId();\x0d\n  const triggerAsyncId = getDefaultTriggerAsyncId();\x0d\n  const tickObject = {\x0d\n    [async_id_symbol]: asyncId\x2C\x0d\n    [trigger_async_id_symbol]: triggerAsyncId\x2C\x0d\n    callback\x2C\x0d\n    args\x0d\n  };\x0d\n  if (initHooksExist())\x0d\n    emitInit(asyncId\x2C 'TickObject'\x2C triggerAsyncId\x2C tickObject);\x0d\n  queue.push(tickObject);\x0d\n}\x0d\n\x0d\nfunction runMicrotask() {\x0d\n  this.runInAsyncScope(() => {\x0d\n    const callback = this.callback;\x0d\n    try {\x0d\n      callback();\x0d\n    } finally {\x0d\n      this.emitDestroy();\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nconst defaultMicrotaskResourceOpts = { requireManualDestroy: true };\x0d\n\x0d\nfunction queueMicrotask(callback) {\x0d\n  validateFunction(callback\x2C 'callback');\x0d\n\x0d\n  const asyncResource = new AsyncResource(\x0d\n    'Microtask'\x2C\x0d\n    defaultMicrotaskResourceOpts\x0d\n  );\x0d\n  asyncResource.callback = callback;\x0d\n\x0d\n  enqueueMicrotask(FunctionPrototypeBind(runMicrotask\x2C asyncResource));\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  setupTaskQueue() {\x0d\n    // Sets the per-isolate promise rejection callback\x0d\n    listenForRejections();\x0d\n    // Sets the callback to be run in every tick.\x0d\n    setTickCallback(processTicksAndRejections);\x0d\n    return {\x0d\n      nextTick\x2C\x0d\n      runNextTicks\x0d\n    };\x0d\n  }\x2C\x0d\n  queueMicrotask\x0d\n};\x0d\n
code-source-info,0x36339d0f19e
code-creation,LazyCompile,10,159516,0x36339d0fa0e,21, node:internal/validators:222:42,0xa8296bd268,~
code-source-info,0x36339d0fa0e,15,7036,7140,C0O7055C6O7096C13O7102C18O7096C20O7139,,
code-creation,LazyCompile,10,159551,0x36339d0fb0e,15,isEmpty node:internal/fixed_queue:95:10,0x273fd31fc80,~
script-source,34,node:internal/fixed_queue,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Currently optimal queue size\x2C tested on V8 6.0 - 6.6. Must be power of two.\x0d\nconst kSize = 2048;\x0d\nconst kMask = kSize - 1;\x0d\n\x0d\n// The FixedQueue is implemented as a singly-linked list of fixed-size\x0d\n// circular buffers. It looks something like this:\x0d\n//\x0d\n//  head                                                       tail\x0d\n//    |                                                          |\x0d\n//    v                                                          v\x0d\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\x0d\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\x0d\n// +-----------+               +-----------+                  +-----------+\x0d\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |       bottom --> |   item    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |    ...    |               |    ...    |                  |    ...    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |  [empty]  | <-- top       |   item    |                  |   item    |\x0d\n// |  [empty]  |               |   item    |                  |   item    |\x0d\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\x0d\n// +-----------+               +-----------+                  +-----------+\x0d\n//\x0d\n// Or\x2C if there is only one circular buffer\x2C it looks something\x0d\n// like either of these:\x0d\n//\x0d\n//  head   tail                                 head   tail\x0d\n//    |     |                                     |     |\x0d\n//    v     v                                     v     v\x0d\n// +-----------+                               +-----------+\x0d\n// |  [null]   |                               |  [null]   |\x0d\n// +-----------+                               +-----------+\x0d\n// |  [empty]  |                               |   item    |\x0d\n// |  [empty]  |                               |   item    |\x0d\n// |   item    | <-- bottom            top --> |  [empty]  |\x0d\n// |   item    |                               |  [empty]  |\x0d\n// |  [empty]  | <-- top            bottom --> |   item    |\x0d\n// |  [empty]  |                               |   item    |\x0d\n// +-----------+                               +-----------+\x0d\n//\x0d\n// Adding a value means moving `top` forward by one\x2C removing means\x0d\n// moving `bottom` forward by one. After reaching the end\x2C the queue\x0d\n// wraps around.\x0d\n//\x0d\n// When `top === bottom` the current queue is empty and when\x0d\n// `top + 1 === bottom` it's full. This wastes a single space of storage\x0d\n// but allows much quicker checks.\x0d\n\x0d\nclass FixedCircularBuffer {\x0d\n  constructor() {\x0d\n    this.bottom = 0;\x0d\n    this.top = 0;\x0d\n    this.list = new Array(kSize);\x0d\n    this.next = null;\x0d\n  }\x0d\n\x0d\n  isEmpty() {\x0d\n    return this.top === this.bottom;\x0d\n  }\x0d\n\x0d\n  isFull() {\x0d\n    return ((this.top + 1) & kMask) === this.bottom;\x0d\n  }\x0d\n\x0d\n  push(data) {\x0d\n    this.list[this.top] = data;\x0d\n    this.top = (this.top + 1) & kMask;\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    const nextItem = this.list[this.bottom];\x0d\n    if (nextItem === undefined)\x0d\n      return null;\x0d\n    this.list[this.bottom] = undefined;\x0d\n    this.bottom = (this.bottom + 1) & kMask;\x0d\n    return nextItem;\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = class FixedQueue {\x0d\n  constructor() {\x0d\n    this.head = this.tail = new FixedCircularBuffer();\x0d\n  }\x0d\n\x0d\n  isEmpty() {\x0d\n    return this.head.isEmpty();\x0d\n  }\x0d\n\x0d\n  push(data) {\x0d\n    if (this.head.isFull()) {\x0d\n      // Head is full: Creates a new queue\x2C sets the old queue's `.next` to it\x2C\x0d\n      // and sets it as the new main queue.\x0d\n      this.head = this.head.next = new FixedCircularBuffer();\x0d\n    }\x0d\n    this.head.push(data);\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    const tail = this.tail;\x0d\n    const next = tail.shift();\x0d\n    if (tail.isEmpty() && tail.next !== null) {\x0d\n      // If there is another queue\x2C it forms the new tail.\x0d\n      this.tail = tail.next;\x0d\n    }\x0d\n    return next;\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x36339d0fb0e,34,3731,3773,C0O3753C5O3758C10O3758C14O3768,,
code-creation,LazyCompile,10,159737,0x36339d0ffc6,13,isEmpty node:internal/fixed_queue:67:10,0x273fd31fa10,~
code-source-info,0x36339d0ffc6,34,3150,3197,C0O3172C5O3185C9O3176C12O3192,,
code-creation,LazyCompile,10,159769,0x36339d100b6,25,setHasTickScheduled node:internal/process/task_queues:52:29,0x273fd31a960,~
code-source-info,0x36339d100b6,32,1155,1215,C0O1168C7O1177C12O1198C19O1196C24O1214,,
code-creation,LazyCompile,10,159831,0x36339d101ae,23,newAsyncId node:internal/async_hooks:417:20,0xa8296b8838,~
script-source,13,node:internal/async_hooks,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst promiseHooks = require('internal/promise_hooks');\x0d\n\x0d\nconst async_wrap = internalBinding('async_wrap');\x0d\nconst { setCallbackTrampoline } = async_wrap;\x0d\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\x0d\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\x0d\n * hooks for each type.\x0d\n *\x0d\n * async_id_fields is a Float64Array wrapping the double array of\x0d\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\x0d\n * the various asynchronous states of the application. These are:\x0d\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\x0d\n *    current execution stack.\x0d\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\x0d\n *    the resource corresponding to the current execution stack.\x0d\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\x0d\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\x0d\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\x0d\n *    of retrieving the triggerAsyncId value is:\x0d\n *    1. the value passed directly to the constructor\x0d\n *    2. value set in kDefaultTriggerAsyncId\x0d\n *    3. executionAsyncId of the current resource.\x0d\n *\x0d\n * async_ids_stack is a Float64Array that contains part of the async ID\x0d\n * stack. Each pushAsyncContext() call adds two doubles to it\x2C and each\x0d\n * popAsyncContext() call removes two doubles from it.\x0d\n * It has a fixed size\x2C so if that is exceeded\x2C calls to the native\x0d\n * side are used instead in pushAsyncContext() and popAsyncContext().\x0d\n */\x0d\nconst {\x0d\n  async_hook_fields\x2C\x0d\n  async_id_fields\x2C\x0d\n  execution_async_resources\x0d\n} = async_wrap;\x0d\n// Store the pair executionAsyncId and triggerAsyncId in a AliasedFloat64Array\x0d\n// in Environment::AsyncHooks::async_ids_stack_ which tracks the resource\x0d\n// responsible for the current execution stack. This is unwound as each resource\x0d\n// exits. In the case of a fatal exception this stack is emptied after calling\x0d\n// each hook's after() callback.\x0d\nconst {\x0d\n  pushAsyncContext: pushAsyncContext_\x2C\x0d\n  popAsyncContext: popAsyncContext_\x2C\x0d\n  executionAsyncResource: executionAsyncResource_\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n} = async_wrap;\x0d\n// Properties in active_hooks are used to keep track of the set of hooks being\x0d\n// executed in case another hook is enabled/disabled. The new set of hooks is\x0d\n// then restored once the active set of hooks is finished executing.\x0d\nconst active_hooks = {\x0d\n  // Array of all AsyncHooks that will be iterated whenever an async event\x0d\n  // fires. Using var instead of (preferably const) in order to assign\x0d\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\x0d\n  // execution.\x0d\n  array: []\x2C\x0d\n  // Use a counter to track nested calls of async hook callbacks and make sure\x0d\n  // the active_hooks.array isn't altered mid execution.\x0d\n  call_depth: 0\x2C\x0d\n  // Use to temporarily store and updated active_hooks.array if the user\x0d\n  // enables or disables a hook while hooks are being processed. If a hook is\x0d\n  // enabled() or disabled() during hook execution then the current set of\x0d\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\x0d\n  // subsequent changes are on the duplicated array. When all hooks have\x0d\n  // completed executing active_hooks.tmp_array is assigned to\x0d\n  // active_hooks.array.\x0d\n  tmp_array: null\x2C\x0d\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\x0d\n  // async_hook_fields can't be reassigned\x2C store each uint32 in an array that\x0d\n  // is written back to async_hook_fields when active_hooks.array is restored.\x0d\n  tmp_fields: null\x0d\n};\x0d\n\x0d\nconst { registerDestroyHook } = async_wrap;\x0d\nconst { enqueueMicrotask } = internalBinding('task_queue');\x0d\nconst { resource_symbol\x2C owner_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Each constant tracks how many callbacks there are for any given step of\x0d\n// async execution. These are tracked so if the user didn't include callbacks\x0d\n// for a given step\x2C that step can bail out early.\x0d\nconst {\x0d\n  kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x2C\x0d\n  kCheck\x2C kExecutionAsyncId\x2C kAsyncIdCounter\x2C kTriggerAsyncId\x2C\x0d\n  kDefaultTriggerAsyncId\x2C kStackLength\x2C kUsesExecutionAsyncResource\x2C\x0d\n} = async_wrap.constants;\x0d\n\x0d\nconst { async_id_symbol\x2C\x0d\n        trigger_async_id_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Lazy load of internal/util/inspect;\x0d\nlet inspect;\x0d\n\x0d\n// Used in AsyncHook and AsyncResource.\x0d\nconst init_symbol = Symbol('init');\x0d\nconst before_symbol = Symbol('before');\x0d\nconst after_symbol = Symbol('after');\x0d\nconst destroy_symbol = Symbol('destroy');\x0d\nconst promise_resolve_symbol = Symbol('promiseResolve');\x0d\nconst emitBeforeNative = emitHookFactory(before_symbol\x2C 'emitBeforeNative');\x0d\nconst emitAfterNative = emitHookFactory(after_symbol\x2C 'emitAfterNative');\x0d\nconst emitDestroyNative = emitHookFactory(destroy_symbol\x2C 'emitDestroyNative');\x0d\nconst emitPromiseResolveNative =\x0d\n    emitHookFactory(promise_resolve_symbol\x2C 'emitPromiseResolveNative');\x0d\n\x0d\nlet domain_cb;\x0d\nfunction useDomainTrampoline(fn) {\x0d\n  domain_cb = fn;\x0d\n}\x0d\n\x0d\nfunction callbackTrampoline(asyncId\x2C resource\x2C cb\x2C ...args) {\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  execution_async_resources[index] = resource;\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n\x0d\n  let result;\x0d\n  if (asyncId === 0 && typeof domain_cb === 'function') {\x0d\n    args.unshift(cb);\x0d\n    result = domain_cb.apply(this\x2C args);\x0d\n  } else {\x0d\n    result = cb.apply(this\x2C args);\x0d\n  }\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  execution_async_resources.pop();\x0d\n  return result;\x0d\n}\x0d\n\x0d\nconst topLevelResource = {};\x0d\n\x0d\nfunction executionAsyncResource() {\x0d\n  // Indicate to the native layer that this function is likely to be used\x2C\x0d\n  // in which case it will inform JS about the current async resource via\x0d\n  // the trampoline above.\x0d\n  async_hook_fields[kUsesExecutionAsyncResource] = 1;\x0d\n\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  if (index === -1) return topLevelResource;\x0d\n  const resource = execution_async_resources[index] ||\x0d\n    executionAsyncResource_(index);\x0d\n  return lookupPublicResource(resource);\x0d\n}\x0d\n\x0d\nfunction inspectExceptionValue(e) {\x0d\n  inspect ??= require('internal/util/inspect').inspect;\x0d\n  return { message: inspect(e) };\x0d\n}\x0d\n\x0d\n// Used to fatally abort the process if a callback throws.\x0d\nfunction fatalError(e) {\x0d\n  if (typeof e?.stack === 'string') {\x0d\n    process._rawDebug(e.stack);\x0d\n  } else {\x0d\n    const o = inspectExceptionValue(e);\x0d\n    ErrorCaptureStackTrace(o\x2C fatalError);\x0d\n    process._rawDebug(o.stack);\x0d\n  }\x0d\n\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (getOptionValue('--abort-on-uncaught-exception')) {\x0d\n    process.abort();\x0d\n  }\x0d\n  process.exit(1);\x0d\n}\x0d\n\x0d\nfunction lookupPublicResource(resource) {\x0d\n  if (typeof resource !== 'object' || resource === null) return resource;\x0d\n  // TODO(addaleax): Merge this with owner_symbol and use it across all\x0d\n  // AsyncWrap instances.\x0d\n  const publicResource = resource[resource_symbol];\x0d\n  if (publicResource !== undefined)\x0d\n    return publicResource;\x0d\n  return resource;\x0d\n}\x0d\n\x0d\n// Emit From Native //\x0d\n\x0d\n// Used by C++ to call all init() callbacks. Because some state can be setup\x0d\n// from C++ there's no need to perform all the same operations as in\x0d\n// emitInitScript.\x0d\nfunction emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  resource = lookupPublicResource(resource);\x0d\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\x0d\n        active_hooks.array[i][init_symbol](\x0d\n          asyncId\x2C type\x2C triggerAsyncId\x2C\x0d\n          resource\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case active_hooks.tmp_array\x0d\n  // will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Called from native. The asyncId stack handling is taken care of there\x0d\n// before this is called.\x0d\nfunction emitHook(symbol\x2C asyncId) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  // Use a single try/catch for all hook to avoid setting up one per\x0d\n  // iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][symbol] === 'function') {\x0d\n        active_hooks.array[i][symbol](asyncId);\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case\x0d\n  // active_hooks.tmp_array will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitHookFactory(symbol\x2C name) {\x0d\n  const fn = emitHook.bind(undefined\x2C symbol);\x0d\n\x0d\n  // Set the name property of the function as it looks good in the stack trace.\x0d\n  ObjectDefineProperty(fn\x2C 'name'\x2C {\x0d\n    value: name\x0d\n  });\x0d\n  return fn;\x0d\n}\x0d\n\x0d\n// Manage Active Hooks //\x0d\n\x0d\nfunction getHookArrays() {\x0d\n  if (active_hooks.call_depth === 0)\x0d\n    return [active_hooks.array\x2C async_hook_fields];\x0d\n  // If this hook is being enabled while in the middle of processing the array\x0d\n  // of currently active hooks then duplicate the current set of active hooks\x0d\n  // and store this there. This shouldn't fire until the next time hooks are\x0d\n  // processed.\x0d\n  if (active_hooks.tmp_array === null)\x0d\n    storeActiveHooks();\x0d\n  return [active_hooks.tmp_array\x2C active_hooks.tmp_fields];\x0d\n}\x0d\n\x0d\n\x0d\nfunction storeActiveHooks() {\x0d\n  active_hooks.tmp_array = ArrayPrototypeSlice(active_hooks.array);\x0d\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\x0d\n  // 4. So do this the long way.\x0d\n  active_hooks.tmp_fields = [];\x0d\n  copyHooks(active_hooks.tmp_fields\x2C async_hook_fields);\x0d\n}\x0d\n\x0d\nfunction copyHooks(destination\x2C source) {\x0d\n  destination[kInit] = source[kInit];\x0d\n  destination[kBefore] = source[kBefore];\x0d\n  destination[kAfter] = source[kAfter];\x0d\n  destination[kDestroy] = source[kDestroy];\x0d\n  destination[kPromiseResolve] = source[kPromiseResolve];\x0d\n}\x0d\n\x0d\n\x0d\n// Then restore the correct hooks array in case any hooks were added/removed\x0d\n// during hook callback execution.\x0d\nfunction restoreActiveHooks() {\x0d\n  active_hooks.array = active_hooks.tmp_array;\x0d\n  copyHooks(async_hook_fields\x2C active_hooks.tmp_fields);\x0d\n\x0d\n  active_hooks.tmp_array = null;\x0d\n  active_hooks.tmp_fields = null;\x0d\n}\x0d\n\x0d\nfunction trackPromise(promise\x2C parent) {\x0d\n  if (promise[async_id_symbol]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Get trigger id from parent async id before making the async id of the\x0d\n  // child so if a new one must be made it will be lower than the child.\x0d\n  const triggerAsyncId = parent ? getOrSetAsyncId(parent) :\x0d\n    getDefaultTriggerAsyncId();\x0d\n\x0d\n  promise[async_id_symbol] = newAsyncId();\x0d\n  promise[trigger_async_id_symbol] = triggerAsyncId;\x0d\n}\x0d\n\x0d\nfunction promiseInitHook(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerAsyncId = promise[trigger_async_id_symbol];\x0d\n  emitInitScript(asyncId\x2C 'PROMISE'\x2C triggerAsyncId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseInitHookWithDestroyTracking(promise\x2C parent) {\x0d\n  promiseInitHook(promise\x2C parent);\x0d\n  destroyTracking(promise\x2C parent);\x0d\n}\x0d\n\x0d\nconst destroyedSymbol = Symbol('destroyed');\x0d\n\x0d\nfunction destroyTracking(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const destroyed = { destroyed: false };\x0d\n  promise[destroyedSymbol] = destroyed;\x0d\n  registerDestroyHook(promise\x2C asyncId\x2C destroyed);\x0d\n}\x0d\n\x0d\nfunction promiseBeforeHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerId = promise[trigger_async_id_symbol];\x0d\n  emitBeforeScript(asyncId\x2C triggerId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseAfterHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  if (hasHooks(kAfter)) {\x0d\n    emitAfterNative(asyncId);\x0d\n  }\x0d\n  if (asyncId === executionAsyncId()) {\x0d\n    // This condition might not be true if async_hooks was enabled during\x0d\n    // the promise callback execution.\x0d\n    // Popping it off the stack can be skipped in that case\x2C because it is\x0d\n    // known that it would correspond to exactly one call with\x0d\n    // PromiseHookType::kBefore that was not witnessed by the PromiseHook.\x0d\n    popAsyncContext(asyncId);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction promiseResolveHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  emitPromiseResolveNative(asyncId);\x0d\n}\x0d\n\x0d\nlet wantPromiseHook = false;\x0d\nfunction enableHooks() {\x0d\n  async_hook_fields[kCheck] += 1;\x0d\n\x0d\n  setCallbackTrampoline(callbackTrampoline);\x0d\n}\x0d\n\x0d\nlet stopPromiseHook;\x0d\nfunction updatePromiseHookMode() {\x0d\n  wantPromiseHook = true;\x0d\n  let initHook;\x0d\n  if (initHooksExist()) {\x0d\n    initHook = destroyHooksExist() ? promiseInitHookWithDestroyTracking :\x0d\n      promiseInitHook;\x0d\n  } else if (destroyHooksExist()) {\x0d\n    initHook = destroyTracking;\x0d\n  }\x0d\n  if (stopPromiseHook) stopPromiseHook();\x0d\n  stopPromiseHook = promiseHooks.createHook({\x0d\n    init: initHook\x2C\x0d\n    before: promiseBeforeHook\x2C\x0d\n    after: promiseAfterHook\x2C\x0d\n    settled: promiseResolveHooksExist() ? promiseResolveHook : undefined\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction disableHooks() {\x0d\n  async_hook_fields[kCheck] -= 1;\x0d\n\x0d\n  wantPromiseHook = false;\x0d\n\x0d\n  setCallbackTrampoline();\x0d\n\x0d\n  // Delay the call to `disablePromiseHook()` because we might currently be\x0d\n  // between the `before` and `after` calls of a Promise.\x0d\n  enqueueMicrotask(disablePromiseHookIfNecessary);\x0d\n}\x0d\n\x0d\nfunction disablePromiseHookIfNecessary() {\x0d\n  if (!wantPromiseHook && stopPromiseHook) {\x0d\n    stopPromiseHook();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Internal Embedder API //\x0d\n\x0d\n// Increment the internal id counter and return the value. Important that the\x0d\n// counter increment first. Since it's done the same way in\x0d\n// Environment::new_async_uid()\x0d\nfunction newAsyncId() {\x0d\n  return ++async_id_fields[kAsyncIdCounter];\x0d\n}\x0d\n\x0d\nfunction getOrSetAsyncId(object) {\x0d\n  if (ObjectPrototypeHasOwnProperty(object\x2C async_id_symbol)) {\x0d\n    return object[async_id_symbol];\x0d\n  }\x0d\n\x0d\n  return object[async_id_symbol] = newAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\x0d\n// the user to safeguard this call and make sure it's zero'd out when the\x0d\n// constructor is complete.\x0d\nfunction getDefaultTriggerAsyncId() {\x0d\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  // If defaultTriggerAsyncId isn't set\x2C use the executionAsyncId\x0d\n  if (defaultTriggerAsyncId < 0)\x0d\n    return async_id_fields[kExecutionAsyncId];\x0d\n  return defaultTriggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\nfunction clearDefaultTriggerAsyncId() {\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets a default top level trigger ID to be used\x0d\n *\x0d\n * @template {Array<unknown>} T\x0d\n * @template {unknown} R\x0d\n * @param {number} triggerAsyncId\x0d\n * @param { (...T: args) => R } block\x0d\n * @param  {T} args\x0d\n * @returns {R}\x0d\n */\x0d\nfunction defaultTriggerAsyncIdScope(triggerAsyncId\x2C block\x2C ...args) {\x0d\n  if (triggerAsyncId === undefined)\x0d\n    return block.apply(null\x2C args);\x0d\n  // CHECK(NumberIsSafeInteger(triggerAsyncId))\x0d\n  // CHECK(triggerAsyncId > 0)\x0d\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\x0d\n\x0d\n  try {\x0d\n    return block.apply(null\x2C args);\x0d\n  } finally {\x0d\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction hasHooks(key) {\x0d\n  return async_hook_fields[key] > 0;\x0d\n}\x0d\n\x0d\nfunction enabledHooksExist() {\x0d\n  return hasHooks(kCheck);\x0d\n}\x0d\n\x0d\nfunction initHooksExist() {\x0d\n  return hasHooks(kInit);\x0d\n}\x0d\n\x0d\nfunction afterHooksExist() {\x0d\n  return hasHooks(kAfter);\x0d\n}\x0d\n\x0d\nfunction destroyHooksExist() {\x0d\n  return hasHooks(kDestroy);\x0d\n}\x0d\n\x0d\nfunction promiseResolveHooksExist() {\x0d\n  return hasHooks(kPromiseResolve);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitInitScript(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  // Short circuit all checks for the common case. Which is that no hooks have\x0d\n  // been set. Do this to remove performance impact for embedders (and core).\x0d\n  if (!hasHooks(kInit))\x0d\n    return;\x0d\n\x0d\n  if (triggerAsyncId === null) {\x0d\n    triggerAsyncId = getDefaultTriggerAsyncId();\x0d\n  }\x0d\n\x0d\n  emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitBeforeScript(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource);\x0d\n\x0d\n  if (hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitAfterScript(asyncId) {\x0d\n  if (hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  popAsyncContext(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitDestroyScript(asyncId) {\x0d\n  // Return early if there are no destroy callbacks\x2C or invalid asyncId.\x0d\n  if (!hasHooks(kDestroy) || asyncId <= 0)\x0d\n    return;\x0d\n  async_wrap.queueDestroyAsyncId(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction hasAsyncIdStack() {\x0d\n  return hasHooks(kStackLength);\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native push_async_ids() call.\x0d\nfunction pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  const offset = async_hook_fields[kStackLength];\x0d\n  execution_async_resources[offset] = resource;\x0d\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\x0d\n    return pushAsyncContext_(asyncId\x2C triggerAsyncId);\x0d\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\x0d\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\x0d\n  async_hook_fields[kStackLength]++;\x0d\n  async_id_fields[kExecutionAsyncId] = asyncId;\x0d\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native pop_async_ids() call.\x0d\nfunction popAsyncContext(asyncId) {\x0d\n  const stackLength = async_hook_fields[kStackLength];\x0d\n  if (stackLength === 0) return false;\x0d\n\x0d\n  if (enabledHooksExist() && async_id_fields[kExecutionAsyncId] !== asyncId) {\x0d\n    // Do the same thing as the native code (i.e. crash hard).\x0d\n    return popAsyncContext_(asyncId);\x0d\n  }\x0d\n\x0d\n  const offset = stackLength - 1;\x0d\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\x0d\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\x0d\n  execution_async_resources.pop();\x0d\n  async_hook_fields[kStackLength] = offset;\x0d\n  return offset > 0;\x0d\n}\x0d\n\x0d\n\x0d\nfunction executionAsyncId() {\x0d\n  return async_id_fields[kExecutionAsyncId];\x0d\n}\x0d\n\x0d\nfunction triggerAsyncId() {\x0d\n  return async_id_fields[kTriggerAsyncId];\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  executionAsyncId\x2C\x0d\n  triggerAsyncId\x2C\x0d\n  // Private API\x0d\n  getHookArrays\x2C\x0d\n  symbols: {\x0d\n    async_id_symbol\x2C trigger_async_id_symbol\x2C\x0d\n    init_symbol\x2C before_symbol\x2C after_symbol\x2C destroy_symbol\x2C\x0d\n    promise_resolve_symbol\x2C owner_symbol\x0d\n  }\x2C\x0d\n  constants: {\x0d\n    kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x0d\n  }\x2C\x0d\n  enableHooks\x2C\x0d\n  disableHooks\x2C\x0d\n  updatePromiseHookMode\x2C\x0d\n  clearDefaultTriggerAsyncId\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n  hasAsyncIdStack\x2C\x0d\n  executionAsyncResource\x2C\x0d\n  // Internal Embedder API\x0d\n  newAsyncId\x2C\x0d\n  getOrSetAsyncId\x2C\x0d\n  getDefaultTriggerAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  enabledHooksExist\x2C\x0d\n  initHooksExist\x2C\x0d\n  afterHooksExist\x2C\x0d\n  destroyHooksExist\x2C\x0d\n  emitInit: emitInitScript\x2C\x0d\n  emitBefore: emitBeforeScript\x2C\x0d\n  emitAfter: emitAfterScript\x2C\x0d\n  emitDestroy: emitDestroyScript\x2C\x0d\n  pushAsyncContext\x2C\x0d\n  popAsyncContext\x2C\x0d\n  registerDestroyHook\x2C\x0d\n  useDomainTrampoline\x2C\x0d\n  nativeHooks: {\x0d\n    init: emitInitNative\x2C\x0d\n    before: emitBeforeNative\x2C\x0d\n    after: emitAfterNative\x2C\x0d\n    destroy: emitDestroyNative\x2C\x0d\n    promise_resolve: emitPromiseResolveNative\x0d\n  }\x2C\x0d\n  asyncWrap: {\x0d\n    Providers: async_wrap.Providers\x2C\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x36339d101ae,13,14929,14982,C0O14937C7O14962C16O14977C22O14979,,
code-creation,LazyCompile,10,160634,0x36339d1168e,35,getDefaultTriggerAsyncId node:internal/async_hooks:433:34,0xa8296b88d8,~
code-source-info,0x36339d1168e,13,15404,15667,C0O15442C7O15458C9O15457C13O15553C14O15579C19O15589C26O15612C28O15611C31O15631C32O15635C34O15664,,
code-creation,LazyCompile,10,160678,0x36339d1179e,13,initHooksExist node:internal/async_hooks:479:24,0xa8296b8ac8,~
code-source-info,0x36339d1179e,13,16671,16705,C0O16679C5O16695C8O16686C12O16702,,
code-creation,LazyCompile,10,160707,0x36339d11886,16,hasHooks node:internal/async_hooks:471:18,0xa8296b8a28,~
code-source-info,0x36339d11886,13,16531,16579,C0O16542C7O16566C12O16572C15O16576,,
code-creation,LazyCompile,10,160742,0x36339d11996,59,push node:internal/fixed_queue:99:7,0x273fd31fcd0,~
code-source-info,0x36339d11996,34,3783,4050,C0O3806C5O3811C10O3811C16O3973C23O3989C26O3985C32O3983C38O3966C42O4029C47O4034C52O4034C58O4049,,
code-creation,LazyCompile,10,160779,0x36339d11ade,24,isFull node:internal/fixed_queue:71:9,0x273fd31fa60,~
code-source-info,0x36339d11ade,34,3209,3272,C0O3233C4O3237C10O3244C12O3242C16O3260C20O3251C23O3267,,
code-creation,LazyCompile,10,160814,0x36339d11bee,37,push node:internal/fixed_queue:75:7,0x273fd31fac8,~
code-source-info,0x36339d11bee,34,3282,3368,C0O3301C5O3311C12O3316C16O3346C20O3350C26O3357C28O3355C31O3338C36O3367,,
code-creation,LazyCompile,10,160869,0x36339d11d0e,30,onNewListener node:child_process:175:51,0x36339d08b90,~
code-source-info,0x36339d11d0e,99,5295,5384,C0O5309C2O5318C9O5340C14O5358C19O5366C24O5366C29O5383,,
code-creation,LazyCompile,10,160977,0x36339d1205e,455,initializePolicy node:internal/bootstrap/pre_execution:421:26,0x2c63eb045e0,~
code-source-info,0x36339d1205e
code-creation,LazyCompile,10,161076,0x36339d1242e,63,initializeClusterIPC node:internal/bootstrap/pre_execution:412:30,0x2c63eb04590,~
code-source-info,0x36339d1242e,96,13124,13372,C0O13132C3O13144C10O13148C18O13163C23O13167C29O13206C35O13206C40O13239C45O13239C49O13330C52O13345C62O13371,,
code-creation,LazyCompile,10,161129,0x36339d1259e,27,initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:516:38,0x2c63eb04720,~
code-source-info,0x36339d1259e,96,17027,17180,C0O17073C6O17073C11O17043C16O17125C21O17154C26O17179,,
tick,0x7ffdf67bc5a0,161208,1,0x7ff7c02ae150,2,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d125a4,0x2c63eb06514,0x2c63eb02065
code-creation,Eval,10,161384,0x36339d12ed6,5, node:internal/source_map/source_map_cache:1:1,0x36339d12b70,~
script-source,108,node:internal/source_map/source_map_cache,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction ObjectGetValueSafe(obj\x2C key) {\x0d\n  const desc = ObjectGetOwnPropertyDescriptor(obj\x2C key);\x0d\n  return ObjectPrototypeHasOwnProperty(desc\x2C 'value') ? desc.value : undefined;\x0d\n}\x0d\n\x0d\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\x0d\nconst { Buffer } = require('buffer');\x0d\nlet debug = require('internal/util/debuglog').debuglog('source_map'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst fs = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { IterableWeakMap } = require('internal/util/iterable_weak_map');\x0d\nconst {\x0d\n  normalizeReferrerURL\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { validateBoolean } = require('internal/validators');\x0d\n// Since the CJS module cache is mutable\x2C which leads to memory leaks when\x0d\n// modules are deleted\x2C we use a WeakMap so that the source map cache will\x0d\n// be purged automatically:\x0d\nconst cjsSourceMapCache = new IterableWeakMap();\x0d\n// The esm cache is not mutable\x2C so we can use a Map without memory concerns:\x0d\nconst esmSourceMapCache = new SafeMap();\x0d\nconst { fileURLToPath\x2C pathToFileURL\x2C URL } = require('internal/url');\x0d\nlet SourceMap;\x0d\n\x0d\nlet sourceMapsEnabled;\x0d\nfunction getSourceMapsEnabled() {\x0d\n  if (sourceMapsEnabled === undefined) {\x0d\n    setSourceMapsEnabled(getOptionValue('--enable-source-maps'));\x0d\n  }\x0d\n  return sourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction setSourceMapsEnabled(val) {\x0d\n  validateBoolean(val\x2C 'val');\x0d\n\x0d\n  const {\x0d\n    setSourceMapsEnabled\x2C\x0d\n    setPrepareStackTraceCallback\x0d\n  } = internalBinding('errors');\x0d\n  setSourceMapsEnabled(val);\x0d\n  if (val) {\x0d\n    const {\x0d\n      prepareStackTrace\x0d\n    } = require('internal/source_map/prepare_stack_trace');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  } else if (sourceMapsEnabled !== undefined) {\x0d\n    // Reset prepare stack trace callback only when disabling source maps.\x0d\n    const {\x0d\n      prepareStackTrace\x2C\x0d\n    } = require('internal/errors');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  }\x0d\n\x0d\n  sourceMapsEnabled = val;\x0d\n}\x0d\n\x0d\nfunction maybeCacheSourceMap(filename\x2C content\x2C cjsModuleInstance) {\x0d\n  const sourceMapsEnabled = getSourceMapsEnabled();\x0d\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\x0d\n  try {\x0d\n    filename = normalizeReferrerURL(filename);\x0d\n  } catch (err) {\x0d\n    // This is most likely an [eval]-wrapper\x2C which is currently not\x0d\n    // supported.\x0d\n    debug(err);\x0d\n    return;\x0d\n  }\x0d\n  const match = StringPrototypeMatch(\x0d\n    content\x2C\x0d\n    /\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/\x0d\n  );\x0d\n  if (match) {\x0d\n    const data = dataFromUrl(filename\x2C match.groups.sourceMappingURL);\x0d\n    const url = data ? null : match.groups.sourceMappingURL;\x0d\n    if (cjsModuleInstance) {\x0d\n      cjsSourceMapCache.set(cjsModuleInstance\x2C {\x0d\n        filename\x2C\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    } else {\x0d\n      // If there is no cjsModuleInstance assume we are in a\x0d\n      // "modules/esm" context.\x0d\n      esmSourceMapCache.set(filename\x2C {\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction dataFromUrl(sourceURL\x2C sourceMappingURL) {\x0d\n  try {\x0d\n    const url = new URL(sourceMappingURL);\x0d\n    switch (url.protocol) {\x0d\n      case 'data:':\x0d\n        return sourceMapFromDataUrl(sourceURL\x2C url.pathname);\x0d\n      default:\x0d\n        debug(`unknown protocol ${url.protocol}`);\x0d\n        return null;\x0d\n    }\x0d\n  } catch (err) {\x0d\n    debug(err);\x0d\n    // If no scheme is present\x2C we assume we are dealing with a file path.\x0d\n    const mapURL = new URL(sourceMappingURL\x2C sourceURL).href;\x0d\n    return sourceMapFromFile(mapURL);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Cache the length of each line in the file that a source map was extracted\x0d\n// from. This allows translation from byte offset V8 coverage reports\x2C\x0d\n// to line/column offset Source Map V3.\x0d\nfunction lineLengths(content) {\x0d\n  // We purposefully keep \\r as part of the line-length calculation\x2C in\x0d\n  // cases where there is a \\r\\n separator\x2C so that this can be taken into\x0d\n  // account in coverage calculations.\x0d\n  return ArrayPrototypeMap(StringPrototypeSplit(content\x2C /\\n|\\u2028|\\u2029/)\x2C (line) => {\x0d\n    return line.length;\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction sourceMapFromFile(mapURL) {\x0d\n  try {\x0d\n    const content = fs.readFileSync(fileURLToPath(mapURL)\x2C 'utf8');\x0d\n    const data = JSONParse(content);\x0d\n    return sourcesToAbsolute(mapURL\x2C data);\x0d\n  } catch (err) {\x0d\n    debug(err);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// data:[<mediatype>][;base64]\x2C<data> see:\x0d\n// https://tools.ietf.org/html/rfc2397#section-2\x0d\nfunction sourceMapFromDataUrl(sourceURL\x2C url) {\x0d\n  const { 0: format\x2C 1: data } = StringPrototypeSplit(url\x2C '\x2C');\x0d\n  const splitFormat = StringPrototypeSplit(format\x2C ';');\x0d\n  const contentType = splitFormat[0];\x0d\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\x0d\n  if (contentType === 'application/json') {\x0d\n    const decodedData = base64 ?\x0d\n      Buffer.from(data\x2C 'base64').toString('utf8') : data;\x0d\n    try {\x0d\n      const parsedData = JSONParse(decodedData);\x0d\n      return sourcesToAbsolute(sourceURL\x2C parsedData);\x0d\n    } catch (err) {\x0d\n      debug(err);\x0d\n      return null;\x0d\n    }\x0d\n  } else {\x0d\n    debug(`unknown content-type ${contentType}`);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// If the sources are not absolute URLs after prepending of the "sourceRoot"\x2C\x0d\n// the sources are resolved relative to the SourceMap (like resolving script\x0d\n// src in a html document).\x0d\nfunction sourcesToAbsolute(baseURL\x2C data) {\x0d\n  data.sources = data.sources.map((source) => {\x0d\n    source = (data.sourceRoot || '') + source;\x0d\n    return new URL(source\x2C baseURL).href;\x0d\n  });\x0d\n  // The sources array is now resolved to absolute URLs\x2C sourceRoot should\x0d\n  // be updated to noop.\x0d\n  data.sourceRoot = '';\x0d\n  return data;\x0d\n}\x0d\n\x0d\n// WARNING: The `sourceMapCacheToObject` and `appendCJSCache` run during\x0d\n// shutdown. In particular\x2C they also run when Workers are terminated\x2C making\x0d\n// it important that they do not call out to any user-provided code\x2C including\x0d\n// built-in prototypes that might have been tampered with.\x0d\n\x0d\n// Get serialized representation of source-map cache\x2C this is used\x0d\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\x0d\nfunction sourceMapCacheToObject() {\x0d\n  const obj = ObjectCreate(null);\x0d\n\x0d\n  for (const { 0: k\x2C 1: v } of esmSourceMapCache) {\x0d\n    obj[k] = v;\x0d\n  }\x0d\n\x0d\n  appendCJSCache(obj);\x0d\n\x0d\n  if (ObjectKeys(obj).length === 0) {\x0d\n    return undefined;\x0d\n  }\x0d\n  return obj;\x0d\n}\x0d\n\x0d\nfunction appendCJSCache(obj) {\x0d\n  for (const value of cjsSourceMapCache) {\x0d\n    obj[ObjectGetValueSafe(value\x2C 'filename')] = {\x0d\n      lineLengths: ObjectGetValueSafe(value\x2C 'lineLengths')\x2C\x0d\n      data: ObjectGetValueSafe(value\x2C 'data')\x2C\x0d\n      url: ObjectGetValueSafe(value\x2C 'url')\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction findSourceMap(sourceURL) {\x0d\n  if (!RegExpPrototypeTest(/^\\w+:\\/\\//\x2C sourceURL)) {\x0d\n    sourceURL = pathToFileURL(sourceURL).href;\x0d\n  }\x0d\n  if (!SourceMap) {\x0d\n    SourceMap = require('internal/source_map/source_map').SourceMap;\x0d\n  }\x0d\n  let sourceMap = esmSourceMapCache.get(sourceURL);\x0d\n  if (sourceMap === undefined) {\x0d\n    for (const value of cjsSourceMapCache) {\x0d\n      const filename = ObjectGetValueSafe(value\x2C 'filename');\x0d\n      if (sourceURL === filename) {\x0d\n        sourceMap = {\x0d\n          data: ObjectGetValueSafe(value\x2C 'data')\x0d\n        };\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (sourceMap && sourceMap.data) {\x0d\n    return new SourceMap(sourceMap.data);\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  findSourceMap\x2C\x0d\n  getSourceMapsEnabled\x2C\x0d\n  setSourceMapsEnabled\x2C\x0d\n  maybeCacheSourceMap\x2C\x0d\n  sourceMapCacheToObject\x2C\x0d\n};\x0d\n
code-source-info,0x36339d12ed6,108,0,7881,C0O0C4O7881,,
code-creation,Function,10,161717,0x36339d1354e,435, node:internal/source_map/source_map_cache:1:1,0x36339d12e50,~
code-source-info,0x36339d1354e,108,0,7881,C0O0C152O28C158O50C164O64C170O81C176O96C182O131C188O165C194O189C199O201C205O226C211O547C217O547C222O536C228O579C234O579C239O612C252O613C258O579C260O678C266O678C270O678C272O721C278O721C283O702C289O779C295O779C300O759C305O862C311O862C316O835C322O932C328O932C333O912C339O1172C341O1172C346O1172C348O1301C350O1301C355O1301C357O1363C363O1363C368O1325C374O1340C380O1355C386O1393C387O1393C389O1411C390O1411C392O7738C399O7760C405O7778C411O7803C417O7828C423O7852C429O7753C434O7880,,
code-creation,Eval,10,161929,0x36339d1458e,5, node:internal/util/iterable_weak_map:1:1,0x36339d14340,~
script-source,109,node:internal/util/iterable_weak_map,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectFreeze\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeSet\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SymbolIterator\x2C\x0d\n} = primordials;\x0d\n\x0d\n// This class is modified from the example code in the WeakRefs specification:\x0d\n// https://github.com/tc39/proposal-weakrefs\x0d\n// Licensed under ECMA's MIT-style license\x2C see:\x0d\n// https://github.com/tc39/ecma262/blob/HEAD/LICENSE.md\x0d\nclass IterableWeakMap {\x0d\n  #weakMap = new SafeWeakMap();\x0d\n  #refSet = new SafeSet();\x0d\n  #finalizationGroup = new SafeFinalizationRegistry(cleanup);\x0d\n\x0d\n  set(key\x2C value) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (entry) {\x0d\n      // If there's already an entry for the object represented by "key"\x2C\x0d\n      // the value can be updated without creating a new WeakRef:\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref: entry.ref });\x0d\n    } else {\x0d\n      const ref = new SafeWeakRef(key);\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref });\x0d\n      this.#refSet.add(ref);\x0d\n      this.#finalizationGroup.register(key\x2C {\x0d\n        set: this.#refSet\x2C\x0d\n        ref\x0d\n      }\x2C ref);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  get(key) {\x0d\n    return this.#weakMap.get(key)?.value;\x0d\n  }\x0d\n\x0d\n  has(key) {\x0d\n    return this.#weakMap.has(key);\x0d\n  }\x0d\n\x0d\n  delete(key) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (!entry) {\x0d\n      return false;\x0d\n    }\x0d\n    this.#weakMap.delete(key);\x0d\n    this.#refSet.delete(entry.ref);\x0d\n    this.#finalizationGroup.unregister(entry.ref);\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  [SymbolIterator]() {\x0d\n    const iterator = this.#refSet[SymbolIterator]();\x0d\n\x0d\n    const next = () => {\x0d\n      const result = iterator.next();\x0d\n      if (result.done) return result;\x0d\n      const key = result.value.deref();\x0d\n      if (key == null) return next();\x0d\n      const { value } = this.#weakMap.get(key);\x0d\n      return { done: false\x2C value };\x0d\n    };\x0d\n\x0d\n    return {\x0d\n      [SymbolIterator]() { return this; }\x2C\x0d\n      next\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction cleanup({ set\x2C ref }) {\x0d\n  set.delete(ref);\x0d\n}\x0d\n\x0d\nObjectFreeze(IterableWeakMap.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  IterableWeakMap\x2C\x0d\n};\x0d\n
code-source-info,0x36339d1458e,109,0,2042,C0O0C4O2042,,
code-creation,Function,10,162039,0x36339d14cee,196, node:internal/util/iterable_weak_map:1:1,0x36339d14508,~
code-source-info,0x36339d14cee,109,0,2042,C0O0C26O28C31O45C37O74C43O86C49O102C55O118C134O1448C168O1983C173O1954C177O1998C184O2020C190O2013C195O2041,,
code-creation,Function,10,162063,0x36339d14e6e,75,<instance_members_initializer> node:internal/util/iterable_weak_map:17:3,0x36339d14818,~
code-source-info,0x36339d14e6e,109,415,534,C3O426C10O426C27O458C34O458C48O497C62O497C74O534,,
code-creation,Eval,10,162311,0x36339d15aa6,5, node:internal/modules/cjs/helpers:1:1,0x36339d157f0,~
script-source,110,node:internal/modules/cjs/helpers,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst {\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x0d\n} = require('internal/errors').codes;\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\n\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst path = require('path');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C URL } = require('internal/url');\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\n// TODO: Use this set when resolving pkg#exports conditions in loader.js.\x0d\nconst cjsConditions = new SafeSet([\x0d\n  'require'\x2C\x0d\n  'node'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nfunction loadNativeModule(filename\x2C request) {\x0d\n  const mod = NativeModule.map.get(filename);\x0d\n  if (mod?.canBeRequiredByUsers) {\x0d\n    debug('load native module %s'\x2C request);\x0d\n    // compileForPublicLoader() throws if mod.canBeRequiredByUsers is false:\x0d\n    mod.compileForPublicLoader();\x0d\n    return mod;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Invoke with makeRequireFunction(module) where |module| is the Module object\x0d\n// to use as the context for the require() function.\x0d\n// Use redirects to set up a mapping from a policy and restrict dependencies\x0d\nconst urlToFileCache = new SafeMap();\x0d\nfunction makeRequireFunction(mod\x2C redirects) {\x0d\n  const Module = mod.constructor;\x0d\n\x0d\n  let require;\x0d\n  if (redirects) {\x0d\n    const id = mod.filename || mod.id;\x0d\n    const conditions = cjsConditions;\x0d\n    const { resolve\x2C reaction } = redirects;\x0d\n    require = function require(specifier) {\x0d\n      let missing = true;\x0d\n      const destination = resolve(specifier\x2C conditions);\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        if (destination.protocol === 'node:') {\x0d\n          const specifier = destination.pathname;\x0d\n          const mod = loadNativeModule(specifier\x2C href);\x0d\n          if (mod && mod.canBeRequiredByUsers) {\x0d\n            return mod.exports;\x0d\n          }\x0d\n          throw new ERR_UNKNOWN_BUILTIN_MODULE(specifier);\x0d\n        } else if (destination.protocol === 'file:') {\x0d\n          let filepath;\x0d\n          if (urlToFileCache.has(href)) {\x0d\n            filepath = urlToFileCache.get(href);\x0d\n          } else {\x0d\n            filepath = fileURLToPath(destination);\x0d\n            urlToFileCache.set(href\x2C filepath);\x0d\n          }\x0d\n          return mod.require(filepath);\x0d\n        }\x0d\n      }\x0d\n      if (missing) {\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          id\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C ')\x0d\n        ));\x0d\n      }\x0d\n      return mod.require(specifier);\x0d\n    };\x0d\n  } else {\x0d\n    require = function require(path) {\x0d\n      return mod.require(path);\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function resolve(request\x2C options) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveFilename(request\x2C mod\x2C false\x2C options);\x0d\n  }\x0d\n\x0d\n  require.resolve = resolve;\x0d\n\x0d\n  function paths(request) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveLookupPaths(request\x2C mod);\x0d\n  }\x0d\n\x0d\n  resolve.paths = paths;\x0d\n\x0d\n  require.main = process.mainModule;\x0d\n\x0d\n  // Enable support to add extra extension types.\x0d\n  require.extensions = Module._extensions;\x0d\n\x0d\n  require.cache = Module._cache;\x0d\n\x0d\n  return require;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\x0d\n * because the buffer-to-string conversion in `fs.readFileSync()`\x0d\n * translates it to FEFF\x2C the UTF-16 BOM.\x0d\n */\x0d\nfunction stripBOM(content) {\x0d\n  if (StringPrototypeCharCodeAt(content) === 0xFEFF) {\x0d\n    content = StringPrototypeSlice(content\x2C 1);\x0d\n  }\x0d\n  return content;\x0d\n}\x0d\n\x0d\nfunction addBuiltinLibsToObject(object\x2C dummyModuleName) {\x0d\n  // Make built-in modules available directly (loaded lazily).\x0d\n  const Module = require('internal/modules/cjs/loader').Module;\x0d\n  const { builtinModules } = Module;\x0d\n\x0d\n  // To require built-in modules in user-land and ignore modules whose\x0d\n  // `canBeRequiredByUsers` is false. So we create a dummy module object and not\x0d\n  // use `require()` directly.\x0d\n  const dummyModule = new Module(dummyModuleName);\x0d\n\x0d\n  ArrayPrototypeForEach(builtinModules\x2C (name) => {\x0d\n    // Neither add underscored modules\x2C nor ones that contain slashes (e.g.\x2C\x0d\n    // 'fs/promises') or ones that are already defined.\x0d\n    if (StringPrototypeStartsWith(name\x2C '_') ||\x0d\n        StringPrototypeIncludes(name\x2C '/') ||\x0d\n        ObjectPrototypeHasOwnProperty(object\x2C name)) {\x0d\n      return;\x0d\n    }\x0d\n    // Goals of this mechanism are:\x0d\n    // - Lazy loading of built-in modules\x0d\n    // - Having all built-in modules available as non-enumerable properties\x0d\n    // - Allowing the user to re-assign these variables as if there were no\x0d\n    //   pre-existing globals with the same name.\x0d\n\x0d\n    const setReal = (val) => {\x0d\n      // Deleting the property before re-assigning it disables the\x0d\n      // getter/setter mechanism.\x0d\n      delete object[name];\x0d\n      object[name] = val;\x0d\n    };\x0d\n\x0d\n    ObjectDefineProperty(object\x2C name\x2C {\x0d\n      get: () => {\x0d\n        const lib = dummyModule.require(name);\x0d\n\x0d\n        // Disable the current getter/setter and set up a new\x0d\n        // non-enumerable property.\x0d\n        delete object[name];\x0d\n        ObjectDefineProperty(object\x2C name\x2C {\x0d\n          get: () => lib\x2C\x0d\n          set: setReal\x2C\x0d\n          configurable: true\x2C\x0d\n          enumerable: false\x0d\n        });\x0d\n\x0d\n        return lib;\x0d\n      }\x2C\x0d\n      set: setReal\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable: false\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string | URL} referrer\x0d\n * @returns {string}\x0d\n */\x0d\nfunction normalizeReferrerURL(referrer) {\x0d\n  if (typeof referrer === 'string' && path.isAbsolute(referrer)) {\x0d\n    return pathToFileURL(referrer).href;\x0d\n  }\x0d\n  return new URL(referrer).href;\x0d\n}\x0d\n\x0d\n// For error messages only - used to check if ESM syntax is in use.\x0d\nfunction hasEsmSyntax(code) {\x0d\n  debug('Checking for ESM syntax');\x0d\n  const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;\x0d\n  let root;\x0d\n  try {\x0d\n    root = parser.parse(code\x2C { sourceType: 'module'\x2C ecmaVersion: 'latest' });\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  return ArrayPrototypeSome(root.body\x2C (stmt) =>\x0d\n    stmt.type === 'ExportDefaultDeclaration' ||\x0d\n    stmt.type === 'ExportNamedDeclaration' ||\x0d\n    stmt.type === 'ImportDeclaration' ||\x0d\n    stmt.type === 'ExportAllDeclaration');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addBuiltinLibsToObject\x2C\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n};\x0d\n
code-source-info,0x36339d15aa6,110,0,7046,C0O0C4O7046,,
code-creation,Function,10,162649,0x36339d16026,536, node:internal/modules/cjs/helpers:1:1,0x36339d15a20,~
code-source-info,0x36339d16026,110,0,7046,C0O0C104O28C110O54C116O77C122O100C128O125C134O159C139O171C144O183C150O213C156O241C162O266C168O391C174O391C179O417C184O323C190O359C196O451C202O451C207O434C213O520C219O520C224O501C230O566C236O566C240O566C242O630C248O630C253O592C259O607C265O622C271O685C277O685C282O666C287O738C290O738C295O785C301O785C306O818C319O819C325O785C327O888C330O888C335O944C346O1077C353O1122C354O1122C410O1145C465O1077C470O1077C472O1721C474O1721C479O1721C481O6877C488O6899C494O6926C500O6944C506O6961C512O6982C518O7006C524O7031C530O6892C535O7045,,
code-creation,LazyCompile,10,162819,0x36339d16c8e,27,SafeSet node:internal/per_context/primordials:373:16,0xa82968a230,~
script-source,6,node:internal/per_context/primordials,'use strict';\x0d\n\x0d\n/* eslint-disable node-core/prefer-primordials */\x0d\n\x0d\n// This file subclasses and stores the JS builtins that come from the VM\x0d\n// so that Node.js's builtin modules do not need to later look these up from\x0d\n// the global proxy\x2C which can be mutated by users.\x0d\n\x0d\n// Use of primordials have sometimes a dramatic impact on performance\x2C please\x0d\n// benchmark all changes made in performance-sensitive areas of the codebase.\x0d\n// See: https://github.com/nodejs/node/pull/38248\x0d\n\x0d\nconst {\x0d\n  defineProperty: ReflectDefineProperty\x2C\x0d\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ownKeys: ReflectOwnKeys\x2C\x0d\n} = Reflect;\x0d\n\x0d\n// `uncurryThis` is equivalent to `func => Function.prototype.call.bind(func)`.\x0d\n// It is using `bind.bind(call)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.call` after it may have been mutated by users.\x0d\nconst { apply\x2C bind\x2C call } = Function.prototype;\x0d\nconst uncurryThis = bind.bind(call);\x0d\nprimordials.uncurryThis = uncurryThis;\x0d\n\x0d\n// `applyBind` is equivalent to `func => Function.prototype.apply.bind(func)`.\x0d\n// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.apply` after it may have been mutated by users.\x0d\nconst applyBind = bind.bind(apply);\x0d\nprimordials.applyBind = applyBind;\x0d\n\x0d\n// Methods that accept a variable number of arguments\x2C and thus it's useful to\x0d\n// also create `${prefix}${key}Apply`\x2C which uses `Function.prototype.apply`\x2C\x0d\n// instead of `Function.prototype.call`\x2C and thus doesn't require iterator\x0d\n// destructuring.\x0d\nconst varargsMethods = [\x0d\n  // 'ArrayPrototypeConcat' is omitted\x2C because it performs the spread\x0d\n  // on its own for arrays and array-likes with a truthy\x0d\n  // @@isConcatSpreadable symbol property.\x0d\n  'ArrayOf'\x2C\x0d\n  'ArrayPrototypePush'\x2C\x0d\n  'ArrayPrototypeUnshift'\x2C\x0d\n  // 'FunctionPrototypeCall' is omitted\x2C since there's 'ReflectApply'\x0d\n  // and 'FunctionPrototypeApply'.\x0d\n  'MathHypot'\x2C\x0d\n  'MathMax'\x2C\x0d\n  'MathMin'\x2C\x0d\n  'StringPrototypeConcat'\x2C\x0d\n  'TypedArrayOf'\x2C\x0d\n];\x0d\n\x0d\nfunction getNewKey(key) {\x0d\n  return typeof key === 'symbol' ?\x0d\n    `Symbol${key.description[7].toUpperCase()}${key.description.slice(8)}` :\x0d\n    `${key[0].toUpperCase()}${key.slice(1)}`;\x0d\n}\x0d\n\x0d\nfunction copyAccessor(dest\x2C prefix\x2C key\x2C { enumerable\x2C get\x2C set }) {\x0d\n  ReflectDefineProperty(dest\x2C `${prefix}Get${key}`\x2C {\x0d\n    value: uncurryThis(get)\x2C\x0d\n    enumerable\x0d\n  });\x0d\n  if (set !== undefined) {\x0d\n    ReflectDefineProperty(dest\x2C `${prefix}Set${key}`\x2C {\x0d\n      value: uncurryThis(set)\x2C\x0d\n      enumerable\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamed(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          // `src` is bound as the `this` so that the static `this` points\x0d\n          // to the object it was defined on\x2C\x0d\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\x0d\n          value: applyBind(desc.value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamedBound(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = value.bind(src);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          value: applyBind(value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPrototype(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = uncurryThis(value);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          value: applyBind(value)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Create copies of configurable value properties of the global object\x0d\n[\x0d\n  'Proxy'\x2C\x0d\n  'globalThis'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  primordials[name] = globalThis[name];\x0d\n});\x0d\n\x0d\n// Create copies of URI handling functions\x0d\n[\x0d\n  decodeURI\x2C\x0d\n  decodeURIComponent\x2C\x0d\n  encodeURI\x2C\x0d\n  encodeURIComponent\x2C\x0d\n].forEach((fn) => {\x0d\n  primordials[fn.name] = fn;\x0d\n});\x0d\n\x0d\n// Create copies of legacy functions\x0d\n[\x0d\n  escape\x2C\x0d\n  eval\x2C\x0d\n  unescape\x2C\x0d\n].forEach((fn) => {\x0d\n  primordials[fn.name] = fn;\x0d\n});\x0d\n\x0d\n// Create copies of the namespace objects\x0d\n[\x0d\n  'JSON'\x2C\x0d\n  'Math'\x2C\x0d\n  'Proxy'\x2C\x0d\n  'Reflect'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  copyPropsRenamed(globalThis[name]\x2C primordials\x2C name);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects\x0d\n[\x0d\n  'AggregateError'\x2C\x0d\n  'Array'\x2C\x0d\n  'ArrayBuffer'\x2C\x0d\n  'BigInt'\x2C\x0d\n  'BigInt64Array'\x2C\x0d\n  'BigUint64Array'\x2C\x0d\n  'Boolean'\x2C\x0d\n  'DataView'\x2C\x0d\n  'Date'\x2C\x0d\n  'Error'\x2C\x0d\n  'EvalError'\x2C\x0d\n  'FinalizationRegistry'\x2C\x0d\n  'Float32Array'\x2C\x0d\n  'Float64Array'\x2C\x0d\n  'Function'\x2C\x0d\n  'Int16Array'\x2C\x0d\n  'Int32Array'\x2C\x0d\n  'Int8Array'\x2C\x0d\n  'Map'\x2C\x0d\n  'Number'\x2C\x0d\n  'Object'\x2C\x0d\n  'RangeError'\x2C\x0d\n  'ReferenceError'\x2C\x0d\n  'RegExp'\x2C\x0d\n  'Set'\x2C\x0d\n  'String'\x2C\x0d\n  'Symbol'\x2C\x0d\n  'SyntaxError'\x2C\x0d\n  'TypeError'\x2C\x0d\n  'URIError'\x2C\x0d\n  'Uint16Array'\x2C\x0d\n  'Uint32Array'\x2C\x0d\n  'Uint8Array'\x2C\x0d\n  'Uint8ClampedArray'\x2C\x0d\n  'WeakMap'\x2C\x0d\n  'WeakRef'\x2C\x0d\n  'WeakSet'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = globalThis[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamed(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects that require a valid `this` to call\x0d\n// static methods.\x0d\n// Refs: https://www.ecma-international.org/ecma-262/#sec-promise.all\x0d\n[\x0d\n  'Promise'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = globalThis[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamedBound(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of abstract intrinsic objects that are not directly exposed\x0d\n// on the global object.\x0d\n// Refs: https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object\x0d\n[\x0d\n  { name: 'TypedArray'\x2C original: Reflect.getPrototypeOf(Uint8Array) }\x2C\x0d\n  { name: 'ArrayIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(Array.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n  { name: 'StringIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(String.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n].forEach(({ name\x2C original }) => {\x0d\n  primordials[name] = original;\x0d\n  // The static %TypedArray% methods require a valid `this`\x2C but can't be bound\x2C\x0d\n  // as they need a subclass constructor as the receiver:\x0d\n  copyPrototype(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n/* eslint-enable node-core/prefer-primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  FinalizationRegistry\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Map\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  Set\x2C\x0d\n  SymbolIterator\x2C\x0d\n  WeakMap\x2C\x0d\n  WeakRef\x2C\x0d\n  WeakSet\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Because these functions are used by `makeSafe`\x2C which is exposed\x0d\n// on the `primordials` object\x2C it's important to use const references\x0d\n// to the primordials that they use:\x0d\nconst createSafeIterator = (factory\x2C next) => {\x0d\n  class SafeIterator {\x0d\n    constructor(iterable) {\x0d\n      this._iterator = factory(iterable);\x0d\n    }\x0d\n    next() {\x0d\n      return next(this._iterator);\x0d\n    }\x0d\n    [SymbolIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x0d\n  ObjectSetPrototypeOf(SafeIterator.prototype\x2C null);\x0d\n  ObjectFreeze(SafeIterator.prototype);\x0d\n  ObjectFreeze(SafeIterator);\x0d\n  return SafeIterator;\x0d\n};\x0d\n\x0d\nprimordials.SafeArrayIterator = createSafeIterator(\x0d\n  primordials.ArrayPrototypeSymbolIterator\x2C\x0d\n  primordials.ArrayIteratorPrototypeNext\x0d\n);\x0d\nprimordials.SafeStringIterator = createSafeIterator(\x0d\n  primordials.StringPrototypeSymbolIterator\x2C\x0d\n  primordials.StringIteratorPrototypeNext\x0d\n);\x0d\n\x0d\nconst copyProps = (src\x2C dest) => {\x0d\n  ArrayPrototypeForEach(ReflectOwnKeys(src)\x2C (key) => {\x0d\n    if (!ReflectGetOwnPropertyDescriptor(dest\x2C key)) {\x0d\n      ReflectDefineProperty(\x0d\n        dest\x2C\x0d\n        key\x2C\x0d\n        ReflectGetOwnPropertyDescriptor(src\x2C key));\x0d\n    }\x0d\n  });\x0d\n};\x0d\n\x0d\n/**\x0d\n * @type {typeof primordials.makeSafe}\x0d\n */\x0d\nconst makeSafe = (unsafe\x2C safe) => {\x0d\n  if (SymbolIterator in unsafe.prototype) {\x0d\n    const dummy = new unsafe();\x0d\n    let next; // We can reuse the same `next` method.\x0d\n\x0d\n    ArrayPrototypeForEach(ReflectOwnKeys(unsafe.prototype)\x2C (key) => {\x0d\n      if (!ReflectGetOwnPropertyDescriptor(safe.prototype\x2C key)) {\x0d\n        const desc = ReflectGetOwnPropertyDescriptor(unsafe.prototype\x2C key);\x0d\n        if (\x0d\n          typeof desc.value === 'function' &&\x0d\n          desc.value.length === 0 &&\x0d\n          SymbolIterator in (FunctionPrototypeCall(desc.value\x2C dummy) ?? {})\x0d\n        ) {\x0d\n          const createIterator = uncurryThis(desc.value);\x0d\n          next ??= uncurryThis(createIterator(dummy).next);\x0d\n          const SafeIterator = createSafeIterator(createIterator\x2C next);\x0d\n          desc.value = function() {\x0d\n            return new SafeIterator(this);\x0d\n          };\x0d\n        }\x0d\n        ReflectDefineProperty(safe.prototype\x2C key\x2C desc);\x0d\n      }\x0d\n    });\x0d\n  } else {\x0d\n    copyProps(unsafe.prototype\x2C safe.prototype);\x0d\n  }\x0d\n  copyProps(unsafe\x2C safe);\x0d\n\x0d\n  ObjectSetPrototypeOf(safe.prototype\x2C null);\x0d\n  ObjectFreeze(safe.prototype);\x0d\n  ObjectFreeze(safe);\x0d\n  return safe;\x0d\n};\x0d\nprimordials.makeSafe = makeSafe;\x0d\n\x0d\n// Subclass the constructors because we need to use their prototype\x0d\n// methods later.\x0d\n// Defining the `constructor` is necessary here to avoid the default\x0d\n// constructor which uses the user-mutable `%ArrayIteratorPrototype%.next`.\x0d\nprimordials.SafeMap = makeSafe(\x0d\n  Map\x2C\x0d\n  class SafeMap extends Map {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakMap = makeSafe(\x0d\n  WeakMap\x2C\x0d\n  class SafeWeakMap extends WeakMap {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeSet = makeSafe(\x0d\n  Set\x2C\x0d\n  class SafeSet extends Set {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakSet = makeSafe(\x0d\n  WeakSet\x2C\x0d\n  class SafeWeakSet extends WeakSet {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeFinalizationRegistry = makeSafe(\x0d\n  FinalizationRegistry\x2C\x0d\n  class SafeFinalizationRegistry extends FinalizationRegistry {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(cleanupCallback) { super(cleanupCallback); }\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakRef = makeSafe(\x0d\n  WeakRef\x2C\x0d\n  class SafeWeakRef extends WeakRef {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(target) { super(target); }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst SafePromise = makeSafe(\x0d\n  Promise\x2C\x0d\n  class SafePromise extends Promise {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(executor) { super(executor); }\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.PromisePrototypeCatch = (thisPromise\x2C onRejected) =>\x0d\n  PromisePrototypeThen(thisPromise\x2C undefined\x2C onRejected);\x0d\n\x0d\n/**\x0d\n * Attaches a callback that is invoked when the Promise is settled (fulfilled or\x0d\n * rejected). The resolved value cannot be modified from the callback.\x0d\n * Prefer using async functions when possible.\x0d\n * @param {Promise<any>} thisPromise\x0d\n * @param {() => void) | undefined | null} onFinally The callback to execute\x0d\n *        when the Promise is settled (fulfilled or rejected).\x0d\n * @returns {Promise} A Promise for the completion of the callback.\x0d\n */\x0d\nprimordials.SafePromisePrototypeFinally = (thisPromise\x2C onFinally) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    new SafePromise((a\x2C b) => PromisePrototypeThen(thisPromise\x2C a\x2C b))\x0d\n      .finally(onFinally)\x0d\n      .then(a\x2C b)\x0d\n  );\x0d\n\x0d\nprimordials.AsyncIteratorPrototype =\x0d\n  primordials.ReflectGetPrototypeOf(\x0d\n    primordials.ReflectGetPrototypeOf(\x0d\n      async function* () {}).prototype);\x0d\n\x0d\nObjectSetPrototypeOf(primordials\x2C null);\x0d\nObjectFreeze(primordials);\x0d\n
code-source-info,0x36339d16c8e,6,11034,11051,C3O11040C7O11046C11O11040C26O11050,,
tick,0x7ffdf67de420,163456,0,0x0,3,0x7ff7c08240c0,0x36339d161f7,0x231d0e04f03,0x231d0e048e5,0x36339d13685,0x231d0e04f03,0x231d0e048e5,0x36339d125a4,0x2c63eb06514,0x2c63eb02065
code-creation,LazyCompile,10,163477,0x36339d17b16,27,SafeMap node:internal/per_context/primordials:360:16,0xa82968a0a8,~
code-source-info,0x36339d17b16,6,10694,10711,C3O10700C7O10706C11O10700C26O10710,,
code-creation,LazyCompile,10,163529,0x36339d17c0e,16,IterableWeakMap node:internal/util/iterable_weak_map:16:1,0x36339d14610,~
code-source-info,0x36339d17c0e,109,388,388,C0O388C15O388,,
code-creation,LazyCompile,10,163560,0x36339d17f96,27,SafeWeakMap node:internal/per_context/primordials:366:16,0xa82968a168,~
code-source-info,0x36339d17f96,6,10871,10888,C3O10877C7O10883C11O10877C26O10887,,
code-creation,LazyCompile,10,163595,0x36339d1809e,27,SafeFinalizationRegistry node:internal/per_context/primordials:387:16,0xa82968a3b8,~
code-source-info,0x36339d1809e,6,11498,11543,C3O11518C7O11524C11O11518C26O11542,,
code-creation,LazyCompile,10,163716,0x36339d1891e,492,initializeDeprecations node:internal/bootstrap/pre_execution:306:32,0x2c63eb044b0,~
code-source-info,0x36339d1891e
code-creation,LazyCompile,10,163826,0x36339d18ec6,53,initializeWASI node:internal/bootstrap/pre_execution:470:24,0x2c63eb04630,~
code-source-info,0x36339d18ec6,96,15273,15484,C0O15306C6O15306C11O15289C16O15373C21O15377C29O15377C35O15393C37O15425C43O15425C47O15418C52O15483,,
code-creation,LazyCompile,10,163878,0x36339d190c6,66,initializeCJSLoader node:internal/bootstrap/pre_execution:477:29,0x2c63eb04680,~
code-source-info,0x36339d190c6,96,15516,15839,C0O15542C6O15542C11O15585C16O15590C20O15610C26O15649C31O15656C36O15656C40O15755C51O15777C56O15813C60O15770C65O15838,,
code-creation,Eval,10,164670,0x36339d1b016,5, node:internal/modules/cjs/loader:1:1,0x36339d1a730,~
script-source,111,node:internal/modules/cjs/loader,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  ArrayPrototypeUnshiftApply\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototype\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Proxy\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectSet\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharAt\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Map used to store CJS parsing data.\x0d\nconst cjsParseCache = new SafeWeakMap();\x0d\n\x0d\n// Set first due to cycle with ESM loader functions.\x0d\nmodule.exports = {\x0d\n  wrapSafe\x2C Module\x2C toRealPath\x2C readPackageScope\x2C cjsParseCache\x2C\x0d\n  get hasLoadedAnyUserCJSModule() { return hasLoadedAnyUserCJSModule; }\x0d\n};\x0d\n\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  maybeCacheSourceMap\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C isURLInstance } = require('internal/url');\x0d\nconst { deprecate } = require('internal/util');\x0d\nconst vm = require('vm');\x0d\nconst assert = require('internal/assert');\x0d\nconst fs = require('fs');\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst path = require('path');\x0d\nconst { sep } = path;\x0d\nconst { internalModuleStat } = internalBinding('fs');\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst { safeGetenv } = internalBinding('credentials');\x0d\nconst {\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\n\x0d\n// Whether any user-provided CJS modules had been loaded (executed).\x0d\n// Used for internal assertions.\x0d\nlet hasLoadedAnyUserCJSModule = false;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n    ERR_REQUIRE_ESM\x2C\x0d\n    ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  }\x2C\x0d\n  setArrowMessage\x2C\x0d\n} = require('internal/errors');\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x0d\n} = require('internal/constants');\x0d\n\x0d\nconst {\x0d\n  isProxy\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { enrichCJSError } = require('internal/modules/esm/translators');\x0d\nconst { kEvaluated } = internalBinding('module_wrap');\x0d\nconst {\x0d\n  encodedSepRegEx\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x0d\n} = require('internal/modules/esm/resolve');\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst relativeResolveCache = ObjectCreate(null);\x0d\n\x0d\nlet requireDepth = 0;\x0d\nlet statCache = null;\x0d\nlet isPreloading = false;\x0d\n\x0d\nfunction stat(filename) {\x0d\n  filename = path.toNamespacedPath(filename);\x0d\n  if (statCache !== null) {\x0d\n    const result = statCache.get(filename);\x0d\n    if (result !== undefined) return result;\x0d\n  }\x0d\n  const result = internalModuleStat(filename);\x0d\n  if (statCache !== null && result >= 0) {\x0d\n    // Only set cache when `internalModuleStat(filename)` succeeds.\x0d\n    statCache.set(filename\x2C result);\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\nfunction updateChildren(parent\x2C child\x2C scan) {\x0d\n  const children = parent?.children;\x0d\n  if (children && !(scan && ArrayPrototypeIncludes(children\x2C child)))\x0d\n    ArrayPrototypePush(children\x2C child);\x0d\n}\x0d\n\x0d\nconst moduleParentCache = new SafeWeakMap();\x0d\nfunction Module(id = ''\x2C parent) {\x0d\n  this.id = id;\x0d\n  this.path = path.dirname(id);\x0d\n  this.exports = {};\x0d\n  moduleParentCache.set(this\x2C parent);\x0d\n  updateChildren(parent\x2C this\x2C false);\x0d\n  this.filename = null;\x0d\n  this.loaded = false;\x0d\n  this.children = [];\x0d\n}\x0d\n\x0d\nconst builtinModules = [];\x0d\nfor (const { 0: id\x2C 1: mod } of NativeModule.map) {\x0d\n  if (mod.canBeRequiredByUsers) {\x0d\n    ArrayPrototypePush(builtinModules\x2C id);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectFreeze(builtinModules);\x0d\nModule.builtinModules = builtinModules;\x0d\n\x0d\nModule._cache = ObjectCreate(null);\x0d\nModule._pathCache = ObjectCreate(null);\x0d\nModule._extensions = ObjectCreate(null);\x0d\nlet modulePaths = [];\x0d\nModule.globalPaths = [];\x0d\n\x0d\nlet patched = false;\x0d\n\x0d\n// eslint-disable-next-line func-style\x0d\nlet wrap = function(script) {\x0d\n  return Module.wrapper[0] + script + Module.wrapper[1];\x0d\n};\x0d\n\x0d\nconst wrapper = [\x0d\n  '(function (exports\x2C require\x2C module\x2C __filename\x2C __dirname) { '\x2C\x0d\n  '\\n});'\x2C\x0d\n];\x0d\n\x0d\nlet wrapperProxy = new Proxy(wrapper\x2C {\x0d\n  set(target\x2C property\x2C value\x2C receiver) {\x0d\n    patched = true;\x0d\n    return ReflectSet(target\x2C property\x2C value\x2C receiver);\x0d\n  }\x2C\x0d\n\x0d\n  defineProperty(target\x2C property\x2C descriptor) {\x0d\n    patched = true;\x0d\n    return ObjectDefineProperty(target\x2C property\x2C descriptor);\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrap'\x2C {\x0d\n  get() {\x0d\n    return wrap;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrap = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrapper'\x2C {\x0d\n  get() {\x0d\n    return wrapperProxy;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrapperProxy = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst isPreloadingDesc = { get() { return isPreloading; } };\x0d\nObjectDefineProperty(Module.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\nObjectDefineProperty(NativeModule.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\n\x0d\nfunction getModuleParent() {\x0d\n  return moduleParentCache.get(this);\x0d\n}\x0d\n\x0d\nfunction setModuleParent(value) {\x0d\n  moduleParentCache.set(this\x2C value);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Module.prototype\x2C 'parent'\x2C {\x0d\n  get: pendingDeprecation ? deprecate(\x0d\n    getModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : getModuleParent\x2C\x0d\n  set: pendingDeprecation ? deprecate(\x0d\n    setModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : setModuleParent\x2C\x0d\n});\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nModule._debug = deprecate(debug\x2C 'Module._debug is deprecated.'\x2C 'DEP0077');\x0d\n\x0d\n// Given a module name\x2C and a list of paths to test\x2C returns the first\x0d\n// matching file in the following precedence.\x0d\n//\x0d\n// require("a.<ext>")\x0d\n//   -> a.<ext>\x0d\n//\x0d\n// require("a")\x0d\n//   -> a\x0d\n//   -> a.<ext>\x0d\n//   -> a/index.<ext>\x0d\n\x0d\nconst packageJsonCache = new SafeMap();\x0d\n\x0d\nfunction readPackage(requestPath) {\x0d\n  const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n\x0d\n  const existing = packageJsonCache.get(jsonPath);\x0d\n  if (existing !== undefined) return existing;\x0d\n\x0d\n  const result = packageJsonReader.read(jsonPath);\x0d\n  const json = result.containsKeys === false ? '{}' : result.string;\x0d\n  if (json === undefined) {\x0d\n    packageJsonCache.set(jsonPath\x2C false);\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    const parsed = JSONParse(json);\x0d\n    const filtered = {\x0d\n      name: parsed.name\x2C\x0d\n      main: parsed.main\x2C\x0d\n      exports: parsed.exports\x2C\x0d\n      imports: parsed.imports\x2C\x0d\n      type: parsed.type\x0d\n    };\x0d\n    packageJsonCache.set(jsonPath\x2C filtered);\x0d\n    return filtered;\x0d\n  } catch (e) {\x0d\n    e.path = jsonPath;\x0d\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction readPackageScope(checkPath) {\x0d\n  const rootSeparatorIndex = StringPrototypeIndexOf(checkPath\x2C sep);\x0d\n  let separatorIndex;\x0d\n  do {\x0d\n    separatorIndex = StringPrototypeLastIndexOf(checkPath\x2C sep);\x0d\n    checkPath = StringPrototypeSlice(checkPath\x2C 0\x2C separatorIndex);\x0d\n    if (StringPrototypeEndsWith(checkPath\x2C sep + 'node_modules'))\x0d\n      return false;\x0d\n    const pjson = readPackage(checkPath + sep);\x0d\n    if (pjson) return {\x0d\n      data: pjson\x2C\x0d\n      path: checkPath\x2C\x0d\n    };\x0d\n  } while (separatorIndex > rootSeparatorIndex);\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction tryPackage(requestPath\x2C exts\x2C isMain\x2C originalPath) {\x0d\n  const pkg = readPackage(requestPath)?.main;\x0d\n\x0d\n  if (!pkg) {\x0d\n    return tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n  }\x0d\n\x0d\n  const filename = path.resolve(requestPath\x2C pkg);\x0d\n  let actual = tryFile(filename\x2C isMain) ||\x0d\n    tryExtensions(filename\x2C exts\x2C isMain) ||\x0d\n    tryExtensions(path.resolve(filename\x2C 'index')\x2C exts\x2C isMain);\x0d\n  if (actual === false) {\x0d\n    actual = tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n    if (!actual) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const err = new Error(\x0d\n        `Cannot find module '${filename}'. ` +\x0d\n        'Please verify that the package.json has a valid "main" entry'\x0d\n      );\x0d\n      err.code = 'MODULE_NOT_FOUND';\x0d\n      err.path = path.resolve(requestPath\x2C 'package.json');\x0d\n      err.requestPath = originalPath;\x0d\n      // TODO(BridgeAR): Add the requireStack as well.\x0d\n      throw err;\x0d\n    } else {\x0d\n      const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n      process.emitWarning(\x0d\n        `Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` +\x0d\n          'Please either fix that or report it to the module author'\x2C\x0d\n        'DeprecationWarning'\x2C\x0d\n        'DEP0128'\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n  return actual;\x0d\n}\x0d\n\x0d\n// In order to minimize unnecessary lstat() calls\x2C\x0d\n// this cache is a list of known-real paths.\x0d\n// Set to an empty Map to reset.\x0d\nconst realpathCache = new SafeMap();\x0d\n\x0d\n// Check if the file exists and is not a directory\x0d\n// if using --preserve-symlinks and isMain is false\x2C\x0d\n// keep symlinks intact\x2C otherwise resolve to the\x0d\n// absolute realpath.\x0d\nfunction tryFile(requestPath\x2C isMain) {\x0d\n  const rc = stat(requestPath);\x0d\n  if (rc !== 0) return;\x0d\n  if (preserveSymlinks && !isMain) {\x0d\n    return path.resolve(requestPath);\x0d\n  }\x0d\n  return toRealPath(requestPath);\x0d\n}\x0d\n\x0d\nfunction toRealPath(requestPath) {\x0d\n  return fs.realpathSync(requestPath\x2C {\x0d\n    [internalFS.realpathCacheKey]: realpathCache\x0d\n  });\x0d\n}\x0d\n\x0d\n// Given a path\x2C check if the file exists with any of the set extensions\x0d\nfunction tryExtensions(p\x2C exts\x2C isMain) {\x0d\n  for (let i = 0; i < exts.length; i++) {\x0d\n    const filename = tryFile(p + exts[i]\x2C isMain);\x0d\n\x0d\n    if (filename) {\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n// Find the longest (possibly multi-dot) extension registered in\x0d\n// Module._extensions\x0d\nfunction findLongestRegisteredExtension(filename) {\x0d\n  const name = path.basename(filename);\x0d\n  let currentExtension;\x0d\n  let index;\x0d\n  let startIndex = 0;\x0d\n  while ((index = StringPrototypeIndexOf(name\x2C '.'\x2C startIndex)) !== -1) {\x0d\n    startIndex = index + 1;\x0d\n    if (index === 0) continue; // Skip dotfiles like .gitignore\x0d\n    currentExtension = StringPrototypeSlice(name\x2C index);\x0d\n    if (Module._extensions[currentExtension]) return currentExtension;\x0d\n  }\x0d\n  return '.js';\x0d\n}\x0d\n\x0d\nfunction trySelfParentPath(parent) {\x0d\n  if (!parent) return false;\x0d\n\x0d\n  if (parent.filename) {\x0d\n    return parent.filename;\x0d\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\x0d\n    try {\x0d\n      return process.cwd() + path.sep;\x0d\n    } catch {\x0d\n      return false;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction trySelf(parentPath\x2C request) {\x0d\n  if (!parentPath) return false;\x0d\n\x0d\n  const { data: pkg\x2C path: pkgPath } = readPackageScope(parentPath) || {};\x0d\n  if (!pkg || pkg.exports === undefined) return false;\x0d\n  if (typeof pkg.name !== 'string') return false;\x0d\n\x0d\n  let expansion;\x0d\n  if (request === pkg.name) {\x0d\n    expansion = '.';\x0d\n  } else if (StringPrototypeStartsWith(request\x2C `${pkg.name}/`)) {\x0d\n    expansion = '.' + StringPrototypeSlice(request\x2C pkg.name.length);\x0d\n  } else {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    return finalizeEsmResolution(packageExportsResolve(\x0d\n      pathToFileURL(pkgPath + '/package.json')\x2C expansion\x2C pkg\x2C\x0d\n      pathToFileURL(parentPath)\x2C cjsConditions)\x2C request\x2C parentPath\x2C pkgPath);\x0d\n  } catch (e) {\x0d\n    if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n      throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\n// This only applies to requests of a specific form:\x0d\n// 1. name/.*\x0d\n// 2. @scope/name/.*\x0d\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\x0d\nfunction resolveExports(nmPath\x2C request) {\x0d\n  // The implementation's behavior is meant to mirror resolution in ESM.\x0d\n  const { 1: name\x2C 2: expansion = '' } =\x0d\n    StringPrototypeMatch(request\x2C EXPORTS_PATTERN) || [];\x0d\n  if (!name)\x0d\n    return;\x0d\n  const pkgPath = path.resolve(nmPath\x2C name);\x0d\n  const pkg = readPackage(pkgPath);\x0d\n  if (pkg?.exports != null) {\x0d\n    try {\x0d\n      return finalizeEsmResolution(packageExportsResolve(\x0d\n        pathToFileURL(pkgPath + '/package.json')\x2C '.' + expansion\x2C pkg\x2C null\x2C\x0d\n        cjsConditions)\x2C request\x2C null\x2C pkgPath);\x0d\n    } catch (e) {\x0d\n      if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n        throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nconst trailingSlashRegex = /(?:^|\\/)\\.?\\.$/;\x0d\nModule._findPath = function(request\x2C paths\x2C isMain) {\x0d\n  const absoluteRequest = path.isAbsolute(request);\x0d\n  if (absoluteRequest) {\x0d\n    paths = [''];\x0d\n  } else if (!paths || paths.length === 0) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths\x2C '\\x00');\x0d\n  const entry = Module._pathCache[cacheKey];\x0d\n  if (entry)\x0d\n    return entry;\x0d\n\x0d\n  let exts;\x0d\n  let trailingSlash = request.length > 0 &&\x0d\n    StringPrototypeCharCodeAt(request\x2C request.length - 1) ===\x0d\n    CHAR_FORWARD_SLASH;\x0d\n  if (!trailingSlash) {\x0d\n    trailingSlash = RegExpPrototypeTest(trailingSlashRegex\x2C request);\x0d\n  }\x0d\n\x0d\n  // For each path\x0d\n  for (let i = 0; i < paths.length; i++) {\x0d\n    // Don't search further if path doesn't exist\x0d\n    const curPath = paths[i];\x0d\n    if (curPath && stat(curPath) < 1) continue;\x0d\n\x0d\n    if (!absoluteRequest) {\x0d\n      const exportsResolved = resolveExports(curPath\x2C request);\x0d\n      if (exportsResolved)\x0d\n        return exportsResolved;\x0d\n    }\x0d\n\x0d\n    const basePath = path.resolve(curPath\x2C request);\x0d\n    let filename;\x0d\n\x0d\n    const rc = stat(basePath);\x0d\n    if (!trailingSlash) {\x0d\n      if (rc === 0) {  // File.\x0d\n        if (!isMain) {\x0d\n          if (preserveSymlinks) {\x0d\n            filename = path.resolve(basePath);\x0d\n          } else {\x0d\n            filename = toRealPath(basePath);\x0d\n          }\x0d\n        } else if (preserveSymlinksMain) {\x0d\n          // For the main module\x2C we use the preserveSymlinksMain flag instead\x0d\n          // mainly for backward compatibility\x2C as the preserveSymlinks flag\x0d\n          // historically has not applied to the main module.  Most likely this\x0d\n          // was intended to keep .bin/ binaries working\x2C as following those\x0d\n          // symlinks is usually required for the imports in the corresponding\x0d\n          // files to resolve; that said\x2C in some use cases following symlinks\x0d\n          // causes bigger problems which is why the preserveSymlinksMain option\x0d\n          // is needed.\x0d\n          filename = path.resolve(basePath);\x0d\n        } else {\x0d\n          filename = toRealPath(basePath);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (!filename) {\x0d\n        // Try it with each of the extensions\x0d\n        if (exts === undefined)\x0d\n          exts = ObjectKeys(Module._extensions);\x0d\n        filename = tryExtensions(basePath\x2C exts\x2C isMain);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (!filename && rc === 1) {  // Directory.\x0d\n      // try it with each of the extensions at "index"\x0d\n      if (exts === undefined)\x0d\n        exts = ObjectKeys(Module._extensions);\x0d\n      filename = tryPackage(basePath\x2C exts\x2C isMain\x2C request);\x0d\n    }\x0d\n\x0d\n    if (filename) {\x0d\n      Module._pathCache[cacheKey] = filename;\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n};\x0d\n\x0d\n// 'node_modules' character codes reversed\x0d\nconst nmChars = [ 115\x2C 101\x2C 108\x2C 117\x2C 100\x2C 111\x2C 109\x2C 95\x2C 101\x2C 100\x2C 111\x2C 110 ];\x0d\nconst nmLen = nmChars.length;\x0d\nif (isWindows) {\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n\x0d\n    // return root node_modules when path is 'D:\\\\'.\x0d\n    // path.resolve will make sure from.length >=3 in Windows.\x0d\n    if (StringPrototypeCharCodeAt(from\x2C from.length - 1) ===\x0d\n          CHAR_BACKWARD_SLASH &&\x0d\n        StringPrototypeCharCodeAt(from\x2C from.length - 2) === CHAR_COLON)\x0d\n      return [from + 'node_modules'];\x0d\n\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      // The path segment separator check ('\\' and '/') was used to get\x0d\n      // node_modules path for every path segment.\x0d\n      // Use colon as an extra condition since we can get node_modules\x0d\n      // path for drive root like 'C:\\node_modules' and don't need to\x0d\n      // parse drive name.\x0d\n      if (code === CHAR_BACKWARD_SLASH ||\x0d\n          code === CHAR_FORWARD_SLASH ||\x0d\n          code === CHAR_COLON) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '\\\\node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n} else { // posix\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n    // Return early not only to avoid unnecessary work\x2C but to *avoid* returning\x0d\n    // an array of two items for a root: [ '//node_modules'\x2C '/node_modules' ]\x0d\n    if (from === '/')\x0d\n      return ['/node_modules'];\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '/node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Append /node_modules to handle root paths.\x0d\n    ArrayPrototypePush(paths\x2C '/node_modules');\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n}\x0d\n\x0d\nModule._resolveLookupPaths = function(request\x2C parent) {\x0d\n  if (NativeModule.canBeRequiredByUsers(request)) {\x0d\n    debug('looking for %j in []'\x2C request);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  // Check for node modules paths.\x0d\n  if (StringPrototypeCharAt(request\x2C 0) !== '.' ||\x0d\n      (request.length > 1 &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '.' &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '/' &&\x0d\n      (!isWindows || StringPrototypeCharAt(request\x2C 1) !== '\\\\'))) {\x0d\n\x0d\n    let paths = modulePaths;\x0d\n    if (parent?.paths?.length) {\x0d\n      paths = ArrayPrototypeConcat(parent.paths\x2C paths);\x0d\n    }\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C paths);\x0d\n    return paths.length > 0 ? paths : null;\x0d\n  }\x0d\n\x0d\n  // In REPL\x2C parent.filename is null.\x0d\n  if (!parent || !parent.id || !parent.filename) {\x0d\n    // Make require('./path/to/foo') work - normally the path is taken\x0d\n    // from realpath(__filename) but in REPL there is no filename\x0d\n    const mainPaths = ['.'];\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C mainPaths);\x0d\n    return mainPaths;\x0d\n  }\x0d\n\x0d\n  debug('RELATIVE: requested: %s from parent.id %s'\x2C request\x2C parent.id);\x0d\n\x0d\n  const parentDir = [path.dirname(parent.filename)];\x0d\n  debug('looking for %j'\x2C parentDir);\x0d\n  return parentDir;\x0d\n};\x0d\n\x0d\nfunction emitCircularRequireWarning(prop) {\x0d\n  process.emitWarning(\x0d\n    `Accessing non-existent property '${String(prop)}' of module exports ` +\x0d\n    'inside circular dependency'\x0d\n  );\x0d\n}\x0d\n\x0d\n// A Proxy that can be used as the prototype of a module.exports object and\x0d\n// warns when non-existent properties are accessed.\x0d\nconst CircularRequirePrototypeWarningProxy = new Proxy({}\x2C {\x0d\n  get(target\x2C prop) {\x0d\n    // Allow __esModule access in any case because it is used in the output\x0d\n    // of transpiled code to determine whether something comes from an\x0d\n    // ES module\x2C and is not used as a regular key of `module.exports`.\x0d\n    if (prop in target || prop === '__esModule') return target[prop];\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x2C\x0d\n\x0d\n  getOwnPropertyDescriptor(target\x2C prop) {\x0d\n    if (ObjectPrototypeHasOwnProperty(target\x2C prop) || prop === '__esModule')\x0d\n      return ObjectGetOwnPropertyDescriptor(target\x2C prop);\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction getExportsForCircularRequire(module) {\x0d\n  if (module.exports &&\x0d\n      !isProxy(module.exports) &&\x0d\n      ObjectGetPrototypeOf(module.exports) === ObjectPrototype &&\x0d\n      // Exclude transpiled ES6 modules / TypeScript code because those may\x0d\n      // employ unusual patterns for accessing 'module.exports'. That should\x0d\n      // be okay because ES6 modules have a different approach to circular\x0d\n      // dependencies anyway.\x0d\n      !module.exports.__esModule) {\x0d\n    // This is later unset once the module is done loading.\x0d\n    ObjectSetPrototypeOf(\x0d\n      module.exports\x2C CircularRequirePrototypeWarningProxy);\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n}\x0d\n\x0d\n// Check the cache for the requested file.\x0d\n// 1. If a module already exists in the cache: return its exports object.\x0d\n// 2. If the module is native: call\x0d\n//    `NativeModule.prototype.compileForPublicLoader()` and return the exports.\x0d\n// 3. Otherwise\x2C create a new module for the file and save it to the cache.\x0d\n//    Then have it load  the file contents before returning its exports\x0d\n//    object.\x0d\nModule._load = function(request\x2C parent\x2C isMain) {\x0d\n  let relResolveCacheIdentifier;\x0d\n  if (parent) {\x0d\n    debug('Module._load REQUEST %s parent: %s'\x2C request\x2C parent.id);\x0d\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\x0d\n    // caching is required to allow cache invalidation without changing the old\x0d\n    // cache key names.\x0d\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\x0d\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\x0d\n    if (filename !== undefined) {\x0d\n      const cachedModule = Module._cache[filename];\x0d\n      if (cachedModule !== undefined) {\x0d\n        updateChildren(parent\x2C cachedModule\x2C true);\x0d\n        if (!cachedModule.loaded)\x0d\n          return getExportsForCircularRequire(cachedModule);\x0d\n        return cachedModule.exports;\x0d\n      }\x0d\n      delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const filename = Module._resolveFilename(request\x2C parent\x2C isMain);\x0d\n  if (StringPrototypeStartsWith(filename\x2C 'node:')) {\x0d\n    // Slice 'node:' prefix\x0d\n    const id = StringPrototypeSlice(filename\x2C 5);\x0d\n\x0d\n    const module = loadNativeModule(id\x2C request);\x0d\n    if (!module?.canBeRequiredByUsers) {\x0d\n      throw new ERR_UNKNOWN_BUILTIN_MODULE(filename);\x0d\n    }\x0d\n\x0d\n    return module.exports;\x0d\n  }\x0d\n\x0d\n  const cachedModule = Module._cache[filename];\x0d\n  if (cachedModule !== undefined) {\x0d\n    updateChildren(parent\x2C cachedModule\x2C true);\x0d\n    if (!cachedModule.loaded) {\x0d\n      const parseCachedModule = cjsParseCache.get(cachedModule);\x0d\n      if (!parseCachedModule || parseCachedModule.loaded)\x0d\n        return getExportsForCircularRequire(cachedModule);\x0d\n      parseCachedModule.loaded = true;\x0d\n    } else {\x0d\n      return cachedModule.exports;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const mod = loadNativeModule(filename\x2C request);\x0d\n  if (mod?.canBeRequiredByUsers) return mod.exports;\x0d\n\x0d\n  // Don't call updateChildren()\x2C Module constructor already does.\x0d\n  const module = cachedModule || new Module(filename\x2C parent);\x0d\n\x0d\n  if (isMain) {\x0d\n    process.mainModule = module;\x0d\n    module.id = '.';\x0d\n  }\x0d\n\x0d\n  Module._cache[filename] = module;\x0d\n  if (parent !== undefined) {\x0d\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\x0d\n  }\x0d\n\x0d\n  let threw = true;\x0d\n  try {\x0d\n    module.load(filename);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw) {\x0d\n      delete Module._cache[filename];\x0d\n      if (parent !== undefined) {\x0d\n        delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n        const children = parent?.children;\x0d\n        if (ArrayIsArray(children)) {\x0d\n          const index = ArrayPrototypeIndexOf(children\x2C module);\x0d\n          if (index !== -1) {\x0d\n            ArrayPrototypeSplice(children\x2C index\x2C 1);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (module.exports &&\x0d\n               !isProxy(module.exports) &&\x0d\n               ObjectGetPrototypeOf(module.exports) ===\x0d\n                 CircularRequirePrototypeWarningProxy) {\x0d\n      ObjectSetPrototypeOf(module.exports\x2C ObjectPrototype);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n};\x0d\n\x0d\nModule._resolveFilename = function(request\x2C parent\x2C isMain\x2C options) {\x0d\n  if (StringPrototypeStartsWith(request\x2C 'node:') ||\x0d\n      NativeModule.canBeRequiredByUsers(request)) {\x0d\n    return request;\x0d\n  }\x0d\n\x0d\n  let paths;\x0d\n\x0d\n  if (typeof options === 'object' && options !== null) {\x0d\n    if (ArrayIsArray(options.paths)) {\x0d\n      const isRelative = StringPrototypeStartsWith(request\x2C './') ||\x0d\n          StringPrototypeStartsWith(request\x2C '../') ||\x0d\n          ((isWindows && StringPrototypeStartsWith(request\x2C '.\\\\')) ||\x0d\n          StringPrototypeStartsWith(request\x2C '..\\\\'));\x0d\n\x0d\n      if (isRelative) {\x0d\n        paths = options.paths;\x0d\n      } else {\x0d\n        const fakeParent = new Module(''\x2C null);\x0d\n\x0d\n        paths = [];\x0d\n\x0d\n        for (let i = 0; i < options.paths.length; i++) {\x0d\n          const path = options.paths[i];\x0d\n          fakeParent.paths = Module._nodeModulePaths(path);\x0d\n          const lookupPaths = Module._resolveLookupPaths(request\x2C fakeParent);\x0d\n\x0d\n          for (let j = 0; j < lookupPaths.length; j++) {\x0d\n            if (!ArrayPrototypeIncludes(paths\x2C lookupPaths[j]))\x0d\n              ArrayPrototypePush(paths\x2C lookupPaths[j]);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (options.paths === undefined) {\x0d\n      paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n    } else {\x0d\n      throw new ERR_INVALID_ARG_VALUE('options.paths'\x2C options.paths);\x0d\n    }\x0d\n  } else {\x0d\n    paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n  }\x0d\n\x0d\n  if (parent?.filename) {\x0d\n    if (request[0] === '#') {\x0d\n      const pkg = readPackageScope(parent.filename) || {};\x0d\n      if (pkg.data?.imports != null) {\x0d\n        try {\x0d\n          return finalizeEsmResolution(\x0d\n            packageImportsResolve(request\x2C pathToFileURL(parent.filename)\x2C\x0d\n                                  cjsConditions)\x2C request\x2C parent.filename\x2C\x0d\n            pkg.path);\x0d\n        } catch (e) {\x0d\n          if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n            throw createEsmNotFoundErr(request);\x0d\n          throw e;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Try module self resolution first\x0d\n  const parentPath = trySelfParentPath(parent);\x0d\n  const selfResolved = trySelf(parentPath\x2C request);\x0d\n  if (selfResolved) {\x0d\n    const cacheKey = request + '\\x00' +\x0d\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths\x2C '\\x00'));\x0d\n    Module._pathCache[cacheKey] = selfResolved;\x0d\n    return selfResolved;\x0d\n  }\x0d\n\x0d\n  // Look up the filename first\x2C since that's the cache key.\x0d\n  const filename = Module._findPath(request\x2C paths\x2C isMain\x2C false);\x0d\n  if (filename) return filename;\x0d\n  const requireStack = [];\x0d\n  for (let cursor = parent;\x0d\n    cursor;\x0d\n    cursor = moduleParentCache.get(cursor)) {\x0d\n    ArrayPrototypePush(requireStack\x2C cursor.filename || cursor.id);\x0d\n  }\x0d\n  let message = `Cannot find module '${request}'`;\x0d\n  if (requireStack.length > 0) {\x0d\n    message = message + '\\nRequire stack:\\n- ' +\x0d\n              ArrayPrototypeJoin(requireStack\x2C '\\n- ');\x0d\n  }\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  err.requireStack = requireStack;\x0d\n  throw err;\x0d\n};\x0d\n\x0d\nfunction finalizeEsmResolution(match\x2C request\x2C parentPath\x2C pkgPath) {\x0d\n  const { resolved\x2C exact } = match;\x0d\n  if (RegExpPrototypeTest(encodedSepRegEx\x2C resolved))\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved\x2C 'must not include encoded "/" or "\\\\" characters'\x2C parentPath);\x0d\n  const filename = fileURLToPath(resolved);\x0d\n  let actual = tryFile(filename);\x0d\n  if (!exact && !actual) {\x0d\n    const exts = ObjectKeys(Module._extensions);\x0d\n    actual = tryExtensions(filename\x2C exts\x2C false) ||\x0d\n      tryPackage(filename\x2C exts\x2C false\x2C request);\x0d\n  }\x0d\n  if (actual)\x0d\n    return actual;\x0d\n  const err = createEsmNotFoundErr(filename\x2C\x0d\n                                   path.resolve(pkgPath\x2C 'package.json'));\x0d\n  throw err;\x0d\n}\x0d\n\x0d\nfunction createEsmNotFoundErr(request\x2C path) {\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(`Cannot find module '${request}'`);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  if (path)\x0d\n    err.path = path;\x0d\n  // TODO(BridgeAR): Add the requireStack as well.\x0d\n  return err;\x0d\n}\x0d\n\x0d\n// Given a file name\x2C pass it to the proper extension handler.\x0d\nModule.prototype.load = function(filename) {\x0d\n  debug('load %j for module %j'\x2C filename\x2C this.id);\x0d\n\x0d\n  assert(!this.loaded);\x0d\n  this.filename = filename;\x0d\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\x0d\n\x0d\n  const extension = findLongestRegisteredExtension(filename);\x0d\n  // allow .mjs to be overridden\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.mjs') && !Module._extensions['.mjs'])\x0d\n    throw new ERR_REQUIRE_ESM(filename\x2C true);\x0d\n\x0d\n  Module._extensions[extension](this\x2C filename);\x0d\n  this.loaded = true;\x0d\n\x0d\n  const esmLoader = asyncESM.esmLoader;\x0d\n  // Create module entry at load time to snapshot exports correctly\x0d\n  const exports = this.exports;\x0d\n  // Preemptively cache\x0d\n  if ((module?.module === undefined ||\x0d\n       module.module.getStatus() < kEvaluated) &&\x0d\n      !esmLoader.cjsCache.has(this))\x0d\n    esmLoader.cjsCache.set(this\x2C exports);\x0d\n};\x0d\n\x0d\n\x0d\n// Loads a module at the given file path. Returns that module's\x0d\n// `exports` property.\x0d\nModule.prototype.require = function(id) {\x0d\n  validateString(id\x2C 'id');\x0d\n  if (id === '') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('id'\x2C id\x2C\x0d\n                                    'must be a non-empty string');\x0d\n  }\x0d\n  requireDepth++;\x0d\n  try {\x0d\n    return Module._load(id\x2C this\x2C /* isMain */ false);\x0d\n  } finally {\x0d\n    requireDepth--;\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Resolved path to process.argv[1] will be lazily placed here\x0d\n// (needed for setting breakpoint when called with --inspect-brk)\x0d\nlet resolvedArgv;\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nfunction wrapSafe(filename\x2C content\x2C cjsModuleInstance) {\x0d\n  if (patched) {\x0d\n    const wrapper = Module.wrap(content);\x0d\n    return vm.runInThisContext(wrapper\x2C {\x0d\n      filename\x2C\x0d\n      lineOffset: 0\x2C\x0d\n      displayErrors: true\x2C\x0d\n      importModuleDynamically: async (specifier\x2C _\x2C importAssertions) => {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C\x0d\n                             loader.getBaseURL(normalizeReferrerURL(filename))\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  }\x0d\n  try {\x0d\n    return vm.compileFunction(content\x2C [\x0d\n      'exports'\x2C\x0d\n      'require'\x2C\x0d\n      'module'\x2C\x0d\n      '__filename'\x2C\x0d\n      '__dirname'\x2C\x0d\n    ]\x2C {\x0d\n      filename\x2C\x0d\n      importModuleDynamically(specifier\x2C _\x2C importAssertions) {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C\x0d\n                             loader.getBaseURL(normalizeReferrerURL(filename))\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  } catch (err) {\x0d\n    if (process.mainModule === cjsModuleInstance)\x0d\n      enrichCJSError(err\x2C content);\x0d\n    throw err;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Run the file contents in the correct scope or sandbox. Expose\x0d\n// the correct helper variables (require\x2C module\x2C exports) to\x0d\n// the file.\x0d\n// Returns exception\x2C if any.\x0d\nModule.prototype._compile = function(content\x2C filename) {\x0d\n  let moduleURL;\x0d\n  let redirects;\x0d\n  if (policy?.manifest) {\x0d\n    moduleURL = pathToFileURL(filename);\x0d\n    redirects = policy.manifest.getDependencyMapper(moduleURL);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  maybeCacheSourceMap(filename\x2C content\x2C this);\x0d\n  const compiledWrapper = wrapSafe(filename\x2C content\x2C this);\x0d\n\x0d\n  let inspectorWrapper = null;\x0d\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\x0d\n    if (!resolvedArgv) {\x0d\n      // We enter the repl if we're not given a filename argument.\x0d\n      if (process.argv[1]) {\x0d\n        try {\x0d\n          resolvedArgv = Module._resolveFilename(process.argv[1]\x2C null\x2C false);\x0d\n        } catch {\x0d\n          // We only expect this codepath to be reached in the case of a\x0d\n          // preloaded module (it will fail earlier with the main entry)\x0d\n          assert(ArrayIsArray(getOptionValue('--require')));\x0d\n        }\x0d\n      } else {\x0d\n        resolvedArgv = 'repl';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Set breakpoint on module start\x0d\n    if (resolvedArgv && !hasPausedEntry && filename === resolvedArgv) {\x0d\n      hasPausedEntry = true;\x0d\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n    }\x0d\n  }\x0d\n  const dirname = path.dirname(filename);\x0d\n  const require = makeRequireFunction(this\x2C redirects);\x0d\n  let result;\x0d\n  const exports = this.exports;\x0d\n  const thisValue = exports;\x0d\n  const module = this;\x0d\n  if (requireDepth === 0) statCache = new SafeMap();\x0d\n  if (inspectorWrapper) {\x0d\n    result = inspectorWrapper(compiledWrapper\x2C thisValue\x2C exports\x2C\x0d\n                              require\x2C module\x2C filename\x2C dirname);\x0d\n  } else {\x0d\n    result = ReflectApply(compiledWrapper\x2C thisValue\x2C\x0d\n                          [exports\x2C require\x2C module\x2C filename\x2C dirname]);\x0d\n  }\x0d\n  hasLoadedAnyUserCJSModule = true;\x0d\n  if (requireDepth === 0) statCache = null;\x0d\n  return result;\x0d\n};\x0d\n\x0d\n// Native extension for .js\x0d\nModule._extensions['.js'] = function(module\x2C filename) {\x0d\n  // If already analyzed the source\x2C then it will be cached.\x0d\n  const cached = cjsParseCache.get(module);\x0d\n  let content;\x0d\n  if (cached?.source) {\x0d\n    content = cached.source;\x0d\n    cached.source = undefined;\x0d\n  } else {\x0d\n    content = fs.readFileSync(filename\x2C 'utf8');\x0d\n  }\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.js')) {\x0d\n    const pkg = readPackageScope(filename);\x0d\n    // Function require shouldn't be used in ES modules.\x0d\n    if (pkg?.data?.type === 'module') {\x0d\n      const parent = moduleParentCache.get(module);\x0d\n      const parentPath = parent?.filename;\x0d\n      const packageJsonPath = path.resolve(pkg.path\x2C 'package.json');\x0d\n      const usesEsm = hasEsmSyntax(content);\x0d\n      const err = new ERR_REQUIRE_ESM(filename\x2C usesEsm\x2C parentPath\x2C\x0d\n                                      packageJsonPath);\x0d\n      // Attempt to reconstruct the parent require frame.\x0d\n      if (Module._cache[parentPath]) {\x0d\n        let parentSource;\x0d\n        try {\x0d\n          parentSource = fs.readFileSync(parentPath\x2C 'utf8');\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n        if (parentSource) {\x0d\n          const errLine = StringPrototypeSplit(\x0d\n            StringPrototypeSlice(err.stack\x2C StringPrototypeIndexOf(\x0d\n              err.stack\x2C '    at '))\x2C '\\n'\x2C 1)[0];\x0d\n          const { 1: line\x2C 2: col } =\x0d\n              RegExpPrototypeExec(/(\\d+):(\\d+)\\)/\x2C errLine) || [];\x0d\n          if (line && col) {\x0d\n            const srcLine = StringPrototypeSplit(parentSource\x2C '\\n')[line - 1];\x0d\n            const frame = `${parentPath}:${line}\\n${srcLine}\\n${\x0d\n              StringPrototypeRepeat(' '\x2C col - 1)}^\\n`;\x0d\n            setArrowMessage(err\x2C frame);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n      throw err;\x0d\n    }\x0d\n  }\x0d\n  module._compile(content\x2C filename);\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .json\x0d\nModule._extensions['.json'] = function(module\x2C filename) {\x0d\n  const content = fs.readFileSync(filename\x2C 'utf8');\x0d\n\x0d\n  if (policy?.manifest) {\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    module.exports = JSONParse(stripBOM(content));\x0d\n  } catch (err) {\x0d\n    err.message = filename + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .node\x0d\nModule._extensions['.node'] = function(module\x2C filename) {\x0d\n  if (policy?.manifest) {\x0d\n    const content = fs.readFileSync(filename);\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n  // Be aware this doesn't use `content`\x0d\n  return process.dlopen(module\x2C path.toNamespacedPath(filename));\x0d\n};\x0d\n\x0d\nfunction createRequireFromPath(filename) {\x0d\n  // Allow a directory to be passed as the filename\x0d\n  const trailingSlash =\x0d\n    StringPrototypeEndsWith(filename\x2C '/') ||\x0d\n    (isWindows && StringPrototypeEndsWith(filename\x2C '\\\\'));\x0d\n\x0d\n  const proxyPath = trailingSlash ?\x0d\n    path.join(filename\x2C 'noop.js') :\x0d\n    filename;\x0d\n\x0d\n  const m = new Module(proxyPath);\x0d\n  m.filename = proxyPath;\x0d\n\x0d\n  m.paths = Module._nodeModulePaths(m.path);\x0d\n  return makeRequireFunction(m\x2C null);\x0d\n}\x0d\n\x0d\nconst createRequireError = 'must be a file URL object\x2C file URL string\x2C or ' +\x0d\n  'absolute path string';\x0d\n\x0d\nfunction createRequire(filename) {\x0d\n  let filepath;\x0d\n\x0d\n  if (isURLInstance(filename) ||\x0d\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\x0d\n    try {\x0d\n      filepath = fileURLToPath(filename);\x0d\n    } catch {\x0d\n      throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C\x0d\n                                      createRequireError);\x0d\n    }\x0d\n  } else if (typeof filename !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C createRequireError);\x0d\n  } else {\x0d\n    filepath = filename;\x0d\n  }\x0d\n  return createRequireFromPath(filepath);\x0d\n}\x0d\n\x0d\nModule.createRequire = createRequire;\x0d\n\x0d\nModule._initPaths = function() {\x0d\n  const homeDir = isWindows ? process.env.USERPROFILE : safeGetenv('HOME');\x0d\n  const nodePath = isWindows ? process.env.NODE_PATH : safeGetenv('NODE_PATH');\x0d\n\x0d\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\x0d\n  // $PREFIX\\node.exe where $PREFIX is the root of the Node.js installation.\x0d\n  const prefixDir = isWindows ?\x0d\n    path.resolve(process.execPath\x2C '..') :\x0d\n    path.resolve(process.execPath\x2C '..'\x2C '..');\x0d\n\x0d\n  const paths = [path.resolve(prefixDir\x2C 'lib'\x2C 'node')];\x0d\n\x0d\n  if (homeDir) {\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_libraries'));\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_modules'));\x0d\n  }\x0d\n\x0d\n  if (nodePath) {\x0d\n    ArrayPrototypeUnshiftApply(paths\x2C ArrayPrototypeFilter(\x0d\n      StringPrototypeSplit(nodePath\x2C path.delimiter)\x2C\x0d\n      Boolean\x0d\n    ));\x0d\n  }\x0d\n\x0d\n  modulePaths = paths;\x0d\n\x0d\n  // Clone as a shallow copy\x2C for introspection.\x0d\n  Module.globalPaths = ArrayPrototypeSlice(modulePaths);\x0d\n};\x0d\n\x0d\nModule._preloadModules = function(requests) {\x0d\n  if (!ArrayIsArray(requests))\x0d\n    return;\x0d\n\x0d\n  isPreloading = true;\x0d\n\x0d\n  // Preloaded modules have a dummy parent module which is deemed to exist\x0d\n  // in the current working directory. This seeds the search path for\x0d\n  // preloaded modules.\x0d\n  const parent = new Module('internal/preload'\x2C null);\x0d\n  try {\x0d\n    parent.paths = Module._nodeModulePaths(process.cwd());\x0d\n  } catch (e) {\x0d\n    if (e.code !== 'ENOENT') {\x0d\n      isPreloading = false;\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n  for (let n = 0; n < requests.length; n++)\x0d\n    parent.require(requests[n]);\x0d\n  isPreloading = false;\x0d\n};\x0d\n\x0d\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\x0d\n  for (const mod of NativeModule.map.values()) {\x0d\n    if (mod.canBeRequiredByUsers) {\x0d\n      mod.syncExports();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\n// Backwards compatibility\x0d\nModule.Module = Module;\x0d\n
code-source-info,0x36339d1b016,111,0,41761,C0O0C4O41761,,
code-creation,Function,10,166506,0x36339d1cdb6,2547, node:internal/modules/cjs/loader:1:1,0x36339d1af90,~
tick,0x7ffdf679b380,166517,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
tick,0x7ff7c11cf7c7,166536,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-source-info,0x36339d1cdb6,111,0,41761,C0O0C446O1183C452O1200C458O1225C464O1250C470O1277C476O1303C482O1326C488O1349C494O1373C500O1398C506O1424C512O1455C518O1467C524O1477C530O1491C535O1508C541O1533C546O1550C552O1585C558O1610C564O1625C570O1645C576O1679C582O1704C587O1714C593O1731C599O1746C605O1770C611O1794C617O1806C622O1822C628O1833C634O1859C640O1889C646O1917C652O1948C658O1975C664O2000C670O2026C676O2051C682O2076C688O2186C690O2186C695O2186C697O2262C709O2284C715O2294C721O2302C727O2314C733O2332C763O2277C767O2452C771O2452C777O2435C783O2529C787O2529C793O2503C799O2635C803O2635C809O2587C815O2602C821O2617C827O2683C831O2683C837O2669C842O2721C846O2721C850O2721C852O2752C856O2752C860O2752C862O2792C866O2792C870O2792C872O2827C876O2827C880O2827C882O2871C886O2871C890O2871C892O2905C896O2897C902O2943C910O2943C916O2920C922O2993C926O2993C930O2993C932O3066C940O3066C946O3051C952O3230C956O3230C962O3110C968O3128C974O3145C980O3166C986O3190C992O3215C998O3299C1002O3299C1008O3280C1014O3354C1022O3354C1026O3354C1028O3423C1036O3423C1040O3423C1042O3535C1050O3535C1060O3580C1067O3535C1069O3765C1070O3765C1072O3944C1076O3944C1082O3944C1088O3800C1094O3828C1100O3863C1106O3885C1112O3922C1118O4000C1122O4000C1128O3981C1134O4060C1142O4060C1147O4178C1151O4178C1157O4115C1163O4138C1169O4162C1175O4236C1179O4236C1185O4223C1191O4288C1195O4288C1199O4288C1201O4356C1205O4356C1211O4337C1217O4425C1225O4425C1231O4410C1237O4542C1241O4542C1247O4469C1253O4489C1259O4515C1265O4604C1269O4612C1277O4621C1280O4604C1282O4666C1285O4666C1289O4666C1291O4708C1292O4708C1294O4728C1295O4728C1297O4754C1298O4754C1300O5420C1302O5420C1307O5420C1309O5728C1312O5778C1316O5778C1350O5760C1381O5749C1388O5756C1397O5796C1403O5825C1407O5825C1412O5733C1483O5876C1487O5907C1493O5929C1497O5950C1504O5966C1508O5964C1512O5987C1519O6007C1527O6005C1535O6028C1542O6049C1550O6047C1558O6088C1562O6088C1564O6093C1572O6112C1580O6135C1581O6135C1583O6196C1587O6196C1589O6296C1597O6415C1606O6429C1618O6561C1635O6405C1645O6405C1647O6706C1659O6727C1668O6748C1680O6785C1692O6706C1702O6851C1714O6872C1723O6896C1735O6941C1747O6851C1757O7040C1766O7042C1781O7077C1789O7105C1806O7077C1816O7152C1824O7186C1841O7152C1851O7388C1859O7416C1884O7447C1892O7572C1907O7468C1921O7656C1931O7681C1939O7806C1954O7702C1968O7890C1976O7388C1986O7927C1990O7927C2000O7960C2020O7961C2032O7927C2034O8011C2050O8027C2060O8025C2068O8353C2072O8353C2082O8353C2084O11246C2088O11246C2098O11246C2100O13968C2107O13968C2109O14774C2116O14774C2118O14793C2126O14810C2134O17571C2141O17571C2143O17649C2147O17657C2155O17649C2157O17666C2161O17731C2169O17755C2179O19385C2187O19409C2195O20593C2203O20620C2211O22216C2223O22235C2235O22621C2249O22216C2259O22216C2261O23941C2269O23954C2277O26976C2285O27000C2293O31201C2297O31208C2311O31223C2319O32165C2323O32172C2337O32190C2345O32645C2346O32645C2348O32681C2349O32681C2351O34014C2355O34021C2369O34040C2377O35977C2381O35984C2395O36003C2403O37849C2407O37856C2421O37877C2429O38295C2433O38302C2447O38323C2455O39163C2461O39213C2467O39163C2469O39819C2475O39840C2483O39860C2491O39878C2499O40877C2507O40900C2515O41510C2523O41539C2531O41736C2537O41750C2546O41760,,
code-creation,Eval,10,167065,0x36339d20d76,5, node:internal/modules/package_json_reader:1:1,0x36339d20bd0,~
script-source,112,node:internal/modules/package_json_reader,'use strict';\x0d\n\x0d\nconst { SafeMap } = primordials;\x0d\nconst { internalModuleReadJSON } = internalBinding('fs');\x0d\nconst { pathToFileURL } = require('url');\x0d\nconst { toNamespacedPath } = require('path');\x0d\n\x0d\nconst cache = new SafeMap();\x0d\n\x0d\nlet manifest;\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string} jsonPath\x0d\n */\x0d\nfunction read(jsonPath) {\x0d\n  if (cache.has(jsonPath)) {\x0d\n    return cache.get(jsonPath);\x0d\n  }\x0d\n\x0d\n  const { 0: string\x2C 1: containsKeys } = internalModuleReadJSON(\x0d\n    toNamespacedPath(jsonPath)\x0d\n  );\x0d\n  const result = { string\x2C containsKeys };\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (string !== undefined) {\x0d\n    if (manifest === undefined) {\x0d\n      manifest = getOptionValue('--experimental-policy') ?\x0d\n        require('internal/process/policy').manifest :\x0d\n        null;\x0d\n    }\x0d\n    if (manifest !== null) {\x0d\n      const jsonURL = pathToFileURL(jsonPath);\x0d\n      manifest.assertIntegrity(jsonURL\x2C string);\x0d\n    }\x0d\n  }\x0d\n  cache.set(jsonPath\x2C result);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = { read };\x0d\n
code-source-info,0x36339d20d76,112,0,1024,C0O0C4O1024,,
code-creation,Function,10,167137,0x36339d20ec6,113, node:internal/modules/package_json_reader:1:1,0x36339d20cf0,~
code-source-info,0x36339d20ec6,112,0,1024,C0O0C29O25C34O86C37O86C42O59C48O136C54O136C59O118C65O182C71O182C76O161C82O216C84O216C89O216C91O238C92O238C94O996C101O1015C107O1011C112O1023,,
code-creation,Eval,10,167294,0x36339d2170e,5, node:internal/process/esm_loader:1:1,0x36339d21518,~
script-source,113,node:internal/process/esm_loader,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { ESMLoader } = require('internal/modules/esm/loader');\x0d\nconst {\x0d\n  hasUncaughtExceptionCaptureCallback\x2C\x0d\n} = require('internal/process/execution');\x0d\nconst { pathToFileURL } = require('internal/url');\x0d\nconst {\x0d\n  getModuleFromWrap\x2C\x0d\n} = require('internal/vm/module');\x0d\n\x0d\nexports.initializeImportMetaObject = function(wrap\x2C meta) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { initializeImportMeta } = callbackMap.get(wrap);\x0d\n    if (initializeImportMeta !== undefined) {\x0d\n      initializeImportMeta(meta\x2C getModuleFromWrap(wrap) || wrap);\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nexports.importModuleDynamicallyCallback =\x0d\nasync function importModuleDynamicallyCallback(wrap\x2C specifier\x2C assertions) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { importModuleDynamically } = callbackMap.get(wrap);\x0d\n    if (importModuleDynamically !== undefined) {\x0d\n      return importModuleDynamically(\x0d\n        specifier\x2C getModuleFromWrap(wrap) || wrap\x2C assertions);\x0d\n    }\x0d\n  }\x0d\n  throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING();\x0d\n};\x0d\n\x0d\nconst esmLoader = new ESMLoader();\x0d\n\x0d\nexports.esmLoader = esmLoader;\x0d\n\x0d\n/**\x0d\n * Causes side-effects: user-defined loader hooks are added to esmLoader.\x0d\n * @returns {void}\x0d\n */\x0d\nasync function initializeLoader() {\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  // customLoaders CURRENTLY can be only 1 (a string)\x0d\n  // Once chaining is implemented\x2C it will be string[]\x0d\n  const customLoaders = getOptionValue('--experimental-loader');\x0d\n\x0d\n  if (!customLoaders.length) return;\x0d\n\x0d\n  const { emitExperimentalWarning } = require('internal/util');\x0d\n  emitExperimentalWarning('--experimental-loader');\x0d\n\x0d\n  let cwd;\x0d\n  try {\x0d\n    cwd = process.cwd() + '/';\x0d\n  } catch {\x0d\n    cwd = 'file:///';\x0d\n  }\x0d\n\x0d\n  // A separate loader instance is necessary to avoid cross-contamination\x0d\n  // between internal Node.js and userland. For example\x2C a module with internal\x0d\n  // state (such as a counter) should be independent.\x0d\n  const internalEsmLoader = new ESMLoader();\x0d\n\x0d\n  // Importation must be handled by internal loader to avoid poluting userland\x0d\n  const exports = await internalEsmLoader.import(\x0d\n    customLoaders\x2C\x0d\n    pathToFileURL(cwd).href\x2C\x0d\n    ObjectCreate(null)\x2C\x0d\n  );\x0d\n\x0d\n  // Hooks must then be added to external/public loader\x0d\n  // (so they're triggered in userland)\x0d\n  await esmLoader.addCustomLoaders(exports);\x0d\n}\x0d\n\x0d\nexports.loadESM = async function loadESM(callback) {\x0d\n  try {\x0d\n    await initializeLoader();\x0d\n    await callback(esmLoader);\x0d\n  } catch (err) {\x0d\n    if (hasUncaughtExceptionCaptureCallback()) {\x0d\n      process._fatalException(err);\x0d\n      return;\x0d\n    }\x0d\n    internalBinding('errors').triggerUncaughtException(\x0d\n      err\x2C\x0d\n      true /* fromPromise */\x0d\n    );\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x36339d2170e,113,0,2982,C0O0C4O2982,,
code-creation,Function,10,167432,0x36339d219ae,182, node:internal/process/esm_loader:1:1,0x36339d21688,~
code-source-info,0x36339d219ae,113,0,2982,C0O0C44O28C50O119C56O119C61O145C66O74C72O176C78O176C83O162C89O270C95O270C100O228C106O336C112O336C117O318C123O397C129O397C134O373C140O431C144O466C148O777C152O817C156O1300C159O1300C164O1300C166O1320C168O1338C172O2612C176O2628C181O2981,,
code-creation,Eval,10,167790,0x36339d22cbe,5, node:internal/modules/esm/loader:1:1,0x36339d22830,~
script-source,114,node:internal/modules/esm/loader,'use strict';\x0d\n\x0d\n// This is needed to avoid cycles in esm/resolve <-> cjs/loader\x0d\nrequire('internal/modules/cjs/loader');\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\nconst { MessageChannel } = require('internal/worker/io');\x0d\n\x0d\nconst {\x0d\n  ERR_INTERNAL_ASSERTION\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x2C\x0d\n  ERR_INVALID_RETURN_VALUE\x2C\x0d\n  ERR_UNKNOWN_MODULE_FORMAT\x0d\n} = require('internal/errors').codes;\x0d\nconst { pathToFileURL\x2C isURLInstance\x2C URL } = require('internal/url');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst ModuleMap = require('internal/modules/esm/module_map');\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\n\x0d\nconst {\x0d\n  defaultResolve\x2C\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n} = require('internal/modules/esm/resolve');\x0d\nconst {\x0d\n  initializeImportMeta\x0d\n} = require('internal/modules/esm/initialize_import_meta');\x0d\nconst { defaultLoad } = require('internal/modules/esm/load');\x0d\nconst { translators } = require(\x0d\n  'internal/modules/esm/translators');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst {\x0d\n  fetchModule\x2C\x0d\n} = require('internal/modules/esm/fetch_module');\x0d\n\x0d\n/**\x0d\n * An ESMLoader instance is used as the main entry point for loading ES modules.\x0d\n * Currently\x2C this is a singleton -- there is only one used for loading\x0d\n * the main module and everything in its dependency graph.\x0d\n */\x0d\nclass ESMLoader {\x0d\n  /**\x0d\n   * Prior to ESM loading. These are called once before any modules are started.\x0d\n   * @private\x0d\n   * @property {Function[]} globalPreloaders First-in-first-out list of\x0d\n   * preload hooks.\x0d\n   */\x0d\n  #globalPreloaders = [];\x0d\n\x0d\n  /**\x0d\n   * Phase 2 of 2 in ESM loading.\x0d\n   * @private\x0d\n   * @property {Function[]} loaders First-in-first-out list of loader hooks.\x0d\n   */\x0d\n  #loaders = [\x0d\n    defaultLoad\x2C\x0d\n  ];\x0d\n\x0d\n  /**\x0d\n   * Phase 1 of 2 in ESM loading.\x0d\n   * @private\x0d\n   * @property {Function[]} resolvers First-in-first-out list of resolver hooks\x0d\n   */\x0d\n  #resolvers = [\x0d\n    defaultResolve\x2C\x0d\n  ];\x0d\n\x0d\n  #importMetaInitializer = initializeImportMeta;\x0d\n\x0d\n  /**\x0d\n   * Map of already-loaded CJS modules to use\x0d\n   */\x0d\n  cjsCache = new SafeWeakMap();\x0d\n\x0d\n  /**\x0d\n   * The index for assigning unique URLs to anonymous module evaluation\x0d\n   */\x0d\n  evalIndex = 0;\x0d\n\x0d\n  /**\x0d\n   * Registry of loaded modules\x2C akin to `require.cache`\x0d\n   */\x0d\n  moduleMap = new ModuleMap();\x0d\n\x0d\n  /**\x0d\n   * Methods which translate input code or other information into ES modules\x0d\n   */\x0d\n  translators = translators;\x0d\n\x0d\n  static pluckHooks({\x0d\n    globalPreload\x2C\x0d\n    resolve\x2C\x0d\n    load\x2C\x0d\n    // obsolete hooks:\x0d\n    dynamicInstantiate\x2C\x0d\n    getFormat\x2C\x0d\n    getGlobalPreloadCode\x2C\x0d\n    getSource\x2C\x0d\n    transformSource\x2C\x0d\n  }) {\x0d\n    const obsoleteHooks = [];\x0d\n    const acceptedHooks = ObjectCreate(null);\x0d\n\x0d\n    if (getGlobalPreloadCode) {\x0d\n      globalPreload ??= getGlobalPreloadCode;\x0d\n\x0d\n      process.emitWarning(\x0d\n        'Loader hook "getGlobalPreloadCode" has been renamed to "globalPreload"'\x0d\n      );\x0d\n    }\x0d\n    if (dynamicInstantiate) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'dynamicInstantiate'\x0d\n    );\x0d\n    if (getFormat) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getFormat'\x2C\x0d\n    );\x0d\n    if (getSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getSource'\x2C\x0d\n    );\x0d\n    if (transformSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'transformSource'\x2C\x0d\n    );\x0d\n\x0d\n    if (obsoleteHooks.length) process.emitWarning(\x0d\n      `Obsolete loader hook(s) supplied and will be ignored: ${\x0d\n        ArrayPrototypeJoin(obsoleteHooks\x2C '\x2C ')\x0d\n      }`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n    );\x0d\n\x0d\n    // Use .bind() to avoid giving access to the Loader instance when called.\x0d\n    if (globalPreload) {\x0d\n      acceptedHooks.globalPreloader =\x0d\n        FunctionPrototypeBind(globalPreload\x2C null);\x0d\n    }\x0d\n    if (resolve) {\x0d\n      acceptedHooks.resolver = FunctionPrototypeBind(resolve\x2C null);\x0d\n    }\x0d\n    if (load) {\x0d\n      acceptedHooks.loader = FunctionPrototypeBind(load\x2C null);\x0d\n    }\x0d\n\x0d\n    return acceptedHooks;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Collect custom/user-defined hook(s). After all hooks have been collected\x2C\x0d\n   * calls global preload hook(s).\x0d\n   * @param {object | object[]} customLoaders A list of exports from\x0d\n   * user-defined loaders (as returned by ESMLoader.import()).\x0d\n   */\x0d\n  async addCustomLoaders(\x0d\n    customLoaders = []\x2C\x0d\n  ) {\x0d\n    if (!ArrayIsArray(customLoaders)) customLoaders = [customLoaders];\x0d\n\x0d\n    for (let i = 0; i < customLoaders.length; i++) {\x0d\n      const exports = customLoaders[i];\x0d\n      const {\x0d\n        globalPreloader\x2C\x0d\n        resolver\x2C\x0d\n        loader\x2C\x0d\n      } = ESMLoader.pluckHooks(exports);\x0d\n\x0d\n      if (globalPreloader) ArrayPrototypePush(\x0d\n        this.#globalPreloaders\x2C\x0d\n        FunctionPrototypeBind(globalPreloader\x2C null)\x2C // [1]\x0d\n      );\x0d\n      if (resolver) ArrayPrototypePush(\x0d\n        this.#resolvers\x2C\x0d\n        FunctionPrototypeBind(resolver\x2C null)\x2C // [1]\x0d\n      );\x0d\n      if (loader) ArrayPrototypePush(\x0d\n        this.#loaders\x2C\x0d\n        FunctionPrototypeBind(loader\x2C null)\x2C // [1]\x0d\n      );\x0d\n    }\x0d\n\x0d\n    // [1] ensure hook function is not bound to ESMLoader instance\x0d\n\x0d\n    this.preload();\x0d\n  }\x0d\n\x0d\n  async eval(\x0d\n    source\x2C\x0d\n    url = pathToFileURL(`${process.cwd()}/[eval${++this.evalIndex}]`).href\x0d\n  ) {\x0d\n    const evalInstance = (url) => {\x0d\n      const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n      const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n      callbackMap.set(module\x2C {\x0d\n        importModuleDynamically: (specifier\x2C { url }\x2C importAssertions) => {\x0d\n          return this.import(specifier\x2C\x0d\n                             this.getBaseURL(url)\x2C\x0d\n                             importAssertions);\x0d\n        }\x0d\n      });\x0d\n\x0d\n      return module;\x0d\n    };\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C url\x2C undefined\x2C evalInstance\x2C false\x2C false);\x0d\n    this.moduleMap.set(url\x2C undefined\x2C job);\x0d\n    const { module } = await job.run();\x0d\n\x0d\n    return {\x0d\n      namespace: module.getNamespace()\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Returns the url to use for the resolution of a given cache key url\x0d\n   * These are not guaranteed to be the same.\x0d\n   *\x0d\n   * In WHATWG HTTP spec for ESM the cache key is the non-I/O bound\x0d\n   * synchronous resolution using only string operations\x0d\n   *   ~= resolveImportMap(new URL(specifier\x2C importerHREF))\x0d\n   *\x0d\n   * The url used for subsequent resolution is the response URL after\x0d\n   * all redirects have been resolved.\x0d\n   *\x0d\n   * https://example.com/foo redirecting to https://example.com/bar\x0d\n   * would have a cache key of https://example.com/foo and baseURL\x0d\n   * of https://example.com/bar\x0d\n   *\x0d\n   * MUST BE SYNCHRONOUS for import.meta initialization\x0d\n   * MUST BE CALLED AFTER receiving the url body due to I/O\x0d\n   * @param {string} url\x0d\n   * @returns {string}\x0d\n   */\x0d\n  getBaseURL(url) {\x0d\n    if (\x0d\n      StringPrototypeStartsWith(url\x2C 'http:') ||\x0d\n      StringPrototypeStartsWith(url\x2C 'https:')\x0d\n    ) {\x0d\n      // The request & response have already settled\x2C so they are in\x0d\n      // fetchModule's cache\x2C in which case\x2C fetchModule returns\x0d\n      // immediately and synchronously\x0d\n      url = fetchModule(new URL(url)\x2C { parentURL: url }).resolvedHREF;\x0d\n      // This should only occur if the module hasn't been fetched yet\x0d\n      if (typeof url !== 'string') {\x0d\n        throw new ERR_INTERNAL_ASSERTION(`Base url for module ${url} not loaded.`);\x0d\n      }\x0d\n    }\x0d\n    return url;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Get a (possibly still pending) module job from the cache\x2C\x0d\n   * or create one and return its Promise.\x0d\n   * @param {string} specifier The string after `from` in an `import` statement\x2C\x0d\n   *                           or the first parameter of an `import()`\x0d\n   *                           expression\x0d\n   * @param {string | undefined} parentURL The URL of the module importing this\x0d\n   *                                     one\x2C unless this is the Node.js entry\x0d\n   *                                     point.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  async getModuleJob(specifier\x2C parentURL\x2C importAssertions) {\x0d\n    let importAssertionsForResolve;\x0d\n    if (this.#loaders.length !== 1) {\x0d\n      // We can skip cloning if there are no user provided loaders because\x0d\n      // the Node.js default resolve hook does not use import assertions.\x0d\n      importAssertionsForResolve =\x0d\n        ObjectAssign(ObjectCreate(null)\x2C importAssertions);\x0d\n    }\x0d\n    const { format\x2C url } =\x0d\n      await this.resolve(specifier\x2C parentURL\x2C importAssertionsForResolve);\x0d\n\x0d\n    let job = this.moduleMap.get(url\x2C importAssertions.type);\x0d\n\x0d\n    // CommonJS will set functions for lazy job evaluation.\x0d\n    if (typeof job === 'function') {\x0d\n      this.moduleMap.set(url\x2C undefined\x2C job = job());\x0d\n    }\x0d\n\x0d\n    if (job === undefined) {\x0d\n      job = this.#createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format);\x0d\n    }\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Create and cache an object representing a loaded module.\x0d\n   * @param {string} url The absolute URL that was resolved for this module\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @param {string} [parentURL] The absolute URL of the module importing this\x0d\n   *                             one\x2C unless this is the Node.js entry point\x0d\n   * @param {string} [format] The format hint possibly returned by the\x0d\n   *                          `resolve` hook\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  #createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format) {\x0d\n    const moduleProvider = async (url\x2C isMain) => {\x0d\n      const {\x0d\n        format: finalFormat\x2C\x0d\n        source\x2C\x0d\n      } = await this.load(url\x2C {\x0d\n        format\x2C\x0d\n        importAssertions\x2C\x0d\n      });\x0d\n\x0d\n      const translator = translators.get(finalFormat);\x0d\n\x0d\n      if (!translator) {\x0d\n        throw new ERR_UNKNOWN_MODULE_FORMAT(finalFormat\x2C url);\x0d\n      }\x0d\n\x0d\n      return FunctionPrototypeCall(translator\x2C this\x2C url\x2C source\x2C isMain);\x0d\n    };\x0d\n\x0d\n    const inspectBrk = (\x0d\n      parentURL === undefined &&\x0d\n      getOptionValue('--inspect-brk')\x0d\n    );\x0d\n\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C\x0d\n      url\x2C\x0d\n      importAssertions\x2C\x0d\n      moduleProvider\x2C\x0d\n      parentURL === undefined\x2C\x0d\n      inspectBrk\x0d\n    );\x0d\n\x0d\n    this.moduleMap.set(url\x2C importAssertions.type\x2C job);\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * This method is usually called indirectly as part of the loading processes.\x0d\n   * Internally\x2C it is used directly to add loaders. Use directly with caution.\x0d\n   *\x0d\n   * This method must NOT be renamed: it functions as a dynamic import on a\x0d\n   * loader module.\x0d\n   *\x0d\n   * @param {string | string[]} specifiers Path(s) to the module.\x0d\n   * @param {string} parentURL Path of the parent importing the module.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<object | object[]>} A list of module export(s).\x0d\n   */\x0d\n  async import(specifiers\x2C parentURL\x2C importAssertions) {\x0d\n    const wasArr = ArrayIsArray(specifiers);\x0d\n    if (!wasArr) specifiers = [specifiers];\x0d\n\x0d\n    const count = specifiers.length;\x0d\n    const jobs = new Array(count);\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      jobs[i] = this.getModuleJob(specifiers[i]\x2C parentURL\x2C importAssertions)\x0d\n        .then((job) => job.run())\x0d\n        .then(({ module }) => module.getNamespace());\x0d\n    }\x0d\n\x0d\n    const namespaces = await PromiseAll(new SafeArrayIterator(jobs));\x0d\n\x0d\n    return wasArr ?\x0d\n      namespaces :\x0d\n      namespaces[0];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Provide source that is understood by one of Node's translators.\x0d\n   *\x0d\n   * The internals of this WILL change when chaining is implemented\x2C\x0d\n   * depending on the resolution/consensus from #36954\x0d\n   * @param {string} url The URL/path of the module to be loaded\x0d\n   * @param {object} context Metadata about the module\x0d\n   * @returns {object}\x0d\n   */\x0d\n  async load(url\x2C context = {}) {\x0d\n    const defaultLoader = this.#loaders[0];\x0d\n\x0d\n    const loader = this.#loaders.length === 1 ?\x0d\n      defaultLoader :\x0d\n      this.#loaders[1];\x0d\n    const loaded = await loader(url\x2C context\x2C defaultLoader);\x0d\n\x0d\n    if (typeof loaded !== 'object') {\x0d\n      throw new ERR_INVALID_RETURN_VALUE(\x0d\n        'object'\x2C\x0d\n        'loader load'\x2C\x0d\n        loaded\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      format\x2C\x0d\n      source\x2C\x0d\n    } = loaded;\x0d\n\x0d\n    if (format == null) {\x0d\n      const dataUrl = RegExpPrototypeExec(\x0d\n        /^data:([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n\x0d\n      throw new ERR_UNKNOWN_MODULE_FORMAT(\x0d\n        dataUrl ? dataUrl[1] : format\x2C\x0d\n        url);\x0d\n    }\x0d\n\x0d\n    if (typeof format !== 'string') {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (\x0d\n      source != null &&\x0d\n      typeof source !== 'string' &&\x0d\n      !isAnyArrayBuffer(source) &&\x0d\n      !isArrayBufferView(source)\x0d\n    ) throw ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n      'string\x2C an ArrayBuffer\x2C or a TypedArray'\x2C\x0d\n      'loader load'\x2C\x0d\n      'source'\x2C\x0d\n      source\x0d\n    );\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      source\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  preload() {\x0d\n    const count = this.#globalPreloaders.length;\x0d\n    if (!count) return;\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      const channel = new MessageChannel();\x0d\n      const {\x0d\n        port1: insidePreload\x2C\x0d\n        port2: insideLoader\x2C\x0d\n      } = channel;\x0d\n\x0d\n      insidePreload.unref();\x0d\n      insideLoader.unref();\x0d\n\x0d\n      const preload = this.#globalPreloaders[i]({\x0d\n        port: insideLoader\x0d\n      });\x0d\n\x0d\n      if (preload == null) return;\x0d\n\x0d\n      if (typeof preload !== 'string') {\x0d\n        throw new ERR_INVALID_RETURN_VALUE(\x0d\n          'string'\x2C\x0d\n          'loader globalPreloadCode'\x2C\x0d\n          preload\x2C\x0d\n        );\x0d\n      }\x0d\n      const { compileFunction } = require('vm');\x0d\n      const preloadInit = compileFunction(\x0d\n        preload\x2C\x0d\n        ['getBuiltin'\x2C 'port'\x2C 'setImportMetaCallback']\x2C\x0d\n        {\x0d\n          filename: '<preload>'\x2C\x0d\n        }\x0d\n      );\x0d\n      const { NativeModule } = require('internal/bootstrap/loaders');\x0d\n      // We only allow replacing the importMetaInitializer during preload\x2C\x0d\n      // after preload is finished\x2C we disable the ability to replace it\x0d\n      //\x0d\n      // This exposes accidentally setting the initializer too late by\x0d\n      // throwing an error.\x0d\n      let finished = false;\x0d\n      let replacedImportMetaInitializer = false;\x0d\n      let next = this.#importMetaInitializer;\x0d\n      try {\x0d\n        // Calls the compiled preload source text gotten from the hook\x0d\n        // Since the parameters are named we use positional parameters\x0d\n        // see compileFunction above to cross reference the names\x0d\n        FunctionPrototypeCall(\x0d\n          preloadInit\x2C\x0d\n          globalThis\x2C\x0d\n          // Param getBuiltin\x0d\n          (builtinName) => {\x0d\n            if (NativeModule.canBeRequiredByUsers(builtinName)) {\x0d\n              return require(builtinName);\x0d\n            }\x0d\n            throw new ERR_INVALID_ARG_VALUE('builtinName'\x2C builtinName);\x0d\n          }\x2C\x0d\n          // Param port\x0d\n          insidePreload\x2C\x0d\n          // Param setImportMetaCallback\x0d\n          (fn) => {\x0d\n            if (finished || typeof fn !== 'function') {\x0d\n              throw new ERR_INVALID_ARG_TYPE('fn'\x2C fn);\x0d\n            }\x0d\n            replacedImportMetaInitializer = true;\x0d\n            const parent = next;\x0d\n            next = (meta\x2C context) => {\x0d\n              return fn(meta\x2C context\x2C parent);\x0d\n            };\x0d\n          });\x0d\n      } finally {\x0d\n        finished = true;\x0d\n        if (replacedImportMetaInitializer) {\x0d\n          this.#importMetaInitializer = next;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  importMetaInitialize(meta\x2C context) {\x0d\n    this.#importMetaInitializer(meta\x2C context);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Resolve the location of the module.\x0d\n   *\x0d\n   * The internals of this WILL change when chaining is implemented\x2C\x0d\n   * depending on the resolution/consensus from #36954.\x0d\n   * @param {string} originalSpecifier The specified URL path of the module to\x0d\n   *                                   be resolved.\x0d\n   * @param {string} [parentURL] The URL path of the module's parent.\x0d\n   * @param {ImportAssertions} [importAssertions] Assertions from the import\x0d\n   *                                              statement or expression.\x0d\n   * @returns {{ url: string }}\x0d\n   */\x0d\n  async resolve(\x0d\n    originalSpecifier\x2C\x0d\n    parentURL\x2C\x0d\n    importAssertions = ObjectCreate(null)\x0d\n  ) {\x0d\n    const isMain = parentURL === undefined;\x0d\n\x0d\n    if (\x0d\n      !isMain &&\x0d\n      typeof parentURL !== 'string' &&\x0d\n      !isURLInstance(parentURL)\x0d\n    ) throw new ERR_INVALID_ARG_TYPE(\x0d\n      'parentURL'\x2C\x0d\n      ['string'\x2C 'URL']\x2C\x0d\n      parentURL\x2C\x0d\n    );\x0d\n\x0d\n    const conditions = DEFAULT_CONDITIONS;\x0d\n\x0d\n    const defaultResolver = this.#resolvers[0];\x0d\n\x0d\n    const resolver = this.#resolvers.length === 1 ?\x0d\n      defaultResolver :\x0d\n      this.#resolvers[1];\x0d\n    const resolution = await resolver(\x0d\n      originalSpecifier\x2C\x0d\n      {\x0d\n        conditions\x2C\x0d\n        importAssertions\x2C\x0d\n        parentURL\x2C\x0d\n      }\x2C\x0d\n      defaultResolver\x2C\x0d\n    );\x0d\n\x0d\n    if (typeof resolution !== 'object') {\x0d\n      throw new ERR_INVALID_RETURN_VALUE(\x0d\n        'object'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        resolution\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    const { format\x2C url } = resolution;\x0d\n\x0d\n    if (\x0d\n      format != null &&\x0d\n      typeof format !== 'string'\x0d\n    ) {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (typeof url !== 'string') { // non-strings can be coerced to a url string\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'url'\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    new URL(url); // Intentionally trigger error if `url` is invalid\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      url\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(ESMLoader.prototype\x2C null);\x0d\n\x0d\nexports.ESMLoader = ESMLoader;\x0d\n
code-source-info,0x36339d22cbe,114,0,18635,C0O0C4O18635,,
code-creation,Function,10,168584,0x36339d2358e,659, node:internal/modules/esm/loader:1:1,0x36339d22c38,~
code-source-info,0x36339d2358e,114,0,18635,C0O0C122O82C128O82C132O136C138O146C144O163C150O186C156O209C162O235C168O261C174O278C180O295C185O320C191O335C197O359C203O381C209O397C215O427C221O485C227O485C232O466C238O706C244O706C249O732C254O530C260O557C266O582C272O608C278O646C284O675C290O787C296O787C301O749C307O764C313O779C319O869C325O869C330O824C336O845C342O920C348O920C352O920C354O983C360O983C364O983C366O1085C372O1085C377O1041C383O1060C389O1164C395O1164C400O1138C406O1245C412O1245C417O1229C423O1308C429O1308C434O1292C440O1385C446O1385C451O1366C457O1444C463O1444C468O1426C639O18582C646O18551C651O18603C653O18621C658O18634,,
code-creation,Function,10,168649,0x36339d23a36,154,<instance_members_initializer> node:internal/modules/esm/loader:68:3,0x36339d230b0,~
code-source-info,0x36339d23a36,114,1944,2827,C3O1964C17O2126C28O2133C45O2315C56O2322C73O2374C88O2473C95O2473C109O2596C119O2688C126O2688C140O2816C153O2827,,
tick,0x7ff7c11c060b,168674,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,168839,0x36339d2540e,5, node:internal/modules/esm/module_map:1:1,0x36339d25220,~
script-source,115,node:internal/modules/esm/module_map,'use strict';\x0d\n\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\nconst { kImplicitAssertType } = require('internal/modules/esm/assert');\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\n// Tracks the state of the loader-level module cache\x0d\nclass ModuleMap extends SafeMap {\x0d\n  constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  get(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type];\x0d\n  }\x0d\n  set(url\x2C type = kImplicitAssertType\x2C job) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    if (job instanceof ModuleJob !== true &&\x0d\n        typeof job !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('job'\x2C 'ModuleJob'\x2C job);\x0d\n    }\x0d\n    debug(`Storing ${url} (${\x0d\n      type === kImplicitAssertType ? 'implicit type' : type\x0d\n    }) in ModuleMap`);\x0d\n    const cachedJobsForUrl = super.get(url) ?? ObjectCreate(null);\x0d\n    cachedJobsForUrl[type] = job;\x0d\n    return super.set(url\x2C cachedJobsForUrl);\x0d\n  }\x0d\n  has(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type] !== undefined;\x0d\n  }\x0d\n}\x0d\nmodule.exports = ModuleMap;\x0d\n
code-source-info,0x36339d2540e,115,0,1487,C0O0C4O1487,,
code-creation,Function,10,168920,0x36339d25846,175, node:internal/modules/esm/module_map:1:1,0x36339d25388,~
code-source-info,0x36339d25846,115,0,1487,C0O0C23O35C26O35C30O35C32O112C35O112C40O88C46O164C52O181C57O221C60O221C65O254C78O255C84O221C86O335C89O335C94O361C99O310C105O397C108O397C113O378C123O510C167O1458C169O1473C174O1486,,
code-creation,Eval,10,169142,0x36339d262ee,5, node:internal/modules/esm/module_job:1:1,0x36339d25ff8,~
script-source,116,node:internal/modules/esm/module_job,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  FunctionPrototype\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  PromiseResolve\x2C\x0d\n  PromisePrototypeCatch\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { ModuleWrap } = internalBinding('module_wrap');\x0d\n\x0d\nconst { decorateErrorStack } = require('internal/util');\x0d\nconst {\x0d\n  getSourceMapsEnabled\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst assert = require('internal/assert');\x0d\nconst resolvedPromise = PromiseResolve();\x0d\n\x0d\nconst noop = FunctionPrototype;\x0d\n\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nconst CJSGlobalLike = [\x0d\n  'require'\x2C\x0d\n  'module'\x2C\x0d\n  'exports'\x2C\x0d\n  '__filename'\x2C\x0d\n  '__dirname'\x2C\x0d\n];\x0d\nconst isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\x0d\n  ArrayPrototypeSome(\x0d\n    CJSGlobalLike\x2C\x0d\n    (globalLike) => errorMessage === `${globalLike} is not defined`\x0d\n  );\x0d\n\x0d\n/* A ModuleJob tracks the loading of a single Module\x2C and the ModuleJobs of\x0d\n * its dependencies\x2C over time. */\x0d\nclass ModuleJob {\x0d\n  // `loader` is the Loader instance used for loading dependencies.\x0d\n  // `moduleProvider` is a function\x0d\n  constructor(loader\x2C url\x2C importAssertions = ObjectCreate(null)\x2C\x0d\n              moduleProvider\x2C isMain\x2C inspectBrk) {\x0d\n    this.loader = loader;\x0d\n    this.importAssertions = importAssertions;\x0d\n    this.isMain = isMain;\x0d\n    this.inspectBrk = inspectBrk;\x0d\n\x0d\n    this.module = undefined;\x0d\n    // Expose the promise to the ModuleWrap directly for linking below.\x0d\n    // `this.module` is also filled in below.\x0d\n    this.modulePromise = ReflectApply(moduleProvider\x2C loader\x2C [url\x2C isMain]);\x0d\n\x0d\n    // Wait for the ModuleWrap instance being linked with all dependencies.\x0d\n    const link = async () => {\x0d\n      this.module = await this.modulePromise;\x0d\n      assert(this.module instanceof ModuleWrap);\x0d\n\x0d\n      // Explicitly keeping track of dependency jobs is needed in order\x0d\n      // to flatten out the dependency graph below in `_instantiate()`\x2C\x0d\n      // so that circular dependencies can't cause a deadlock by two of\x0d\n      // these `link` callbacks depending on each other.\x0d\n      const dependencyJobs = [];\x0d\n      const promises = this.module.link(async (specifier\x2C assertions) => {\x0d\n        const baseURL = this.loader.getBaseURL(url);\x0d\n        const jobPromise = this.loader.getModuleJob(specifier\x2C baseURL\x2C assertions);\x0d\n        ArrayPrototypePush(dependencyJobs\x2C jobPromise);\x0d\n        const job = await jobPromise;\x0d\n        return job.modulePromise;\x0d\n      });\x0d\n\x0d\n      if (promises !== undefined)\x0d\n        await PromiseAll(new SafeArrayIterator(promises));\x0d\n\x0d\n      return PromiseAll(new SafeArrayIterator(dependencyJobs));\x0d\n    };\x0d\n    // Promise for the list of all dependencyJobs.\x0d\n    this.linked = link();\x0d\n    // This promise is awaited later anyway\x2C so silence\x0d\n    // 'unhandled rejection' warnings.\x0d\n    PromisePrototypeCatch(this.linked\x2C noop);\x0d\n\x0d\n    // instantiated == deep dependency jobs wrappers are instantiated\x2C\x0d\n    // and module wrapper is instantiated.\x0d\n    this.instantiated = undefined;\x0d\n  }\x0d\n\x0d\n  instantiate() {\x0d\n    if (this.instantiated === undefined) {\x0d\n      this.instantiated = this._instantiate();\x0d\n    }\x0d\n    return this.instantiated;\x0d\n  }\x0d\n\x0d\n  async _instantiate() {\x0d\n    const jobsInGraph = new SafeSet();\x0d\n    const addJobsToDependencyGraph = async (moduleJob) => {\x0d\n      if (jobsInGraph.has(moduleJob)) {\x0d\n        return;\x0d\n      }\x0d\n      jobsInGraph.add(moduleJob);\x0d\n      const dependencyJobs = await moduleJob.linked;\x0d\n      return PromiseAll(new SafeArrayIterator(\x0d\n        ArrayPrototypeMap(dependencyJobs\x2C addJobsToDependencyGraph)));\x0d\n    };\x0d\n    await addJobsToDependencyGraph(this);\x0d\n\x0d\n    try {\x0d\n      if (!hasPausedEntry && this.inspectBrk) {\x0d\n        hasPausedEntry = true;\x0d\n        const initWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n        initWrapper(this.module.instantiate\x2C this.module);\x0d\n      } else {\x0d\n        this.module.instantiate();\x0d\n      }\x0d\n    } catch (e) {\x0d\n      decorateErrorStack(e);\x0d\n      // TODO(@bcoe): Add source map support to exception that occurs as result\x0d\n      // of missing named export. This is currently not possible because\x0d\n      // stack trace originates in module_job\x2C not the file itself. A hidden\x0d\n      // symbol with filename could be set in node_errors.cc to facilitate this.\x0d\n      if (!getSourceMapsEnabled() &&\x0d\n          StringPrototypeIncludes(e.message\x2C\x0d\n                                  ' does not provide an export named')) {\x0d\n        const splitStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n        const parentFileUrl = StringPrototypeReplace(\x0d\n          splitStack[0]\x2C\x0d\n          /:\\d+$/\x2C\x0d\n          ''\x0d\n        );\x0d\n        const { 1: childSpecifier\x2C 2: name } = StringPrototypeMatch(\x0d\n          e.message\x2C\x0d\n          /module '(.*)' does not provide an export named '(.+)'/);\x0d\n        const { url: childFileURL } = await this.loader.resolve(\x0d\n          childSpecifier\x2C parentFileUrl\x2C\x0d\n        );\x0d\n        let format;\x0d\n        try {\x0d\n          // This might throw for non-CommonJS modules because we aren't passing\x0d\n          // in the import assertions and some formats require them; but we only\x0d\n          // care about CommonJS for the purposes of this error message.\x0d\n          ({ format } =\x0d\n            await this.loader.load(childFileURL));\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n\x0d\n        if (format === 'commonjs') {\x0d\n          const importStatement = splitStack[1];\x0d\n          // TODO(@ctavan): The original error stack only provides the single\x0d\n          // line which causes the error. For multi-line import statements we\x0d\n          // cannot generate an equivalent object destructuring assignment by\x0d\n          // just parsing the error stack.\x0d\n          const oneLineNamedImports = StringPrototypeMatch(importStatement\x2C /{.*}/);\x0d\n          const destructuringAssignment = oneLineNamedImports &&\x0d\n            StringPrototypeReplace(oneLineNamedImports\x2C /\\s+as\\s+/g\x2C ': ');\x0d\n          e.message = `Named export '${name}' not found. The requested module` +\x0d\n            ` '${childSpecifier}' is a CommonJS module\x2C which may not support` +\x0d\n            ' all module.exports as named exports.\\nCommonJS modules can ' +\x0d\n            'always be imported via the default export\x2C for example using:' +\x0d\n            `\\n\\nimport pkg from '${childSpecifier}';\\n${\x0d\n              destructuringAssignment ?\x0d\n                `const ${destructuringAssignment} = pkg;\\n` : ''}`;\x0d\n          const newStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n          newStack[3] = `SyntaxError: ${e.message}`;\x0d\n          e.stack = ArrayPrototypeJoin(newStack\x2C '\\n');\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n\x0d\n    for (const dependencyJob of jobsInGraph) {\x0d\n      // Calling `this.module.instantiate()` instantiates not only the\x0d\n      // ModuleWrap in this module\x2C but all modules in the graph.\x0d\n      dependencyJob.instantiated = resolvedPromise;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  async run() {\x0d\n    await this.instantiate();\x0d\n    const timeout = -1;\x0d\n    const breakOnSigint = false;\x0d\n    try {\x0d\n      await this.module.evaluate(timeout\x2C breakOnSigint);\x0d\n    } catch (e) {\x0d\n      if (e?.name === 'ReferenceError' &&\x0d\n          isCommonJSGlobalLikeNotDefinedError(e.message)) {\x0d\n        e.message += ' in ES module scope';\x0d\n\x0d\n        if (StringPrototypeStartsWith(e.message\x2C 'require ')) {\x0d\n          e.message += '\x2C you can use import instead';\x0d\n        }\x0d\n\x0d\n        const packageConfig =\x0d\n          StringPrototypeStartsWith(this.module.url\x2C 'file://') &&\x0d\n            RegExpPrototypeTest(/\\.js(\\?[^#]*)?(#.*)?$/\x2C this.module.url) &&\x0d\n            require('internal/modules/esm/resolve')\x0d\n              .getPackageScopeConfig(this.module.url);\x0d\n        if (packageConfig.type === 'module') {\x0d\n          e.message +=\x0d\n            '\\nThis file is being treated as an ES module because it has a ' +\x0d\n            `'.js' file extension and '${packageConfig.pjsonPath}' contains ` +\x0d\n            '"type": "module". To treat it as a CommonJS script\x2C rename it ' +\x0d\n            'to use the \\'.cjs\\' file extension.';\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n    return { module: this.module };\x0d\n  }\x0d\n}\x0d\nObjectSetPrototypeOf(ModuleJob.prototype\x2C null);\x0d\nmodule.exports = ModuleJob;\x0d\n
code-source-info,0x36339d262ee,116,0,8465,C0O0C4O8465,,
code-creation,Function,10,169480,0x36339d267e6,343, node:internal/modules/esm/module_job:1:1,0x36339d26268,~
code-source-info,0x36339d267e6,116,0,8465,C0O0C88O28C94O51C100O73C106O96C112O119C117O141C123O158C128O183C134O198C139O217C145O243C151O260C157O284C163O306C169O318C175O346C181O371C187O398C193O423C199O494C205O494C210O479C216O560C222O560C227O537C233O625C239O625C244O598C250O690C256O690C260O690C262O743C265O743C267O777C269O777C271O820C272O820C274O852C278O852C280O977C284O977C323O8417C330O8386C335O8436C337O8451C342O8464,,
code-creation,Eval,10,169701,0x36339d2843e,5, node:internal/modules/esm/assert:1:1,0x36339d28248,~
script-source,117,node:internal/modules/esm/assert,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectValues\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n} = primordials;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  ERR_IMPORT_ASSERTION_TYPE_FAILED\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_MISSING\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\n// The HTML spec has an implied default type of `'javascript'`.\x0d\nconst kImplicitAssertType = 'javascript';\x0d\n\x0d\n/**\x0d\n * Define a map of module formats to import assertion types (the value of\x0d\n * `type` in `assert { type: 'json' }`).\x0d\n * @type {Map<string\x2C string>}\x0d\n */\x0d\nconst formatTypeMap = {\x0d\n  '__proto__': null\x2C\x0d\n  'builtin': kImplicitAssertType\x2C\x0d\n  'commonjs': kImplicitAssertType\x2C\x0d\n  'json': 'json'\x2C\x0d\n  'module': kImplicitAssertType\x2C\x0d\n  'wasm': kImplicitAssertType\x2C // It's unclear whether the HTML spec will require an assertion type or not for Wasm; see https://github.com/WebAssembly/esm-integration/issues/42\x0d\n};\x0d\n\x0d\n/**\x0d\n * The HTML spec disallows the default type to be explicitly specified\x0d\n * (for now); so `import './file.js'` is okay but\x0d\n * `import './file.js' assert { type: 'javascript' }` throws.\x0d\n * @type {Array<string\x2C string>}\x0d\n */\x0d\nconst supportedAssertionTypes = ArrayPrototypeFilter(\x0d\n  ObjectValues(formatTypeMap)\x2C\x0d\n  (type) => type !== kImplicitAssertType);\x0d\n\x0d\n\x0d\n/**\x0d\n * Test a module's import assertions.\x0d\n * @param {string} url The URL of the imported module\x2C for error reporting.\x0d\n * @param {string} format One of Node's supported translators\x0d\n * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n *                                                  module import.\x0d\n * @returns {true}\x0d\n * @throws {TypeError} If the format and assertion type are incompatible.\x0d\n */\x0d\nfunction validateAssertions(url\x2C format\x2C\x0d\n                            importAssertions = ObjectCreate(null)) {\x0d\n  const validType = formatTypeMap[format];\x0d\n\x0d\n  switch (validType) {\x0d\n    case undefined:\x0d\n      // Ignore assertions for module formats we don't recognize\x2C to allow new\x0d\n      // formats in the future.\x0d\n      return true;\x0d\n\x0d\n    case kImplicitAssertType:\x0d\n      // This format doesn't allow an import assertion type\x2C so the property\x0d\n      // must not be set on the import assertions object.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        return true;\x0d\n      }\x0d\n      return handleInvalidType(url\x2C importAssertions.type);\x0d\n\x0d\n    case importAssertions.type:\x0d\n      // The asserted type is the valid type for this format.\x0d\n      return true;\x0d\n\x0d\n    default:\x0d\n      // There is an expected type for this format\x2C but the value of\x0d\n      // `importAssertions.type` might not have been it.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        // `type` wasn't specified at all.\x0d\n        throw new ERR_IMPORT_ASSERTION_TYPE_MISSING(url\x2C validType);\x0d\n      }\x0d\n      handleInvalidType(url\x2C importAssertions.type);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Throw the correct error depending on what's wrong with the type assertion.\x0d\n * @param {string} url The resolved URL for the module to be imported\x0d\n * @param {string} type The value of the import assertion `type` property\x0d\n */\x0d\nfunction handleInvalidType(url\x2C type) {\x0d\n  // `type` might have not been a string.\x0d\n  validateString(type\x2C 'type');\x0d\n\x0d\n  // `type` might not have been one of the types we understand.\x0d\n  if (!ArrayPrototypeIncludes(supportedAssertionTypes\x2C type)) {\x0d\n    throw new ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED(type);\x0d\n  }\x0d\n\x0d\n  // `type` was the wrong value for this format.\x0d\n  throw new ERR_IMPORT_ASSERTION_TYPE_FAILED(url\x2C type);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  kImplicitAssertType\x2C\x0d\n  validateAssertions\x2C\x0d\n};\x0d\n
code-source-info,0x36339d2843e,117,0,3734,C0O0C4O3734,,
code-creation,Function,10,169868,0x36339d28716,201, node:internal/modules/esm/assert:1:1,0x36339d283b8,~
code-source-info,0x36339d28716,117,0,3734,C0O0C46O28C51O53C57O80C63O97C68O114C74O191C77O191C82O172C88O356C91O356C96O382C101O237C107O274C113O312C119O486C121O486C123O684C130O722C136O758C142O811C148O843C154O684C156O1280C159O1305C169O1280C174O1280C176O3663C183O3685C189O3709C195O3678C200O3733,,
code-creation,LazyCompile,10,169969,0x36339d28d26,9, node:internal/modules/esm/assert:43:3,0x36339d28510,~
code-source-info,0x36339d28d26,117,1337,1375,C0O1352C2O1356C4O1352C8O1375,,
tick,0x7ff7c0879e8d,170161,1,0x7ff7c02ae150,2,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d23702,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,170681,0x36339d2a966,5, node:internal/modules/esm/resolve:1:1,0x36339d2a1a8,~
script-source,118,node:internal/modules/esm/resolve,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyNames\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  realpathSync\x2C\x0d\n  statSync\x2C\x0d\n  Stats\x2C\x0d\n} = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\nconst { sep\x2C relative\x2C resolve } = require('path');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\nconst typeFlag = getOptionValue('--input-type');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\nconst { URL\x2C pathToFileURL\x2C fileURLToPath } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INPUT_TYPE_NOT_ALLOWED\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n  ERR_INVALID_PACKAGE_CONFIG\x2C\x0d\n  ERR_INVALID_PACKAGE_TARGET\x2C\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_MODULE_NOT_FOUND\x2C\x0d\n  ERR_PACKAGE_IMPORT_NOT_DEFINED\x2C\x0d\n  ERR_PACKAGE_PATH_NOT_EXPORTED\x2C\x0d\n  ERR_UNSUPPORTED_DIR_IMPORT\x2C\x0d\n  ERR_NETWORK_IMPORT_DISALLOWED\x2C\x0d\n  ERR_UNSUPPORTED_ESM_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { Module: CJSModule } = require('internal/modules/cjs/loader');\x0d\n\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\nconst DEFAULT_CONDITIONS = ObjectFreeze([\x0d\n  'node'\x2C\x0d\n  'import'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nconst DEFAULT_CONDITIONS_SET = new SafeSet(DEFAULT_CONDITIONS);\x0d\n\x0d\n/**\x0d\n * @typedef {string | string[] | Record<string\x2C unknown>} Exports\x0d\n * @typedef {'module' | 'commonjs'} PackageType\x0d\n * @typedef {{\x0d\n *   pjsonPath: string\x2C\x0d\n *   exports?: ExportConfig\x2C\x0d\n *   name?: string\x2C\x0d\n *   main?: string\x2C\x0d\n *   type?: PackageType\x2C\x0d\n * }} PackageConfig\x0d\n */\x0d\n\x0d\nconst emittedPackageWarnings = new SafeSet();\x0d\n\x0d\n/**\x0d\n * @param {string} match\x0d\n * @param {URL} pjsonUrl\x0d\n * @param {boolean} isExports\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitFolderMapDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated folder mapping "${match}" in the ${isExports ?\x0d\n      '"exports"' : '"imports"'} field module resolution of the package at ${\x0d\n      pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` : ''}.\\n` +\x0d\n      `Update this package.json to use a subpath pattern like "${match}*".`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0148'\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction emitTrailingSlashPatternDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  if (!pendingDeprecation) return;\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated trailing slash pattern mapping "${match}" in the ${\x0d\n      isExports ? '"exports"' : '"imports"'} field module resolution of the ` +\x0d\n      `package at ${pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` :\x0d\n        ''}. Mapping specifiers ending in "/" is no longer supported.`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0155'\x0d\n  );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {string} main\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitLegacyIndexDeprecation(url\x2C packageJSONUrl\x2C base\x2C main) {\x0d\n  const format = defaultGetFormatWithoutErrors(url);\x0d\n  if (format !== 'module')\x0d\n    return;\x0d\n  const path = fileURLToPath(url);\x0d\n  const pkgPath = fileURLToPath(new URL('.'\x2C packageJSONUrl));\x0d\n  const basePath = fileURLToPath(base);\x0d\n  if (main)\x0d\n    process.emitWarning(\x0d\n      `Package ${pkgPath} has a "main" field set to ${JSONStringify(main)}\x2C ` +\x0d\n      `excluding the full filename and extension to the resolved file at "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${\x0d\n        basePath}.\\n Automatic extension resolution of the "main" field is ` +\x0d\n      'deprecated for ES modules.'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n  else\x0d\n    process.emitWarning(\x0d\n      `No "main" or "exports" field defined in the package.json for ${pkgPath\x0d\n      } resolving the main entry point "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${basePath\x0d\n      }.\\nDefault "index" lookups for the main are deprecated for ES modules.`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string[]} [conditions]\x0d\n * @returns {Set<string>}\x0d\n */\x0d\nfunction getConditionsSet(conditions) {\x0d\n  if (conditions !== undefined && conditions !== DEFAULT_CONDITIONS) {\x0d\n    if (!ArrayIsArray(conditions)) {\x0d\n      throw new ERR_INVALID_ARG_VALUE('conditions'\x2C conditions\x2C\x0d\n                                      'expected an array');\x0d\n    }\x0d\n    return new SafeSet(conditions);\x0d\n  }\x0d\n  return DEFAULT_CONDITIONS_SET;\x0d\n}\x0d\n\x0d\nconst realpathCache = new SafeMap();\x0d\nconst packageJSONCache = new SafeMap(); /* string -> PackageConfig */\x0d\n\x0d\n/**\x0d\n * @param {string | URL} path\x0d\n * @returns {import('fs').Stats}\x0d\n */\x0d\nconst tryStatSync =\x0d\n  (path) => statSync(path\x2C { throwIfNoEntry: false }) ?? new Stats();\x0d\n\x0d\n/**\x0d\n * @param {string} path\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageConfig(path\x2C specifier\x2C base) {\x0d\n  const existing = packageJSONCache.get(path);\x0d\n  if (existing !== undefined) {\x0d\n    return existing;\x0d\n  }\x0d\n  const source = packageJsonReader.read(path).string;\x0d\n  if (source === undefined) {\x0d\n    const packageConfig = {\x0d\n      pjsonPath: path\x2C\x0d\n      exists: false\x2C\x0d\n      main: undefined\x2C\x0d\n      name: undefined\x2C\x0d\n      type: 'none'\x2C\x0d\n      exports: undefined\x2C\x0d\n      imports: undefined\x2C\x0d\n    };\x0d\n    packageJSONCache.set(path\x2C packageConfig);\x0d\n    return packageConfig;\x0d\n  }\x0d\n\x0d\n  let packageJSON;\x0d\n  try {\x0d\n    packageJSON = JSONParse(source);\x0d\n  } catch (error) {\x0d\n    throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n      path\x2C\x0d\n      (base ? `"${specifier}" from ` : '') + fileURLToPath(base || specifier)\x2C\x0d\n      error.message\x0d\n    );\x0d\n  }\x0d\n\x0d\n  let { imports\x2C main\x2C name\x2C type } = packageJSON;\x0d\n  const { exports } = packageJSON;\x0d\n  if (typeof imports !== 'object' || imports === null) imports = undefined;\x0d\n  if (typeof main !== 'string') main = undefined;\x0d\n  if (typeof name !== 'string') name = undefined;\x0d\n  // Ignore unknown types for forwards compatibility\x0d\n  if (type !== 'module' && type !== 'commonjs') type = 'none';\x0d\n\x0d\n  const packageConfig = {\x0d\n    pjsonPath: path\x2C\x0d\n    exists: true\x2C\x0d\n    main\x2C\x0d\n    name\x2C\x0d\n    type\x2C\x0d\n    exports\x2C\x0d\n    imports\x2C\x0d\n  };\x0d\n  packageJSONCache.set(path\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | string} resolved\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageScopeConfig(resolved) {\x0d\n  let packageJSONUrl = new URL('./package.json'\x2C resolved);\x0d\n  while (true) {\x0d\n    const packageJSONPath = packageJSONUrl.pathname;\x0d\n    if (StringPrototypeEndsWith(packageJSONPath\x2C 'node_modules/package.json'))\x0d\n      break;\x0d\n    const packageConfig = getPackageConfig(fileURLToPath(packageJSONUrl)\x2C\x0d\n                                           resolved);\x0d\n    if (packageConfig.exists) return packageConfig;\x0d\n\x0d\n    const lastPackageJSONUrl = packageJSONUrl;\x0d\n    packageJSONUrl = new URL('../package.json'\x2C packageJSONUrl);\x0d\n\x0d\n    // Terminates at root where ../package.json equals ../../package.json\x0d\n    // (can't just check "/package.json" for Windows support).\x0d\n    if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;\x0d\n  }\x0d\n  const packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  const packageConfig = {\x0d\n    pjsonPath: packageJSONPath\x2C\x0d\n    exists: false\x2C\x0d\n    main: undefined\x2C\x0d\n    name: undefined\x2C\x0d\n    type: 'none'\x2C\x0d\n    exports: undefined\x2C\x0d\n    imports: undefined\x2C\x0d\n  };\x0d\n  packageJSONCache.set(packageJSONPath\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string | URL} url\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction fileExists(url) {\x0d\n  return statSync(url\x2C { throwIfNoEntry: false })?.isFile() ?? false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Legacy CommonJS main resolution:\x0d\n * 1. let M = pkg_url + (json main field)\x0d\n * 2. TRY(M\x2C M.js\x2C M.json\x2C M.node)\x0d\n * 3. TRY(M/index.js\x2C M/index.json\x2C M/index.node)\x0d\n * 4. TRY(pkg_url/index.js\x2C pkg_url/index.json\x2C pkg_url/index.node)\x0d\n * 5. NOT_FOUND\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction legacyMainResolve(packageJSONUrl\x2C packageConfig\x2C base) {\x0d\n  let guess;\x0d\n  if (packageConfig.main !== undefined) {\x0d\n    // Note: fs check redundances will be handled by Descriptor cache here.\x0d\n    if (fileExists(guess = new URL(`./${packageConfig.main}`\x2C\x0d\n                                   packageJSONUrl))) {\x0d\n      return guess;\x0d\n    } else if (fileExists(guess = new URL(`./${packageConfig.main}.js`\x2C\x0d\n                                          packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.js`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else guess = undefined;\x0d\n    if (guess) {\x0d\n      emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C\x0d\n                                 packageConfig.main);\x0d\n      return guess;\x0d\n    }\x0d\n    // Fallthrough.\x0d\n  }\x0d\n  if (fileExists(guess = new URL('./index.js'\x2C packageJSONUrl)));\x0d\n  // So fs.\x0d\n  else if (fileExists(guess = new URL('./index.json'\x2C packageJSONUrl)));\x0d\n  else if (fileExists(guess = new URL('./index.node'\x2C packageJSONUrl)));\x0d\n  else guess = undefined;\x0d\n  if (guess) {\x0d\n    emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C packageConfig.main);\x0d\n    return guess;\x0d\n  }\x0d\n  // Not found.\x0d\n  throw new ERR_MODULE_NOT_FOUND(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensionsWithTryExactName(search) {\x0d\n  if (fileExists(search)) return search;\x0d\n  return resolveExtensions(search);\x0d\n}\x0d\n\x0d\nconst extensions = ['.js'\x2C '.json'\x2C '.node'\x2C '.mjs'];\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensions(search) {\x0d\n  for (let i = 0; i < extensions.length; i++) {\x0d\n    const extension = extensions[i];\x0d\n    const guess = new URL(`${search.pathname}${extension}`\x2C search);\x0d\n    if (fileExists(guess)) return guess;\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveDirectoryEntry(search) {\x0d\n  const dirPath = fileURLToPath(search);\x0d\n  const pkgJsonPath = resolve(dirPath\x2C 'package.json');\x0d\n  if (fileExists(pkgJsonPath)) {\x0d\n    const pkgJson = packageJsonReader.read(pkgJsonPath);\x0d\n    if (pkgJson.containsKeys) {\x0d\n      const { main } = JSONParse(pkgJson.string);\x0d\n      if (main != null) {\x0d\n        const mainUrl = pathToFileURL(resolve(dirPath\x2C main));\x0d\n        return resolveExtensionsWithTryExactName(mainUrl);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return resolveExtensions(new URL('index'\x2C search));\x0d\n}\x0d\n\x0d\nconst encodedSepRegEx = /%2F|%5C/i;\x0d\nlet experimentalSpecifierResolutionWarned = false;\x0d\n/**\x0d\n * @param {URL} resolved\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction finalizeResolution(resolved\x2C base\x2C preserveSymlinks) {\x0d\n  if (RegExpPrototypeTest(encodedSepRegEx\x2C resolved.pathname))\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved.pathname\x2C 'must not include encoded "/" or "\\\\" characters'\x2C\x0d\n      fileURLToPath(base));\x0d\n\x0d\n  let path = fileURLToPath(resolved);\x0d\n  if (getOptionValue('--experimental-specifier-resolution') === 'node') {\x0d\n    if (!experimentalSpecifierResolutionWarned) {\x0d\n      process.emitWarning(\x0d\n        'The Node.js specifier resolution flag is experimental. It could change or be removed at any time.'\x2C\x0d\n        'ExperimentalWarning');\x0d\n      experimentalSpecifierResolutionWarned = true;\x0d\n    }\x0d\n\x0d\n    let file = resolveExtensionsWithTryExactName(resolved);\x0d\n\x0d\n    // Directory\x0d\n    if (file === undefined) {\x0d\n      file = StringPrototypeEndsWith(path\x2C '/') ?\x0d\n        (resolveDirectoryEntry(resolved) || resolved) : resolveDirectoryEntry(new URL(`${resolved}/`));\x0d\n\x0d\n      if (file === resolved) return file;\x0d\n\x0d\n      if (file === undefined) {\x0d\n        throw new ERR_MODULE_NOT_FOUND(\x0d\n          resolved.pathname\x2C fileURLToPath(base)\x2C 'module');\x0d\n      }\x0d\n    }\x0d\n\x0d\n    path = file;\x0d\n  }\x0d\n\x0d\n  const stats = tryStatSync(StringPrototypeEndsWith(path\x2C '/') ?\x0d\n    StringPrototypeSlice(path\x2C -1) : path);\x0d\n  if (stats.isDirectory()) {\x0d\n    const err = new ERR_UNSUPPORTED_DIR_IMPORT(path\x2C fileURLToPath(base));\x0d\n    err.url = String(resolved);\x0d\n    throw err;\x0d\n  } else if (!stats.isFile()) {\x0d\n    throw new ERR_MODULE_NOT_FOUND(\x0d\n      path || resolved.pathname\x2C base && fileURLToPath(base)\x2C 'module');\x0d\n  }\x0d\n\x0d\n  if (!preserveSymlinks) {\x0d\n    const real = realpathSync(path\x2C {\x0d\n      [internalFS.realpathCacheKey]: realpathCache\x0d\n    });\x0d\n    const { search\x2C hash } = resolved;\x0d\n    resolved =\x0d\n        pathToFileURL(real + (StringPrototypeEndsWith(path\x2C sep) ? '/' : ''));\x0d\n    resolved.search = search;\x0d\n    resolved.hash = hash;\x0d\n  }\x0d\n\x0d\n  return resolved;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwImportNotDefined(specifier\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(\x0d\n    specifier\x2C packageJSONUrl && fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C\x0d\n    fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwExportsNotFound(subpath\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_PATH_NOT_EXPORTED(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C\x0d\n    base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string | URL} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {boolean} internal\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwInvalidSubpath(subpath\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  const reason = `request is not a valid subpath for the "${internal ?\x0d\n    'imports' : 'exports'}" resolution of ${fileURLToPath(packageJSONUrl)}`;\x0d\n  throw new ERR_INVALID_MODULE_SPECIFIER(subpath\x2C reason\x2C\x0d\n                                         base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nfunction throwInvalidPackageTarget(\x0d\n  subpath\x2C target\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  if (typeof target === 'object' && target !== null) {\x0d\n    target = JSONStringify(target\x2C null\x2C '');\x0d\n  } else {\x0d\n    target = `${target}`;\x0d\n  }\x0d\n  throw new ERR_INVALID_PACKAGE_TARGET(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C target\x2C\x0d\n    internal\x2C base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nconst invalidSegmentRegEx = /(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)/i;\x0d\nconst invalidPackageNameRegEx = /^\\.|%|\\\\/;\x0d\nconst patternRegEx = /\\*/g;\x0d\n\x0d\nfunction resolvePackageTargetString(\x0d\n  target\x2C subpath\x2C match\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C conditions) {\x0d\n\x0d\n  if (subpath !== '' && !pattern && target[target.length - 1] !== '/')\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (!StringPrototypeStartsWith(target\x2C './')) {\x0d\n    if (internal && !StringPrototypeStartsWith(target\x2C '../') &&\x0d\n        !StringPrototypeStartsWith(target\x2C '/')) {\x0d\n      let isURL = false;\x0d\n      try {\x0d\n        new URL(target);\x0d\n        isURL = true;\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      if (!isURL) {\x0d\n        const exportTarget = pattern ?\x0d\n          RegExpPrototypeSymbolReplace(patternRegEx\x2C target\x2C () => subpath) :\x0d\n          target + subpath;\x0d\n        return packageResolve(\x0d\n          exportTarget\x2C packageJSONUrl\x2C conditions);\x0d\n      }\x0d\n    }\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n  }\x0d\n\x0d\n  if (RegExpPrototypeTest(invalidSegmentRegEx\x2C StringPrototypeSlice(target\x2C 2)))\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  const resolved = new URL(target\x2C packageJSONUrl);\x0d\n  const resolvedPath = resolved.pathname;\x0d\n  const packagePath = new URL('.'\x2C packageJSONUrl).pathname;\x0d\n\x0d\n  if (!StringPrototypeStartsWith(resolvedPath\x2C packagePath))\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (subpath === '') return resolved;\x0d\n\x0d\n  if (RegExpPrototypeTest(invalidSegmentRegEx\x2C subpath))\x0d\n    throwInvalidSubpath(match + subpath\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (pattern) {\x0d\n    return new URL(\x0d\n      RegExpPrototypeSymbolReplace(\x0d\n        patternRegEx\x2C\x0d\n        resolved.href\x2C\x0d\n        () => subpath\x0d\n      )\x0d\n    );\x0d\n  }\x0d\n\x0d\n  return new URL(subpath\x2C resolved);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} key\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isArrayIndex(key) {\x0d\n  const keyNum = +key;\x0d\n  if (`${keyNum}` !== key) return false;\x0d\n  return keyNum >= 0 && keyNum < 0xFFFF_FFFF;\x0d\n}\x0d\n\x0d\nfunction resolvePackageTarget(packageJSONUrl\x2C target\x2C subpath\x2C packageSubpath\x2C\x0d\n                              base\x2C pattern\x2C internal\x2C conditions) {\x0d\n  if (typeof target === 'string') {\x0d\n    return resolvePackageTargetString(\x0d\n      target\x2C subpath\x2C packageSubpath\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C\x0d\n      conditions);\x0d\n  } else if (ArrayIsArray(target)) {\x0d\n    if (target.length === 0) {\x0d\n      return null;\x0d\n    }\x0d\n\x0d\n    let lastException;\x0d\n    for (let i = 0; i < target.length; i++) {\x0d\n      const targetItem = target[i];\x0d\n      let resolveResult;\x0d\n      try {\x0d\n        resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C targetItem\x2C subpath\x2C packageSubpath\x2C base\x2C pattern\x2C\x0d\n          internal\x2C conditions);\x0d\n      } catch (e) {\x0d\n        lastException = e;\x0d\n        if (e.code === 'ERR_INVALID_PACKAGE_TARGET') {\x0d\n          continue;\x0d\n        }\x0d\n        throw e;\x0d\n      }\x0d\n      if (resolveResult === undefined) {\x0d\n        continue;\x0d\n      }\x0d\n      if (resolveResult === null) {\x0d\n        lastException = null;\x0d\n        continue;\x0d\n      }\x0d\n      return resolveResult;\x0d\n    }\x0d\n    if (lastException === undefined || lastException === null)\x0d\n      return lastException;\x0d\n    throw lastException;\x0d\n  } else if (typeof target === 'object' && target !== null) {\x0d\n    const keys = ObjectGetOwnPropertyNames(target);\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (isArrayIndex(key)) {\x0d\n        throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n          fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n          '"exports" cannot contain numeric property keys.');\x0d\n      }\x0d\n    }\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (key === 'default' || conditions.has(key)) {\x0d\n        const conditionalTarget = target[key];\x0d\n        const resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C conditionalTarget\x2C subpath\x2C packageSubpath\x2C base\x2C\x0d\n          pattern\x2C internal\x2C conditions);\x0d\n        if (resolveResult === undefined)\x0d\n          continue;\x0d\n        return resolveResult;\x0d\n      }\x0d\n    }\x0d\n    return undefined;\x0d\n  } else if (target === null) {\x0d\n    return null;\x0d\n  }\x0d\n  throwInvalidPackageTarget(packageSubpath\x2C target\x2C packageJSONUrl\x2C internal\x2C\x0d\n                            base);\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {Exports} exports\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base) {\x0d\n  if (typeof exports === 'string' || ArrayIsArray(exports)) return true;\x0d\n  if (typeof exports !== 'object' || exports === null) return false;\x0d\n\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  let isConditionalSugar = false;\x0d\n  let i = 0;\x0d\n  for (let j = 0; j < keys.length; j++) {\x0d\n    const key = keys[j];\x0d\n    const curIsConditionalSugar = key === '' || key[0] !== '.';\x0d\n    if (i++ === 0) {\x0d\n      isConditionalSugar = curIsConditionalSugar;\x0d\n    } else if (isConditionalSugar !== curIsConditionalSugar) {\x0d\n      throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n        fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n        '"exports" cannot contain some keys starting with \\'.\\' and some not.' +\x0d\n        ' The exports object must either be an object of package subpath keys' +\x0d\n        ' or an object of main entry condition name keys only.');\x0d\n    }\x0d\n  }\x0d\n  return isConditionalSugar;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string} packageSubpath\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageExportsResolve(\x0d\n  packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions) {\x0d\n  let exports = packageConfig.exports;\x0d\n  if (isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base))\x0d\n    exports = { '.': exports };\x0d\n\x0d\n  if (ObjectPrototypeHasOwnProperty(exports\x2C packageSubpath) &&\x0d\n      !StringPrototypeIncludes(packageSubpath\x2C '*') &&\x0d\n      !StringPrototypeEndsWith(packageSubpath\x2C '/')) {\x0d\n    const target = exports[packageSubpath];\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C target\x2C ''\x2C packageSubpath\x2C base\x2C false\x2C false\x2C conditions\x0d\n    );\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: true };\x0d\n  }\x0d\n\x0d\n  let bestMatch = '';\x0d\n  let bestMatchSubpath;\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    const key = keys[i];\x0d\n    const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n    if (patternIndex !== -1 &&\x0d\n        StringPrototypeStartsWith(packageSubpath\x2C\x0d\n                                  StringPrototypeSlice(key\x2C 0\x2C patternIndex))) {\x0d\n      if (StringPrototypeEndsWith(packageSubpath\x2C '/'))\x0d\n        emitTrailingSlashPatternDeprecation(packageSubpath\x2C packageJSONUrl\x2C\x0d\n                                            true\x2C base);\x0d\n      const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n      if (packageSubpath.length >= key.length &&\x0d\n          StringPrototypeEndsWith(packageSubpath\x2C patternTrailer) &&\x0d\n          patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n          StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n        bestMatch = key;\x0d\n        bestMatchSubpath = StringPrototypeSlice(\x0d\n          packageSubpath\x2C patternIndex\x2C\x0d\n          packageSubpath.length - patternTrailer.length);\x0d\n      }\x0d\n    } else if (key[key.length - 1] === '/' &&\x0d\n      StringPrototypeStartsWith(packageSubpath\x2C key) &&\x0d\n      patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n      bestMatch = key;\x0d\n      bestMatchSubpath = StringPrototypeSlice(packageSubpath\x2C key.length);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (bestMatch) {\x0d\n    const target = exports[bestMatch];\x0d\n    const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C\x0d\n      target\x2C\x0d\n      bestMatchSubpath\x2C\x0d\n      bestMatch\x2C\x0d\n      base\x2C\x0d\n      pattern\x2C\x0d\n      false\x2C\x0d\n      conditions);\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    if (!pattern) {\x0d\n      emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C true\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: pattern };\x0d\n  }\x0d\n\x0d\n  throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\nfunction patternKeyCompare(a\x2C b) {\x0d\n  const aPatternIndex = StringPrototypeIndexOf(a\x2C '*');\x0d\n  const bPatternIndex = StringPrototypeIndexOf(b\x2C '*');\x0d\n  const baseLenA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;\x0d\n  const baseLenB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;\x0d\n  if (baseLenA > baseLenB) return -1;\x0d\n  if (baseLenB > baseLenA) return 1;\x0d\n  if (aPatternIndex === -1) return 1;\x0d\n  if (bPatternIndex === -1) return -1;\x0d\n  if (a.length > b.length) return -1;\x0d\n  if (b.length > a.length) return 1;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} name\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageImportsResolve(name\x2C base\x2C conditions) {\x0d\n  if (name === '#' || StringPrototypeStartsWith(name\x2C '#/')) {\x0d\n    const reason = 'is not a valid internal imports specifier name';\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(name\x2C reason\x2C fileURLToPath(base));\x0d\n  }\x0d\n  let packageJSONUrl;\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    const imports = packageConfig.imports;\x0d\n    if (imports) {\x0d\n      if (ObjectPrototypeHasOwnProperty(imports\x2C name) &&\x0d\n          !StringPrototypeIncludes(name\x2C '*') &&\x0d\n          !StringPrototypeEndsWith(name\x2C '/')) {\x0d\n        const resolved = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C imports[name]\x2C ''\x2C name\x2C base\x2C false\x2C true\x2C conditions\x0d\n        );\x0d\n        if (resolved != null) {\x0d\n          return { resolved\x2C exact: true };\x0d\n        }\x0d\n      } else {\x0d\n        let bestMatch = '';\x0d\n        let bestMatchSubpath;\x0d\n        const keys = ObjectGetOwnPropertyNames(imports);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n          if (patternIndex !== -1 &&\x0d\n              StringPrototypeStartsWith(name\x2C\x0d\n                                        StringPrototypeSlice(key\x2C 0\x2C\x0d\n                                                             patternIndex))) {\x0d\n            const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n            if (name.length >= key.length &&\x0d\n                StringPrototypeEndsWith(name\x2C patternTrailer) &&\x0d\n                patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n                StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n              bestMatch = key;\x0d\n              bestMatchSubpath = StringPrototypeSlice(\x0d\n                name\x2C patternIndex\x2C name.length - patternTrailer.length);\x0d\n            }\x0d\n          } else if (key[key.length - 1] === '/' &&\x0d\n            StringPrototypeStartsWith(name\x2C key) &&\x0d\n            patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n            bestMatch = key;\x0d\n            bestMatchSubpath = StringPrototypeSlice(name\x2C key.length);\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (bestMatch) {\x0d\n          const target = imports[bestMatch];\x0d\n          const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n          const resolved = resolvePackageTarget(\x0d\n            packageJSONUrl\x2C target\x2C\x0d\n            bestMatchSubpath\x2C bestMatch\x2C\x0d\n            base\x2C pattern\x2C true\x2C\x0d\n            conditions);\x0d\n          if (resolved !== null) {\x0d\n            if (!pattern)\x0d\n              emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C false\x2C base);\x0d\n            return { resolved\x2C exact: pattern };\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  throwImportNotDefined(name\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @returns {PackageType}\x0d\n */\x0d\nfunction getPackageType(url) {\x0d\n  const packageConfig = getPackageScopeConfig(url);\x0d\n  return packageConfig.type;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {{ packageName: string\x2C packageSubpath: string\x2C isScoped: boolean }}\x0d\n */\x0d\nfunction parsePackageName(specifier\x2C base) {\x0d\n  let separatorIndex = StringPrototypeIndexOf(specifier\x2C '/');\x0d\n  let validPackageName = true;\x0d\n  let isScoped = false;\x0d\n  if (specifier[0] === '@') {\x0d\n    isScoped = true;\x0d\n    if (separatorIndex === -1 || specifier.length === 0) {\x0d\n      validPackageName = false;\x0d\n    } else {\x0d\n      separatorIndex = StringPrototypeIndexOf(\x0d\n        specifier\x2C '/'\x2C separatorIndex + 1);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const packageName = separatorIndex === -1 ?\x0d\n    specifier : StringPrototypeSlice(specifier\x2C 0\x2C separatorIndex);\x0d\n\x0d\n  // Package name cannot have leading . and cannot have percent-encoding or\x0d\n  // \\\\ separators.\x0d\n  if (RegExpPrototypeExec(invalidPackageNameRegEx\x2C packageName) !== null)\x0d\n    validPackageName = false;\x0d\n\x0d\n  if (!validPackageName) {\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      specifier\x2C 'is not a valid package name'\x2C fileURLToPath(base));\x0d\n  }\x0d\n\x0d\n  const packageSubpath = '.' + (separatorIndex === -1 ? '' :\x0d\n    StringPrototypeSlice(specifier\x2C separatorIndex));\x0d\n\x0d\n  return { packageName\x2C packageSubpath\x2C isScoped };\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageResolve(specifier\x2C base\x2C conditions) {\x0d\n  if (NativeModule.canBeRequiredByUsers(specifier))\x0d\n    return new URL('node:' + specifier);\x0d\n\x0d\n  const { packageName\x2C packageSubpath\x2C isScoped } =\x0d\n    parsePackageName(specifier\x2C base);\x0d\n\x0d\n  // ResolveSelf\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    const packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    if (packageConfig.name === packageName &&\x0d\n        packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let packageJSONUrl =\x0d\n    new URL('./node_modules/' + packageName + '/package.json'\x2C base);\x0d\n  let packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  let lastPath;\x0d\n  do {\x0d\n    const stat = tryStatSync(StringPrototypeSlice(packageJSONPath\x2C 0\x2C\x0d\n                                                  packageJSONPath.length - 13));\x0d\n    if (!stat.isDirectory()) {\x0d\n      lastPath = packageJSONPath;\x0d\n      packageJSONUrl = new URL((isScoped ?\x0d\n        '../../../../node_modules/' : '../../../node_modules/') +\x0d\n        packageName + '/package.json'\x2C packageJSONUrl);\x0d\n      packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Package match.\x0d\n    const packageConfig = getPackageConfig(packageJSONPath\x2C specifier\x2C base);\x0d\n    if (packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n\x0d\n    if (packageSubpath === '.') {\x0d\n      return legacyMainResolve(\x0d\n        packageJSONUrl\x2C\x0d\n        packageConfig\x2C\x0d\n        base\x0d\n      );\x0d\n    }\x0d\n\x0d\n    return new URL(packageSubpath\x2C packageJSONUrl);\x0d\n    // Cross-platform root check.\x0d\n  } while (packageJSONPath.length !== lastPath.length);\x0d\n\x0d\n  // eslint can't handle the above code.\x0d\n  // eslint-disable-next-line no-unreachable\x0d\n  throw new ERR_MODULE_NOT_FOUND(packageName\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isBareSpecifier(specifier) {\x0d\n  return specifier[0] && specifier[0] !== '/' && specifier[0] !== '.';\x0d\n}\x0d\n\x0d\nfunction isRelativeSpecifier(specifier) {\x0d\n  if (specifier[0] === '.') {\x0d\n    if (specifier.length === 1 || specifier[1] === '/') return true;\x0d\n    if (specifier[1] === '.') {\x0d\n      if (specifier.length === 2 || specifier[2] === '/') return true;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {\x0d\n  if (specifier === '') return false;\x0d\n  if (specifier[0] === '/') return true;\x0d\n  return isRelativeSpecifier(specifier);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction moduleResolve(specifier\x2C base\x2C conditions\x2C preserveSymlinks) {\x0d\n  const isRemote = base.protocol === 'http:' ||\x0d\n    base.protocol === 'https:';\x0d\n  // Order swapped from spec for minor perf gain.\x0d\n  // Ok since relative URLs cannot parse as URLs.\x0d\n  let resolved;\x0d\n  if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n    resolved = new URL(specifier\x2C base);\x0d\n  } else if (!isRemote && specifier[0] === '#') {\x0d\n    ({ resolved } = packageImportsResolve(specifier\x2C base\x2C conditions));\x0d\n  } else {\x0d\n    try {\x0d\n      resolved = new URL(specifier);\x0d\n    } catch {\x0d\n      if (!isRemote) {\x0d\n        resolved = packageResolve(specifier\x2C base\x2C conditions);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (resolved.protocol !== 'file:')\x0d\n    return resolved;\x0d\n  return finalizeResolution(resolved\x2C base\x2C preserveSymlinks);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Try to resolve an import as a CommonJS module\x0d\n * @param {string} specifier\x0d\n * @param {string} parentURL\x0d\n * @returns {boolean|string}\x0d\n */\x0d\nfunction resolveAsCommonJS(specifier\x2C parentURL) {\x0d\n  try {\x0d\n    const parent = fileURLToPath(parentURL);\x0d\n    const tmpModule = new CJSModule(parent\x2C null);\x0d\n    tmpModule.paths = CJSModule._nodeModulePaths(parent);\x0d\n\x0d\n    let found = CJSModule._resolveFilename(specifier\x2C tmpModule\x2C false);\x0d\n\x0d\n    // If it is a relative specifier return the relative path\x0d\n    // to the parent\x0d\n    if (isRelativeSpecifier(specifier)) {\x0d\n      found = relative(parent\x2C found);\x0d\n      // Add '.separator if the path does not start with '..separator'\x0d\n      // This should be a safe assumption because when loading\x0d\n      // esm modules there should be always a file specified so\x0d\n      // there should not be a specifier like '..' or '.'\x0d\n      if (!StringPrototypeStartsWith(found\x2C `..${sep}`)) {\x0d\n        found = `.${sep}${found}`;\x0d\n      }\x0d\n    } else if (isBareSpecifier(specifier)) {\x0d\n      // If it is a bare specifier return the relative path within the\x0d\n      // module\x0d\n      const pkg = StringPrototypeSplit(specifier\x2C '/')[0];\x0d\n      const index = StringPrototypeIndexOf(found\x2C pkg);\x0d\n      if (index !== -1) {\x0d\n        found = StringPrototypeSlice(found\x2C index);\x0d\n      }\x0d\n    }\x0d\n    // Normalize the path separator to give a valid suggestion\x0d\n    // on Windows\x0d\n    if (process.platform === 'win32') {\x0d\n      found = RegExpPrototypeSymbolReplace(new RegExp(`\\\\${sep}`\x2C 'g')\x2C\x0d\n                                           found\x2C '/');\x0d\n    }\x0d\n    return found;\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n}\x0d\n\x0d\n// TODO(@JakobJingleheimer): de-dupe `specifier` & `parsed`\x0d\nfunction checkIfDisallowedImport(specifier\x2C parsed\x2C parsedParentURL) {\x0d\n  if (parsedParentURL) {\x0d\n    const parentURL = fileURLToPath(parsedParentURL?.href);\x0d\n\x0d\n    if (\x0d\n      parsedParentURL.protocol === 'http:' ||\x0d\n      parsedParentURL.protocol === 'https:'\x0d\n    ) {\x0d\n      if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n        // data: and blob: disallowed due to allowing file: access via\x0d\n        // indirection\x0d\n        if (parsed &&\x0d\n          parsed.protocol !== 'https:' &&\x0d\n          parsed.protocol !== 'http:'\x0d\n        ) {\x0d\n          throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n            specifier\x2C\x0d\n            parentURL\x2C\x0d\n            'remote imports cannot import from a local location.'\x0d\n          );\x0d\n        }\x0d\n\x0d\n        return { url: parsed.href };\x0d\n      }\x0d\n      if (NativeModule.canBeRequiredByUsers(specifier)) {\x0d\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n          specifier\x2C\x0d\n          parentURL\x2C\x0d\n          'remote imports cannot import from a local location.'\x0d\n        );\x0d\n      }\x0d\n\x0d\n      throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n        specifier\x2C\x0d\n        parentURL\x2C\x0d\n        'only relative and absolute specifiers are supported.'\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction throwIfUnsupportedURLProtocol(url) {\x0d\n  if (url.protocol !== 'file:' && url.protocol !== 'data:' &&\x0d\n      url.protocol !== 'node:') {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(url);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction throwIfUnsupportedURLScheme(parsed\x2C experimentalNetworkImports) {\x0d\n  if (\x0d\n    parsed &&\x0d\n    parsed.protocol !== 'file:' &&\x0d\n    parsed.protocol !== 'data:' &&\x0d\n    (\x0d\n      !experimentalNetworkImports ||\x0d\n      (\x0d\n        parsed.protocol !== 'https:' &&\x0d\n        parsed.protocol !== 'http:'\x0d\n      )\x0d\n    )\x0d\n  ) {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed\x2C ArrayPrototypeConcat(\x0d\n      'file'\x2C\x0d\n      'data'\x2C\x0d\n      experimentalNetworkImports ? ['https'\x2C 'http'] : []\x2C\x0d\n    ));\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function defaultResolve(specifier\x2C context = {}\x2C defaultResolveUnused) {\x0d\n  let { parentURL\x2C conditions } = context;\x0d\n  if (parentURL && policy?.manifest) {\x0d\n    const redirects = policy.manifest.getDependencyMapper(parentURL);\x0d\n    if (redirects) {\x0d\n      const { resolve\x2C reaction } = redirects;\x0d\n      const destination = resolve(specifier\x2C new SafeSet(conditions));\x0d\n      let missing = true;\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        return { url: href };\x0d\n      }\x0d\n      if (missing) {\x0d\n        // Prevent network requests from firing if resolution would be banned.\x0d\n        // Network requests can extract data by doing things like putting\x0d\n        // secrets in query params\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          parentURL\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C '))\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let parsedParentURL;\x0d\n  if (parentURL) {\x0d\n    try {\x0d\n      parsedParentURL = new URL(parentURL);\x0d\n    } catch {\x0d\n      // Ignore exception\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let parsed;\x0d\n  try {\x0d\n    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n      parsed = new URL(specifier\x2C parsedParentURL);\x0d\n    } else {\x0d\n      parsed = new URL(specifier);\x0d\n    }\x0d\n\x0d\n    if (parsed.protocol === 'data:' ||\x0d\n      (experimentalNetworkImports &&\x0d\n        (\x0d\n          parsed.protocol === 'https:' ||\x0d\n          parsed.protocol === 'http:'\x0d\n        )\x0d\n      )\x0d\n    ) {\x0d\n      return { url: parsed.href };\x0d\n    }\x0d\n  } catch {\x0d\n    // Ignore exception\x0d\n  }\x0d\n\x0d\n  // There are multiple deep branches that can either throw or return; instead\x0d\n  // of duplicating that deeply nested logic for the possible returns\x2C DRY and\x0d\n  // check for a return. This seems the least gnarly.\x0d\n  const maybeReturn = checkIfDisallowedImport(\x0d\n    specifier\x2C\x0d\n    parsed\x2C\x0d\n    parsedParentURL\x2C\x0d\n  );\x0d\n\x0d\n  if (maybeReturn) return maybeReturn;\x0d\n\x0d\n  // This must come after checkIfDisallowedImport\x0d\n  if (parsed && parsed.protocol === 'node:') return { url: specifier };\x0d\n\x0d\n  throwIfUnsupportedURLScheme(parsed\x2C experimentalNetworkImports);\x0d\n\x0d\n  const isMain = parentURL === undefined;\x0d\n  if (isMain) {\x0d\n    parentURL = pathToFileURL(`${process.cwd()}/`).href;\x0d\n\x0d\n    // This is the initial entry point to the program\x2C and --input-type has\x0d\n    // been passed as an option; but --input-type can only be used with\x0d\n    // --eval\x2C --print or STDIN string input. It is not allowed with file\x0d\n    // input\x2C to avoid user confusion over how expansive the effect of the\x0d\n    // flag should be (i.e. entry point only\x2C package scope surrounding the\x0d\n    // entry point\x2C etc.).\x0d\n    if (typeFlag) throw new ERR_INPUT_TYPE_NOT_ALLOWED();\x0d\n  }\x0d\n\x0d\n  conditions = getConditionsSet(conditions);\x0d\n  let url;\x0d\n  try {\x0d\n    url = moduleResolve(specifier\x2C parentURL\x2C conditions\x2C\x0d\n                        isMain ? preserveSymlinksMain : preserveSymlinks);\x0d\n  } catch (error) {\x0d\n    // Try to give the user a hint of what would have been the\x0d\n    // resolved CommonJS module\x0d\n    if (error.code === 'ERR_MODULE_NOT_FOUND' ||\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT') {\x0d\n      if (StringPrototypeStartsWith(specifier\x2C 'file://')) {\x0d\n        specifier = fileURLToPath(specifier);\x0d\n      }\x0d\n      const found = resolveAsCommonJS(specifier\x2C parentURL);\x0d\n      if (found) {\x0d\n        // Modify the stack and message string to include the hint\x0d\n        const lines = StringPrototypeSplit(error.stack\x2C '\\n');\x0d\n        const hint = `Did you mean to import ${found}?`;\x0d\n        error.stack =\x0d\n          ArrayPrototypeShift(lines) + '\\n' +\x0d\n          hint + '\\n' +\x0d\n          ArrayPrototypeJoin(lines\x2C '\\n');\x0d\n        error.message += `\\n${hint}`;\x0d\n      }\x0d\n    }\x0d\n    throw error;\x0d\n  }\x0d\n\x0d\n  throwIfUnsupportedURLProtocol(url);\x0d\n\x0d\n  return {\x0d\n    // Do NOT cast `url` to a string: that will work even when there are real\x0d\n    // problems\x2C silencing them\x0d\n    url: url.href\x2C\x0d\n    format: defaultGetFormatWithoutErrors(url\x2C context)\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n  defaultResolve\x2C\x0d\n  encodedSepRegEx\x2C\x0d\n  getPackageScopeConfig\x2C\x0d\n  getPackageType\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x2C\x0d\n};\x0d\n\x0d\n// cycle\x0d\nconst {\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n} = require('internal/modules/esm/get_format');\x0d\n\x0d\nif (policy) {\x0d\n  const $defaultResolve = defaultResolve;\x0d\n  module.exports.defaultResolve = async function defaultResolve(\x0d\n    specifier\x2C\x0d\n    context\x0d\n  ) {\x0d\n    const ret = await $defaultResolve(specifier\x2C context\x2C $defaultResolve);\x0d\n    // This is a preflight check to avoid data exfiltration by query params etc.\x0d\n    policy.manifest.mightAllow(ret.url\x2C () =>\x0d\n      new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n        context.parentURL\x2C\x0d\n        specifier\x2C\x0d\n        context.conditions\x0d\n      )\x0d\n    );\x0d\n    return ret;\x0d\n  };\x0d\n}\x0d\n
code-source-info,0x36339d2a966,118,0,42310,C0O0C4O42310,,
code-creation,Function,10,172452,0x36339d2ba96,1191, node:internal/modules/esm/resolve:1:1,0x36339d2a8e0,~
code-source-info,0x36339d2ba
tick,0x7ff7c11dbdbf,172593,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d23702,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,172824,0x36339d2f556,5, node:internal/modules/esm/get_format:1:1,0x36339d2f2d0,~
script-source,119,node:internal/modules/esm/get_format,'use strict';\x0d\nconst {\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n} = primordials;\x0d\nconst { basename\x2C extname\x2C relative } = require('path');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { fetchModule } = require('internal/modules/esm/fetch_module');\x0d\nconst {\x0d\n  extensionFormatMap\x2C\x0d\n  getLegacyExtensionFormat\x2C\x0d\n  mimeToFormat\x2C\x0d\n} = require('internal/modules/esm/formats');\x0d\n\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\nconst experimentalSpecifierResolution =\x0d\n  getOptionValue('--experimental-specifier-resolution');\x0d\nconst { getPackageType\x2C getPackageScopeConfig } = require('internal/modules/esm/resolve');\x0d\nconst { URL\x2C fileURLToPath } = require('internal/url');\x0d\nconst { ERR_UNKNOWN_FILE_EXTENSION } = require('internal/errors').codes;\x0d\n\x0d\nconst protocolHandlers = ObjectAssign(ObjectCreate(null)\x2C {\x0d\n  'data:': getDataProtocolModuleFormat\x2C\x0d\n  'file:': getFileProtocolModuleFormat\x2C\x0d\n  'http:': getHttpProtocolModuleFormat\x2C\x0d\n  'https:': getHttpProtocolModuleFormat\x2C\x0d\n  'node:'() { return 'builtin'; }\x2C\x0d\n});\x0d\n\x0d\nfunction getDataProtocolModuleFormat(parsed) {\x0d\n  const { 1: mime } = RegExpPrototypeExec(\x0d\n    /^([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n    parsed.pathname\x2C\x0d\n  ) || [ null\x2C null\x2C null ];\x0d\n\x0d\n  return mimeToFormat(mime);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @param {boolean} ignoreErrors\x0d\n * @returns {string}\x0d\n */\x0d\nfunction getFileProtocolModuleFormat(url\x2C context\x2C ignoreErrors) {\x0d\n  const filepath = fileURLToPath(url);\x0d\n  const ext = extname(filepath);\x0d\n  if (ext === '.js') {\x0d\n    return getPackageType(url) === 'module' ? 'module' : 'commonjs';\x0d\n  }\x0d\n\x0d\n  const format = extensionFormatMap[ext];\x0d\n  if (format) return format;\x0d\n\x0d\n  if (experimentalSpecifierResolution !== 'node') {\x0d\n    // Explicit undefined return indicates load hook should rerun format check\x0d\n    if (ignoreErrors) return undefined;\x0d\n    let suggestion = '';\x0d\n    if (getPackageType(url) === 'module' && ext === '') {\x0d\n      const config = getPackageScopeConfig(url);\x0d\n      const fileBasename = basename(filepath);\x0d\n      const relativePath = StringPrototypeSlice(relative(config.pjsonPath\x2C filepath)\x2C 1);\x0d\n      suggestion = 'Loading extensionless files is not supported inside of ' +\x0d\n        '"type":"module" package.json contexts. The package.json file ' +\x0d\n        `${config.pjsonPath} caused this "type":"module" context. Try ` +\x0d\n        `changing ${filepath} to have a file extension. Note the "bin" ` +\x0d\n        'field of package.json can point to a file with an extension\x2C for example ' +\x0d\n        `{"type":"module"\x2C"bin":{"${fileBasename}":"${relativePath}.js"}}`;\x0d\n    }\x0d\n    throw new ERR_UNKNOWN_FILE_EXTENSION(ext\x2C filepath\x2C suggestion);\x0d\n  }\x0d\n\x0d\n  return getLegacyExtensionFormat(ext) ?? null;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | undefined} only works when enabled\x0d\n */\x0d\nfunction getHttpProtocolModuleFormat(url\x2C context) {\x0d\n  if (experimentalNetworkImports) {\x0d\n    return PromisePrototypeThen(\x0d\n      PromiseResolve(fetchModule(url\x2C context))\x2C\x0d\n      (entry) => {\x0d\n        return mimeToFormat(entry.headers['content-type']);\x0d\n      }\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | URL['href']} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | string | undefined} only works when enabled\x0d\n */\x0d\nfunction defaultGetFormatWithoutErrors(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  if (!ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol))\x0d\n    return null;\x0d\n  return protocolHandlers[parsed.protocol](parsed\x2C context\x2C true);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | URL['href']} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | string | undefined} only works when enabled\x0d\n */\x0d\nfunction defaultGetFormat(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  return ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol) ?\x0d\n    protocolHandlers[parsed.protocol](parsed\x2C context\x2C false) :\x0d\n    null;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultGetFormat\x2C\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n  extensionFormatMap\x2C\x0d\n};\x0d\n
code-source-info,0x36339d2f556,119,0,4260,C0O0C4O4260,,
code-creation,Function,10,173015,0x36339d2f9d6,368, node:internal/modules/esm/get_format:1:1,0x36339d2f4d0,~
code-source-info,0x36339d2f9d6,119,0,4260,C0O0C90O26C95O43C100O60C106O94C112O119C118O138C124O162C130O243C133O243C138O211C144O221C150O230C156O288C159O288C164O269C169O342C172O342C177O326C183O471C186O471C191O400C197O423C203O452C209O553C212O553C216O553C218O647C221O647C225O647C227O753C230O753C235O711C241O727C247O826C250O826C255O803C261O808C267O891C270O891C275O917C280O860C286O953C288O966C300O1000C306O1041C312O1082C318O1124C322O1156C330O953C335O953C337O4158C344O4180C350O4201C356O4235C362O4173C367O4259,,
code-creation,Eval,10,173271,0x36339d30846,5, node:internal/modules/esm/fetch_module:1:1,0x36339d30580,~
script-source,120,node:internal/modules/esm/fetch_module,'use strict';\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst {\x0d\n  Buffer: {\x0d\n    concat: BufferConcat\x0d\n  }\x0d\n} = require('buffer');\x0d\nconst {\x0d\n  ERR_NETWORK_IMPORT_DISALLOWED\x2C\x0d\n  ERR_NETWORK_IMPORT_BAD_RESPONSE\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { URL } = require('internal/url');\x0d\nconst net = require('net');\x0d\n\x0d\n/**\x0d\n * @typedef CacheEntry\x0d\n * @property {Promise<string> | string} resolvedHREF\x0d\n * @property {Record<string\x2C string>} headers\x0d\n * @property {Promise<Buffer> | Buffer} body\x0d\n */\x0d\n\x0d\n/**\x0d\n * Only for GET requests\x2C other requests would need new Map\x0d\n * HTTP cache semantics keep diff caches\x0d\n *\x0d\n * Maps HREF to pending cache entry\x0d\n * @type {Map<string\x2C Promise<CacheEntry> | CacheEntry>}\x0d\n */\x0d\nconst cacheForGET = new SafeMap();\x0d\n\x0d\n// [1] The V8 snapshot doesn't like some C++ APIs to be loaded eagerly. Do it\x0d\n// lazily/at runtime and not top level of an internal module.\x0d\n\x0d\n// [2] Creating a new agent instead of using the gloabl agent improves\x0d\n// performance and precludes the agent becoming tainted.\x0d\n\x0d\nlet HTTPSAgent;\x0d\nfunction HTTPSGet(url\x2C opts) {\x0d\n  const https = require('https'); // [1]\x0d\n  HTTPSAgent ??= new https.Agent({ // [2]\x0d\n    keepAlive: true\x0d\n  });\x0d\n  return https.get(url\x2C {\x0d\n    agent: HTTPSAgent\x2C\x0d\n    ...opts\x0d\n  });\x0d\n}\x0d\n\x0d\nlet HTTPAgent;\x0d\nfunction HTTPGet(url\x2C opts) {\x0d\n  const http = require('http'); // [1]\x0d\n  HTTPAgent ??= new http.Agent({ // [2]\x0d\n    keepAlive: true\x0d\n  });\x0d\n  return http.get(url\x2C {\x0d\n    agent: HTTPAgent\x2C\x0d\n    ...opts\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction dnsLookup(name\x2C opts) {\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  dnsLookup = require('dns/promises').lookup;\x0d\n  return dnsLookup(name\x2C opts);\x0d\n}\x0d\n\x0d\nlet zlib;\x0d\nfunction createBrotliDecompress() {\x0d\n  zlib ??= require('zlib'); // [1]\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  createBrotliDecompress = zlib.createBrotliDecompress;\x0d\n  return createBrotliDecompress();\x0d\n}\x0d\n\x0d\nfunction createUnzip() {\x0d\n  zlib ??= require('zlib'); // [1]\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  createUnzip = zlib.createUnzip;\x0d\n  return createUnzip();\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} parsed\x0d\n * @returns {Promise<CacheEntry> | CacheEntry}\x0d\n */\x0d\nfunction fetchWithRedirects(parsed) {\x0d\n  const existing = cacheForGET.get(parsed.href);\x0d\n  if (existing) {\x0d\n    return existing;\x0d\n  }\x0d\n  const handler = parsed.protocol === 'http:' ? HTTPGet : HTTPSGet;\x0d\n  const result = new Promise((fulfill\x2C reject) => {\x0d\n    const req = handler(parsed\x2C {\x0d\n      headers: {\x0d\n        Accept: '*/*'\x0d\n      }\x0d\n    })\x0d\n    .on('error'\x2C reject)\x0d\n    .on('response'\x2C (res) => {\x0d\n      function dispose() {\x0d\n        req.destroy();\x0d\n        res.destroy();\x0d\n      }\x0d\n      if (res.statusCode >= 300 && res.statusCode <= 303) {\x0d\n        if (res.headers.location) {\x0d\n          dispose();\x0d\n          try {\x0d\n            const location = new URL(res.headers.location\x2C parsed);\x0d\n            if (location.protocol !== 'http:' &&\x0d\n              location.protocol !== 'https:') {\x0d\n              reject(new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n                res.headers.location\x2C\x0d\n                parsed.href\x2C\x0d\n                'cannot redirect to non-network location'));\x0d\n              return;\x0d\n            }\x0d\n            return PromisePrototypeThen(\x0d\n              PromiseResolve(fetchWithRedirects(location))\x2C\x0d\n              (entry) => {\x0d\n                cacheForGET.set(parsed.href\x2C entry);\x0d\n                fulfill(entry);\x0d\n              });\x0d\n          } catch (e) {\x0d\n            dispose();\x0d\n            reject(e);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n      if (res.statusCode > 303 || res.statusCode < 200) {\x0d\n        dispose();\x0d\n        reject(\x0d\n          new ERR_NETWORK_IMPORT_BAD_RESPONSE(\x0d\n            parsed.href\x2C\x0d\n            'HTTP response returned status code of ' + res.statusCode));\x0d\n        return;\x0d\n      }\x0d\n      const { headers } = res;\x0d\n      const contentType = headers['content-type'];\x0d\n      if (!contentType) {\x0d\n        dispose();\x0d\n        reject(new ERR_NETWORK_IMPORT_BAD_RESPONSE(\x0d\n          parsed.href\x2C\x0d\n          'the \\'Content-Type\\' header is required'));\x0d\n        return;\x0d\n      }\x0d\n      /**\x0d\n       * @type {CacheEntry}\x0d\n       */\x0d\n      const entry = {\x0d\n        resolvedHREF: parsed.href\x2C\x0d\n        headers: {\x0d\n          'content-type': res.headers['content-type']\x0d\n        }\x2C\x0d\n        body: new Promise((f\x2C r) => {\x0d\n          const buffers = [];\x0d\n          let size = 0;\x0d\n          let bodyStream = res;\x0d\n          let onError;\x0d\n          if (res.headers['content-encoding'] === 'br') {\x0d\n            bodyStream = createBrotliDecompress();\x0d\n            onError = function onError(error) {\x0d\n              bodyStream.close();\x0d\n              dispose();\x0d\n              reject(error);\x0d\n              r(error);\x0d\n            };\x0d\n            res.on('error'\x2C onError);\x0d\n            res.pipe(bodyStream);\x0d\n          } else if (res.headers['content-encoding'] === 'gzip' ||\x0d\n            res.headers['content-encoding'] === 'deflate') {\x0d\n            bodyStream = createUnzip();\x0d\n            onError = function onError(error) {\x0d\n              bodyStream.close();\x0d\n              dispose();\x0d\n              reject(error);\x0d\n              r(error);\x0d\n            };\x0d\n            res.on('error'\x2C onError);\x0d\n            res.pipe(bodyStream);\x0d\n          } else {\x0d\n            onError = function onError(error) {\x0d\n              dispose();\x0d\n              reject(error);\x0d\n              r(error);\x0d\n            };\x0d\n          }\x0d\n          bodyStream.on('error'\x2C onError);\x0d\n          bodyStream.on('data'\x2C (d) => {\x0d\n            ArrayPrototypePush(buffers\x2C d);\x0d\n            size += d.length;\x0d\n          });\x0d\n          bodyStream.on('end'\x2C () => {\x0d\n            const body = entry.body = /** @type {Buffer} */(\x0d\n              BufferConcat(buffers\x2C size)\x0d\n            );\x0d\n            f(body);\x0d\n          });\x0d\n        })\x2C\x0d\n      };\x0d\n      cacheForGET.set(parsed.href\x2C entry);\x0d\n      fulfill(entry);\x0d\n    });\x0d\n  });\x0d\n  cacheForGET.set(parsed.href\x2C result);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nconst allowList = new net.BlockList();\x0d\nallowList.addAddress('::1'\x2C 'ipv6');\x0d\nallowList.addRange('127.0.0.1'\x2C '127.255.255.255');\x0d\n\x0d\n/**\x0d\n * Returns if an address has local status by if it is going to a local\x0d\n * interface or is an address resolved by DNS to be a local interface\x0d\n * @param {string} hostname url.hostname to test\x0d\n * @returns {Promise<boolean>}\x0d\n */\x0d\nasync function isLocalAddress(hostname) {\x0d\n  try {\x0d\n    if (StringPrototypeStartsWith(hostname\x2C '[') &&\x0d\n        StringPrototypeEndsWith(hostname\x2C ']')) {\x0d\n      hostname = StringPrototypeSlice(hostname\x2C 1\x2C -1);\x0d\n    }\x0d\n    const addr = await dnsLookup(hostname\x2C { verbatim: true });\x0d\n    const ipv = addr.family === 4 ? 'ipv4' : 'ipv6';\x0d\n    return allowList.check(addr.address\x2C ipv);\x0d\n  } catch {\x0d\n    // If it errored\x2C the answer is no.\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Fetches a location with a shared cache following redirects.\x0d\n * Does not respect HTTP cache headers.\x0d\n *\x0d\n * This splits the header and body Promises so that things only needing\x0d\n * headers don't need to wait on the body.\x0d\n *\x0d\n * In cases where the request & response have already settled\x2C this returns the\x0d\n * cache value synchronously.\x0d\n *\x0d\n * @param {URL} parsed\x0d\n * @param {ESModuleContext} context\x0d\n * @returns {ReturnType<typeof fetchWithRedirects>}\x0d\n */\x0d\nfunction fetchModule(parsed\x2C { parentURL }) {\x0d\n  const { href } = parsed;\x0d\n  const existing = cacheForGET.get(href);\x0d\n  if (existing) {\x0d\n    return existing;\x0d\n  }\x0d\n  if (parsed.protocol === 'http:') {\x0d\n    return PromisePrototypeThen(isLocalAddress(parsed.hostname)\x2C (is) => {\x0d\n      if (is !== true) {\x0d\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n          href\x2C\x0d\n          parentURL\x2C\x0d\n          'http can only be used to load local resources (use https instead).'\x0d\n        );\x0d\n      }\x0d\n      return fetchWithRedirects(parsed);\x0d\n    });\x0d\n  }\x0d\n  return fetchWithRedirects(parsed);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  fetchModule: fetchModule\x0d\n};\x0d\n
code-source-info,0x36339d30846,120,0,8052,C0O0C4O8052,,
code-creation,Function,10,173610,0x36339d30cde,318, node:internal/modules/esm/fetch_module:1:1,0x36339d307c0,~
code-source-info,0x36339d30cde,120,0,8052,C0O0C104O26C110O49C116O61C122O86C128O105C133O117C139O145C145O170C151O273C157O273C162O273C167O250C173O376C179O376C184O402C189O304C195O338C201O427C207O427C212O419C218O465C224O465C229O899C231O899C236O899C238O1197C239O1197C241O1435C242O1435C244O1830C245O1830C247O6127C252O6119C257O6119C259O6141C262O6151C273O6151C279O6179C282O6189C293O6189C299O8000C306O8035C312O8015C317O8051,,
code-creation,LazyCompile,10,173709,0x36339d319be,37,get BlockList node:net:1826:16,0x2c63eb2b7e8,~
code-source-info,0x36339d319be,101,50636,50728,C0O50646C14O50660C19O50689C26O50656C32O50706C36O50723,,
code-creation,Eval,10,173862,0x36339d31e9e,5, node:internal/blocklist:1:1,0x36339d31cb8,~
script-source,121,node:internal/blocklist,'use strict';\x0d\n\x0d\nconst {\x0d\n  Boolean\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  BlockList: BlockListHandle\x2C\x0d\n} = internalBinding('block_list');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  SocketAddress\x2C\x0d\n  kHandle: kSocketAddressHandle\x2C\x0d\n} = require('internal/socketaddress');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst { owner_symbol } = internalBinding('symbols');\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst { validateInt32\x2C validateString } = require('internal/validators');\x0d\n\x0d\nclass BlockList extends JSTransferable {\x0d\n  constructor() {\x0d\n    super();\x0d\n    this[kHandle] = new BlockListHandle();\x0d\n    this[kHandle][owner_symbol] = this;\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `BlockList ${inspect({\x0d\n      rules: this.rules\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  addAddress(address\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(address)) {\x0d\n      validateString(address\x2C 'address');\x0d\n      validateString(family\x2C 'family');\x0d\n      address = new SocketAddress({\x0d\n        address\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    this[kHandle].addAddress(address[kSocketAddressHandle]);\x0d\n  }\x0d\n\x0d\n  addRange(start\x2C end\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(start)) {\x0d\n      validateString(start\x2C 'start');\x0d\n      validateString(family\x2C 'family');\x0d\n      start = new SocketAddress({\x0d\n        address: start\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    if (!SocketAddress.isSocketAddress(end)) {\x0d\n      validateString(end\x2C 'end');\x0d\n      validateString(family\x2C 'family');\x0d\n      end = new SocketAddress({\x0d\n        address: end\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    const ret = this[kHandle].addRange(\x0d\n      start[kSocketAddressHandle]\x2C\x0d\n      end[kSocketAddressHandle]);\x0d\n    if (ret === false)\x0d\n      throw new ERR_INVALID_ARG_VALUE('start'\x2C start\x2C 'must come before end');\x0d\n  }\x0d\n\x0d\n  addSubnet(network\x2C prefix\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(network)) {\x0d\n      validateString(network\x2C 'network');\x0d\n      validateString(family\x2C 'family');\x0d\n      network = new SocketAddress({\x0d\n        address: network\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    switch (network.family) {\x0d\n      case 'ipv4':\x0d\n        validateInt32(prefix\x2C 'prefix'\x2C 0\x2C 32);\x0d\n        break;\x0d\n      case 'ipv6':\x0d\n        validateInt32(prefix\x2C 'prefix'\x2C 0\x2C 128);\x0d\n        break;\x0d\n    }\x0d\n    this[kHandle].addSubnet(network[kSocketAddressHandle]\x2C prefix);\x0d\n  }\x0d\n\x0d\n  check(address\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(address)) {\x0d\n      validateString(address\x2C 'address');\x0d\n      validateString(family\x2C 'family');\x0d\n      try {\x0d\n        address = new SocketAddress({\x0d\n          address\x2C\x0d\n          family\x2C\x0d\n        });\x0d\n      } catch {\x0d\n        // Ignore the error. If it's not a valid address\x2C return false.\x0d\n        return false;\x0d\n      }\x0d\n    }\x0d\n    return Boolean(this[kHandle].check(address[kSocketAddressHandle]));\x0d\n  }\x0d\n\x0d\n  get rules() {\x0d\n    return this[kHandle].getRules();\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const handle = this[kHandle];\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/blocklist:InternalBlockList'\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kHandle][owner_symbol] = this;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass InternalBlockList extends JSTransferable {\x0d\n  constructor(handle) {\x0d\n    super();\x0d\n    this[kHandle] = handle;\x0d\n    if (handle !== undefined)\x0d\n      handle[owner_symbol] = this;\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalBlockList.prototype.constructor = BlockList.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalBlockList.prototype\x2C BlockList.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  BlockList\x2C\x0d\n  InternalBlockList\x2C\x0d\n};\x0d\n
code-source-info,0x36339d31e9e,121,0,4043,C0O0C4O4043,,
code-creation,Function,10,174054,0x36339d328a6,359, node:internal/blocklist:1:1,0x36339d31e18,~
code-source-info,0x36339d328a6,121,0,4043,C0O0C35O28C41O40C46O65C51O137C54O137C59O115C65O218C68O218C73O203C78O312C81O312C86O258C92O285C98O410C101O410C106O361C111O380C116O391C121O477C124O477C129O465C135O530C138O530C142O530C144O575C147O575C152O558C158O645C161O645C166O671C171O617C177O724C180O724C185O690C191O705C197O783C204O929C241O3359C251O3528C278O3669C301O3850C306O3884C311O3894C315O3872C319O3947C324O3968C329O3908C334O3983C341O4005C347O4019C353O3998C358O4042,,
tick,0x7ff7c09121a1,174208,1,0x7ff7c02ae150,6,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d319cc,0x36339d30dd5,0x231d0e04f03,0x231d0e048e5,0x36339d2fa82,0x231d0e04f03,0x231d0e048e5,0x36339d2bf12,0x231d0e04f03,0x231d0e048e5,0x36339d23702,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,174338,0x36339d34176,5, node:internal/socketaddress:1:1,0x36339d33f80,~
script-source,122,node:internal/socketaddress,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  SocketAddress: _SocketAddress\x2C\x0d\n  AF_INET\x2C\x0d\n  AF_INET6\x2C\x0d\n} = internalBinding('block_list');\x0d\n\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n  validatePort\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kDetail = Symbol('kDetail');\x0d\n\x0d\nclass SocketAddress extends JSTransferable {\x0d\n  static isSocketAddress(value) {\x0d\n    return value?.[kHandle] !== undefined;\x0d\n  }\x0d\n\x0d\n  constructor(options = {}) {\x0d\n    super();\x0d\n    validateObject(options\x2C 'options');\x0d\n    let { family = 'ipv4' } = options;\x0d\n    const {\x0d\n      address = (family === 'ipv4' ? '127.0.0.1' : '::')\x2C\x0d\n      port = 0\x2C\x0d\n      flowlabel = 0\x2C\x0d\n    } = options;\x0d\n\x0d\n    let type;\x0d\n    if (typeof family?.toLowerCase === 'function')\x0d\n      family = family.toLowerCase();\x0d\n    switch (family) {\x0d\n      case 'ipv4':\x0d\n        type = AF_INET;\x0d\n        break;\x0d\n      case 'ipv6':\x0d\n        type = AF_INET6;\x0d\n        break;\x0d\n      default:\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.family'\x2C options.family);\x0d\n    }\x0d\n\x0d\n    validateString(address\x2C 'options.address');\x0d\n    validatePort(port\x2C 'options.port');\x0d\n    validateUint32(flowlabel\x2C 'options.flowlabel'\x2C false);\x0d\n\x0d\n    this[kHandle] = new _SocketAddress(address\x2C port\x2C type\x2C flowlabel);\x0d\n    this[kDetail] = this[kHandle].detail({\x0d\n      address: undefined\x2C\x0d\n      port: undefined\x2C\x0d\n      family: undefined\x2C\x0d\n      flowlabel: undefined\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  get address() {\x0d\n    return this[kDetail].address;\x0d\n  }\x0d\n\x0d\n  get port() {\x0d\n    return this[kDetail].port;\x0d\n  }\x0d\n\x0d\n  get family() {\x0d\n    return this[kDetail].family === AF_INET ? 'ipv4' : 'ipv6';\x0d\n  }\x0d\n\x0d\n  get flowlabel() {\x0d\n    // The flow label can be changed internally.\x0d\n    return this[kHandle].flowlabel();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `SocketAddress ${inspect(this.toJSON()\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const handle = this[kHandle];\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/socketaddress:InternalSocketAddress'\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kDetail] = handle.detail({\x0d\n      address: undefined\x2C\x0d\n      port: undefined\x2C\x0d\n      family: undefined\x2C\x0d\n      flowlabel: undefined\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  toJSON() {\x0d\n    return {\x0d\n      address: this.address\x2C\x0d\n      port: this.port\x2C\x0d\n      family: this.family\x2C\x0d\n      flowlabel: this.flowlabel\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nclass InternalSocketAddress extends JSTransferable {\x0d\n  constructor(handle) {\x0d\n    super();\x0d\n    this[kHandle] = handle;\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalSocketAddress.prototype.constructor =\x0d\n  SocketAddress.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalSocketAddress.prototype\x2C SocketAddress.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  SocketAddress\x2C\x0d\n  InternalSocketAddress\x2C\x0d\n  kHandle\x2C\x0d\n};\x0d\n
code-source-info,0x36339d34176,122,0,3363,C0O0C4O3363,,
code-creation,Function,10,174534,0x36339d34c9e,366, node:internal/socketaddress:1:1,0x36339d340f0,~
code-source-info,0x36339d34c9e,122,0,3363,C0O0C38O28C43O53C48O154C51O154C56O108C62O127C68O139C74O275C77O275C82O199C88O218C94O237C100O254C106O369C109O369C114O369C119O335C125O447C128O447C133O432C138O496C141O496C146O484C152O593C155O593C160O544C165O563C170O574C175O656C178O656C182O656C184O692C187O692C191O692C193O742C226O2171C236O2425C246O2602C279O3017C302O3135C307O3176C312O3186C316O3157C320O3243C325O3268C330O3200C335O3283C342O3305C348O3323C354O3349C360O3298C365O3362,,
code-creation,LazyCompile,10,174687,0x36339d3574e,72,BlockList node:internal/blocklist:40:14,0x36339d31ed0,~
code-source-info,0x36339d3574e,121,814,922,C3O824C11O824C23O838C28O843C33O858C36O854C41O852C45O882C50O887C52O886C58O896C64O910C71O921,,
code-creation,LazyCompile,10,174760,0x36339d35ef6,115,addAddress node:internal/blocklist:60:13,0x36339d31f70,~
code-source-info,0x36339d35ef6,121,1208,1529,C14O1242C19O1261C24O1261C31O1296C39O1296C44O1339C52O1339C57O1380C69O1419C75O1437C81O1390C87O1468C89O1473C91O1472C95O1482C102O1501C104O1500C108O1482C114O1528,,
code-creation,LazyCompile,10,174810,0x36339d36076,20,isSocketAddress node:internal/socketaddress:43:25,0x36339d341f8,~
code-source-info,0x36339d36076,122,784,842,C0O799C9O814C11O813C18O823C19O837,,
code-creation,LazyCompile,10,174895,0x36339d3680e,323,SocketAddress node:internal/socketaddress:47:14,0x36339d341a8,~
code-source-info,0x36339d3680e,122,859,1842,C7O859C13O881C21O881C33O895C41O895C46O942C58O991C69O1009C81O1050C89O1067C97O1111C99O1122C106O1139C117O1192C122O1192C127O1212C146O1259C151O1284C153O1320C158O1346C160O1378C168O1436C175O1384C180O1378C181O1459C189O1459C194O1508C202O1508C207O1549C220O1549C225O1611C230O1616C235O1631C252O1627C257O1625C261O1684C266O1689C274O1705C276O1704C280O1714C291O1739C296O1763C301O1789C306O1818C310O1714C315O1698C322O1841,,
code-creation,LazyCompile,10,174981,0x36339d36b5e,99, node:internal/validators:154:3,0xa8296bd020,~
code-source-info,0x36339d36b5e,15,4537,5108,C0O4596C4O4637C9O4673C14O4712C21O4748C26O4785C33O4821C38O4836C46O4884C50O4898C53O4898C67O4975C75O5042C91O5048C96O5042C98O5107,,
code-creation,LazyCompile,10,175044,0x36339d36d0e,129,validatePort node:internal/validators:211:22,0xa8296bd1f8,~
code-source-info,0x36339d36d0e,15,6624,6991,C24O6669C44O6767C47O6767C52O6792C58O6800C65O6817C70O6828C72O6834C75O6823C86O6856C92O6881C99O6891C101O6910C117O6916C122O6910C123O6972C125O6984C128O6988,,
code-creation,LazyCompile,10,175106,0x36339d36f5e,149, node:internal/validators:101:40,0xa8296bce20,~
code-source-info,0x36339d36f5e,15,2980,3505,C0O3012C3O3017C9O3041C15O3081C31O3087C36O3081C37O3148C42O3153C48O3186C64O3192C69O3186C70O3265C80O3319C90O3358C109O3325C114O3319C115O3397C120O3419C125O3433C141O3439C146O3433C148O3504,,
code-creation,LazyCompile,10,175150,0x36339d370ee,9,isUint32 node:internal/validators:40:18,0xa8296bccc0,~
code-source-info,0x36339d370ee,15,835,882,C0O848C2O872C5O861C8O879,,
code-creation,LazyCompile,10,175228,0x36339d37326,229,addRange node:internal/blocklist:72:11,0x36339d31fc0,~
code-source-info,0x36339d37326,121,1543,2235,C17O1580C22O1599C27O1599C34O1632C42O1632C47O1671C55O1671C60O1712C72O1758C78O1774C84O1720C90O1805C95O1824C100O1824C107O1855C115O1855C120O1890C128O1890C133O1931C145O1975C151O1989C157O1937C163O2032C165O2037C167O2036C171O2046C178O2069C180O2068C186O2103C188O2102C192O2046C199O2132C200O2140C205O2158C221O2164C226O2158C228O2234,,
code-creation,Eval,10,175373,0x36339d377a6,5, node:internal/modules/esm/formats:1:1,0x36339d37630,~
script-source,123,node:internal/modules/esm/formats,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExpPrototypeTest\x2C\x0d\n} = primordials;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\n\x0d\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\x0d\n\x0d\nconst extensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'module'\x2C\x0d\n  '.json': 'json'\x2C\x0d\n  '.mjs': 'module'\x2C\x0d\n};\x0d\n\x0d\nconst legacyExtensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'commonjs'\x2C\x0d\n  '.json': 'commonjs'\x2C\x0d\n  '.mjs': 'module'\x2C\x0d\n  '.node': 'commonjs'\x2C\x0d\n};\x0d\n\x0d\nif (experimentalWasmModules) {\x0d\n  extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} mime\x0d\n * @returns {string | null}\x0d\n */\x0d\nfunction mimeToFormat(mime) {\x0d\n  if (\x0d\n    RegExpPrototypeTest(\x0d\n      /\\s*(text|application)\\/javascript\\s*(;\\s*charset=utf-?8\\s*)?/i\x2C\x0d\n      mime\x0d\n    )\x0d\n  ) return 'module';\x0d\n  if (mime === 'application/json') return 'json';\x0d\n  if (experimentalWasmModules && mime === 'application/wasm') return 'wasm';\x0d\n  return null;\x0d\n}\x0d\n\x0d\nfunction getLegacyExtensionFormat(ext) {\x0d\n  return legacyExtensionFormatMap[ext];\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  extensionFormatMap\x2C\x0d\n  getLegacyExtensionFormat\x2C\x0d\n  legacyExtensionFormatMap\x2C\x0d\n  mimeToFormat\x2C\x0d\n};\x0d\n
code-source-info,0x36339d377a6,123,0,1247,C0O0C4O1247,,
code-creation,Function,10,175452,0x36339d37a5e,120, node:internal/modules/esm/formats:1:1,0x36339d37720,~
code-source-info,0x36339d37a5e,123,0,1247,C0O0C24O28C30O95C33O95C38O76C43O161C46O161C50O161C52O238C57O386C61O386C63O531C67O565C73O629C79O593C83O1125C90O1147C96O1170C102O1199C108O1228C114O1140C119O1246,,
code-creation,Eval,10,175589,0x36339d380e6,5, node:internal/modules/esm/initialize_import_meta:1:1,0x36339d37f50,~
script-source,124,node:internal/modules/esm/initialize_import_meta,'use strict';\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst experimentalImportMetaResolve =\x0d\n  getOptionValue('--experimental-import-meta-resolve');\x0d\nconst {\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseReject\x2C\x0d\n} = primordials;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\n\x0d\nfunction createImportMetaResolve(defaultParentUrl) {\x0d\n  return async function resolve(specifier\x2C parentUrl = defaultParentUrl) {\x0d\n    return PromisePrototypeThen(\x0d\n      asyncESM.esmLoader.resolve(specifier\x2C parentUrl)\x2C\x0d\n      ({ url }) => url\x2C\x0d\n      (error) => (\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT' ?\x0d\n          error.url : PromiseReject(error))\x0d\n    );\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {object} meta\x0d\n * @param {{url: string}} context\x0d\n */\x0d\nfunction initializeImportMeta(meta\x2C context) {\x0d\n  let url = context.url;\x0d\n\x0d\n  // Alphabetical\x0d\n  if (experimentalImportMetaResolve) {\x0d\n    meta.resolve = createImportMetaResolve(url);\x0d\n  }\x0d\n\x0d\n  url = asyncESM.esmLoader.getBaseURL(url);\x0d\n\x0d\n  meta.url = url;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  initializeImportMeta\x0d\n};\x0d\n
code-source-info,0x36339d380e6,124,0,1066,C0O0C4O1066,,
code-creation,Function,10,175656,0x36339d382ae,90, node:internal/modules/esm/initialize_import_meta:1:1,0x36339d38060,~
code-source-info,0x36339d382ae,124,0,1066,C0O0C28O44C31O44C36O25C41O115C44O115C48O115C50O181C56O206C62O257C65O257C69O257C71O1018C78O1040C84O1033C89O1065,,
code-creation,Eval,10,175771,0x36339d387c6,5, node:internal/modules/esm/load:1:1,0x36339d38650,~
script-source,125,node:internal/modules/esm/load,'use strict';\x0d\n\x0d\nconst { defaultGetFormat } = require('internal/modules/esm/get_format');\x0d\nconst { defaultGetSource } = require('internal/modules/esm/get_source');\x0d\nconst { validateAssertions } = require('internal/modules/esm/assert');\x0d\n\x0d\n/**\x0d\n * Node.js default load hook.\x0d\n * @param {string} url\x0d\n * @param {object} context\x0d\n * @returns {object}\x0d\n */\x0d\nasync function defaultLoad(url\x2C context) {\x0d\n  const { importAssertions } = context;\x0d\n  let {\x0d\n    format\x2C\x0d\n    source\x2C\x0d\n  } = context;\x0d\n\x0d\n  if (format == null) {\x0d\n    format = await defaultGetFormat(url\x2C context);\x0d\n  }\x0d\n\x0d\n  validateAssertions(url\x2C format\x2C importAssertions);\x0d\n\x0d\n  if (\x0d\n    format === 'builtin' ||\x0d\n    format === 'commonjs'\x0d\n  ) {\x0d\n    source = null;\x0d\n  } else if (source == null) {\x0d\n    source = await defaultGetSource(url\x2C context);\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    format\x2C\x0d\n    source\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultLoad\x2C\x0d\n};\x0d\n
code-source-info,0x36339d387c6,125,0,903,C0O0C4O903,,
code-creation,Function,10,175834,0x36339d3890e,80, node:internal/modules/esm/load:1:1,0x36339d38740,~
code-source-info,0x36339d3890e,125,0,903,C0O0C19O46C22O46C27O25C33O120C36O120C41O99C47O196C50O196C55O173C61O863C68O885C74O878C79O902,,
code-creation,Eval,10,175948,0x36339d38f06,5, node:internal/modules/esm/get_source:1:1,0x36339d38d00,~
script-source,126,node:internal/modules/esm/get_source,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { fetchModule } = require('internal/modules/esm/fetch_module');\x0d\n\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\n\x0d\nconst { Buffer: { from: BufferFrom } } = require('buffer');\x0d\n\x0d\nconst fs = require('internal/fs/promises').exports;\x0d\nconst { URL } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INVALID_URL\x2C\x0d\n  ERR_UNSUPPORTED_ESM_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst readFileAsync = fs.readFile;\x0d\n\x0d\nconst DATA_URL_PATTERN = /^[^/]+\\/[^\x2C;]+(?:[^\x2C]*?)(;base64)?\x2C([\\s\\S]*)$/;\x0d\n\x0d\nasync function defaultGetSource(url\x2C context\x2C defaultGetSource) {\x0d\n  const parsed = new URL(url);\x0d\n  let source;\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    source = await readFileAsync(parsed);\x0d\n  } else if (parsed.protocol === 'data:') {\x0d\n    const match = RegExpPrototypeExec(DATA_URL_PATTERN\x2C parsed.pathname);\x0d\n    if (!match) {\x0d\n      throw new ERR_INVALID_URL(url);\x0d\n    }\x0d\n    const { 1: base64\x2C 2: body } = match;\x0d\n    source = BufferFrom(decodeURIComponent(body)\x2C base64 ? 'base64' : 'utf8');\x0d\n  } else if (experimentalNetworkImports && (\x0d\n    parsed.protocol === 'https:' ||\x0d\n    parsed.protocol === 'http:'\x0d\n  )) {\x0d\n    const res = await fetchModule(parsed\x2C context);\x0d\n    source = await res.body;\x0d\n  } else {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed\x2C ArrayPrototypeConcat([\x0d\n      'file'\x2C\x0d\n      'data'\x2C\x0d\n      experimentalNetworkImports ? ['https'\x2C 'http'] : []\x2C\x0d\n    ]));\x0d\n  }\x0d\n  if (policy?.manifest) {\x0d\n    policy.manifest.assertIntegrity(parsed\x2C source);\x0d\n  }\x0d\n  return source;\x0d\n}\x0d\nexports.defaultGetSource = defaultGetSource;\x0d\n
code-source-info,0x36339d38f06,126,0,1929,C0O0C4O1929,,
code-creation,Function,10,176043,0x36339d3909e,212, node:internal/modules/esm/get_source:1:1,0x36339d38e80,~
code-source-info,0x36339d3909e,126,0,1929,C0O0C46O28C52O53C58O77C64O143C67O143C72O124C77O197C80O197C85O181C91O313C94O313C103O358C110O313C112O443C115O443C119O443C121O537C124O537C129O537C134O520C140O570C143O570C148O601C153O628C156O628C161O620C167O722C170O722C175O748C180O665C186O685C192O782C196O779C198O820C202O820C204O1883C206O1908C211O1928,,
tick,0x7ff7c0c139e8,176225,1,0x7ff7c02ae150,2,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d3912d,0x231d0e04f03,0x231d0e048e5,0x36339d38932,0x231d0e04f03,0x231d0e048e5,0x36339d2372a,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,176688,0x36339d3a466,5, node:internal/fs/promises:1:1,0x36339d39cb8,~
script-source,127,node:internal/fs/promises,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  Error\x2C\x0d\n  MathMax\x2C\x0d\n  MathMin\x2C\x0d\n  ObjectCreate\x2C\x0d\n  NumberIsSafeInteger\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafePromisePrototypeFinally\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  F_OK\x2C\x0d\n  O_SYMLINK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x0d\n} = internalBinding('constants').fs;\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n} = require('internal/errors');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst { rimrafPromises } = require('internal/fs/rimraf');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x2C\x0d\n} = require('internal/fs/utils');\x0d\nconst { opendir } = require('internal/fs/dir');\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst { lazyDOMException\x2C promisify } = require('internal/util');\x0d\nconst { EventEmitterMixin } = require('internal/event_target');\x0d\nconst { watch } = require('internal/fs/watchers');\x0d\nconst { isIterable } = require('internal/streams/utils');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kFd = Symbol('kFd');\x0d\nconst kRefs = Symbol('kRefs');\x0d\nconst kClosePromise = Symbol('kClosePromise');\x0d\nconst kCloseResolve = Symbol('kCloseResolve');\x0d\nconst kCloseReject = Symbol('kCloseReject');\x0d\nconst kRef = Symbol('kRef');\x0d\nconst kUnref = Symbol('kUnref');\x0d\n\x0d\nconst { kUsePromises } = binding;\x0d\nconst {\x0d\n  JSTransferable\x2C kDeserialize\x2C kTransfer\x2C kTransferList\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst getDirectoryEntriesPromise = promisify(getDirents);\x0d\nconst validateRmOptionsPromise = promisify(validateRmOptions);\x0d\n\x0d\nlet cpPromises;\x0d\nfunction lazyLoadCpPromises() {\x0d\n  return cpPromises ??= require('internal/fs/cp/cp').cpFn;\x0d\n}\x0d\n\x0d\n// Lazy loaded to avoid circular dependency.\x0d\nlet fsStreams;\x0d\nfunction lazyFsStreams() {\x0d\n  return fsStreams ??= require('internal/fs/streams');\x0d\n}\x0d\n\x0d\nclass FileHandle extends EventEmitterMixin(JSTransferable) {\x0d\n  /**\x0d\n   * @param {InternalFSBinding.FileHandle | undefined} filehandle\x0d\n   */\x0d\n  constructor(filehandle) {\x0d\n    super();\x0d\n    this[kHandle] = filehandle;\x0d\n    this[kFd] = filehandle ? filehandle.fd : -1;\x0d\n\x0d\n    this[kRefs] = 1;\x0d\n    this[kClosePromise] = null;\x0d\n  }\x0d\n\x0d\n  getAsyncId() {\x0d\n    return this[kHandle].getAsyncId();\x0d\n  }\x0d\n\x0d\n  get fd() {\x0d\n    return this[kFd];\x0d\n  }\x0d\n\x0d\n  appendFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  chmod(mode) {\x0d\n    return fsCall(fchmod\x2C this\x2C mode);\x0d\n  }\x0d\n\x0d\n  chown(uid\x2C gid) {\x0d\n    return fsCall(fchown\x2C this\x2C uid\x2C gid);\x0d\n  }\x0d\n\x0d\n  datasync() {\x0d\n    return fsCall(fdatasync\x2C this);\x0d\n  }\x0d\n\x0d\n  sync() {\x0d\n    return fsCall(fsync\x2C this);\x0d\n  }\x0d\n\x0d\n  read(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(read\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  readv(buffers\x2C position) {\x0d\n    return fsCall(readv\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  readFile(options) {\x0d\n    return fsCall(readFile\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  stat(options) {\x0d\n    return fsCall(fstat\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  truncate(len = 0) {\x0d\n    return fsCall(ftruncate\x2C this\x2C len);\x0d\n  }\x0d\n\x0d\n  utimes(atime\x2C mtime) {\x0d\n    return fsCall(futimes\x2C this\x2C atime\x2C mtime);\x0d\n  }\x0d\n\x0d\n  write(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(write\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  writev(buffers\x2C position) {\x0d\n    return fsCall(writev\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  writeFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  close = () => {\x0d\n    if (this[kFd] === -1) {\x0d\n      return PromiseResolve();\x0d\n    }\x0d\n\x0d\n    if (this[kClosePromise]) {\x0d\n      return this[kClosePromise];\x0d\n    }\x0d\n\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        this[kHandle].close()\x2C\x0d\n        () => { this[kClosePromise] = undefined; }\x0d\n      );\x0d\n    } else {\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        new Promise((resolve\x2C reject) => {\x0d\n          this[kCloseResolve] = resolve;\x0d\n          this[kCloseReject] = reject;\x0d\n        })\x2C () => {\x0d\n          this[kClosePromise] = undefined;\x0d\n          this[kCloseReject] = undefined;\x0d\n          this[kCloseResolve] = undefined;\x0d\n        }\x0d\n      );\x0d\n    }\x0d\n\x0d\n    this.emit('close');\x0d\n    return this[kClosePromise];\x0d\n  };\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').ReadStream\x0d\n   * } ReadStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   end?: number;\x0d\n   *   highWaterMark?: number;\x0d\n   *   }} [options]\x0d\n   * @returns {ReadStream}\x0d\n   */\x0d\n  createReadStream(options = undefined) {\x0d\n    const { ReadStream } = lazyFsStreams();\x0d\n    return new ReadStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').WriteStream\x0d\n   * } WriteStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   }} [options]\x0d\n   * @returns {WriteStream}\x0d\n   */\x0d\n  createWriteStream(options = undefined) {\x0d\n    const { WriteStream } = lazyFsStreams();\x0d\n    return new WriteStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  [kTransfer]() {\x0d\n    if (this[kClosePromise] || this[kRefs] > 1) {\x0d\n      throw lazyDOMException('Cannot transfer FileHandle while in use'\x2C\x0d\n                             'DataCloneError');\x0d\n    }\x0d\n\x0d\n    const handle = this[kHandle];\x0d\n    this[kFd] = -1;\x0d\n    this[kHandle] = null;\x0d\n    this[kRefs] = 0;\x0d\n\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/fs/promises:FileHandle'\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kTransferList]() {\x0d\n    return [ this[kHandle] ];\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kFd] = handle.fd;\x0d\n  }\x0d\n\x0d\n  [kRef]() {\x0d\n    this[kRefs]++;\x0d\n  }\x0d\n\x0d\n  [kUnref]() {\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      PromisePrototypeThen(\x0d\n        this[kHandle].close()\x2C\x0d\n        this[kCloseResolve]\x2C\x0d\n        this[kCloseReject]\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function fsCall(fn\x2C handle\x2C ...args) {\x0d\n  assert(handle[kRefs] !== undefined\x2C\x0d\n         'handle must be an instance of FileHandle');\x0d\n\x0d\n  if (handle.fd === -1) {\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const err = new Error('file closed');\x0d\n    err.code = 'EBADF';\x0d\n    err.syscall = fn.name;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    handle[kRef]();\x0d\n    return await fn(handle\x2C ...new SafeArrayIterator(args));\x0d\n  } finally {\x0d\n    handle[kUnref]();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal) {\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n}\x0d\n\x0d\nasync function writeFileHandle(filehandle\x2C data\x2C signal\x2C encoding) {\x0d\n  checkAborted(signal);\x0d\n  if (isCustomIterable(data)) {\x0d\n    for await (const buf of data) {\x0d\n      checkAborted(signal);\x0d\n      const toWrite =\x0d\n        isArrayBufferView(buf) ? buf : Buffer.from(buf\x2C encoding || 'utf8');\x0d\n      let remaining = toWrite.byteLength;\x0d\n      while (remaining > 0) {\x0d\n        const writeSize = MathMin(kWriteFileMaxChunkSize\x2C remaining);\x0d\n        const { bytesWritten } = await write(\x0d\n          filehandle\x2C toWrite\x2C toWrite.byteLength - remaining\x2C writeSize);\x0d\n        remaining -= bytesWritten;\x0d\n        checkAborted(signal);\x0d\n      }\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  data = new Uint8Array(data.buffer\x2C data.byteOffset\x2C data.byteLength);\x0d\n  let remaining = data.byteLength;\x0d\n  if (remaining === 0) return;\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    const { bytesWritten } =\x0d\n      await write(filehandle\x2C data\x2C 0\x2C\x0d\n                  MathMin(kWriteFileMaxChunkSize\x2C data.byteLength));\x0d\n    remaining -= bytesWritten;\x0d\n    data = new Uint8Array(\x0d\n      data.buffer\x2C\x0d\n      data.byteOffset + bytesWritten\x2C\x0d\n      data.byteLength - bytesWritten\x0d\n    );\x0d\n  } while (remaining > 0);\x0d\n}\x0d\n\x0d\nasync function readFileHandle(filehandle\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  const statFields = await binding.fstat(filehandle.fd\x2C false\x2C kUsePromises);\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  let size;\x0d\n  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\x0d\n    size = statFields[8/* size */];\x0d\n  } else {\x0d\n    size = 0;\x0d\n  }\x0d\n\x0d\n  if (size > kIoMaxLength)\x0d\n    throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n\x0d\n  let endOfFile = false;\x0d\n  let totalRead = 0;\x0d\n  const noSize = size === 0;\x0d\n  const buffers = [];\x0d\n  const fullBuffer = noSize ? undefined : Buffer.allocUnsafeSlow(size);\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    let buffer;\x0d\n    let offset;\x0d\n    let length;\x0d\n    if (noSize) {\x0d\n      buffer = Buffer.allocUnsafeSlow(kReadFileUnknownBufferLength);\x0d\n      offset = 0;\x0d\n      length = kReadFileUnknownBufferLength;\x0d\n    } else {\x0d\n      buffer = fullBuffer;\x0d\n      offset = totalRead;\x0d\n      length = MathMin(size - totalRead\x2C kReadFileBufferLength);\x0d\n    }\x0d\n\x0d\n    const bytesRead = (await binding.read(filehandle.fd\x2C buffer\x2C offset\x2C\x0d\n                                          length\x2C -1\x2C kUsePromises)) || 0;\x0d\n    totalRead += bytesRead;\x0d\n    endOfFile = bytesRead === 0 || totalRead === size;\x0d\n    if (noSize && bytesRead > 0) {\x0d\n      const isBufferFull = bytesRead === kReadFileUnknownBufferLength;\x0d\n      const chunkBuffer = isBufferFull ? buffer : buffer.slice(0\x2C bytesRead);\x0d\n      ArrayPrototypePush(buffers\x2C chunkBuffer);\x0d\n    }\x0d\n  } while (!endOfFile);\x0d\n\x0d\n  let result;\x0d\n  if (size > 0) {\x0d\n    result = totalRead === size ? fullBuffer : fullBuffer.slice(0\x2C totalRead);\x0d\n  } else {\x0d\n    result = buffers.length === 1 ? buffers[0] : Buffer.concat(buffers\x2C\x0d\n                                                               totalRead);\x0d\n  }\x0d\n\x0d\n  return options.encoding ? result.toString(options.encoding) : result;\x0d\n}\x0d\n\x0d\n// All of the functions are defined as async in order to ensure that errors\x0d\n// thrown cause promise rejections rather than being thrown synchronously.\x0d\nasync function access(path\x2C mode = F_OK) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  return binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function cp(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  return lazyLoadCpPromises()(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nasync function copyFile(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  return binding.copyFile(pathModule.toNamespacedPath(src)\x2C\x0d\n                          pathModule.toNamespacedPath(dest)\x2C\x0d\n                          mode\x2C\x0d\n                          kUsePromises);\x0d\n}\x0d\n\x0d\n// Note that unlike fs.open() which uses numeric file descriptors\x2C\x0d\n// fsPromises.open() uses the fs.FileHandle class.\x0d\nasync function open(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  return new FileHandle(\x0d\n    await binding.openFileHandle(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 flagsNumber\x2C mode\x2C kUsePromises));\x0d\n}\x0d\n\x0d\nasync function read(handle\x2C bufferOrOptions\x2C offset\x2C length\x2C position) {\x0d\n  let buffer = bufferOrOptions;\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    bufferOrOptions ??= ObjectCreate(null);\x0d\n    ({\x0d\n      buffer = Buffer.alloc(16384)\x2C\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x0d\n    } = bufferOrOptions);\x0d\n\x0d\n    validateBuffer(buffer);\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0)\x0d\n    return { bytesRead: length\x2C buffer };\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (!NumberIsSafeInteger(position))\x0d\n    position = -1;\x0d\n\x0d\n  const bytesRead = (await binding.read(handle.fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                        position\x2C kUsePromises)) || 0;\x0d\n\x0d\n  return { bytesRead\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function readv(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const bytesRead = (await binding.readBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                               kUsePromises)) || 0;\x0d\n  return { bytesRead\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function write(handle\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  if (buffer?.byteLength === 0)\x0d\n    return { bytesWritten: 0\x2C buffer };\x0d\n\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    const bytesWritten =\x0d\n      (await binding.writeBuffer(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                 length\x2C position\x2C kUsePromises)) || 0;\x0d\n    return { bytesWritten\x2C buffer };\x0d\n  }\x0d\n\x0d\n  validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n  validateEncoding(buffer\x2C length);\x0d\n  const bytesWritten = (await binding.writeString(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                                  length\x2C kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function writev(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    return { bytesWritten: 0\x2C buffers };\x0d\n  }\x0d\n\x0d\n  const bytesWritten = (await binding.writeBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                                   kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function rename(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                        pathModule.toNamespacedPath(newPath)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function truncate(path\x2C len = 0) {\x0d\n  const fd = await open(path\x2C 'r+');\x0d\n  return SafePromisePrototypeFinally(ftruncate(fd\x2C len)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function ftruncate(handle\x2C len = 0) {\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  return binding.ftruncate(handle.fd\x2C len\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function rm(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = await validateRmOptionsPromise(path\x2C options\x2C false);\x0d\n  return rimrafPromises(path\x2C options);\x0d\n}\x0d\n\x0d\nasync function rmdir(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = validateRmdirOptions(options);\x0d\n\x0d\n  if (options.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    const stats = await stat(path);\x0d\n    if (stats.isDirectory()) {\x0d\n      return rimrafPromises(path\x2C options);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return binding.rmdir(path\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fdatasync(handle) {\x0d\n  return binding.fdatasync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fsync(handle) {\x0d\n  return binding.fsync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdir(path\x2C options) {\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    options = { mode: options };\x0d\n  }\x0d\n  const {\x0d\n    recursive = false\x2C\x0d\n    mode = 0o777\x0d\n  } = options || {};\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  return binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                       parseFileMode(mode\x2C 'mode'\x2C 0o777)\x2C recursive\x2C\x0d\n                       kUsePromises);\x0d\n}\x0d\n\x0d\nasync function readdir(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                       options.encoding\x2C\x0d\n                                       !!options.withFileTypes\x2C\x0d\n                                       kUsePromises);\x0d\n  return options.withFileTypes ?\x0d\n    getDirectoryEntriesPromise(path\x2C result) :\x0d\n    result;\x0d\n}\x0d\n\x0d\nasync function readlink(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  return binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                          options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function symlink(target\x2C path\x2C type_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                         pathModule.toNamespacedPath(path)\x2C\x0d\n                         stringToSymlinkType(type)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fstat(handle\x2C options = { bigint: false }) {\x0d\n  const result = await binding.fstat(handle.fd\x2C options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function lstat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                     options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function stat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                    options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function link(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                      pathModule.toNamespacedPath(newPath)\x2C\x0d\n                      kUsePromises);\x0d\n}\x0d\n\x0d\nasync function unlink(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.unlink(pathModule.toNamespacedPath(path)\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchmod(handle\x2C mode) {\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.fchmod(handle.fd\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chmod(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lchmod(path\x2C mode) {\x0d\n  if (O_SYMLINK === undefined)\x0d\n    throw new ERR_METHOD_NOT_IMPLEMENTED('lchmod()');\x0d\n\x0d\n  const fd = await open(path\x2C O_WRONLY | O_SYMLINK);\x0d\n  return SafePromisePrototypeFinally(fchmod(fd\x2C mode)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function lchown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.lchown(pathModule.toNamespacedPath(path)\x2C\x0d\n                        uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchown(handle\x2C uid\x2C gid) {\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.fchown(handle.fd\x2C uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.chown(pathModule.toNamespacedPath(path)\x2C\x0d\n                       uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function utimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                        toUnixTimestamp(atime)\x2C\x0d\n                        toUnixTimestamp(mtime)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function futimes(handle\x2C atime\x2C mtime) {\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  return binding.futimes(handle.fd\x2C atime\x2C mtime\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lutimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                         toUnixTimestamp(atime)\x2C\x0d\n                         toUnixTimestamp(mtime)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function realpath(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.realpath(path\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdtemp(prefix\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix);\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  return binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function writeFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data) && !isCustomIterable(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(data\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  validateAbortSignal(options.signal);\x0d\n  if (path instanceof FileHandle)\x0d\n    return writeFileHandle(path\x2C data\x2C options.signal\x2C options.encoding);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C options.mode);\x0d\n  return SafePromisePrototypeFinally(\x0d\n    writeFileHandle(fd\x2C data\x2C options.signal\x2C options.encoding)\x2C fd.close);\x0d\n}\x0d\n\x0d\nfunction isCustomIterable(obj) {\x0d\n  return isIterable(obj) && !isArrayBufferView(obj) && typeof obj !== 'string';\x0d\n}\x0d\n\x0d\nasync function appendFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n  options = copyObject(options);\x0d\n  options.flag = options.flag || 'a';\x0d\n  return writeFile(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\nasync function readFile(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const flag = options.flag || 'r';\x0d\n\x0d\n  if (path instanceof FileHandle)\x0d\n    return readFileHandle(path\x2C options);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C 0o666);\x0d\n  return SafePromisePrototypeFinally(readFileHandle(fd\x2C options)\x2C fd.close);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  exports: {\x0d\n    access\x2C\x0d\n    copyFile\x2C\x0d\n    cp\x2C\x0d\n    open\x2C\x0d\n    opendir: promisify(opendir)\x2C\x0d\n    rename\x2C\x0d\n    truncate\x2C\x0d\n    rm\x2C\x0d\n    rmdir\x2C\x0d\n    mkdir\x2C\x0d\n    readdir\x2C\x0d\n    readlink\x2C\x0d\n    symlink\x2C\x0d\n    lstat\x2C\x0d\n    stat\x2C\x0d\n    link\x2C\x0d\n    unlink\x2C\x0d\n    chmod\x2C\x0d\n    lchmod\x2C\x0d\n    lchown\x2C\x0d\n    chown\x2C\x0d\n    utimes\x2C\x0d\n    lutimes\x2C\x0d\n    realpath\x2C\x0d\n    mkdtemp\x2C\x0d\n    writeFile\x2C\x0d\n    appendFile\x2C\x0d\n    readFile\x2C\x0d\n    watch\x2C\x0d\n  }\x2C\x0d\n\x0d\n  FileHandle\x2C\x0d\n  kRef\x2C\x0d\n  kUnref\x2C\x0d\n};\x0d\n
code-source-info,0x36339d3a466,127,0,23678,C0O0C4O23678,,
code-creation,Function,10,177816,0x36339d3cba6,1672, node:internal/fs/promises:1:1,0x36339d3a3e0,~
code-source-info,0x36339d3cba
code-creation,Function,10,177960,0x36339d3d55e,27,<instance_members_initializer> node:internal/fs/promises:190:3,0x36339d3ba40,~
code-source-info,0x36339d3d55e,127,4407,5236,C0O4407C12O4415C26O5236,,
tick,0x7ff7c0c04c69,178204,1,0x7ff7c02ae150,2,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d3ce74,0x231d0e04f03,0x231d0e048e5,0x36339d3912d,0x231d0e04f03,0x231d0e048e5,0x36339d38932,0x231d0e04f03,0x231d0e048e5,0x36339d2372a,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
new,MemoryChunk,0x3dde95c0000,262144
code-creation,Eval,10,178324,0x3dde95c114e,5, node:internal/fs/rimraf:1:1,0x36339d3fca8,~
script-source,128,node:internal/fs/rimraf,// This file is a modified version of the rimraf module on npm. It has been\x0d\n// modified in the following ways:\x0d\n// - Use of the assert module has been replaced with core's error system.\x0d\n// - All code related to the glob dependency has been removed.\x0d\n// - Bring your own custom fs module is not currently supported.\x0d\n// - Some basic code cleanup.\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst fs = require('fs');\x0d\nconst {\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x0d\n} = fs;\x0d\nconst { sep } = require('path');\x0d\nconst { setTimeout } = require('timers');\x0d\nconst { sleep } = require('internal/util');\x0d\nconst notEmptyErrorCodes = new SafeSet(['ENOTEMPTY'\x2C 'EEXIST'\x2C 'EPERM']);\x0d\nconst retryErrorCodes = new SafeSet(\x0d\n  ['EBUSY'\x2C 'EMFILE'\x2C 'ENFILE'\x2C 'ENOTEMPTY'\x2C 'EPERM']);\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst epermHandler = isWindows ? fixWinEPERM : _rmdir;\x0d\nconst epermHandlerSync = isWindows ? fixWinEPERMSync : _rmdirSync;\x0d\nconst readdirEncoding = 'buffer';\x0d\nconst separator = Buffer.from(sep);\x0d\n\x0d\n\x0d\nfunction rimraf(path\x2C options\x2C callback) {\x0d\n  let retries = 0;\x0d\n\x0d\n  _rimraf(path\x2C options\x2C function CB(err) {\x0d\n    if (err) {\x0d\n      if (retryErrorCodes.has(err.code) && retries < options.maxRetries) {\x0d\n        retries++;\x0d\n        const delay = retries * options.retryDelay;\x0d\n        return setTimeout(_rimraf\x2C delay\x2C path\x2C options\x2C CB);\x0d\n      }\x0d\n\x0d\n      // The file is already gone.\x0d\n      if (err.code === 'ENOENT')\x0d\n        err = null;\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rimraf(path\x2C options\x2C callback) {\x0d\n  // SunOS lets the root user unlink directories. Use lstat here to make sure\x0d\n  // it's not a directory.\x0d\n  lstat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (err.code === 'ENOENT')\x0d\n        return callback(null);\x0d\n\x0d\n      // Windows can EPERM on stat.\x0d\n      if (isWindows && err.code === 'EPERM')\x0d\n        return fixWinEPERM(path\x2C options\x2C err\x2C callback);\x0d\n    } else if (stats.isDirectory()) {\x0d\n      return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n    }\x0d\n\x0d\n    unlink(path\x2C (err) => {\x0d\n      if (err) {\x0d\n        if (err.code === 'ENOENT')\x0d\n          return callback(null);\x0d\n        if (err.code === 'EISDIR')\x0d\n          return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n        if (err.code === 'EPERM') {\x0d\n          return epermHandler(path\x2C options\x2C err\x2C callback);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return callback(err);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERM(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  chmod(path\x2C 0o666\x2C (err) => {\x0d\n    if (err)\x0d\n      return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n    stat(path\x2C (err\x2C stats) => {\x0d\n      if (err)\x0d\n        return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n      if (stats.isDirectory())\x0d\n        _rmdir(path\x2C options\x2C originalErr\x2C callback);\x0d\n      else\x0d\n        unlink(path\x2C callback);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdir(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  rmdir(path\x2C (err) => {\x0d\n    if (err) {\x0d\n      if (notEmptyErrorCodes.has(err.code))\x0d\n        return _rmchildren(path\x2C options\x2C callback);\x0d\n      if (err.code === 'ENOTDIR')\x0d\n        return callback(originalErr);\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmchildren(path\x2C options\x2C callback) {\x0d\n  const pathBuf = Buffer.from(path);\x0d\n\x0d\n  readdir(pathBuf\x2C readdirEncoding\x2C (err\x2C files) => {\x0d\n    if (err)\x0d\n      return callback(err);\x0d\n\x0d\n    let numFiles = files.length;\x0d\n\x0d\n    if (numFiles === 0)\x0d\n      return rmdir(path\x2C callback);\x0d\n\x0d\n    let done = false;\x0d\n\x0d\n    ArrayPrototypeForEach(files\x2C (child) => {\x0d\n      const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n      rimraf(childPath\x2C options\x2C (err) => {\x0d\n        if (done)\x0d\n          return;\x0d\n\x0d\n        if (err) {\x0d\n          done = true;\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        numFiles--;\x0d\n        if (numFiles === 0)\x0d\n          rmdir(path\x2C callback);\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafPromises(path\x2C options) {\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    rimraf(path\x2C options\x2C (err) => {\x0d\n      if (err)\x0d\n        return reject(err);\x0d\n\x0d\n      resolve();\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafSync(path\x2C options) {\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = lstatSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    // Windows can EPERM on stat.\x0d\n    if (isWindows && err.code === 'EPERM')\x0d\n      fixWinEPERMSync(path\x2C options\x2C err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    // SunOS lets the root user unlink directories.\x0d\n    if (stats?.isDirectory())\x0d\n      _rmdirSync(path\x2C options\x2C null);\x0d\n    else\x0d\n      _unlinkSync(path\x2C options);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'EPERM')\x0d\n      return epermHandlerSync(path\x2C options\x2C err);\x0d\n    if (err.code !== 'EISDIR')\x0d\n      throw err;\x0d\n\x0d\n    _rmdirSync(path\x2C options\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _unlinkSync(path\x2C options) {\x0d\n  const tries = options.maxRetries + 1;\x0d\n\x0d\n  for (let i = 1; i <= tries; i++) {\x0d\n    try {\x0d\n      return unlinkSync(path);\x0d\n    } catch (err) {\x0d\n      // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n      // than zero\x2C and an error was encountered that warrants a retry.\x0d\n      if (retryErrorCodes.has(err.code) &&\x0d\n          i < tries &&\x0d\n          options.retryDelay > 0) {\x0d\n        sleep(i * options.retryDelay);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdirSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    rmdirSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'ENOTDIR')\x0d\n      throw originalErr;\x0d\n\x0d\n    if (notEmptyErrorCodes.has(err.code)) {\x0d\n      // Removing failed. Try removing all children and then retrying the\x0d\n      // original removal. Windows has a habit of not closing handles promptly\x0d\n      // when files are deleted\x2C resulting in spurious ENOTEMPTY failures. Work\x0d\n      // around that issue by retrying on Windows.\x0d\n      const pathBuf = Buffer.from(path);\x0d\n\x0d\n      ArrayPrototypeForEach(readdirSync(pathBuf\x2C readdirEncoding)\x2C (child) => {\x0d\n        const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n        rimrafSync(childPath\x2C options);\x0d\n      });\x0d\n\x0d\n      const tries = options.maxRetries + 1;\x0d\n\x0d\n      for (let i = 1; i <= tries; i++) {\x0d\n        try {\x0d\n          return fs.rmdirSync(path);\x0d\n        } catch (err) {\x0d\n          // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n          // than zero\x2C and an error was encountered that warrants a retry.\x0d\n          if (retryErrorCodes.has(err.code) &&\x0d\n              i < tries &&\x0d\n              options.retryDelay > 0) {\x0d\n            sleep(i * options.retryDelay);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERMSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    chmodSync(path\x2C 0o666);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = statSync(path\x2C { throwIfNoEntry: false });\x0d\n  } catch {\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  if (stats === undefined) return;\x0d\n\x0d\n  if (stats.isDirectory())\x0d\n    _rmdirSync(path\x2C options\x2C originalErr);\x0d\n  else\x0d\n    _unlinkSync(path\x2C options);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = { rimraf\x2C rimrafPromises\x2C rimrafSync };\x0d\n
code-source-info,0x3dde95c114e,128,0,7392,C0O0C4O7392,,
code-creation,Function,10,178657,0x3dde95c174e,409, node:internal/fs/rimraf:1:1,0x36339d3ff88,~
code-source-info,0x3dde95c174e,128,0,7392,C0O0C139O377C145O403C151O415C156O464C159O464C164O453C170O495C173O495C177O495C179O671C182O522C188O532C194O546C200O556C206O570C212O582C218O598C224O608C230O622C236O631C242O644C248O655C254O692C257O692C262O684C267O733C270O733C275O718C281O771C284O771C289O761C295O825C302O825C307O825C309O897C316O897C321O897C323O994C330O1003C333O986C335O1038C345O1038C347O1098C357O1098C359O1165C361O1165C363O1194C366O1201C371O1201C376O1194C378O7334C385O7353C391O7361C397O7377C403O7349C408O7391,,
code-creation,LazyCompile,10,178858,0x3dde95c25e6,188,from node:buffer:296:28,0x2e6f8176f90,~
script-source,24,node:buffer,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  MathFloor\x2C\x0d\n  MathMin\x2C\x0d\n  MathTrunc\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n  SymbolSpecies\x2C\x0d\n  SymbolToPrimitive\x2C\x0d\n  TypedArrayPrototypeGetByteLength\x2C\x0d\n  TypedArrayPrototypeFill\x2C\x0d\n  TypedArrayPrototypeSet\x2C\x0d\n  Uint8Array\x2C\x0d\n  Uint8ArrayPrototype\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  byteLengthUtf8\x2C\x0d\n  compare: _compare\x2C\x0d\n  compareOffset\x2C\x0d\n  createFromString\x2C\x0d\n  fill: bindingFill\x2C\x0d\n  indexOfBuffer\x2C\x0d\n  indexOfNumber\x2C\x0d\n  indexOfString\x2C\x0d\n  swap16: _swap16\x2C\x0d\n  swap32: _swap32\x2C\x0d\n  swap64: _swap64\x2C\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  getOwnNonIndexProperties\x2C\x0d\n  propertyFilter: {\x0d\n    ALL_PROPERTIES\x2C\x0d\n    ONLY_ENUMERABLE\x0d\n  }\x2C\x0d\n} = internalBinding('util');\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  kIsEncodingSymbol\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  inspect: utilInspect\x0d\n} = require('internal/util/inspect');\x0d\nconst { encodings } = internalBinding('string_decoder');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_BUFFER_SIZE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_UNKNOWN_ENCODING\x0d\n  }\x2C\x0d\n  genericNodeError\x2C\x0d\n  hideStackFrames\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateNumber\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n// Provide validateInteger() but with kMaxLength as the default maximum value.\x0d\nconst validateOffset = (value\x2C name\x2C min = 0\x2C max = kMaxLength) =>\x0d\n  validateInteger(value\x2C name\x2C min\x2C max);\x0d\n\x0d\nconst {\x0d\n  FastBuffer\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  createUnsafeBuffer\x0d\n} = require('internal/buffer');\x0d\n\x0d\nconst {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n} = require('internal/blob');\x0d\n\x0d\nFastBuffer.prototype.constructor = Buffer;\x0d\nBuffer.prototype = FastBuffer.prototype;\x0d\naddBufferPrototypeMethods(Buffer.prototype);\x0d\n\x0d\nconst constants = ObjectDefineProperties({}\x2C {\x0d\n  MAX_LENGTH: {\x0d\n    value: kMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x2C\x0d\n  MAX_STRING_LENGTH: {\x0d\n    value: kStringMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.poolSize = 8 * 1024;\x0d\nlet poolSize\x2C poolOffset\x2C allocPool;\x0d\n\x0d\nconst encodingsMap = ObjectCreate(null);\x0d\nfor (let i = 0; i < encodings.length; ++i)\x0d\n  encodingsMap[encodings[i]] = i;\x0d\n\x0d\nfunction createPool() {\x0d\n  poolSize = Buffer.poolSize;\x0d\n  allocPool = createUnsafeBuffer(poolSize).buffer;\x0d\n  markAsUntransferable(allocPool);\x0d\n  poolOffset = 0;\x0d\n}\x0d\ncreatePool();\x0d\n\x0d\nfunction alignPool() {\x0d\n  // Ensure aligned slices\x0d\n  if (poolOffset & 0x7) {\x0d\n    poolOffset |= 0x7;\x0d\n    poolOffset++;\x0d\n  }\x0d\n}\x0d\n\x0d\nlet bufferWarningAlreadyEmitted = false;\x0d\nlet nodeModulesCheckCounter = 0;\x0d\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\x0d\n                      'issues. Please use the Buffer.alloc()\x2C ' +\x0d\n                      'Buffer.allocUnsafe()\x2C or Buffer.from() methods instead.';\x0d\n\x0d\nfunction showFlaggedDeprecation() {\x0d\n  if (bufferWarningAlreadyEmitted ||\x0d\n      ++nodeModulesCheckCounter > 10000 ||\x0d\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\x0d\n       isInsideNodeModules())) {\x0d\n    // We don't emit a warning\x2C because we either:\x0d\n    // - Already did so\x2C or\x0d\n    // - Already checked too many times whether a call is coming\x0d\n    //   from node_modules and want to stop slowing down things\x2C or\x0d\n    // - We aren't running with `--pending-deprecation` enabled\x2C\x0d\n    //   and the code is inside `node_modules`.\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  process.emitWarning(bufferWarning\x2C 'DeprecationWarning'\x2C 'DEP0005');\x0d\n  bufferWarningAlreadyEmitted = true;\x0d\n}\x0d\n\x0d\nfunction toInteger(n\x2C defaultVal) {\x0d\n  n = +n;\x0d\n  if (!NumberIsNaN(n) &&\x0d\n      n >= NumberMIN_SAFE_INTEGER &&\x0d\n      n <= NumberMAX_SAFE_INTEGER) {\x0d\n    return ((n % 1) === 0 ? n : MathFloor(n));\x0d\n  }\x0d\n  return defaultVal;\x0d\n}\x0d\n\x0d\nfunction _copy(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (!isUint8Array(source))\x0d\n    throw new ERR_INVALID_ARG_TYPE('source'\x2C ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n  if (!isUint8Array(target))\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n\x0d\n  if (targetStart === undefined) {\x0d\n    targetStart = 0;\x0d\n  } else {\x0d\n    targetStart = toInteger(targetStart\x2C 0);\x0d\n    if (targetStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('targetStart'\x2C '>= 0'\x2C targetStart);\x0d\n  }\x0d\n\x0d\n  if (sourceStart === undefined) {\x0d\n    sourceStart = 0;\x0d\n  } else {\x0d\n    sourceStart = toInteger(sourceStart\x2C 0);\x0d\n    if (sourceStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceStart'\x2C '>= 0'\x2C sourceStart);\x0d\n  }\x0d\n\x0d\n  if (sourceEnd === undefined) {\x0d\n    sourceEnd = source.length;\x0d\n  } else {\x0d\n    sourceEnd = toInteger(sourceEnd\x2C 0);\x0d\n    if (sourceEnd < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceEnd'\x2C '>= 0'\x2C sourceEnd);\x0d\n  }\x0d\n\x0d\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\x0d\n    return 0;\x0d\n\x0d\n  if (sourceStart > source.length) {\x0d\n    throw new ERR_OUT_OF_RANGE('sourceStart'\x2C\x0d\n                               `<= ${source.length}`\x2C\x0d\n                               sourceStart);\x0d\n  }\x0d\n\x0d\n  return _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n}\x0d\n\x0d\nfunction _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (sourceEnd - sourceStart > target.length - targetStart)\x0d\n    sourceEnd = sourceStart + target.length - targetStart;\x0d\n\x0d\n  let nb = sourceEnd - sourceStart;\x0d\n  const sourceLen = source.length - sourceStart;\x0d\n  if (nb > sourceLen)\x0d\n    nb = sourceLen;\x0d\n\x0d\n  if (sourceStart !== 0 || sourceEnd < source.length)\x0d\n    source = new Uint8Array(source.buffer\x2C source.byteOffset + sourceStart\x2C nb);\x0d\n\x0d\n  TypedArrayPrototypeSet(target\x2C source\x2C targetStart);\x0d\n\x0d\n  return nb;\x0d\n}\x0d\n\x0d\n/**\x0d\n * The Buffer() constructor is deprecated in documentation and should not be\x0d\n * used moving forward. Rather\x2C developers should use one of the three new\x0d\n * factory APIs: Buffer.from()\x2C Buffer.allocUnsafe() or Buffer.alloc() based on\x0d\n * their specific needs. There is no runtime deprecation because of the extent\x0d\n * to which the Buffer constructor is used in the ecosystem currently -- a\x0d\n * runtime deprecation would introduce too much breakage at this time. It's not\x0d\n * likely that the Buffer constructors would ever actually be removed.\x0d\n * Deprecation Code: DEP0005\x0d\n */\x0d\nfunction Buffer(arg\x2C encodingOrOffset\x2C length) {\x0d\n  showFlaggedDeprecation();\x0d\n  // Common case.\x0d\n  if (typeof arg === 'number') {\x0d\n    if (typeof encodingOrOffset === 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('string'\x2C 'string'\x2C arg);\x0d\n    }\x0d\n    return Buffer.alloc(arg);\x0d\n  }\x0d\n  return Buffer.from(arg\x2C encodingOrOffset\x2C length);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Buffer\x2C SymbolSpecies\x2C {\x0d\n  enumerable: false\x2C\x0d\n  configurable: true\x2C\x0d\n  get() { return FastBuffer; }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Functionally equivalent to Buffer(arg\x2C encoding) but throws a TypeError\x0d\n * if value is a number.\x0d\n * Buffer.from(str[\x2C encoding])\x0d\n * Buffer.from(array)\x0d\n * Buffer.from(buffer)\x0d\n * Buffer.from(arrayBuffer[\x2C byteOffset[\x2C length]])\x0d\n */\x0d\nBuffer.from = function from(value\x2C encodingOrOffset\x2C length) {\x0d\n  if (typeof value === 'string')\x0d\n    return fromString(value\x2C encodingOrOffset);\x0d\n\x0d\n  if (typeof value === 'object' && value !== null) {\x0d\n    if (isAnyArrayBuffer(value))\x0d\n      return fromArrayBuffer(value\x2C encodingOrOffset\x2C length);\x0d\n\x0d\n    const valueOf = value.valueOf && value.valueOf();\x0d\n    if (valueOf != null &&\x0d\n        valueOf !== value &&\x0d\n        (typeof valueOf === 'string' || typeof valueOf === 'object')) {\x0d\n      return from(valueOf\x2C encodingOrOffset\x2C length);\x0d\n    }\x0d\n\x0d\n    const b = fromObject(value);\x0d\n    if (b)\x0d\n      return b;\x0d\n\x0d\n    if (typeof value[SymbolToPrimitive] === 'function') {\x0d\n      const primitive = value[SymbolToPrimitive]('string');\x0d\n      if (typeof primitive === 'string') {\x0d\n        return fromString(primitive\x2C encodingOrOffset);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'first argument'\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'ArrayBuffer'\x2C 'Array'\x2C 'Array-like Object']\x2C\x0d\n    value\x0d\n  );\x0d\n};\x0d\n\x0d\n// Identical to the built-in %TypedArray%.of()\x2C but avoids using the deprecated\x0d\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\x0d\n// adding a `prototype` property and making the function a constructor.\x0d\n//\x0d\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\x0d\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\x0d\nconst of = (...items) => {\x0d\n  const newObj = createUnsafeBuffer(items.length);\x0d\n  for (let k = 0; k < items.length; k++)\x0d\n    newObj[k] = items[k];\x0d\n  return newObj;\x0d\n};\x0d\nBuffer.of = of;\x0d\n\x0d\nObjectSetPrototypeOf(Buffer\x2C Uint8Array);\x0d\n\x0d\n// The 'assertSize' method will remove itself from the callstack when an error\x0d\n// occurs. This is done simply to keep the internal details of the\x0d\n// implementation from bleeding out to users.\x0d\nconst assertSize = hideStackFrames((size) => {\x0d\n  validateNumber(size\x2C 'size');\x0d\n  if (!(size >= 0 && size <= kMaxLength)) {\x0d\n    throw new ERR_INVALID_ARG_VALUE.RangeError('size'\x2C size);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Creates a new filled Buffer instance.\x0d\n * alloc(size[\x2C fill[\x2C encoding]])\x0d\n */\x0d\nBuffer.alloc = function alloc(size\x2C fill\x2C encoding) {\x0d\n  assertSize(size);\x0d\n  if (fill !== undefined && fill !== 0 && size > 0) {\x0d\n    const buf = createUnsafeBuffer(size);\x0d\n    return _fill(buf\x2C fill\x2C 0\x2C buf.length\x2C encoding);\x0d\n  }\x0d\n  return new FastBuffer(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to Buffer(num)\x2C by default creates a non-zero-filled Buffer\x0d\n * instance. If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafe = function allocUnsafe(size) {\x0d\n  assertSize(size);\x0d\n  return allocate(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to SlowBuffer(num)\x2C by default creates a non-zero-filled\x0d\n * Buffer instance that is not allocated off the pre-initialized pool.\x0d\n * If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\x0d\n  assertSize(size);\x0d\n  return createUnsafeBuffer(size);\x0d\n};\x0d\n\x0d\n// If --zero-fill-buffers command line argument is set\x2C a zero-filled\x0d\n// buffer is returned.\x0d\nfunction SlowBuffer(length) {\x0d\n  assertSize(length);\x0d\n  return createUnsafeBuffer(length);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(SlowBuffer.prototype\x2C Uint8ArrayPrototype);\x0d\nObjectSetPrototypeOf(SlowBuffer\x2C Uint8Array);\x0d\n\x0d\nfunction allocate(size) {\x0d\n  if (size <= 0) {\x0d\n    return new FastBuffer();\x0d\n  }\x0d\n  if (size < (Buffer.poolSize >>> 1)) {\x0d\n    if (size > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C size);\x0d\n    poolOffset += size;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return createUnsafeBuffer(size);\x0d\n}\x0d\n\x0d\nfunction fromStringFast(string\x2C ops) {\x0d\n  const length = ops.byteLength(string);\x0d\n\x0d\n  if (length >= (Buffer.poolSize >>> 1))\x0d\n    return createFromString(string\x2C ops.encodingVal);\x0d\n\x0d\n  if (length > (poolSize - poolOffset))\x0d\n    createPool();\x0d\n  let b = new FastBuffer(allocPool\x2C poolOffset\x2C length);\x0d\n  const actual = ops.write(b\x2C string\x2C 0\x2C length);\x0d\n  if (actual !== length) {\x0d\n    // byteLength() may overestimate. That's a rare case\x2C though.\x0d\n    b = new FastBuffer(allocPool\x2C poolOffset\x2C actual);\x0d\n  }\x0d\n  poolOffset += actual;\x0d\n  alignPool();\x0d\n  return b;\x0d\n}\x0d\n\x0d\nfunction fromString(string\x2C encoding) {\x0d\n  let ops;\x0d\n  if (typeof encoding !== 'string' || encoding.length === 0) {\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n    ops = encodingOps.utf8;\x0d\n    encoding = undefined;\x0d\n  } else {\x0d\n    ops = getEncodingOps(encoding);\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n  }\x0d\n  return fromStringFast(string\x2C ops);\x0d\n}\x0d\n\x0d\nfunction fromArrayBuffer(obj\x2C byteOffset\x2C length) {\x0d\n  // Convert byteOffset to integer\x0d\n  if (byteOffset === undefined) {\x0d\n    byteOffset = 0;\x0d\n  } else {\x0d\n    byteOffset = +byteOffset;\x0d\n    if (NumberIsNaN(byteOffset))\x0d\n      byteOffset = 0;\x0d\n  }\x0d\n\x0d\n  const maxLength = obj.byteLength - byteOffset;\x0d\n\x0d\n  if (maxLength < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = maxLength;\x0d\n  } else {\x0d\n    // Convert length to non-negative integer.\x0d\n    length = +length;\x0d\n    if (length > 0) {\x0d\n      if (length > maxLength)\x0d\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\x0d\n    } else {\x0d\n      length = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return new FastBuffer(obj\x2C byteOffset\x2C length);\x0d\n}\x0d\n\x0d\nfunction fromArrayLike(obj) {\x0d\n  if (obj.length <= 0)\x0d\n    return new FastBuffer();\x0d\n  if (obj.length < (Buffer.poolSize >>> 1)) {\x0d\n    if (obj.length > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C obj.length);\x0d\n    TypedArrayPrototypeSet(b\x2C obj\x2C 0);\x0d\n    poolOffset += obj.length;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return new FastBuffer(obj);\x0d\n}\x0d\n\x0d\nfunction fromObject(obj) {\x0d\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\x0d\n    if (typeof obj.length !== 'number') {\x0d\n      return new FastBuffer();\x0d\n    }\x0d\n    return fromArrayLike(obj);\x0d\n  }\x0d\n\x0d\n  if (obj.type === 'Buffer' && ArrayIsArray(obj.data)) {\x0d\n    return fromArrayLike(obj.data);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Static methods\x0d\n\x0d\nBuffer.isBuffer = function isBuffer(b) {\x0d\n  return b instanceof Buffer;\x0d\n};\x0d\n\x0d\nBuffer.compare = function compare(buf1\x2C buf2) {\x0d\n  if (!isUint8Array(buf1)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf1'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf1);\x0d\n  }\x0d\n\x0d\n  if (!isUint8Array(buf2)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf2'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf2);\x0d\n  }\x0d\n\x0d\n  if (buf1 === buf2) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  return _compare(buf1\x2C buf2);\x0d\n};\x0d\n\x0d\nBuffer.isEncoding = function isEncoding(encoding) {\x0d\n  return typeof encoding === 'string' && encoding.length !== 0 &&\x0d\n         normalizeEncoding(encoding) !== undefined;\x0d\n};\x0d\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\x0d\n\x0d\nBuffer.concat = function concat(list\x2C length) {\x0d\n  validateArray(list\x2C 'list');\x0d\n\x0d\n  if (list.length === 0)\x0d\n    return new FastBuffer();\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = 0;\x0d\n    for (let i = 0; i < list.length; i++) {\x0d\n      if (list[i].length) {\x0d\n        length += list[i].length;\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    validateOffset(length\x2C 'length');\x0d\n  }\x0d\n\x0d\n  const buffer = Buffer.allocUnsafe(length);\x0d\n  let pos = 0;\x0d\n  for (let i = 0; i < list.length; i++) {\x0d\n    const buf = list[i];\x0d\n    if (!isUint8Array(buf)) {\x0d\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\x0d\n      // Instead\x2C find the proper error code for this.\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        `list[${i}]`\x2C ['Buffer'\x2C 'Uint8Array']\x2C list[i]);\x0d\n    }\x0d\n    pos += _copyActual(buf\x2C buffer\x2C pos\x2C 0\x2C buf.length);\x0d\n  }\x0d\n\x0d\n  // Note: `length` is always equal to `buffer.length` at this point\x0d\n  if (pos < length) {\x0d\n    // Zero-fill the remaining bytes if the specified `length` was more than\x0d\n    // the actual total length\x2C i.e. if we have some remaining allocated bytes\x0d\n    // there were not initialized.\x0d\n    TypedArrayPrototypeFill(buffer\x2C 0\x2C pos\x2C length);\x0d\n  }\x0d\n\x0d\n  return buffer;\x0d\n};\x0d\n\x0d\nfunction base64ByteLength(str\x2C bytes) {\x0d\n  // Handle padding\x0d\n  if (StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n  if (bytes > 1 && StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n\x0d\n  // Base64 ratio: 3/4\x0d\n  return (bytes * 3) >>> 2;\x0d\n}\x0d\n\x0d\nconst encodingOps = {\x0d\n  utf8: {\x0d\n    encoding: 'utf8'\x2C\x0d\n    encodingVal: encodingsMap.utf8\x2C\x0d\n    byteLength: byteLengthUtf8\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.utf8Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.utf8Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf8\x2C dir)\x0d\n  }\x2C\x0d\n  ucs2: {\x0d\n    encoding: 'ucs2'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  utf16le: {\x0d\n    encoding: 'utf16le'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  latin1: {\x0d\n    encoding: 'latin1'\x2C\x0d\n    encodingVal: encodingsMap.latin1\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.latin1Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.latin1Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.latin1\x2C dir)\x0d\n  }\x2C\x0d\n  ascii: {\x0d\n    encoding: 'ascii'\x2C\x0d\n    encodingVal: encodingsMap.ascii\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.asciiWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.asciiSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.ascii)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.ascii\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64: {\x0d\n    encoding: 'base64'\x2C\x0d\n    encodingVal: encodingsMap.base64\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.base64Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64url: {\x0d\n    encoding: 'base64url'\x2C\x0d\n    encodingVal: encodingsMap.base64url\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) =>\x0d\n      buf.base64urlWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64urlSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64url)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64url\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  hex: {\x0d\n    encoding: 'hex'\x2C\x0d\n    encodingVal: encodingsMap.hex\x2C\x0d\n    byteLength: (string) => string.length >>> 1\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.hexWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.hexSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.hex)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.hex\x2C\x0d\n                    dir)\x0d\n  }\x0d\n};\x0d\nfunction getEncodingOps(encoding) {\x0d\n  encoding += '';\x0d\n  switch (encoding.length) {\x0d\n    case 4:\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 5:\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 7:\x0d\n      if (encoding === 'utf16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 8:\x0d\n      if (encoding === 'utf-16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf-16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 6:\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      break;\x0d\n    case 3:\x0d\n      if (encoding === 'hex' || StringPrototypeToLowerCase(encoding) === 'hex')\x0d\n        return encodingOps.hex;\x0d\n      break;\x0d\n    case 9:\x0d\n      if (encoding === 'base64url' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'base64url')\x0d\n        return encodingOps.base64url;\x0d\n      break;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction byteLength(string\x2C encoding) {\x0d\n  if (typeof string !== 'string') {\x0d\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\x0d\n      return string.byteLength;\x0d\n    }\x0d\n\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'string'\x2C ['string'\x2C 'Buffer'\x2C 'ArrayBuffer']\x2C string\x0d\n    );\x0d\n  }\x0d\n\x0d\n  const len = string.length;\x0d\n  const mustMatch = (arguments.length > 2 && arguments[2] === true);\x0d\n  if (!mustMatch && len === 0)\x0d\n    return 0;\x0d\n\x0d\n  if (!encoding)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n  return ops.byteLength(string);\x0d\n}\x0d\n\x0d\nBuffer.byteLength = byteLength;\x0d\n\x0d\n// For backwards compatibility.\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'parent'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.buffer;\x0d\n  }\x0d\n});\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'offset'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.byteOffset;\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.prototype.copy =\x0d\n  function copy(target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n    return _copy(this\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n  };\x0d\n\x0d\n// No need to verify that "buf.length <= MAX_UINT32" since it's a read-only\x0d\n// property of a typed array.\x0d\n// This behaves neither like String nor Uint8Array in that we set start/end\x0d\n// to their upper/lower bounds if the value passed is out of range.\x0d\nBuffer.prototype.toString = function toString(encoding\x2C start\x2C end) {\x0d\n  if (arguments.length === 0) {\x0d\n    return this.utf8Slice(0\x2C this.length);\x0d\n  }\x0d\n\x0d\n  const len = this.length;\x0d\n\x0d\n  if (start <= 0)\x0d\n    start = 0;\x0d\n  else if (start >= len)\x0d\n    return '';\x0d\n  else\x0d\n    start |= 0;\x0d\n\x0d\n  if (end === undefined || end > len)\x0d\n    end = len;\x0d\n  else\x0d\n    end |= 0;\x0d\n\x0d\n  if (end <= start)\x0d\n    return '';\x0d\n\x0d\n  if (encoding === undefined)\x0d\n    return this.utf8Slice(start\x2C end);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n\x0d\n  return ops.slice(this\x2C start\x2C end);\x0d\n};\x0d\n\x0d\nBuffer.prototype.equals = function equals(otherBuffer) {\x0d\n  if (!isUint8Array(otherBuffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'otherBuffer'\x2C ['Buffer'\x2C 'Uint8Array']\x2C otherBuffer);\x0d\n  }\x0d\n\x0d\n  if (this === otherBuffer)\x0d\n    return true;\x0d\n\x0d\n  if (this.byteLength !== otherBuffer.byteLength)\x0d\n    return false;\x0d\n\x0d\n  return this.byteLength === 0 || _compare(this\x2C otherBuffer) === 0;\x0d\n};\x0d\n\x0d\nlet INSPECT_MAX_BYTES = 50;\x0d\n// Override how buffers are presented by util.inspect().\x0d\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes\x2C ctx) {\x0d\n  const max = INSPECT_MAX_BYTES;\x0d\n  const actualMax = MathMin(max\x2C this.length);\x0d\n  const remaining = this.length - max;\x0d\n  let str = StringPrototypeTrim(StringPrototypeReplace(\x0d\n    this.hexSlice(0\x2C actualMax)\x2C /(.{2})/g\x2C '$1 '));\x0d\n  if (remaining > 0)\x0d\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\x0d\n  // Inspect special properties as well\x2C if possible.\x0d\n  if (ctx) {\x0d\n    let extras = false;\x0d\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\x0d\n    const obj = ObjectCreate(null);\x0d\n    ArrayPrototypeForEach(getOwnNonIndexProperties(this\x2C filter)\x2C\x0d\n                          (key) => {\x0d\n                            extras = true;\x0d\n                            obj[key] = this[key];\x0d\n                          });\x0d\n    if (extras) {\x0d\n      if (this.length !== 0)\x0d\n        str += '\x2C ';\x0d\n      // '[Object: null prototype] {'.length === 26\x0d\n      // This is guarded with a test.\x0d\n      str += StringPrototypeSlice(utilInspect(obj\x2C {\x0d\n        ...ctx\x2C\x0d\n        breakLength: Infinity\x2C\x0d\n        compact: true\x0d\n      })\x2C 27\x2C -2);\x0d\n    }\x0d\n  }\x0d\n  return `<${this.constructor.name} ${str}>`;\x0d\n};\x0d\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\x0d\n\x0d\nBuffer.prototype.compare = function compare(target\x2C\x0d\n                                            targetStart\x2C\x0d\n                                            targetEnd\x2C\x0d\n                                            sourceStart\x2C\x0d\n                                            sourceEnd) {\x0d\n  if (!isUint8Array(target)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n  }\x0d\n  if (arguments.length === 1)\x0d\n    return _compare(this\x2C target);\x0d\n\x0d\n  if (targetStart === undefined)\x0d\n    targetStart = 0;\x0d\n  else\x0d\n    validateOffset(targetStart\x2C 'targetStart');\x0d\n\x0d\n  if (targetEnd === undefined)\x0d\n    targetEnd = target.length;\x0d\n  else\x0d\n    validateOffset(targetEnd\x2C 'targetEnd'\x2C 0\x2C target.length);\x0d\n\x0d\n  if (sourceStart === undefined)\x0d\n    sourceStart = 0;\x0d\n  else\x0d\n    validateOffset(sourceStart\x2C 'sourceStart');\x0d\n\x0d\n  if (sourceEnd === undefined)\x0d\n    sourceEnd = this.length;\x0d\n  else\x0d\n    validateOffset(sourceEnd\x2C 'sourceEnd'\x2C 0\x2C this.length);\x0d\n\x0d\n  if (sourceStart >= sourceEnd)\x0d\n    return (targetStart >= targetEnd ? 0 : -1);\x0d\n  if (targetStart >= targetEnd)\x0d\n    return 1;\x0d\n\x0d\n  return compareOffset(this\x2C target\x2C targetStart\x2C sourceStart\x2C targetEnd\x2C\x0d\n                       sourceEnd);\x0d\n};\x0d\n\x0d\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`\x2C\x0d\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\x0d\n//\x0d\n// Arguments:\x0d\n// - buffer - a Buffer to search\x0d\n// - val - a string\x2C Buffer\x2C or number\x0d\n// - byteOffset - an index into `buffer`; will be clamped to an int32\x0d\n// - encoding - an optional encoding\x2C relevant if val is a string\x0d\n// - dir - true for indexOf\x2C false for lastIndexOf\x0d\nfunction bidirectionalIndexOf(buffer\x2C val\x2C byteOffset\x2C encoding\x2C dir) {\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (typeof byteOffset === 'string') {\x0d\n    encoding = byteOffset;\x0d\n    byteOffset = undefined;\x0d\n  } else if (byteOffset > 0x7fffffff) {\x0d\n    byteOffset = 0x7fffffff;\x0d\n  } else if (byteOffset < -0x80000000) {\x0d\n    byteOffset = -0x80000000;\x0d\n  }\x0d\n  // Coerce to Number. Values like null and [] become 0.\x0d\n  byteOffset = +byteOffset;\x0d\n  // If the offset is undefined\x2C "foo"\x2C {}\x2C coerces to NaN\x2C search whole buffer.\x0d\n  if (NumberIsNaN(byteOffset)) {\x0d\n    byteOffset = dir ? 0 : (buffer.length || buffer.byteLength);\x0d\n  }\x0d\n  dir = !!dir;  // Cast to bool.\x0d\n\x0d\n  if (typeof val === 'number')\x0d\n    return indexOfNumber(buffer\x2C val >>> 0\x2C byteOffset\x2C dir);\x0d\n\x0d\n  let ops;\x0d\n  if (encoding === undefined)\x0d\n    ops = encodingOps.utf8;\x0d\n  else\x0d\n    ops = getEncodingOps(encoding);\x0d\n\x0d\n  if (typeof val === 'string') {\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    return ops.indexOf(buffer\x2C val\x2C byteOffset\x2C dir);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(val)) {\x0d\n    const encodingVal =\x0d\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\x0d\n    return indexOfBuffer(buffer\x2C val\x2C byteOffset\x2C encodingVal\x2C dir);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'value'\x2C ['number'\x2C 'string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C val\x0d\n  );\x0d\n}\x0d\n\x0d\nBuffer.prototype.indexOf = function indexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C true);\x0d\n};\x0d\n\x0d\nBuffer.prototype.lastIndexOf = function lastIndexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C false);\x0d\n};\x0d\n\x0d\nBuffer.prototype.includes = function includes(val\x2C byteOffset\x2C encoding) {\x0d\n  return this.indexOf(val\x2C byteOffset\x2C encoding) !== -1;\x0d\n};\x0d\n\x0d\n// Usage:\x0d\n//    buffer.fill(number[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(buffer[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(string[\x2C offset[\x2C end]][\x2C encoding])\x0d\nBuffer.prototype.fill = function fill(value\x2C offset\x2C end\x2C encoding) {\x0d\n  return _fill(this\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n};\x0d\n\x0d\nfunction _fill(buf\x2C value\x2C offset\x2C end\x2C encoding) {\x0d\n  if (typeof value === 'string') {\x0d\n    if (offset === undefined || typeof offset === 'string') {\x0d\n      encoding = offset;\x0d\n      offset = 0;\x0d\n      end = buf.length;\x0d\n    } else if (typeof end === 'string') {\x0d\n      encoding = end;\x0d\n      end = buf.length;\x0d\n    }\x0d\n\x0d\n    const normalizedEncoding = normalizeEncoding(encoding);\x0d\n    if (normalizedEncoding === undefined) {\x0d\n      validateString(encoding\x2C 'encoding');\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    }\x0d\n\x0d\n    if (value.length === 0) {\x0d\n      // If value === '' default to zero.\x0d\n      value = 0;\x0d\n    } else if (value.length === 1) {\x0d\n      // Fast path: If `value` fits into a single byte\x2C use that numeric value.\x0d\n      if (normalizedEncoding === 'utf8') {\x0d\n        const code = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n        if (code < 128) {\x0d\n          value = code;\x0d\n        }\x0d\n      } else if (normalizedEncoding === 'latin1') {\x0d\n        value = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    encoding = undefined;\x0d\n  }\x0d\n\x0d\n  if (offset === undefined) {\x0d\n    offset = 0;\x0d\n    end = buf.length;\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset');\x0d\n    // Invalid ranges are not set to a default\x2C so can range check early.\x0d\n    if (end === undefined) {\x0d\n      end = buf.length;\x0d\n    } else {\x0d\n      validateOffset(end\x2C 'end'\x2C 0\x2C buf.length);\x0d\n    }\x0d\n    if (offset >= end)\x0d\n      return buf;\x0d\n  }\x0d\n\x0d\n\x0d\n  if (typeof value === 'number') {\x0d\n    // OOB check\x0d\n    const byteLen = TypedArrayPrototypeGetByteLength(buf);\x0d\n    const fillLength = end - offset;\x0d\n    if (offset > end || fillLength + offset > byteLen)\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n    TypedArrayPrototypeFill(buf\x2C value\x2C offset\x2C end);\x0d\n  } else {\x0d\n    const res = bindingFill(buf\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n    if (res < 0) {\x0d\n      if (res === -1)\x0d\n        throw new ERR_INVALID_ARG_VALUE('value'\x2C value);\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return buf;\x0d\n}\x0d\n\x0d\nBuffer.prototype.write = function write(string\x2C offset\x2C length\x2C encoding) {\x0d\n  // Buffer#write(string);\x0d\n  if (offset === undefined) {\x0d\n    return this.utf8Write(string\x2C 0\x2C this.length);\x0d\n  }\x0d\n  // Buffer#write(string\x2C encoding)\x0d\n  if (length === undefined && typeof offset === 'string') {\x0d\n    encoding = offset;\x0d\n    length = this.length;\x0d\n    offset = 0;\x0d\n\x0d\n  // Buffer#write(string\x2C offset[\x2C length][\x2C encoding])\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset'\x2C 0\x2C this.length);\x0d\n\x0d\n    const remaining = this.length - offset;\x0d\n\x0d\n    if (length === undefined) {\x0d\n      length = remaining;\x0d\n    } else if (typeof length === 'string') {\x0d\n      encoding = length;\x0d\n      length = remaining;\x0d\n    } else {\x0d\n      validateOffset(length\x2C 'length'\x2C 0\x2C this.length);\x0d\n      if (length > remaining)\x0d\n        length = remaining;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (!encoding)\x0d\n    return this.utf8Write(string\x2C offset\x2C length);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n  return ops.write(this\x2C string\x2C offset\x2C length);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toJSON = function toJSON() {\x0d\n  if (this.length > 0) {\x0d\n    const data = new Array(this.length);\x0d\n    for (let i = 0; i < this.length; ++i)\x0d\n      data[i] = this[i];\x0d\n    return { type: 'Buffer'\x2C data };\x0d\n  }\x0d\n  return { type: 'Buffer'\x2C data: [] };\x0d\n};\x0d\n\x0d\nfunction adjustOffset(offset\x2C length) {\x0d\n  // Use Math.trunc() to convert offset to an integer value that can be larger\x0d\n  // than an Int32. Hence\x2C don't use offset | 0 or similar techniques.\x0d\n  offset = MathTrunc(offset);\x0d\n  if (offset === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n  if (offset < 0) {\x0d\n    offset += length;\x0d\n    return offset > 0 ? offset : 0;\x0d\n  }\x0d\n  if (offset < length) {\x0d\n    return offset;\x0d\n  }\x0d\n  return NumberIsNaN(offset) ? 0 : length;\x0d\n}\x0d\n\x0d\nBuffer.prototype.subarray = function subarray(start\x2C end) {\x0d\n  const srcLength = this.length;\x0d\n  start = adjustOffset(start\x2C srcLength);\x0d\n  end = end !== undefined ? adjustOffset(end\x2C srcLength) : srcLength;\x0d\n  const newLength = end > start ? end - start : 0;\x0d\n  return new FastBuffer(this.buffer\x2C this.byteOffset + start\x2C newLength);\x0d\n};\x0d\n\x0d\nBuffer.prototype.slice = function slice(start\x2C end) {\x0d\n  return this.subarray(start\x2C end);\x0d\n};\x0d\n\x0d\nfunction swap(b\x2C n\x2C m) {\x0d\n  const i = b[n];\x0d\n  b[n] = b[m];\x0d\n  b[m] = i;\x0d\n}\x0d\n\x0d\nBuffer.prototype.swap16 = function swap16() {\x0d\n  // For Buffer.length < 128\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 2 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\x0d\n  if (len < 128) {\x0d\n    for (let i = 0; i < len; i += 2)\x0d\n      swap(this\x2C i\x2C i + 1);\x0d\n    return this;\x0d\n  }\x0d\n  return _swap16(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap32 = function swap32() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 4 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 4) {\x0d\n      swap(this\x2C i\x2C i + 3);\x0d\n      swap(this\x2C i + 1\x2C i + 2);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap32(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap64 = function swap64() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 8 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 8) {\x0d\n      swap(this\x2C i\x2C i + 7);\x0d\n      swap(this\x2C i + 1\x2C i + 6);\x0d\n      swap(this\x2C i + 2\x2C i + 5);\x0d\n      swap(this\x2C i + 3\x2C i + 4);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap64(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\x0d\n\x0d\nlet transcode;\x0d\nif (internalBinding('config').hasIntl) {\x0d\n  const {\x0d\n    icuErrName\x2C\x0d\n    transcode: _transcode\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  // Transcodes the Buffer from one encoding to another\x2C returning a new\x0d\n  // Buffer instance.\x0d\n  transcode = function transcode(source\x2C fromEncoding\x2C toEncoding) {\x0d\n    if (!isUint8Array(source)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('source'\x2C\x0d\n                                     ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n    }\x0d\n    if (source.length === 0) return Buffer.alloc(0);\x0d\n\x0d\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\x0d\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\x0d\n    const result = _transcode(source\x2C fromEncoding\x2C toEncoding);\x0d\n    if (typeof result !== 'number')\x0d\n      return result;\x0d\n\x0d\n    const code = icuErrName(result);\x0d\n    const err = genericNodeError(\x0d\n      `Unable to transcode Buffer [${code}]`\x2C\x0d\n      { code: code\x2C errno: result }\x0d\n    );\x0d\n    throw err;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction btoa(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n  input = `${input}`;\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    if (input[n].charCodeAt(0) > 0xff)\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n  }\x0d\n  const buf = Buffer.from(input\x2C 'latin1');\x0d\n  return buf.toString('base64');\x0d\n}\x0d\n\x0d\nconst kBase64Digits =\x0d\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\x0d\n\x0d\nfunction atob(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n  input = `${input}`;\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    if (!kBase64Digits.includes(input[n]))\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n  }\x0d\n  return Buffer.from(input\x2C 'base64').toString('latin1');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n  Buffer\x2C\x0d\n  SlowBuffer\x2C\x0d\n  transcode\x2C\x0d\n  // Legacy\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x2C\x0d\n  btoa\x2C\x0d\n  atob\x2C\x0d\n};\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  constants: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  INSPECT_MAX_BYTES: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() { return INSPECT_MAX_BYTES; }\x2C\x0d\n    set(val) { INSPECT_MAX_BYTES = val; }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x3dde95c25e6,24,8735,9718,C3O8774C9O8810C12O8817C17O8853C18O8859C28O8915C33O8919C39O8951C51O8958C56O9007C57O9037C63O9054C68O9054C73O9070C78O9110C95O9203C104O9210C109O9250C110O9275C113O9275C118O9299C120O9313C122O9322C123O9330C125O9347C127O9346C134O9409C136O9415C138O9414C145O9433C151O9452C155O9498C158O9505C163O9545C164O9572C182O9578C187O9572,,
tick,0x7ff7c0172220,180440,0,0x0,3,0x7ff7c08240c0,0x3dde95c18c1,0x231d0e04f03,0x231d0e048e5,0x36339d3ce74,0x231d0e04f03,0x231d0e048e5,0x36339d3912d,0x231d0e04f03,0x231d0e048e5,0x36339d38932,0x231d0e04f03,0x231d0e048e5,0x36339d2372a,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,LazyCompile,10,180473,0x3dde95c5016,110,fromString node:buffer:432:20,0x2e6f8177378,~
code-source-info,0x3dde95c5016,24,12922,13371,C0O12950C2O12958C8O13003C14O13010C19O13035C25O13042C30O13056C35O13063C40O13080C41O13086C46O13104C51O13115C56O13154C59O13160C64O13191C66O13221C73O13227C78O13221C79O13279C85O13286C90O13300C95O13307C100O13324C101O13333C104O13340C109O13368,,
code-creation,LazyCompile,10,180545,0x3dde95c51ce,177,fromStringFast node:buffer:413:24,0x2e6f81772d8,~
code-source-info,0x3dde95c51ce,24,12359,12899,C0O12397C5O12397C11O12422C14O12444C18O12453C21O12433C26O12466C31O12502C36O12473C41O12515C42O12521C44O12535C49O12546C51O12544C54O12532C59O12564C62O12564C65O12589C72O12604C77O12615C85O12589C91O12658C110O12658C116O12690C118O12701C123O12787C130O12806C135O12817C143O12791C149O12846C156O12860C162O12857C168O12871C171O12871C174O12887C176O12896,,
code-creation,LazyCompile,10,180606,0x3dde95c53be,36,FastBuffer node:internal/buffer:958:14,0x273fd30bb00,~
code-source-info,0x3dde95c53be,25,27321,27412,C3O27365C7O27399C20O27365C35O27411,,
code-creation,LazyCompile,10,180638,0x3dde95c54be,23,write node:buffer:593:12,0x2e6f81776e8,~
code-source-info,0x3dde95c54be,24,17151,17215,C0O17185C17O17185C22O17215,,
code-creation,LazyCompile,10,180673,0x3dde95c55ae,42,alignPool node:buffer:159:19,0x2e6f8176d10,~
code-source-info,0x3dde95c55ae,24,4190,4300,C0O4226C4O4241C9O4255C19O4266C25O4279C34O4289C41O4299,,
code-creation,LazyCompile,10,180767,0x3dde95c596e,251,promisify node:internal/util:324:19,0x2e6f81461f8,~
code-source-info,0x3dde95c596e,16,9168,10721,C0O9168C17O9232C25O9273C33O9297C38O9276C55O9335C68O9335C73O9380C80O9393C82O9392C87O9438C94O9447C96O9446C100O9481C110O9481C115O9535C126O9567C136O9609C143O9542C148O9676C149O9844C156O9853C158O9852C161O9844C163O10429C174O10454C180O10454C185O10429C190O10492C201O10517C211O10557C218O10492C223O10626C234O10671C240O10671C245O10633C250O10718,,
code-creation,LazyCompile,10,180914,0x3dde95c5f1e,65,EventEmitterMixin node:internal/event_target:962:27,0x375c9f5e378,~
script-source,44,node:internal/event_target,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SafeWeakSet\x2C\x0d\n  String\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_EVENT_RECURSION\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { validateObject\x2C validateString } = require('internal/validators');\x0d\n\x0d\nconst { customInspectSymbol\x2C kEnumerableProperty } = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst kIsEventTarget = SymbolFor('nodejs.event_target');\x0d\nconst kIsNodeEventTarget = Symbol('kIsNodeEventTarget');\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst {\x0d\n  kMaxEventTargetListeners\x2C\x0d\n  kMaxEventTargetListenersWarned\x2C\x0d\n} = EventEmitter;\x0d\n\x0d\nconst kEvents = Symbol('kEvents');\x0d\nconst kIsBeingDispatched = Symbol('kIsBeingDispatched');\x0d\nconst kStop = Symbol('kStop');\x0d\nconst kTarget = Symbol('kTarget');\x0d\nconst kHandlers = Symbol('khandlers');\x0d\nconst kWeakHandler = Symbol('kWeak');\x0d\n\x0d\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\x0d\nconst kCreateEvent = Symbol('kCreateEvent');\x0d\nconst kNewListener = Symbol('kNewListener');\x0d\nconst kRemoveListener = Symbol('kRemoveListener');\x0d\nconst kIsNodeStyleListener = Symbol('kIsNodeStyleListener');\x0d\nconst kTrustEvent = Symbol('kTrustEvent');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\n// TODO(joyeecheung): V8 snapshot does not support instance member\x0d\n// initializers for now:\x0d\n// https://bugs.chromium.org/p/v8/issues/detail?id=10704\x0d\nconst kType = Symbol('type');\x0d\nconst kDefaultPrevented = Symbol('defaultPrevented');\x0d\nconst kCancelable = Symbol('cancelable');\x0d\nconst kTimestamp = Symbol('timestamp');\x0d\nconst kBubbles = Symbol('bubbles');\x0d\nconst kComposed = Symbol('composed');\x0d\nconst kPropagationStopped = Symbol('propagationStopped');\x0d\n\x0d\nconst isTrustedSet = new SafeWeakSet();\x0d\nconst isTrusted = ObjectGetOwnPropertyDescriptor({\x0d\n  get isTrusted() {\x0d\n    return isTrustedSet.has(this);\x0d\n  }\x0d\n}\x2C 'isTrusted').get;\x0d\n\x0d\nfunction isEvent(value) {\x0d\n  return typeof value?.[kType] === 'string';\x0d\n}\x0d\n\x0d\nclass Event {\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {{\x0d\n   *   bubbles?: boolean\x2C\x0d\n   *   cancelable?: boolean\x2C\x0d\n   *   composed?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  constructor(type\x2C options = null) {\x0d\n    if (arguments.length === 0)\x0d\n      throw new ERR_MISSING_ARGS('type');\x0d\n    validateObject(options\x2C 'options'\x2C {\x0d\n      allowArray: true\x2C allowFunction: true\x2C nullable: true\x2C\x0d\n    });\x0d\n    const { cancelable\x2C bubbles\x2C composed } = { ...options };\x0d\n    this[kCancelable] = !!cancelable;\x0d\n    this[kBubbles] = !!bubbles;\x0d\n    this[kComposed] = !!composed;\x0d\n    this[kType] = `${type}`;\x0d\n    this[kDefaultPrevented] = false;\x0d\n    this[kTimestamp] = now();\x0d\n    this[kPropagationStopped] = false;\x0d\n    if (options?.[kTrustEvent]) {\x0d\n      isTrustedSet.add(this);\x0d\n    }\x0d\n\x0d\n    // isTrusted is special (LegacyUnforgeable)\x0d\n    ObjectDefineProperty(this\x2C 'isTrusted'\x2C {\x0d\n      get: isTrusted\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: false\x0d\n    });\x0d\n    this[kTarget] = null;\x0d\n    this[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({\x0d\n      type: this[kType]\x2C\x0d\n      defaultPrevented: this[kDefaultPrevented]\x2C\x0d\n      cancelable: this[kCancelable]\x2C\x0d\n      timeStamp: this[kTimestamp]\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  stopImmediatePropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kStop] = true;\x0d\n  }\x0d\n\x0d\n  preventDefault() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kDefaultPrevented] = true;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get target() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get currentTarget() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get srcElement() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {string}\x0d\n   */\x0d\n  get type() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kType];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelable() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get defaultPrevented() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable] && this[kDefaultPrevented];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get timeStamp() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTimestamp];\x0d\n  }\x0d\n\x0d\n\x0d\n  // The following are non-op and unused properties/methods from Web API Event.\x0d\n  // These are not supported in Node.js and are provided purely for\x0d\n  // API completeness.\x0d\n  /**\x0d\n   * @returns {EventTarget[]}\x0d\n   */\x0d\n  composedPath() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? [this[kTarget]] : [];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get returnValue() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return !this.defaultPrevented;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get bubbles() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kBubbles];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get composed() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kComposed];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get eventPhase() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? Event.AT_TARGET : Event.NONE;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelBubble() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kPropagationStopped];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  set cancelBubble(value) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    if (value) {\x0d\n      this.stopPropagation();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  stopPropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kPropagationStopped] = true;\x0d\n  }\x0d\n\x0d\n  static NONE = 0;\x0d\n  static CAPTURING_PHASE = 1;\x0d\n  static AT_TARGET = 2;\x0d\n  static BUBBLING_PHASE = 3;\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  Event.prototype\x2C {\x0d\n    [SymbolToStringTag]: {\x0d\n      writable: false\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: 'Event'\x2C\x0d\n    }\x2C\x0d\n    stopImmediatePropagation: kEnumerableProperty\x2C\x0d\n    preventDefault: kEnumerableProperty\x2C\x0d\n    target: kEnumerableProperty\x2C\x0d\n    currentTarget: kEnumerableProperty\x2C\x0d\n    srcElement: kEnumerableProperty\x2C\x0d\n    type: kEnumerableProperty\x2C\x0d\n    cancelable: kEnumerableProperty\x2C\x0d\n    defaultPrevented: kEnumerableProperty\x2C\x0d\n    timeStamp: kEnumerableProperty\x2C\x0d\n    composedPath: kEnumerableProperty\x2C\x0d\n    returnValue: kEnumerableProperty\x2C\x0d\n    bubbles: kEnumerableProperty\x2C\x0d\n    composed: kEnumerableProperty\x2C\x0d\n    eventPhase: kEnumerableProperty\x2C\x0d\n    cancelBubble: kEnumerableProperty\x2C\x0d\n    stopPropagation: kEnumerableProperty\x2C\x0d\n  });\x0d\n\x0d\nclass NodeCustomEvent extends Event {\x0d\n  constructor(type\x2C options) {\x0d\n    super(type\x2C options);\x0d\n    if (options?.detail) {\x0d\n      this.detail = options.detail;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Weak listener cleanup\x0d\n// This has to be lazy for snapshots to work\x0d\nlet weakListenersState = null;\x0d\n// The resource needs to retain the callback so that it doesn't\x0d\n// get garbage collected now that it's weak.\x0d\nlet objectToWeakListenerMap = null;\x0d\nfunction weakListeners() {\x0d\n  weakListenersState ??= new SafeFinalizationRegistry(\x0d\n    (listener) => listener.remove()\x0d\n  );\x0d\n  objectToWeakListenerMap ??= new SafeWeakMap();\x0d\n  return { registry: weakListenersState\x2C map: objectToWeakListenerMap };\x0d\n}\x0d\n\x0d\n// The listeners for an EventTarget are maintained as a linked list.\x0d\n// Unfortunately\x2C the way EventTarget is defined\x2C listeners are accounted\x0d\n// using the tuple [handler\x2Ccapture]\x2C and even if we don't actually make\x0d\n// use of capture or bubbling\x2C in order to be spec compliant we have to\x0d\n// take on the additional complexity of supporting it. Fortunately\x2C using\x0d\n// the linked list makes dispatching faster\x2C even if adding/removing is\x0d\n// slower.\x0d\nclass Listener {\x0d\n  constructor(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n              isNodeStyleListener\x2C weak) {\x0d\n    this.next = undefined;\x0d\n    if (previous !== undefined)\x0d\n      previous.next = this;\x0d\n    this.previous = previous;\x0d\n    this.listener = listener;\x0d\n    // TODO(benjamingr) these 4 can be 'flags' to save 3 slots\x0d\n    this.once = once;\x0d\n    this.capture = capture;\x0d\n    this.passive = passive;\x0d\n    this.isNodeStyleListener = isNodeStyleListener;\x0d\n    this.removed = false;\x0d\n    this.weak = Boolean(weak); // Don't retain the object\x0d\n\x0d\n    if (this.weak) {\x0d\n      this.callback = new SafeWeakRef(listener);\x0d\n      weakListeners().registry.register(listener\x2C this\x2C this);\x0d\n      // Make the retainer retain the listener in a WeakMap\x0d\n      weakListeners().map.set(weak\x2C listener);\x0d\n      this.listener = this.callback;\x0d\n    } else if (typeof listener === 'function') {\x0d\n      this.callback = listener;\x0d\n      this.listener = listener;\x0d\n    } else {\x0d\n      this.callback = FunctionPrototypeBind(listener.handleEvent\x2C listener);\x0d\n      this.listener = listener;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  same(listener\x2C capture) {\x0d\n    const myListener = this.weak ? this.listener.deref() : this.listener;\x0d\n    return myListener === listener && this.capture === capture;\x0d\n  }\x0d\n\x0d\n  remove() {\x0d\n    if (this.previous !== undefined)\x0d\n      this.previous.next = this.next;\x0d\n    if (this.next !== undefined)\x0d\n      this.next.previous = this.previous;\x0d\n    this.removed = true;\x0d\n    if (this.weak)\x0d\n      weakListeners().registry.unregister(this);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initEventTarget(self) {\x0d\n  self[kEvents] = new SafeMap();\x0d\n  self[kMaxEventTargetListeners] = EventEmitter.defaultMaxListeners;\x0d\n  self[kMaxEventTargetListenersWarned] = false;\x0d\n}\x0d\n\x0d\nclass EventTarget {\x0d\n  // Used in checking whether an object is an EventTarget. This is a well-known\x0d\n  // symbol as EventTarget may be used cross-realm.\x0d\n  // Ref: https://github.com/nodejs/node/pull/33661\x0d\n  static [kIsEventTarget] = true;\x0d\n\x0d\n  constructor() {\x0d\n    initEventTarget(this);\x0d\n  }\x0d\n\x0d\n  [kNewListener](size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak) {\x0d\n    if (this[kMaxEventTargetListeners] > 0 &&\x0d\n        size > this[kMaxEventTargetListeners] &&\x0d\n        !this[kMaxEventTargetListenersWarned]) {\x0d\n      this[kMaxEventTargetListenersWarned] = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error('Possible EventTarget memory leak detected. ' +\x0d\n                          `${size} ${type} listeners ` +\x0d\n                          `added to ${inspect(this\x2C { depth: -1 })}. Use ` +\x0d\n                          'events.setMaxListeners() to increase limit');\x0d\n      w.name = 'MaxListenersExceededWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      w.count = size;\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n  [kRemoveListener](size\x2C type\x2C listener\x2C capture) {}\x0d\n\x0d\n  /**\x0d\n   * @callback EventTargetCallback\x0d\n   * @param {Event} event\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @typedef {{ handleEvent: EventTargetCallback }} EventListener\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   *   once?: boolean\x2C\x0d\n   *   passive?: boolean\x2C\x0d\n   *   signal?: AbortSignal\x0d\n   * }} [options]\x0d\n   */\x0d\n  addEventListener(type\x2C listener\x2C options = {}) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (arguments.length < 2)\x0d\n      throw new ERR_MISSING_ARGS('type'\x2C 'listener');\x0d\n\x0d\n    // We validateOptions before the shouldAddListeners check because the spec\x0d\n    // requires us to hit getters.\x0d\n    const {\x0d\n      once\x2C\x0d\n      capture\x2C\x0d\n      passive\x2C\x0d\n      signal\x2C\x0d\n      isNodeStyleListener\x2C\x0d\n      weak\x2C\x0d\n    } = validateEventListenerOptions(options);\x0d\n\x0d\n    if (!shouldAddListener(listener)) {\x0d\n      // The DOM silently allows passing undefined as a second argument\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error(`addEventListener called with ${listener}` +\x0d\n                          ' which has no effect.');\x0d\n      w.name = 'AddEventListenerArgumentTypeWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      process.emitWarning(w);\x0d\n      return;\x0d\n    }\x0d\n    type = String(type);\x0d\n\x0d\n    if (signal) {\x0d\n      if (signal.aborted) {\x0d\n        return;\x0d\n      }\x0d\n      // TODO(benjamingr) make this weak somehow? ideally the signal would\x0d\n      // not prevent the event target from GC.\x0d\n      signal.addEventListener('abort'\x2C () => {\x0d\n        this.removeEventListener(type\x2C listener\x2C options);\x0d\n      }\x2C { once: true\x2C [kWeakHandler]: this });\x0d\n    }\x0d\n\x0d\n    let root = this[kEvents].get(type);\x0d\n\x0d\n    if (root === undefined) {\x0d\n      root = { size: 1\x2C next: undefined };\x0d\n      // This is the first handler in our linked list.\x0d\n      new Listener(root\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                   isNodeStyleListener\x2C weak);\x0d\n      this[kNewListener](\x0d\n        root.size\x2C\x0d\n        type\x2C\x0d\n        listener\x2C\x0d\n        once\x2C\x0d\n        capture\x2C\x0d\n        passive\x2C\x0d\n        weak);\x0d\n      this[kEvents].set(type\x2C root);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let previous = root;\x0d\n\x0d\n    // We have to walk the linked list to see if we have a match\x0d\n    while (handler !== undefined && !handler.same(listener\x2C capture)) {\x0d\n      previous = handler;\x0d\n      handler = handler.next;\x0d\n    }\x0d\n\x0d\n    if (handler !== undefined) { // Duplicate! Ignore\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    new Listener(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                 isNodeStyleListener\x2C weak);\x0d\n    root.size++;\x0d\n    this[kNewListener](root.size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  removeEventListener(type\x2C listener\x2C options = {}) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (!shouldAddListener(listener))\x0d\n      return;\x0d\n\x0d\n    type = String(type);\x0d\n    const capture = options?.capture === true;\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined)\x0d\n      return;\x0d\n\x0d\n    let handler = root.next;\x0d\n    while (handler !== undefined) {\x0d\n      if (handler.same(listener\x2C capture)) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        if (root.size === 0)\x0d\n          this[kEvents].delete(type);\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n        break;\x0d\n      }\x0d\n      handler = handler.next;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {Event} event\x0d\n   */\x0d\n  dispatchEvent(event) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n\x0d\n    if (!(event instanceof Event))\x0d\n      throw new ERR_INVALID_ARG_TYPE('event'\x2C 'Event'\x2C event);\x0d\n\x0d\n    if (event[kIsBeingDispatched])\x0d\n      throw new ERR_EVENT_RECURSION(event.type);\x0d\n\x0d\n    this[kHybridDispatch](event\x2C event.type\x2C event);\x0d\n\x0d\n    return event.defaultPrevented !== true;\x0d\n  }\x0d\n\x0d\n  [kHybridDispatch](nodeValue\x2C type\x2C event) {\x0d\n    const createEvent = () => {\x0d\n      if (event === undefined) {\x0d\n        event = this[kCreateEvent](nodeValue\x2C type);\x0d\n        event[kTarget] = this;\x0d\n        event[kIsBeingDispatched] = true;\x0d\n      }\x0d\n      return event;\x0d\n    };\x0d\n    if (event !== undefined) {\x0d\n      event[kTarget] = this;\x0d\n      event[kIsBeingDispatched] = true;\x0d\n    }\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined) {\x0d\n      if (event !== undefined)\x0d\n        event[kIsBeingDispatched] = false;\x0d\n      return true;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let next;\x0d\n\x0d\n    while (handler !== undefined &&\x0d\n           (handler.passive || event?.[kStop] !== true)) {\x0d\n      // Cache the next item in case this iteration removes the current one\x0d\n      next = handler.next;\x0d\n\x0d\n      if (handler.removed) {\x0d\n        // Deal with the case an event is removed while event handlers are\x0d\n        // Being processed (removeEventListener called from a listener)\x0d\n        handler = next;\x0d\n        continue;\x0d\n      }\x0d\n      if (handler.once) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        const { listener\x2C capture } = handler;\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n      }\x0d\n\x0d\n      try {\x0d\n        let arg;\x0d\n        if (handler.isNodeStyleListener) {\x0d\n          arg = nodeValue;\x0d\n        } else {\x0d\n          arg = createEvent();\x0d\n        }\x0d\n        const callback = handler.weak ?\x0d\n          handler.callback.deref() : handler.callback;\x0d\n        let result;\x0d\n        if (callback) {\x0d\n          result = FunctionPrototypeCall(callback\x2C this\x2C arg);\x0d\n          if (!handler.isNodeStyleListener) {\x0d\n            arg[kIsBeingDispatched] = false;\x0d\n          }\x0d\n        }\x0d\n        if (result !== undefined && result !== null)\x0d\n          addCatch(result);\x0d\n      } catch (err) {\x0d\n        emitUncaughtException(err);\x0d\n      }\x0d\n\x0d\n      handler = next;\x0d\n    }\x0d\n\x0d\n    if (event !== undefined)\x0d\n      event[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [kCreateEvent](nodeValue\x2C type) {\x0d\n    return new NodeCustomEvent(type\x2C { detail: nodeValue });\x0d\n  }\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({}\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(EventTarget.prototype\x2C {\x0d\n  addEventListener: kEnumerableProperty\x2C\x0d\n  removeEventListener: kEnumerableProperty\x2C\x0d\n  dispatchEvent: kEnumerableProperty\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: 'EventTarget'\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction initNodeEventTarget(self) {\x0d\n  initEventTarget(self);\x0d\n}\x0d\n\x0d\nclass NodeEventTarget extends EventTarget {\x0d\n  static [kIsNodeEventTarget] = true;\x0d\n  static defaultMaxListeners = 10;\x0d\n\x0d\n  constructor() {\x0d\n    super();\x0d\n    initNodeEventTarget(this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {number} n\x0d\n   */\x0d\n  setMaxListeners(n) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    EventEmitter.setMaxListeners(n\x2C this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {number}\x0d\n   */\x0d\n  getMaxListeners() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return this[kMaxEventTargetListeners];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {string[]}\x0d\n   */\x0d\n  eventNames() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return ArrayFrom(this[kEvents].keys());\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} [type]\x0d\n   * @returns {number}\x0d\n   */\x0d\n  listenerCount(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    const root = this[kEvents].get(String(type));\x0d\n    return root !== undefined ? root.size : 0;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  off(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeListener(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  on(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  addListener(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {any} arg\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  emit(type\x2C arg) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    validateString(type\x2C 'type');\x0d\n    const hadListeners = this.listenerCount(type) > 0;\x0d\n    this[kHybridDispatch](arg\x2C type);\x0d\n    return hadListeners;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  once(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C\x0d\n                          { once: true\x2C [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeAllListeners(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    if (type !== undefined) {\x0d\n      this[kEvents].delete(String(type));\x0d\n    } else {\x0d\n      this[kEvents].clear();\x0d\n    }\x0d\n\x0d\n    return this;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(NodeEventTarget.prototype\x2C {\x0d\n  setMaxListeners: kEnumerableProperty\x2C\x0d\n  getMaxListeners: kEnumerableProperty\x2C\x0d\n  eventNames: kEnumerableProperty\x2C\x0d\n  listenerCount: kEnumerableProperty\x2C\x0d\n  off: kEnumerableProperty\x2C\x0d\n  removeListener: kEnumerableProperty\x2C\x0d\n  on: kEnumerableProperty\x2C\x0d\n  addListener: kEnumerableProperty\x2C\x0d\n  once: kEnumerableProperty\x2C\x0d\n  emit: kEnumerableProperty\x2C\x0d\n  removeAllListeners: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\n// EventTarget API\x0d\n\x0d\nfunction shouldAddListener(listener) {\x0d\n  if (typeof listener === 'function' ||\x0d\n      typeof listener?.handleEvent === 'function') {\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  if (listener == null)\x0d\n    return false;\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE('listener'\x2C 'EventListener'\x2C listener);\x0d\n}\x0d\n\x0d\nfunction validateEventListenerOptions(options) {\x0d\n  if (typeof options === 'boolean')\x0d\n    return { capture: options };\x0d\n\x0d\n  if (options === null)\x0d\n    return {};\x0d\n  validateObject(options\x2C 'options'\x2C {\x0d\n    allowArray: true\x2C allowFunction: true\x2C\x0d\n  });\x0d\n  return {\x0d\n    once: Boolean(options.once)\x2C\x0d\n    capture: Boolean(options.capture)\x2C\x0d\n    passive: Boolean(options.passive)\x2C\x0d\n    signal: options.signal\x2C\x0d\n    weak: options[kWeakHandler]\x2C\x0d\n    isNodeStyleListener: Boolean(options[kIsNodeStyleListener])\x0d\n  };\x0d\n}\x0d\n\x0d\n// Test whether the argument is an event object. This is far from a fool-proof\x0d\n// test\x2C for example this input will result in a false positive:\x0d\n// > isEventTarget({ constructor: EventTarget })\x0d\n// It stands in its current implementation as a compromise.\x0d\n// Ref: https://github.com/nodejs/node/pull/33661\x0d\nfunction isEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsEventTarget];\x0d\n}\x0d\n\x0d\nfunction isNodeEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsNodeEventTarget];\x0d\n}\x0d\n\x0d\nfunction addCatch(promise) {\x0d\n  const then = promise.then;\x0d\n  if (typeof then === 'function') {\x0d\n    FunctionPrototypeCall(then\x2C promise\x2C undefined\x2C function(err) {\x0d\n      // The callback is called with nextTick to avoid a follow-up\x0d\n      // rejection from this promise.\x0d\n      emitUncaughtException(err);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUncaughtException(err) {\x0d\n  process.nextTick(() => { throw err; });\x0d\n}\x0d\n\x0d\nfunction makeEventHandler(handler) {\x0d\n  // Event handlers are dispatched in the order they were first set\x0d\n  // See https://github.com/nodejs/node/pull/35949#issuecomment-722496598\x0d\n  function eventHandler(...args) {\x0d\n    if (typeof eventHandler.handler !== 'function') {\x0d\n      return;\x0d\n    }\x0d\n    return ReflectApply(eventHandler.handler\x2C this\x2C args);\x0d\n  }\x0d\n  eventHandler.handler = handler;\x0d\n  return eventHandler;\x0d\n}\x0d\n\x0d\nfunction defineEventHandler(emitter\x2C name) {\x0d\n  // 8.1.5.1 Event handlers - basically `on[eventName]` attributes\x0d\n  ObjectDefineProperty(emitter\x2C `on${name}`\x2C {\x0d\n    get() {\x0d\n      return this[kHandlers]?.get(name)?.handler ?? null;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      if (!this[kHandlers]) {\x0d\n        this[kHandlers] = new SafeMap();\x0d\n      }\x0d\n      let wrappedHandler = this[kHandlers]?.get(name);\x0d\n      if (wrappedHandler) {\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size--;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kRemoveListener](size\x2C name\x2C wrappedHandler.handler\x2C false);\x0d\n        }\x0d\n        wrappedHandler.handler = value;\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size++;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kNewListener](size\x2C name\x2C value\x2C false\x2C false\x2C false\x2C false);\x0d\n        }\x0d\n      } else {\x0d\n        wrappedHandler = makeEventHandler(value);\x0d\n        this.addEventListener(name\x2C wrappedHandler);\x0d\n      }\x0d\n      this[kHandlers].set(name\x2C wrappedHandler);\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nconst EventEmitterMixin = (Superclass) => {\x0d\n  class MixedEventEmitter extends Superclass {\x0d\n    constructor(...args) {\x0d\n      args = new SafeArrayIterator(args);\x0d\n      super(...args);\x0d\n      FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n    }\x0d\n  }\x0d\n  const protoProps = ObjectGetOwnPropertyDescriptors(EventEmitter.prototype);\x0d\n  delete protoProps.constructor;\x0d\n  ObjectDefineProperties(MixedEventEmitter.prototype\x2C protoProps);\x0d\n  return MixedEventEmitter;\x0d\n};\x0d\n\x0d\nmodule.exports = {\x0d\n  Event\x2C\x0d\n  EventEmitterMixin\x2C\x0d\n  EventTarget\x2C\x0d\n  NodeEventTarget\x2C\x0d\n  defineEventHandler\x2C\x0d\n  initEventTarget\x2C\x0d\n  initNodeEventTarget\x2C\x0d\n  kCreateEvent\x2C\x0d\n  kNewListener\x2C\x0d\n  kTrustEvent\x2C\x0d\n  kRemoveListener\x2C\x0d\n  kEvents\x2C\x0d\n  kWeakHandler\x2C\x0d\n  isEventTarget\x2C\x0d\n};\x0d\n
code-source-info,0x3dde95c5f1e,44,26678,27112,C0O26731C23O26922C30O26954C33O26967C38O26922C43O26982C47O27016C52O27057C57O27016C62O27084C64O27109,,
tick,0x7ff7c11ee4bd,182268,1,0x7ff7c02ae150,6,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d2373b,0x231d0e04f03,0x231d0e048e5,0x36339d219fc,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Eval,10,182479,0x3dde95c89de,5, node:internal/modules/esm/translators:1:1,0x3dde95c8578,~
script-source,129,node:internal/modules/esm/translators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  Boolean\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  SyntaxErrorPrototype\x2C\x0d\n  globalThis: { WebAssembly }\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet _TYPES = null;\x0d\nfunction lazyTypes() {\x0d\n  if (_TYPES !== null) return _TYPES;\x0d\n  return _TYPES = require('internal/util/types');\x0d\n}\x0d\n\x0d\nconst { readFileSync } = require('fs');\x0d\nconst { extname\x2C isAbsolute } = require('path');\x0d\nconst {\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst {\x0d\n  Module: CJSModule\x2C\x0d\n  cjsParseCache\x0d\n} = require('internal/modules/cjs/loader');\x0d\nconst internalURLModule = require('internal/url');\x0d\nconst createDynamicModule = require(\x0d\n  'internal/modules/esm/create_dynamic_module');\x0d\nconst { fileURLToPath\x2C URL } = require('url');\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { emitExperimentalWarning } = require('internal/util');\x0d\nconst {\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x0d\n} = require('internal/errors').codes;\x0d\nconst { maybeCacheSourceMap } = require('internal/source_map/source_map_cache');\x0d\nconst moduleWrap = internalBinding('module_wrap');\x0d\nconst { ModuleWrap } = moduleWrap;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { emitWarningSync } = require('internal/process/warning');\x0d\nconst { TextDecoder } = require('internal/encoding');\x0d\n\x0d\nlet cjsParse;\x0d\nasync function initCJSParse() {\x0d\n  if (typeof WebAssembly === 'undefined') {\x0d\n    cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;\x0d\n  } else {\x0d\n    const { parse\x2C init } =\x0d\n        require('internal/deps/cjs-module-lexer/dist/lexer');\x0d\n    await init();\x0d\n    cjsParse = parse;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst translators = new SafeMap();\x0d\nexports.translators = translators;\x0d\nexports.enrichCJSError = enrichCJSError;\x0d\n\x0d\nlet DECODER = null;\x0d\nfunction assertBufferSource(body\x2C allowString\x2C hookName) {\x0d\n  if (allowString && typeof body === 'string') {\x0d\n    return;\x0d\n  }\x0d\n  const { isArrayBufferView\x2C isAnyArrayBuffer } = lazyTypes();\x0d\n  if (isArrayBufferView(body) || isAnyArrayBuffer(body)) {\x0d\n    return;\x0d\n  }\x0d\n  throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n    `${allowString ? 'string\x2C ' : ''}array buffer\x2C or typed array`\x2C\x0d\n    hookName\x2C\x0d\n    'source'\x2C\x0d\n    body\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringify(body) {\x0d\n  if (typeof body === 'string') return body;\x0d\n  assertBufferSource(body\x2C false\x2C 'transformSource');\x0d\n  DECODER = DECODER === null ? new TextDecoder() : DECODER;\x0d\n  return DECODER.decode(body);\x0d\n}\x0d\n\x0d\nfunction errPath(url) {\x0d\n  const parsed = new URL(url);\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    return fileURLToPath(parsed);\x0d\n  }\x0d\n  return url;\x0d\n}\x0d\n\x0d\nasync function importModuleDynamically(specifier\x2C { url }\x2C assertions) {\x0d\n  return asyncESM.esmLoader.import(specifier\x2C\x0d\n                                   asyncESM.esmLoader.getBaseURL(url)\x2C\x0d\n                                   assertions);\x0d\n}\x0d\n\x0d\n// Strategy for loading a standard JavaScript module.\x0d\ntranslators.set('module'\x2C async function moduleStrategy(url\x2C source\x2C isMain) {\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  source = stringify(source);\x0d\n  maybeCacheSourceMap(url\x2C source);\x0d\n  debug(`Translating StandardModule ${url}`);\x0d\n  const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n  moduleWrap.callbackMap.set(module\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => this.importMetaInitialize(meta\x2C {\x0d\n      url: wrap.url\x0d\n    })\x2C\x0d\n    importModuleDynamically\x2C\x0d\n  });\x0d\n  return module;\x0d\n});\x0d\n\x0d\n/**\x0d\n * @param {Error | any} err\x0d\n * @param {string} [content] Content of the file\x2C if known.\x0d\n * @param {string} [filename] Useful only if `content` is unknown.\x0d\n */\x0d\nfunction enrichCJSError(err\x2C content\x2C filename) {\x0d\n  if (err != null && ObjectGetPrototypeOf(err) === SyntaxErrorPrototype &&\x0d\n      hasEsmSyntax(content || readFileSync(filename\x2C 'utf-8'))) {\x0d\n    // Emit the warning synchronously because we are in the middle of handling\x0d\n    // a SyntaxError that will throw and likely terminate the process before an\x0d\n    // asynchronous warning would be emitted.\x0d\n    emitWarningSync(\x0d\n      'To load an ES module\x2C set "type": "module" in the package.json or use ' +\x0d\n      'the .mjs extension.'\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\n// Strategy for loading a node-style CommonJS module\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst winSepRegEx = /\\//g;\x0d\ntranslators.set('commonjs'\x2C async function commonjsStrategy(url\x2C source\x2C\x0d\n                                                            isMain) {\x0d\n  debug(`Translating CJSModule ${url}`);\x0d\n\x0d\n  let filename = internalURLModule.fileURLToPath(new URL(url));\x0d\n  if (isWindows)\x0d\n    filename = StringPrototypeReplace(filename\x2C winSepRegEx\x2C '\\\\');\x0d\n\x0d\n  if (!cjsParse) await initCJSParse();\x0d\n  const { module\x2C exportNames } = cjsPreparseModuleExports(filename);\x0d\n  const namesWithDefault = exportNames.has('default') ?\x0d\n    [...exportNames] : ['default'\x2C ...exportNames];\x0d\n\x0d\n  return new ModuleWrap(url\x2C undefined\x2C namesWithDefault\x2C function() {\x0d\n    debug(`Loading CJSModule ${url}`);\x0d\n\x0d\n    let exports;\x0d\n    if (asyncESM.esmLoader.cjsCache.has(module)) {\x0d\n      exports = asyncESM.esmLoader.cjsCache.get(module);\x0d\n      asyncESM.esmLoader.cjsCache.delete(module);\x0d\n    } else {\x0d\n      try {\x0d\n        exports = CJSModule._load(filename\x2C undefined\x2C isMain);\x0d\n      } catch (err) {\x0d\n        enrichCJSError(err\x2C undefined\x2C filename);\x0d\n        throw err;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    for (const exportName of exportNames) {\x0d\n      if (!ObjectPrototypeHasOwnProperty(exports\x2C exportName) ||\x0d\n          exportName === 'default')\x0d\n        continue;\x0d\n      // We might trigger a getter -> dont fail.\x0d\n      let value;\x0d\n      try {\x0d\n        value = exports[exportName];\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      this.setExport(exportName\x2C value);\x0d\n    }\x0d\n    this.setExport('default'\x2C exports);\x0d\n  });\x0d\n});\x0d\n\x0d\nfunction cjsPreparseModuleExports(filename) {\x0d\n  let module = CJSModule._cache[filename];\x0d\n  if (module) {\x0d\n    const cached = cjsParseCache.get(module);\x0d\n    if (cached)\x0d\n      return { module\x2C exportNames: cached.exportNames };\x0d\n  }\x0d\n  const loaded = Boolean(module);\x0d\n  if (!loaded) {\x0d\n    module = new CJSModule(filename);\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n    CJSModule._cache[filename] = module;\x0d\n  }\x0d\n\x0d\n  let source;\x0d\n  try {\x0d\n    source = readFileSync(filename\x2C 'utf8');\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n\x0d\n  let exports\x2C reexports;\x0d\n  try {\x0d\n    ({ exports\x2C reexports } = cjsParse(source || ''));\x0d\n  } catch {\x0d\n    exports = [];\x0d\n    reexports = [];\x0d\n  }\x0d\n\x0d\n  const exportNames = new SafeSet(new SafeArrayIterator(exports));\x0d\n\x0d\n  // Set first for cycles.\x0d\n  cjsParseCache.set(module\x2C { source\x2C exportNames\x2C loaded });\x0d\n\x0d\n  if (reexports.length) {\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n  }\x0d\n  ArrayPrototypeForEach(reexports\x2C (reexport) => {\x0d\n    let resolved;\x0d\n    try {\x0d\n      resolved = CJSModule._resolveFilename(reexport\x2C module);\x0d\n    } catch {\x0d\n      return;\x0d\n    }\x0d\n    const ext = extname(resolved);\x0d\n    if ((ext === '.js' || ext === '.cjs' || !CJSModule._extensions[ext]) &&\x0d\n        isAbsolute(resolved)) {\x0d\n      const { exportNames: reexportNames } = cjsPreparseModuleExports(resolved);\x0d\n      for (const name of reexportNames)\x0d\n        exportNames.add(name);\x0d\n    }\x0d\n  });\x0d\n\x0d\n  return { module\x2C exportNames };\x0d\n}\x0d\n\x0d\n// Strategy for loading a node builtin CommonJS module that isn't\x0d\n// through normal resolution\x0d\ntranslators.set('builtin'\x2C async function builtinStrategy(url) {\x0d\n  debug(`Translating BuiltinModule ${url}`);\x0d\n  // Slice 'node:' scheme\x0d\n  const id = StringPrototypeSlice(url\x2C 5);\x0d\n  const module = loadNativeModule(id\x2C url);\x0d\n  if (!StringPrototypeStartsWith(url\x2C 'node:') || !module) {\x0d\n    throw new ERR_UNKNOWN_BUILTIN_MODULE(url);\x0d\n  }\x0d\n  debug(`Loading BuiltinModule ${url}`);\x0d\n  return module.getESMFacade();\x0d\n});\x0d\n\x0d\n// Strategy for loading a JSON file\x0d\ntranslators.set('json'\x2C async function jsonStrategy(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing JSON modules');\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  debug(`Loading JSONModule ${url}`);\x0d\n  const pathname = StringPrototypeStartsWith(url\x2C 'file:') ?\x0d\n    fileURLToPath(url) : null;\x0d\n  let modulePath;\x0d\n  let module;\x0d\n  if (pathname) {\x0d\n    modulePath = isWindows ?\x0d\n      StringPrototypeReplace(pathname\x2C winSepRegEx\x2C '\\\\') : pathname;\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  source = stringify(source);\x0d\n  if (pathname) {\x0d\n    // A require call could have been called on the same file during loading and\x0d\n    // that resolves synchronously. To make sure we always return the identical\x0d\n    // export\x2C we have to check again if the module already exists or not.\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  try {\x0d\n    const exports = JSONParse(stripBOM(source));\x0d\n    module = {\x0d\n      exports\x2C\x0d\n      loaded: true\x0d\n    };\x0d\n  } catch (err) {\x0d\n    // TODO (BridgeAR): We could add a NodeCore error that wraps the JSON\x0d\n    // parse error instead of just manipulating the original error message.\x0d\n    // That would allow to add further properties and maybe additional\x0d\n    // debugging information.\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n  if (pathname) {\x0d\n    CJSModule._cache[modulePath] = module;\x0d\n  }\x0d\n  return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n    debug(`Parsing JSONModule ${url}`);\x0d\n    this.setExport('default'\x2C module.exports);\x0d\n  });\x0d\n});\x0d\n\x0d\n// Strategy for loading a wasm module\x0d\ntranslators.set('wasm'\x2C async function(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing WebAssembly modules');\x0d\n\x0d\n  assertBufferSource(source\x2C false\x2C 'load');\x0d\n\x0d\n  debug(`Translating WASMModule ${url}`);\x0d\n\x0d\n  let compiled;\x0d\n  try {\x0d\n    compiled = await WebAssembly.compile(source);\x0d\n  } catch (err) {\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  const imports =\x0d\n      ArrayPrototypeMap(WebAssembly.Module.imports(compiled)\x2C\x0d\n                        ({ module }) => module);\x0d\n  const exports =\x0d\n    ArrayPrototypeMap(WebAssembly.Module.exports(compiled)\x2C\x0d\n                      ({ name }) => name);\x0d\n\x0d\n  return createDynamicModule(imports\x2C exports\x2C url\x2C (reflect) => {\x0d\n    const { exports } = new WebAssembly.Instance(compiled\x2C reflect.imports);\x0d\n    for (const expt of ObjectKeys(exports))\x0d\n      reflect.exports[expt].set(exports[expt]);\x0d\n  }).module;\x0d\n});\x0d\n
code-source-info,0x3dde95c89de,129,0,11128,C0O0C4O11128,,
code-creation,Function,10,182991,0x3dde95c917e,715, node:internal/modules/esm/translators:1:1,0x3dde95c8958,~
code-source-info,0x3dde95c917e,129,0,11128,C0O0C180O28C186O54C192O76C198O88C204O102C210O127C216O161C222O176C228O198C233O210C239O222C245O249C251O274C257O304C268O343C274O392C275O392C277O543C283O543C288O526C294O591C300O591C305O567C311O576C317O673C323O673C328O620C334O637C340O658C346O767C352O767C357O734C363O748C369O834C375O834C379O834C381O888C387O888C391O888C393O979C399O979C404O956C410O971C416O1008C422O1008C427O1041C440O1042C446O1008C448O1125C454O1125C459O1097C465O1233C471O1233C476O1259C481O1163C487O1194C493O1300C499O1300C504O1276C510O1369C513O1369C517O1369C519O1425C522O1410C528O1455C534O1455C538O1455C540O1524C546O1524C551O1504C557O1586C563O1586C568O1570C574O1623C575O1623C577O1959C579O1959C585O1975C587O1995C591O2011C593O2034C597O2069C598O2069C600O3210C613O3210C619O4512C626O4521C629O4504C631O4555C635O4555C637O4575C650O4575C656O7773C669O7773C675O8235C688O8235C694O10239C707O10239C714O11127,,
code-creation,Eval,10,183214,0x3dde95ca686,5, node:internal/modules/esm/create_dynamic_module:1:1,0x3dde95ca4b0,~
script-source,130,node:internal/modules/esm/create_dynamic_module,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectCreate\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nfunction createImport(impt\x2C index) {\x0d\n  const imptPath = JSONStringify(impt);\x0d\n  return `import * as $import_${index} from ${imptPath};\x0d\nimport.meta.imports[${imptPath}] = $import_${index};`;\x0d\n}\x0d\n\x0d\nfunction createExport(expt) {\x0d\n  const name = `${expt}`;\x0d\n  return `let $${name};\x0d\nexport { $${name} as ${name} };\x0d\nimport.meta.exports.${name} = {\x0d\n  get: () => $${name}\x2C\x0d\n  set: (v) => $${name} = v\x2C\x0d\n};`;\x0d\n}\x0d\n\x0d\nconst createDynamicModule = (imports\x2C exports\x2C url = ''\x2C evaluate) => {\x0d\n  debug('creating ESM facade for %s with exports: %j'\x2C url\x2C exports);\x0d\n  const source = `\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(imports\x2C createImport)\x2C '\\n')}\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(exports\x2C createExport)\x2C '\\n')}\x0d\nimport.meta.done();\x0d\n`;\x0d\n  const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n  const m = new ModuleWrap(`${url}`\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n\x0d\n  const readyfns = new SafeSet();\x0d\n  const reflect = {\x0d\n    exports: ObjectCreate(null)\x2C\x0d\n    onReady: (cb) => { readyfns.add(cb); }\x2C\x0d\n  };\x0d\n\x0d\n  if (imports.length)\x0d\n    reflect.imports = ObjectCreate(null);\x0d\n\x0d\n  callbackMap.set(m\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => {\x0d\n      meta.exports = reflect.exports;\x0d\n      if (reflect.imports)\x0d\n        meta.imports = reflect.imports;\x0d\n      meta.done = () => {\x0d\n        evaluate(reflect);\x0d\n        reflect.onReady = (cb) => cb(reflect);\x0d\n        for (const fn of readyfns) {\x0d\n          readyfns.delete(fn);\x0d\n          fn(reflect);\x0d\n        }\x0d\n      };\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  return {\x0d\n    module: m\x2C\x0d\n    reflect\x2C\x0d\n  };\x0d\n};\x0d\n\x0d\nmodule.exports = createDynamicModule;\x0d\n
code-source-info,0x3dde95ca686,130,0,1828,C0O0C4O1828,,
code-creation,Function,10,183315,0x3dde95ca8ae,111, node:internal/modules/esm/create_dynamic_module:1:1,0x3dde95ca600,~
code-source-info,0x3dde95ca8ae,130,0,1828,C0O0C39O28C45O51C51O73C57O91C63O108C69O150C72O150C77O183C90O184C96O150C98O672C103O1789C105O1804C110O1827,,
code-creation,Eval,10,183674,0x3dde95cbb56,5, node:internal/vm/module:1:1,0x3dde95cb610,~
script-source,131,node:internal/vm/module,'use strict';\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { isContext } = internalBinding('contextify');\x0d\nconst {\x0d\n  isModuleNamespaceObject\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  customInspectSymbol\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_VM_MODULE_ALREADY_LINKED\x2C\x0d\n  ERR_VM_MODULE_DIFFERENT_CONTEXT\x2C\x0d\n  ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA\x2C\x0d\n  ERR_VM_MODULE_LINKING_ERRORED\x2C\x0d\n  ERR_VM_MODULE_NOT_MODULE\x2C\x0d\n  ERR_VM_MODULE_STATUS\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst binding = internalBinding('module_wrap');\x0d\nconst {\x0d\n  ModuleWrap\x2C\x0d\n  kUninstantiated\x2C\x0d\n  kInstantiating\x2C\x0d\n  kInstantiated\x2C\x0d\n  kEvaluating\x2C\x0d\n  kEvaluated\x2C\x0d\n  kErrored\x2C\x0d\n} = binding;\x0d\n\x0d\nconst STATUS_MAP = {\x0d\n  [kUninstantiated]: 'unlinked'\x2C\x0d\n  [kInstantiating]: 'linking'\x2C\x0d\n  [kInstantiated]: 'linked'\x2C\x0d\n  [kEvaluating]: 'evaluating'\x2C\x0d\n  [kEvaluated]: 'evaluated'\x2C\x0d\n  [kErrored]: 'errored'\x2C\x0d\n};\x0d\n\x0d\nlet globalModuleId = 0;\x0d\nconst defaultModuleName = 'vm:module';\x0d\nconst wrapToModuleMap = new SafeWeakMap();\x0d\n\x0d\nconst kWrap = Symbol('kWrap');\x0d\nconst kContext = Symbol('kContext');\x0d\nconst kPerContextModuleId = Symbol('kPerContextModuleId');\x0d\nconst kLink = Symbol('kLink');\x0d\n\x0d\nclass Module {\x0d\n  constructor(options) {\x0d\n    emitExperimentalWarning('VM Modules');\x0d\n\x0d\n    if (new.target === Module) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new TypeError('Module is not a constructor');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      context\x2C\x0d\n      sourceText\x2C\x0d\n      syntheticExportNames\x2C\x0d\n      syntheticEvaluationSteps\x2C\x0d\n    } = options;\x0d\n\x0d\n    if (context !== undefined) {\x0d\n      validateObject(context\x2C 'context');\x0d\n      if (!isContext(context)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('options.context'\x2C 'vm.Context'\x2C\x0d\n                                       context);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let { identifier } = options;\x0d\n    if (identifier !== undefined) {\x0d\n      validateString(identifier\x2C 'options.identifier');\x0d\n    } else if (context === undefined) {\x0d\n      identifier = `${defaultModuleName}(${globalModuleId++})`;\x0d\n    } else if (context[kPerContextModuleId] !== undefined) {\x0d\n      const curId = context[kPerContextModuleId];\x0d\n      identifier = `${defaultModuleName}(${curId})`;\x0d\n      context[kPerContextModuleId] += 1;\x0d\n    } else {\x0d\n      identifier = `${defaultModuleName}(0)`;\x0d\n      ObjectDefineProperty(context\x2C kPerContextModuleId\x2C {\x0d\n        value: 1\x2C\x0d\n        writable: true\x2C\x0d\n        enumerable: false\x2C\x0d\n        configurable: true\x2C\x0d\n      });\x0d\n    }\x0d\n\x0d\n    if (sourceText !== undefined) {\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C sourceText\x2C\x0d\n                                   options.lineOffset\x2C options.columnOffset\x2C\x0d\n                                   options.cachedData);\x0d\n\x0d\n      binding.callbackMap.set(this[kWrap]\x2C {\x0d\n        initializeImportMeta: options.initializeImportMeta\x2C\x0d\n        importModuleDynamically: options.importModuleDynamically ?\x0d\n          importModuleDynamicallyWrap(options.importModuleDynamically) :\x0d\n          undefined\x2C\x0d\n      });\x0d\n    } else {\x0d\n      assert(syntheticEvaluationSteps);\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C\x0d\n                                   syntheticExportNames\x2C\x0d\n                                   syntheticEvaluationSteps);\x0d\n    }\x0d\n\x0d\n    wrapToModuleMap.set(this[kWrap]\x2C this);\x0d\n\x0d\n    this[kContext] = context;\x0d\n  }\x0d\n\x0d\n  get identifier() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kWrap].url;\x0d\n  }\x0d\n\x0d\n  get context() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kContext];\x0d\n  }\x0d\n\x0d\n  get namespace() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must not be unlinked or linking');\x0d\n    }\x0d\n    return this[kWrap].getNamespace();\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return STATUS_MAP[this[kWrap].getStatus()];\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be errored');\x0d\n    }\x0d\n    return this[kWrap].getError();\x0d\n  }\x0d\n\x0d\n  async link(linker) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateFunction(linker\x2C 'linker');\x0d\n    if (this.status === 'linked') {\x0d\n      throw new ERR_VM_MODULE_ALREADY_LINKED();\x0d\n    }\x0d\n    if (this.status !== 'unlinked') {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be unlinked');\x0d\n    }\x0d\n    await this[kLink](linker);\x0d\n    this[kWrap].instantiate();\x0d\n  }\x0d\n\x0d\n  async evaluate(options = {}) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    let timeout = options.timeout;\x0d\n    if (timeout === undefined) {\x0d\n      timeout = -1;\x0d\n    } else {\x0d\n      validateUint32(timeout\x2C 'options.timeout'\x2C true);\x0d\n    }\x0d\n    const { breakOnSigint = false } = options;\x0d\n    validateBoolean(breakOnSigint\x2C 'options.breakOnSigint');\x0d\n    const status = this[kWrap].getStatus();\x0d\n    if (status !== kInstantiated &&\x0d\n        status !== kEvaluated &&\x0d\n        status !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS(\x0d\n        'must be one of linked\x2C evaluated\x2C or errored'\x0d\n      );\x0d\n    }\x0d\n    await this[kWrap].evaluate(timeout\x2C breakOnSigint);\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || Module;\x0d\n    const o = ObjectCreate({ constructor });\x0d\n    o.status = this.status;\x0d\n    o.identifier = this.identifier;\x0d\n    o.context = this.context;\x0d\n\x0d\n    ObjectSetPrototypeOf(o\x2C ObjectGetPrototypeOf(this));\x0d\n    ObjectDefineProperty(o\x2C SymbolToStringTag\x2C {\x0d\n      value: constructor.name\x2C\x0d\n      configurable: true\x0d\n    });\x0d\n\x0d\n    // Lazy to avoid circular dependency\x0d\n    const { inspect } = require('internal/util/inspect');\x0d\n    return inspect(o\x2C { ...options\x2C customInspect: false });\x0d\n  }\x0d\n}\x0d\n\x0d\nconst kDependencySpecifiers = Symbol('kDependencySpecifiers');\x0d\nconst kNoError = Symbol('kNoError');\x0d\n\x0d\nclass SourceTextModule extends Module {\x0d\n  #error = kNoError;\x0d\n  #statusOverride;\x0d\n\x0d\n  constructor(sourceText\x2C options = {}) {\x0d\n    validateString(sourceText\x2C 'sourceText');\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const {\x0d\n      lineOffset = 0\x2C\x0d\n      columnOffset = 0\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      cachedData\x2C\x0d\n    } = options;\x0d\n\x0d\n    validateInt32(lineOffset\x2C 'options.lineOffset');\x0d\n    validateInt32(columnOffset\x2C 'options.columnOffset');\x0d\n\x0d\n    if (initializeImportMeta !== undefined &&\x0d\n        typeof initializeImportMeta !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.initializeImportMeta'\x2C 'function'\x2C initializeImportMeta);\x0d\n    }\x0d\n\x0d\n    if (importModuleDynamically !== undefined &&\x0d\n        typeof importModuleDynamically !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.importModuleDynamically'\x2C 'function'\x2C\x0d\n        importModuleDynamically);\x0d\n    }\x0d\n\x0d\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.cachedData'\x2C\x0d\n        ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        cachedData\x0d\n      );\x0d\n    }\x0d\n\x0d\n    super({\x0d\n      sourceText\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      lineOffset\x2C\x0d\n      columnOffset\x2C\x0d\n      cachedData\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = async (linker) => {\x0d\n      this.#statusOverride = 'linking';\x0d\n\x0d\n      const promises = this[kWrap].link(async (identifier\x2C assert) => {\x0d\n        const module = await linker(identifier\x2C this\x2C { assert });\x0d\n        if (module[kWrap] === undefined) {\x0d\n          throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n        }\x0d\n        if (module.context !== this.context) {\x0d\n          throw new ERR_VM_MODULE_DIFFERENT_CONTEXT();\x0d\n        }\x0d\n        if (module.status === 'errored') {\x0d\n          // TODO(devsnek): replace with ERR_VM_MODULE_LINK_FAILURE\x0d\n          // and error cause proposal.\x0d\n          throw new ERR_VM_MODULE_LINKING_ERRORED();\x0d\n        }\x0d\n        if (module.status === 'unlinked') {\x0d\n          await module[kLink](linker);\x0d\n        }\x0d\n        return module[kWrap];\x0d\n      });\x0d\n\x0d\n      try {\x0d\n        if (promises !== undefined) {\x0d\n          await PromiseAll(promises);\x0d\n        }\x0d\n      } catch (e) {\x0d\n        this.#error = e;\x0d\n        throw e;\x0d\n      } finally {\x0d\n        this.#statusOverride = undefined;\x0d\n      }\x0d\n    };\x0d\n\x0d\n    this[kDependencySpecifiers] = undefined;\x0d\n  }\x0d\n\x0d\n  get dependencySpecifiers() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kDependencySpecifiers] === undefined) {\x0d\n      this[kDependencySpecifiers] = this[kWrap].getStaticDependencySpecifiers();\x0d\n    }\x0d\n    return this[kDependencySpecifiers];\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return 'errored';\x0d\n    }\x0d\n    if (this.#statusOverride) {\x0d\n      return this.#statusOverride;\x0d\n    }\x0d\n    return super.status;\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return this.#error;\x0d\n    }\x0d\n    return super.error;\x0d\n  }\x0d\n\x0d\n  createCachedData() {\x0d\n    const { status } = this;\x0d\n    if (status === 'evaluating' ||\x0d\n        status === 'evaluated' ||\x0d\n        status === 'errored') {\x0d\n      throw new ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA();\x0d\n    }\x0d\n    return this[kWrap].createCachedData();\x0d\n  }\x0d\n}\x0d\n\x0d\nclass SyntheticModule extends Module {\x0d\n  constructor(exportNames\x2C evaluateCallback\x2C options = {}) {\x0d\n    if (!ArrayIsArray(exportNames) ||\x0d\n      ArrayPrototypeSome(exportNames\x2C (e) => typeof e !== 'string')) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('exportNames'\x2C\x0d\n                                     'Array of unique strings'\x2C\x0d\n                                     exportNames);\x0d\n    } else {\x0d\n      ArrayPrototypeForEach(exportNames\x2C (name\x2C i) => {\x0d\n        if (ArrayPrototypeIndexOf(exportNames\x2C name\x2C i + 1) !== -1) {\x0d\n          throw new ERR_INVALID_ARG_VALUE(`exportNames.${name}`\x2C\x0d\n                                          name\x2C\x0d\n                                          'is duplicated');\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n    validateFunction(evaluateCallback\x2C 'evaluateCallback');\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const { context\x2C identifier } = options;\x0d\n\x0d\n    super({\x0d\n      syntheticExportNames: exportNames\x2C\x0d\n      syntheticEvaluationSteps: evaluateCallback\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = () => this[kWrap].link(() => {\x0d\n      assert.fail('link callback should not be called');\x0d\n    });\x0d\n  }\x0d\n\x0d\n  setExport(name\x2C value) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateString(name\x2C 'name');\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be linked');\x0d\n    }\x0d\n    this[kWrap].setExport(name\x2C value);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction importModuleDynamicallyWrap(importModuleDynamically) {\x0d\n  const importModuleDynamicallyWrapper = async (...args) => {\x0d\n    const m = await ReflectApply(importModuleDynamically\x2C this\x2C args);\x0d\n    if (isModuleNamespaceObject(m)) {\x0d\n      return m;\x0d\n    }\x0d\n    if (!m || m[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (m.status === 'errored') {\x0d\n      throw m.error;\x0d\n    }\x0d\n    return m.namespace;\x0d\n  };\x0d\n  return importModuleDynamicallyWrapper;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Module\x2C\x0d\n  SourceTextModule\x2C\x0d\n  SyntheticModule\x2C\x0d\n  importModuleDynamicallyWrap\x2C\x0d\n  getModuleFromWrap: (wrap) => wrapToModuleMap.get(wrap)\x2C\x0d\n};\x0d\n
code-source-info,0x3dde95cbb56,131,0,12768,C0O0C4O12768,,
tick,0x7ffdf679b393,184228,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x36339d21a2f,0x231d0e04f03,0x231d0e048e5,0x36339d1d261,0x231d0e04f03,0x231d0e048e5,0x36339d190cc,0x2c63eb06526,0x2c63eb02065
code-creation,Function,10,184251,0x3dde95ccdb6,872, node:internal/vm/module:1:1,0x3dde95cbad0,~
code-source-info,0x3dde95ccdb
code-creation,Function,10,184345,0x3dde95cd2f6,30,<instance_members_initializer> node:internal/vm/module:256:3,0x3dde95cc140,~
code-source-info,0x3dde95cd2f6,131,7051,7088,C3O7060C29O7088,,
code-creation,LazyCompile,10,184498,0x3dde95ce6ee,30,ESMLoader node:internal/modules/esm/loader:61:1,0x36339d22d40,~
code-source-info,0x3dde95ce6ee,114,1718,1718,C9O1718C29O1718,,
code-creation,LazyCompile,10,184543,0x3dde95cfba6,27,ModuleMap node:internal/modules/esm/module_map:17:14,0x36339d25490,~
code-source-info,0x3dde95cfba6,115,534,551,C3O540C7O546C11O540C26O550,,
code-creation,LazyCompile,10,184588,0x3dde95cfe4e,13,desc.value node:internal/per_context/primordials:334:32,0xa82968a000,~
code-source-info,0x3dde95cfe4e,6,9964,10025,C0O9982C7O9989C12O10012,,
code-creation,LazyCompile,10,184620,0x3dde95cff56,13,SafeIterator node:internal/per_context/primordials:279:16,0xa829689a50,~
code-source-info,0x3dde95cff56,6,8198,8260,C0O8218C3O8235C7O8233C12O8259,,
code-creation,LazyCompile,10,184654,0x3dde95d008e,13,next node:internal/per_context/primordials:282:9,0xa829689b18,~
code-source-info,0x3dde95d008e,6,8270,8317,C0O8282C3O8299C8O8289C12O8310,,
code-creation,LazyCompile,10,184802,0x3dde95d0706,28,getEmbedderOptions node:internal/options:32:28,0x379432fdac8,~
code-source-info,0x3dde95d0706,91,791,913,C0O799C6O828C11O846C17O844C23O887C27O910,,
code-creation,LazyCompile,10,184935,0x3dde95d09ae,315,Module._initPaths node:internal/modules/cjs/loader:1233:29,0x36339d1c298,~
code-source-info,0x3dde95d09ae
code-creation,Eval,10,185133,0x3dde95d3906,5, node:internal/modules/run_main:1:1,0x3dde95d36e0,~
script-source,132,node:internal/modules/run_main,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n} = primordials;\x0d\nconst CJSLoader = require('internal/modules/cjs/loader');\x0d\nconst { Module\x2C toRealPath\x2C readPackageScope } = CJSLoader;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst path = require('path');\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nfunction resolveMainPath(main) {\x0d\n  // Note extension resolution for the main entry point can be deprecated in a\x0d\n  // future major.\x0d\n  // Module._findPath is monkey-patchable here.\x0d\n  let mainPath = Module._findPath(path.resolve(main)\x2C null\x2C true);\x0d\n  if (!mainPath)\x0d\n    return;\x0d\n\x0d\n  const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\n  if (!preserveSymlinksMain)\x0d\n    mainPath = toRealPath(mainPath);\x0d\n\x0d\n  return mainPath;\x0d\n}\x0d\n\x0d\nfunction shouldUseESMLoader(mainPath) {\x0d\n  const userLoader = getOptionValue('--experimental-loader');\x0d\n  if (userLoader)\x0d\n    return true;\x0d\n  const esModuleSpecifierResolution =\x0d\n    getOptionValue('--experimental-specifier-resolution');\x0d\n  if (esModuleSpecifierResolution === 'node')\x0d\n    return true;\x0d\n  // Determine the module format of the main\x0d\n  if (mainPath && StringPrototypeEndsWith(mainPath\x2C '.mjs'))\x0d\n    return true;\x0d\n  if (!mainPath || StringPrototypeEndsWith(mainPath\x2C '.cjs'))\x0d\n    return false;\x0d\n  const pkg = readPackageScope(mainPath);\x0d\n  return pkg && pkg.data.type === 'module';\x0d\n}\x0d\n\x0d\nfunction runMainESM(mainPath) {\x0d\n  const { loadESM } = require('internal/process/esm_loader');\x0d\n  const { pathToFileURL } = require('internal/url');\x0d\n\x0d\n  handleMainPromise(loadESM((esmLoader) => {\x0d\n    const main = path.isAbsolute(mainPath) ?\x0d\n      pathToFileURL(mainPath).href : mainPath;\x0d\n    return esmLoader.import(main\x2C undefined\x2C ObjectCreate(null));\x0d\n  }));\x0d\n}\x0d\n\x0d\nasync function handleMainPromise(promise) {\x0d\n  process.on('exit'\x2C handleProcessExit);\x0d\n  try {\x0d\n    return await promise;\x0d\n  } finally {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n  }\x0d\n}\x0d\n\x0d\n// For backwards compatibility\x2C we have to run a bunch of\x0d\n// monkey-patchable code that belongs to the CJS loader (exposed by\x0d\n// `require('module')`) even when the entry point is ESM.\x0d\nfunction executeUserEntryPoint(main = process.argv[1]) {\x0d\n  const resolvedMain = resolveMainPath(main);\x0d\n  const useESMLoader = shouldUseESMLoader(resolvedMain);\x0d\n  if (useESMLoader) {\x0d\n    runMainESM(resolvedMain || main);\x0d\n  } else {\x0d\n    // Module._load is the monkey-patchable CJS module loader.\x0d\n    Module._load(main\x2C null\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  executeUserEntryPoint\x2C\x0d\n  handleMainPromise\x2C\x0d\n};\x0d\n
code-source-info,0x3dde95d3906,132,0,2621,C0O0C4O2621,,
code-creation,Function,10,185258,0x3dde95d3bee,178, node:internal/modules/run_main:1:1,0x3dde95d3880,~
code-source-info,0x3dde95d3bee,132,0,2621,C0O0C66O28C72O45C78O107C84O107C89O156C95O164C101O176C107O236C113O236C118O217C124O279C130O279C134O279C136O332C142O332C147O308C153O2549C160O2571C166O2597C172O2564C177O2620,,
code-creation,LazyCompile,10,185365,0x3dde95d441e,163,initializeESMLoader node:internal/bootstrap/pre_execution:487:29,0x2c63eb046d0,~
code-source-info,0x3dde95d441e,96,15871,16986,C0O15955C6O15955C13O16004C16O16000C21O15998C25O16024C30O16028C34O16048C40O16077C41O16084C42O16189C48O16189C53O16103C58O16144C63O16236C69O16236C74O16440C79O16398C83O16511C88O16472C92O16681C100O16685C106O16804C112O16804C117O16752C122O16760C127O16778C132O16851C138O16851C143O16871C145O16881C149O16896C151O16916C155O16941C157O16960C162O16985,,
code-creation,LazyCompile,10,185432,0x3dde95d4636,5,get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32,0x36339d1b788,~
code-source-info,0x3dde95d4636,111,2379,2419,C0O2384C4O2417,,
code-creation,LazyCompile,10,185470,0x3dde95d471e,53,loadPreloadModules node:internal/bootstrap/pre_execution:530:28,0x2c63eb047c0,~
code-source-info,0x3dde95d471e,96,17478,17809,C0O17567C8O17567C13O17599C15O17636C21O17643C26O17724C32O17724C37O17724C42O17689C47O17769C52O17808,,
code-creation,LazyCompile,10,185534,0x3dde95d4916,166,Module._preloadModules node:internal/modules/cjs/loader:1263:34,0x36339d1c328,~
code-source-info,0x3dde95d4916,111,40910,41505,C0O40926C5O40931C11O40960C12O40967C13O40973C17O40986C23O41186C33O41186C42O41238C45O41260C53O41285C58O41285C63O41260C68O41251C85O41315C88O41321C95O41326C100O41349C106O41362C114O41378C116O41378C119O41415C121O41431C125O41420C130O41456C137O41472C141O41456C146O41440C151O41402C154O41481C158O41494C165O41504,,
code-creation,LazyCompile,10,185600,0x3dde95d4b36,94,Module node:internal/modules/cjs/loader:172:16,0x36339d1b0e8,~
code-source-info,0x3dde95d4b36,111,5455,5701,C14O5478C16O5486C20O5495C22O5507C25O5512C30O5512C35O5505C39O5528C40O5541C44O5550C49O5568C54O5568C60O5590C71O5590C76O5630C77O5644C81O5655C82O5667C86O5679C88O5693C93O5700,,
code-creation,LazyCompile,10,185713,0x3dde95d4d2e,449,dirname node:path:653:10,0x375c9f4d768,~
code-source-info,0x3dde95d4d2e
code-creation,LazyCompile,10,185837,0x3dde95d5136,45,updateChildren node:internal/modules/cjs/loader:165:24,0x36339d1b098,~
code-source-info,0x3dde95d5136,111,5213,5390,C0O5257C7O5263C15O5278C19O5296C23O5304C26O5304C33O5351C38O5351C44O5389,,
code-creation,LazyCompile,10,185914,0x3dde95d5326,251,Module._nodeModulePaths node:internal/modules/cjs/loader:583:37,0x36339d1bb38,~
code-source-info,0x3dde95d
code-creation,Function,11,186036,0x231d0e05160,2060,Module._nodeModulePaths node:internal/modules/cjs/loader:583:37,0x36339d1bb38,^
code-source-info,0x231d0e05160,111,17765,19316,,,
code-creation,Function,11,186062,0x231d0e059e0,432,getCLIOptionsFromBinding node:internal/options:18:34,0x379432fd848,^
code-source-info,0x231d0e059e0,91,514,620,,,
code-creation,Function,11,186079,0x231d0e05c00,104,next node:internal/per_context/primordials:282:9,0xa829689b18,^
code-source-info,0x231d0e05c00,6,8270,8317,,,
code-creation,Function,11,186097,0x231d0e05ce0,252,SafeMap node:internal/per_context/primordials:360:16,0xa82968a0a8,^
code-source-info,0x231d0e05ce0,6,10694,10711,,,
code-creation,Function,11,186118,0x231d0e05e40,272,validateString node:internal/validators:118:24,0xa8296bce70,^
code-source-info,0x231d0e05e40,15,3534,3646,,,
code-creation,Function,11,186137,0x231d0e05fc0,412,isWindowsDeviceRoot node:path:60:29,0x375c9f4d408,^
code-source-info,0x231d0e05fc0,41,1991,2136,,,
tick,0x7ff7c11cec22,186216,0,0x0,0,0x7ff7c081ae10,0x3dde95d541b,0x3dde95d4955,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,186250,0x3dde95d5aa6,127,Module.require node:internal/modules/cjs/loader:997:36,0x36339d1bf28,~
code-source-info,0x3dde95d5aa6,111,32200,32503,C0O32210C8O32210C13O32239C15O32246C20O32261C36O32267C41O32261C42O32379C51O32391C60O32409C63O32423C76O32423C93O32480C102O32492C126O32502,,
code-creation,LazyCompile,10,186381,0x3dde95d5d8e,619,Module._load node:internal/modules/cjs/loader:757:24,0x36339d1bd88,~
code-source-info,0x3dde95d5d8e
code-creation,LazyCompile,10,186510,0x3dde95d6226,89,logger node:internal/util/debuglog:95:18,0x2e6f8161f90,~
code-source-info,0x3dde95d6226,22,2963,3164,C0O2963C3O2996C24O3021C30O3038C34O3028C38O3043C39O3059C45O3076C51O3085C55O3066C60O3090C61O3107C65O3114C72O3127C77O3123C83O3114C88O3152,,
code-creation,LazyCompile,10,186555,0x3dde95d6366,3, node:internal/per_context/primordials:285:21,0xa829689bc0,~
code-source-info,0x3dde95d6366,6,8339,8370,C0O8351C2O8363,,
code-creation,LazyCompile,10,186602,0x3dde95d643e,140,debug node:internal/util/debuglog:76:15,0x2e6f8161ef0,~
code-source-info,0x3dde95d643e,22,2432,2838,C0O2432C3O2452C6O2452C9O2563C16O2584C22O2571C30O2569C36O2604C42O2641C47O2644C50O2641C54O2670C75O2695C81O2712C85O2702C89O2717C90O2733C96O2750C102O2759C106O2740C111O2764C112O2781C116O2788C123O2801C128O2797C134O2788C139O2826,,
code-creation,LazyCompile,10,186651,0x3dde95d65ee,41,init node:internal/util/debuglog:72:16,0x2e6f8161ea0,~
code-source-info,0x3dde95d65ee,22,2330,2416,C0O2340C10O2346C14O2344C16O2384C26O2394C33O2392C40O2415,,
code-creation,LazyCompile,10,186681,0x3dde95d66de,2,testEnabled node:internal/util/debuglog:32:19,0x2c63eb181b0,~
code-source-info,0x3dde95d66de,22,1004,1015,C0O1010C1O1015,,
code-creation,LazyCompile,10,186732,0x3dde95d6876,116,debuglogImpl node:internal/util/debuglog:49:22,0x2e6f8161cf0,~
code-source-info,0x3dde95d6876,22,1499,2059,C0O1499C9O1519C18O1533C23O1561C34O1595C39O1603C43O1595C45O1615C55O1615C59O1648C71O1659C75O1664C83O1994C97O2012C99O2010C103O2033C112O2050C115O2056,,
code-creation,LazyCompile,10,186774,0x3dde95d6a2e,10, node:internal/modules/cjs/loader:272:66,0x36339d1ba58,~
code-source-info,0x3dde95d6a2e,111,7980,8007,C0O7993C2O7999C9O8006,,
code-creation,LazyCompile,10,186800,0x3dde95d6ade,2,noop node:internal/util/debuglog:47:14,0x2e6f8161ca0,~
code-source-info,0x3dde95d6ade,22,1465,1473,C1O1472,,
code-creation,LazyCompile,10,186938,0x3dde95d6ede,812,Module._resolveFilename node:internal/modules/cjs/loader:848:35,0x36339d1be10,~
code-source-info,0x3dde95d6ede
code-creation,LazyCompile,10,187081,0x3dde95d749e,28,canBeRequiredByUsers node:internal/bootstrap/loaders:240:30,0xa82968fb20,~
code-source-info,0x3dde95d749e,9,7593,7692,C0O7617C5O7630C10O7634C15O7634C21O7648C23O7666C27O7687,,
code-creation,LazyCompile,10,187154,0x3dde95d7756,327,Module._resolveLookupPaths node:internal/modules/cjs/loader:667:38,0x36339d1bc58,~
code-source-info,0x3dde95d
code-creation,LazyCompile,10,187246,0x3dde95d7a76,76,trySelfParentPath node:internal/modules/cjs/loader:427:27,0x36339d1b408,~
code-source-info,0x3dde95d7a76,111,12696,12971,C0O12710C4O12723C5O12736C6O12753C12O12784C16O12793C17O12815C24O12818C29O12841C36O12844C44O12888C47O12903C52O12903C59O12911C62O12916C66O12909C69O12920C72O12943C73O12956C75O12970,,
code-creation,LazyCompile,10,187324,0x3dde95d7cb6,235,trySelf node:internal/modules/cjs/loader:441:17,0x36339d1b458,~
code-source-info,0x3dde95d7cb6,111,12991,13849,C0O13018C4O13035C5O13048C6O13091C9O13091C17O13068C22O13079C27O13130C31O13146C37O13169C38O13182C39O13201C47O13220C48O13233C49O13243C51O13277C55O13269C60O13290C65O13317C70O13363C82O13321C89O13380C94O13398C97O13432C102O13437C107O13398C112O13396C118O13463C119O13476C123O13498C128O13527C133O13557C138O13579C142O13557C149O13622C152O13622C159O13649C168O13527C183O13505C188O13695C200O13718C203O13724C210O13729C215O13764C222O13808C226O13770C231O13764C232O13833C234O13833,,
code-creation,LazyCompile,10,187409,0x3dde95d7f6e,129,readPackageScope node:internal/modules/cjs/loader:321:26,0x36339d1b228,~
code-source-info,0x3dde95d7f6e,111,9239,9772,C0O9283C7O9317C10O9283C16O9330C18O9359C25O9414C28O9376C34O9425C47O9437C54O9494C61O9533C66O9537C70O9498C77O9563C78O9576C79O9596C84O9620C86O9618C90O9596C95O9631C97O9642C104O9664C110O9684C116O9702C117O9730C119O9730C124O9349C127O9756C128O9769,,
code-creation,LazyCompile,10,187497,0x3dde95d82ce,234,readPackage node:internal/modules/cjs/loader:290:21,0x36339d1b1d8,~
code-source-info,0x3dde95d82ce,111,8391,9210,C0O8427C5O8432C13O8432C20O8492C25O8509C30O8509C36O8527C38O8555C40O8571C41O8592C46O8610C51O8610C57O8649C63O8662C72O8688C77O8699C79O8730C84O8747C91O8747C97O8774C98O8787C102O8824C107O8824C112O8863C117O8885C125O8911C133O8940C141O8972C149O9001C160O9019C165O9036C170O9036C176O9066C178O9082C190O9105C195O9112C199O9129C207O9158C213O9169C220O9180C224O9176C227O9139C231O9194C233O9194,,
code-creation,LazyCompile,10,187601,0x3dde95d85d6,199,read node:internal/modules/package_json_reader:16:14,0x36339d20da8,~
code-source-info,0x3dde95d85d6,112,307,992,C0O323C5O333C10O333C17O355C22O368C27O368C32O382C33O432C40O461C43O461C48O432C53O404C59O415C66O512C73O514C79O522C86O568C92O568C97O549C102O600C106O633C112O670C115O681C127O732C132O766C142O679C148O805C154O853C159O853C164O885C169O894C174O894C180O943C185O949C190O949C196O975C198O989,,
code-creation,LazyCompile,10,187685,0x3dde95d89f6,232,toNamespacedPath node:path:618:19,0x375c9f4d6f8,~
code-source-info,0x3dde95d89f6,41,20086,21201,C0O20152C6O20189C12O20196C17O20210C19O20222C20O20251C25O20257C30O20257C36O20296C43O20303C48O20316C50O20328C51O20336C58O20340C66O20387C68O20383C73O20445C81O20449C89O20496C91O20492C96O20541C104O20541C110O20594C112O20607C114O20603C121O20638C123O20634C128O20738C133O20760C139O20760C148O20800C151O20833C156O20865C161O20865C167O20845C175O20919C181O20919C189O20966C191O20962C198O20987C204O20987C212O21034C214O21030C219O21137C224O21154C228O21169C229O21184C231O21196,,
code-creation,LazyCompile,10,187979,0x3dde95d918e,436,Module._findPath node:internal/modules/cjs/loader:494:28,0x36339d1baa8,~
code-source-info,0x3dde95d918e
code-creation,LazyCompile,10,188100,0x3dde95d953e,109,isAbsolute node:path:402:13,0x375c9f4d5d0,~
code-source-info,0x3dde95d953e,41,13104,13523,C0O13118C8O13118C13O13170C18O13183C19O13191C24O13205C25O13218C26O13239C33O13239C39O13280C42O13287C50O13355C58O13369C66O13405C72O13405C80O13444C82O13440C92O13481C98O13481C104O13465C108O13518,,
tick,0x7ff7c0cdf3bc,188183,0,0x0,0,0x3dde95d91c7,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,188260,0x3dde95d97ce,85,stat node:internal/modules/cjs/loader:151:14,0x36339d1b048,~
code-source-info,0x3dde95d97ce,111,4777,5186,C0O4793C5O4809C10O4809C17O4840C23O4886C28O4896C33O4896C39O4916C41O4942C43O4956C44O4980C49O4980C54O5013C61O5046C66O5128C71O5138C76O5138C82O5169C84O5183,,
code-creation,LazyCompile,10,188357,0x3dde95d9926,44,tryExtensions node:internal/modules/cjs/loader:400:23,0x36339d1b368,~
code-source-info,0x3dde95d9926,111,11900,12093,C0O11936C2O11948C6O11941C11O11985C16O12001C19O11995C23O11985C29O12022C31O12045C33O12061C34O11957C39O11923C42O12077C43O12090,,
code-creation,LazyCompile,10,188406,0x3dde95d9a56,50,tryFile node:internal/modules/cjs/loader:384:17,0x36339d1b2c8,~
code-source-info,0x3dde95d9a56,111,11460,11661,C0O11498C3O11498C8O11520C9O11527C14O11534C15O11541C16O11545C24O11570C26O11585C31O11597C36O11597C41O11618C42O11627C45O11634C49O11658,,
code-creation,LazyCompile,10,188500,0x3dde95d9b9e,42,toRealPath node:internal/modules/cjs/loader:393:20,0x36339d1b318,~
code-source-info,0x3dde95d9b9e,111,11684,11800,C0O11703C5O11713C10O11726C17O11747C20O11758C28O11777C35O11713C41O11797,,
code-creation,LazyCompile,10,188777,0x3dde95d9fb6,1042,realpathSync node:fs:2425:22,0x379432d93f0,~
script-source,80,node:fs,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// Maintainers\x2C keep in mind that ES1-style octal literals (`0666`) are not\x0d\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// When using FSReqCallback\x2C make sure to create the object only *after* all\x0d\n// parameter validation has happened\x2C so that the objects are not kept in memory\x0d\n// in case they are created but never used due to an exception.\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  BigIntPrototypeToString\x2C\x0d\n  MathMax\x2C\x0d\n  Number\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { fs: constants } = internalBinding('constants');\x0d\nconst {\x0d\n  S_IFIFO\x2C\x0d\n  S_IFLNK\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x2C\x0d\n  S_IFSOCK\x2C\x0d\n  F_OK\x2C\x0d\n  R_OK\x2C\x0d\n  W_OK\x2C\x0d\n  X_OK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  O_SYMLINK\x0d\n} = constants;\x0d\n\x0d\nconst pathModule = require('path');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\n\x0d\n// We need to get the statValues from the binding at the callsite since\x0d\n// it's re-initialized after deserialization.\x0d\n\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  aggregateTwoErrors\x2C\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_FEATURE_UNAVAILABLE_ON_PLATFORM\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { FSReqCallback } = binding;\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst internalUtil = require('internal/util');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  Stats\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  realpathCacheKey\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n} = require('internal/fs/utils');\x0d\nconst {\x0d\n  Dir\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x0d\n} = require('internal/fs/dir');\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateCallback\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst watchers = require('internal/fs/watchers');\x0d\nconst ReadFileContext = require('internal/fs/read_file_context');\x0d\n\x0d\nlet truncateWarn = true;\x0d\nlet fs;\x0d\n\x0d\n// Lazy loaded\x0d\nlet cpFn;\x0d\nlet cpSyncFn;\x0d\nlet promises = null;\x0d\nlet ReadStream;\x0d\nlet WriteStream;\x0d\nlet rimraf;\x0d\nlet rimrafSync;\x0d\n\x0d\n// These have to be separate because of how graceful-fs happens to do it's\x0d\n// monkeypatching.\x0d\nlet FileReadStream;\x0d\nlet FileWriteStream;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst isOSX = process.platform === 'darwin';\x0d\n\x0d\n\x0d\nfunction showTruncateDeprecation() {\x0d\n  if (truncateWarn) {\x0d\n    process.emitWarning(\x0d\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\x0d\n      'fs.ftruncate with a file descriptor instead.'\x2C\x0d\n      'DeprecationWarning'\x2C 'DEP0081');\x0d\n    truncateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return cb;\x0d\n}\x0d\n\x0d\n// Ensure that callbacks run in the global context. Only use this function\x0d\n// for callbacks that are passed to the binding layer\x2C callbacks that are\x0d\n// invoked from JS already run in the proper scope.\x0d\nfunction makeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (...args) => ReflectApply(cb\x2C this\x2C args);\x0d\n}\x0d\n\x0d\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\x0d\n// an optimization\x2C since the data passed back to the callback needs to be\x0d\n// transformed anyway.\x0d\nfunction makeStatsCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (err\x2C stats) => {\x0d\n    if (err) return cb(err);\x0d\n    cb(err\x2C getStatsFromBinding(stats));\x0d\n  };\x0d\n}\x0d\n\x0d\nconst isFd = isUint32;\x0d\n\x0d\nfunction isFileType(stats\x2C fileType) {\x0d\n  // Use stats array directly to avoid creating an fs.Stats instance just for\x0d\n  // our internal use.\x0d\n  let mode = stats[1];\x0d\n  if (typeof mode === 'bigint')\x0d\n    mode = Number(mode);\x0d\n  return (mode & S_IFMT) === fileType;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests a user's permissions for the file or directory\x0d\n * specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction access(path\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = F_OK;\x0d\n  }\x0d\n\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously tests a user's permissions for the file or\x0d\n * directory specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction accessSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(exists?: boolean) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction exists(path\x2C callback) {\x0d\n  maybeCallback(callback);\x0d\n\x0d\n  function suppressedCallback(err) {\x0d\n    callback(err ? false : true);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    fs.access(path\x2C F_OK\x2C suppressedCallback);\x0d\n  } catch {\x0d\n    return callback(false);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperty(exists\x2C internalUtil.promisify.custom\x2C {\x0d\n  value: (path) => {\x0d\n    return new Promise((resolve) => fs.exists(path\x2C resolve));\x0d\n  }\x0d\n});\x0d\n\x0d\n// fs.existsSync never throws\x2C it only returns true or false.\x0d\n// Since fs.existsSync never throws\x2C users have established\x0d\n// the expectation that passing invalid arguments to it\x2C even like\x0d\n// fs.existsSync()\x2C would only get a false in return\x2C so we cannot signal\x0d\n// validation errors to users properly out of compatibility concerns.\x0d\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\x0d\n/**\x0d\n * Synchronously tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction existsSync(path) {\x0d\n  try {\x0d\n    path = getValidatedPath(path);\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n  const ctx = { path };\x0d\n  const nPath = pathModule.toNamespacedPath(path);\x0d\n  binding.access(nPath\x2C F_OK\x2C undefined\x2C ctx);\x0d\n\x0d\n  // In case of an invalid symlink\x2C `binding.access()` on win32\x0d\n  // will **not** return an error and is therefore not enough.\x0d\n  // Double check with `binding.stat()`.\x0d\n  if (isWindows && ctx.errno === undefined) {\x0d\n    binding.stat(nPath\x2C false\x2C undefined\x2C ctx);\x0d\n  }\x0d\n\x0d\n  return ctx.errno === undefined;\x0d\n}\x0d\n\x0d\nfunction readFileAfterOpen(err\x2C fd) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err) {\x0d\n    context.callback(err);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  context.fd = fd;\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = readFileAfterStat;\x0d\n  req.context = context;\x0d\n  binding.fstat(fd\x2C false\x2C req);\x0d\n}\x0d\n\x0d\nfunction readFileAfterStat(err\x2C stats) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err)\x0d\n    return context.close(err);\x0d\n\x0d\n  const size = context.size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n\x0d\n  if (size > kIoMaxLength) {\x0d\n    err = new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    return context.close(err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    if (size === 0) {\x0d\n      context.buffers = [];\x0d\n    } else {\x0d\n      context.buffer = Buffer.allocUnsafeSlow(size);\x0d\n    }\x0d\n  } catch (err) {\x0d\n    return context.close(err);\x0d\n  }\x0d\n  context.read();\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    callback(new AbortError());\x0d\n    return true;\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   data?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readFile(path\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const context = new ReadFileContext(callback\x2C options.encoding);\x0d\n  context.isUserFd = isFd(path); // File descriptor ownership\x0d\n\x0d\n  if (options.signal) {\x0d\n    context.signal = options.signal;\x0d\n  }\x0d\n  if (context.isUserFd) {\x0d\n    process.nextTick(function tick(context) {\x0d\n      ReflectApply(readFileAfterOpen\x2C { context }\x2C [null\x2C path]);\x0d\n    }\x2C context);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  const flagsNumber = stringToFlags(options.flag\x2C 'options.flag');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.context = context;\x0d\n  req.oncomplete = readFileAfterOpen;\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               0o666\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\nfunction tryStatSync(fd\x2C isUserFd) {\x0d\n  const ctx = {};\x0d\n  const stats = binding.fstat(fd\x2C false\x2C undefined\x2C ctx);\x0d\n  if (ctx.errno !== undefined && !isUserFd) {\x0d\n    fs.closeSync(fd);\x0d\n    throw uvException(ctx);\x0d\n  }\x0d\n  return stats;\x0d\n}\x0d\n\x0d\nfunction tryCreateBuffer(size\x2C fd\x2C isUserFd) {\x0d\n  let threw = true;\x0d\n  let buffer;\x0d\n  try {\x0d\n    if (size > kIoMaxLength) {\x0d\n      throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    }\x0d\n    buffer = Buffer.allocUnsafe(size);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C len) {\x0d\n  let threw = true;\x0d\n  let bytesRead;\x0d\n  try {\x0d\n    bytesRead = fs.readSync(fd\x2C buffer\x2C pos\x2C len);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return bytesRead;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readFileSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C options.flag\x2C 0o666);\x0d\n\x0d\n  const stats = tryStatSync(fd\x2C isUserFd);\x0d\n  const size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n  let pos = 0;\x0d\n  let buffer; // Single buffer with file data\x0d\n  let buffers; // List for when size is unknown\x0d\n\x0d\n  if (size === 0) {\x0d\n    buffers = [];\x0d\n  } else {\x0d\n    buffer = tryCreateBuffer(size\x2C fd\x2C isUserFd);\x0d\n  }\x0d\n\x0d\n  let bytesRead;\x0d\n\x0d\n  if (size !== 0) {\x0d\n    do {\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C size - pos);\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0 && pos < size);\x0d\n  } else {\x0d\n    do {\x0d\n      // The kernel lies about many files.\x0d\n      // Go ahead and try to read some bytes.\x0d\n      buffer = Buffer.allocUnsafe(8192);\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C 0\x2C 8192);\x0d\n      if (bytesRead !== 0) {\x0d\n        ArrayPrototypePush(buffers\x2C buffer.slice(0\x2C bytesRead));\x0d\n      }\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0);\x0d\n  }\x0d\n\x0d\n  if (!isUserFd)\x0d\n    fs.closeSync(fd);\x0d\n\x0d\n  if (size === 0) {\x0d\n    // Data was collected into the buffers list.\x0d\n    buffer = Buffer.concat(buffers\x2C pos);\x0d\n  } else if (pos < size) {\x0d\n    buffer = buffer.slice(0\x2C pos);\x0d\n  }\x0d\n\x0d\n  if (options.encoding) buffer = buffer.toString(options.encoding);\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction defaultCloseCallback(err) {\x0d\n  if (err != null) throw err;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} [callback]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction close(fd\x2C callback = defaultCloseCallback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  if (callback !== defaultCloseCallback)\x0d\n    callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.close(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction closeSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.close(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   fd?: number\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction open(path\x2C flags\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  if (arguments.length < 3) {\x0d\n    callback = flags;\x0d\n    flags = 'r';\x0d\n    mode = 0o666;\x0d\n  } else if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0o666;\x0d\n  } else {\x0d\n    mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  }\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               mode\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction openSync(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n                              flagsNumber\x2C mode\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {number} offset\x0d\n * @param {number} length\x0d\n * @param {number | bigint} position\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffer?: Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  if (arguments.length <= 3) {\x0d\n    // Assume fs.read(fd\x2C options\x2C callback)\x0d\n    let options = ObjectCreate(null);\x0d\n    if (arguments.length < 3) {\x0d\n      // This is fs.read(fd\x2C callback)\x0d\n      // buffer will be the callback\x0d\n      callback = buffer;\x0d\n    } else {\x0d\n      // This is fs.read(fd\x2C {}\x2C callback)\x0d\n      // buffer will be the options object\x0d\n      // offset is the callback\x0d\n      options = buffer;\x0d\n      callback = offset;\x0d\n    }\x0d\n\x0d\n    ({\x0d\n      buffer = Buffer.alloc(16384)\x2C\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x0d\n    } = options);\x0d\n  }\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n  callback = maybeCallback(callback);\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return process.nextTick(function tick() {\x0d\n      callback(null\x2C 0\x2C buffer);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  function wrapper(err\x2C bytesRead) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C bytesRead || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(read\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesRead'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads the file from the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {{\x0d\n *   offset?: number;\x0d\n *   length?: number;\x0d\n *   position?: number | bigint;\x0d\n *   }} [offset]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readSync(fd\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (arguments.length <= 3) {\x0d\n    // Assume fs.readSync(fd\x2C buffer\x2C options)\x0d\n    const options = offset || ObjectCreate(null);\x0d\n\x0d\n    ({\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x0d\n    } = options);\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  const ctx = {};\x0d\n  const result = binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor)\x0d\n * and writes to an array of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffers?: ArrayBufferView[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readv(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C read) {\x0d\n    callback(err\x2C read || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.readBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(readv\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesRead'\x2C 'buffers']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads file from the\x0d\n * specified `fd` (file descriptor) and writes to an array\x0d\n * of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readvSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.readBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes `buffer` to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string | object} buffer\x0d\n * @param {number} [offset]\x0d\n * @param {number} [length]\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number;\x0d\n *   buffer?: Buffer | TypedArray | DataView\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction write(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C written || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    callback = maybeCallback(callback || position || length || offset);\x0d\n    if (offset == null || typeof offset === 'function') {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = wrapper;\x0d\n    return binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n  }\x0d\n\x0d\n  validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n\x0d\n  if (typeof position !== 'function') {\x0d\n    if (typeof offset === 'function') {\x0d\n      position = offset;\x0d\n      offset = null;\x0d\n    } else {\x0d\n      position = length;\x0d\n    }\x0d\n    length = 'utf8';\x0d\n  }\x0d\n\x0d\n  const str = String(buffer);\x0d\n  validateEncoding(str\x2C length);\x0d\n  callback = maybeCallback(position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n  return binding.writeString(fd\x2C str\x2C offset\x2C length\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(write\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesWritten'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously writes `buffer` to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string | object} buffer\x0d\n * @param {number} [offset]\x0d\n * @param {number} [length]\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writeSync(fd\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  let result;\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (position === undefined)\x0d\n      position = null;\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    result = binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  } else {\x0d\n    validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n    validateEncoding(buffer\x2C length);\x0d\n\x0d\n    if (offset === undefined)\x0d\n      offset = null;\x0d\n    result = binding.writeString(fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes an array of `ArrayBufferView`s to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number\x2C\x0d\n *   buffers?: ArrayBufferView[]\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writev(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    callback(err\x2C written || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    process.nextTick(callback\x2C null\x2C 0\x2C buffers);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.writeBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(writev\x2C internalUtil.customPromisifyArgs\x2C {\x0d\n  value: ['bytesWritten'\x2C 'buffer']\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\n/**\x0d\n * Synchronously writes an array of `ArrayBufferView`s\x0d\n * to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writevSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.writeBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rename(oldPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n\x0d\n/**\x0d\n * Synchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction renameSync(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const ctx = { path: oldPath\x2C dest: newPath };\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncate(path\x2C len\x2C callback) {\x0d\n  if (typeof path === 'number') {\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncate(path\x2C len\x2C callback);\x0d\n  }\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  } else if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = maybeCallback(callback);\x0d\n  fs.open(path\x2C 'r+'\x2C (er\x2C fd) => {\x0d\n    if (er) return callback(er);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = function oncomplete(er) {\x0d\n      fs.close(fd\x2C (er2) => {\x0d\n        callback(aggregateTwoErrors(er2\x2C er));\x0d\n      });\x0d\n    };\x0d\n    binding.ftruncate(fd\x2C len\x2C req);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncateSync(path\x2C len) {\x0d\n  if (typeof path === 'number') {\x0d\n    // legacy\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncateSync(path\x2C len);\x0d\n  }\x0d\n  if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n  // Allow error to be thrown\x2C but still close fd.\x0d\n  const fd = fs.openSync(path\x2C 'r+');\x0d\n  let ret;\x0d\n\x0d\n  try {\x0d\n    ret = fs.ftruncateSync(fd\x2C len);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncate(fd\x2C len = 0\x2C callback) {\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.ftruncate(fd\x2C len\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncateSync(fd\x2C len = 0) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  const ctx = {};\x0d\n  binding.ftruncate(fd\x2C len\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction lazyLoadCp() {\x0d\n  if (cpFn === undefined) {\x0d\n    ({ cpFn } = require('internal/fs/cp/cp'));\x0d\n    cpFn = require('util').callbackify(cpFn);\x0d\n    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction lazyLoadRimraf() {\x0d\n  if (rimraf === undefined)\x0d\n    ({ rimraf\x2C rimrafSync } = require('internal/fs/rimraf'));\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdir(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  callback = makeCallback(callback);\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    validateRmOptions(\x0d\n      path\x2C\x0d\n      { ...options\x2C force: false }\x2C\x0d\n      true\x2C\x0d\n      (err\x2C options) => {\x0d\n        if (err === false) {\x0d\n          const req = new FSReqCallback();\x0d\n          req.oncomplete = callback;\x0d\n          return binding.rmdir(path\x2C req);\x0d\n        }\x0d\n        if (err) {\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        lazyLoadRimraf();\x0d\n        rimraf(path\x2C options\x2C callback);\x0d\n      });\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = callback;\x0d\n    return binding.rmdir(path\x2C req);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdirSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    options = validateRmOptionsSync(path\x2C { ...options\x2C force: false }\x2C true);\x0d\n    if (options !== false) {\x0d\n      lazyLoadRimraf();\x0d\n      return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n    }\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n  }\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.rmdir(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  return handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rm(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateRmOptions(path\x2C options\x2C false\x2C (err\x2C options) => {\x0d\n    if (err) {\x0d\n      return callback(err);\x0d\n    }\x0d\n    lazyLoadRimraf();\x0d\n    return rimraf(pathModule.toNamespacedPath(path)\x2C options\x2C callback);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n  options = validateRmOptionsSync(path\x2C options\x2C false);\x0d\n\x0d\n  lazyLoadRimraf();\x0d\n  return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Forces all currently queued I/O operations associated\x0d\n * with the file to the operating system's synchronized\x0d\n * I/O completion state.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fdatasync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously forces all currently queued I/O operations\x0d\n * associated with the file to the operating\x0d\n * system's synchronized I/O completion state.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fdatasync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Requests for all data for the open file descriptor\x0d\n * to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fsync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously requests for all data for the open\x0d\n * file descriptor to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fsync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdir(path\x2C options\x2C callback) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n  } else if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                parseFileMode(mode\x2C 'mode')\x2C recursive\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @returns {string | void}\x0d\n */\x0d\nfunction mkdirSync(path\x2C options) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                               parseFileMode(mode\x2C 'mode')\x2C recursive\x2C\x0d\n                               undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  if (recursive) {\x0d\n    return result;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   files?: string[] | Buffer[] | Direct[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readdir(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  if (!options.withFileTypes) {\x0d\n    req.oncomplete = callback;\x0d\n  } else {\x0d\n    req.oncomplete = (err\x2C result) => {\x0d\n      if (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      getDirents(path\x2C result\x2C callback);\x0d\n    };\x0d\n  }\x0d\n  binding.readdir(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C\x0d\n                  !!options.withFileTypes\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer[] | Dirent[]}\x0d\n */\x0d\nfunction readdirSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 options.encoding\x2C !!options.withFileTypes\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return options.withFileTypes ? getDirents(path\x2C result) : result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Invokes the callback with the `fs.Stats`\x0d\n * for the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fstat(fd\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  callback = makeStatsCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.fstat(fd\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Retrieves the `fs.Stats` for the symbolic link\x0d\n * referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lstat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.lstat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously gets the stats of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction stat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.stat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\nfunction hasNoEntryError(ctx) {\x0d\n  if (ctx.errno) {\x0d\n    const uvErr = uvErrmapGet(ctx.errno);\x0d\n    return uvErr?.[0] === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  if (ctx.error) {\x0d\n    return ctx.error.code === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction fstatSync(fd\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = { fd };\x0d\n  const stats = binding.fstat(fd\x2C options.bigint\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the symbolic link referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction lstatSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                              options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats`\x0d\n * for the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction statSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                             options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   linkString?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readlink(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.readlink(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readlinkSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const ctx = { path };\x0d\n  const result = binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                                  options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates the link called `path` pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string} [type_]\x0d\n * @param {(err?: Error) => any} callback_\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlink(target\x2C path\x2C type_\x2C callback_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  const callback = makeCallback(arguments[arguments.length - 1]);\x0d\n\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (isWindows && type === null) {\x0d\n    let absoluteTarget;\x0d\n    try {\x0d\n      // Symlinks targets can be relative to the newly created path.\x0d\n      // Calculate absolute file name of the symlink target\x2C and check\x0d\n      // if it is a directory. Ignore resolve error to keep symlink\x0d\n      // errors consistent between platforms if invalid path is\x0d\n      // provided.\x0d\n      absoluteTarget = pathModule.resolve(path\x2C '..'\x2C target);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n    if (absoluteTarget !== undefined) {\x0d\n      stat(absoluteTarget\x2C (err\x2C stat) => {\x0d\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\x0d\n        const resolvedFlags = stringToSymlinkType(resolvedType);\x0d\n        const destination = preprocessSymlinkDestination(target\x2C\x0d\n                                                         resolvedType\x2C\x0d\n                                                         path);\x0d\n\x0d\n        const req = new FSReqCallback();\x0d\n        req.oncomplete = callback;\x0d\n        binding.symlink(destination\x2C\x0d\n                        pathModule.toNamespacedPath(path)\x2C resolvedFlags\x2C req);\x0d\n      });\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const destination = preprocessSymlinkDestination(target\x2C type\x2C path);\x0d\n\x0d\n  const flags = stringToSymlinkType(type);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.symlink(destination\x2C pathModule.toNamespacedPath(path)\x2C flags\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates the link called `path`\x0d\n * pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string} [type]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlinkSync(target\x2C path\x2C type) {\x0d\n  type = (typeof type === 'string' ? type : null);\x0d\n  if (isWindows && type === null) {\x0d\n    const absoluteTarget = pathModule.resolve(`${path}`\x2C '..'\x2C `${target}`);\x0d\n    if (statSync(absoluteTarget\x2C { throwIfNoEntry: false })?.isDirectory()) {\x0d\n      type = 'dir';\x0d\n    }\x0d\n  }\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  const flags = stringToSymlinkType(type);\x0d\n\x0d\n  const ctx = { path: target\x2C dest: path };\x0d\n  binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                  pathModule.toNamespacedPath(path)\x2C flags\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction link(existingPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n               pathModule.toNamespacedPath(newPath)\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction linkSync(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const ctx = { path: existingPath\x2C dest: newPath };\x0d\n  const result = binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                              pathModule.toNamespacedPath(newPath)\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlink(path\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlinkSync(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmod(fd\x2C mode\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchmod(fd\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmodSync(fd\x2C mode) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  const ctx = {};\x0d\n  binding.fchmod(fd\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmod(path\x2C mode\x2C callback) {\x0d\n  callback = maybeCallback(callback);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  fs.open(path\x2C O_WRONLY | O_SYMLINK\x2C (err\x2C fd) => {\x0d\n    if (err) {\x0d\n      callback(err);\x0d\n      return;\x0d\n    }\x0d\n    // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n    // but still try to close\x2C and report closing errors if they occur.\x0d\n    fs.fchmod(fd\x2C mode\x2C (err) => {\x0d\n      fs.close(fd\x2C (err2) => {\x0d\n        callback(aggregateTwoErrors(err2\x2C err));\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmodSync(path\x2C mode) {\x0d\n  const fd = fs.openSync(path\x2C O_WRONLY | O_SYMLINK);\x0d\n\x0d\n  // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n  // but still try to close\x2C and report closing errors if they occur.\x0d\n  let ret;\x0d\n  try {\x0d\n    ret = fs.fchmodSync(fd\x2C mode);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmod(path\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmodSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchown(fd\x2C uid\x2C gid\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchownSync(fd\x2C uid\x2C gid) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C\x0d\n                 toUnixTimestamp(mtime)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C toUnixTimestamp(mtime)\x2C\x0d\n                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by the supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimes(fd\x2C atime\x2C mtime\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by the\x0d\n * supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimesSync(fd\x2C atime\x2C mtime) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  const ctx = {};\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the access and modification times of\x0d\n * a file in the same way as `fs.utimes()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the access and modification\x0d\n * times of a file in the same way as `fs.utimesSync()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    const abortError = new AbortError();\x0d\n    if (isUserFd) {\x0d\n      callback(abortError);\x0d\n    } else {\x0d\n      fs.close(fd\x2C (err) => {\x0d\n        callback(aggregateTwoErrors(err\x2C abortError));\x0d\n      });\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  // write(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback)\x0d\n  fs.write(fd\x2C buffer\x2C offset\x2C length\x2C null\x2C (writeErr\x2C written) => {\x0d\n    if (writeErr) {\x0d\n      if (isUserFd) {\x0d\n        callback(writeErr);\x0d\n      } else {\x0d\n        fs.close(fd\x2C (err) => {\x0d\n          callback(aggregateTwoErrors(err\x2C writeErr));\x0d\n        });\x0d\n      }\x0d\n    } else if (written === length) {\x0d\n      if (isUserFd) {\x0d\n        callback(null);\x0d\n      } else {\x0d\n        fs.close(fd\x2C callback);\x0d\n      }\x0d\n    } else {\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n      writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  if (isFd(path)) {\x0d\n    const isUserFd = true;\x0d\n    const signal = options.signal;\x0d\n    writeAll(path\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  fs.open(path\x2C flag\x2C options.mode\x2C (openErr\x2C fd) => {\x0d\n    if (openErr) {\x0d\n      callback(openErr);\x0d\n    } else {\x0d\n      const isUserFd = false;\x0d\n      const signal = options.signal;\x0d\n      writeAll(fd\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C flag\x2C options.mode);\x0d\n\x0d\n  let offset = 0;\x0d\n  let length = data.byteLength;\x0d\n  try {\x0d\n    while (length > 0) {\x0d\n      const written = fs.writeSync(fd\x2C data\x2C offset\x2C length);\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n    }\x0d\n  } finally {\x0d\n    if (!isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFile(path\x2C data\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFileSync(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Watches for the changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {string | {\x0d\n *   persistent?: boolean;\x0d\n *   recursive?: boolean;\x0d\n *   encoding?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   eventType?: string\x2C\x0d\n *   filename?: string | Buffer\x0d\n *   ) => any} [listener]\x0d\n * @returns {watchers.FSWatcher}\x0d\n */\x0d\nfunction watch(filename\x2C options\x2C listener) {\x0d\n  if (typeof options === 'function') {\x0d\n    listener = options;\x0d\n  }\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  if (options.persistent === undefined) options.persistent = true;\x0d\n  if (options.recursive === undefined) options.recursive = false;\x0d\n  if (options.recursive && !(isOSX || isWindows))\x0d\n    throw new ERR_FEATURE_UNAVAILABLE_ON_PLATFORM('watch recursively');\x0d\n  const watcher = new watchers.FSWatcher();\x0d\n  watcher[watchers.kFSWatchStart](filename\x2C\x0d\n                                  options.persistent\x2C\x0d\n                                  options.recursive\x2C\x0d\n                                  options.encoding);\x0d\n\x0d\n  if (listener) {\x0d\n    watcher.addListener('change'\x2C listener);\x0d\n  }\x0d\n  if (options.signal) {\x0d\n    if (options.signal.aborted) {\x0d\n      process.nextTick(() => watcher.close());\x0d\n    } else {\x0d\n      const listener = () => watcher.close();\x0d\n      options.signal.addEventListener('abort'\x2C listener);\x0d\n      watcher.once('close'\x2C () => {\x0d\n        options.signal.removeEventListener('abort'\x2C listener);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return watcher;\x0d\n}\x0d\n\x0d\n\x0d\nconst statWatchers = new SafeMap();\x0d\n\x0d\n/**\x0d\n * Watches for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   persistent?: boolean;\x0d\n *   interval?: number;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   current?: Stats\x2C\x0d\n *   previous?: Stats\x0d\n *   ) => any} listener\x0d\n * @returns {watchers.StatWatcher}\x0d\n */\x0d\nfunction watchFile(filename\x2C options\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  let stat;\x0d\n\x0d\n  if (options === null || typeof options !== 'object') {\x0d\n    listener = options;\x0d\n    options = null;\x0d\n  }\x0d\n\x0d\n  options = {\x0d\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\x0d\n    // a little on the slow side but let's stick with it for now to keep\x0d\n    // behavioral changes to a minimum.\x0d\n    interval: 5007\x2C\x0d\n    persistent: true\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n\x0d\n  stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) {\x0d\n    stat = new watchers.StatWatcher(options.bigint);\x0d\n    stat[watchers.kFSStatWatcherStart](filename\x2C\x0d\n                                       options.persistent\x2C options.interval);\x0d\n    statWatchers.set(filename\x2C stat);\x0d\n  } else {\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('add');\x0d\n  }\x0d\n\x0d\n  stat.addListener('change'\x2C listener);\x0d\n  return stat;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Stops watching for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {() => any} [listener]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unwatchFile(filename\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  const stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) return;\x0d\n\x0d\n  if (typeof listener === 'function') {\x0d\n    const beforeListenerCount = stat.listenerCount('change');\x0d\n    stat.removeListener('change'\x2C listener);\x0d\n    if (stat.listenerCount('change') < beforeListenerCount)\x0d\n      stat[watchers.kFSStatWatcherAddOrCleanRef]('clean');\x0d\n  } else {\x0d\n    stat.removeAllListeners('change');\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('cleanAll');\x0d\n  }\x0d\n\x0d\n  if (stat.listenerCount('change') === 0) {\x0d\n    stat.stop();\x0d\n    statWatchers.delete(filename);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nlet splitRoot;\x0d\nif (isWindows) {\x0d\n  // Regex to find the device root on Windows (e.g. 'c:\\\\')\x2C including trailing\x0d\n  // slash.\x0d\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    return RegExpPrototypeExec(splitRootRe\x2C str)[0];\x0d\n  };\x0d\n} else {\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    for (let i = 0; i < str.length; ++i) {\x0d\n      if (StringPrototypeCharCodeAt(str\x2C i) !== CHAR_FORWARD_SLASH)\x0d\n        return StringPrototypeSlice(str\x2C 0\x2C i);\x0d\n    }\x0d\n    return str;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction encodeRealpathResult(result\x2C options) {\x0d\n  if (!options || !options.encoding || options.encoding === 'utf8')\x0d\n    return result;\x0d\n  const asBuffer = Buffer.from(result);\x0d\n  if (options.encoding === 'buffer') {\x0d\n    return asBuffer;\x0d\n  }\x0d\n  return asBuffer.toString(options.encoding);\x0d\n}\x0d\n\x0d\n// Finds the next portion of a (partial) path\x2C up to the next path delimiter\x0d\nlet nextPart;\x0d\nif (isWindows) {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    for (; i < p.length; ++i) {\x0d\n      const ch = StringPrototypeCharCodeAt(p\x2C i);\x0d\n\x0d\n      // Check for a separator character\x0d\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\x0d\n        return i;\x0d\n    }\x0d\n    return -1;\x0d\n  };\x0d\n} else {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    return StringPrototypeIndexOf(p\x2C '/'\x2C i);\x0d\n  };\x0d\n}\x0d\n\x0d\nconst emptyObj = ObjectCreate(null);\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string | null; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction realpathSync(p\x2C options) {\x0d\n  options = getOptions(options\x2C emptyObj);\x0d\n  p = toPathIfFileURL(p);\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const cache = options[realpathCacheKey];\x0d\n  const maybeCachedResult = cache?.get(p);\x0d\n  if (maybeCachedResult) {\x0d\n    return maybeCachedResult;\x0d\n  }\x0d\n\x0d\n  const seenLinks = ObjectCreate(null);\x0d\n  const knownHard = ObjectCreate(null);\x0d\n  const original = p;\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  // Skip over roots\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows) {\x0d\n    const ctx = { path: base };\x0d\n    binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n    handleErrorFromBinding(ctx);\x0d\n    knownHard[base] = true;\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  // NB: p.length changes.\x0d\n  while (pos < p.length) {\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard[base] || cache?.get(base) === base) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        break;\x0d\n      }\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    let resolvedLink;\x0d\n    const maybeCachedResolved = cache?.get(base);\x0d\n    if (maybeCachedResolved) {\x0d\n      resolvedLink = maybeCachedResolved;\x0d\n    } else {\x0d\n      // Use stats array directly to avoid creating an fs.Stats instance just\x0d\n      // for our internal use.\x0d\n\x0d\n      const baseLong = pathModule.toNamespacedPath(base);\x0d\n      const ctx = { path: base };\x0d\n      const stats = binding.lstat(baseLong\x2C true\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n\x0d\n      if (!isFileType(stats\x2C S_IFLNK)) {\x0d\n        knownHard[base] = true;\x0d\n        cache?.set(base\x2C base);\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      // Read the link if it wasn't read before\x0d\n      // dev/ino always return 0 on windows\x2C so skip the check.\x0d\n      let linkTarget = null;\x0d\n      let id;\x0d\n      if (!isWindows) {\x0d\n        const dev = BigIntPrototypeToString(stats[0]\x2C 32);\x0d\n        const ino = BigIntPrototypeToString(stats[7]\x2C 32);\x0d\n        id = `${dev}:${ino}`;\x0d\n        if (seenLinks[id]) {\x0d\n          linkTarget = seenLinks[id];\x0d\n        }\x0d\n      }\x0d\n      if (linkTarget === null) {\x0d\n        const ctx = { path: base };\x0d\n        binding.stat(baseLong\x2C false\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n        linkTarget = binding.readlink(baseLong\x2C undefined\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n      }\x0d\n      resolvedLink = pathModule.resolve(previous\x2C linkTarget);\x0d\n\x0d\n      cache?.set(base\x2C resolvedLink);\x0d\n      if (!isWindows) seenLinks[id] = linkTarget;\x0d\n    }\x0d\n\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n\x0d\n    // Skip over roots\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard[base]) {\x0d\n      const ctx = { path: base };\x0d\n      binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n      knownHard[base] = true;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  cache?.set(original\x2C p);\x0d\n  return encodeRealpathResult(p\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nrealpathSync.native = (path\x2C options) => {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.realpath(path\x2C options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction realpath(p\x2C options\x2C callback) {\x0d\n  callback = typeof options === 'function' ? options : maybeCallback(callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  p = toPathIfFileURL(p);\x0d\n\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const seenLinks = ObjectCreate(null);\x0d\n  const knownHard = ObjectCreate(null);\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows && !knownHard[base]) {\x0d\n    fs.lstat(base\x2C (err\x2C stats) => {\x0d\n      if (err) return callback(err);\x0d\n      knownHard[base] = true;\x0d\n      LOOP();\x0d\n    });\x0d\n  } else {\x0d\n    process.nextTick(LOOP);\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  function LOOP() {\x0d\n    // Stop if scanned past end of path\x0d\n    if (pos >= p.length) {\x0d\n      return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n    }\x0d\n\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard[base]) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n      }\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    return fs.lstat(base\x2C { bigint: true }\x2C gotStat);\x0d\n  }\x0d\n\x0d\n  function gotStat(err\x2C stats) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    // If not a symlink\x2C skip to the next path part\x0d\n    if (!stats.isSymbolicLink()) {\x0d\n      knownHard[base] = true;\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    // Stat & read the link if not read before.\x0d\n    // Call `gotTarget()` as soon as the link target is known.\x0d\n    // `dev`/`ino` always return 0 on windows\x2C so skip the check.\x0d\n    let id;\x0d\n    if (!isWindows) {\x0d\n      const dev = BigIntPrototypeToString(stats.dev\x2C 32);\x0d\n      const ino = BigIntPrototypeToString(stats.ino\x2C 32);\x0d\n      id = `${dev}:${ino}`;\x0d\n      if (seenLinks[id]) {\x0d\n        return gotTarget(null\x2C seenLinks[id]);\x0d\n      }\x0d\n    }\x0d\n    fs.stat(base\x2C (err) => {\x0d\n      if (err) return callback(err);\x0d\n\x0d\n      fs.readlink(base\x2C (err\x2C target) => {\x0d\n        if (!isWindows) seenLinks[id] = target;\x0d\n        gotTarget(err\x2C target);\x0d\n      });\x0d\n    });\x0d\n  }\x0d\n\x0d\n  function gotTarget(err\x2C target) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    gotResolvedLink(pathModule.resolve(previous\x2C target));\x0d\n  }\x0d\n\x0d\n  function gotResolvedLink(resolvedLink) {\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard[base]) {\x0d\n      fs.lstat(base\x2C (err) => {\x0d\n        if (err) return callback(err);\x0d\n        knownHard[base] = true;\x0d\n        LOOP();\x0d\n      });\x0d\n    } else {\x0d\n      process.nextTick(LOOP);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nrealpath.native = (path\x2C options\x2C callback) => {\x0d\n  callback = makeCallback(callback || options);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  return binding.realpath(path\x2C options.encoding\x2C req);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   directory?: string\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdtemp(prefix\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string}\x0d\n */\x0d\nfunction mkdtempSync(prefix\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const path = `${prefix}XXXXXX`;\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdtemp(path\x2C options.encoding\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFile(src\x2C dest\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0;\x0d\n  }\x0d\n\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFileSync(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  const ctx = { path: src\x2C dest };  // non-prefixed\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cp(src\x2C dest\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpFn(src\x2C dest\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cpSync(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpSyncFn(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nfunction lazyLoadStreams() {\x0d\n  if (!ReadStream) {\x0d\n    ({ ReadStream\x2C WriteStream } = require('internal/fs/streams'));\x0d\n    FileReadStream = ReadStream;\x0d\n    FileWriteStream = WriteStream;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a readable stream with a default `highWaterMark`\x0d\n * of 64 kb.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   end?: number;\x0d\n *   highWaterMark?: number;\x0d\n *   fs?: Object | null;\x0d\n *   }} [options]\x0d\n * @returns {ReadStream}\x0d\n */\x0d\nfunction createReadStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new ReadStream(path\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a write stream.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   fs?: Object | null;\x0d\n *   }} [options]\x0d\n * @returns {WriteStream}\x0d\n */\x0d\nfunction createWriteStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new WriteStream(path\x2C options);\x0d\n}\x0d\n\x0d\nmodule.exports = fs = {\x0d\n  appendFile\x2C\x0d\n  appendFileSync\x2C\x0d\n  access\x2C\x0d\n  accessSync\x2C\x0d\n  chown\x2C\x0d\n  chownSync\x2C\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  close\x2C\x0d\n  closeSync\x2C\x0d\n  copyFile\x2C\x0d\n  copyFileSync\x2C\x0d\n  cp\x2C\x0d\n  cpSync\x2C\x0d\n  createReadStream\x2C\x0d\n  createWriteStream\x2C\x0d\n  exists\x2C\x0d\n  existsSync\x2C\x0d\n  fchown\x2C\x0d\n  fchownSync\x2C\x0d\n  fchmod\x2C\x0d\n  fchmodSync\x2C\x0d\n  fdatasync\x2C\x0d\n  fdatasyncSync\x2C\x0d\n  fstat\x2C\x0d\n  fstatSync\x2C\x0d\n  fsync\x2C\x0d\n  fsyncSync\x2C\x0d\n  ftruncate\x2C\x0d\n  ftruncateSync\x2C\x0d\n  futimes\x2C\x0d\n  futimesSync\x2C\x0d\n  lchown\x2C\x0d\n  lchownSync\x2C\x0d\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined\x2C\x0d\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined\x2C\x0d\n  link\x2C\x0d\n  linkSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  lutimes\x2C\x0d\n  lutimesSync\x2C\x0d\n  mkdir\x2C\x0d\n  mkdirSync\x2C\x0d\n  mkdtemp\x2C\x0d\n  mkdtempSync\x2C\x0d\n  open\x2C\x0d\n  openSync\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  read\x2C\x0d\n  readSync\x2C\x0d\n  readv\x2C\x0d\n  readvSync\x2C\x0d\n  readFile\x2C\x0d\n  readFileSync\x2C\x0d\n  readlink\x2C\x0d\n  readlinkSync\x2C\x0d\n  realpath\x2C\x0d\n  realpathSync\x2C\x0d\n  rename\x2C\x0d\n  renameSync\x2C\x0d\n  rm\x2C\x0d\n  rmSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  symlink\x2C\x0d\n  symlinkSync\x2C\x0d\n  truncate\x2C\x0d\n  truncateSync\x2C\x0d\n  unwatchFile\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x2C\x0d\n  utimes\x2C\x0d\n  utimesSync\x2C\x0d\n  watch\x2C\x0d\n  watchFile\x2C\x0d\n  writeFile\x2C\x0d\n  writeFileSync\x2C\x0d\n  write\x2C\x0d\n  writeSync\x2C\x0d\n  writev\x2C\x0d\n  writevSync\x2C\x0d\n  Dir\x2C\x0d\n  Dirent\x2C\x0d\n  Stats\x2C\x0d\n\x0d\n  get ReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return ReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set ReadStream(val) {\x0d\n    ReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get WriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return WriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set WriteStream(val) {\x0d\n    WriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // Legacy names... these have to be separate because of how graceful-fs\x0d\n  // (and possibly other) modules monkey patch the values.\x0d\n  get FileReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileReadStream(val) {\x0d\n    FileReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get FileWriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileWriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileWriteStream(val) {\x0d\n    FileWriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // For tests\x0d\n  _toUnixTimestamp: toUnixTimestamp\x0d\n};\x0d\n\x0d\nObjectDefineProperties(fs\x2C {\x0d\n  F_OK: { enumerable: true\x2C value: F_OK || 0 }\x2C\x0d\n  R_OK: { enumerable: true\x2C value: R_OK || 0 }\x2C\x0d\n  W_OK: { enumerable: true\x2C value: W_OK || 0 }\x2C\x0d\n  X_OK: { enumerable: true\x2C value: X_OK || 0 }\x2C\x0d\n  constants: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  promises: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() {\x0d\n      promises ??= require('internal/fs/promises').exports;\x0d\n      return promises;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x3dde95d9fb
tick,0x7ff7c11dbdbf,192441,0,0x0,3,0x7ff7c08240c0,0x3dde95d9bc1,0x3dde95d9a83,0x3dde95d993d,0x3dde95d92e4,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
tick,0x7ffdf67ba8cf,192463,0,0x0,3,0x7ff7c08240c0,0x3dde95d9bc1,0x3dde95d9a83,0x3dde95d993d,0x3dde95d92e4,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,192496,0x3dde95e06de,123,getOptions node:internal/fs/utils:315:20,0x379432e1c98,~
script-source,81,node:internal/fs/utils,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  BigInt\x2C\x0d\n  Date\x2C\x0d\n  DateNow\x2C\x0d\n  DatePrototypeGetTime\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Number\x2C\x0d\n  NumberIsFinite\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  MathMin\x2C\x0d\n  ObjectIs\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  Symbol\x2C\x0d\n  TypedArrayPrototypeIncludes\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_EISDIR\x2C\x0d\n    ERR_FS_INVALID_SYMLINK_TYPE\x2C\x0d\n    ERR_INCOMPATIBLE_OPTION_PAIR\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x0d\n  }\x2C\x0d\n  hideStackFrames\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x2C\x0d\n  isDate\x2C\x0d\n  isBigUint64Array\x0d\n} = require('internal/util/types');\x0d\nconst { once } = require('internal/util');\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst kType = Symbol('type');\x0d\nconst kStats = Symbol('stats');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst {\x0d\n  fs: {\x0d\n    F_OK = 0\x2C\x0d\n    W_OK = 0\x2C\x0d\n    R_OK = 0\x2C\x0d\n    X_OK = 0\x2C\x0d\n    COPYFILE_EXCL\x2C\x0d\n    COPYFILE_FICLONE\x2C\x0d\n    COPYFILE_FICLONE_FORCE\x2C\x0d\n    O_APPEND\x2C\x0d\n    O_CREAT\x2C\x0d\n    O_EXCL\x2C\x0d\n    O_RDONLY\x2C\x0d\n    O_RDWR\x2C\x0d\n    O_SYNC\x2C\x0d\n    O_TRUNC\x2C\x0d\n    O_WRONLY\x2C\x0d\n    S_IFBLK\x2C\x0d\n    S_IFCHR\x2C\x0d\n    S_IFDIR\x2C\x0d\n    S_IFIFO\x2C\x0d\n    S_IFLNK\x2C\x0d\n    S_IFMT\x2C\x0d\n    S_IFREG\x2C\x0d\n    S_IFSOCK\x2C\x0d\n    UV_FS_SYMLINK_DIR\x2C\x0d\n    UV_FS_SYMLINK_JUNCTION\x2C\x0d\n    UV_DIRENT_UNKNOWN\x2C\x0d\n    UV_DIRENT_FILE\x2C\x0d\n    UV_DIRENT_DIR\x2C\x0d\n    UV_DIRENT_LINK\x2C\x0d\n    UV_DIRENT_FIFO\x2C\x0d\n    UV_DIRENT_SOCKET\x2C\x0d\n    UV_DIRENT_CHAR\x2C\x0d\n    UV_DIRENT_BLOCK\x0d\n  }\x2C\x0d\n  os: {\x0d\n    errno: {\x0d\n      EISDIR\x0d\n    }\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\n// The access modes can be any of F_OK\x2C R_OK\x2C W_OK or X_OK. Some might not be\x0d\n// available on specific systems. They can be used in combination as well\x0d\n// (F_OK | R_OK | W_OK | X_OK).\x0d\nconst kMinimumAccessMode = MathMin(F_OK\x2C W_OK\x2C R_OK\x2C X_OK);\x0d\nconst kMaximumAccessMode = F_OK | W_OK | R_OK | X_OK;\x0d\n\x0d\nconst kDefaultCopyMode = 0;\x0d\n// The copy modes can be any of COPYFILE_EXCL\x2C COPYFILE_FICLONE or\x0d\n// COPYFILE_FICLONE_FORCE. They can be used in combination as well\x0d\n// (COPYFILE_EXCL | COPYFILE_FICLONE | COPYFILE_FICLONE_FORCE).\x0d\nconst kMinimumCopyMode = MathMin(\x0d\n  kDefaultCopyMode\x2C\x0d\n  COPYFILE_EXCL\x2C\x0d\n  COPYFILE_FICLONE\x2C\x0d\n  COPYFILE_FICLONE_FORCE\x0d\n);\x0d\nconst kMaximumCopyMode = COPYFILE_EXCL |\x0d\n                         COPYFILE_FICLONE |\x0d\n                         COPYFILE_FICLONE_FORCE;\x0d\n\x0d\n// Most platforms don't allow reads or writes >= 2 GB.\x0d\n// See https://github.com/libuv/libuv/pull/1501.\x0d\nconst kIoMaxLength = 2 ** 31 - 1;\x0d\n\x0d\n// Use 64kb in case the file type is not a regular file and thus do not know the\x0d\n// actual file size. Increasing the value further results in more frequent over\x0d\n// allocation for small files and consumes CPU time and memory that should be\x0d\n// used else wise.\x0d\n// Use up to 512kb per read otherwise to partition reading big files to prevent\x0d\n// blocking other threads in case the available threads are all in use.\x0d\nconst kReadFileUnknownBufferLength = 64 * 1024;\x0d\nconst kReadFileBufferLength = 512 * 1024;\x0d\n\x0d\nconst kWriteFileMaxChunkSize = 512 * 1024;\x0d\n\x0d\nconst kMaxUserId = 2 ** 32 - 1;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nlet fs;\x0d\nfunction lazyLoadFs() {\x0d\n  if (!fs) {\x0d\n    fs = require('fs');\x0d\n  }\x0d\n  return fs;\x0d\n}\x0d\n\x0d\nfunction assertEncoding(encoding) {\x0d\n  if (encoding && !Buffer.isEncoding(encoding)) {\x0d\n    const reason = 'is invalid encoding';\x0d\n    throw new ERR_INVALID_ARG_VALUE(encoding\x2C 'encoding'\x2C reason);\x0d\n  }\x0d\n}\x0d\n\x0d\nclass Dirent {\x0d\n  constructor(name\x2C type) {\x0d\n    this.name = name;\x0d\n    this[kType] = type;\x0d\n  }\x0d\n\x0d\n  isDirectory() {\x0d\n    return this[kType] === UV_DIRENT_DIR;\x0d\n  }\x0d\n\x0d\n  isFile() {\x0d\n    return this[kType] === UV_DIRENT_FILE;\x0d\n  }\x0d\n\x0d\n  isBlockDevice() {\x0d\n    return this[kType] === UV_DIRENT_BLOCK;\x0d\n  }\x0d\n\x0d\n  isCharacterDevice() {\x0d\n    return this[kType] === UV_DIRENT_CHAR;\x0d\n  }\x0d\n\x0d\n  isSymbolicLink() {\x0d\n    return this[kType] === UV_DIRENT_LINK;\x0d\n  }\x0d\n\x0d\n  isFIFO() {\x0d\n    return this[kType] === UV_DIRENT_FIFO;\x0d\n  }\x0d\n\x0d\n  isSocket() {\x0d\n    return this[kType] === UV_DIRENT_SOCKET;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass DirentFromStats extends Dirent {\x0d\n  constructor(name\x2C stats) {\x0d\n    super(name\x2C null);\x0d\n    this[kStats] = stats;\x0d\n  }\x0d\n}\x0d\n\x0d\nfor (const name of ReflectOwnKeys(Dirent.prototype)) {\x0d\n  if (name === 'constructor') {\x0d\n    continue;\x0d\n  }\x0d\n  DirentFromStats.prototype[name] = function() {\x0d\n    return this[kStats][name]();\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction copyObject(source) {\x0d\n  const target = {};\x0d\n  for (const key in source)\x0d\n    target[key] = source[key];\x0d\n  return target;\x0d\n}\x0d\n\x0d\nconst bufferSep = Buffer.from(pathModule.sep);\x0d\n\x0d\nfunction join(path\x2C name) {\x0d\n  if ((typeof path === 'string' || isUint8Array(path)) &&\x0d\n      name === undefined) {\x0d\n    return path;\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && isUint8Array(name)) {\x0d\n    const pathBuffer = Buffer.from(pathModule.join(path\x2C pathModule.sep));\x0d\n    return Buffer.concat([pathBuffer\x2C name]);\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && typeof name === 'string') {\x0d\n    return pathModule.join(path\x2C name);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(path) && isUint8Array(name)) {\x0d\n    return Buffer.concat([path\x2C bufferSep\x2C name]);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'path'\x2C ['string'\x2C 'Buffer']\x2C path);\x0d\n}\x0d\n\x0d\nfunction getDirents(path\x2C { 0: names\x2C 1: types }\x2C callback) {\x0d\n  let i;\x0d\n  if (typeof callback === 'function') {\x0d\n    const len = names.length;\x0d\n    let toFinish = 0;\x0d\n    callback = once(callback);\x0d\n    for (i = 0; i < len; i++) {\x0d\n      const type = types[i];\x0d\n      if (type === UV_DIRENT_UNKNOWN) {\x0d\n        const name = names[i];\x0d\n        const idx = i;\x0d\n        toFinish++;\x0d\n        let filepath;\x0d\n        try {\x0d\n          filepath = join(path\x2C name);\x0d\n        } catch (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n          if (err) {\x0d\n            callback(err);\x0d\n            return;\x0d\n          }\x0d\n          names[idx] = new DirentFromStats(name\x2C stats);\x0d\n          if (--toFinish === 0) {\x0d\n            callback(null\x2C names);\x0d\n          }\x0d\n        });\x0d\n      } else {\x0d\n        names[i] = new Dirent(names[i]\x2C types[i]);\x0d\n      }\x0d\n    }\x0d\n    if (toFinish === 0) {\x0d\n      callback(null\x2C names);\x0d\n    }\x0d\n  } else {\x0d\n    const len = names.length;\x0d\n    for (i = 0; i < len; i++) {\x0d\n      names[i] = getDirent(path\x2C names[i]\x2C types[i]);\x0d\n    }\x0d\n    return names;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getDirent(path\x2C name\x2C type\x2C callback) {\x0d\n  if (typeof callback === 'function') {\x0d\n    if (type === UV_DIRENT_UNKNOWN) {\x0d\n      let filepath;\x0d\n      try {\x0d\n        filepath = join(path\x2C name);\x0d\n      } catch (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n        if (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        callback(null\x2C new DirentFromStats(name\x2C stats));\x0d\n      });\x0d\n    } else {\x0d\n      callback(null\x2C new Dirent(name\x2C type));\x0d\n    }\x0d\n  } else if (type === UV_DIRENT_UNKNOWN) {\x0d\n    const stats = lazyLoadFs().lstatSync(join(path\x2C name));\x0d\n    return new DirentFromStats(name\x2C stats);\x0d\n  } else {\x0d\n    return new Dirent(name\x2C type);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getOptions(options\x2C defaultOptions) {\x0d\n  if (options === null || options === undefined ||\x0d\n      typeof options === 'function') {\x0d\n    return defaultOptions;\x0d\n  }\x0d\n\x0d\n  if (typeof options === 'string') {\x0d\n    defaultOptions = { ...defaultOptions };\x0d\n    defaultOptions.encoding = options;\x0d\n    options = defaultOptions;\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C ['string'\x2C 'Object']\x2C options);\x0d\n  }\x0d\n\x0d\n  if (options.encoding !== 'buffer')\x0d\n    assertEncoding(options.encoding);\x0d\n\x0d\n  if (options.signal !== undefined) {\x0d\n    validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {InternalFSBinding.FSSyncContext} ctx\x0d\n */\x0d\nfunction handleErrorFromBinding(ctx) {\x0d\n  if (ctx.errno !== undefined) {  // libuv error numbers\x0d\n    const err = uvException(ctx);\x0d\n    ErrorCaptureStackTrace(err\x2C handleErrorFromBinding);\x0d\n    throw err;\x0d\n  }\x0d\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\x0d\n    // TODO(joyeecheung): currently\x2C ctx.error are encoding errors\x0d\n    // usually caused by memory problems. We need to figure out proper error\x0d\n    // code(s) for this.\x0d\n    ErrorCaptureStackTrace(ctx.error\x2C handleErrorFromBinding);\x0d\n    throw ctx.error;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Check if the path contains null types if it is a string nor Uint8Array\x2C\x0d\n// otherwise return silently.\x0d\nconst nullCheck = hideStackFrames((path\x2C propName\x2C throwError = true) => {\x0d\n  const pathIsString = typeof path === 'string';\x0d\n  const pathIsUint8Array = isUint8Array(path);\x0d\n\x0d\n  // We can only perform meaningful checks on strings and Uint8Arrays.\x0d\n  if ((!pathIsString && !pathIsUint8Array) ||\x0d\n      (pathIsString && !StringPrototypeIncludes(path\x2C '\\u0000')) ||\x0d\n      (pathIsUint8Array && !TypedArrayPrototypeIncludes(path\x2C 0))) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const err = new ERR_INVALID_ARG_VALUE(\x0d\n    propName\x2C\x0d\n    path\x2C\x0d\n    'must be a string or Uint8Array without null bytes'\x0d\n  );\x0d\n  if (throwError) {\x0d\n    throw err;\x0d\n  }\x0d\n  return err;\x0d\n});\x0d\n\x0d\nfunction preprocessSymlinkDestination(path\x2C type\x2C linkPath) {\x0d\n  if (!isWindows) {\x0d\n    // No preprocessing is needed on Unix.\x0d\n    return path;\x0d\n  }\x0d\n  path = '' + path;\x0d\n  if (type === 'junction') {\x0d\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\x0d\n    // A relative target is relative to the link's parent directory.\x0d\n    path = pathModule.resolve(linkPath\x2C '..'\x2C path);\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  if (pathModule.isAbsolute(path)) {\x0d\n    // If the path is absolute\x2C use the \\\\?\\-prefix to enable long filenames\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  // Windows symlinks don't tolerate forward slashes.\x0d\n  return StringPrototypeReplace(path\x2C /\\//g\x2C '\\\\');\x0d\n}\x0d\n\x0d\n// Constructor for file stats.\x0d\nfunction StatsBase(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                   ino\x2C size\x2C blocks) {\x0d\n  this.dev = dev;\x0d\n  this.mode = mode;\x0d\n  this.nlink = nlink;\x0d\n  this.uid = uid;\x0d\n  this.gid = gid;\x0d\n  this.rdev = rdev;\x0d\n  this.blksize = blksize;\x0d\n  this.ino = ino;\x0d\n  this.size = size;\x0d\n  this.blocks = blocks;\x0d\n}\x0d\n\x0d\nStatsBase.prototype.isDirectory = function() {\x0d\n  return this._checkModeProperty(S_IFDIR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFile = function() {\x0d\n  return this._checkModeProperty(S_IFREG);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isBlockDevice = function() {\x0d\n  return this._checkModeProperty(S_IFBLK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isCharacterDevice = function() {\x0d\n  return this._checkModeProperty(S_IFCHR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSymbolicLink = function() {\x0d\n  return this._checkModeProperty(S_IFLNK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFIFO = function() {\x0d\n  return this._checkModeProperty(S_IFIFO);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSocket = function() {\x0d\n  return this._checkModeProperty(S_IFSOCK);\x0d\n};\x0d\n\x0d\nconst kNsPerMsBigInt = 10n ** 6n;\x0d\nconst kNsPerSecBigInt = 10n ** 9n;\x0d\nconst kMsPerSec = 10 ** 3;\x0d\nconst kNsPerMs = 10 ** 6;\x0d\nfunction msFromTimeSpec(sec\x2C nsec) {\x0d\n  return sec * kMsPerSec + nsec / kNsPerMs;\x0d\n}\x0d\n\x0d\nfunction nsFromTimeSpecBigInt(sec\x2C nsec) {\x0d\n  return sec * kNsPerSecBigInt + nsec;\x0d\n}\x0d\n\x0d\n// The Date constructor performs Math.floor() to the timestamp.\x0d\n// https://www.ecma-international.org/ecma-262/#sec-timeclip\x0d\n// Since there may be a precision loss when the timestamp is\x0d\n// converted to a floating point number\x2C we manually round\x0d\n// the timestamp here before passing it to Date().\x0d\n// Refs: https://github.com/nodejs/node/pull/12607\x0d\nfunction dateFromMs(ms) {\x0d\n  return new Date(Number(ms) + 0.5);\x0d\n}\x0d\n\x0d\nfunction BigIntStats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                     ino\x2C size\x2C blocks\x2C\x0d\n                     atimeNs\x2C mtimeNs\x2C ctimeNs\x2C birthtimeNs) {\x0d\n  ReflectApply(StatsBase\x2C this\x2C [dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                                 ino\x2C size\x2C blocks]);\x0d\n\x0d\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\x0d\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\x0d\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\x0d\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\x0d\n  this.atimeNs = atimeNs;\x0d\n  this.mtimeNs = mtimeNs;\x0d\n  this.ctimeNs = ctimeNs;\x0d\n  this.birthtimeNs = birthtimeNs;\x0d\n  this.atime = dateFromMs(this.atimeMs);\x0d\n  this.mtime = dateFromMs(this.mtimeMs);\x0d\n  this.ctime = dateFromMs(this.ctimeMs);\x0d\n  this.birthtime = dateFromMs(this.birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(BigIntStats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(BigIntStats\x2C StatsBase);\x0d\n\x0d\nBigIntStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\x0d\n};\x0d\n\x0d\nfunction Stats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n               ino\x2C size\x2C blocks\x2C\x0d\n               atimeMs\x2C mtimeMs\x2C ctimeMs\x2C birthtimeMs) {\x0d\n  FunctionPrototypeCall(StatsBase\x2C this\x2C dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C\x0d\n                        blksize\x2C ino\x2C size\x2C blocks);\x0d\n  this.atimeMs = atimeMs;\x0d\n  this.mtimeMs = mtimeMs;\x0d\n  this.ctimeMs = ctimeMs;\x0d\n  this.birthtimeMs = birthtimeMs;\x0d\n  this.atime = dateFromMs(atimeMs);\x0d\n  this.mtime = dateFromMs(mtimeMs);\x0d\n  this.ctime = dateFromMs(ctimeMs);\x0d\n  this.birthtime = dateFromMs(birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Stats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(Stats\x2C StatsBase);\x0d\n\x0d\n// HACK: Workaround for https://github.com/standard-things/esm/issues/821.\x0d\n// TODO(ronag): Remove this as soon as `esm` publishes a fixed version.\x0d\nStats.prototype.isFile = StatsBase.prototype.isFile;\x0d\n\x0d\nStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & S_IFMT) === property;\x0d\n};\x0d\n\x0d\n/**\x0d\n * @param {Float64Array | BigUint64Array} stats\x0d\n * @param {number} offset\x0d\n * @returns {BigIntStats | Stats}\x0d\n */\x0d\nfunction getStatsFromBinding(stats\x2C offset = 0) {\x0d\n  if (isBigUint64Array(stats)) {\x0d\n    return new BigIntStats(\x0d\n      stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n      stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n      stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n      stats[9 + offset]\x2C\x0d\n      nsFromTimeSpecBigInt(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[16 + offset]\x2C stats[17 + offset])\x0d\n    );\x0d\n  }\x0d\n  return new Stats(\x0d\n    stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n    stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n    stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n    stats[9 + offset]\x2C\x0d\n    msFromTimeSpec(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n    msFromTimeSpec(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n    msFromTimeSpec(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n    msFromTimeSpec(stats[16 + offset]\x2C stats[17 + offset])\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringToFlags(flags\x2C name = 'flags') {\x0d\n  if (typeof flags === 'number') {\x0d\n    validateInt32(flags\x2C name);\x0d\n    return flags;\x0d\n  }\x0d\n\x0d\n  if (flags == null) {\x0d\n    return O_RDONLY;\x0d\n  }\x0d\n\x0d\n  switch (flags) {\x0d\n    case 'r' : return O_RDONLY;\x0d\n    case 'rs' : // Fall through.\x0d\n    case 'sr' : return O_RDONLY | O_SYNC;\x0d\n    case 'r+' : return O_RDWR;\x0d\n    case 'rs+' : // Fall through.\x0d\n    case 'sr+' : return O_RDWR | O_SYNC;\x0d\n\x0d\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\x0d\n    case 'wx' : // Fall through.\x0d\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\x0d\n\x0d\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\x0d\n    case 'wx+': // Fall through.\x0d\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\x0d\n\x0d\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\x0d\n    case 'ax' : // Fall through.\x0d\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\x0d\n    case 'as' : // Fall through.\x0d\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\x0d\n\x0d\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\x0d\n    case 'ax+': // Fall through.\x0d\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\x0d\n    case 'as+': // Fall through.\x0d\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('flags'\x2C flags);\x0d\n}\x0d\n\x0d\nconst stringToSymlinkType = hideStackFrames((type) => {\x0d\n  let flags = 0;\x0d\n  if (typeof type === 'string') {\x0d\n    switch (type) {\x0d\n      case 'dir':\x0d\n        flags |= UV_FS_SYMLINK_DIR;\x0d\n        break;\x0d\n      case 'junction':\x0d\n        flags |= UV_FS_SYMLINK_JUNCTION;\x0d\n        break;\x0d\n      case 'file':\x0d\n        break;\x0d\n      default:\x0d\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\x0d\n    }\x0d\n  }\x0d\n  return flags;\x0d\n});\x0d\n\x0d\n// converts Date or number to a fractional UNIX timestamp\x0d\nfunction toUnixTimestamp(time\x2C name = 'time') {\x0d\n  // eslint-disable-next-line eqeqeq\x0d\n  if (typeof time === 'string' && +time == time) {\x0d\n    return +time;\x0d\n  }\x0d\n  if (NumberIsFinite(time)) {\x0d\n    if (time < 0) {\x0d\n      return DateNow() / 1000;\x0d\n    }\x0d\n    return time;\x0d\n  }\x0d\n  if (isDate(time)) {\x0d\n    // Convert to 123.456 UNIX timestamp\x0d\n    return DatePrototypeGetTime(time) / 1000;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE(name\x2C ['Date'\x2C 'Time in seconds']\x2C time);\x0d\n}\x0d\n\x0d\nconst validateOffsetLengthRead = hideStackFrames(\x0d\n  (offset\x2C length\x2C bufferLength) => {\x0d\n    if (offset < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C '>= 0'\x2C offset);\x0d\n    }\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n    if (offset + length > bufferLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C\x0d\n                                 `<= ${bufferLength - offset}`\x2C length);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateOffsetLengthWrite = hideStackFrames(\x0d\n  (offset\x2C length\x2C byteLength) => {\x0d\n    if (offset > byteLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C `<= ${byteLength}`\x2C offset);\x0d\n    }\x0d\n\x0d\n    if (length > byteLength - offset) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C `<= ${byteLength - offset}`\x2C length);\x0d\n    }\x0d\n\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n\x0d\n    validateInt32(length\x2C 'length'\x2C 0);\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validatePath = hideStackFrames((path\x2C propName = 'path') => {\x0d\n  if (typeof path !== 'string' && !isUint8Array(path)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C ['string'\x2C 'Buffer'\x2C 'URL']\x2C path);\x0d\n  }\x0d\n\x0d\n  const err = nullCheck(path\x2C propName\x2C false);\x0d\n\x0d\n  if (err !== undefined) {\x0d\n    throw err;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst getValidatedPath = hideStackFrames((fileURLOrPath\x2C propName = 'path') => {\x0d\n  const path = toPathIfFileURL(fileURLOrPath);\x0d\n  validatePath(path\x2C propName);\x0d\n  return path;\x0d\n});\x0d\n\x0d\nconst getValidatedFd = hideStackFrames((fd\x2C propName = 'fd') => {\x0d\n  if (ObjectIs(fd\x2C -0)) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  validateInt32(fd\x2C propName\x2C 0);\x0d\n\x0d\n  return fd;\x0d\n});\x0d\n\x0d\nconst validateBufferArray = hideStackFrames((buffers\x2C propName = 'buffers') => {\x0d\n  if (!ArrayIsArray(buffers))\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n\x0d\n  for (let i = 0; i < buffers.length; i++) {\x0d\n    if (!isArrayBufferView(buffers[i]))\x0d\n      throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n  }\x0d\n\x0d\n  return buffers;\x0d\n});\x0d\n\x0d\nlet nonPortableTemplateWarn = true;\x0d\n\x0d\nfunction warnOnNonPortableTemplate(template) {\x0d\n  // Template strings passed to the mkdtemp() family of functions should not\x0d\n  // end with 'X' because they are handled inconsistently across platforms.\x0d\n  if (nonPortableTemplateWarn && StringPrototypeEndsWith(template\x2C 'X')) {\x0d\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\x0d\n                        'For details see: https://nodejs.org/api/fs.html');\x0d\n    nonPortableTemplateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst defaultCpOptions = {\x0d\n  dereference: false\x2C\x0d\n  errorOnExist: false\x2C\x0d\n  filter: undefined\x2C\x0d\n  force: true\x2C\x0d\n  preserveTimestamps: false\x2C\x0d\n  recursive: false\x2C\x0d\n  verbatimSymlinks: false\x2C\x0d\n};\x0d\n\x0d\nconst defaultRmOptions = {\x0d\n  recursive: false\x2C\x0d\n  force: false\x2C\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x0d\n};\x0d\n\x0d\nconst defaultRmdirOptions = {\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x2C\x0d\n  recursive: false\x2C\x0d\n};\x0d\n\x0d\nconst validateCpOptions = hideStackFrames((options) => {\x0d\n  if (options === undefined)\x0d\n    return { ...defaultCpOptions };\x0d\n  validateObject(options\x2C 'options');\x0d\n  options = { ...defaultCpOptions\x2C ...options };\x0d\n  validateBoolean(options.dereference\x2C 'options.dereference');\x0d\n  validateBoolean(options.errorOnExist\x2C 'options.errorOnExist');\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n  validateBoolean(options.preserveTimestamps\x2C 'options.preserveTimestamps');\x0d\n  validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n  validateBoolean(options.verbatimSymlinks\x2C 'options.verbatimSymlinks');\x0d\n  if (options.dereference === true && options.verbatimSymlinks === true) {\x0d\n    throw new ERR_INCOMPATIBLE_OPTION_PAIR('dereference'\x2C 'verbatimSymlinks');\x0d\n  }\x0d\n  if (options.filter !== undefined) {\x0d\n    validateFunction(options.filter\x2C 'options.filter');\x0d\n  }\x0d\n  return options;\x0d\n});\x0d\n\x0d\nconst validateRmOptions = hideStackFrames((path\x2C options\x2C expectDir\x2C cb) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  lazyLoadFs().stat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (options.force && err.code === 'ENOENT') {\x0d\n        return cb(null\x2C options);\x0d\n      }\x0d\n      return cb(err\x2C options);\x0d\n    }\x0d\n\x0d\n    if (expectDir && !stats.isDirectory()) {\x0d\n      return cb(false);\x0d\n    }\x0d\n\x0d\n    if (stats.isDirectory() && !options.recursive) {\x0d\n      return cb(new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      }));\x0d\n    }\x0d\n    return cb(null\x2C options);\x0d\n  });\x0d\n});\x0d\n\x0d\nconst validateRmOptionsSync = hideStackFrames((path\x2C options\x2C expectDir) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  if (!options.force || expectDir || !options.recursive) {\x0d\n    const isDirectory = lazyLoadFs()\x0d\n      .statSync(path\x2C { throwIfNoEntry: !options.force })?.isDirectory();\x0d\n\x0d\n    if (expectDir && !isDirectory) {\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    if (isDirectory && !options.recursive) {\x0d\n      throw new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return options;\x0d\n});\x0d\n\x0d\nlet recursiveRmdirWarned = process.noDeprecation;\x0d\nfunction emitRecursiveRmdirWarning() {\x0d\n  if (!recursiveRmdirWarned) {\x0d\n    process.emitWarning(\x0d\n      'In future versions of Node.js\x2C fs.rmdir(path\x2C { recursive: true }) ' +\x0d\n      'will be removed. Use fs.rm(path\x2C { recursive: true }) instead'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0147'\x0d\n    );\x0d\n    recursiveRmdirWarned = true;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateRmdirOptions = hideStackFrames(\x0d\n  (options\x2C defaults = defaultRmdirOptions) => {\x0d\n    if (options === undefined)\x0d\n      return defaults;\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    options = { ...defaults\x2C ...options };\x0d\n\x0d\n    validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n    validateInt32(options.retryDelay\x2C 'options.retryDelay'\x2C 0);\x0d\n    validateUint32(options.maxRetries\x2C 'options.maxRetries');\x0d\n\x0d\n    return options;\x0d\n  });\x0d\n\x0d\nconst getValidMode = hideStackFrames((mode\x2C type) => {\x0d\n  let min = kMinimumAccessMode;\x0d\n  let max = kMaximumAccessMode;\x0d\n  let def = F_OK;\x0d\n  if (type === 'copyFile') {\x0d\n    min = kMinimumCopyMode;\x0d\n    max = kMaximumCopyMode;\x0d\n    def = mode || kDefaultCopyMode;\x0d\n  } else {\x0d\n    assert(type === 'access');\x0d\n  }\x0d\n  if (mode == null) {\x0d\n    return def;\x0d\n  }\x0d\n  if (NumberIsInteger(mode) && mode >= min && mode <= max) {\x0d\n    return mode;\x0d\n  }\x0d\n  if (typeof mode !== 'number') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('mode'\x2C 'integer'\x2C mode);\x0d\n  }\x0d\n  throw new ERR_OUT_OF_RANGE(\x0d\n    'mode'\x2C `an integer >= ${min} && <= ${max}`\x2C mode);\x0d\n});\x0d\n\x0d\nconst validateStringAfterArrayBufferView = hideStackFrames((buffer\x2C name) => {\x0d\n  if (typeof buffer === 'string') {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    typeof buffer === 'object' &&\x0d\n    buffer !== null &&\x0d\n    typeof buffer.toString === 'function' &&\x0d\n    ObjectPrototypeHasOwnProperty(buffer\x2C 'toString')\x0d\n  ) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    name\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n    buffer\x0d\n  );\x0d\n});\x0d\n\x0d\nconst validatePosition = hideStackFrames((position\x2C name) => {\x0d\n  if (typeof position === 'number') {\x0d\n    validateInteger(position\x2C 'position');\x0d\n  } else if (typeof position === 'bigint') {\x0d\n    if (!(position >= -(2n ** 63n) && position <= 2n ** 63n - 1n)) {\x0d\n      throw new ERR_OUT_OF_RANGE('position'\x2C\x0d\n                                 `>= ${-(2n ** 63n)} && <= ${2n ** 63n - 1n}`\x2C\x0d\n                                 position);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('position'\x2C\x0d\n                                   ['integer'\x2C 'bigint']\x2C\x0d\n                                   position);\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  assertEncoding\x2C\x0d\n  BigIntStats\x2C  // for testing\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirent\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  realpathCacheKey: Symbol('realpathCacheKey')\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  Stats\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n};\x0d\n
code-source-info,0x3dde95e06de,81,7566,8210,C0O7597C14O7691C16O7713C17O7724C23O7764C29O7809C31O7833C35O7849C42O7885C48O7925C66O7931C71O7925C72O8021C79O8030C84O8049C87O8072C92O8049C96O8100C102O8129C107O8157C115O8129C120O8192C122O8207,,
code-creation,LazyCompile,10,193696,0x3dde95e2666,48,assertEncoding node:internal/fs/utils:152:24,0x379432e16a0,~
code-source-info,0x3dde95e2666,81,3712,3894,C0O3728C6O3745C9O3752C14O3752C21O3796C24O3824C40O3830C45O3824C47O3893,,
code-creation,LazyCompile,10,193792,0x3dde95e277e,20,toPathIfFileURL node:internal/url:1499:25,0x273fd339258,~
script-source,39,node:internal/url,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeReduce\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Int8Array\x2C\x0d\n  Number\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertySymbols\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\nconst {\x0d\n  encodeStr\x2C\x0d\n  hexTable\x2C\x0d\n  isHexTable\x0d\n} = require('internal/querystring');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  removeColors\x2C\x0d\n  toUSVString\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ARG_NOT_ITERABLE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FILE_URL_HOST\x2C\x0d\n    ERR_INVALID_FILE_URL_PATH\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_INVALID_TUPLE\x2C\x0d\n    ERR_INVALID_URL\x2C\x0d\n    ERR_INVALID_URL_SCHEME\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  CHAR_AMPERSAND\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_EQUAL\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_PERCENT\x2C\x0d\n  CHAR_PLUS\x0d\n} = require('internal/constants');\x0d\nconst path = require('path');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst querystring = require('querystring');\x0d\n\x0d\nconst { platform } = process;\x0d\nconst isWindows = platform === 'win32';\x0d\n\x0d\nconst {\x0d\n  domainToASCII: _domainToASCII\x2C\x0d\n  domainToUnicode: _domainToUnicode\x2C\x0d\n  encodeAuth\x2C\x0d\n  parse\x2C\x0d\n  setURLConstructor\x2C\x0d\n  URL_FLAGS_CANNOT_BE_BASE\x2C\x0d\n  URL_FLAGS_HAS_FRAGMENT\x2C\x0d\n  URL_FLAGS_HAS_HOST\x2C\x0d\n  URL_FLAGS_HAS_PASSWORD\x2C\x0d\n  URL_FLAGS_HAS_PATH\x2C\x0d\n  URL_FLAGS_HAS_QUERY\x2C\x0d\n  URL_FLAGS_HAS_USERNAME\x2C\x0d\n  URL_FLAGS_IS_DEFAULT_SCHEME_PORT\x2C\x0d\n  URL_FLAGS_SPECIAL\x2C\x0d\n  kFragment\x2C\x0d\n  kHost\x2C\x0d\n  kHostname\x2C\x0d\n  kPathStart\x2C\x0d\n  kPort\x2C\x0d\n  kQuery\x2C\x0d\n  kSchemeStart\x0d\n} = internalBinding('url');\x0d\n\x0d\nconst {\x0d\n  storeDataObject\x2C\x0d\n  revokeDataObject\x2C\x0d\n} = internalBinding('blob');\x0d\n\x0d\nconst context = Symbol('context');\x0d\nconst cannotBeBase = Symbol('cannot-be-base');\x0d\nconst cannotHaveUsernamePasswordPort =\x0d\n    Symbol('cannot-have-username-password-port');\x0d\nconst special = Symbol('special');\x0d\nconst searchParams = Symbol('query');\x0d\nconst kFormat = Symbol('format');\x0d\n\x0d\nlet blob;\x0d\nlet cryptoRandom;\x0d\n\x0d\nfunction lazyBlob() {\x0d\n  blob ??= require('internal/blob');\x0d\n  return blob;\x0d\n}\x0d\n\x0d\nfunction lazyCryptoRandom() {\x0d\n  try {\x0d\n    cryptoRandom ??= require('internal/crypto/random');\x0d\n  } catch {\x0d\n    // If Node.js built without crypto support\x2C we'll fall\x0d\n    // through here and handle it later.\x0d\n  }\x0d\n  return cryptoRandom;\x0d\n}\x0d\n\x0d\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\x0d\nconst IteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf([][SymbolIterator]())\x0d\n);\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin-opaque\x0d\nconst kOpaqueOrigin = 'null';\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#ascii-serialisation-of-an-origin\x0d\nfunction serializeTupleOrigin(scheme\x2C host\x2C port) {\x0d\n  return `${scheme}//${host}${port === null ? '' : `:${port}`}`;\x0d\n}\x0d\n\x0d\n// This class provides the internal state of a URL object. An instance of this\x0d\n// class is stored in every URL object and is accessed internally by setters\x0d\n// and getters. It roughly corresponds to the concept of a URL record in the\x0d\n// URL Standard\x2C with a few differences. It is also the object transported to\x0d\n// the C++ binding.\x0d\n// Refs: https://url.spec.whatwg.org/#concept-url\x0d\nclass URLContext {\x0d\n  constructor() {\x0d\n    this.flags = 0;\x0d\n    this.scheme = ':';\x0d\n    this.username = '';\x0d\n    this.password = '';\x0d\n    this.host = null;\x0d\n    this.port = null;\x0d\n    this.path = [];\x0d\n    this.query = null;\x0d\n    this.fragment = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction isURLSearchParams(self) {\x0d\n  return self && self[searchParams] && !self[searchParams][searchParams];\x0d\n}\x0d\n\x0d\nclass URLSearchParams {\x0d\n  // URL Standard says the default value is ''\x2C but as undefined and '' have\x0d\n  // the same result\x2C undefined is used to prevent unnecessary parsing.\x0d\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\x0d\n  // accordance with Web IDL spec.\x0d\n  constructor(init = undefined) {\x0d\n    if (init === null || init === undefined) {\x0d\n      this[searchParams] = [];\x0d\n    } else if (typeof init === 'object' || typeof init === 'function') {\x0d\n      const method = init[SymbolIterator];\x0d\n      if (method === this[SymbolIterator]) {\x0d\n        // While the spec does not have this branch\x2C we can use it as a\x0d\n        // shortcut to avoid having to go through the costly generic iterator.\x0d\n        const childParams = init[searchParams];\x0d\n        this[searchParams] = childParams.slice();\x0d\n      } else if (method !== null && method !== undefined) {\x0d\n        if (typeof method !== 'function') {\x0d\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\x0d\n        }\x0d\n\x0d\n        // Sequence<sequence<USVString>>\x0d\n        // Note: per spec we have to first exhaust the lists then process them\x0d\n        const pairs = [];\x0d\n        for (const pair of init) {\x0d\n          if ((typeof pair !== 'object' && typeof pair !== 'function') ||\x0d\n              pair === null ||\x0d\n              typeof pair[SymbolIterator] !== 'function') {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          const convertedPair = [];\x0d\n          for (const element of pair)\x0d\n            ArrayPrototypePush(convertedPair\x2C toUSVString(element));\x0d\n          ArrayPrototypePush(pairs\x2C convertedPair);\x0d\n        }\x0d\n\x0d\n        this[searchParams] = [];\x0d\n        for (const pair of pairs) {\x0d\n          if (pair.length !== 2) {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          ArrayPrototypePush(this[searchParams]\x2C pair[0]\x2C pair[1]);\x0d\n        }\x0d\n      } else {\x0d\n        // Record<USVString\x2C USVString>\x0d\n        // Need to use reflection APIs for full spec compliance.\x0d\n        this[searchParams] = [];\x0d\n        const keys = ReflectOwnKeys(init);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const desc = ReflectGetOwnPropertyDescriptor(init\x2C key);\x0d\n          if (desc !== undefined && desc.enumerable) {\x0d\n            const typedKey = toUSVString(key);\x0d\n            const typedValue = toUSVString(init[key]);\x0d\n            this[searchParams].push(typedKey\x2C typedValue);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      // USVString\x0d\n      init = toUSVString(init);\x0d\n      if (init[0] === '?') init = init.slice(1);\x0d\n      initSearchParams(this\x2C init);\x0d\n    }\x0d\n\x0d\n    // "associated url object"\x0d\n    this[context] = null;\x0d\n  }\x0d\n\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const separator = '\x2C ';\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const innerInspect = (v) => inspect(v\x2C innerOpts);\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const output = [];\x0d\n    for (let i = 0; i < list.length; i += 2)\x0d\n      ArrayPrototypePush(\x0d\n        output\x2C\x0d\n        `${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\x0d\n\x0d\n    const length = ArrayPrototypeReduce(\x0d\n      output\x2C\x0d\n      (prev\x2C cur) => prev + removeColors(cur).length + separator.length\x2C\x0d\n      -separator.length\x0d\n    );\x0d\n    if (length > ctx.breakLength) {\x0d\n      return `${this.constructor.name} {\\n` +\x0d\n      `  ${ArrayPrototypeJoin(output\x2C '\x2C\\n  ')} }`;\x0d\n    } else if (output.length) {\x0d\n      return `${this.constructor.name} { ` +\x0d\n      `${ArrayPrototypeJoin(output\x2C separator)} }`;\x0d\n    }\x0d\n    return `${this.constructor.name} {}`;\x0d\n  }\x0d\n\x0d\n  append(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n    ArrayPrototypePush(this[searchParams]\x2C name\x2C value);\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  delete(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        list.splice(i\x2C 2);\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  get(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return list[i + 1];\x0d\n      }\x0d\n    }\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  getAll(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const values = [];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        values.push(list[i + 1]);\x0d\n      }\x0d\n    }\x0d\n    return values;\x0d\n  }\x0d\n\x0d\n  has(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return true;\x0d\n      }\x0d\n    }\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  set(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n\x0d\n    // If there are any name-value pairs whose name is `name`\x2C in `list`\x2C set\x0d\n    // the value of the first such name-value pair to `value` and remove the\x0d\n    // others.\x0d\n    let found = false;\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        if (!found) {\x0d\n          list[i + 1] = value;\x0d\n          found = true;\x0d\n          i += 2;\x0d\n        } else {\x0d\n          list.splice(i\x2C 2);\x0d\n        }\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Otherwise\x2C append a new name-value pair whose name is `name` and value\x0d\n    // is `value`\x2C to `list`.\x0d\n    if (!found) {\x0d\n      ArrayPrototypePush(list\x2C name\x2C value);\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  sort() {\x0d\n    const a = this[searchParams];\x0d\n    const len = a.length;\x0d\n\x0d\n    if (len <= 2) {\x0d\n      // Nothing needs to be done.\x0d\n    } else if (len < 100) {\x0d\n      // 100 is found through testing.\x0d\n      // Simple stable in-place insertion sort\x0d\n      // Derived from v8/src/js/array.js\x0d\n      for (let i = 2; i < len; i += 2) {\x0d\n        const curKey = a[i];\x0d\n        const curVal = a[i + 1];\x0d\n        let j;\x0d\n        for (j = i - 2; j >= 0; j -= 2) {\x0d\n          if (a[j] > curKey) {\x0d\n            a[j + 2] = a[j];\x0d\n            a[j + 3] = a[j + 1];\x0d\n          } else {\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n        a[j + 2] = curKey;\x0d\n        a[j + 3] = curVal;\x0d\n      }\x0d\n    } else {\x0d\n      // Bottom-up iterative stable merge sort\x0d\n      const lBuffer = new Array(len);\x0d\n      const rBuffer = new Array(len);\x0d\n      for (let step = 2; step < len; step *= 2) {\x0d\n        for (let start = 0; start < len - 2; start += 2 * step) {\x0d\n          const mid = start + step;\x0d\n          let end = mid + step;\x0d\n          end = end < len ? end : len;\x0d\n          if (mid > end)\x0d\n            continue;\x0d\n          merge(a\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterators\x0d\n  // Define entries here rather than [Symbol.iterator] as the function name\x0d\n  // must be set to `entries`.\x0d\n  entries() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key+value');\x0d\n  }\x0d\n\x0d\n  forEach(callback\x2C thisArg = undefined) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    validateCallback(callback);\x0d\n\x0d\n    let list = this[searchParams];\x0d\n\x0d\n    let i = 0;\x0d\n    while (i < list.length) {\x0d\n      const key = list[i];\x0d\n      const value = list[i + 1];\x0d\n      callback.call(thisArg\x2C value\x2C key\x2C this);\x0d\n      // In case the URL object's `search` is updated\x0d\n      list = this[searchParams];\x0d\n      i += 2;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable\x0d\n  keys() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key');\x0d\n  }\x0d\n\x0d\n  values() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'value');\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\x0d\n  toString() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return serializeParams(this[searchParams]);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URLSearchParams.prototype\x2C {\x0d\n  append: kEnumerableProperty\x2C\x0d\n  delete: kEnumerableProperty\x2C\x0d\n  get: kEnumerableProperty\x2C\x0d\n  getAll: kEnumerableProperty\x2C\x0d\n  has: kEnumerableProperty\x2C\x0d\n  set: kEnumerableProperty\x2C\x0d\n  sort: kEnumerableProperty\x2C\x0d\n  entries: kEnumerableProperty\x2C\x0d\n  forEach: kEnumerableProperty\x2C\x0d\n  keys: kEnumerableProperty\x2C\x0d\n  values: kEnumerableProperty\x2C\x0d\n  toString: kEnumerableProperty\x2C\x0d\n  [SymbolToStringTag]: { configurable: true\x2C value: 'URLSearchParams' }\x2C\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable-entries\x0d\n  [SymbolIterator]: {\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: URLSearchParams.prototype.entries\x2C\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\nfunction onParseComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                         host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n  if (!this[searchParams]) { // Invoked from URL constructor\x0d\n    this[searchParams] = new URLSearchParams();\x0d\n    this[searchParams][context] = this;\x0d\n  }\x0d\n  initSearchParams(this[searchParams]\x2C query);\x0d\n}\x0d\n\x0d\nfunction onParseError(input\x2C flags) {\x0d\n  throw new ERR_INVALID_URL(input);\x0d\n}\x0d\n\x0d\nfunction onParseProtocolComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_SPECIAL) !== 0) {\x0d\n    ctx.flags |= URL_FLAGS_SPECIAL;\x0d\n  } else {\x0d\n    ctx.flags &= ~URL_FLAGS_SPECIAL;\x0d\n  }\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostnameComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  } else {\x0d\n    ctx.host = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParsePortComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  ReflectApply(onParseHostnameComplete\x2C this\x2C arguments);\x0d\n  if (port !== null || ((flags & URL_FLAGS_IS_DEFAULT_SCHEME_PORT) !== 0))\x0d\n    ReflectApply(onParsePortComplete\x2C this\x2C arguments);\x0d\n}\x0d\n\x0d\nfunction onParsePathComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_PATH) !== 0) {\x0d\n    ctx.path = path;\x0d\n    ctx.flags |= URL_FLAGS_HAS_PATH;\x0d\n  } else {\x0d\n    ctx.path = [];\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_PATH;\x0d\n  }\x0d\n\x0d\n  // The C++ binding may set host to empty string.\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParseSearchComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                               host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].query = query;\x0d\n}\x0d\n\x0d\nfunction onParseHashComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].fragment = fragment;\x0d\n}\x0d\n\x0d\nclass URL {\x0d\n  constructor(input\x2C base = undefined) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    let base_context;\x0d\n    if (base !== undefined) {\x0d\n      base_context = new URL(base)[context];\x0d\n    }\x0d\n    this[context] = new URLContext();\x0d\n    parse(input\x2C -1\x2C base_context\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C\x0d\n          FunctionPrototypeBind(onParseError\x2C this\x2C input));\x0d\n  }\x0d\n\x0d\n  get [special]() {\x0d\n    return (this[context].flags & URL_FLAGS_SPECIAL) !== 0;\x0d\n  }\x0d\n\x0d\n  get [cannotBeBase]() {\x0d\n    return (this[context].flags & URL_FLAGS_CANNOT_BE_BASE) !== 0;\x0d\n  }\x0d\n\x0d\n  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port\x0d\n  get [cannotHaveUsernamePasswordPort]() {\x0d\n    const { host\x2C scheme } = this[context];\x0d\n    return ((host == null || host === '') ||\x0d\n            this[cannotBeBase] ||\x0d\n            scheme === 'file:');\x0d\n  }\x0d\n\x0d\n  [inspect.custom](depth\x2C opts) {\x0d\n    if (this == null ||\x0d\n        ObjectGetPrototypeOf(this[context]) !== URLContext.prototype) {\x0d\n      throw new ERR_INVALID_THIS('URL');\x0d\n    }\x0d\n\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || URL;\x0d\n    const obj = ObjectCreate({ constructor });\x0d\n\x0d\n    obj.href = this.href;\x0d\n    obj.origin = this.origin;\x0d\n    obj.protocol = this.protocol;\x0d\n    obj.username = this.username;\x0d\n    obj.password = this.password;\x0d\n    obj.host = this.host;\x0d\n    obj.hostname = this.hostname;\x0d\n    obj.port = this.port;\x0d\n    obj.pathname = this.pathname;\x0d\n    obj.search = this.search;\x0d\n    obj.searchParams = this.searchParams;\x0d\n    obj.hash = this.hash;\x0d\n\x0d\n    if (opts.showHidden) {\x0d\n      obj.cannotBeBase = this[cannotBeBase];\x0d\n      obj.special = this[special];\x0d\n      obj[context] = this[context];\x0d\n    }\x0d\n\x0d\n    return `${constructor.name} ${inspect(obj\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kFormat](options) {\x0d\n    if (options)\x0d\n      validateObject(options\x2C 'options');\x0d\n\x0d\n    options = {\x0d\n      fragment: true\x2C\x0d\n      unicode: false\x2C\x0d\n      search: true\x2C\x0d\n      auth: true\x2C\x0d\n      ...options\x0d\n    };\x0d\n    const ctx = this[context];\x0d\n    // https://url.spec.whatwg.org/#url-serializing\x0d\n    let ret = ctx.scheme;\x0d\n    if (ctx.host !== null) {\x0d\n      ret += '//';\x0d\n      const has_username = ctx.username !== '';\x0d\n      const has_password = ctx.password !== '';\x0d\n      if (options.auth && (has_username || has_password)) {\x0d\n        if (has_username)\x0d\n          ret += ctx.username;\x0d\n        if (has_password)\x0d\n          ret += `:${ctx.password}`;\x0d\n        ret += '@';\x0d\n      }\x0d\n      ret += options.unicode ?\x0d\n        domainToUnicode(ctx.host) : ctx.host;\x0d\n      if (ctx.port !== null)\x0d\n        ret += `:${ctx.port}`;\x0d\n    }\x0d\n    if (this[cannotBeBase]) {\x0d\n      ret += ctx.path[0];\x0d\n    } else {\x0d\n      if (ctx.host === null && ctx.path.length > 1 && ctx.path[0] === '') {\x0d\n        ret += '/.';\x0d\n      }\x0d\n      if (ctx.path.length) {\x0d\n        ret += '/' + ArrayPrototypeJoin(ctx.path\x2C '/');\x0d\n      }\x0d\n    }\x0d\n    if (options.search && ctx.query !== null)\x0d\n      ret += `?${ctx.query}`;\x0d\n    if (options.fragment && ctx.fragment !== null)\x0d\n      ret += `#${ctx.fragment}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  toString() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  get href() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  set href(input) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    parse(input\x2C -1\x2C undefined\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C\x0d\n          FunctionPrototypeBind(onParseError\x2C this\x2C input));\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get origin() {\x0d\n    // Refs: https://url.spec.whatwg.org/#concept-url-origin\x0d\n    const ctx = this[context];\x0d\n    switch (ctx.scheme) {\x0d\n      case 'blob:':\x0d\n        if (ctx.path.length > 0) {\x0d\n          try {\x0d\n            return (new URL(ctx.path[0])).origin;\x0d\n          } catch {\x0d\n            // Fall through... do nothing\x0d\n          }\x0d\n        }\x0d\n        return kOpaqueOrigin;\x0d\n      case 'ftp:':\x0d\n      case 'http:':\x0d\n      case 'https:':\x0d\n      case 'ws:':\x0d\n      case 'wss:':\x0d\n        return serializeTupleOrigin(ctx.scheme\x2C ctx.host\x2C ctx.port);\x0d\n    }\x0d\n    return kOpaqueOrigin;\x0d\n  }\x0d\n\x0d\n  get protocol() {\x0d\n    return this[context].scheme;\x0d\n  }\x0d\n\x0d\n  set protocol(scheme) {\x0d\n    // toUSVString is not needed.\x0d\n    scheme = `${scheme}`;\x0d\n    if (scheme.length === 0)\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    parse(scheme\x2C kSchemeStart\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseProtocolComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get username() {\x0d\n    return this[context].username;\x0d\n  }\x0d\n\x0d\n  set username(username) {\x0d\n    // toUSVString is not needed.\x0d\n    username = `${username}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (username === '') {\x0d\n      ctx.username = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_USERNAME;\x0d\n      return;\x0d\n    }\x0d\n    ctx.username = encodeAuth(username);\x0d\n    ctx.flags |= URL_FLAGS_HAS_USERNAME;\x0d\n  }\x0d\n\x0d\n  get password() {\x0d\n    return this[context].password;\x0d\n  }\x0d\n\x0d\n  set password(password) {\x0d\n    // toUSVString is not needed.\x0d\n    password = `${password}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (password === '') {\x0d\n      ctx.password = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_PASSWORD;\x0d\n      return;\x0d\n    }\x0d\n    ctx.password = encodeAuth(password);\x0d\n    ctx.flags |= URL_FLAGS_HAS_PASSWORD;\x0d\n  }\x0d\n\x0d\n  get host() {\x0d\n    const ctx = this[context];\x0d\n    let ret = ctx.host || '';\x0d\n    if (ctx.port !== null)\x0d\n      ret += `:${ctx.port}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  set host(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHost\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHostComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get hostname() {\x0d\n    return this[context].host || '';\x0d\n  }\x0d\n\x0d\n  set hostname(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHostname\x2C null\x2C ctx\x2C onParseHostnameComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get port() {\x0d\n    const port = this[context].port;\x0d\n    return port === null ? '' : String(port);\x0d\n  }\x0d\n\x0d\n  set port(port) {\x0d\n    // toUSVString is not needed.\x0d\n    port = `${port}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (port === '') {\x0d\n      ctx.port = null;\x0d\n      return;\x0d\n    }\x0d\n    parse(port\x2C kPort\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParsePortComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get pathname() {\x0d\n    const ctx = this[context];\x0d\n    if (this[cannotBeBase])\x0d\n      return ctx.path[0];\x0d\n    if (ctx.path.length === 0)\x0d\n      return '';\x0d\n    return `/${ArrayPrototypeJoin(ctx.path\x2C '/')}`;\x0d\n  }\x0d\n\x0d\n  set pathname(path) {\x0d\n    // toUSVString is not needed.\x0d\n    path = `${path}`;\x0d\n    if (this[cannotBeBase])\x0d\n      return;\x0d\n    parse(path\x2C kPathStart\x2C null\x2C this[context]\x2C\x0d\n          onParsePathComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get search() {\x0d\n    const { query } = this[context];\x0d\n    if (query === null || query === '')\x0d\n      return '';\x0d\n    return `?${query}`;\x0d\n  }\x0d\n\x0d\n  set search(search) {\x0d\n    const ctx = this[context];\x0d\n    search = toUSVString(search);\x0d\n    if (search === '') {\x0d\n      ctx.query = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n    } else {\x0d\n      if (search[0] === '?') search = StringPrototypeSlice(search\x2C 1);\x0d\n      ctx.query = '';\x0d\n      ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n      if (search) {\x0d\n        parse(search\x2C kQuery\x2C null\x2C ctx\x2C\x0d\n              FunctionPrototypeBind(onParseSearchComplete\x2C this));\x0d\n      }\x0d\n    }\x0d\n    initSearchParams(this[searchParams]\x2C search);\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get searchParams() {\x0d\n    return this[searchParams];\x0d\n  }\x0d\n\x0d\n  get hash() {\x0d\n    const { fragment } = this[context];\x0d\n    if (fragment === null || fragment === '')\x0d\n      return '';\x0d\n    return `#${fragment}`;\x0d\n  }\x0d\n\x0d\n  set hash(hash) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    hash = `${hash}`;\x0d\n    if (!hash) {\x0d\n      ctx.fragment = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_FRAGMENT;\x0d\n      return;\x0d\n    }\x0d\n    if (hash[0] === '#') hash = StringPrototypeSlice(hash\x2C 1);\x0d\n    ctx.fragment = '';\x0d\n    ctx.flags |= URL_FLAGS_HAS_FRAGMENT;\x0d\n    parse(hash\x2C kFragment\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHashComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  toJSON() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  static createObjectURL(obj) {\x0d\n    const cryptoRandom = lazyCryptoRandom();\x0d\n    if (cryptoRandom === undefined)\x0d\n      throw new ERR_NO_CRYPTO();\x0d\n\x0d\n    // Yes\x2C lazy loading is annoying but because of circular\x0d\n    // references between the url\x2C internal/blob\x2C and buffer\x0d\n    // modules\x2C lazy loading here makes sure that things work.\x0d\n    const blob = lazyBlob();\x0d\n    if (!blob.isBlob(obj))\x0d\n      throw new ERR_INVALID_ARG_TYPE('obj'\x2C 'Blob'\x2C obj);\x0d\n\x0d\n    const id = cryptoRandom.randomUUID();\x0d\n\x0d\n    storeDataObject(id\x2C obj[blob.kHandle]\x2C obj.size\x2C obj.type);\x0d\n\x0d\n    return `blob:nodedata:${id}`;\x0d\n  }\x0d\n\x0d\n  static revokeObjectURL(url) {\x0d\n    url = `${url}`;\x0d\n    try {\x0d\n      const parsed = new URL(url);\x0d\n      const split = StringPrototypeSplit(parsed.pathname\x2C ':');\x0d\n      if (split.length === 2)\x0d\n        revokeDataObject(split[1]);\x0d\n    } catch {\x0d\n      // If there's an error\x2C it's ignored.\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URL.prototype\x2C {\x0d\n  [kFormat]: { configurable: false\x2C writable: false }\x2C\x0d\n  [SymbolToStringTag]: { configurable: true\x2C value: 'URL' }\x2C\x0d\n  toString: kEnumerableProperty\x2C\x0d\n  href: kEnumerableProperty\x2C\x0d\n  origin: kEnumerableProperty\x2C\x0d\n  protocol: kEnumerableProperty\x2C\x0d\n  username: kEnumerableProperty\x2C\x0d\n  password: kEnumerableProperty\x2C\x0d\n  host: kEnumerableProperty\x2C\x0d\n  hostname: kEnumerableProperty\x2C\x0d\n  port: kEnumerableProperty\x2C\x0d\n  pathname: kEnumerableProperty\x2C\x0d\n  search: kEnumerableProperty\x2C\x0d\n  searchParams: kEnumerableProperty\x2C\x0d\n  hash: kEnumerableProperty\x2C\x0d\n  toJSON: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\nfunction update(url\x2C params) {\x0d\n  if (!url)\x0d\n    return;\x0d\n\x0d\n  const ctx = url[context];\x0d\n  const serializedParams = params.toString();\x0d\n  if (serializedParams) {\x0d\n    ctx.query = serializedParams;\x0d\n    ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n  } else {\x0d\n    ctx.query = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initSearchParams(url\x2C init) {\x0d\n  if (!init) {\x0d\n    url[searchParams] = [];\x0d\n    return;\x0d\n  }\x0d\n  url[searchParams] = parseParams(init);\x0d\n}\x0d\n\x0d\n// application/x-www-form-urlencoded parser\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\x0d\nfunction parseParams(qs) {\x0d\n  const out = [];\x0d\n  let pairStart = 0;\x0d\n  let lastPos = 0;\x0d\n  let seenSep = false;\x0d\n  let buf = '';\x0d\n  let encoded = false;\x0d\n  let encodeCheck = 0;\x0d\n  let i;\x0d\n  for (i = 0; i < qs.length; ++i) {\x0d\n    const code = StringPrototypeCharCodeAt(qs\x2C i);\x0d\n\x0d\n    // Try matching key/value pair separator\x0d\n    if (code === CHAR_AMPERSAND) {\x0d\n      if (pairStart === i) {\x0d\n        // We saw an empty substring between pair separators\x0d\n        lastPos = pairStart = i + 1;\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      // If `buf` is the key\x2C add an empty value.\x0d\n      if (!seenSep)\x0d\n        out.push('');\x0d\n\x0d\n      seenSep = false;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = pairStart = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Try matching key/value separator (e.g. '=') if we haven't already\x0d\n    if (!seenSep && code === CHAR_EQUAL) {\x0d\n      // Key/value separator match!\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      seenSep = true;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Handle + and percent decoding.\x0d\n    if (code === CHAR_PLUS) {\x0d\n      if (lastPos < i)\x0d\n        buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n      buf += ' ';\x0d\n      lastPos = i + 1;\x0d\n    } else if (!encoded) {\x0d\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\x0d\n      // calls to string decoding functions\x0d\n      if (code === CHAR_PERCENT) {\x0d\n        encodeCheck = 1;\x0d\n      } else if (encodeCheck > 0) {\x0d\n        if (isHexTable[code] === 1) {\x0d\n          if (++encodeCheck === 3) {\x0d\n            encoded = true;\x0d\n          }\x0d\n        } else {\x0d\n          encodeCheck = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Deal with any leftover key or value data\x0d\n\x0d\n  // There is a trailing &. No more processing is needed.\x0d\n  if (pairStart === i)\x0d\n    return out;\x0d\n\x0d\n  if (lastPos < i)\x0d\n    buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n  if (encoded)\x0d\n    buf = querystring.unescape(buf);\x0d\n  ArrayPrototypePush(out\x2C buf);\x0d\n\x0d\n  // If `buf` is the key\x2C add an empty value.\x0d\n  if (!seenSep)\x0d\n    ArrayPrototypePush(out\x2C '');\x0d\n\x0d\n  return out;\x0d\n}\x0d\n\x0d\n// Adapted from querystring's implementation.\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\x0d\nconst noEscape = new Int8Array([\x0d\n/*\x0d\n  0\x2C 1\x2C 2\x2C 3\x2C 4\x2C 5\x2C 6\x2C 7\x2C 8\x2C 9\x2C A\x2C B\x2C C\x2C D\x2C E\x2C F\x0d\n*/\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x00 - 0x0F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x10 - 0x1F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C 0\x2C 0\x2C 1\x2C 1\x2C 0\x2C // 0x20 - 0x2F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x30 - 0x3F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x40 - 0x4F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C // 0x50 - 0x5F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x60 - 0x6F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C  // 0x70 - 0x7F\x0d\n]);\x0d\n\x0d\n// Special version of hexTable that uses `+` for U+0020 SPACE.\x0d\nconst paramHexTable = hexTable.slice();\x0d\nparamHexTable[0x20] = '+';\x0d\n\x0d\n// application/x-www-form-urlencoded serializer\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\x0d\nfunction serializeParams(array) {\x0d\n  const len = array.length;\x0d\n  if (len === 0)\x0d\n    return '';\x0d\n\x0d\n  const firstEncodedParam = encodeStr(array[0]\x2C noEscape\x2C paramHexTable);\x0d\n  const firstEncodedValue = encodeStr(array[1]\x2C noEscape\x2C paramHexTable);\x0d\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\x0d\n\x0d\n  for (let i = 2; i < len; i += 2) {\x0d\n    const encodedParam = encodeStr(array[i]\x2C noEscape\x2C paramHexTable);\x0d\n    const encodedValue = encodeStr(array[i + 1]\x2C noEscape\x2C paramHexTable);\x0d\n    output += `&${encodedParam}=${encodedValue}`;\x0d\n  }\x0d\n\x0d\n  return output;\x0d\n}\x0d\n\x0d\n// Mainly to mitigate func-name-matching ESLint rule\x0d\nfunction defineIDLClass(proto\x2C classStr\x2C obj) {\x0d\n  // https://heycam.github.io/webidl/#dfn-class-string\x0d\n  ObjectDefineProperty(proto\x2C SymbolToStringTag\x2C {\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: classStr\x0d\n  });\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-operations\x0d\n  for (const key of ObjectKeys(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n  for (const key of ObjectGetOwnPropertySymbols(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// for merge sort\x0d\nfunction merge(out\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer) {\x0d\n  const sizeLeft = mid - start;\x0d\n  const sizeRight = end - mid;\x0d\n  let l\x2C r\x2C o;\x0d\n\x0d\n  for (l = 0; l < sizeLeft; l++)\x0d\n    lBuffer[l] = out[start + l];\x0d\n  for (r = 0; r < sizeRight; r++)\x0d\n    rBuffer[r] = out[mid + r];\x0d\n\x0d\n  l = 0;\x0d\n  r = 0;\x0d\n  o = start;\x0d\n  while (l < sizeLeft && r < sizeRight) {\x0d\n    if (lBuffer[l] <= rBuffer[r]) {\x0d\n      out[o++] = lBuffer[l++];\x0d\n      out[o++] = lBuffer[l++];\x0d\n    } else {\x0d\n      out[o++] = rBuffer[r++];\x0d\n      out[o++] = rBuffer[r++];\x0d\n    }\x0d\n  }\x0d\n  while (l < sizeLeft)\x0d\n    out[o++] = lBuffer[l++];\x0d\n  while (r < sizeRight)\x0d\n    out[o++] = rBuffer[r++];\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-default-iterator-object\x0d\nfunction createSearchParamsIterator(target\x2C kind) {\x0d\n  const iterator = ObjectCreate(URLSearchParamsIteratorPrototype);\x0d\n  iterator[context] = {\x0d\n    target\x2C\x0d\n    kind\x2C\x0d\n    index: 0\x0d\n  };\x0d\n  return iterator;\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\x0d\nconst URLSearchParamsIteratorPrototype = ObjectCreate(IteratorPrototype);\x0d\n\x0d\ndefineIDLClass(URLSearchParamsIteratorPrototype\x2C 'URLSearchParams Iterator'\x2C {\x0d\n  next() {\x0d\n    if (!this ||\x0d\n        ObjectGetPrototypeOf(this) !== URLSearchParamsIteratorPrototype) {\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const values = target[searchParams];\x0d\n    const len = values.length;\x0d\n    if (index >= len) {\x0d\n      return {\x0d\n        value: undefined\x2C\x0d\n        done: true\x0d\n      };\x0d\n    }\x0d\n\x0d\n    const name = values[index];\x0d\n    const value = values[index + 1];\x0d\n    this[context].index = index + 2;\x0d\n\x0d\n    let result;\x0d\n    if (kind === 'key') {\x0d\n      result = name;\x0d\n    } else if (kind === 'value') {\x0d\n      result = value;\x0d\n    } else {\x0d\n      result = [name\x2C value];\x0d\n    }\x0d\n\x0d\n    return {\x0d\n      value: result\x2C\x0d\n      done: false\x0d\n    };\x0d\n  }\x2C\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (this == null || this[context] == null || this[context].target == null)\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const output = ArrayPrototypeReduce(\x0d\n      ArrayPrototypeSlice(target[searchParams]\x2C index)\x2C\x0d\n      (prev\x2C cur\x2C i) => {\x0d\n        const key = i % 2 === 0;\x0d\n        if (kind === 'key' && key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'key+value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C [target[searchParams][index + i - 1]\x2C cur]);\x0d\n        }\x0d\n        return prev;\x0d\n      }\x2C\x0d\n      []\x0d\n    );\x0d\n    const breakLn = inspect(output\x2C innerOpts).includes('\\n');\x0d\n    const outputStrs = ArrayPrototypeMap(output\x2C (p) => inspect(p\x2C innerOpts));\x0d\n    let outputStr;\x0d\n    if (breakLn) {\x0d\n      outputStr = `\\n  ${ArrayPrototypeJoin(outputStrs\x2C '\x2C\\n  ')}`;\x0d\n    } else {\x0d\n      outputStr = ` ${ArrayPrototypeJoin(outputStrs\x2C '\x2C ')}`;\x0d\n    }\x0d\n    return `${this[SymbolToStringTag]} {${outputStr} }`;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction domainToASCII(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToASCII(`${domain}`);\x0d\n}\x0d\n\x0d\nfunction domainToUnicode(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToUnicode(`${domain}`);\x0d\n}\x0d\n\x0d\n// Utility function that converts a URL object into an ordinary\x0d\n// options object as expected by the http.request and https.request\x0d\n// APIs.\x0d\nfunction urlToHttpOptions(url) {\x0d\n  const options = {\x0d\n    protocol: url.protocol\x2C\x0d\n    hostname: typeof url.hostname === 'string' &&\x0d\n              StringPrototypeStartsWith(url.hostname\x2C '[') ?\x0d\n      StringPrototypeSlice(url.hostname\x2C 1\x2C -1) :\x0d\n      url.hostname\x2C\x0d\n    hash: url.hash\x2C\x0d\n    search: url.search\x2C\x0d\n    pathname: url.pathname\x2C\x0d\n    path: `${url.pathname || ''}${url.search || ''}`\x2C\x0d\n    href: url.href\x0d\n  };\x0d\n  if (url.port !== '') {\x0d\n    options.port = Number(url.port);\x0d\n  }\x0d\n  if (url.username || url.password) {\x0d\n    options.auth = `${decodeURIComponent(url.username)}:${decodeURIComponent(url.password)}`;\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\nconst forwardSlashRegEx = /\\//g;\x0d\n\x0d\nfunction getPathFromURLWin32(url) {\x0d\n  const hostname = url.hostname;\x0d\n  let pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\x0d\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded \\\\ or / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  pathname = pathname.replace(forwardSlashRegEx\x2C '\\\\');\x0d\n  pathname = decodeURIComponent(pathname);\x0d\n  if (hostname !== '') {\x0d\n    // If hostname is set\x2C then we have a UNC path\x0d\n    // Pass the hostname through domainToUnicode just in case\x0d\n    // it is an IDN using punycode encoding. We do not need to worry\x0d\n    // about percent encoding because the URL parser will have\x0d\n    // already taken care of that for us. Note that this only\x0d\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\x0d\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\x0d\n  }\x0d\n  // Otherwise\x2C it's a local path that requires a drive letter\x0d\n  const letter = pathname.codePointAt(1) | 0x20;\x0d\n  const sep = pathname[2];\x0d\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\x0d\n      (sep !== ':')) {\x0d\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\x0d\n  }\x0d\n  return pathname.slice(1);\x0d\n}\x0d\n\x0d\nfunction getPathFromURLPosix(url) {\x0d\n  if (url.hostname !== '') {\x0d\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\x0d\n  }\x0d\n  const pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if (pathname[n + 1] === '2' && third === 102) {\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return decodeURIComponent(pathname);\x0d\n}\x0d\n\x0d\nfunction fileURLToPath(path) {\x0d\n  if (typeof path === 'string')\x0d\n    path = new URL(path);\x0d\n  else if (!isURLInstance(path))\x0d\n    throw new ERR_INVALID_ARG_TYPE('path'\x2C ['string'\x2C 'URL']\x2C path);\x0d\n  if (path.protocol !== 'file:')\x0d\n    throw new ERR_INVALID_URL_SCHEME('file');\x0d\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\x0d\n}\x0d\n\x0d\n// The following characters are percent-encoded when converting from file path\x0d\n// to URL:\x0d\n// - %: The percent character is the only character not encoded by the\x0d\n//        `pathname` setter.\x0d\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\x0d\n//      character but the `pathname` setters replaces it by a forward slash.\x0d\n// - LF: The newline character is stripped out by the `pathname` setter.\x0d\n//       (See whatwg/url#419)\x0d\n// - CR: The carriage return character is also stripped out by the `pathname`\x0d\n//       setter.\x0d\n// - TAB: The tab character is also stripped out by the `pathname` setter.\x0d\nconst percentRegEx = /%/g;\x0d\nconst backslashRegEx = /\\\\/g;\x0d\nconst newlineRegEx = /\\n/g;\x0d\nconst carriageReturnRegEx = /\\r/g;\x0d\nconst tabRegEx = /\\t/g;\x0d\n\x0d\nfunction encodePathChars(filepath) {\x0d\n  if (StringPrototypeIncludes(filepath\x2C '%'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C percentRegEx\x2C '%25');\x0d\n  // In posix\x2C backslash is a valid character in paths:\x0d\n  if (!isWindows && StringPrototypeIncludes(filepath\x2C '\\\\'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C backslashRegEx\x2C '%5C');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\n'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C newlineRegEx\x2C '%0A');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\r'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C carriageReturnRegEx\x2C '%0D');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\t'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C tabRegEx\x2C '%09');\x0d\n  return filepath;\x0d\n}\x0d\n\x0d\nfunction pathToFileURL(filepath) {\x0d\n  const outURL = new URL('file://');\x0d\n  if (isWindows && StringPrototypeStartsWith(filepath\x2C '\\\\\\\\')) {\x0d\n    // UNC path format: \\\\server\\share\\resource\x0d\n    const paths = StringPrototypeSplit(filepath\x2C '\\\\');\x0d\n    if (paths.length <= 3) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Missing UNC resource path'\x0d\n      );\x0d\n    }\x0d\n    const hostname = paths[2];\x0d\n    if (hostname.length === 0) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Empty UNC servername'\x0d\n      );\x0d\n    }\x0d\n    outURL.hostname = domainToASCII(hostname);\x0d\n    outURL.pathname = encodePathChars(\x0d\n      ArrayPrototypeJoin(ArrayPrototypeSlice(paths\x2C 3)\x2C '/'));\x0d\n  } else {\x0d\n    let resolved = path.resolve(filepath);\x0d\n    // path.resolve strips trailing slashes so we must add them back\x0d\n    const filePathLast = StringPrototypeCharCodeAt(filepath\x2C\x0d\n                                                   filepath.length - 1);\x0d\n    if ((filePathLast === CHAR_FORWARD_SLASH ||\x0d\n         (isWindows && filePathLast === CHAR_BACKWARD_SLASH)) &&\x0d\n        resolved[resolved.length - 1] !== path.sep)\x0d\n      resolved += '/';\x0d\n    outURL.pathname = encodePathChars(resolved);\x0d\n  }\x0d\n  return outURL;\x0d\n}\x0d\n\x0d\nfunction isURLInstance(fileURLOrPath) {\x0d\n  return fileURLOrPath != null && fileURLOrPath.href && fileURLOrPath.origin;\x0d\n}\x0d\n\x0d\nfunction toPathIfFileURL(fileURLOrPath) {\x0d\n  if (!isURLInstance(fileURLOrPath))\x0d\n    return fileURLOrPath;\x0d\n  return fileURLToPath(fileURLOrPath);\x0d\n}\x0d\n\x0d\nfunction constructUrl(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                      host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = new URLContext();\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n\x0d\n  const url = ObjectCreate(URL.prototype);\x0d\n  url[context] = ctx;\x0d\n  const params = new URLSearchParams();\x0d\n  url[searchParams] = params;\x0d\n  params[context] = url;\x0d\n  initSearchParams(params\x2C query);\x0d\n  return url;\x0d\n}\x0d\nsetURLConstructor(constructUrl);\x0d\n\x0d\nmodule.exports = {\x0d\n  toUSVString\x2C\x0d\n  fileURLToPath\x2C\x0d\n  pathToFileURL\x2C\x0d\n  toPathIfFileURL\x2C\x0d\n  isURLInstance\x2C\x0d\n  URL\x2C\x0d\n  URLSearchParams\x2C\x0d\n  domainToASCII\x2C\x0d\n  domainToUnicode\x2C\x0d\n  urlToHttpOptions\x2C\x0d\n  formatSymbol: kFormat\x2C\x0d\n  searchParamsSymbol: searchParams\x2C\x0d\n  encodeStr\x0d\n};\x0d\n
code-source-info,0x3dde95e277e,39,43048,43173,C0O43069C3O43074C9O43109C11O43130C12O43134C15O43141C19O43170,,
tick,0x7ffdf67ba8cf,195616,0,0x0,3,0x7ff7c08240c0,0x3dde95d9fcf,0x3dde95d9bc1,0x3dde95d9a83,0x3dde95d993d,0x3dde95d92e4,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,195640,0x3dde95e58c6,17,isURLInstance node:internal/url:1495:23,0x273fd339208,~
code-source-info,0x3dde95e58c6,39,42921,43020,C0O42942C3O42963C6O42988C12O43010C16O43017,,
code-creation,LazyCompile,10,195691,0x3dde95e5a26,81, node:internal/fs/utils:669:38,0x379432e26c0,~
code-source-info,0x3dde95e5a26,81,18865,19145,C14O18899C22O18932C25O18932C31O18959C36O18990C49O18965C54O18959C55O19058C68O19058C74O19097C76O19127C78O19127C80O19144,,
code-creation,LazyCompile,10,195747,0x3dde95e5c36,110, node:internal/fs/utils:358:35,0x379432e1d38,~
code-source-info,0x3dde95e5c36,81,8960,9569,C16O9025C21O9079C26O9079C31O9176C37O9199C41O9228C45O9245C51O9245C60O9297C64O9318C69O9318C76O9364C77O9371C78O9394C94O9394C100O9513C104O9536C106O9536C107O9555C109O9566,,
code-creation,LazyCompile,10,195796,0x3dde95e5dae,16,isUint8Array node:internal/util/types:13:22,0x2e6f8147418,~
script-source,17,node:internal/util/types,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayBufferIsView\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  TypedArrayPrototypeGetSymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction isTypedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\x0d\n}\x0d\n\x0d\nfunction isUint8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\x0d\n}\x0d\n\x0d\nfunction isUint8ClampedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8ClampedArray';\x0d\n}\x0d\n\x0d\nfunction isUint16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint16Array';\x0d\n}\x0d\n\x0d\nfunction isUint32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint32Array';\x0d\n}\x0d\n\x0d\nfunction isInt8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int8Array';\x0d\n}\x0d\n\x0d\nfunction isInt16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int16Array';\x0d\n}\x0d\n\x0d\nfunction isInt32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float64Array';\x0d\n}\x0d\n\x0d\nfunction isBigInt64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigInt64Array';\x0d\n}\x0d\n\x0d\nfunction isBigUint64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigUint64Array';\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ...internalBinding('types')\x2C\x0d\n  isArrayBufferView: ArrayBufferIsView\x2C\x0d\n  isTypedArray\x2C\x0d\n  isUint8Array\x2C\x0d\n  isUint8ClampedArray\x2C\x0d\n  isUint16Array\x2C\x0d\n  isUint32Array\x2C\x0d\n  isInt8Array\x2C\x0d\n  isInt16Array\x2C\x0d\n  isInt32Array\x2C\x0d\n  isFloat32Array\x2C\x0d\n  isFloat64Array\x2C\x0d\n  isBigInt64Array\x2C\x0d\n  isBigUint64Array\x0d\n};\x0d\n\x0d\nlet isCryptoKey;\x0d\nlet isKeyObject;\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  isKeyObject: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isKeyObject) {\x0d\n        ({ isKeyObject } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isKeyObject(obj);\x0d\n    }\x0d\n  }\x2C\x0d\n  isCryptoKey: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isCryptoKey) {\x0d\n        ({ isCryptoKey } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isCryptoKey(obj);\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x3dde95e5dae,17,269,356,C0O282C5O289C12O336C15O353,,
code-creation,LazyCompile,10,195954,0x3dde95e6216,23,splitRoot node:fs:2375:33,0x379432d92a8,~
code-source-info,0x3dde95e6216,80,65400,65466,C0O65413C9O65440C12O65420C19O65457C22O65461,,
code-creation,LazyCompile,10,196094,0x3dde95e631e,63,handleErrorFromBinding node:internal/fs/utils:341:32,0x379432e1ce8,~
code-source-info,0x3dde95e631e,81,8304,8815,C0O8323C6O8387C11O8387C16O8410C24O8410C29O8468C31O8468C32O8495C38O8727C43O8754C51O8727C56O8801C60O8791C62O8814,,
tick,0x7ffdf679b393,196157,0,0x0,3,0x7ff7c08240c0,0x3dde95da0a0,0x3dde95d9bc1,0x3dde95d9a83,0x3dde95d993d,0x3dde95d92e4,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,196182,0x3dde95e6496,53,nextPart node:fs:2401:31,0x379432d93a0,~
code-source-info,0x3dde95e6496,80,66157,66408,C0O66184C4O66180C9O66217C14O66217C20O66301C22O66312C24O66308C31O66342C33O66338C38O66371C40O66380C41O66194C47O66171C50O66393C52O66403,,
code-creation,LazyCompile,10,196277,0x3dde95e65f6,34,isFileType node:fs:205:20,0x379432d7010,~
code-source-info,0x3dde95e65f6,80,5489,5737,C0O5626C2O5631C6O5639C10O5674C15O5681C20O5698C22O5713C24O5711C30O5721C33O5734,,
code-creation,Function,11,196466,0x231d0e061c0,6232,resolve node:path:158:10,0x375c9f4d510,^
code-source-info,0x231d0e061c0,41,4875,9786,,,
code-creation,Function,11,196493,0x231d0e07a80,544,nextPart node:fs:2401:31,0x379432d93a0,^
code-source-info,0x231d0e07a80,80,66157,66408,,,
code-creation,LazyCompile,10,196800,0x3dde95e7206,72,encodeRealpathResult node:fs:2388:30,0x379432d9350,~
code-source-info,0x3dde95e7206,80,65746,66012,C0O65769C4O65794C10O65814C17O65823C22O65840C24O65854C25O65875C30O65882C35O65882C41O65911C48O65920C53O65941C55O65957C56O65982C61O65999C66O65982C71O66009,,
code-creation,LazyCompile,10,196868,0x3dde95e7396,62,loadNativeModule node:internal/modules/cjs/helpers:44:26,0x36339d15ad8,~
code-source-info,0x3dde95e7396,110,1194,1482,C0O1231C5O1244C10O1248C15O1248C21O1266C26O1273C35O1304C43O1304C48O1432C53O1432C57O1463C59O1474C61O1481,,
code-creation,LazyCompile,10,196948,0x3dde95e7d0e,246,Module.load node:internal/modules/cjs/loader:969:33,0x36339d1bea0,~
code-source-info,0x3dde95e7d0e,111,31233,32069,C0O31249C8O31295C16O31249C21O31305C26O31318C32O31305C36O31330C38O31344C42O31359C45O31379C52O31396C55O31401C60O31401C66O31379C71O31370C75O31444C78O31444C83O31523C91O31527C101O31580C106O31591C112O31606C124O31612C129O31606C130O31654C133O31661C140O31672C144O31683C150O31704C151O31716C155O31747C160O31756C165O31860C170O31897C175O31908C187O31949C192O31956C197O31956C204O31970C206O31968C211O32003C216O32012C221O32012C228O32038C233O32047C238O32047C245O32068,,
code-creation,LazyCompile,10,197057,0x3dde95e7fbe,98,findLongestRegisteredExtension node:internal/modules/cjs/loader:413:40,0x36339d1b3b8,~
code-source-info,0x3dde95e7fbe,111,12225,12666,C0O12254C5O12259C10O12259C16O12286C18O12311C20O12338C22O12407C36O12360C44O12407C49O12422C51O12441C55O12451C56O12461C61O12468C63O12516C68O12535C74O12575C77O12586C84O12597C89O12617C91O12641C92O12344C95O12650C97O12663,,
code-creation,LazyCompile,10,197168,0x3dde95e819e,415,basename node:path:749:11,0x375c9f4d7d0,~
code-source-info,0x3dde95e819e
code-creation,LazyCompile,10,197341,0x3dde95e86be,485,Module._extensions..js node:internal/modules/cjs/loader:1114:37,0x36339d1c040,~
code-source-info,0x3dde95e86be
code-creation,LazyCompile,10,197482,0x3dde95e8b06,376,readFileSync node:fs:450:22,0x379432d74c8,~
code-source-info,0x3dde95e8b
code-creation,LazyCompile,10,197582,0x3dde95e8e26,30,isEncoding node:buffer:530:40,0x2e6f81775c0,~
code-source-info,0x3dde95e8e26,24,15337,15472,C0O15353C6O15401C12O15408C20O15427C23O15427C28O15455C29O15469,,
code-creation,LazyCompile,10,197619,0x3dde95e8f2e,30,normalizeEncoding node:internal/util:160:27,0x2e6f8145d58,~
code-source-info,0x3dde95e8f2e,16,4365,4473,C0O4376C7O4399C14O4417C19O4430C21O4444C22O4448C25O4455C29O4470,,
code-creation,LazyCompile,10,197670,0x3dde95e90a6,113,openSync node:fs:576:18,0x379432d76b0,~
code-source-info,0x3dde95e90a6,80,14993,15383,C0O15018C5O15025C11O15072C16O15072C21O15097C37O15104C44O15157C51O15159C58O15185C63O15193C70O15198C73O15209C78O15209C95O15193C101O15334C106O15334C110O15366C112O15380,,
code-creation,LazyCompile,10,197717,0x3dde95e9226,37, node:internal/fs/utils:681:42,0x379432e2710,~
code-source-info,0x3dde95e9226,81,19192,19331,C14O19248C19O19248C24O19283C29O19283C34O19316C36O19328,,
code-creation,LazyCompile,10,197790,0x3dde95e95fe,515,stringToFlags node:internal/fs/utils:556:23,0x379432e2530,~
code-source-info,0x3dde95e95fe
code-creation,LazyCompile,10,197905,0x3dde95e99ee,97,parseFileMode node:internal/validators:59:23,0xa8296bcd10,~
code-source-info,0x3dde95e99ee,15,1545,1852,C0O1569C11O1587C17O1625C24O1650C27O1630C34O1677C41O1722C52O1683C57O1677C58O1745C66O1753C73O1789C89O1789C94O1836C96O1849,,
code-creation,LazyCompile,10,197990,0x3dde95e9b86,206, node:internal/validators:84:3,0xa8296bcdd0,~
code-source-info,0x3dde95e9b86,15,2338,2933,C36O2481C39O2486C45O2511C51O2553C67O2559C72O2553C73O2624C78O2629C84O2664C100O2670C105O2664C106O2735C116O2774C129O2787C142O2741C147O2735C148O2814C150O2824C157O2839C162O2855C172O2894C185O2907C198O2861C203O2855C205O2932,,
code-creation,LazyCompile,10,198036,0x3dde95e9d4e,9,isInt32 node:internal/validators:36:17,0xa8296bc7b0,~
code-source-info,0x3dde95e9d4e,15,769,814,C0O782C2O806C5O795C8O811,,
code-creation,LazyCompile,10,198222,0x3dde95e9e56,66,tryStatSync node:fs:404:21,0x379432d73d8,~
code-source-info,0x3dde95e9e56,80,10725,10943,C0O10757C2O10778C7O10786C22O10786C28O10831C36O10855C38O10872C43O10875C48O10875C53O10895C58O10901C62O10895C63O10927C65O10940,,
tick,0x7ffdf681d194,198271,1,0x7ff7c02f9c70,6,0x7ff7c0bf59a0,0x3dde95e9105,0x3dde95e8b3e,0x3dde95e86fa,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,198296,0x3dde95e9fce,96,tryCreateBuffer node:fs:414:25,0x379432d7428,~
code-source-info,0x3dde95e9fce,80,10971,11271,C0O11009C2O11022C7O11044C9O11055C11O11053C16O11078C23O11084C28O11078C29O11129C34O11145C39O11145C45O11169C57O11175C58O11204C65O11218C67O11228C72O11231C77O11231C93O11254C95O11268,,
code-creation,LazyCompile,10,198341,0x3dde95ea126,17,allocUnsafe node:buffer:373:42,0x2e6f8177138,~
code-source-info,0x3dde95ea126,24,11277,11335,C0O11289C5O11289C9O11310C12O11317C16O11332,,
code-creation,LazyCompile,10,198377,0x3dde95ea22e,54, node:buffer:349:36,0x2e6f8177080,~
code-source-info,0x3dde95ea22e,24,10551,10711,C0O10566C8O10566C13O10599C14O10610C21O10626C23O10623C28O10646C33O10678C46O10652C51O10646C53O10710,,
code-creation,LazyCompile,10,198414,0x3dde95ea356,30,validateNumber node:internal/validators:123:24,0xa8296bcf10,~
code-source-info,0x3dde95ea356,15,3673,3785,C0O3692C6O3728C22O3734C27O3728C29O3784,,
code-creation,LazyCompile,10,198459,0x3dde95ea46e,119,allocate node:buffer:398:18,0x2e6f8177288,~
code-source-info,0x3dde95ea46e,24,12004,12332,C0O12016C1O12025C6O12038C11O12045C16O12062C17O12071C20O12090C24O12099C27O12080C32O12114C34O12126C39O12137C41O12135C44O12123C49O12157C52O12157C55O12186C62O12201C67O12212C75O12186C81O12236C88O12250C94O12247C100O12261C103O12261C106O12279C108O12288C109O12297C114O12304C118O12329,,
code-creation,LazyCompile,10,198526,0x3dde95ea62e,86,tryReadSync node:fs:429:21,0x379432d7478,~
code-source-info,0x3dde95ea62e,80,11295,11540,C0O11345C2O11358C7O11383C12O11398C29O11398C35O11435C47O11441C48O11470C55O11484C57O11494C62O11497C67O11497C83O11520C85O11537,,
code-creation,LazyCompile,10,198601,0x3dde95ea81e,258,readSync node:fs:684:18,0x379432d7780,~
code-source-info,0x3dde95ea81e,80,17835,18869,C0O17835C2O17879C7O17884C13O17909C18O17909C22O17952C29O17959C34O18036C40O18046C45O18046C50O18083C62O18102C68O18118C75O18129C80O18146C89O18191C94O18218C99O18247C112O18247C117O18295C124O18313C125O18324C130O18338C131O18347C132O18369C138O18380C143O18394C159O18400C164O18394C165O18526C170O18574C181O18526C186O18592C191O18619C195O18639C203O18639C208O18696C210O18718C215O18726C240O18726C246O18820C251O18820C255O18852C257O18866,,
code-creation,LazyCompile,10,198668,0x3dde95eaa8e,52, node:internal/fs/utils:687:40,0x379432e2760,~
code-source-info,0x3dde95eaa8e,81,19376,19505,C14O19406C22O19410C29O19435C30O19444C31O19455C44O19455C49O19492C51O19502,,
code-creation,LazyCompile,10,198709,0x3dde95eabfe,51, node:internal/validators:191:40,0xa8296bd138,~
code-source-info,0x3dde95eabfe,15,5871,6107,C14O5905C19O5910C25O5944C30O5975C43O5950C48O5944C50O6106,,
code-creation,LazyCompile,10,198756,0x3dde95ead56,151, node:internal/validators:73:3,0xa8296bcd80,~
code-source-info,0x3dde95ead56,15,1900,2288,C12O1920C25O1950C32O1984C38O2022C54O2028C59O2022C60O2082C65O2087C71O2118C87O2124C92O2118C93O2178C95O2188C102O2203C107O2217C117O2256C130O2269C143O2223C148O2217C150O2287,,
code-creation,LazyCompile,10,198817,0x3dde95eaf5e,103, node:internal/fs/utils:637:3,0x379432e2620,~
code-source-info,0x3dde95eaf5e,81,17950,18340,C0O17991C1O18002C6O18016C22O18022C27O18016C28O18082C29O18093C34O18107C50O18113C55O18107C56O18173C58O18184C64O18193C69O18218C82O18308C95O18224C100O18218C102O18339,,
code-creation,LazyCompile,10,198879,0x3dde95eb266,151, node:internal/fs/utils:892:42,0x379432e2a80,~
code-source-info,0x3dde95eb266,81,25170,25742,C0O25195C6O25236C14O25236C21O25285C27O25326C32O25349C35O25344C37O25341C47O25375C53O25382C56O25369C61O25398C77O25482C80O25477C98O25502C104O25509C117O25404C122O25398C125O25586C143O25592C148O25586C150O25741,,
code-creation,LazyCompile,10,198944,0x3dde95eb41e,47,closeSync node:fs:526:19,0x379432d75d8,~
code-source-info,0x3dde95eb41e,80,13812,13940,C0O13822C5O13827C11O13864C13O13871C18O13879C31O13879C36O13909C41O13909C46O13939,,
code-creation,LazyCompile,10,199021,0x3dde95eb556,162,toString node:buffer:783:46,0x2e6f8178fc0,~
code-source-info,0x3dde95eb556,24,24080,24672,C0O24080C2O24122C8O24129C13O24155C20O24173C25O24155C31O24181C32O24209C37O24222C38O24232C43O24243C48O24262C50O24272C55O24285C57O24295C58O24309C65O24326C71O24355C76O24367C83O24391C90O24406C92O24414C97O24429C99O24439C100O24445C104O24490C109O24490C115O24512C116O24530C119O24530C124O24559C126O24587C133O24593C138O24587C139O24645C156O24645C161O24669,,
code-creation,LazyCompile,10,199128,0x3dde95eb816,499,getEncodingOps node:buffer:679:24,0x2e6f8178e18,~
code-source-info,0x3dde95eb
code-creation,LazyCompile,10,199248,0x3dde95ebbfe,12,slice node:buffer:594:12,0x2e6f81777e0,~
code-source-info,0x3dde95ebbfe,24,17229,17275,C0O17254C5O17254C11O17275,,
code-creation,LazyCompile,10,199585,0x3dde95ec6b6,499,Module._compile node:internal/modules/cjs/loader:1059:37,0x36339d1bfb0,~
code-source-info,0x3dde95ec6b
code-creation,LazyCompile,10,199728,0x3dde95ecc1e,224,maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29,0x36339d12ff8,~
code-source-info,0x3dde95ecc1e,108,2312,3375,C0O2382C3O2382C7O2409C10O2423C15O2427C23O2447C25O2467C26O2474C30O2489C35O2500C44O2498C54O2645C64O2645C68O2662C69O2669C70O2692C75O2719C80O2692C86O2799C88O2830C91O2858C96O2865C101O2830C107O2901C112O2921C117O2928C122O2951C126O2983C131O3001C136O3005C143O3035C150O3067C160O3098C166O3113C170O3001C178O3244C183O3262C188O3266C196O3300C206O3331C212O3346C216O3262C223O3374,,
code-creation,LazyCompile,10,199796,0x3dde95ed676,31,getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30,0x36339d12f58,~
code-source-info,0x3dde95ed676,108,1460,1610,C0O1468C6O1512C11O1533C17O1533C22O1512C26O1582C30O1607,,
code-creation,LazyCompile,10,199847,0x3dde95ed7ee,100,setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30,0x36339d12fa8,~
code-source-info,0x3dde95ed7ee,108,1643,2280,C0O1654C8O1654C13O1764C19O1764C24O1701C29O1728C34O1794C38O1824C42O1882C48O1882C53O1855C58O1939C64O1998C70O2161C76O2161C81O2133C86O2194C90O2253C92O2271C99O2279,,
code-creation,LazyCompile,10,199892,0x3dde95ed966,30,validateBoolean node:internal/validators:139:25,0xa8296bcfb0,~
code-source-info,0x3dde95ed966,15,4199,4313,C0O4218C6O4255C22O4261C27O4255C29O4312,,
code-creation,LazyCompile,10,199969,0x3dde95edd5e,165,wrapSafe node:internal/modules/cjs/loader:1017:18,0x36339d1b638,~
code-source-info,0x3dde95edd5e,111,32708,33836,C0O32708C9O32752C17O32788C22O32795C27O32795C33O32815C40O32825C45O32842C52O32860C56O32952C64O32825C70O33229C74O33249C81O33259C86O33275C98O33397C102O33414C113O33259C118O33705C130O33730C135O33742C142O33753C147O33783C157O33783C162O33818C164O33818,,
code-creation,LazyCompile,10,200142,0x3dde95ee536,472,compileFunction node:vm:308:25,0x379432f4570,~
script-source,88,node:vm,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Symbol\x2C\x0d\n  PromiseReject\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ContextifyScript\x2C\x0d\n  MicrotaskQueue\x2C\x0d\n  makeContext\x2C\x0d\n  isContext: _isContext\x2C\x0d\n  constants\x2C\x0d\n  compileFunction: _compileFunction\x2C\x0d\n  measureMemory: _measureMemory\x2C\x0d\n} = internalBinding('contextify');\x0d\nconst {\x0d\n  ERR_CONTEXT_NOT_INITIALIZED\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\nconst {\x0d\n  kVmBreakFirstLineSymbol\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n} = require('internal/util');\x0d\nconst kParsingContext = Symbol('script parsing context');\x0d\n\x0d\nclass Script extends ContextifyScript {\x0d\n  constructor(code\x2C options = {}) {\x0d\n    code = `${code}`;\x0d\n    if (typeof options === 'string') {\x0d\n      options = { filename: options };\x0d\n    } else {\x0d\n      validateObject(options\x2C 'options');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      filename = 'evalmachine.<anonymous>'\x2C\x0d\n      lineOffset = 0\x2C\x0d\n      columnOffset = 0\x2C\x0d\n      cachedData\x2C\x0d\n      produceCachedData = false\x2C\x0d\n      importModuleDynamically\x2C\x0d\n      [kParsingContext]: parsingContext\x2C\x0d\n    } = options;\x0d\n\x0d\n    validateString(filename\x2C 'options.filename');\x0d\n    validateInt32(lineOffset\x2C 'options.lineOffset');\x0d\n    validateInt32(columnOffset\x2C 'options.columnOffset');\x0d\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.cachedData'\x2C\x0d\n        ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        cachedData\x0d\n      );\x0d\n    }\x0d\n    validateBoolean(produceCachedData\x2C 'options.produceCachedData');\x0d\n\x0d\n    // Calling `ReThrow()` on a native TryCatch does not generate a new\x0d\n    // abort-on-uncaught-exception check. A dummy try/catch in JS land\x0d\n    // protects against that.\x0d\n    try { // eslint-disable-line no-useless-catch\x0d\n      super(code\x2C\x0d\n            filename\x2C\x0d\n            lineOffset\x2C\x0d\n            columnOffset\x2C\x0d\n            cachedData\x2C\x0d\n            produceCachedData\x2C\x0d\n            parsingContext);\x0d\n    } catch (e) {\x0d\n      throw e; /* node-do-not-add-exception-line */\x0d\n    }\x0d\n\x0d\n    if (importModuleDynamically !== undefined) {\x0d\n      validateFunction(importModuleDynamically\x2C\x0d\n                       'options.importModuleDynamically');\x0d\n      const { importModuleDynamicallyWrap } =\x0d\n        require('internal/vm/module');\x0d\n      const { callbackMap } = internalBinding('module_wrap');\x0d\n      callbackMap.set(this\x2C {\x0d\n        importModuleDynamically:\x0d\n          importModuleDynamicallyWrap(importModuleDynamically)\x2C\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  runInThisContext(options) {\x0d\n    const { breakOnSigint\x2C args } = getRunInContextArgs(options);\x0d\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\x0d\n      return sigintHandlersWrap(super.runInThisContext\x2C this\x2C args);\x0d\n    }\x0d\n    return ReflectApply(super.runInThisContext\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  runInContext(contextifiedObject\x2C options) {\x0d\n    validateContext(contextifiedObject);\x0d\n    const { breakOnSigint\x2C args } = getRunInContextArgs(options);\x0d\n    ArrayPrototypeUnshift(args\x2C contextifiedObject);\x0d\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\x0d\n      return sigintHandlersWrap(super.runInContext\x2C this\x2C args);\x0d\n    }\x0d\n    return ReflectApply(super.runInContext\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  runInNewContext(contextObject\x2C options) {\x0d\n    const context = createContext(contextObject\x2C getContextOptions(options));\x0d\n    return this.runInContext(context\x2C options);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction validateContext(contextifiedObject) {\x0d\n  if (!isContext(contextifiedObject)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('contextifiedObject'\x2C 'vm.Context'\x2C\x0d\n                                   contextifiedObject);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getRunInContextArgs(options = {}) {\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  let timeout = options.timeout;\x0d\n  if (timeout === undefined) {\x0d\n    timeout = -1;\x0d\n  } else {\x0d\n    validateUint32(timeout\x2C 'options.timeout'\x2C true);\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    displayErrors = true\x2C\x0d\n    breakOnSigint = false\x2C\x0d\n    [kVmBreakFirstLineSymbol]: breakFirstLine = false\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateBoolean(displayErrors\x2C 'options.displayErrors');\x0d\n  validateBoolean(breakOnSigint\x2C 'options.breakOnSigint');\x0d\n\x0d\n  return {\x0d\n    breakOnSigint\x2C\x0d\n    args: [timeout\x2C displayErrors\x2C breakOnSigint\x2C breakFirstLine]\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction getContextOptions(options) {\x0d\n  if (!options)\x0d\n    return {};\x0d\n  const contextOptions = {\x0d\n    name: options.contextName\x2C\x0d\n    origin: options.contextOrigin\x2C\x0d\n    codeGeneration: undefined\x2C\x0d\n    microtaskMode: options.microtaskMode\x2C\x0d\n  };\x0d\n  if (contextOptions.name !== undefined)\x0d\n    validateString(contextOptions.name\x2C 'options.contextName');\x0d\n  if (contextOptions.origin !== undefined)\x0d\n    validateString(contextOptions.origin\x2C 'options.contextOrigin');\x0d\n  if (options.contextCodeGeneration !== undefined) {\x0d\n    validateObject(options.contextCodeGeneration\x2C\x0d\n                   'options.contextCodeGeneration');\x0d\n    const { strings\x2C wasm } = options.contextCodeGeneration;\x0d\n    if (strings !== undefined)\x0d\n      validateBoolean(strings\x2C 'options.contextCodeGeneration.strings');\x0d\n    if (wasm !== undefined)\x0d\n      validateBoolean(wasm\x2C 'options.contextCodeGeneration.wasm');\x0d\n    contextOptions.codeGeneration = { strings\x2C wasm };\x0d\n  }\x0d\n  if (options.microtaskMode !== undefined)\x0d\n    validateString(options.microtaskMode\x2C 'options.microtaskMode');\x0d\n  return contextOptions;\x0d\n}\x0d\n\x0d\nfunction isContext(object) {\x0d\n  validateObject(object\x2C 'object'\x2C { allowArray: true });\x0d\n\x0d\n  return _isContext(object);\x0d\n}\x0d\n\x0d\nlet defaultContextNameIndex = 1;\x0d\nfunction createContext(contextObject = {}\x2C options = {}) {\x0d\n  if (isContext(contextObject)) {\x0d\n    return contextObject;\x0d\n  }\x0d\n\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  const {\x0d\n    name = `VM Context ${defaultContextNameIndex++}`\x2C\x0d\n    origin\x2C\x0d\n    codeGeneration\x2C\x0d\n    microtaskMode\x0d\n  } = options;\x0d\n\x0d\n  validateString(name\x2C 'options.name');\x0d\n  if (origin !== undefined)\x0d\n    validateString(origin\x2C 'options.origin');\x0d\n  if (codeGeneration !== undefined)\x0d\n    validateObject(codeGeneration\x2C 'options.codeGeneration');\x0d\n\x0d\n  let strings = true;\x0d\n  let wasm = true;\x0d\n  if (codeGeneration !== undefined) {\x0d\n    ({ strings = true\x2C wasm = true } = codeGeneration);\x0d\n    validateBoolean(strings\x2C 'options.codeGeneration.strings');\x0d\n    validateBoolean(wasm\x2C 'options.codeGeneration.wasm');\x0d\n  }\x0d\n\x0d\n  let microtaskQueue = null;\x0d\n  if (microtaskMode !== undefined) {\x0d\n    validateOneOf(microtaskMode\x2C 'options.microtaskMode'\x2C\x0d\n                  ['afterEvaluate'\x2C undefined]);\x0d\n\x0d\n    if (microtaskMode === 'afterEvaluate')\x0d\n      microtaskQueue = new MicrotaskQueue();\x0d\n  }\x0d\n\x0d\n  makeContext(contextObject\x2C name\x2C origin\x2C strings\x2C wasm\x2C microtaskQueue);\x0d\n  return contextObject;\x0d\n}\x0d\n\x0d\nfunction createScript(code\x2C options) {\x0d\n  return new Script(code\x2C options);\x0d\n}\x0d\n\x0d\n// Remove all SIGINT listeners and re-attach them after the wrapped function\x0d\n// has executed\x2C so that caught SIGINT are handled by the listeners again.\x0d\nfunction sigintHandlersWrap(fn\x2C thisArg\x2C argsArray) {\x0d\n  const sigintListeners = process.rawListeners('SIGINT');\x0d\n\x0d\n  process.removeAllListeners('SIGINT');\x0d\n\x0d\n  try {\x0d\n    return ReflectApply(fn\x2C thisArg\x2C argsArray);\x0d\n  } finally {\x0d\n    // Add using the public methods so that the `newListener` handler of\x0d\n    // process can re-attach the listeners.\x0d\n    ArrayPrototypeForEach(sigintListeners\x2C (listener) => {\x0d\n      process.addListener('SIGINT'\x2C listener);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction runInContext(code\x2C contextifiedObject\x2C options) {\x0d\n  validateContext(contextifiedObject);\x0d\n  if (typeof options === 'string') {\x0d\n    options = {\x0d\n      filename: options\x2C\x0d\n      [kParsingContext]: contextifiedObject\x0d\n    };\x0d\n  } else {\x0d\n    options = { ...options\x2C [kParsingContext]: contextifiedObject };\x0d\n  }\x0d\n  return createScript(code\x2C options)\x0d\n    .runInContext(contextifiedObject\x2C options);\x0d\n}\x0d\n\x0d\nfunction runInNewContext(code\x2C contextObject\x2C options) {\x0d\n  if (typeof options === 'string') {\x0d\n    options = { filename: options };\x0d\n  }\x0d\n  contextObject = createContext(contextObject\x2C getContextOptions(options));\x0d\n  options = { ...options\x2C [kParsingContext]: contextObject };\x0d\n  return createScript(code\x2C options).runInNewContext(contextObject\x2C options);\x0d\n}\x0d\n\x0d\nfunction runInThisContext(code\x2C options) {\x0d\n  if (typeof options === 'string') {\x0d\n    options = { filename: options };\x0d\n  }\x0d\n  return createScript(code\x2C options).runInThisContext(options);\x0d\n}\x0d\n\x0d\nfunction compileFunction(code\x2C params\x2C options = {}) {\x0d\n  validateString(code\x2C 'code');\x0d\n  if (params !== undefined) {\x0d\n    validateArray(params\x2C 'params');\x0d\n    ArrayPrototypeForEach(params\x2C\x0d\n                          (param\x2C i) => validateString(param\x2C `params[${i}]`));\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    filename = ''\x2C\x0d\n    columnOffset = 0\x2C\x0d\n    lineOffset = 0\x2C\x0d\n    cachedData = undefined\x2C\x0d\n    produceCachedData = false\x2C\x0d\n    parsingContext = undefined\x2C\x0d\n    contextExtensions = []\x2C\x0d\n    importModuleDynamically\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateString(filename\x2C 'options.filename');\x0d\n  validateUint32(columnOffset\x2C 'options.columnOffset');\x0d\n  validateUint32(lineOffset\x2C 'options.lineOffset');\x0d\n  if (cachedData !== undefined)\x0d\n    validateBuffer(cachedData\x2C 'options.cachedData');\x0d\n  validateBoolean(produceCachedData\x2C 'options.produceCachedData');\x0d\n  if (parsingContext !== undefined) {\x0d\n    if (\x0d\n      typeof parsingContext !== 'object' ||\x0d\n      parsingContext === null ||\x0d\n      !isContext(parsingContext)\x0d\n    ) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.parsingContext'\x2C\x0d\n        'Context'\x2C\x0d\n        parsingContext\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n  validateArray(contextExtensions\x2C 'options.contextExtensions');\x0d\n  ArrayPrototypeForEach(contextExtensions\x2C (extension\x2C i) => {\x0d\n    const name = `options.contextExtensions[${i}]`;\x0d\n    validateObject(extension\x2C name\x2C { nullable: true });\x0d\n  });\x0d\n\x0d\n  const result = _compileFunction(\x0d\n    code\x2C\x0d\n    filename\x2C\x0d\n    lineOffset\x2C\x0d\n    columnOffset\x2C\x0d\n    cachedData\x2C\x0d\n    produceCachedData\x2C\x0d\n    parsingContext\x2C\x0d\n    contextExtensions\x2C\x0d\n    params\x0d\n  );\x0d\n\x0d\n  if (produceCachedData) {\x0d\n    result.function.cachedDataProduced = result.cachedDataProduced;\x0d\n  }\x0d\n\x0d\n  if (result.cachedData) {\x0d\n    result.function.cachedData = result.cachedData;\x0d\n  }\x0d\n\x0d\n  if (importModuleDynamically !== undefined) {\x0d\n    validateFunction(importModuleDynamically\x2C\x0d\n                     'options.importModuleDynamically');\x0d\n    const { importModuleDynamicallyWrap } =\x0d\n      require('internal/vm/module');\x0d\n    const { callbackMap } = internalBinding('module_wrap');\x0d\n    const wrapped = importModuleDynamicallyWrap(importModuleDynamically);\x0d\n    const func = result.function;\x0d\n    callbackMap.set(result.cacheKey\x2C {\x0d\n      importModuleDynamically: (s\x2C _k\x2C i) => wrapped(s\x2C func\x2C i)\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  return result.function;\x0d\n}\x0d\n\x0d\nconst measureMemoryModes = {\x0d\n  summary: constants.measureMemory.mode.SUMMARY\x2C\x0d\n  detailed: constants.measureMemory.mode.DETAILED\x2C\x0d\n};\x0d\n\x0d\nconst measureMemoryExecutions = {\x0d\n  default: constants.measureMemory.execution.DEFAULT\x2C\x0d\n  eager: constants.measureMemory.execution.EAGER\x2C\x0d\n};\x0d\n\x0d\nfunction measureMemory(options = {}) {\x0d\n  emitExperimentalWarning('vm.measureMemory');\x0d\n  validateObject(options\x2C 'options');\x0d\n  const { mode = 'summary'\x2C execution = 'default' } = options;\x0d\n  validateOneOf(mode\x2C 'options.mode'\x2C ['summary'\x2C 'detailed']);\x0d\n  validateOneOf(execution\x2C 'options.execution'\x2C ['default'\x2C 'eager']);\x0d\n  const result = _measureMemory(measureMemoryModes[mode]\x2C\x0d\n                                measureMemoryExecutions[execution]);\x0d\n  if (result === undefined) {\x0d\n    return PromiseReject(new ERR_CONTEXT_NOT_INITIALIZED());\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Script\x2C\x0d\n  createContext\x2C\x0d\n  createScript\x2C\x0d\n  runInContext\x2C\x0d\n  runInNewContext\x2C\x0d\n  runInThisContext\x2C\x0d\n  isContext\x2C\x0d\n  compileFunction\x2C\x0d\n  measureMemory\x2C\x0d\n};\x0d\n\x0d\n// The vm module is patched to include vm.Module\x2C vm.SourceTextModule\x0d\n// and vm.SyntheticModule in the pre-execution phase when\x0d\n// --experimental-vm-modules is on.\x0d\n
code-source-info,0x3dde95ee
tick,0x7ff7c0a26681,200765,0,0x0,3,0x7ff7c08240c0,0x3dde95eddcf,0x3dde95ec71d,0x3dde95e889b,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,200787,0x3dde95ef6fe,95, node:internal/validators:168:39,0xa8296bd070,~
code-source-info,0x3dde95ef6fe,15,5152,5438,C16O5189C21O5194C27O5222C43O5228C48O5222C49O5294C56O5301C61O5336C66O5359C71O5377C87O5383C92O5377C94O5437,,
code-creation,LazyCompile,10,200833,0x3dde95ef85e,27, node:vm:313:27,0x3dde95ee208,~
code-source-info,0x3dde95ef85e,88,10064,10115,C0O10078C10O10110C21O10078C26O10115,,
code-creation,Eval,10,200883,0x3dde95efad6,5, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\no-cluster.js:1:1,0x3dde95ef990,~
script-source,133,C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\no-cluster.js,const cluster = require('cluster')\n\ncluster.on('fork'\x2C () => {\n  throw new Error('0x does not support clustering.')\n})\n
code-source-info,0x3dde95efad6,133,0,119,C0O0C4O119,,
code-creation,Function,10,200914,0x3dde95efbbe,29, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\no-cluster.js:1:1,0x3dde95efa50,~
code-source-info,0x3dde95efbbe,133,0,119,C0O16C3O16C8O44C21O44C28O118,,
code-creation,LazyCompile,10,200997,0x3dde95efe36,19,importModuleDynamicallyWrap node:internal/vm/module:435:37,0x3dde95cbb88,~
code-source-info,0x3dde95efe36,131,12139,12597,C0O12139C13O12209C18O12594,,
code-creation,LazyCompile,10,201070,0x3dde95f100e,159,makeRequireFunction node:internal/modules/cjs/helpers:58:29,0x36339d15b28,~
code-source-info,0x3dde95f100e,110,1765,3805,C0O1765C22O1802C25O1806C29O1802C31O1828C33O1840C53O1873C58O1877C69O1893C73O1873C75O1921C81O1921C83O1949C89O1958C95O1987C104O3182C109O3423C111O3439C115O3586C117O3600C121O3614C126O3637C130O3627C134O3705C137O3733C141O3724C145O3751C148O3774C152O3765C156O3787C158O3802,,
code-creation,LazyCompile,10,201135,0x3dde95f125e,14,require node:internal/modules/cjs/helpers:101:31,0x3dde95f0ee0,~
code-source-info,0x3dde95f125e,110,3208,3256,C0O3224C3O3235C8O3235C13O3249,,
code-creation,LazyCompile,10,201173,0x3dde95f13a6,10, node:internal/modules/cjs/helpers:29:66,0x36339d15cf8,~
code-source-info,0x3dde95f13a6,110,838,865,C0O851C2O857C9O864,,
code-creation,LazyCompile,10,201223,0x3dde95f151e,129,compileForPublicLoader node:internal/bootstrap/loaders:246:25,0xa82968fb98,~
code-source-info,0x3dde95f151e,9,7789,8477,C0O7809C6O7956C16O7999C33O7962C38O7956C39O8038C44O8038C48O8081C54O8273C61O8304C69O8273C75O8329C80O8347C90O8363C93O8379C98O8363C102O8345C106O8406C111O8406C115O8432C120O8432C124O8464C128O8472,,
code-creation,Eval,10,201291,0x3dde95f187e,5, node:cluster:1:1,0x3dde95f1738,~
script-source,134,node:cluster,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst childOrPrimary = 'NODE_UNIQUE_ID' in process.env ? 'child' : 'primary';\x0d\nmodule.exports = require(`internal/cluster/${childOrPrimary}`);\x0d\n
code-source-info,0x3dde95f187e,134,0,1316,C0O0C4O1316,,
code-creation,Function,10,201359,0x3dde95f1926,39, node:cluster:1:1,0x3dde95f17f8,~
code-source-info,0x3dde95f1926,134,0,1316,C0O1195C3O1223C7O1212C19O1251C24O1296C29O1268C33O1266C38O1315,,
code-creation,Eval,10,201652,0x3dde95f24e6,5, node:internal/cluster/primary:1:1,0x3dde95f2160,~
script-source,135,node:internal/cluster/primary,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectValues\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\nconst { fork } = require('child_process');\x0d\nconst path = require('path');\x0d\nconst EventEmitter = require('events');\x0d\nconst RoundRobinHandle = require('internal/cluster/round_robin_handle');\x0d\nconst SharedHandle = require('internal/cluster/shared_handle');\x0d\nconst Worker = require('internal/cluster/worker');\x0d\nconst { internal\x2C sendHelper } = require('internal/cluster/utils');\x0d\nconst cluster = new EventEmitter();\x0d\nconst intercom = new EventEmitter();\x0d\nconst SCHED_NONE = 1;\x0d\nconst SCHED_RR = 2;\x0d\nconst minPort = 1024;\x0d\nconst maxPort = 65535;\x0d\nconst { validatePort } = require('internal/validators');\x0d\n\x0d\nmodule.exports = cluster;\x0d\n\x0d\nconst handles = new SafeMap();\x0d\ncluster.isWorker = false;\x0d\ncluster.isMaster = true; // Deprecated alias. Must be same as isPrimary.\x0d\ncluster.isPrimary = true;\x0d\ncluster.Worker = Worker;\x0d\ncluster.workers = {};\x0d\ncluster.settings = {};\x0d\ncluster.SCHED_NONE = SCHED_NONE;  // Leave it to the operating system.\x0d\ncluster.SCHED_RR = SCHED_RR;      // Primary distributes connections.\x0d\n\x0d\nlet ids = 0;\x0d\nlet debugPortOffset = 1;\x0d\nlet initialized = false;\x0d\n\x0d\n// XXX(bnoordhuis) Fold cluster.schedulingPolicy into cluster.settings?\x0d\nlet schedulingPolicy = process.env.NODE_CLUSTER_SCHED_POLICY;\x0d\nif (schedulingPolicy === 'rr')\x0d\n  schedulingPolicy = SCHED_RR;\x0d\nelse if (schedulingPolicy === 'none')\x0d\n  schedulingPolicy = SCHED_NONE;\x0d\nelse if (process.platform === 'win32') {\x0d\n  // Round-robin doesn't perform well on\x0d\n  // Windows due to the way IOCP is wired up.\x0d\n  schedulingPolicy = SCHED_NONE;\x0d\n} else\x0d\n  schedulingPolicy = SCHED_RR;\x0d\n\x0d\ncluster.schedulingPolicy = schedulingPolicy;\x0d\n\x0d\ncluster.setupPrimary = function(options) {\x0d\n  const settings = {\x0d\n    args: ArrayPrototypeSlice(process.argv\x2C 2)\x2C\x0d\n    exec: process.argv[1]\x2C\x0d\n    execArgv: process.execArgv\x2C\x0d\n    silent: false\x2C\x0d\n    ...cluster.settings\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  // Tell V8 to write profile data for each process to a separate file.\x0d\n  // Without --logfile=v8-%p.log\x2C everything ends up in a single\x2C unusable\x0d\n  // file. (Unusable because what V8 logs are memory addresses and each\x0d\n  // process has its own memory mappings.)\x0d\n  if (ArrayPrototypeSome(settings.execArgv\x2C\x0d\n                         (s) => StringPrototypeStartsWith(s\x2C '--prof')) &&\x0d\n      !ArrayPrototypeSome(settings.execArgv\x2C\x0d\n                          (s) => StringPrototypeStartsWith(s\x2C '--logfile='))) {\x0d\n    settings.execArgv = [...settings.execArgv\x2C '--logfile=v8-%p.log'];\x0d\n  }\x0d\n\x0d\n  cluster.settings = settings;\x0d\n\x0d\n  if (initialized === true)\x0d\n    return process.nextTick(setupSettingsNT\x2C settings);\x0d\n\x0d\n  initialized = true;\x0d\n  schedulingPolicy = cluster.schedulingPolicy;  // Freeze policy.\x0d\n  assert(schedulingPolicy === SCHED_NONE || schedulingPolicy === SCHED_RR\x2C\x0d\n         `Bad cluster.schedulingPolicy: ${schedulingPolicy}`);\x0d\n\x0d\n  process.nextTick(setupSettingsNT\x2C settings);\x0d\n\x0d\n  process.on('internalMessage'\x2C (message) => {\x0d\n    if (message.cmd !== 'NODE_DEBUG_ENABLED')\x0d\n      return;\x0d\n\x0d\n    for (const worker of ObjectValues(cluster.workers)) {\x0d\n      if (worker.state === 'online' || worker.state === 'listening') {\x0d\n        process._debugProcess(worker.process.pid);\x0d\n      } else {\x0d\n        worker.once('online'\x2C function() {\x0d\n          process._debugProcess(this.process.pid);\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  });\x0d\n};\x0d\n\x0d\n// Deprecated alias must be same as setupPrimary\x0d\ncluster.setupMaster = cluster.setupPrimary;\x0d\n\x0d\nfunction setupSettingsNT(settings) {\x0d\n  cluster.emit('setup'\x2C settings);\x0d\n}\x0d\n\x0d\nfunction createWorkerProcess(id\x2C env) {\x0d\n  const workerEnv = { ...process.env\x2C ...env\x2C NODE_UNIQUE_ID: `${id}` };\x0d\n  const execArgv = [...cluster.settings.execArgv];\x0d\n  const debugArgRegex = /--inspect(?:-brk|-port)?|--debug-port/;\x0d\n  const nodeOptions = process.env.NODE_OPTIONS || '';\x0d\n\x0d\n  if (ArrayPrototypeSome(execArgv\x2C\x0d\n                         (arg) => RegExpPrototypeTest(debugArgRegex\x2C arg)) ||\x0d\n      RegExpPrototypeTest(debugArgRegex\x2C nodeOptions)) {\x0d\n    let inspectPort;\x0d\n    if ('inspectPort' in cluster.settings) {\x0d\n      if (typeof cluster.settings.inspectPort === 'function')\x0d\n        inspectPort = cluster.settings.inspectPort();\x0d\n      else\x0d\n        inspectPort = cluster.settings.inspectPort;\x0d\n\x0d\n      validatePort(inspectPort);\x0d\n    } else {\x0d\n      inspectPort = process.debugPort + debugPortOffset;\x0d\n      if (inspectPort > maxPort)\x0d\n        inspectPort = inspectPort - maxPort + minPort - 1;\x0d\n      debugPortOffset++;\x0d\n    }\x0d\n\x0d\n    ArrayPrototypePush(execArgv\x2C `--inspect-port=${inspectPort}`);\x0d\n  }\x0d\n\x0d\n  return fork(cluster.settings.exec\x2C cluster.settings.args\x2C {\x0d\n    cwd: cluster.settings.cwd\x2C\x0d\n    env: workerEnv\x2C\x0d\n    serialization: cluster.settings.serialization\x2C\x0d\n    silent: cluster.settings.silent\x2C\x0d\n    windowsHide: cluster.settings.windowsHide\x2C\x0d\n    execArgv: execArgv\x2C\x0d\n    stdio: cluster.settings.stdio\x2C\x0d\n    gid: cluster.settings.gid\x2C\x0d\n    uid: cluster.settings.uid\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction removeWorker(worker) {\x0d\n  assert(worker);\x0d\n  delete cluster.workers[worker.id];\x0d\n\x0d\n  if (ObjectKeys(cluster.workers).length === 0) {\x0d\n    assert(handles.size === 0\x2C 'Resource leak detected.');\x0d\n    intercom.emit('disconnect');\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction removeHandlesForWorker(worker) {\x0d\n  assert(worker);\x0d\n\x0d\n  handles.forEach((handle\x2C key) => {\x0d\n    if (handle.remove(worker))\x0d\n      handles.delete(key);\x0d\n  });\x0d\n}\x0d\n\x0d\ncluster.fork = function(env) {\x0d\n  cluster.setupPrimary();\x0d\n  const id = ++ids;\x0d\n  const workerProcess = createWorkerProcess(id\x2C env);\x0d\n  const worker = new Worker({\x0d\n    id: id\x2C\x0d\n    process: workerProcess\x0d\n  });\x0d\n\x0d\n  worker.on('message'\x2C function(message\x2C handle) {\x0d\n    cluster.emit('message'\x2C this\x2C message\x2C handle);\x0d\n  });\x0d\n\x0d\n  worker.process.once('exit'\x2C (exitCode\x2C signalCode) => {\x0d\n    /*\x0d\n     * Remove the worker from the workers list only\x0d\n     * if it has disconnected\x2C otherwise we might\x0d\n     * still want to access it.\x0d\n     */\x0d\n    if (!worker.isConnected()) {\x0d\n      removeHandlesForWorker(worker);\x0d\n      removeWorker(worker);\x0d\n    }\x0d\n\x0d\n    worker.exitedAfterDisconnect = !!worker.exitedAfterDisconnect;\x0d\n    worker.state = 'dead';\x0d\n    worker.emit('exit'\x2C exitCode\x2C signalCode);\x0d\n    cluster.emit('exit'\x2C worker\x2C exitCode\x2C signalCode);\x0d\n  });\x0d\n\x0d\n  worker.process.once('disconnect'\x2C () => {\x0d\n    /*\x0d\n     * Now is a good time to remove the handles\x0d\n     * associated with this worker because it is\x0d\n     * not connected to the primary anymore.\x0d\n     */\x0d\n    removeHandlesForWorker(worker);\x0d\n\x0d\n    /*\x0d\n     * Remove the worker from the workers list only\x0d\n     * if its process has exited. Otherwise\x2C we might\x0d\n     * still want to access it.\x0d\n     */\x0d\n    if (worker.isDead())\x0d\n      removeWorker(worker);\x0d\n\x0d\n    worker.exitedAfterDisconnect = !!worker.exitedAfterDisconnect;\x0d\n    worker.state = 'disconnected';\x0d\n    worker.emit('disconnect');\x0d\n    cluster.emit('disconnect'\x2C worker);\x0d\n  });\x0d\n\x0d\n  worker.process.on('internalMessage'\x2C internal(worker\x2C onmessage));\x0d\n  process.nextTick(emitForkNT\x2C worker);\x0d\n  cluster.workers[worker.id] = worker;\x0d\n  return worker;\x0d\n};\x0d\n\x0d\nfunction emitForkNT(worker) {\x0d\n  cluster.emit('fork'\x2C worker);\x0d\n}\x0d\n\x0d\ncluster.disconnect = function(cb) {\x0d\n  const workers = ObjectKeys(cluster.workers);\x0d\n\x0d\n  if (workers.length === 0) {\x0d\n    process.nextTick(() => intercom.emit('disconnect'));\x0d\n  } else {\x0d\n    for (const worker of ObjectValues(cluster.workers)) {\x0d\n      if (worker.isConnected()) {\x0d\n        worker.disconnect();\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (typeof cb === 'function')\x0d\n    intercom.once('disconnect'\x2C cb);\x0d\n};\x0d\n\x0d\nconst methodMessageMapping = {\x0d\n  close\x2C\x0d\n  exitedAfterDisconnect\x2C\x0d\n  listening\x2C\x0d\n  online\x2C\x0d\n  queryServer\x2C\x0d\n};\x0d\n\x0d\nfunction onmessage(message\x2C handle) {\x0d\n  const worker = this;\x0d\n\x0d\n  const fn = methodMessageMapping[message.act];\x0d\n\x0d\n  if (typeof fn === 'function')\x0d\n    fn(worker\x2C message);\x0d\n}\x0d\n\x0d\nfunction online(worker) {\x0d\n  worker.state = 'online';\x0d\n  worker.emit('online');\x0d\n  cluster.emit('online'\x2C worker);\x0d\n}\x0d\n\x0d\nfunction exitedAfterDisconnect(worker\x2C message) {\x0d\n  worker.exitedAfterDisconnect = true;\x0d\n  send(worker\x2C { ack: message.seq });\x0d\n}\x0d\n\x0d\nfunction queryServer(worker\x2C message) {\x0d\n  // Stop processing if worker already disconnecting\x0d\n  if (worker.exitedAfterDisconnect)\x0d\n    return;\x0d\n\x0d\n  const key = `${message.address}:${message.port}:${message.addressType}:` +\x0d\n              `${message.fd}:${message.index}`;\x0d\n  let handle = handles.get(key);\x0d\n\x0d\n  if (handle === undefined) {\x0d\n    let address = message.address;\x0d\n\x0d\n    // Find shortest path for unix sockets because of the ~100 byte limit\x0d\n    if (message.port < 0 && typeof address === 'string' &&\x0d\n        process.platform !== 'win32') {\x0d\n\x0d\n      address = path.relative(process.cwd()\x2C address);\x0d\n\x0d\n      if (message.address.length < address.length)\x0d\n        address = message.address;\x0d\n    }\x0d\n\x0d\n    // UDP is exempt from round-robin connection balancing for what should\x0d\n    // be obvious reasons: it's connectionless. There is nothing to send to\x0d\n    // the workers except raw datagrams and that's pointless.\x0d\n    if (schedulingPolicy !== SCHED_RR ||\x0d\n        message.addressType === 'udp4' ||\x0d\n        message.addressType === 'udp6') {\x0d\n      handle = new SharedHandle(key\x2C address\x2C message);\x0d\n    } else {\x0d\n      handle = new RoundRobinHandle(key\x2C address\x2C message);\x0d\n    }\x0d\n\x0d\n    handles.set(key\x2C handle);\x0d\n  }\x0d\n\x0d\n  if (!handle.data)\x0d\n    handle.data = message.data;\x0d\n\x0d\n  // Set custom server data\x0d\n  handle.add(worker\x2C (errno\x2C reply\x2C handle) => {\x0d\n    const { data } = handles.get(key);\x0d\n\x0d\n    if (errno)\x0d\n      handles.delete(key);  // Gives other workers a chance to retry.\x0d\n\x0d\n    send(worker\x2C {\x0d\n      errno\x2C\x0d\n      key\x2C\x0d\n      ack: message.seq\x2C\x0d\n      data\x2C\x0d\n      ...reply\x0d\n    }\x2C handle);\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction listening(worker\x2C message) {\x0d\n  const info = {\x0d\n    addressType: message.addressType\x2C\x0d\n    address: message.address\x2C\x0d\n    port: message.port\x2C\x0d\n    fd: message.fd\x0d\n  };\x0d\n\x0d\n  worker.state = 'listening';\x0d\n  worker.emit('listening'\x2C info);\x0d\n  cluster.emit('listening'\x2C worker\x2C info);\x0d\n}\x0d\n\x0d\n// Server in worker is closing\x2C remove from list. The handle may have been\x0d\n// removed by a prior call to removeHandlesForWorker() so guard against that.\x0d\nfunction close(worker\x2C message) {\x0d\n  const key = message.key;\x0d\n  const handle = handles.get(key);\x0d\n\x0d\n  if (handle && handle.remove(worker))\x0d\n    handles.delete(key);\x0d\n}\x0d\n\x0d\nfunction send(worker\x2C message\x2C handle\x2C cb) {\x0d\n  return sendHelper(worker.process\x2C message\x2C handle\x2C cb);\x0d\n}\x0d\n\x0d\n// Extend generic Worker with methods specific to the primary process.\x0d\nWorker.prototype.disconnect = function() {\x0d\n  this.exitedAfterDisconnect = true;\x0d\n  send(this\x2C { act: 'disconnect' });\x0d\n  removeHandlesForWorker(this);\x0d\n  removeWorker(this);\x0d\n  return this;\x0d\n};\x0d\n\x0d\nWorker.prototype.destroy = function(signo) {\x0d\n  const proc = this.process;\x0d\n\x0d\n  signo = signo || 'SIGTERM';\x0d\n\x0d\n  if (this.isConnected()) {\x0d\n    this.once('disconnect'\x2C () => proc.kill(signo));\x0d\n    this.disconnect();\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  proc.kill(signo);\x0d\n};\x0d\n
code-source-info,0x3dde95f24e6,135,0,11181,C0O0C4O11181,,
code-creation,Function,10,202175,0x3dde95f2eae,640, node:internal/cluster/primary:1:1,0x3dde95f2460,~
code-source-info,0x3dde95f2eae
tick,0x7ff7c017189b,202306,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x3dde95f1943,0x231d0e04f03,0x3dde95f154a,0x3dde95e73cb,0x3dde95d5ebe,0x3dde95d5af2,0x3dde95f1266,0x3dde95efbc1,0x3dde95ec881,0x3dde95e889b,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,Eval,10,202440,0x3dde95f44f6,5, node:internal/cluster/round_robin_handle:1:1,0x3dde95f42e0,~
script-source,136,node:internal/cluster/round_robin_handle,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  Boolean\x2C\x0d\n  ObjectCreate\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\nconst net = require('net');\x0d\nconst { sendHelper } = require('internal/cluster/utils');\x0d\nconst { append\x2C init\x2C isEmpty\x2C peek\x2C remove } = require('internal/linkedlist');\x0d\nconst { constants } = internalBinding('tcp_wrap');\x0d\n\x0d\nmodule.exports = RoundRobinHandle;\x0d\n\x0d\nfunction RoundRobinHandle(key\x2C address\x2C { port\x2C fd\x2C flags\x2C backlog }) {\x0d\n  this.key = key;\x0d\n  this.all = new SafeMap();\x0d\n  this.free = new SafeMap();\x0d\n  this.handles = init(ObjectCreate(null));\x0d\n  this.handle = null;\x0d\n  this.server = net.createServer(assert.fail);\x0d\n\x0d\n  if (fd >= 0)\x0d\n    this.server.listen({ fd\x2C backlog });\x0d\n  else if (port >= 0) {\x0d\n    this.server.listen({\x0d\n      port\x2C\x0d\n      host: address\x2C\x0d\n      // Currently\x2C net module only supports `ipv6Only` option in `flags`.\x0d\n      ipv6Only: Boolean(flags & constants.UV_TCP_IPV6ONLY)\x2C\x0d\n      backlog\x2C\x0d\n    });\x0d\n  } else\x0d\n    this.server.listen(address\x2C backlog);  // UNIX socket path.\x0d\n\x0d\n  this.server.once('listening'\x2C () => {\x0d\n    this.handle = this.server._handle;\x0d\n    this.handle.onconnection = (err\x2C handle) => this.distribute(err\x2C handle);\x0d\n    this.server._handle = null;\x0d\n    this.server = null;\x0d\n  });\x0d\n}\x0d\n\x0d\nRoundRobinHandle.prototype.add = function(worker\x2C send) {\x0d\n  assert(this.all.has(worker.id) === false);\x0d\n  this.all.set(worker.id\x2C worker);\x0d\n\x0d\n  const done = () => {\x0d\n    if (this.handle.getsockname) {\x0d\n      const out = {};\x0d\n      this.handle.getsockname(out);\x0d\n      // TODO(bnoordhuis) Check err.\x0d\n      send(null\x2C { sockname: out }\x2C null);\x0d\n    } else {\x0d\n      send(null\x2C null\x2C null);  // UNIX socket.\x0d\n    }\x0d\n\x0d\n    this.handoff(worker);  // In case there are connections pending.\x0d\n  };\x0d\n\x0d\n  if (this.server === null)\x0d\n    return done();\x0d\n\x0d\n  // Still busy binding.\x0d\n  this.server.once('listening'\x2C done);\x0d\n  this.server.once('error'\x2C (err) => {\x0d\n    send(err.errno\x2C null);\x0d\n  });\x0d\n};\x0d\n\x0d\nRoundRobinHandle.prototype.remove = function(worker) {\x0d\n  const existed = this.all.delete(worker.id);\x0d\n\x0d\n  if (!existed)\x0d\n    return false;\x0d\n\x0d\n  this.free.delete(worker.id);\x0d\n\x0d\n  if (this.all.size !== 0)\x0d\n    return false;\x0d\n\x0d\n  while (!isEmpty(this.handles)) {\x0d\n    const handle = peek(this.handles);\x0d\n    handle.close();\x0d\n    remove(handle);\x0d\n  }\x0d\n\x0d\n  this.handle.close();\x0d\n  this.handle = null;\x0d\n  return true;\x0d\n};\x0d\n\x0d\nRoundRobinHandle.prototype.distribute = function(err\x2C handle) {\x0d\n  append(this.handles\x2C handle);\x0d\n  // eslint-disable-next-line node-core/no-array-destructuring\x0d\n  const [ workerEntry ] = this.free; // this.free is a SafeMap\x0d\n\x0d\n  if (ArrayIsArray(workerEntry)) {\x0d\n    const { 0: workerId\x2C 1: worker } = workerEntry;\x0d\n    this.free.delete(workerId);\x0d\n    this.handoff(worker);\x0d\n  }\x0d\n};\x0d\n\x0d\nRoundRobinHandle.prototype.handoff = function(worker) {\x0d\n  if (!this.all.has(worker.id)) {\x0d\n    return;  // Worker is closing (or has closed) the server.\x0d\n  }\x0d\n\x0d\n  const handle = peek(this.handles);\x0d\n\x0d\n  if (handle === null) {\x0d\n    this.free.set(worker.id\x2C worker);  // Add to ready queue again.\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  remove(handle);\x0d\n\x0d\n  const message = { act: 'newconn'\x2C key: this.key };\x0d\n\x0d\n  sendHelper(worker.process\x2C message\x2C handle\x2C (reply) => {\x0d\n    if (reply.accepted)\x0d\n      handle.close();\x0d\n    else\x0d\n      this.distribute(0\x2C handle);  // Worker is shutting down. Send to another.\x0d\n\x0d\n    this.handoff(worker);\x0d\n  });\x0d\n};\x0d\n
code-source-info,0x3dde95f44f6,136,0,3423,C0O0C4O3423,,
code-creation,Function,10,202607,0x3dde95f48be,217, node:internal/cluster/round_robin_handle:1:1,0x3dde95f4470,~
code-source-info,0x3dde95f48be,136,0,3423,C0O0C49O28C55O45C61O57C67O74C73O119C76O119C80O119C82O160C85O160C89O160C91O200C94O200C99O185C105O284C108O284C113O244C119O252C125O258C131O267C137O273C143O339C146O339C151O325C157O371C159O386C163O1307C172O1321C176O1999C185O2016C189O2419C198O2440C202O2807C211O2825C216O3422,,
code-creation,Eval,10,202729,0x3dde95f51de,5, node:internal/cluster/utils:1:1,0x3dde95f5068,~
script-source,137,node:internal/cluster/utils,'use strict';\x0d\n\x0d\nconst {\x0d\n  ReflectApply\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = {\x0d\n  sendHelper\x2C\x0d\n  internal\x0d\n};\x0d\n\x0d\nconst callbacks = new SafeMap();\x0d\nlet seq = 0;\x0d\n\x0d\nfunction sendHelper(proc\x2C message\x2C handle\x2C cb) {\x0d\n  if (!proc.connected)\x0d\n    return false;\x0d\n\x0d\n  // Mark message as internal. See INTERNAL_PREFIX\x0d\n  // in lib/internal/child_process.js\x0d\n  message = { cmd: 'NODE_CLUSTER'\x2C ...message\x2C seq };\x0d\n\x0d\n  if (typeof cb === 'function')\x0d\n    callbacks.set(seq\x2C cb);\x0d\n\x0d\n  seq += 1;\x0d\n  return proc.send(message\x2C handle);\x0d\n}\x0d\n\x0d\n// Returns an internalMessage listener that hands off normal messages\x0d\n// to the callback but intercepts and redirects ACK messages.\x0d\nfunction internal(worker\x2C cb) {\x0d\n  return function onInternalMessage(message\x2C handle) {\x0d\n    if (message.cmd !== 'NODE_CLUSTER')\x0d\n      return;\x0d\n\x0d\n    let fn = cb;\x0d\n\x0d\n    if (message.ack !== undefined) {\x0d\n      const callback = callbacks.get(message.ack);\x0d\n\x0d\n      if (callback !== undefined) {\x0d\n        fn = callback;\x0d\n        callbacks.delete(message.ack);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    ReflectApply(fn\x2C worker\x2C arguments);\x0d\n  };\x0d\n}\x0d\n
code-source-info,0x3dde95f51de,137,0,1104,C0O0C4O1104,,
code-creation,Function,10,202799,0x3dde95f539e,72, node:internal/cluster/utils:1:1,0x3dde95f5158,~
code-source-info,0x3dde95f539e,137,0,1104,C0O0C24O28C30O45C35O75C42O97C48O112C54O90C58O146C60O146C65O146C67O172C68O172C71O1103,,
code-creation,Eval,10,202911,0x3dde95f59ae,5, node:internal/cluster/shared_handle:1:1,0x3dde95f5828,~
script-source,138,node:internal/cluster/shared_handle,'use strict';\x0d\nconst { SafeMap } = primordials;\x0d\nconst assert = require('internal/assert');\x0d\nconst dgram = require('internal/dgram');\x0d\nconst net = require('net');\x0d\n\x0d\nmodule.exports = SharedHandle;\x0d\n\x0d\nfunction SharedHandle(key\x2C address\x2C { port\x2C addressType\x2C fd\x2C flags }) {\x0d\n  this.key = key;\x0d\n  this.workers = new SafeMap();\x0d\n  this.handle = null;\x0d\n  this.errno = 0;\x0d\n\x0d\n  let rval;\x0d\n  if (addressType === 'udp4' || addressType === 'udp6')\x0d\n    rval = dgram._createSocketHandle(address\x2C port\x2C addressType\x2C fd\x2C flags);\x0d\n  else\x0d\n    rval = net._createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags);\x0d\n\x0d\n  if (typeof rval === 'number')\x0d\n    this.errno = rval;\x0d\n  else\x0d\n    this.handle = rval;\x0d\n}\x0d\n\x0d\nSharedHandle.prototype.add = function(worker\x2C send) {\x0d\n  assert(!this.workers.has(worker.id));\x0d\n  this.workers.set(worker.id\x2C worker);\x0d\n  send(this.errno\x2C null\x2C this.handle);\x0d\n};\x0d\n\x0d\nSharedHandle.prototype.remove = function(worker) {\x0d\n  if (!this.workers.has(worker.id))\x0d\n    return false;\x0d\n\x0d\n  this.workers.delete(worker.id);\x0d\n\x0d\n  if (this.workers.size !== 0)\x0d\n    return false;\x0d\n\x0d\n  this.handle.close();\x0d\n  this.handle = null;\x0d\n  return true;\x0d\n};\x0d\n
code-source-info,0x3dde95f59ae,138,0,1147,C0O0C4O1147,,
code-creation,Function,10,202983,0x3dde95f5be6,89, node:internal/cluster/shared_handle:1:1,0x3dde95f5928,~
code-source-info,0x3dde95f5be6,138,0,1147,C0O0C22O23C28O64C31O64C35O64C37O107C40O107C44O107C46O147C49O147C53O147C55O166C57O181C61O711C70O725C74O893C83O910C88O1146,,
code-creation,Eval,10,203096,0x3dde95f61ce,5, node:internal/cluster/worker:1:1,0x3dde95f6058,~
script-source,139,node:internal/cluster/worker,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\n\x0d\nmodule.exports = Worker;\x0d\n\x0d\n// Common Worker implementation shared between the cluster primary and workers.\x0d\nfunction Worker(options) {\x0d\n  if (!(this instanceof Worker))\x0d\n    return new Worker(options);\x0d\n\x0d\n  ReflectApply(EventEmitter\x2C this\x2C []);\x0d\n\x0d\n  if (options === null || typeof options !== 'object')\x0d\n    options = {};\x0d\n\x0d\n  this.exitedAfterDisconnect = undefined;\x0d\n\x0d\n  this.state = options.state || 'none';\x0d\n  this.id = options.id | 0;\x0d\n\x0d\n  if (options.process) {\x0d\n    this.process = options.process;\x0d\n    this.process.on('error'\x2C (code\x2C signal) =>\x0d\n      this.emit('error'\x2C code\x2C signal)\x0d\n    );\x0d\n    this.process.on('message'\x2C (message\x2C handle) =>\x0d\n      this.emit('message'\x2C message\x2C handle)\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Worker.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Worker\x2C EventEmitter);\x0d\n\x0d\nWorker.prototype.kill = function() {\x0d\n  ReflectApply(this.destroy\x2C this\x2C arguments);\x0d\n};\x0d\n\x0d\nWorker.prototype.send = function() {\x0d\n  return ReflectApply(this.process.send\x2C this.process\x2C arguments);\x0d\n};\x0d\n\x0d\nWorker.prototype.isDead = function() {\x0d\n  return this.process.exitCode != null || this.process.signalCode != null;\x0d\n};\x0d\n\x0d\nWorker.prototype.isConnected = function() {\x0d\n  return this.process.connected;\x0d\n};\x0d\n
code-source-info,0x3dde95f61ce,139,0,1370,C0O0C4O1370,,
code-creation,Function,10,203175,0x3dde95f6536,141, node:internal/cluster/worker:1:1,0x3dde95f6148,~
code-source-info,0x3dde95f6536,139,0,1370,C0O0C17O28C22O53C28O109C31O109C35O109C37O131C39O146C43O849C46O877C54O901C59O849C64O914C70O914C75O961C78O968C87O983C91O1053C94O1060C103O1075C107O1165C110O1172C119O1189C123O1287C126O1294C135O1316C140O1369,,
code-creation,LazyCompile,10,203317,0x3dde95f6cce,151,getESMFacade node:internal/bootstrap/loaders:264:15,0xa82968fc10,~
code-source-info,0x3dde95f6cce,9,8495,9141,C0O8495C8O8514C14O8534C18O8541C19O8570C29O8570C34O8555C39O8619C42O8632C51O8664C53O8664C55O8695C62O8720C67O8695C72O8738C82O8738C87O8787C89O8840C102O8801C107O8799C111O9052C116O9059C121O9059C125O9084C130O9091C140O9091C146O9129C150O9136,,
code-creation,LazyCompile,10,203397,0x3dde95f70b6,40, node:internal/bootstrap/loaders:273:15,0x3dde95f6bc8,~
code-source-info,0x3dde95f70b6,9,8868,8976,C0O8882C5O8895C10O8895C14O8924C24O8945C27O8958C32O8924C39O8975,,
code-creation,LazyCompile,10,203447,0x3dde95f720e,89,syncExports node:internal/bootstrap/loaders:287:14,0xa82968fc80,~
code-source-info,0x3dde95f720e,9,9454,9797,C0O9483C5O9509C11O9539C13O9552C17O9544C22O9595C24O9600C28O9614C30O9629C35O9644C37O9668C42O9675C51O9728C54O9740C59O9766C67O9728C73O9675C79O9561C84O9526C88O9796,,
code-creation,LazyCompile,10,203493,0x3dde95f7376,35,getOwn node:internal/bootstrap/loaders:180:16,0xa82968f918,~
code-source-info,0x3dde95f7376,9,5677,5835,C0O5714C5O5721C14O5776C26O5776C34O5832,,
code-creation,RegExp,3,203626,0x231d0e07d00,1532,(?:^|\\/)\\.?\\.$
code-creation,RegExp,3,203777,0x231d0e08360,1592,^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*
code-creation,Function,11,203935,0x231d0e08a00,3380,dirname node:path:653:10,0x375c9f4d768,^
code-source-info,0x231d0e08a00,41,21280,23908,,,
code-creation,Function,11,203970,0x231d0e097a0,1936,toNamespacedPath node:path:618:19,0x375c9f4d6f8,^
code-source-info,0x231d0e097a0,41,20086,21201,,,
code-creation,Function,11,203991,0x231d0e09fa0,320,isFileType node:fs:205:20,0x379432d7010,^
code-source-info,0x231d0e09fa0,80,5489,5737,,,
code-creation,Function,11,204009,0x231d0e0a140,304,getOwn node:internal/bootstrap/loaders:180:16,0xa82968f918,^
code-source-info,0x231d0e0a140,9,5677,5835,,,
code-creation,Function,11,204029,0x231d0e0a2e0,672,syncExports node:internal/bootstrap/loaders:287:14,0xa82968fc80,^
code-source-info,0x231d0e0a2e0,9,9454,9797,,,
tick,0x7ffdf681d194,204161,1,0x7ff7c02f9c70,6,0x7ff7c0bf59a0,0x3dde95e9105,0x3dde95e8b3e,0x3dde95e86fa,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,Eval,10,204312,0x3dde95f805e,5, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\redir-stdout.js:1:1,0x3dde95f7eb8,~
script-source,140,C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\redir-stdout.js,'use strict'\nconst net = require('net')\n\nlet isWorker = false\ntry {\n  // Skip redirecting stdout in Worker threads.\n  isWorker = !require('worker_threads').isMainThread\n} catch (e) {}\n\nif (!isWorker) {\n  const socket = new net.Socket({\n    fd: 3\x2C\n    readable: false\x2C\n    writable: true\n  })\n  Object.defineProperty(process\x2C 'stdout'\x2C {\n    configurable: true\x2C\n    enumerable: true\x2C\n    get: () => socket\n  })\n  Object.defineProperty(process.stdout\x2C 'fd'\x2C {\n    value: socket._handle.fd\n  })\n}\n
code-source-info,0x3dde95f805e,140,0,494,C0O0C4O494,,
code-creation,Function,10,204359,0x3dde95f8306,157, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\redir-stdout.js:1:1,0x3dde95f7fd8,~
code-source-info,0x3dde95f8306,140,0,494,C0O25C3O25C8O56C13O118C16O130C21O155C30O127C42O185C53O227C65O219C70O219C72O294C76O301C81O316C93O392C101O301C106O412C110O419C115O434C119O442C135O476C140O484C148O419C156O493,,
code-creation,LazyCompile,10,204448,0x3dde95f87d6,37,get SocketAddress node:net:1830:20,0x2c63eb2b860,~
code-source-info,0x3dde95f87d6,101,50750,50858,C0O50760C14O50778C19O50811C26O50774C32O50832C36O50853,,
code-creation,Eval,10,204532,0x3dde95f8b9e,5, node:worker_threads:1:1,0x3dde95f8a58,~
script-source,141,node:worker_threads,'use strict';\x0d\n\x0d\nconst {\x0d\n  isMainThread\x2C\x0d\n  SHARE_ENV\x2C\x0d\n  resourceLimits\x2C\x0d\n  setEnvironmentData\x2C\x0d\n  getEnvironmentData\x2C\x0d\n  threadId\x2C\x0d\n  Worker\x0d\n} = require('internal/worker');\x0d\n\x0d\nconst {\x0d\n  MessagePort\x2C\x0d\n  MessageChannel\x2C\x0d\n  moveMessagePortToContext\x2C\x0d\n  receiveMessageOnPort\x2C\x0d\n  BroadcastChannel\x2C\x0d\n} = require('internal/worker/io');\x0d\n\x0d\nconst {\x0d\n  markAsUntransferable\x2C\x0d\n} = require('internal/buffer');\x0d\n\x0d\nmodule.exports = {\x0d\n  isMainThread\x2C\x0d\n  MessagePort\x2C\x0d\n  MessageChannel\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  moveMessagePortToContext\x2C\x0d\n  receiveMessageOnPort\x2C\x0d\n  resourceLimits\x2C\x0d\n  threadId\x2C\x0d\n  SHARE_ENV\x2C\x0d\n  Worker\x2C\x0d\n  parentPort: null\x2C\x0d\n  workerData: null\x2C\x0d\n  BroadcastChannel\x2C\x0d\n  setEnvironmentData\x2C\x0d\n  getEnvironmentData\x2C\x0d\n};\x0d\n
code-source-info,0x3dde95f8b9e,141,0,727,C0O0C4O727,,
code-creation,Function,10,204592,0x3dde95f8dae,180, node:worker_threads:1:1,0x3dde95f8b18,~
code-source-info,0x3dde95f8dae,141,0,727,C0O149C3O149C8O28C13O45C18O59C23O78C28O101C33O124C38O137C43O303C46O303C51O191C56O207C61O226C66O255C71O280C76O375C79O375C84O348C89O406C96O428C102O445C108O461C114O480C120O505C126O534C132O559C138O578C144O591C150O605C156O658C162O679C168O702C174O421C179O726,,
code-creation,Eval,10,204997,0x3dde95f9d36,5, node:internal/worker:1:1,0x3dde95f9758,~
script-source,142,node:internal/worker,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  Float64Array\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  JSONStringify\x2C\x0d\n  MathMax\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectEntries\x2C\x0d\n  Promise\x2C\x0d\n  PromiseResolve\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  String\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  TypedArrayPrototypeFill\x2C\x0d\n  Uint32Array\x2C\x0d\n  globalThis: { Atomics\x2C SharedArrayBuffer }\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst assert = require('internal/assert');\x0d\nconst path = require('path');\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\nconst errorCodes = require('internal/errors').codes;\x0d\nconst {\x0d\n  ERR_WORKER_NOT_RUNNING\x2C\x0d\n  ERR_WORKER_PATH\x2C\x0d\n  ERR_WORKER_UNSERIALIZABLE_ERROR\x2C\x0d\n  ERR_WORKER_INVALID_EXEC_ARGV\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n} = errorCodes;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\nconst workerIo = require('internal/worker/io');\x0d\nconst {\x0d\n  drainMessagePort\x2C\x0d\n  MessageChannel\x2C\x0d\n  messageTypes\x2C\x0d\n  kPort\x2C\x0d\n  kIncrementsPortRef\x2C\x0d\n  kWaitingStreams\x2C\x0d\n  kStdioWantsMoreDataCallback\x2C\x0d\n  setupPortReferencing\x2C\x0d\n  ReadableWorkerStdio\x2C\x0d\n  WritableWorkerStdio\x0d\n} = workerIo;\x0d\nconst { deserializeError } = require('internal/error_serdes');\x0d\nconst { fileURLToPath\x2C isURLInstance\x2C pathToFileURL } = require('internal/url');\x0d\nconst { validateArray } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  ownsProcessState\x2C\x0d\n  isMainThread\x2C\x0d\n  resourceLimits: resourceLimitsRaw\x2C\x0d\n  threadId\x2C\x0d\n  Worker: WorkerImpl\x2C\x0d\n  kMaxYoungGenerationSizeMb\x2C\x0d\n  kMaxOldGenerationSizeMb\x2C\x0d\n  kCodeRangeSizeMb\x2C\x0d\n  kStackSizeMb\x2C\x0d\n  kTotalResourceLimitCount\x0d\n} = internalBinding('worker');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kPublicPort = Symbol('kPublicPort');\x0d\nconst kDispose = Symbol('kDispose');\x0d\nconst kOnExit = Symbol('kOnExit');\x0d\nconst kOnMessage = Symbol('kOnMessage');\x0d\nconst kOnCouldNotSerializeErr = Symbol('kOnCouldNotSerializeErr');\x0d\nconst kOnErrorMessage = Symbol('kOnErrorMessage');\x0d\nconst kParentSideStdio = Symbol('kParentSideStdio');\x0d\nconst kLoopStartTime = Symbol('kLoopStartTime');\x0d\nconst kIsOnline = Symbol('kIsOnline');\x0d\n\x0d\nconst SHARE_ENV = SymbolFor('nodejs.worker_threads.SHARE_ENV');\x0d\nlet debug = require('internal/util/debuglog').debuglog('worker'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nlet cwdCounter;\x0d\n\x0d\nconst environmentData = new SafeMap();\x0d\n\x0d\nif (isMainThread) {\x0d\n  cwdCounter = new Uint32Array(new SharedArrayBuffer(4));\x0d\n  const originalChdir = process.chdir;\x0d\n  process.chdir = function(path) {\x0d\n    Atomics.add(cwdCounter\x2C 0\x2C 1);\x0d\n    originalChdir(path);\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction setEnvironmentData(key\x2C value) {\x0d\n  if (value === undefined)\x0d\n    environmentData.delete(key);\x0d\n  else\x0d\n    environmentData.set(key\x2C value);\x0d\n}\x0d\n\x0d\nfunction getEnvironmentData(key) {\x0d\n  return environmentData.get(key);\x0d\n}\x0d\n\x0d\nfunction assignEnvironmentData(data) {\x0d\n  if (data === undefined) return;\x0d\n  data.forEach((value\x2C key) => {\x0d\n    environmentData.set(key\x2C value);\x0d\n  });\x0d\n}\x0d\n\x0d\nclass Worker extends EventEmitter {\x0d\n  constructor(filename\x2C options = {}) {\x0d\n    super();\x0d\n    debug(`[${threadId}] create new worker`\x2C filename\x2C options);\x0d\n    if (options.execArgv)\x0d\n      validateArray(options.execArgv\x2C 'options.execArgv');\x0d\n\x0d\n    let argv;\x0d\n    if (options.argv) {\x0d\n      validateArray(options.argv\x2C 'options.argv');\x0d\n      argv = ArrayPrototypeMap(options.argv\x2C String);\x0d\n    }\x0d\n\x0d\n    let url\x2C doEval;\x0d\n    if (options.eval) {\x0d\n      if (typeof filename !== 'string') {\x0d\n        throw new ERR_INVALID_ARG_VALUE(\x0d\n          'options.eval'\x2C\x0d\n          options.eval\x2C\x0d\n          'must be false when \\'filename\\' is not a string'\x0d\n        );\x0d\n      }\x0d\n      url = null;\x0d\n      doEval = 'classic';\x0d\n    } else if (isURLInstance(filename) && filename.protocol === 'data:') {\x0d\n      url = null;\x0d\n      doEval = 'module';\x0d\n      filename = `import ${JSONStringify(`${filename}`)}`;\x0d\n    } else {\x0d\n      doEval = false;\x0d\n      if (isURLInstance(filename)) {\x0d\n        url = filename;\x0d\n        filename = fileURLToPath(filename);\x0d\n      } else if (typeof filename !== 'string') {\x0d\n        throw new ERR_INVALID_ARG_TYPE(\x0d\n          'filename'\x2C\x0d\n          ['string'\x2C 'URL']\x2C\x0d\n          filename\x0d\n        );\x0d\n      } else if (path.isAbsolute(filename) ||\x0d\n                 RegExpPrototypeTest(/^\\.\\.?[\\\\/]/\x2C filename)) {\x0d\n        filename = path.resolve(filename);\x0d\n        url = pathToFileURL(filename);\x0d\n      } else {\x0d\n        throw new ERR_WORKER_PATH(filename);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let env;\x0d\n    if (typeof options.env === 'object' && options.env !== null) {\x0d\n      env = ObjectCreate(null);\x0d\n      ArrayPrototypeForEach(\x0d\n        ObjectEntries(options.env)\x2C\x0d\n        ({ 0: key\x2C 1: value }) => { env[key] = `${value}`; }\x0d\n      );\x0d\n    } else if (options.env == null) {\x0d\n      env = process.env;\x0d\n    } else if (options.env !== SHARE_ENV) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.env'\x2C\x0d\n        ['object'\x2C 'undefined'\x2C 'null'\x2C 'worker_threads.SHARE_ENV']\x2C\x0d\n        options.env);\x0d\n    }\x0d\n\x0d\n    // Set up the C++ handle for the worker\x2C as well as some internal wiring.\x0d\n    this[kHandle] = new WorkerImpl(url\x2C\x0d\n                                   env === process.env ? null : env\x2C\x0d\n                                   options.execArgv\x2C\x0d\n                                   parseResourceLimits(options.resourceLimits)\x2C\x0d\n                                   !!(options.trackUnmanagedFds ?? true));\x0d\n    if (this[kHandle].invalidExecArgv) {\x0d\n      throw new ERR_WORKER_INVALID_EXEC_ARGV(this[kHandle].invalidExecArgv);\x0d\n    }\x0d\n    if (this[kHandle].invalidNodeOptions) {\x0d\n      throw new ERR_WORKER_INVALID_EXEC_ARGV(\x0d\n        this[kHandle].invalidNodeOptions\x2C 'invalid NODE_OPTIONS env variable');\x0d\n    }\x0d\n    this[kHandle].onexit = (code\x2C customErr\x2C customErrReason) => {\x0d\n      this[kOnExit](code\x2C customErr\x2C customErrReason);\x0d\n    };\x0d\n    this[kPort] = this[kHandle].messagePort;\x0d\n    this[kPort].on('message'\x2C (data) => this[kOnMessage](data));\x0d\n    this[kPort].start();\x0d\n    this[kPort].unref();\x0d\n    this[kPort][kWaitingStreams] = 0;\x0d\n    debug(`[${threadId}] created Worker with ID ${this.threadId}`);\x0d\n\x0d\n    let stdin = null;\x0d\n    if (options.stdin)\x0d\n      stdin = new WritableWorkerStdio(this[kPort]\x2C 'stdin');\x0d\n    const stdout = new ReadableWorkerStdio(this[kPort]\x2C 'stdout');\x0d\n    if (!options.stdout) {\x0d\n      stdout[kIncrementsPortRef] = false;\x0d\n      pipeWithoutWarning(stdout\x2C process.stdout);\x0d\n    }\x0d\n    const stderr = new ReadableWorkerStdio(this[kPort]\x2C 'stderr');\x0d\n    if (!options.stderr) {\x0d\n      stderr[kIncrementsPortRef] = false;\x0d\n      pipeWithoutWarning(stderr\x2C process.stderr);\x0d\n    }\x0d\n\x0d\n    this[kParentSideStdio] = { stdin\x2C stdout\x2C stderr };\x0d\n\x0d\n    const { port1\x2C port2 } = new MessageChannel();\x0d\n    const transferList = [port2];\x0d\n    // If transferList is provided.\x0d\n    if (options.transferList)\x0d\n      ArrayPrototypePush(transferList\x2C\x0d\n                         ...new SafeArrayIterator(options.transferList));\x0d\n\x0d\n    this[kPublicPort] = port1;\x0d\n    ArrayPrototypeForEach(['message'\x2C 'messageerror']\x2C (event) => {\x0d\n      this[kPublicPort].on(event\x2C (message) => this.emit(event\x2C message));\x0d\n    });\x0d\n    setupPortReferencing(this[kPublicPort]\x2C this\x2C 'message');\x0d\n    this[kPort].postMessage({\x0d\n      argv\x2C\x0d\n      type: messageTypes.LOAD_SCRIPT\x2C\x0d\n      filename\x2C\x0d\n      doEval\x2C\x0d\n      cwdCounter: cwdCounter || workerIo.sharedCwdCounter\x2C\x0d\n      workerData: options.workerData\x2C\x0d\n      environmentData\x2C\x0d\n      publicPort: port2\x2C\x0d\n      manifestURL: getOptionValue('--experimental-policy') ?\x0d\n        require('internal/process/policy').url :\x0d\n        null\x2C\x0d\n      manifestSrc: getOptionValue('--experimental-policy') ?\x0d\n        require('internal/process/policy').src :\x0d\n        null\x2C\x0d\n      hasStdin: !!options.stdin\x0d\n    }\x2C transferList);\x0d\n    // Use this to cache the Worker's loopStart value once available.\x0d\n    this[kLoopStartTime] = -1;\x0d\n    this[kIsOnline] = false;\x0d\n    this.performance = {\x0d\n      eventLoopUtilization: FunctionPrototypeBind(eventLoopUtilization\x2C this)\x2C\x0d\n    };\x0d\n    // Actually start the new thread now that everything is in place.\x0d\n    this[kHandle].startThread();\x0d\n\x0d\n    process.nextTick(() => process.emit('worker'\x2C this));\x0d\n  }\x0d\n\x0d\n  [kOnExit](code\x2C customErr\x2C customErrReason) {\x0d\n    debug(`[${threadId}] hears end event for Worker ${this.threadId}`);\x0d\n    drainMessagePort(this[kPublicPort]);\x0d\n    drainMessagePort(this[kPort]);\x0d\n    this.removeAllListeners('message');\x0d\n    this.removeAllListeners('messageerrors');\x0d\n    this[kPublicPort].unref();\x0d\n    this[kPort].unref();\x0d\n    this[kDispose]();\x0d\n    if (customErr) {\x0d\n      debug(`[${threadId}] failing with custom error ${customErr} \\\x0d\n        and with reason ${customErrReason}`);\x0d\n      this.emit('error'\x2C new errorCodes[customErr](customErrReason));\x0d\n    }\x0d\n    this.emit('exit'\x2C code);\x0d\n    this.removeAllListeners();\x0d\n  }\x0d\n\x0d\n  [kOnCouldNotSerializeErr]() {\x0d\n    this.emit('error'\x2C new ERR_WORKER_UNSERIALIZABLE_ERROR());\x0d\n  }\x0d\n\x0d\n  [kOnErrorMessage](serialized) {\x0d\n    // This is what is called for uncaught exceptions.\x0d\n    const error = deserializeError(serialized);\x0d\n    this.emit('error'\x2C error);\x0d\n  }\x0d\n\x0d\n  [kOnMessage](message) {\x0d\n    switch (message.type) {\x0d\n      case messageTypes.UP_AND_RUNNING:\x0d\n        this[kIsOnline] = true;\x0d\n        return this.emit('online');\x0d\n      case messageTypes.COULD_NOT_SERIALIZE_ERROR:\x0d\n        return this[kOnCouldNotSerializeErr]();\x0d\n      case messageTypes.ERROR_MESSAGE:\x0d\n        return this[kOnErrorMessage](message.error);\x0d\n      case messageTypes.STDIO_PAYLOAD:\x0d\n      {\x0d\n        const { stream\x2C chunks } = message;\x0d\n        const readable = this[kParentSideStdio][stream];\x0d\n        ArrayPrototypeForEach(chunks\x2C ({ chunk\x2C encoding }) => {\x0d\n          readable.push(chunk\x2C encoding);\x0d\n        });\x0d\n        return;\x0d\n      }\x0d\n      case messageTypes.STDIO_WANTS_MORE_DATA:\x0d\n      {\x0d\n        const { stream } = message;\x0d\n        return this[kParentSideStdio][stream][kStdioWantsMoreDataCallback]();\x0d\n      }\x0d\n    }\x0d\n\x0d\n    assert.fail(`Unknown worker message type ${message.type}`);\x0d\n  }\x0d\n\x0d\n  [kDispose]() {\x0d\n    this[kHandle].onexit = null;\x0d\n    this[kHandle] = null;\x0d\n    this[kPort] = null;\x0d\n    this[kPublicPort] = null;\x0d\n\x0d\n    const { stdout\x2C stderr } = this[kParentSideStdio];\x0d\n\x0d\n    if (!stdout.readableEnded) {\x0d\n      debug(`[${threadId}] explicitly closes stdout for ${this.threadId}`);\x0d\n      stdout.push(null);\x0d\n    }\x0d\n    if (!stderr.readableEnded) {\x0d\n      debug(`[${threadId}] explicitly closes stderr for ${this.threadId}`);\x0d\n      stderr.push(null);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  postMessage(...args) {\x0d\n    if (this[kPublicPort] === null) return;\x0d\n\x0d\n    ReflectApply(this[kPublicPort].postMessage\x2C this[kPublicPort]\x2C args);\x0d\n  }\x0d\n\x0d\n  terminate(callback) {\x0d\n    debug(`[${threadId}] terminates Worker with ID ${this.threadId}`);\x0d\n\x0d\n    this.ref();\x0d\n\x0d\n    if (typeof callback === 'function') {\x0d\n      process.emitWarning(\x0d\n        'Passing a callback to worker.terminate() is deprecated. ' +\x0d\n        'It returns a Promise instead.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0132');\x0d\n      if (this[kHandle] === null) return PromiseResolve();\x0d\n      this.once('exit'\x2C (exitCode) => callback(null\x2C exitCode));\x0d\n    }\x0d\n\x0d\n    if (this[kHandle] === null) return PromiseResolve();\x0d\n\x0d\n    this[kHandle].stopThread();\x0d\n\x0d\n    // Do not use events.once() here\x2C because the 'exit' event will always be\x0d\n    // emitted regardless of any errors\x2C and the point is to only resolve\x0d\n    // once the thread has actually stopped.\x0d\n    return new Promise((resolve) => {\x0d\n      this.once('exit'\x2C resolve);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  ref() {\x0d\n    if (this[kHandle] === null) return;\x0d\n\x0d\n    this[kHandle].ref();\x0d\n    this[kPublicPort].ref();\x0d\n  }\x0d\n\x0d\n  unref() {\x0d\n    if (this[kHandle] === null) return;\x0d\n\x0d\n    this[kHandle].unref();\x0d\n    this[kPublicPort].unref();\x0d\n  }\x0d\n\x0d\n  get threadId() {\x0d\n    if (this[kHandle] === null) return -1;\x0d\n\x0d\n    return this[kHandle].threadId;\x0d\n  }\x0d\n\x0d\n  get stdin() {\x0d\n    return this[kParentSideStdio].stdin;\x0d\n  }\x0d\n\x0d\n  get stdout() {\x0d\n    return this[kParentSideStdio].stdout;\x0d\n  }\x0d\n\x0d\n  get stderr() {\x0d\n    return this[kParentSideStdio].stderr;\x0d\n  }\x0d\n\x0d\n  get resourceLimits() {\x0d\n    if (this[kHandle] === null) return {};\x0d\n\x0d\n    return makeResourceLimits(this[kHandle].getResourceLimits());\x0d\n  }\x0d\n\x0d\n  getHeapSnapshot() {\x0d\n    const heapSnapshotTaker = this[kHandle] && this[kHandle].takeHeapSnapshot();\x0d\n    return new Promise((resolve\x2C reject) => {\x0d\n      if (!heapSnapshotTaker) return reject(new ERR_WORKER_NOT_RUNNING());\x0d\n      heapSnapshotTaker.ondone = (handle) => {\x0d\n        const { HeapSnapshotStream } = require('internal/heap_utils');\x0d\n        resolve(new HeapSnapshotStream(handle));\x0d\n      };\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction pipeWithoutWarning(source\x2C dest) {\x0d\n  const sourceMaxListeners = source._maxListeners;\x0d\n  const destMaxListeners = dest._maxListeners;\x0d\n  source.setMaxListeners(Infinity);\x0d\n  dest.setMaxListeners(Infinity);\x0d\n\x0d\n  source.pipe(dest);\x0d\n\x0d\n  source._maxListeners = sourceMaxListeners;\x0d\n  dest._maxListeners = destMaxListeners;\x0d\n}\x0d\n\x0d\nconst resourceLimitsArray = new Float64Array(kTotalResourceLimitCount);\x0d\nfunction parseResourceLimits(obj) {\x0d\n  const ret = resourceLimitsArray;\x0d\n  TypedArrayPrototypeFill(ret\x2C -1);\x0d\n  if (typeof obj !== 'object' || obj === null) return ret;\x0d\n\x0d\n  if (typeof obj.maxOldGenerationSizeMb === 'number')\x0d\n    ret[kMaxOldGenerationSizeMb] = MathMax(obj.maxOldGenerationSizeMb\x2C 2);\x0d\n  if (typeof obj.maxYoungGenerationSizeMb === 'number')\x0d\n    ret[kMaxYoungGenerationSizeMb] = obj.maxYoungGenerationSizeMb;\x0d\n  if (typeof obj.codeRangeSizeMb === 'number')\x0d\n    ret[kCodeRangeSizeMb] = obj.codeRangeSizeMb;\x0d\n  if (typeof obj.stackSizeMb === 'number')\x0d\n    ret[kStackSizeMb] = obj.stackSizeMb;\x0d\n  return ret;\x0d\n}\x0d\n\x0d\nfunction makeResourceLimits(float64arr) {\x0d\n  return {\x0d\n    maxYoungGenerationSizeMb: float64arr[kMaxYoungGenerationSizeMb]\x2C\x0d\n    maxOldGenerationSizeMb: float64arr[kMaxOldGenerationSizeMb]\x2C\x0d\n    codeRangeSizeMb: float64arr[kCodeRangeSizeMb]\x2C\x0d\n    stackSizeMb: float64arr[kStackSizeMb]\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction eventLoopUtilization(util1\x2C util2) {\x0d\n  // TODO(trevnorris): Works to solve the thread-safe read/write issue of\x0d\n  // loopTime\x2C but has the drawback that it can't be set until the event loop\x0d\n  // has had a chance to turn. So it will be impossible to read the ELU of\x0d\n  // a worker thread immediately after it's been created.\x0d\n  if (!this[kIsOnline] || !this[kHandle]) {\x0d\n    return { idle: 0\x2C active: 0\x2C utilization: 0 };\x0d\n  }\x0d\n\x0d\n  // Cache loopStart\x2C since it's only written to once.\x0d\n  if (this[kLoopStartTime] === -1) {\x0d\n    this[kLoopStartTime] = this[kHandle].loopStartTime();\x0d\n    if (this[kLoopStartTime] === -1)\x0d\n      return { idle: 0\x2C active: 0\x2C utilization: 0 };\x0d\n  }\x0d\n\x0d\n  if (util2) {\x0d\n    const idle = util1.idle - util2.idle;\x0d\n    const active = util1.active - util2.active;\x0d\n    return { idle\x2C active\x2C utilization: active / (idle + active) };\x0d\n  }\x0d\n\x0d\n  const idle = this[kHandle].loopIdleTime();\x0d\n\x0d\n  // Using performance.now() here is fine since it's always the time from\x0d\n  // the beginning of the process\x2C and is why it needs to be offset by the\x0d\n  // loopStart time (which is also calculated from the beginning of the\x0d\n  // process).\x0d\n  const active = now() - this[kLoopStartTime] - idle;\x0d\n\x0d\n  if (!util1) {\x0d\n    return { idle\x2C active\x2C utilization: active / (idle + active) };\x0d\n  }\x0d\n\x0d\n  const idle_delta = idle - util1.idle;\x0d\n  const active_delta = active - util1.active;\x0d\n  const utilization = active_delta / (idle_delta + active_delta);\x0d\n  return { idle: idle_delta\x2C active: active_delta\x2C utilization };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ownsProcessState\x2C\x0d\n  isMainThread\x2C\x0d\n  SHARE_ENV\x2C\x0d\n  resourceLimits:\x0d\n    !isMainThread ? makeResourceLimits(resourceLimitsRaw) : {}\x2C\x0d\n  setEnvironmentData\x2C\x0d\n  getEnvironmentData\x2C\x0d\n  assignEnvironmentData\x2C\x0d\n  threadId\x2C\x0d\n  Worker\x2C\x0d\n};\x0d\n
code-source-info,0x3dde95f9d36,142,0,15857,C0O0C4O15857,,
code-creation,Function,10,205699,0x3dde95fb086,1185, node:internal/worker:1:1,0x3dde95f9cb0,~
code-source-info,0x3dde95fb086,142,0,15857,C0O0C244O28C250O54C256O76C262O99C267O116C273O142C279O160C285O172C291O189C297O207C303O219C309O238C315O255C321O279C327O301C332O313C338O324C343O335C348O349C354O377C365O407C371O416C376O479C384O479C389O514C397O514C401O514C403O556C411O556C415O556C417O590C425O590C431O582C437O644C445O644C451O670C455O644C457O859C461O690C467O717C473O737C479O773C485O806C491O831C497O899C505O899C511O880C517O948C525O948C529O948C531O1207C535O991C541O1012C547O1031C553O1048C559O1058C565O1081C571O1101C577O1133C583O1158C589O1182C595O1247C603O1247C609O1226C615O1338C623O1338C629O1290C635O1305C641O1320C647O1390C655O1390C661O1372C667O1674C671O1674C677O1436C682O1457C687O1490C692O1512C698O1533C704O1548C710O1578C716O1606C722O1627C728O1644C733O1720C737O1720C741O1720C743O1760C747O1760C751O1760C753O1801C757O1801C761O1801C763O1838C767O1838C771O1838C773O1877C777O1877C781O1877C783O1932C787O1932C791O1932C793O1992C797O1992C801O1992C803O2045C807O2045C811O2045C813O2097C817O2097C821O2097C823O2142C827O2142C831O2142C833O2184C837O2184C841O2184C843O2243C851O2243C857O2276C873O2277C879O2243C881O2333C882O2333C884O2372C886O2372C891O2372C893O2390C904O2413C910O2442C919O2426C924O2424C928O2494C934O2502C938O2494C940O2512C950O2526C956O3032C966O8230C976O8884C986O8988C996O9167C1006O10092C1092O13086C1094O13086C1099O13086C1101O15601C1109O15623C1115O15644C1121O15661C1130O15697C1136O15712C1149O15759C1155O15782C1161O15805C1167O15831C1173O15844C1179O15616C1184O15856,,
code-creation,Eval,10,206035,0x3dde95fcfce,5, node:internal/error_serdes:1:1,0x3dde95fcd08,~
script-source,143,node:internal/error_serdes,'use strict';\x0d\n\x0d\nconst Buffer = require('buffer').Buffer;\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Error\x2C\x0d\n  EvalError\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyNames\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeToString\x2C\x0d\n  RangeError\x2C\x0d\n  ReferenceError\x2C\x0d\n  SafeSet\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  SyntaxError\x2C\x0d\n  TypeError\x2C\x0d\n  URIError\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst kSerializedError = 0;\x0d\nconst kSerializedObject = 1;\x0d\nconst kInspectedError = 2;\x0d\n\x0d\nconst errors = {\x0d\n  Error\x2C TypeError\x2C RangeError\x2C URIError\x2C SyntaxError\x2C ReferenceError\x2C EvalError\x0d\n};\x0d\nconst errorConstructorNames = new SafeSet(ObjectKeys(errors));\x0d\n\x0d\nfunction TryGetAllProperties(object\x2C target = object) {\x0d\n  const all = ObjectCreate(null);\x0d\n  if (object === null)\x0d\n    return all;\x0d\n  ObjectAssign(all\x2C\x0d\n               TryGetAllProperties(ObjectGetPrototypeOf(object)\x2C target));\x0d\n  const keys = ObjectGetOwnPropertyNames(object);\x0d\n  ArrayPrototypeForEach(keys\x2C (key) => {\x0d\n    let descriptor;\x0d\n    try {\x0d\n      descriptor = ObjectGetOwnPropertyDescriptor(object\x2C key);\x0d\n    } catch { return; }\x0d\n    const getter = descriptor.get;\x0d\n    if (getter && key !== '__proto__') {\x0d\n      try {\x0d\n        descriptor.value = FunctionPrototypeCall(getter\x2C target);\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n    }\x0d\n    if ('value' in descriptor && typeof descriptor.value !== 'function') {\x0d\n      delete descriptor.get;\x0d\n      delete descriptor.set;\x0d\n      all[key] = descriptor;\x0d\n    }\x0d\n  });\x0d\n  return all;\x0d\n}\x0d\n\x0d\nfunction GetConstructors(object) {\x0d\n  const constructors = [];\x0d\n\x0d\n  for (let current = object;\x0d\n    current !== null;\x0d\n    current = ObjectGetPrototypeOf(current)) {\x0d\n    const desc = ObjectGetOwnPropertyDescriptor(current\x2C 'constructor');\x0d\n    if (desc && desc.value) {\x0d\n      ObjectDefineProperty(constructors\x2C constructors.length\x2C {\x0d\n        value: desc.value\x2C enumerable: true\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return constructors;\x0d\n}\x0d\n\x0d\nfunction GetName(object) {\x0d\n  const desc = ObjectGetOwnPropertyDescriptor(object\x2C 'name');\x0d\n  return desc && desc.value;\x0d\n}\x0d\n\x0d\nlet internalUtilInspect;\x0d\nfunction inspect(...args) {\x0d\n  if (!internalUtilInspect) {\x0d\n    internalUtilInspect = require('internal/util/inspect');\x0d\n  }\x0d\n  return internalUtilInspect.inspect(...args);\x0d\n}\x0d\n\x0d\nlet serialize;\x0d\nfunction serializeError(error) {\x0d\n  if (!serialize) serialize = require('v8').serialize;\x0d\n  try {\x0d\n    if (typeof error === 'object' &&\x0d\n        ObjectPrototypeToString(error) === '[object Error]') {\x0d\n      const constructors = GetConstructors(error);\x0d\n      for (let i = 0; i < constructors.length; i++) {\x0d\n        const name = GetName(constructors[i]);\x0d\n        if (errorConstructorNames.has(name)) {\x0d\n          const serialized = serialize({\x0d\n            constructor: name\x2C\x0d\n            properties: TryGetAllProperties(error)\x0d\n          });\x0d\n          return Buffer.concat([Buffer.from([kSerializedError])\x2C serialized]);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n  try {\x0d\n    const serialized = serialize(error);\x0d\n    return Buffer.concat([Buffer.from([kSerializedObject])\x2C serialized]);\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n  return Buffer.concat([Buffer.from([kInspectedError])\x2C\x0d\n                        Buffer.from(inspect(error)\x2C 'utf8')]);\x0d\n}\x0d\n\x0d\nlet deserialize;\x0d\nfunction deserializeError(error) {\x0d\n  if (!deserialize) deserialize = require('v8').deserialize;\x0d\n  switch (error[0]) {\x0d\n    case kSerializedError: {\x0d\n      const { constructor\x2C properties } = deserialize(error.subarray(1));\x0d\n      const ctor = errors[constructor];\x0d\n      ObjectDefineProperty(properties\x2C SymbolToStringTag\x2C {\x0d\n        value: { value: 'Error'\x2C configurable: true }\x2C\x0d\n        enumerable: true\x0d\n      });\x0d\n      return ObjectCreate(ctor.prototype\x2C properties);\x0d\n    }\x0d\n    case kSerializedObject:\x0d\n      return deserialize(error.subarray(1));\x0d\n    case kInspectedError: {\x0d\n      const buf = Buffer.from(error.buffer\x2C\x0d\n                              error.byteOffset + 1\x2C\x0d\n                              error.byteLength - 1);\x0d\n      return buf.toString('utf8');\x0d\n    }\x0d\n  }\x0d\n  require('assert').fail('This should not happen');\x0d\n}\x0d\n\x0d\nmodule.exports = { serializeError\x2C deserializeError };\x0d\n
code-source-info,0x3dde95fcfce,143,0,4324,C0O0C4O4324,,
code-creation,Function,10,206278,0x3dde95fd3ee,335, node:internal/error_serdes:1:1,0x3dde95fcf48,~
code-source-info,0x3dde95fd3ee,143,0,4324,C0O0C100O32C106O32C111O49C115O32C117O70C123O96C128O106C133O120C139O146C145O163C151O180C157O205C163O240C169O270C175O295C180O310C186O338C191O353C196O372C201O384C207O406C212O422C217O436C222O492C223O492C225O522C227O522C229O550C231O550C233O571C240O576C246O583C252O594C258O606C264O616C270O629C276O645C282O571C284O690C287O702C294O690C299O690C301O2171C302O2171C304O2376C305O2376C307O3408C308O3408C310O4268C317O4287C323O4303C329O4283C334O4323,,
tick,0x7ff7c11cf79f,206361,1,0x7ff7c02ae150,3,0x7ff7c0bf59a0,0x231d0e04e3b,0x231d0e048e5,0x3dde95fb2e1,0x231d0e04f03,0x231d0e048e5,0x3dde95f8db1,0x231d0e04f03,0x3dde95f154a,0x3dde95e73cb,0x3dde95d5ebe,0x3dde95d5af2,0x3dde95f1266,0x3dde95f8316,0x3dde95ec881,0x3dde95e889b,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,206603,0x3dde95fe78e,914,Socket node:net:285:16,0x2c63eb29728,~
code-source-info,0x3dde95fe78e
code-creation,LazyCompile,10,206804,0x3dde95fee5e,109,Duplex node:internal/streams/duplex:52:16,0x375c9f77fb0,~
script-source,55,node:internal/streams/duplex,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// a duplex stream is just a stream that is both readable and writable.\x0d\n// Since JS doesn't have multiple prototype inheritance\x2C this class\x0d\n// prototypically inherits from Readable\x2C and then parasitically from\x0d\n// Writable.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Duplex;\x0d\n\x0d\nconst Readable = require('internal/streams/readable');\x0d\nconst Writable = require('internal/streams/writable');\x0d\n\x0d\nObjectSetPrototypeOf(Duplex.prototype\x2C Readable.prototype);\x0d\nObjectSetPrototypeOf(Duplex\x2C Readable);\x0d\n\x0d\n{\x0d\n  // Allow the keys array to be GC'ed.\x0d\n  for (const method of ObjectKeys(Writable.prototype)) {\x0d\n    if (!Duplex.prototype[method])\x0d\n      Duplex.prototype[method] = Writable.prototype[method];\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction Duplex(options) {\x0d\n  if (!(this instanceof Duplex))\x0d\n    return new Duplex(options);\x0d\n\x0d\n  Readable.call(this\x2C options);\x0d\n  Writable.call(this\x2C options);\x0d\n  this.allowHalfOpen = true;\x0d\n\x0d\n  if (options) {\x0d\n    if (options.readable === false)\x0d\n      this.readable = false;\x0d\n\x0d\n    if (options.writable === false)\x0d\n      this.writable = false;\x0d\n\x0d\n    if (options.allowHalfOpen === false) {\x0d\n      this.allowHalfOpen = false;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(Duplex.prototype\x2C {\x0d\n  writable:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writable')\x2C\x0d\n  writableHighWaterMark:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableHighWaterMark')\x2C\x0d\n  writableObjectMode:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableObjectMode')\x2C\x0d\n  writableBuffer:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableBuffer')\x2C\x0d\n  writableLength:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableLength')\x2C\x0d\n  writableFinished:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableFinished')\x2C\x0d\n  writableCorked:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableCorked')\x2C\x0d\n  writableEnded:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableEnded')\x2C\x0d\n  writableNeedDrain:\x0d\n    ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableNeedDrain')\x2C\x0d\n\x0d\n  destroyed: {\x0d\n    get() {\x0d\n      if (this._readableState === undefined ||\x0d\n        this._writableState === undefined) {\x0d\n        return false;\x0d\n      }\x0d\n      return this._readableState.destroyed && this._writableState.destroyed;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // Backward compatibility\x2C the user is explicitly\x0d\n      // managing destroyed.\x0d\n      if (this._readableState && this._writableState) {\x0d\n        this._readableState.destroyed = value;\x0d\n        this._writableState.destroyed = value;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nlet duplexify;\x0d\n\x0d\nDuplex.from = function(body) {\x0d\n  if (!duplexify) {\x0d\n    duplexify = require('internal/streams/duplexify');\x0d\n  }\x0d\n  return duplexify(body\x2C 'body');\x0d\n};\x0d\n
code-source-info,0x3dde95fee5e,55,2002,2430,C0O2017C2O2028C7O2053C12O2060C17O2080C18O2086C23O2095C28O2095C34O2119C39O2128C44O2128C50O2152C51O2171C55O2184C59O2216C65O2225C70O2243C71O2257C75O2285C81O2294C86O2312C87O2326C91O2354C97O2368C102O2388C103O2407C108O2429,,
new,MemoryChunk,0xc761d00000,262144
code-creation,LazyCompile,10,207117,0x3dde95ff506,220,Readable node:internal/streams/readable:181:18,0x1074168c230,~
script-source,56,node:internal/streams/readable,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n  SymbolAsyncIterator\x2C\x0d\n  Symbol\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Readable;\x0d\nReadable.ReadableState = ReadableState;\x0d\n\x0d\nconst EE = require('events');\x0d\nconst { Stream\x2C prependListener } = require('internal/streams/legacy');\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  addAbortSignalNoValidate\x2C\x0d\n} = require('internal/streams/add-abort-signal');\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('stream'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst BufferList = require('internal/streams/buffer_list');\x0d\nconst destroyImpl = require('internal/streams/destroy');\x0d\nconst {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n} = require('internal/streams/state');\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_STREAM_PUSH_AFTER_EOF\x2C\x0d\n  ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT\x0d\n} = require('internal/errors').codes;\x0d\nconst { validateObject } = require('internal/validators');\x0d\n\x0d\nconst kPaused = Symbol('kPaused');\x0d\n\x0d\nconst { StringDecoder } = require('string_decoder');\x0d\nconst from = require('internal/streams/from');\x0d\n\x0d\nObjectSetPrototypeOf(Readable.prototype\x2C Stream.prototype);\x0d\nObjectSetPrototypeOf(Readable\x2C Stream);\x0d\nconst nop = () => {};\x0d\n\x0d\nconst { errorOrDestroy } = destroyImpl;\x0d\n\x0d\nfunction ReadableState(options\x2C stream\x2C isDuplex) {\x0d\n  // Duplex streams are both readable and writable\x2C but share\x0d\n  // the same options object.\x0d\n  // However\x2C some cases require setting options to different\x0d\n  // values for the readable and the writable sides of the duplex stream.\x0d\n  // These options can be provided separately as readableXXX and writableXXX.\x0d\n  if (typeof isDuplex !== 'boolean')\x0d\n    isDuplex = stream instanceof Stream.Duplex;\x0d\n\x0d\n  // Object stream flag. Used to make read(n) ignore n and to\x0d\n  // make all the buffer merging and length checks go away.\x0d\n  this.objectMode = !!(options && options.objectMode);\x0d\n\x0d\n  if (isDuplex)\x0d\n    this.objectMode = this.objectMode ||\x0d\n      !!(options && options.readableObjectMode);\x0d\n\x0d\n  // The point at which it stops calling _read() to fill the buffer\x0d\n  // Note: 0 is a valid value\x2C means "don't call _read preemptively ever"\x0d\n  this.highWaterMark = options ?\x0d\n    getHighWaterMark(this\x2C options\x2C 'readableHighWaterMark'\x2C isDuplex) :\x0d\n    getDefaultHighWaterMark(false);\x0d\n\x0d\n  // A linked list is used to store data chunks instead of an array because the\x0d\n  // linked list can remove elements from the beginning faster than\x0d\n  // array.shift().\x0d\n  this.buffer = new BufferList();\x0d\n  this.length = 0;\x0d\n  this.pipes = [];\x0d\n  this.flowing = null;\x0d\n  this.ended = false;\x0d\n  this.endEmitted = false;\x0d\n  this.reading = false;\x0d\n\x0d\n  // Stream is still being constructed and cannot be\x0d\n  // destroyed until construction finished or failed.\x0d\n  // Async construction is opt in\x2C therefore we start as\x0d\n  // constructed.\x0d\n  this.constructed = true;\x0d\n\x0d\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\x0d\n  // immediately\x2C or on a later tick.  We set this to true at first\x2C because\x0d\n  // any actions that shouldn't happen until "later" should generally also\x0d\n  // not happen before the first read call.\x0d\n  this.sync = true;\x0d\n\x0d\n  // Whenever we return null\x2C then we set a flag to say\x0d\n  // that we're awaiting a 'readable' event emission.\x0d\n  this.needReadable = false;\x0d\n  this.emittedReadable = false;\x0d\n  this.readableListening = false;\x0d\n  this.resumeScheduled = false;\x0d\n  this[kPaused] = null;\x0d\n\x0d\n  // True if the error was already emitted and should not be thrown again.\x0d\n  this.errorEmitted = false;\x0d\n\x0d\n  // Should close be emitted on destroy. Defaults to true.\x0d\n  this.emitClose = !options || options.emitClose !== false;\x0d\n\x0d\n  // Should .destroy() be called after 'end' (and potentially 'finish').\x0d\n  this.autoDestroy = !options || options.autoDestroy !== false;\x0d\n\x0d\n  // Has it been destroyed.\x0d\n  this.destroyed = false;\x0d\n\x0d\n  // Indicates whether the stream has errored. When true no further\x0d\n  // _read calls\x2C 'data' or 'readable' events should occur. This is needed\x0d\n  // since when autoDestroy is disabled we need a way to tell whether the\x0d\n  // stream has failed.\x0d\n  this.errored = null;\x0d\n\x0d\n  // Indicates whether the stream has finished destroying.\x0d\n  this.closed = false;\x0d\n\x0d\n  // True if close has been emitted or would have been emitted\x0d\n  // depending on emitClose.\x0d\n  this.closeEmitted = false;\x0d\n\x0d\n  // Crypto is kind of old and crusty.  Historically\x2C its default string\x0d\n  // encoding is 'binary' so we have to make this configurable.\x0d\n  // Everything else in the universe uses 'utf8'\x2C though.\x0d\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\x0d\n\x0d\n  // Ref the piped dest which we need a drain event on it\x0d\n  // type: null | Writable | Set<Writable>.\x0d\n  this.awaitDrainWriters = null;\x0d\n  this.multiAwaitDrain = false;\x0d\n\x0d\n  // If true\x2C a maybeReadMore has been scheduled.\x0d\n  this.readingMore = false;\x0d\n\x0d\n  this.dataEmitted = false;\x0d\n\x0d\n  this.decoder = null;\x0d\n  this.encoding = null;\x0d\n  if (options && options.encoding) {\x0d\n    this.decoder = new StringDecoder(options.encoding);\x0d\n    this.encoding = options.encoding;\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction Readable(options) {\x0d\n  if (!(this instanceof Readable))\x0d\n    return new Readable(options);\x0d\n\x0d\n  // Checking for a Stream.Duplex instance is faster here instead of inside\x0d\n  // the ReadableState constructor\x2C at least with V8 6.5.\x0d\n  const isDuplex = this instanceof Stream.Duplex;\x0d\n\x0d\n  this._readableState = new ReadableState(options\x2C this\x2C isDuplex);\x0d\n\x0d\n  if (options) {\x0d\n    if (typeof options.read === 'function')\x0d\n      this._read = options.read;\x0d\n\x0d\n    if (typeof options.destroy === 'function')\x0d\n      this._destroy = options.destroy;\x0d\n\x0d\n    if (typeof options.construct === 'function')\x0d\n      this._construct = options.construct;\x0d\n    if (options.signal && !isDuplex)\x0d\n      addAbortSignalNoValidate(options.signal\x2C this);\x0d\n  }\x0d\n\x0d\n  Stream.call(this\x2C options);\x0d\n\x0d\n  destroyImpl.construct(this\x2C () => {\x0d\n    if (this._readableState.needReadable) {\x0d\n      maybeReadMore(this\x2C this._readableState);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nReadable.prototype.destroy = destroyImpl.destroy;\x0d\nReadable.prototype._undestroy = destroyImpl.undestroy;\x0d\nReadable.prototype._destroy = function(err\x2C cb) {\x0d\n  cb(err);\x0d\n};\x0d\n\x0d\nReadable.prototype[EE.captureRejectionSymbol] = function(err) {\x0d\n  this.destroy(err);\x0d\n};\x0d\n\x0d\n// Manually shove something into the read() buffer.\x0d\n// This returns true if the highWaterMark has not been hit yet\x2C\x0d\n// similar to how Writable.write() returns true if you should\x0d\n// write() some more.\x0d\nReadable.prototype.push = function(chunk\x2C encoding) {\x0d\n  return readableAddChunk(this\x2C chunk\x2C encoding\x2C false);\x0d\n};\x0d\n\x0d\n// Unshift should *always* be something directly out of read().\x0d\nReadable.prototype.unshift = function(chunk\x2C encoding) {\x0d\n  return readableAddChunk(this\x2C chunk\x2C encoding\x2C true);\x0d\n};\x0d\n\x0d\nfunction readableAddChunk(stream\x2C chunk\x2C encoding\x2C addToFront) {\x0d\n  debug('readableAddChunk'\x2C chunk);\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  let err;\x0d\n  if (!state.objectMode) {\x0d\n    if (typeof chunk === 'string') {\x0d\n      encoding = encoding || state.defaultEncoding;\x0d\n      if (state.encoding !== encoding) {\x0d\n        if (addToFront && state.encoding) {\x0d\n          // When unshifting\x2C if state.encoding is set\x2C we have to save\x0d\n          // the string in the BufferList with the state encoding.\x0d\n          chunk = Buffer.from(chunk\x2C encoding).toString(state.encoding);\x0d\n        } else {\x0d\n          chunk = Buffer.from(chunk\x2C encoding);\x0d\n          encoding = '';\x0d\n        }\x0d\n      }\x0d\n    } else if (chunk instanceof Buffer) {\x0d\n      encoding = '';\x0d\n    } else if (Stream._isUint8Array(chunk)) {\x0d\n      chunk = Stream._uint8ArrayToBuffer(chunk);\x0d\n      encoding = '';\x0d\n    } else if (chunk != null) {\x0d\n      err = new ERR_INVALID_ARG_TYPE(\x0d\n        'chunk'\x2C ['string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C chunk);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    errorOrDestroy(stream\x2C err);\x0d\n  } else if (chunk === null) {\x0d\n    state.reading = false;\x0d\n    onEofChunk(stream\x2C state);\x0d\n  } else if (state.objectMode || (chunk && chunk.length > 0)) {\x0d\n    if (addToFront) {\x0d\n      if (state.endEmitted)\x0d\n        errorOrDestroy(stream\x2C new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\x0d\n      else\x0d\n        addChunk(stream\x2C state\x2C chunk\x2C true);\x0d\n    } else if (state.ended) {\x0d\n      errorOrDestroy(stream\x2C new ERR_STREAM_PUSH_AFTER_EOF());\x0d\n    } else if (state.destroyed || state.errored) {\x0d\n      return false;\x0d\n    } else {\x0d\n      state.reading = false;\x0d\n      if (state.decoder && !encoding) {\x0d\n        chunk = state.decoder.write(chunk);\x0d\n        if (state.objectMode || chunk.length !== 0)\x0d\n          addChunk(stream\x2C state\x2C chunk\x2C false);\x0d\n        else\x0d\n          maybeReadMore(stream\x2C state);\x0d\n      } else {\x0d\n        addChunk(stream\x2C state\x2C chunk\x2C false);\x0d\n      }\x0d\n    }\x0d\n  } else if (!addToFront) {\x0d\n    state.reading = false;\x0d\n    maybeReadMore(stream\x2C state);\x0d\n  }\x0d\n\x0d\n  // We can push more data if we are below the highWaterMark.\x0d\n  // Also\x2C if we have no data yet\x2C we can stand some more bytes.\x0d\n  // This is to work around cases where hwm=0\x2C such as the repl.\x0d\n  return !state.ended &&\x0d\n    (state.length < state.highWaterMark || state.length === 0);\x0d\n}\x0d\n\x0d\nfunction addChunk(stream\x2C state\x2C chunk\x2C addToFront) {\x0d\n  if (state.flowing && state.length === 0 && !state.sync &&\x0d\n      stream.listenerCount('data') > 0) {\x0d\n    // Use the guard to avoid creating `Set()` repeatedly\x0d\n    // when we have multiple pipes.\x0d\n    if (state.multiAwaitDrain) {\x0d\n      state.awaitDrainWriters.clear();\x0d\n    } else {\x0d\n      state.awaitDrainWriters = null;\x0d\n    }\x0d\n    state.dataEmitted = true;\x0d\n    stream.emit('data'\x2C chunk);\x0d\n  } else {\x0d\n    // Update the buffer info.\x0d\n    state.length += state.objectMode ? 1 : chunk.length;\x0d\n    if (addToFront)\x0d\n      state.buffer.unshift(chunk);\x0d\n    else\x0d\n      state.buffer.push(chunk);\x0d\n\x0d\n    if (state.needReadable)\x0d\n      emitReadable(stream);\x0d\n  }\x0d\n  maybeReadMore(stream\x2C state);\x0d\n}\x0d\n\x0d\nReadable.prototype.isPaused = function() {\x0d\n  const state = this._readableState;\x0d\n  return state[kPaused] === true || state.flowing === false;\x0d\n};\x0d\n\x0d\n// Backwards compatibility.\x0d\nReadable.prototype.setEncoding = function(enc) {\x0d\n  const decoder = new StringDecoder(enc);\x0d\n  this._readableState.decoder = decoder;\x0d\n  // If setEncoding(null)\x2C decoder.encoding equals utf8.\x0d\n  this._readableState.encoding = this._readableState.decoder.encoding;\x0d\n\x0d\n  const buffer = this._readableState.buffer;\x0d\n  // Iterate over current buffer to convert already stored Buffers:\x0d\n  let content = '';\x0d\n  for (const data of buffer) {\x0d\n    content += decoder.write(data);\x0d\n  }\x0d\n  buffer.clear();\x0d\n  if (content !== '')\x0d\n    buffer.push(content);\x0d\n  this._readableState.length = content.length;\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// Don't raise the hwm > 1GB.\x0d\nconst MAX_HWM = 0x40000000;\x0d\nfunction computeNewHighWaterMark(n) {\x0d\n  if (n >= MAX_HWM) {\x0d\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\x0d\n    n = MAX_HWM;\x0d\n  } else {\x0d\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\x0d\n    // tiny amounts.\x0d\n    n--;\x0d\n    n |= n >>> 1;\x0d\n    n |= n >>> 2;\x0d\n    n |= n >>> 4;\x0d\n    n |= n >>> 8;\x0d\n    n |= n >>> 16;\x0d\n    n++;\x0d\n  }\x0d\n  return n;\x0d\n}\x0d\n\x0d\n// This function is designed to be inlinable\x2C so please take care when making\x0d\n// changes to the function body.\x0d\nfunction howMuchToRead(n\x2C state) {\x0d\n  if (n <= 0 || (state.length === 0 && state.ended))\x0d\n    return 0;\x0d\n  if (state.objectMode)\x0d\n    return 1;\x0d\n  if (NumberIsNaN(n)) {\x0d\n    // Only flow one buffer at a time.\x0d\n    if (state.flowing && state.length)\x0d\n      return state.buffer.first().length;\x0d\n    return state.length;\x0d\n  }\x0d\n  if (n <= state.length)\x0d\n    return n;\x0d\n  return state.ended ? state.length : 0;\x0d\n}\x0d\n\x0d\n// You can override either this method\x2C or the async _read(n) below.\x0d\nReadable.prototype.read = function(n) {\x0d\n  debug('read'\x2C n);\x0d\n  // Same as parseInt(undefined\x2C 10)\x2C however V8 7.3 performance regressed\x0d\n  // in this scenario\x2C so we are doing it manually.\x0d\n  if (n === undefined) {\x0d\n    n = NaN;\x0d\n  } else if (!NumberIsInteger(n)) {\x0d\n    n = NumberParseInt(n\x2C 10);\x0d\n  }\x0d\n  const state = this._readableState;\x0d\n  const nOrig = n;\x0d\n\x0d\n  // If we're asking for more than the current hwm\x2C then raise the hwm.\x0d\n  if (n > state.highWaterMark)\x0d\n    state.highWaterMark = computeNewHighWaterMark(n);\x0d\n\x0d\n  if (n !== 0)\x0d\n    state.emittedReadable = false;\x0d\n\x0d\n  // If we're doing read(0) to trigger a readable event\x2C but we\x0d\n  // already have a bunch of data in the buffer\x2C then just trigger\x0d\n  // the 'readable' event and move on.\x0d\n  if (n === 0 &&\x0d\n      state.needReadable &&\x0d\n      ((state.highWaterMark !== 0 ?\x0d\n        state.length >= state.highWaterMark :\x0d\n        state.length > 0) ||\x0d\n       state.ended)) {\x0d\n    debug('read: emitReadable'\x2C state.length\x2C state.ended);\x0d\n    if (state.length === 0 && state.ended)\x0d\n      endReadable(this);\x0d\n    else\x0d\n      emitReadable(this);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  n = howMuchToRead(n\x2C state);\x0d\n\x0d\n  // If we've ended\x2C and we're now clear\x2C then finish it up.\x0d\n  if (n === 0 && state.ended) {\x0d\n    if (state.length === 0)\x0d\n      endReadable(this);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  // All the actual chunk generation logic needs to be\x0d\n  // *below* the call to _read.  The reason is that in certain\x0d\n  // synthetic stream cases\x2C such as passthrough streams\x2C _read\x0d\n  // may be a completely synchronous operation which may change\x0d\n  // the state of the read buffer\x2C providing enough data when\x0d\n  // before there was *not* enough.\x0d\n  //\x0d\n  // So\x2C the steps are:\x0d\n  // 1. Figure out what the state of things will be after we do\x0d\n  // a read from the buffer.\x0d\n  //\x0d\n  // 2. If that resulting state will trigger a _read\x2C then call _read.\x0d\n  // Note that this may be asynchronous\x2C or synchronous.  Yes\x2C it is\x0d\n  // deeply ugly to write APIs this way\x2C but that still doesn't mean\x0d\n  // that the Readable class should behave improperly\x2C as streams are\x0d\n  // designed to be sync/async agnostic.\x0d\n  // Take note if the _read call is sync or async (ie\x2C if the read call\x0d\n  // has returned yet)\x2C so that we know whether or not it's safe to emit\x0d\n  // 'readable' etc.\x0d\n  //\x0d\n  // 3. Actually pull the requested chunks out of the buffer and return.\x0d\n\x0d\n  // if we need a readable event\x2C then we need to do some reading.\x0d\n  let doRead = state.needReadable;\x0d\n  debug('need readable'\x2C doRead);\x0d\n\x0d\n  // If we currently have less than the highWaterMark\x2C then also read some.\x0d\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\x0d\n    doRead = true;\x0d\n    debug('length less than watermark'\x2C doRead);\x0d\n  }\x0d\n\x0d\n  // However\x2C if we've ended\x2C then there's no point\x2C if we're already\x0d\n  // reading\x2C then it's unnecessary\x2C if we're constructing we have to wait\x2C\x0d\n  // and if we're destroyed or errored\x2C then it's not allowed\x2C\x0d\n  if (state.ended || state.reading || state.destroyed || state.errored ||\x0d\n      !state.constructed) {\x0d\n    doRead = false;\x0d\n    debug('reading\x2C ended or constructing'\x2C doRead);\x0d\n  } else if (doRead) {\x0d\n    debug('do read');\x0d\n    state.reading = true;\x0d\n    state.sync = true;\x0d\n    // If the length is currently zero\x2C then we *need* a readable event.\x0d\n    if (state.length === 0)\x0d\n      state.needReadable = true;\x0d\n\x0d\n    // Call internal read method\x0d\n    this._read(state.highWaterMark);\x0d\n\x0d\n    state.sync = false;\x0d\n    // If _read pushed data synchronously\x2C then `reading` will be false\x2C\x0d\n    // and we need to re-evaluate how much data we can return to the user.\x0d\n    if (!state.reading)\x0d\n      n = howMuchToRead(nOrig\x2C state);\x0d\n  }\x0d\n\x0d\n  let ret;\x0d\n  if (n > 0)\x0d\n    ret = fromList(n\x2C state);\x0d\n  else\x0d\n    ret = null;\x0d\n\x0d\n  if (ret === null) {\x0d\n    state.needReadable = state.length <= state.highWaterMark;\x0d\n    n = 0;\x0d\n  } else {\x0d\n    state.length -= n;\x0d\n    if (state.multiAwaitDrain) {\x0d\n      state.awaitDrainWriters.clear();\x0d\n    } else {\x0d\n      state.awaitDrainWriters = null;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (state.length === 0) {\x0d\n    // If we have nothing in the buffer\x2C then we want to know\x0d\n    // as soon as we *do* get something into the buffer.\x0d\n    if (!state.ended)\x0d\n      state.needReadable = true;\x0d\n\x0d\n    // If we tried to read() past the EOF\x2C then emit end on the next tick.\x0d\n    if (nOrig !== n && state.ended)\x0d\n      endReadable(this);\x0d\n  }\x0d\n\x0d\n  if (ret !== null) {\x0d\n    state.dataEmitted = true;\x0d\n    this.emit('data'\x2C ret);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n};\x0d\n\x0d\nfunction onEofChunk(stream\x2C state) {\x0d\n  debug('onEofChunk');\x0d\n  if (state.ended) return;\x0d\n  if (state.decoder) {\x0d\n    const chunk = state.decoder.end();\x0d\n    if (chunk && chunk.length) {\x0d\n      state.buffer.push(chunk);\x0d\n      state.length += state.objectMode ? 1 : chunk.length;\x0d\n    }\x0d\n  }\x0d\n  state.ended = true;\x0d\n\x0d\n  if (state.sync) {\x0d\n    // If we are sync\x2C wait until next tick to emit the data.\x0d\n    // Otherwise we risk emitting data in the flow()\x0d\n    // the readable code triggers during a read() call.\x0d\n    emitReadable(stream);\x0d\n  } else {\x0d\n    // Emit 'readable' now to make sure it gets picked up.\x0d\n    state.needReadable = false;\x0d\n    state.emittedReadable = true;\x0d\n    // We have to emit readable now that we are EOF. Modules\x0d\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\x0d\n    emitReadable_(stream);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Don't emit readable right away in sync mode\x2C because this can trigger\x0d\n// another read() call => stack overflow.  This way\x2C it might trigger\x0d\n// a nextTick recursion warning\x2C but that's not so bad.\x0d\nfunction emitReadable(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('emitReadable'\x2C state.needReadable\x2C state.emittedReadable);\x0d\n  state.needReadable = false;\x0d\n  if (!state.emittedReadable) {\x0d\n    debug('emitReadable'\x2C state.flowing);\x0d\n    state.emittedReadable = true;\x0d\n    process.nextTick(emitReadable_\x2C stream);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitReadable_(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('emitReadable_'\x2C state.destroyed\x2C state.length\x2C state.ended);\x0d\n  if (!state.destroyed && !state.errored && (state.length || state.ended)) {\x0d\n    stream.emit('readable');\x0d\n    state.emittedReadable = false;\x0d\n  }\x0d\n\x0d\n  // The stream needs another readable event if:\x0d\n  // 1. It is not flowing\x2C as the flow mechanism will take\x0d\n  //    care of it.\x0d\n  // 2. It is not ended.\x0d\n  // 3. It is below the highWaterMark\x2C so we can schedule\x0d\n  //    another readable later.\x0d\n  state.needReadable =\x0d\n    !state.flowing &&\x0d\n    !state.ended &&\x0d\n    state.length <= state.highWaterMark;\x0d\n  flow(stream);\x0d\n}\x0d\n\x0d\n\x0d\n// At this point\x2C the user has presumably seen the 'readable' event\x2C\x0d\n// and called read() to consume some data.  that may have triggered\x0d\n// in turn another _read(n) call\x2C in which case reading = true if\x0d\n// it's in progress.\x0d\n// However\x2C if we're not ended\x2C or reading\x2C and the length < hwm\x2C\x0d\n// then go ahead and try to read some more preemptively.\x0d\nfunction maybeReadMore(stream\x2C state) {\x0d\n  if (!state.readingMore && state.constructed) {\x0d\n    state.readingMore = true;\x0d\n    process.nextTick(maybeReadMore_\x2C stream\x2C state);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeReadMore_(stream\x2C state) {\x0d\n  // Attempt to read more data if we should.\x0d\n  //\x0d\n  // The conditions for reading more data are (one of):\x0d\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\x0d\n  //   is responsible for filling the buffer with enough data if such data\x0d\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\x0d\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\x0d\n  //   when the stream consumer calls read() instead.\x0d\n  // - No data in the buffer\x2C and the stream is in flowing mode. In this mode\x0d\n  //   the loop below is responsible for ensuring read() is called. Failing to\x0d\n  //   call read here would abort the flow and there's no other mechanism for\x0d\n  //   continuing the flow if the stream consumer has just subscribed to the\x0d\n  //   'data' event.\x0d\n  //\x0d\n  // In addition to the above conditions to keep reading data\x2C the following\x0d\n  // conditions prevent the data from being read:\x0d\n  // - The stream has ended (state.ended).\x0d\n  // - There is already a pending 'read' operation (state.reading). This is a\x0d\n  //   case where the stream has called the implementation defined _read()\x0d\n  //   method\x2C but they are processing the call asynchronously and have _not_\x0d\n  //   called push() with new data. In this case we skip performing more\x0d\n  //   read()s. The execution ends in this method again after the _read() ends\x0d\n  //   up calling push() with more data.\x0d\n  while (!state.reading && !state.ended &&\x0d\n         (state.length < state.highWaterMark ||\x0d\n          (state.flowing && state.length === 0))) {\x0d\n    const len = state.length;\x0d\n    debug('maybeReadMore read 0');\x0d\n    stream.read(0);\x0d\n    if (len === state.length)\x0d\n      // Didn't get any data\x2C stop spinning.\x0d\n      break;\x0d\n  }\x0d\n  state.readingMore = false;\x0d\n}\x0d\n\x0d\n// Abstract method.  to be overridden in specific implementation classes.\x0d\n// call cb(er\x2C data) where data is <= n in length.\x0d\n// for virtual (non-string\x2C non-buffer) streams\x2C "length" is somewhat\x0d\n// arbitrary\x2C and perhaps not very meaningful.\x0d\nReadable.prototype._read = function(n) {\x0d\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()');\x0d\n};\x0d\n\x0d\nReadable.prototype.pipe = function(dest\x2C pipeOpts) {\x0d\n  const src = this;\x0d\n  const state = this._readableState;\x0d\n\x0d\n  if (state.pipes.length === 1) {\x0d\n    if (!state.multiAwaitDrain) {\x0d\n      state.multiAwaitDrain = true;\x0d\n      state.awaitDrainWriters = new SafeSet(\x0d\n        state.awaitDrainWriters ? [state.awaitDrainWriters] : []\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n\x0d\n  state.pipes.push(dest);\x0d\n  debug('pipe count=%d opts=%j'\x2C state.pipes.length\x2C pipeOpts);\x0d\n\x0d\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) &&\x0d\n              dest !== process.stdout &&\x0d\n              dest !== process.stderr;\x0d\n\x0d\n  const endFn = doEnd ? onend : unpipe;\x0d\n  if (state.endEmitted)\x0d\n    process.nextTick(endFn);\x0d\n  else\x0d\n    src.once('end'\x2C endFn);\x0d\n\x0d\n  dest.on('unpipe'\x2C onunpipe);\x0d\n  function onunpipe(readable\x2C unpipeInfo) {\x0d\n    debug('onunpipe');\x0d\n    if (readable === src) {\x0d\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\x0d\n        unpipeInfo.hasUnpiped = true;\x0d\n        cleanup();\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function onend() {\x0d\n    debug('onend');\x0d\n    dest.end();\x0d\n  }\x0d\n\x0d\n  let ondrain;\x0d\n\x0d\n  let cleanedUp = false;\x0d\n  function cleanup() {\x0d\n    debug('cleanup');\x0d\n    // Cleanup event handlers once the pipe is broken.\x0d\n    dest.removeListener('close'\x2C onclose);\x0d\n    dest.removeListener('finish'\x2C onfinish);\x0d\n    if (ondrain) {\x0d\n      dest.removeListener('drain'\x2C ondrain);\x0d\n    }\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n    dest.removeListener('unpipe'\x2C onunpipe);\x0d\n    src.removeListener('end'\x2C onend);\x0d\n    src.removeListener('end'\x2C unpipe);\x0d\n    src.removeListener('data'\x2C ondata);\x0d\n\x0d\n    cleanedUp = true;\x0d\n\x0d\n    // If the reader is waiting for a drain event from this\x0d\n    // specific writer\x2C then it would cause it to never start\x0d\n    // flowing again.\x0d\n    // So\x2C if this is awaiting a drain\x2C then we just call it now.\x0d\n    // If we don't know\x2C then assume that we are waiting for one.\x0d\n    if (ondrain && state.awaitDrainWriters &&\x0d\n        (!dest._writableState || dest._writableState.needDrain))\x0d\n      ondrain();\x0d\n  }\x0d\n\x0d\n  function pause() {\x0d\n    // If the user unpiped during `dest.write()`\x2C it is possible\x0d\n    // to get stuck in a permanently paused state if that write\x0d\n    // also returned false.\x0d\n    // => Check whether `dest` is still a piping destination.\x0d\n    if (!cleanedUp) {\x0d\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\x0d\n        debug('false write response\x2C pause'\x2C 0);\x0d\n        state.awaitDrainWriters = dest;\x0d\n        state.multiAwaitDrain = false;\x0d\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\x0d\n        debug('false write response\x2C pause'\x2C state.awaitDrainWriters.size);\x0d\n        state.awaitDrainWriters.add(dest);\x0d\n      }\x0d\n      src.pause();\x0d\n    }\x0d\n    if (!ondrain) {\x0d\n      // When the dest drains\x2C it reduces the awaitDrain counter\x0d\n      // on the source.  This would be more elegant with a .once()\x0d\n      // handler in flow()\x2C but adding and removing repeatedly is\x0d\n      // too slow.\x0d\n      ondrain = pipeOnDrain(src\x2C dest);\x0d\n      dest.on('drain'\x2C ondrain);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  src.on('data'\x2C ondata);\x0d\n  function ondata(chunk) {\x0d\n    debug('ondata');\x0d\n    const ret = dest.write(chunk);\x0d\n    debug('dest.write'\x2C ret);\x0d\n    if (ret === false) {\x0d\n      pause();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // If the dest has an error\x2C then stop piping into it.\x0d\n  // However\x2C don't suppress the throwing behavior for this.\x0d\n  function onerror(er) {\x0d\n    debug('onerror'\x2C er);\x0d\n    unpipe();\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n    if (EE.listenerCount(dest\x2C 'error') === 0) {\x0d\n      const s = dest._writableState || dest._readableState;\x0d\n      if (s && !s.errorEmitted) {\x0d\n        // User incorrectly emitted 'error' directly on the stream.\x0d\n        errorOrDestroy(dest\x2C er);\x0d\n      } else {\x0d\n        dest.emit('error'\x2C er);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Make sure our error handler is attached before userland ones.\x0d\n  prependListener(dest\x2C 'error'\x2C onerror);\x0d\n\x0d\n  // Both close and finish should trigger unpipe\x2C but only once.\x0d\n  function onclose() {\x0d\n    dest.removeListener('finish'\x2C onfinish);\x0d\n    unpipe();\x0d\n  }\x0d\n  dest.once('close'\x2C onclose);\x0d\n  function onfinish() {\x0d\n    debug('onfinish');\x0d\n    dest.removeListener('close'\x2C onclose);\x0d\n    unpipe();\x0d\n  }\x0d\n  dest.once('finish'\x2C onfinish);\x0d\n\x0d\n  function unpipe() {\x0d\n    debug('unpipe');\x0d\n    src.unpipe(dest);\x0d\n  }\x0d\n\x0d\n  // Tell the dest that it's being piped to.\x0d\n  dest.emit('pipe'\x2C src);\x0d\n\x0d\n  // Start the flow if it hasn't been started already.\x0d\n\x0d\n  if (dest.writableNeedDrain === true) {\x0d\n    if (state.flowing) {\x0d\n      pause();\x0d\n    }\x0d\n  } else if (!state.flowing) {\x0d\n    debug('pipe resume');\x0d\n    src.resume();\x0d\n  }\x0d\n\x0d\n  return dest;\x0d\n};\x0d\n\x0d\nfunction pipeOnDrain(src\x2C dest) {\x0d\n  return function pipeOnDrainFunctionResult() {\x0d\n    const state = src._readableState;\x0d\n\x0d\n    // `ondrain` will call directly\x2C\x0d\n    // `this` maybe not a reference to dest\x2C\x0d\n    // so we use the real dest here.\x0d\n    if (state.awaitDrainWriters === dest) {\x0d\n      debug('pipeOnDrain'\x2C 1);\x0d\n      state.awaitDrainWriters = null;\x0d\n    } else if (state.multiAwaitDrain) {\x0d\n      debug('pipeOnDrain'\x2C state.awaitDrainWriters.size);\x0d\n      state.awaitDrainWriters.delete(dest);\x0d\n    }\x0d\n\x0d\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) &&\x0d\n      EE.listenerCount(src\x2C 'data')) {\x0d\n      src.resume();\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\n\x0d\nReadable.prototype.unpipe = function(dest) {\x0d\n  const state = this._readableState;\x0d\n  const unpipeInfo = { hasUnpiped: false };\x0d\n\x0d\n  // If we're not piping anywhere\x2C then do nothing.\x0d\n  if (state.pipes.length === 0)\x0d\n    return this;\x0d\n\x0d\n  if (!dest) {\x0d\n    // remove all.\x0d\n    const dests = state.pipes;\x0d\n    state.pipes = [];\x0d\n    this.pause();\x0d\n\x0d\n    for (let i = 0; i < dests.length; i++)\x0d\n      dests[i].emit('unpipe'\x2C this\x2C { hasUnpiped: false });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Try to find the right one.\x0d\n  const index = ArrayPrototypeIndexOf(state.pipes\x2C dest);\x0d\n  if (index === -1)\x0d\n    return this;\x0d\n\x0d\n  state.pipes.splice(index\x2C 1);\x0d\n  if (state.pipes.length === 0)\x0d\n    this.pause();\x0d\n\x0d\n  dest.emit('unpipe'\x2C this\x2C unpipeInfo);\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// Set up data events if they are asked for\x0d\n// Ensure readable listeners eventually get something.\x0d\nReadable.prototype.on = function(ev\x2C fn) {\x0d\n  const res = Stream.prototype.on.call(this\x2C ev\x2C fn);\x0d\n  const state = this._readableState;\x0d\n\x0d\n  if (ev === 'data') {\x0d\n    // Update readableListening so that resume() may be a no-op\x0d\n    // a few lines down. This is needed to support once('readable').\x0d\n    state.readableListening = this.listenerCount('readable') > 0;\x0d\n\x0d\n    // Try start flowing on next tick if stream isn't explicitly paused.\x0d\n    if (state.flowing !== false)\x0d\n      this.resume();\x0d\n  } else if (ev === 'readable') {\x0d\n    if (!state.endEmitted && !state.readableListening) {\x0d\n      state.readableListening = state.needReadable = true;\x0d\n      state.flowing = false;\x0d\n      state.emittedReadable = false;\x0d\n      debug('on readable'\x2C state.length\x2C state.reading);\x0d\n      if (state.length) {\x0d\n        emitReadable(this);\x0d\n      } else if (!state.reading) {\x0d\n        process.nextTick(nReadingNextTick\x2C this);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\nReadable.prototype.addListener = Readable.prototype.on;\x0d\n\x0d\nReadable.prototype.removeListener = function(ev\x2C fn) {\x0d\n  const res = Stream.prototype.removeListener.call(this\x2C\x0d\n                                                   ev\x2C fn);\x0d\n\x0d\n  if (ev === 'readable') {\x0d\n    // We need to check if there is someone still listening to\x0d\n    // readable and reset the state. However this needs to happen\x0d\n    // after readable has been emitted but before I/O (nextTick) to\x0d\n    // support once('readable'\x2C fn) cycles. This means that calling\x0d\n    // resume within the same tick will have no\x0d\n    // effect.\x0d\n    process.nextTick(updateReadableListening\x2C this);\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\nReadable.prototype.off = Readable.prototype.removeListener;\x0d\n\x0d\nReadable.prototype.removeAllListeners = function(ev) {\x0d\n  const res = Stream.prototype.removeAllListeners.apply(this\x2C\x0d\n                                                        arguments);\x0d\n\x0d\n  if (ev === 'readable' || ev === undefined) {\x0d\n    // We need to check if there is someone still listening to\x0d\n    // readable and reset the state. However this needs to happen\x0d\n    // after readable has been emitted but before I/O (nextTick) to\x0d\n    // support once('readable'\x2C fn) cycles. This means that calling\x0d\n    // resume within the same tick will have no\x0d\n    // effect.\x0d\n    process.nextTick(updateReadableListening\x2C this);\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\n\x0d\nfunction updateReadableListening(self) {\x0d\n  const state = self._readableState;\x0d\n  state.readableListening = self.listenerCount('readable') > 0;\x0d\n\x0d\n  if (state.resumeScheduled && state[kPaused] === false) {\x0d\n    // Flowing needs to be set to true now\x2C otherwise\x0d\n    // the upcoming resume will not flow.\x0d\n    state.flowing = true;\x0d\n\x0d\n    // Crude way to check if we should resume.\x0d\n  } else if (self.listenerCount('data') > 0) {\x0d\n    self.resume();\x0d\n  } else if (!state.readableListening) {\x0d\n    state.flowing = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction nReadingNextTick(self) {\x0d\n  debug('readable nexttick read 0');\x0d\n  self.read(0);\x0d\n}\x0d\n\x0d\n// pause() and resume() are remnants of the legacy readable stream API\x0d\n// If the user uses them\x2C then switch into old mode.\x0d\nReadable.prototype.resume = function() {\x0d\n  const state = this._readableState;\x0d\n  if (!state.flowing) {\x0d\n    debug('resume');\x0d\n    // We flow only if there is no one listening\x0d\n    // for readable\x2C but we still have to call\x0d\n    // resume().\x0d\n    state.flowing = !state.readableListening;\x0d\n    resume(this\x2C state);\x0d\n  }\x0d\n  state[kPaused] = false;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction resume(stream\x2C state) {\x0d\n  if (!state.resumeScheduled) {\x0d\n    state.resumeScheduled = true;\x0d\n    process.nextTick(resume_\x2C stream\x2C state);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction resume_(stream\x2C state) {\x0d\n  debug('resume'\x2C state.reading);\x0d\n  if (!state.reading) {\x0d\n    stream.read(0);\x0d\n  }\x0d\n\x0d\n  state.resumeScheduled = false;\x0d\n  stream.emit('resume');\x0d\n  flow(stream);\x0d\n  if (state.flowing && !state.reading)\x0d\n    stream.read(0);\x0d\n}\x0d\n\x0d\nReadable.prototype.pause = function() {\x0d\n  debug('call pause flowing=%j'\x2C this._readableState.flowing);\x0d\n  if (this._readableState.flowing !== false) {\x0d\n    debug('pause');\x0d\n    this._readableState.flowing = false;\x0d\n    this.emit('pause');\x0d\n  }\x0d\n  this._readableState[kPaused] = true;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction flow(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('flow'\x2C state.flowing);\x0d\n  while (state.flowing && stream.read() !== null);\x0d\n}\x0d\n\x0d\n// Wrap an old-style stream as the async data source.\x0d\n// This is *not* part of the readable stream interface.\x0d\n// It is an ugly unfortunate mess of history.\x0d\nReadable.prototype.wrap = function(stream) {\x0d\n  let paused = false;\x0d\n\x0d\n  // TODO (ronag): Should this.destroy(err) emit\x0d\n  // 'error' on the wrapped stream? Would require\x0d\n  // a static factory method\x2C e.g. Readable.wrap(stream).\x0d\n\x0d\n  stream.on('data'\x2C (chunk) => {\x0d\n    if (!this.push(chunk) && stream.pause) {\x0d\n      paused = true;\x0d\n      stream.pause();\x0d\n    }\x0d\n  });\x0d\n\x0d\n  stream.on('end'\x2C () => {\x0d\n    this.push(null);\x0d\n  });\x0d\n\x0d\n  stream.on('error'\x2C (err) => {\x0d\n    errorOrDestroy(this\x2C err);\x0d\n  });\x0d\n\x0d\n  stream.on('close'\x2C () => {\x0d\n    this.destroy();\x0d\n  });\x0d\n\x0d\n  stream.on('destroy'\x2C () => {\x0d\n    this.destroy();\x0d\n  });\x0d\n\x0d\n  this._read = () => {\x0d\n    if (paused && stream.resume) {\x0d\n      paused = false;\x0d\n      stream.resume();\x0d\n    }\x0d\n  };\x0d\n\x0d\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\x0d\n  const streamKeys = ObjectKeys(stream);\x0d\n  for (let j = 1; j < streamKeys.length; j++) {\x0d\n    const i = streamKeys[j];\x0d\n    if (this[i] === undefined && typeof stream[i] === 'function') {\x0d\n      this[i] = stream[i].bind(stream);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nReadable.prototype[SymbolAsyncIterator] = function() {\x0d\n  return streamToAsyncIterator(this);\x0d\n};\x0d\n\x0d\nReadable.prototype.iterator = function(options) {\x0d\n  if (options !== undefined) {\x0d\n    validateObject(options\x2C 'options');\x0d\n  }\x0d\n  return streamToAsyncIterator(this\x2C options);\x0d\n};\x0d\n\x0d\nfunction streamToAsyncIterator(stream\x2C options) {\x0d\n  if (typeof stream.read !== 'function') {\x0d\n    stream = Readable.wrap(stream\x2C { objectMode: true });\x0d\n  }\x0d\n\x0d\n  const iter = createAsyncIterator(stream\x2C options);\x0d\n  iter.stream = stream;\x0d\n  return iter;\x0d\n}\x0d\n\x0d\nasync function* createAsyncIterator(stream\x2C options) {\x0d\n  let callback = nop;\x0d\n\x0d\n  const opts = {\x0d\n    destroyOnReturn: true\x2C\x0d\n    destroyOnError: true\x2C\x0d\n    ...options\x2C\x0d\n  };\x0d\n\x0d\n  function next(resolve) {\x0d\n    if (this === stream) {\x0d\n      callback();\x0d\n      callback = nop;\x0d\n    } else {\x0d\n      callback = resolve;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  let error = state.errored;\x0d\n  let errorEmitted = state.errorEmitted;\x0d\n  let endEmitted = state.endEmitted;\x0d\n  let closeEmitted = state.closeEmitted;\x0d\n\x0d\n  stream\x0d\n    .on('readable'\x2C next)\x0d\n    .on('error'\x2C function(err) {\x0d\n      error = err;\x0d\n      errorEmitted = true;\x0d\n      next.call(this);\x0d\n    })\x0d\n    .on('end'\x2C function() {\x0d\n      endEmitted = true;\x0d\n      next.call(this);\x0d\n    })\x0d\n    .on('close'\x2C function() {\x0d\n      closeEmitted = true;\x0d\n      next.call(this);\x0d\n    });\x0d\n\x0d\n  let errorThrown = false;\x0d\n  try {\x0d\n    while (true) {\x0d\n      const chunk = stream.destroyed ? null : stream.read();\x0d\n      if (chunk !== null) {\x0d\n        yield chunk;\x0d\n      } else if (errorEmitted) {\x0d\n        throw error;\x0d\n      } else if (endEmitted) {\x0d\n        break;\x0d\n      } else if (closeEmitted) {\x0d\n        break;\x0d\n      } else {\x0d\n        await new Promise(next);\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    if (opts.destroyOnError) {\x0d\n      destroyImpl.destroyer(stream\x2C err);\x0d\n    }\x0d\n    errorThrown = true;\x0d\n    throw err;\x0d\n  } finally {\x0d\n    if (!errorThrown && opts.destroyOnReturn) {\x0d\n      if (state.autoDestroy || !endEmitted) {\x0d\n        // TODO(ronag): ERR_PREMATURE_CLOSE?\x0d\n        destroyImpl.destroyer(stream\x2C null);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Making it explicit these properties are not enumerable\x0d\n// because otherwise some prototype manipulation in\x0d\n// userland will fail.\x0d\nObjectDefineProperties(Readable.prototype\x2C {\x0d\n  readable: {\x0d\n    get() {\x0d\n      const r = this._readableState;\x0d\n      // r.readable === false means that this is part of a Duplex stream\x0d\n      // where the readable side was disabled upon construction.\x0d\n      // Compat. The user might manually disable readable side through\x0d\n      // deprecated setter.\x0d\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted &&\x0d\n        !r.endEmitted;\x0d\n    }\x2C\x0d\n    set(val) {\x0d\n      // Backwards compat.\x0d\n      if (this._readableState) {\x0d\n        this._readableState.readable = !!val;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableDidRead: {\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.dataEmitted;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableAborted: {\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return !!(\x0d\n        this._readableState.readable !== false &&\x0d\n        (this._readableState.destroyed || this._readableState.errored) &&\x0d\n        !this._readableState.endEmitted\x0d\n      );\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableHighWaterMark: {\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.highWaterMark;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableBuffer: {\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState && this._readableState.buffer;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableFlowing: {\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.flowing;\x0d\n    }\x2C\x0d\n    set: function(state) {\x0d\n      if (this._readableState) {\x0d\n        this._readableState.flowing = state;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableLength: {\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState.length;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableObjectMode: {\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.objectMode : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableEncoding: {\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.encoding : null;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  destroyed: {\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      if (this._readableState === undefined) {\x0d\n        return false;\x0d\n      }\x0d\n      return this._readableState.destroyed;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // We ignore the value if the stream\x0d\n      // has not been initialized yet.\x0d\n      if (!this._readableState) {\x0d\n        return;\x0d\n      }\x0d\n\x0d\n      // Backward compatibility\x2C the user is explicitly\x0d\n      // managing destroyed.\x0d\n      this._readableState.destroyed = value;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableEnded: {\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.endEmitted : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n});\x0d\n\x0d\nObjectDefineProperties(ReadableState.prototype\x2C {\x0d\n  // Legacy getter for `pipesCount`.\x0d\n  pipesCount: {\x0d\n    get() {\x0d\n      return this.pipes.length;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  // Legacy property for `paused`.\x0d\n  paused: {\x0d\n    get() {\x0d\n      return this[kPaused] !== false;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      this[kPaused] = !!value;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\n// Exposed for testing purposes only.\x0d\nReadable._fromList = fromList;\x0d\n\x0d\n// Pluck off n bytes from an array of buffers.\x0d\n// Length is the combined lengths of all the buffers in the list.\x0d\n// This function is designed to be inlinable\x2C so please take care when making\x0d\n// changes to the function body.\x0d\nfunction fromList(n\x2C state) {\x0d\n  // nothing buffered.\x0d\n  if (state.length === 0)\x0d\n    return null;\x0d\n\x0d\n  let ret;\x0d\n  if (state.objectMode)\x0d\n    ret = state.buffer.shift();\x0d\n  else if (!n || n >= state.length) {\x0d\n    // Read it all\x2C truncate the list.\x0d\n    if (state.decoder)\x0d\n      ret = state.buffer.join('');\x0d\n    else if (state.buffer.length === 1)\x0d\n      ret = state.buffer.first();\x0d\n    else\x0d\n      ret = state.buffer.concat(state.length);\x0d\n    state.buffer.clear();\x0d\n  } else {\x0d\n    // read part of list.\x0d\n    ret = state.buffer.consume(n\x2C state.decoder);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n}\x0d\n\x0d\nfunction endReadable(stream) {\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  debug('endReadable'\x2C state.endEmitted);\x0d\n  if (!state.endEmitted) {\x0d\n    state.ended = true;\x0d\n    process.nextTick(endReadableNT\x2C state\x2C stream);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction endReadableNT(state\x2C stream) {\x0d\n  debug('endReadableNT'\x2C state.endEmitted\x2C state.length);\x0d\n\x0d\n  // Check that we didn't get one last unshift.\x0d\n  if (!state.errorEmitted && !state.closeEmitted &&\x0d\n      !state.endEmitted && state.length === 0) {\x0d\n    state.endEmitted = true;\x0d\n    stream.emit('end');\x0d\n\x0d\n    if (stream.writable && stream.allowHalfOpen === false) {\x0d\n      process.nextTick(endWritableNT\x2C stream);\x0d\n    } else if (state.autoDestroy) {\x0d\n      // In case of duplex streams we need a way to detect\x0d\n      // if the writable side is ready for autoDestroy as well.\x0d\n      const wState = stream._writableState;\x0d\n      const autoDestroy = !wState || (\x0d\n        wState.autoDestroy &&\x0d\n        // We don't expect the writable to ever 'finish'\x0d\n        // if writable is explicitly set to false.\x0d\n        (wState.finished || wState.writable === false)\x0d\n      );\x0d\n\x0d\n      if (autoDestroy) {\x0d\n        stream.destroy();\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction endWritableNT(stream) {\x0d\n  const writable = stream.writable && !stream.writableEnded &&\x0d\n    !stream.destroyed;\x0d\n  if (writable) {\x0d\n    stream.end();\x0d\n  }\x0d\n}\x0d\n\x0d\nReadable.from = function(iterable\x2C opts) {\x0d\n  return from(Readable\x2C iterable\x2C opts);\x0d\n};\x0d\n\x0d\nReadable.wrap = function(src\x2C options) {\x0d\n  return new Readable({\x0d\n    objectMode: src.readableObjectMode ?? src.objectMode ?? true\x2C\x0d\n    ...options\x2C\x0d\n    destroy(err\x2C callback) {\x0d\n      destroyImpl.destroyer(src\x2C err);\x0d\n      callback(err);\x0d\n    }\x0d\n  }).wrap(src);\x0d\n};\x0d\n
code-source-info,0x3dde95ff506,56,6426,7336,C0O6426C9O6441C16O6452C21O6479C28O6486C33O6508C34O6667C41O6683C44O6690C48O6672C52O6703C71O6725C76O6723C80O6774C84O6813C92O6841C95O6862C99O6852C103O6894C111O6925C114O6949C118O6939C122O6984C130O7017C133O7043C137O7033C141O7071C149O7082C151O7099C158O7132C166O7099C171O7157C178O7164C186O7164C192O7190C199O7202C212O7202C219O7335,,
tick,0x7ffdf67ba8cf,208783,0,0x0,3,0x7ff7c0812760,0x3dde95f8347,0x3dde95ec881,0x3dde95e889b,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,208806,0xc761d03d6e,18,Stream node:internal/streams/legacy:10:16,0x1074168ea90,~
script-source,57,node:internal/streams/legacy,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EE = require('events');\x0d\n\x0d\nfunction Stream(opts) {\x0d\n  EE.call(this\x2C opts);\x0d\n}\x0d\nObjectSetPrototypeOf(Stream.prototype\x2C EE.prototype);\x0d\nObjectSetPrototypeOf(Stream\x2C EE);\x0d\n\x0d\nStream.prototype.pipe = function(dest\x2C options) {\x0d\n  const source = this;\x0d\n\x0d\n  function ondata(chunk) {\x0d\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\x0d\n      source.pause();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  source.on('data'\x2C ondata);\x0d\n\x0d\n  function ondrain() {\x0d\n    if (source.readable && source.resume) {\x0d\n      source.resume();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  dest.on('drain'\x2C ondrain);\x0d\n\x0d\n  // If the 'end' option is not supplied\x2C dest.end() will be called when\x0d\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\x0d\n  if (!dest._isStdio && (!options || options.end !== false)) {\x0d\n    source.on('end'\x2C onend);\x0d\n    source.on('close'\x2C onclose);\x0d\n  }\x0d\n\x0d\n  let didOnEnd = false;\x0d\n  function onend() {\x0d\n    if (didOnEnd) return;\x0d\n    didOnEnd = true;\x0d\n\x0d\n    dest.end();\x0d\n  }\x0d\n\x0d\n\x0d\n  function onclose() {\x0d\n    if (didOnEnd) return;\x0d\n    didOnEnd = true;\x0d\n\x0d\n    if (typeof dest.destroy === 'function') dest.destroy();\x0d\n  }\x0d\n\x0d\n  // Don't leave dangling pipes when there are errors.\x0d\n  function onerror(er) {\x0d\n    cleanup();\x0d\n    if (EE.listenerCount(this\x2C 'error') === 0) {\x0d\n      this.emit('error'\x2C er);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  prependListener(source\x2C 'error'\x2C onerror);\x0d\n  prependListener(dest\x2C 'error'\x2C onerror);\x0d\n\x0d\n  // Remove all the event listeners that were added.\x0d\n  function cleanup() {\x0d\n    source.removeListener('data'\x2C ondata);\x0d\n    dest.removeListener('drain'\x2C ondrain);\x0d\n\x0d\n    source.removeListener('end'\x2C onend);\x0d\n    source.removeListener('close'\x2C onclose);\x0d\n\x0d\n    source.removeListener('error'\x2C onerror);\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n\x0d\n    source.removeListener('end'\x2C cleanup);\x0d\n    source.removeListener('close'\x2C cleanup);\x0d\n\x0d\n    dest.removeListener('close'\x2C cleanup);\x0d\n  }\x0d\n\x0d\n  source.on('end'\x2C cleanup);\x0d\n  source.on('close'\x2C cleanup);\x0d\n\x0d\n  dest.on('close'\x2C cleanup);\x0d\n  dest.emit('pipe'\x2C source);\x0d\n\x0d\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\x0d\n  return dest;\x0d\n};\x0d\n\x0d\nfunction prependListener(emitter\x2C event\x2C fn) {\x0d\n  // Sadly this is not cacheable as some libraries bundle their own\x0d\n  // event emitter implementation with them.\x0d\n  if (typeof emitter.prependListener === 'function')\x0d\n    return emitter.prependListener(event\x2C fn);\x0d\n\x0d\n  // This is a hack to make sure that our error handler is attached before any\x0d\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\x0d\n  // to continue to work with older versions of Node.js that do not include\x0d\n  // the prependListener() method. The goal is to eventually remove this hack.\x0d\n  if (!emitter._events || !emitter._events[event])\x0d\n    emitter.on(event\x2C fn);\x0d\n  else if (ArrayIsArray(emitter._events[event]))\x0d\n    emitter._events[event].unshift(fn);\x0d\n  else\x0d\n    emitter._events[event] = [fn\x2C emitter._events[event]];\x0d\n}\x0d\n\x0d\nmodule.exports = { Stream\x2C prependListener };\x0d\n
code-source-info,0xc761d03d6e,57,136,171,C0O148C5O151C10O151C17O170,,
code-creation,LazyCompile,10,209056,0xc761d04636,354,ReadableState node:internal/streams/readable:78:23,0x1074168c1e0,~
code-source-info,0xc761d
code-creation,LazyCompile,10,209181,0xc761d04a46,98,getHighWaterMark node:internal/streams/state:19:26,0x10741691578,~
script-source,60,node:internal/streams/state,'use strict';\x0d\n\x0d\nconst {\x0d\n  MathFloor\x2C\x0d\n  NumberIsInteger\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;\x0d\n\x0d\nfunction highWaterMarkFrom(options\x2C isDuplex\x2C duplexKey) {\x0d\n  return options.highWaterMark != null ? options.highWaterMark :\x0d\n    isDuplex ? options[duplexKey] : null;\x0d\n}\x0d\n\x0d\nfunction getDefaultHighWaterMark(objectMode) {\x0d\n  return objectMode ? 16 : 16 * 1024;\x0d\n}\x0d\n\x0d\nfunction getHighWaterMark(state\x2C options\x2C duplexKey\x2C isDuplex) {\x0d\n  const hwm = highWaterMarkFrom(options\x2C isDuplex\x2C duplexKey);\x0d\n  if (hwm != null) {\x0d\n    if (!NumberIsInteger(hwm) || hwm < 0) {\x0d\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark';\x0d\n      throw new ERR_INVALID_ARG_VALUE(name\x2C hwm);\x0d\n    }\x0d\n    return MathFloor(hwm);\x0d\n  }\x0d\n\x0d\n  // Default value\x0d\n  return getDefaultHighWaterMark(state.objectMode);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n};\x0d\n
code-source-info,0xc761d04a46,60,442,862,C0O497C12O497C18O549C21O573C26O578C33O606C38O633C47O655C56O701C69O707C74O701C75O757C80O764C84O779C85O810C88O847C93O817C97O859,,
code-creation,LazyCompile,10,209267,0xc761d04cde,26,highWaterMarkFrom node:internal/streams/state:10:27,0x10741691418,~
code-source-info,0xc761d04cde,60,177,321,C0O228C7O260C15O281C19O299C25O318,,
code-creation,LazyCompile,10,209296,0xc761d04db6,13,getDefaultHighWaterMark node:internal/streams/state:15:33,0x10741691528,~
code-source-info,0xc761d04db6,60,357,413,C0O375C12O410,,
code-creation,LazyCompile,10,209333,0xc761d04e96,17,BufferList node:internal/streams/buffer_list:14:14,0x107416908d0,~
script-source,59,node:internal/streams/buffer_list,'use strict';\x0d\n\x0d\nconst {\x0d\n  StringPrototypeSlice\x2C\x0d\n  SymbolIterator\x2C\x0d\n  TypedArrayPrototypeSet\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nmodule.exports = class BufferList {\x0d\n  constructor() {\x0d\n    this.head = null;\x0d\n    this.tail = null;\x0d\n    this.length = 0;\x0d\n  }\x0d\n\x0d\n  push(v) {\x0d\n    const entry = { data: v\x2C next: null };\x0d\n    if (this.length > 0)\x0d\n      this.tail.next = entry;\x0d\n    else\x0d\n      this.head = entry;\x0d\n    this.tail = entry;\x0d\n    ++this.length;\x0d\n  }\x0d\n\x0d\n  unshift(v) {\x0d\n    const entry = { data: v\x2C next: this.head };\x0d\n    if (this.length === 0)\x0d\n      this.tail = entry;\x0d\n    this.head = entry;\x0d\n    ++this.length;\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    if (this.length === 0)\x0d\n      return;\x0d\n    const ret = this.head.data;\x0d\n    if (this.length === 1)\x0d\n      this.head = this.tail = null;\x0d\n    else\x0d\n      this.head = this.head.next;\x0d\n    --this.length;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  clear() {\x0d\n    this.head = this.tail = null;\x0d\n    this.length = 0;\x0d\n  }\x0d\n\x0d\n  join(s) {\x0d\n    if (this.length === 0)\x0d\n      return '';\x0d\n    let p = this.head;\x0d\n    let ret = '' + p.data;\x0d\n    while ((p = p.next) !== null)\x0d\n      ret += s + p.data;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  concat(n) {\x0d\n    if (this.length === 0)\x0d\n      return Buffer.alloc(0);\x0d\n    const ret = Buffer.allocUnsafe(n >>> 0);\x0d\n    let p = this.head;\x0d\n    let i = 0;\x0d\n    while (p) {\x0d\n      TypedArrayPrototypeSet(ret\x2C p.data\x2C i);\x0d\n      i += p.data.length;\x0d\n      p = p.next;\x0d\n    }\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of bytes or characters from the buffered data.\x0d\n  consume(n\x2C hasStrings) {\x0d\n    const data = this.head.data;\x0d\n    if (n < data.length) {\x0d\n      // `slice` is the same for buffers and strings.\x0d\n      const slice = data.slice(0\x2C n);\x0d\n      this.head.data = data.slice(n);\x0d\n      return slice;\x0d\n    }\x0d\n    if (n === data.length) {\x0d\n      // First chunk is a perfect match.\x0d\n      return this.shift();\x0d\n    }\x0d\n    // Result spans more than one buffer.\x0d\n    return hasStrings ? this._getString(n) : this._getBuffer(n);\x0d\n  }\x0d\n\x0d\n  first() {\x0d\n    return this.head.data;\x0d\n  }\x0d\n\x0d\n  *[SymbolIterator]() {\x0d\n    for (let p = this.head; p; p = p.next) {\x0d\n      yield p.data;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of characters from the buffered data.\x0d\n  _getString(n) {\x0d\n    let ret = '';\x0d\n    let p = this.head;\x0d\n    let c = 0;\x0d\n    do {\x0d\n      const str = p.data;\x0d\n      if (n > str.length) {\x0d\n        ret += str;\x0d\n        n -= str.length;\x0d\n      } else {\x0d\n        if (n === str.length) {\x0d\n          ret += str;\x0d\n          ++c;\x0d\n          if (p.next)\x0d\n            this.head = p.next;\x0d\n          else\x0d\n            this.head = this.tail = null;\x0d\n        } else {\x0d\n          ret += StringPrototypeSlice(str\x2C 0\x2C n);\x0d\n          this.head = p;\x0d\n          p.data = StringPrototypeSlice(str\x2C n);\x0d\n        }\x0d\n        break;\x0d\n      }\x0d\n      ++c;\x0d\n    } while ((p = p.next) !== null);\x0d\n    this.length -= c;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of bytes from the buffered data.\x0d\n  _getBuffer(n) {\x0d\n    const ret = Buffer.allocUnsafe(n);\x0d\n    const retLen = n;\x0d\n    let p = this.head;\x0d\n    let c = 0;\x0d\n    do {\x0d\n      const buf = p.data;\x0d\n      if (n > buf.length) {\x0d\n        TypedArrayPrototypeSet(ret\x2C buf\x2C retLen - n);\x0d\n        n -= buf.length;\x0d\n      } else {\x0d\n        if (n === buf.length) {\x0d\n          TypedArrayPrototypeSet(ret\x2C buf\x2C retLen - n);\x0d\n          ++c;\x0d\n          if (p.next)\x0d\n            this.head = p.next;\x0d\n          else\x0d\n            this.head = this.tail = null;\x0d\n        } else {\x0d\n          TypedArrayPrototypeSet(ret\x2C\x0d\n                                 new Uint8Array(buf.buffer\x2C buf.byteOffset\x2C n)\x2C\x0d\n                                 retLen - n);\x0d\n          this.head = p;\x0d\n          p.data = buf.slice(n);\x0d\n        }\x0d\n        break;\x0d\n      }\x0d\n      ++c;\x0d\n    } while ((p = p.next) !== null);\x0d\n    this.length -= c;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Make sure the linked list only shows the minimal necessary information.\x0d\n  [inspect.custom](_\x2C options) {\x0d\n    return inspect(this\x2C {\x0d\n      ...options\x2C\x0d\n      // Only inspect one level.\x0d\n      depth: 0\x2C\x0d\n      // It should not recurse.\x0d\n      customInspect: false\x0d\n    });\x0d\n  }\x0d\n};\x0d\n
code-source-info,0xc761d04e96,59,278,355,C0O288C1O298C5O311C6O321C10O334C11O346C16O354,,
code-creation,LazyCompile,10,209602,0xc761d055e6,98,construct node:internal/streams/destroy:225:19,0x375c9f76c70,~
script-source,54,node:internal/streams/destroy,'use strict';\x0d\n\x0d\nconst {\x0d\n  aggregateTwoErrors\x2C\x0d\n  codes: {\x0d\n    ERR_MULTIPLE_CALLBACK\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst kDestroy = Symbol('kDestroy');\x0d\nconst kConstruct = Symbol('kConstruct');\x0d\n\x0d\nfunction checkError(err\x2C w\x2C r) {\x0d\n  if (err) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    err.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (w && !w.errored) {\x0d\n      w.errored = err;\x0d\n    }\x0d\n    if (r && !r.errored) {\x0d\n      r.errored = err;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Backwards compat. cb() is undocumented and unused in core but\x0d\n// unfortunately might be used by modules.\x0d\nfunction destroy(err\x2C cb) {\x0d\n  const r = this._readableState;\x0d\n  const w = this._writableState;\x0d\n  // With duplex streams we use the writable side for state.\x0d\n  const s = w || r;\x0d\n\x0d\n  if ((w && w.destroyed) || (r && r.destroyed)) {\x0d\n    if (typeof cb === 'function') {\x0d\n      cb();\x0d\n    }\x0d\n\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n\x0d\n  // We set destroyed to true before firing error callbacks in order\x0d\n  // to make it re-entrance safe in case destroy() is called within callbacks\x0d\n  checkError(err\x2C w\x2C r);\x0d\n\x0d\n  if (w) {\x0d\n    w.destroyed = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.destroyed = true;\x0d\n  }\x0d\n\x0d\n  // If still constructing then defer calling _destroy.\x0d\n  if (!s.constructed) {\x0d\n    this.once(kDestroy\x2C function(er) {\x0d\n      _destroy(this\x2C aggregateTwoErrors(er\x2C err)\x2C cb);\x0d\n    });\x0d\n  } else {\x0d\n    _destroy(this\x2C err\x2C cb);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n}\x0d\n\x0d\nfunction _destroy(self\x2C err\x2C cb) {\x0d\n  let called = false;\x0d\n\x0d\n  function onDestroy(err) {\x0d\n    if (called) {\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    const r = self._readableState;\x0d\n    const w = self._writableState;\x0d\n\x0d\n    checkError(err\x2C w\x2C r);\x0d\n\x0d\n    if (w) {\x0d\n      w.closed = true;\x0d\n    }\x0d\n    if (r) {\x0d\n      r.closed = true;\x0d\n    }\x0d\n\x0d\n    if (typeof cb === 'function') {\x0d\n      cb(err);\x0d\n    }\x0d\n\x0d\n    if (err) {\x0d\n      process.nextTick(emitErrorCloseNT\x2C self\x2C err);\x0d\n    } else {\x0d\n      process.nextTick(emitCloseNT\x2C self);\x0d\n    }\x0d\n  }\x0d\n  try {\x0d\n    const result = self._destroy(err || null\x2C onDestroy);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            process.nextTick(onDestroy\x2C null);\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            process.nextTick(onDestroy\x2C err);\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onDestroy(err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitErrorCloseNT(self\x2C err) {\x0d\n  emitErrorNT(self\x2C err);\x0d\n  emitCloseNT(self);\x0d\n}\x0d\n\x0d\nfunction emitCloseNT(self) {\x0d\n  const r = self._readableState;\x0d\n  const w = self._writableState;\x0d\n\x0d\n  if (w) {\x0d\n    w.closeEmitted = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.closeEmitted = true;\x0d\n  }\x0d\n\x0d\n  if ((w && w.emitClose) || (r && r.emitClose)) {\x0d\n    self.emit('close');\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitErrorNT(self\x2C err) {\x0d\n  const r = self._readableState;\x0d\n  const w = self._writableState;\x0d\n\x0d\n  if ((w && w.errorEmitted) || (r && r.errorEmitted)) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (w) {\x0d\n    w.errorEmitted = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.errorEmitted = true;\x0d\n  }\x0d\n\x0d\n  self.emit('error'\x2C err);\x0d\n}\x0d\n\x0d\nfunction undestroy() {\x0d\n  const r = this._readableState;\x0d\n  const w = this._writableState;\x0d\n\x0d\n  if (r) {\x0d\n    r.constructed = true;\x0d\n    r.closed = false;\x0d\n    r.closeEmitted = false;\x0d\n    r.destroyed = false;\x0d\n    r.errored = null;\x0d\n    r.errorEmitted = false;\x0d\n    r.reading = false;\x0d\n    r.ended = false;\x0d\n    r.endEmitted = false;\x0d\n  }\x0d\n\x0d\n  if (w) {\x0d\n    w.constructed = true;\x0d\n    w.destroyed = false;\x0d\n    w.closed = false;\x0d\n    w.closeEmitted = false;\x0d\n    w.errored = null;\x0d\n    w.errorEmitted = false;\x0d\n    w.ended = false;\x0d\n    w.ending = false;\x0d\n    w.finalCalled = false;\x0d\n    w.prefinished = false;\x0d\n    w.finished = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction errorOrDestroy(stream\x2C err\x2C sync) {\x0d\n  // We have tests that rely on errors being emitted\x0d\n  // in the same tick\x2C so changing this is semver major.\x0d\n  // For now when you opt-in to autoDestroy we allow\x0d\n  // the error to be emitted nextTick. In a future\x0d\n  // semver major update we should change the default to this.\x0d\n\x0d\n  const r = stream._readableState;\x0d\n  const w = stream._writableState;\x0d\n\x0d\n  if ((w && w.destroyed) || (r && r.destroyed)) {\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if ((r && r.autoDestroy) || (w && w.autoDestroy))\x0d\n    stream.destroy(err);\x0d\n  else if (err) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    err.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (w && !w.errored) {\x0d\n      w.errored = err;\x0d\n    }\x0d\n    if (r && !r.errored) {\x0d\n      r.errored = err;\x0d\n    }\x0d\n    if (sync) {\x0d\n      process.nextTick(emitErrorNT\x2C stream\x2C err);\x0d\n    } else {\x0d\n      emitErrorNT(stream\x2C err);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction construct(stream\x2C cb) {\x0d\n  if (typeof stream._construct !== 'function') {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const r = stream._readableState;\x0d\n  const w = stream._writableState;\x0d\n\x0d\n  if (r) {\x0d\n    r.constructed = false;\x0d\n  }\x0d\n  if (w) {\x0d\n    w.constructed = false;\x0d\n  }\x0d\n\x0d\n  stream.once(kConstruct\x2C cb);\x0d\n\x0d\n  if (stream.listenerCount(kConstruct) > 1) {\x0d\n    // Duplex\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  process.nextTick(constructNT\x2C stream);\x0d\n}\x0d\n\x0d\nfunction constructNT(stream) {\x0d\n  let called = false;\x0d\n\x0d\n  function onConstruct(err) {\x0d\n    if (called) {\x0d\n      errorOrDestroy(stream\x2C err ?? new ERR_MULTIPLE_CALLBACK());\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    const r = stream._readableState;\x0d\n    const w = stream._writableState;\x0d\n    const s = w || r;\x0d\n\x0d\n    if (r) {\x0d\n      r.constructed = true;\x0d\n    }\x0d\n    if (w) {\x0d\n      w.constructed = true;\x0d\n    }\x0d\n\x0d\n    if (s.destroyed) {\x0d\n      stream.emit(kDestroy\x2C err);\x0d\n    } else if (err) {\x0d\n      errorOrDestroy(stream\x2C err\x2C true);\x0d\n    } else {\x0d\n      process.nextTick(emitConstructNT\x2C stream);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    const result = stream._construct(onConstruct);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            if (!called) {\x0d\n              process.nextTick(onConstruct\x2C null);\x0d\n            }\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            if (!called) {\x0d\n              process.nextTick(onConstruct\x2C err);\x0d\n            }\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onConstruct(err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitConstructNT(stream) {\x0d\n  stream.emit(kConstruct);\x0d\n}\x0d\n\x0d\nfunction isRequest(stream) {\x0d\n  return stream && stream.setHeader && typeof stream.abort === 'function';\x0d\n}\x0d\n\x0d\n// Normalize destroy for legacy.\x0d\nfunction destroyer(stream\x2C err) {\x0d\n  if (!stream) return;\x0d\n  if (isRequest(stream)) return stream.abort();\x0d\n  if (isRequest(stream.req)) return stream.req.abort();\x0d\n  if (typeof stream.destroy === 'function') return stream.destroy(err);\x0d\n  if (typeof stream.close === 'function') return stream.close();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  construct\x2C\x0d\n  destroyer\x2C\x0d\n  destroy\x2C\x0d\n  undestroy\x2C\x0d\n  errorOrDestroy\x0d\n};\x0d\n
code-source-info,0xc761d055e6,54,4850,5261,C0O4886C8O4920C9O4927C10O4955C15O4991C20O5012C24O5026C25O5040C29O5057C33O5071C34O5085C38O5111C45O5116C48O5111C54O5149C61O5163C64O5149C72O5175C77O5202C78O5209C79O5220C82O5228C90O5228C97O5260,,
code-creation,LazyCompile,10,210015,0xc761d062be,266,Writable node:internal/streams/writable:219:18,0x1074169aec8,~
script-source,63,node:internal/streams/writable,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// A bit simpler than readable streams.\x0d\n// Implement an async ._write(chunk\x2C encoding\x2C cb)\x2C and it'll handle all\x0d\n// the drain event emission and buffering.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeSymbolHasInstance\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolHasInstance\x2C\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Writable;\x0d\nWritable.WritableState = WritableState;\x0d\n\x0d\nconst EE = require('events');\x0d\nconst Stream = require('internal/streams/legacy').Stream;\x0d\nconst { Buffer } = require('buffer');\x0d\nconst destroyImpl = require('internal/streams/destroy');\x0d\n\x0d\nconst {\x0d\n  addAbortSignalNoValidate\x2C\x0d\n} = require('internal/streams/add-abort-signal');\x0d\n\x0d\nconst {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n} = require('internal/streams/state');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  ERR_MULTIPLE_CALLBACK\x2C\x0d\n  ERR_STREAM_CANNOT_PIPE\x2C\x0d\n  ERR_STREAM_DESTROYED\x2C\x0d\n  ERR_STREAM_ALREADY_FINISHED\x2C\x0d\n  ERR_STREAM_NULL_VALUES\x2C\x0d\n  ERR_STREAM_WRITE_AFTER_END\x2C\x0d\n  ERR_UNKNOWN_ENCODING\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst { errorOrDestroy } = destroyImpl;\x0d\n\x0d\nObjectSetPrototypeOf(Writable.prototype\x2C Stream.prototype);\x0d\nObjectSetPrototypeOf(Writable\x2C Stream);\x0d\n\x0d\nfunction nop() {}\x0d\n\x0d\nconst kOnFinished = Symbol('kOnFinished');\x0d\n\x0d\nfunction WritableState(options\x2C stream\x2C isDuplex) {\x0d\n  // Duplex streams are both readable and writable\x2C but share\x0d\n  // the same options object.\x0d\n  // However\x2C some cases require setting options to different\x0d\n  // values for the readable and the writable sides of the duplex stream\x2C\x0d\n  // e.g. options.readableObjectMode vs. options.writableObjectMode\x2C etc.\x0d\n  if (typeof isDuplex !== 'boolean')\x0d\n    isDuplex = stream instanceof Stream.Duplex;\x0d\n\x0d\n  // Object stream flag to indicate whether or not this stream\x0d\n  // contains buffers or objects.\x0d\n  this.objectMode = !!(options && options.objectMode);\x0d\n\x0d\n  if (isDuplex)\x0d\n    this.objectMode = this.objectMode ||\x0d\n      !!(options && options.writableObjectMode);\x0d\n\x0d\n  // The point at which write() starts returning false\x0d\n  // Note: 0 is a valid value\x2C means that we always return false if\x0d\n  // the entire buffer is not flushed immediately on write().\x0d\n  this.highWaterMark = options ?\x0d\n    getHighWaterMark(this\x2C options\x2C 'writableHighWaterMark'\x2C isDuplex) :\x0d\n    getDefaultHighWaterMark(false);\x0d\n\x0d\n  // if _final has been called.\x0d\n  this.finalCalled = false;\x0d\n\x0d\n  // drain event flag.\x0d\n  this.needDrain = false;\x0d\n  // At the start of calling end()\x0d\n  this.ending = false;\x0d\n  // When end() has been called\x2C and returned.\x0d\n  this.ended = false;\x0d\n  // When 'finish' is emitted.\x0d\n  this.finished = false;\x0d\n\x0d\n  // Has it been destroyed\x0d\n  this.destroyed = false;\x0d\n\x0d\n  // Should we decode strings into buffers before passing to _write?\x0d\n  // this is here so that some node-core streams can optimize string\x0d\n  // handling at a lower level.\x0d\n  const noDecode = !!(options && options.decodeStrings === false);\x0d\n  this.decodeStrings = !noDecode;\x0d\n\x0d\n  // Crypto is kind of old and crusty.  Historically\x2C its default string\x0d\n  // encoding is 'binary' so we have to make this configurable.\x0d\n  // Everything else in the universe uses 'utf8'\x2C though.\x0d\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\x0d\n\x0d\n  // Not an actual buffer we keep track of\x2C but a measurement\x0d\n  // of how much we're waiting to get pushed to some underlying\x0d\n  // socket or file.\x0d\n  this.length = 0;\x0d\n\x0d\n  // A flag to see when we're in the middle of a write.\x0d\n  this.writing = false;\x0d\n\x0d\n  // When true all writes will be buffered until .uncork() call.\x0d\n  this.corked = 0;\x0d\n\x0d\n  // A flag to be able to tell if the onwrite cb is called immediately\x2C\x0d\n  // or on a later tick.  We set this to true at first\x2C because any\x0d\n  // actions that shouldn't happen until "later" should generally also\x0d\n  // not happen before the first write call.\x0d\n  this.sync = true;\x0d\n\x0d\n  // A flag to know if we're processing previously buffered items\x2C which\x0d\n  // may call the _write() callback in the same tick\x2C so that we don't\x0d\n  // end up in an overlapped onwrite situation.\x0d\n  this.bufferProcessing = false;\x0d\n\x0d\n  // The callback that's passed to _write(chunk\x2C cb).\x0d\n  this.onwrite = onwrite.bind(undefined\x2C stream);\x0d\n\x0d\n  // The callback that the user supplies to write(chunk\x2C encoding\x2C cb).\x0d\n  this.writecb = null;\x0d\n\x0d\n  // The amount that is being written when _write is called.\x0d\n  this.writelen = 0;\x0d\n\x0d\n  // Storage for data passed to the afterWrite() callback in case of\x0d\n  // synchronous _write() completion.\x0d\n  this.afterWriteTickInfo = null;\x0d\n\x0d\n  resetBuffer(this);\x0d\n\x0d\n  // Number of pending user-supplied write callbacks\x0d\n  // this must be 0 before 'finish' can be emitted.\x0d\n  this.pendingcb = 0;\x0d\n\x0d\n  // Stream is still being constructed and cannot be\x0d\n  // destroyed until construction finished or failed.\x0d\n  // Async construction is opt in\x2C therefore we start as\x0d\n  // constructed.\x0d\n  this.constructed = true;\x0d\n\x0d\n  // Emit prefinish if the only thing we're waiting for is _write cbs\x0d\n  // This is relevant for synchronous Transform streams.\x0d\n  this.prefinished = false;\x0d\n\x0d\n  // True if the error was already emitted and should not be thrown again.\x0d\n  this.errorEmitted = false;\x0d\n\x0d\n  // Should close be emitted on destroy. Defaults to true.\x0d\n  this.emitClose = !options || options.emitClose !== false;\x0d\n\x0d\n  // Should .destroy() be called after 'finish' (and potentially 'end').\x0d\n  this.autoDestroy = !options || options.autoDestroy !== false;\x0d\n\x0d\n  // Indicates whether the stream has errored. When true all write() calls\x0d\n  // should return false. This is needed since when autoDestroy\x0d\n  // is disabled we need a way to tell whether the stream has failed.\x0d\n  this.errored = null;\x0d\n\x0d\n  // Indicates whether the stream has finished destroying.\x0d\n  this.closed = false;\x0d\n\x0d\n  // True if close has been emitted or would have been emitted\x0d\n  // depending on emitClose.\x0d\n  this.closeEmitted = false;\x0d\n\x0d\n  this[kOnFinished] = [];\x0d\n}\x0d\n\x0d\nfunction resetBuffer(state) {\x0d\n  state.buffered = [];\x0d\n  state.bufferedIndex = 0;\x0d\n  state.allBuffers = true;\x0d\n  state.allNoop = true;\x0d\n}\x0d\n\x0d\nWritableState.prototype.getBuffer = function getBuffer() {\x0d\n  return ArrayPrototypeSlice(this.buffered\x2C this.bufferedIndex);\x0d\n};\x0d\n\x0d\nObjectDefineProperty(WritableState.prototype\x2C 'bufferedRequestCount'\x2C {\x0d\n  get() {\x0d\n    return this.buffered.length - this.bufferedIndex;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction Writable(options) {\x0d\n  // Writable ctor is applied to Duplexes\x2C too.\x0d\n  // `realHasInstance` is necessary because using plain `instanceof`\x0d\n  // would return false\x2C as no `_writableState` property is attached.\x0d\n\x0d\n  // Trying to use the custom `instanceof` for Writable here will also break the\x0d\n  // Node.js LazyTransform implementation\x2C which has a non-trivial getter for\x0d\n  // `_writableState` that would lead to infinite recursion.\x0d\n\x0d\n  // Checking for a Stream.Duplex instance is faster here instead of inside\x0d\n  // the WritableState constructor\x2C at least with V8 6.5.\x0d\n  const isDuplex = (this instanceof Stream.Duplex);\x0d\n\x0d\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable\x2C this))\x0d\n    return new Writable(options);\x0d\n\x0d\n  this._writableState = new WritableState(options\x2C this\x2C isDuplex);\x0d\n\x0d\n  if (options) {\x0d\n    if (typeof options.write === 'function')\x0d\n      this._write = options.write;\x0d\n\x0d\n    if (typeof options.writev === 'function')\x0d\n      this._writev = options.writev;\x0d\n\x0d\n    if (typeof options.destroy === 'function')\x0d\n      this._destroy = options.destroy;\x0d\n\x0d\n    if (typeof options.final === 'function')\x0d\n      this._final = options.final;\x0d\n\x0d\n    if (typeof options.construct === 'function')\x0d\n      this._construct = options.construct;\x0d\n    if (options.signal)\x0d\n      addAbortSignalNoValidate(options.signal\x2C this);\x0d\n  }\x0d\n\x0d\n  Stream.call(this\x2C options);\x0d\n\x0d\n  destroyImpl.construct(this\x2C () => {\x0d\n    const state = this._writableState;\x0d\n\x0d\n    if (!state.writing) {\x0d\n      clearBuffer(this\x2C state);\x0d\n    }\x0d\n\x0d\n    finishMaybe(this\x2C state);\x0d\n  });\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Writable\x2C SymbolHasInstance\x2C {\x0d\n  value: function(object) {\x0d\n    if (FunctionPrototypeSymbolHasInstance(this\x2C object)) return true;\x0d\n    if (this !== Writable) return false;\x0d\n\x0d\n    return object && object._writableState instanceof WritableState;\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\n// Otherwise people can pipe Writable streams\x2C which is just wrong.\x0d\nWritable.prototype.pipe = function() {\x0d\n  errorOrDestroy(this\x2C new ERR_STREAM_CANNOT_PIPE());\x0d\n};\x0d\n\x0d\nfunction _write(stream\x2C chunk\x2C encoding\x2C cb) {\x0d\n  const state = stream._writableState;\x0d\n\x0d\n  if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = state.defaultEncoding;\x0d\n  } else {\x0d\n    if (!encoding)\x0d\n      encoding = state.defaultEncoding;\x0d\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding))\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    if (typeof cb !== 'function')\x0d\n      cb = nop;\x0d\n  }\x0d\n\x0d\n  if (chunk === null) {\x0d\n    throw new ERR_STREAM_NULL_VALUES();\x0d\n  } else if (!state.objectMode) {\x0d\n    if (typeof chunk === 'string') {\x0d\n      if (state.decodeStrings !== false) {\x0d\n        chunk = Buffer.from(chunk\x2C encoding);\x0d\n        encoding = 'buffer';\x0d\n      }\x0d\n    } else if (chunk instanceof Buffer) {\x0d\n      encoding = 'buffer';\x0d\n    } else if (Stream._isUint8Array(chunk)) {\x0d\n      chunk = Stream._uint8ArrayToBuffer(chunk);\x0d\n      encoding = 'buffer';\x0d\n    } else {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'chunk'\x2C ['string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C chunk);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n  if (state.ending) {\x0d\n    err = new ERR_STREAM_WRITE_AFTER_END();\x0d\n  } else if (state.destroyed) {\x0d\n    err = new ERR_STREAM_DESTROYED('write');\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    process.nextTick(cb\x2C err);\x0d\n    errorOrDestroy(stream\x2C err\x2C true);\x0d\n    return err;\x0d\n  }\x0d\n  state.pendingcb++;\x0d\n  return writeOrBuffer(stream\x2C state\x2C chunk\x2C encoding\x2C cb);\x0d\n}\x0d\n\x0d\nWritable.prototype.write = function(chunk\x2C encoding\x2C cb) {\x0d\n  return _write(this\x2C chunk\x2C encoding\x2C cb) === true;\x0d\n};\x0d\n\x0d\nWritable.prototype.cork = function() {\x0d\n  this._writableState.corked++;\x0d\n};\x0d\n\x0d\nWritable.prototype.uncork = function() {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  if (state.corked) {\x0d\n    state.corked--;\x0d\n\x0d\n    if (!state.writing)\x0d\n      clearBuffer(this\x2C state);\x0d\n  }\x0d\n};\x0d\n\x0d\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\x0d\n  // node::ParseEncoding() requires lower case.\x0d\n  if (typeof encoding === 'string')\x0d\n    encoding = StringPrototypeToLowerCase(encoding);\x0d\n  if (!Buffer.isEncoding(encoding))\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n  this._writableState.defaultEncoding = encoding;\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// If we're already writing something\x2C then just put this\x0d\n// in the queue\x2C and wait our turn.  Otherwise\x2C call _write\x0d\n// If we return false\x2C then we need a drain event\x2C so set that flag.\x0d\nfunction writeOrBuffer(stream\x2C state\x2C chunk\x2C encoding\x2C callback) {\x0d\n  const len = state.objectMode ? 1 : chunk.length;\x0d\n\x0d\n  state.length += len;\x0d\n\x0d\n  // stream._write resets state.length\x0d\n  const ret = state.length < state.highWaterMark;\x0d\n  // We must ensure that previous needDrain will not be reset to false.\x0d\n  if (!ret)\x0d\n    state.needDrain = true;\x0d\n\x0d\n  if (state.writing || state.corked || state.errored || !state.constructed) {\x0d\n    state.buffered.push({ chunk\x2C encoding\x2C callback });\x0d\n    if (state.allBuffers && encoding !== 'buffer') {\x0d\n      state.allBuffers = false;\x0d\n    }\x0d\n    if (state.allNoop && callback !== nop) {\x0d\n      state.allNoop = false;\x0d\n    }\x0d\n  } else {\x0d\n    state.writelen = len;\x0d\n    state.writecb = callback;\x0d\n    state.writing = true;\x0d\n    state.sync = true;\x0d\n    stream._write(chunk\x2C encoding\x2C state.onwrite);\x0d\n    state.sync = false;\x0d\n  }\x0d\n\x0d\n  // Return false if errored or destroyed in order to break\x0d\n  // any synchronous while(stream.write(data)) loops.\x0d\n  return ret && !state.errored && !state.destroyed;\x0d\n}\x0d\n\x0d\nfunction doWrite(stream\x2C state\x2C writev\x2C len\x2C chunk\x2C encoding\x2C cb) {\x0d\n  state.writelen = len;\x0d\n  state.writecb = cb;\x0d\n  state.writing = true;\x0d\n  state.sync = true;\x0d\n  if (state.destroyed)\x0d\n    state.onwrite(new ERR_STREAM_DESTROYED('write'));\x0d\n  else if (writev)\x0d\n    stream._writev(chunk\x2C state.onwrite);\x0d\n  else\x0d\n    stream._write(chunk\x2C encoding\x2C state.onwrite);\x0d\n  state.sync = false;\x0d\n}\x0d\n\x0d\nfunction onwriteError(stream\x2C state\x2C er\x2C cb) {\x0d\n  --state.pendingcb;\x0d\n\x0d\n  cb(er);\x0d\n  // Ensure callbacks are invoked even when autoDestroy is\x0d\n  // not enabled. Passing `er` here doesn't make sense since\x0d\n  // it's related to one specific write\x2C not to the buffered\x0d\n  // writes.\x0d\n  errorBuffer(state);\x0d\n  // This can emit error\x2C but error must always follow cb.\x0d\n  errorOrDestroy(stream\x2C er);\x0d\n}\x0d\n\x0d\nfunction onwrite(stream\x2C er) {\x0d\n  const state = stream._writableState;\x0d\n  const sync = state.sync;\x0d\n  const cb = state.writecb;\x0d\n\x0d\n  if (typeof cb !== 'function') {\x0d\n    errorOrDestroy(stream\x2C new ERR_MULTIPLE_CALLBACK());\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  state.writing = false;\x0d\n  state.writecb = null;\x0d\n  state.length -= state.writelen;\x0d\n  state.writelen = 0;\x0d\n\x0d\n  if (er) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    er.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (!state.errored) {\x0d\n      state.errored = er;\x0d\n    }\x0d\n\x0d\n    // In case of duplex streams we need to notify the readable side of the\x0d\n    // error.\x0d\n    if (stream._readableState && !stream._readableState.errored) {\x0d\n      stream._readableState.errored = er;\x0d\n    }\x0d\n\x0d\n    if (sync) {\x0d\n      process.nextTick(onwriteError\x2C stream\x2C state\x2C er\x2C cb);\x0d\n    } else {\x0d\n      onwriteError(stream\x2C state\x2C er\x2C cb);\x0d\n    }\x0d\n  } else {\x0d\n    if (state.buffered.length > state.bufferedIndex) {\x0d\n      clearBuffer(stream\x2C state);\x0d\n    }\x0d\n\x0d\n    if (sync) {\x0d\n      // It is a common case that the callback passed to .write() is always\x0d\n      // the same. In that case\x2C we do not schedule a new nextTick()\x2C but\x0d\n      // rather just increase a counter\x2C to improve performance and avoid\x0d\n      // memory allocations.\x0d\n      if (state.afterWriteTickInfo !== null &&\x0d\n          state.afterWriteTickInfo.cb === cb) {\x0d\n        state.afterWriteTickInfo.count++;\x0d\n      } else {\x0d\n        state.afterWriteTickInfo = { count: 1\x2C cb\x2C stream\x2C state };\x0d\n        process.nextTick(afterWriteTick\x2C state.afterWriteTickInfo);\x0d\n      }\x0d\n    } else {\x0d\n      afterWrite(stream\x2C state\x2C 1\x2C cb);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction afterWriteTick({ stream\x2C state\x2C count\x2C cb }) {\x0d\n  state.afterWriteTickInfo = null;\x0d\n  return afterWrite(stream\x2C state\x2C count\x2C cb);\x0d\n}\x0d\n\x0d\nfunction afterWrite(stream\x2C state\x2C count\x2C cb) {\x0d\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 &&\x0d\n    state.needDrain;\x0d\n  if (needDrain) {\x0d\n    state.needDrain = false;\x0d\n    stream.emit('drain');\x0d\n  }\x0d\n\x0d\n  while (count-- > 0) {\x0d\n    state.pendingcb--;\x0d\n    cb();\x0d\n  }\x0d\n\x0d\n  if (state.destroyed) {\x0d\n    errorBuffer(state);\x0d\n  }\x0d\n\x0d\n  finishMaybe(stream\x2C state);\x0d\n}\x0d\n\x0d\n// If there's something in the buffer waiting\x2C then invoke callbacks.\x0d\nfunction errorBuffer(state) {\x0d\n  if (state.writing) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\x0d\n    const { chunk\x2C callback } = state.buffered[n];\x0d\n    const len = state.objectMode ? 1 : chunk.length;\x0d\n    state.length -= len;\x0d\n    callback(new ERR_STREAM_DESTROYED('write'));\x0d\n  }\x0d\n\x0d\n  const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n    onfinishCallbacks[i](new ERR_STREAM_DESTROYED('end'));\x0d\n  }\x0d\n\x0d\n  resetBuffer(state);\x0d\n}\x0d\n\x0d\n// If there's something in the buffer waiting\x2C then process it.\x0d\nfunction clearBuffer(stream\x2C state) {\x0d\n  if (state.corked ||\x0d\n      state.bufferProcessing ||\x0d\n      state.destroyed ||\x0d\n      !state.constructed) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const { buffered\x2C bufferedIndex\x2C objectMode } = state;\x0d\n  const bufferedLength = buffered.length - bufferedIndex;\x0d\n\x0d\n  if (!bufferedLength) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  let i = bufferedIndex;\x0d\n\x0d\n  state.bufferProcessing = true;\x0d\n  if (bufferedLength > 1 && stream._writev) {\x0d\n    state.pendingcb -= bufferedLength - 1;\x0d\n\x0d\n    const callback = state.allNoop ? nop : (err) => {\x0d\n      for (let n = i; n < buffered.length; ++n) {\x0d\n        buffered[n].callback(err);\x0d\n      }\x0d\n    };\x0d\n    // Make a copy of `buffered` if it's going to be used by `callback` above\x2C\x0d\n    // since `doWrite` will mutate the array.\x0d\n    const chunks = state.allNoop && i === 0 ?\x0d\n      buffered : ArrayPrototypeSlice(buffered\x2C i);\x0d\n    chunks.allBuffers = state.allBuffers;\x0d\n\x0d\n    doWrite(stream\x2C state\x2C true\x2C state.length\x2C chunks\x2C ''\x2C callback);\x0d\n\x0d\n    resetBuffer(state);\x0d\n  } else {\x0d\n    do {\x0d\n      const { chunk\x2C encoding\x2C callback } = buffered[i];\x0d\n      buffered[i++] = null;\x0d\n      const len = objectMode ? 1 : chunk.length;\x0d\n      doWrite(stream\x2C state\x2C false\x2C len\x2C chunk\x2C encoding\x2C callback);\x0d\n    } while (i < buffered.length && !state.writing);\x0d\n\x0d\n    if (i === buffered.length) {\x0d\n      resetBuffer(state);\x0d\n    } else if (i > 256) {\x0d\n      buffered.splice(0\x2C i);\x0d\n      state.bufferedIndex = 0;\x0d\n    } else {\x0d\n      state.bufferedIndex = i;\x0d\n    }\x0d\n  }\x0d\n  state.bufferProcessing = false;\x0d\n}\x0d\n\x0d\nWritable.prototype._write = function(chunk\x2C encoding\x2C cb) {\x0d\n  if (this._writev) {\x0d\n    this._writev([{ chunk\x2C encoding }]\x2C cb);\x0d\n  } else {\x0d\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()');\x0d\n  }\x0d\n};\x0d\n\x0d\nWritable.prototype._writev = null;\x0d\n\x0d\nWritable.prototype.end = function(chunk\x2C encoding\x2C cb) {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  if (typeof chunk === 'function') {\x0d\n    cb = chunk;\x0d\n    chunk = null;\x0d\n    encoding = null;\x0d\n  } else if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = null;\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n\x0d\n  if (chunk !== null && chunk !== undefined) {\x0d\n    const ret = _write(this\x2C chunk\x2C encoding);\x0d\n    if (ret instanceof Error) {\x0d\n      err = ret;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // .end() fully uncorks.\x0d\n  if (state.corked) {\x0d\n    state.corked = 1;\x0d\n    this.uncork();\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    // Do nothing...\x0d\n  } else if (!state.errored && !state.ending) {\x0d\n    // This is forgiving in terms of unnecessary calls to end() and can hide\x0d\n    // logic errors. However\x2C usually such errors are harmless and causing a\x0d\n    // hard error can be disproportionately destructive. It is not always\x0d\n    // trivial for the user to determine whether end() needs to be called\x0d\n    // or not.\x0d\n\x0d\n    state.ending = true;\x0d\n    finishMaybe(this\x2C state\x2C true);\x0d\n    state.ended = true;\x0d\n  } else if (state.finished) {\x0d\n    err = new ERR_STREAM_ALREADY_FINISHED('end');\x0d\n  } else if (state.destroyed) {\x0d\n    err = new ERR_STREAM_DESTROYED('end');\x0d\n  }\x0d\n\x0d\n  if (typeof cb === 'function') {\x0d\n    if (err || state.finished) {\x0d\n      process.nextTick(cb\x2C err);\x0d\n    } else {\x0d\n      state[kOnFinished].push(cb);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction needFinish(state) {\x0d\n  return (state.ending &&\x0d\n          state.constructed &&\x0d\n          state.length === 0 &&\x0d\n          !state.errored &&\x0d\n          state.buffered.length === 0 &&\x0d\n          !state.finished &&\x0d\n          !state.writing &&\x0d\n          !state.errorEmitted &&\x0d\n          !state.closeEmitted);\x0d\n}\x0d\n\x0d\nfunction callFinal(stream\x2C state) {\x0d\n  let called = false;\x0d\n\x0d\n  function onFinish(err) {\x0d\n    if (called) {\x0d\n      errorOrDestroy(stream\x2C err ?? ERR_MULTIPLE_CALLBACK());\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    state.pendingcb--;\x0d\n    if (err) {\x0d\n      const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n        onfinishCallbacks[i](err);\x0d\n      }\x0d\n      errorOrDestroy(stream\x2C err\x2C state.sync);\x0d\n    } else if (needFinish(state)) {\x0d\n      state.prefinished = true;\x0d\n      stream.emit('prefinish');\x0d\n      // Backwards compat. Don't check state.sync here.\x0d\n      // Some streams assume 'finish' will be emitted\x0d\n      // asynchronously relative to _final callback.\x0d\n      state.pendingcb++;\x0d\n      process.nextTick(finish\x2C stream\x2C state);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  state.sync = true;\x0d\n  state.pendingcb++;\x0d\n\x0d\n  try {\x0d\n    const result = stream._final(onFinish);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            if (!called) {\x0d\n              process.nextTick(onFinish\x2C null);\x0d\n            }\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            if (!called) {\x0d\n              process.nextTick(onFinish\x2C err);\x0d\n            }\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onFinish(err);\x0d\n  }\x0d\n\x0d\n  state.sync = false;\x0d\n}\x0d\n\x0d\nfunction prefinish(stream\x2C state) {\x0d\n  if (!state.prefinished && !state.finalCalled) {\x0d\n    if (typeof stream._final === 'function' && !state.destroyed) {\x0d\n      state.finalCalled = true;\x0d\n      callFinal(stream\x2C state);\x0d\n    } else {\x0d\n      state.prefinished = true;\x0d\n      stream.emit('prefinish');\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction finishMaybe(stream\x2C state\x2C sync) {\x0d\n  if (needFinish(state)) {\x0d\n    prefinish(stream\x2C state);\x0d\n    if (state.pendingcb === 0 && needFinish(state)) {\x0d\n      state.pendingcb++;\x0d\n      if (sync) {\x0d\n        process.nextTick(finish\x2C stream\x2C state);\x0d\n      } else {\x0d\n        finish(stream\x2C state);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction finish(stream\x2C state) {\x0d\n  state.pendingcb--;\x0d\n  state.finished = true;\x0d\n\x0d\n  const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n    onfinishCallbacks[i]();\x0d\n  }\x0d\n\x0d\n  stream.emit('finish');\x0d\n\x0d\n  if (state.autoDestroy) {\x0d\n    // In case of duplex streams we need a way to detect\x0d\n    // if the readable side is ready for autoDestroy as well.\x0d\n    const rState = stream._readableState;\x0d\n    const autoDestroy = !rState || (\x0d\n      rState.autoDestroy &&\x0d\n      // We don't expect the readable to ever 'end'\x0d\n      // if readable is explicitly set to false.\x0d\n      (rState.endEmitted || rState.readable === false)\x0d\n    );\x0d\n    if (autoDestroy) {\x0d\n      stream.destroy();\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(Writable.prototype\x2C {\x0d\n\x0d\n  destroyed: {\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.destroyed : false;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // Backward compatibility\x2C the user is explicitly managing destroyed.\x0d\n      if (this._writableState) {\x0d\n        this._writableState.destroyed = value;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writable: {\x0d\n    get() {\x0d\n      const w = this._writableState;\x0d\n      // w.writable === false means that this is part of a Duplex stream\x0d\n      // where the writable side was disabled upon construction.\x0d\n      // Compat. The user might manually disable writable side through\x0d\n      // deprecated setter.\x0d\n      return !!w && w.writable !== false && !w.destroyed && !w.errored &&\x0d\n        !w.ending && !w.ended;\x0d\n    }\x2C\x0d\n    set(val) {\x0d\n      // Backwards compatible.\x0d\n      if (this._writableState) {\x0d\n        this._writableState.writable = !!val;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableFinished: {\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.finished : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableObjectMode: {\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.objectMode : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableBuffer: {\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.getBuffer();\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableEnded: {\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.ending : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableNeedDrain: {\x0d\n    get() {\x0d\n      const wState = this._writableState;\x0d\n      if (!wState) return false;\x0d\n      return !wState.destroyed && !wState.ending && wState.needDrain;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableHighWaterMark: {\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.highWaterMark;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableCorked: {\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.corked : 0;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableLength: {\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.length;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nconst destroy = destroyImpl.destroy;\x0d\nWritable.prototype.destroy = function(err\x2C cb) {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  // Invoke pending callbacks.\x0d\n  if (!state.destroyed &&\x0d\n    (state.bufferedIndex < state.buffered.length ||\x0d\n      state[kOnFinished].length)) {\x0d\n    process.nextTick(errorBuffer\x2C state);\x0d\n  }\x0d\n\x0d\n  destroy.call(this\x2C err\x2C cb);\x0d\n  return this;\x0d\n};\x0d\n\x0d\nWritable.prototype._undestroy = destroyImpl.undestroy;\x0d\nWritable.prototype._destroy = function(err\x2C cb) {\x0d\n  cb(err);\x0d\n};\x0d\n\x0d\nWritable.prototype[EE.captureRejectionSymbol] = function(err) {\x0d\n  this.destroy(err);\x0d\n};\x0d\n
code-source-info,0xc761d062be,63,7627,9195,C0O7627C9O8212C16O8229C19O8236C23O8218C27O8250C33O8268C44O8268C51O8325C58O8332C63O8354C64O8360C83O8382C88O8380C92O8431C96O8470C104O8499C107O8521C111O8511C115O8554C123O8584C126O8607C130O8597C134O8641C142O8672C145O8696C149O8686C153O8731C161O8760C164O8782C168O8772C172O8815C180O8848C183O8874C187O8864C191O8902C197O8917C204O8950C212O8917C217O8975C224O8982C232O8982C238O9008C245O9020C258O9020C265O9194,,
tick,0x7ff7c11dbe84,211164,0,0x0,3,0x7ff7c08240c0,0x3dde95fee8a,0x3dde95fe8fe,0x3dde95f8347,0x3dde95ec881,0x3dde95e889b,0x3dde95e7d9e,0x3dde95d5f27,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,LazyCompile,10,211189,0xc761d0832e,341,WritableState node:internal/streams/writable:77:23,0x1074169ad68,~
code-source-info,0xc761d0832e
code-creation,LazyCompile,10,211329,0xc761d0873e,23,resetBuffer node:internal/streams/writable:202:21,0x1074169adb8,~
code-source-info,0xc761d0873e,63,7206,7323,C0O7219C2O7234C6O7243C7O7263C11O7271C12O7288C16O7299C17O7313C22O7322,,
code-creation,LazyCompile,10,211386,0xc761d08846,21,set node:internal/streams/readable:1174:8,0x1074168d1d8,~
code-source-info,0xc761d08846,56,36985,37117,C0O37037C6O37069C13O37097C15O37093C20O37116,,
code-creation,LazyCompile,10,211439,0xc761d0899e,131,createHandle node:net:137:22,0x2c63eb294f8,~
code-source-info,0xc761d0899e,101,3745,4121,C0O3766C13O3766C18O3810C23O3810C28O3834C30O3843C35O3862C42O3886C46O3898C49O3912C57O3921C60O3935C67O3869C72O3949C73O3960C75O3969C80O3987C87O4010C91O4022C94O4035C102O4044C105O4057C112O3994C117O4071C118O4082C125O4088C130O4082,,
code-creation,LazyCompile,10,211494,0xc761d08b3e,14,set node:net:1754:6,0x2c63eb2b538,~
code-source-info,0xc761d08b3e,101,48768,48801,C0O48774C2O48786C7O48795C13O48799,,
code-creation,LazyCompile,10,211525,0xc761d08c2e,8,get node:net:1753:6,0x2c63eb2b4e8,~
code-source-info,0xc761d08c2e,101,48732,48760,C0O48737C2O48749C4O48748C7O48758,,
code-creation,LazyCompile,10,211601,0xc761d08dde,196,Readable.on node:internal/streams/readable:874:33,0x1074168cb10,~
code-source-info,0xc761d08dde,56,28621,29547,C0O28647C5O28654C10O28664C15O28667C29O28667C35O28709C40O28730C42O28737C47O28922C55O28922C62O28948C65O28915C69O29044C75O29052C80O29075C85O29075C91O29095C93O29102C98O29136C104O29157C110O29185C112O29230C118O29209C122O29245C123O29259C127O29275C128O29297C132O29313C140O29340C145O29354C150O29313C155O29381C161O29400C164O29400C170O29445C176O29465C179O29473C187O29473C193O29533C195O29544,,
code-creation,LazyCompile,10,211686,0xc761d09056,135,initSocketHandle node:net:254:26,0x2c63eb296d8,~
code-source-info,0xc761d09056,101,6586,7186,C0O6603C5O6603C9O6620C10O6635C14O6724C20O6745C27O6753C32O6767C36O6785C43O6802C45O6800C49O6821C51O6826C57O6864C62O6845C66O6843C70O6895C72O6900C74O6899C78O6915C80O6952C82O6957C84O6956C88O6977C90O7019C94O7038C99O7043C105O7077C106O7084C107O7094C109O7099C114O7108C118O7140C123O7148C128O7148C134O7185,,
code-creation,LazyCompile,10,211756,0xc761d09286,120,undestroy node:internal/streams/destroy:160:19,0x375c9f76bb0,~
code-source-info,0xc761d09286,54,3223,3849,C0O3246C5O3280C10O3301C14O3315C15O3329C19O3342C20O3351C24O3365C25O3380C29O3394C30O3406C34O3420C35O3430C39O3443C40O3458C44O3472C45O3482C49O3496C50O3504C54O3518C55O3531C59O3550C63O3564C64O3578C68O3591C69O3603C73O3617C74O3626C78O3640C79O3655C83O3669C84O3679C88O3692C89O3707C93O3721C94O3729C98O3743C99O3752C103O3766C104O3780C108O3794C109O3808C113O3822C114O3833C119O3848,,
code-creation,LazyCompile,10,211827,0xc761d09486,32,getNewAsyncId node:net:156:23,0x2c63eb29548,~
code-source-info,0xc761d09486,101,4149,4268,C0O4163C4O4196C14O4230C17O4230C22O4252C27O4252C31O4265,,
code-creation,LazyCompile,10,211869,0xc761d09586,5,get node:internal/bootstrap/pre_execution:370:8,0x36339d18478,~
code-source-info,0xc761d09586,96,12136,12171,C0O12148C4O12164,,
code-creation,LazyCompile,10,211901,0xc761d0965e,5,get C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\redir-stdout.js:19:10,0x3dde95f8090,~
code-source-info,0xc761d0965e,140,392,404,C0O398C4O404,,
tick,0x7ffdf681c914,212111,1,0x7ff7c02f7210,6,0x7ff7c0bf59a0,0x3dde95da095,0x3dde95d9bc1,0x3dde95d9a83,0x3dde95d993d,0x3dde95d92e4,0x3dde95d716f,0x3dde95d5e18,0x3dde95d5af2,0x3dde95d49a3,0x3dde95d474d,0x2c63eb0654c,0x2c63eb02065
code-creation,Function,11,212315,0x231d0e0a5e0,1148,readPackageScope node:internal/modules/cjs/loader:321:26,0x36339d1b228,^
code-source-info,0x231d0e0a5e0,111,9239,9772,,,
code-creation,Function,11,212360,0x231d0e0aac0,216, node:vm:313:27,0x3dde95ee208,^
code-source-info,0x231d0e0aac0,88,10064,10115,,,
code-creation,Function,11,212377,0x231d0e0ac00,72,isUint32 node:internal/validators:40:18,0xa8296bccc0,^
code-source-info,0x231d0e0ac00,15,835,882,,,
code-creation,Function,11,212392,0x231d0e0acc0,40,noop node:internal/util/debuglog:47:14,0x2e6f8161ca0,^
code-source-info,0x231d0e0acc0,22,1465,1473,,,
code-creation,Function,11,212416,0x231d0e0ad60,1020,debuglog node:internal/util/debuglog:71:18,0x2e6f8161d40,^
code-source-info,0x231d0e0ad60,22,2302,3328,,,
code-creation,Function,11,212434,0x231d0e0b1c0,252,canBeRequiredByUsers node:internal/bootstrap/loaders:240:30,0xa82968fb20,^
code-source-info,0x231d0e0b1c0,9,7593,7692,,,
code-creation,Function,11,212450,0x231d0e0b320,72,isInt32 node:internal/validators:36:17,0xa8296bc7b0,^
code-source-info,0x231d0e0b320,15,769,814,,,
code-creation,Eval,10,212526,0xc761d09e2e,5, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\soft-exit.js:1:1,0xc761d09ce8,~
script-source,144,C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\soft-exit.js,'use strict'\n\nprocess.on('SIGINT'\x2C process.exit)\nprocess.on('SIGTERM'\x2C process.exit)\n
code-source-info,0xc761d09e2e,144,0,85,C0O0C4O85,,
code-creation,Function,10,212557,0xc761d09ece,56, C:\\Users\\Malinconia\\AppData\\Roaming\\npm\\node_modules\\0x\\lib\\preload\\soft-exit.js:1:1,0xc761d09da8,~
code-source-info,0xc761d09ece,144,0,85,C0O14C4O22C12O35C16O43C21O22C27O49C31O57C39O71C43O79C48O57C55O84,,
code-creation,LazyCompile,10,212673,0xc761d0a5ae,50,initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:522:36,0x2c63eb04770,~
code-source-info,0xc761d0a5ae,96,17219,17447,C0O17227C8O17231C14O17277C17O17285C28O17285C34O17399C40O17399C45O17436C49O17446,,
code-creation,LazyCompile,10,212732,0xc761d0a6d6,80,executeUserEntryPoint node:internal/modules/run_main:70:31,0x3dde95d3a78,~
code-source-info,0xc761d0a6d6,132,2231,2545,C7O2247C14O2251C22O2282C25O2282C30O2329C33O2329C38O2366C40O2391C45O2402C50O2391C56O2506C61O2513C73O2513C79O2544,,
code-creation,LazyCompile,10,212780,0xc761d0ab06,68,resolveMainPath node:internal/modules/run_main:15:25,0x3dde95d3938,~
code-source-info,0xc761d0ab06,132,412,839,C0O588C5O595C12O605C15O610C20O610C30O595C36O641C38O661C39O668C40O703C48O703C53O750C55O782C60O793C65O820C67O836,,
code-creation,Function,11,213083,0x231d0e0b3e0,7720,realpathSync node:fs:2425:22,0x379432d93f0,^
code-source-info,0x231d0e0b3e0,80,66755,70785,,,
code-creation,Function,11,213107,0x231d0e0d280,160,checkListener node:events:258:23,0x2e6f816b2f8,^
code-source-info,0x231d0e0d280,23,7884,7942,,,
code-creation,Function,11,213124,0x231d0e0d380,128,addListener node:events:618:58,0x2e6f816ba38,^
code-source-info,0x231d0e0d380,23,18854,18928,,,
code-creation,LazyCompile,10,213322,0xc761d0b7fe,109,shouldUseESMLoader node:internal/modules/run_main:30:28,0x3dde95d3988,~
code-source-info,0xc761d0b7fe,132,870,1445,C0O905C8O905C13O949C15O970C16O982C17O1027C25O1027C30O1085C32O1117C37O1134C38O1146C39O1196C45O1212C51O1212C58O1260C59O1272C60O1276C66O1293C72O1293C79O1341C80O1354C81O1370C86O1370C91O1401C93O1419C98O1424C105O1429C108O1442,,
code-creation,LazyCompile,10,213447,0xc761d0ba76,70,runMainESM node:internal/modules/run_main:47:20,0x3dde95d39d8,~
code-source-info,0xc761d0ba76,132,1468,1817,C0O1468C12O1504C20O1504C25O1492C30O1573C38O1573C43O1555C49O1603C54O1621C59O1621C64O1603C69O1816,,
code-creation,LazyCompile,10,213513,0xc761d0bcb6,222,loadESM node:internal/process/esm_loader:85:41,0x36339d21870,~
code-source-info,0xc761d0bcb6,113,2652,2979,C10O2652C21O2679C24O2685C35O2679C58O2710C60O2725C63O2716C75O2710C113O2761C120O2765C125O2813C130O2821C138O2821C143O2850C154O2857C155O2870C163O2870C168O2895C178O2896C197O2978,,
code-creation,LazyCompile,10,213586,0xc761d0c2d6,284,initializeLoader node:internal/process/esm_loader:50:32,0x36339d21740,~
code-source-info,0xc761d0c2d6,113,1490,2608,C10O1490C18O1525C24O1525C29O1506C34O1690C37O1690C42O1755C48O1763C59O1770C60O1812C66O1812C71O1784C76O1841C79O1841C83O1900C88O1919C91O1933C96O1933C103O1939C110O1923C111O1964C114O2229C119O2229C125O2371C132O2404C135O2404C140O2422C147O2434C152O2434C163O2377C176O2347C202O2563C207O2579C212O2579C225O2563C259O2607,,
code-creation,LazyCompile,10,213681,0xc761d0c5c6,175,handleMainPromise node:internal/modules/run_main:58:33,0x3dde95d3a28,~
code-source-info,0xc761d0c5c6,132,1853,2010,C10O1853C18O1868C21O1876C31O1887C34O1876C43O1921C53O1928C90O1963C93O1971C103O1983C106O1971C150O2009,,
code-creation,LazyCompile,10,213778,0xc761d0c806,318,processTicksAndRejections node:internal/process/task_queues:68:35,0x273fd31aa00,~
code-source-info,0xc761d0c
code-creation,LazyCompile,10,213857,0xc761d0cade,43,shift node:internal/fixed_queue:108:8,0x273fd31fd20,~
code-source-info,0xc761d0cade,34,4061,4295,C0O4089C5O4118C10O4118C15O4141C20O4141C26O4159C32O4260C36O4253C40O4278C42O4290,,
code-creation,LazyCompile,10,213899,0xc761d0cc26,54,shift node:internal/fixed_queue:80:8,0x273fd31fb30,~
code-source-info,0xc761d0cc26,34,3379,3596,C0O3411C5O3421C9O3415C13O3435C15O3470C16O3482C17O3493C22O3503C28O3511C32O3549C36O3556C42O3563C44O3561C47O3541C51O3575C53O3591,,
code-creation,LazyCompile,10,213944,0xc761d0cd5e,42,emitBeforeScript node:internal/async_hooks:510:26,0xa8296b8c78,~
code-source-info,0xc761d0cd5e,13,17372,17528,C0O17413C12O17413C17O17471C22O17484C25O17475C31O17499C36O17499C41O17527,,
code-creation,LazyCompile,10,213993,0xc761d0ceae,180,pushAsyncContext node:internal/async_hooks:540:26,0xa8296b8e20,~
code-source-info,0xc761d0ceae,13,18046,18601,C0O18102C7O18120C9O18119C13O18138C20O18172C24O18187C26O18198C32O18205C35O18216C40O18232C44O18202C49O18245C54O18252C59O18295C60O18299C65O18310C72O18333C78O18340C83O18356C85O18355C88O18338C92O18379C97O18390C104O18413C107O18417C113O18424C118O18440C120O18439C123O18422C127O18461C134O18479C142O18492C146O18499C153O18515C158O18534C162O18548C169O18564C174O18581C179O18600,,
code-creation,LazyCompile,10,214096,0xc761d0d0c6,125, node:internal/child_process:708:22,0x36339d0ee58,~
tick,0x7ff7c0af799c,214108,0,0x0,3,0x7ff7c08240c0,0xc761d0c847
code-source-info,0xc761d0d0c6,100,20124,20501,C0O20139C3O20151C12O20170C20O20170C27O20205C28O20212C29O20239C32O20246C41O20254C43O20253C47O20288C52O20316C54O20329C55O20336C56O20359C58O20364C60O20364C65O20390C75O20410C85O20432C89O20390C94O20375C99O20346C102O20456C105O20463C114O20471C119O20489C124O20500,,
code-creation,LazyCompile,10,214234,0xc761d0d286,31,listenerCount node:events:854:23,0x2e6f816bf80,~
code-source-info,0xc761d0d286,23,25515,25797,C0O25547C5O25561C7O25613C9O25619C13O25634C17O25681C19O25690C20O25703C24O25760C28O25767C29O25785C30O25794,,
code-creation,LazyCompile,10,214273,0xc761d0d38e,13,destroyHooksExist node:internal/async_hooks:487:27,0xa8296b8b88,~
code-source-info,0xc761d0d38e,13,16798,16835,C0O16806C5O16822C8O16813C12O16832,,
code-creation,LazyCompile,10,214305,0xc761d0d47e,32,emitAfterScript node:internal/async_hooks:518:25,0xa8296b8cc8,~
code-source-info,0xc761d0d47e,13,17558,17659,C0O17573C5O17586C8O17577C14O17600C19O17600C23O17631C26O17631C31O17658,,
code-creation,LazyCompile,10,214356,0xc761d0d5e6,167,popAsyncContext node:internal/async_hooks:554:25,0xa8296b8e70,~
code-source-info,0xc761d0d5e6,13,18694,19296,C0O18729C7O18747C9O18746C13O18765C14O18781C19O18788C20O18801C21O18807C24O18811C31O18834C36O18850C38O18849C44O18869C49O18953C54O18960C58O18986C59O19012C61O19024C65O19032C72O19048C77O19069C80O19080C87O19098C90O19095C93O19067C97O19112C104O19128C109O19147C112O19158C119O19176C122O19185C125O19173C128O19145C132O19194C137O19220C142O19220C146O19230C153O19248C158O19262C162O19275C163O19289C166O19293,,
code-creation,LazyCompile,10,214434,0xc761d0d7c6,13,enabledHooksExist node:internal/async_hooks:475:27,0xa8296b8a78,~
code-source-info,0xc761d0d7c6,13,16609,16644,C0O16617C5O16633C8O16624C12O16641,,
code-creation,LazyCompile,10,214512,0xc761d0d976,77, node:internal/modules/run_main:51:29,0xc761d0b9b0,~
code-source-info,0xc761d0d976,132,1629,1811,C0O1664C7O1669C15O1669C24O1699C30O1699C35O1722C44O1762C55O1786C60O1786C71O1768C76O1806,,
code-creation,LazyCompile,10,214593,0xc761d0dbf6,283,pathToFileURL node:internal/url:1458:23,0x273fd339198,~
code-source-info,0xc761d0dbf
code-creation,LazyCompile,10,214680,0xc761d0dec6,136,URL node:internal/url:621:14,0x273fd337fb0,~
code-source-info,0xc761d0dec6,39,17620,18024,C13O17688C17O17717C19O17736C23O17769C30O17784C40O17798C42O17797C46O17820C50O17825C57O17840C60O17836C65O17834C69O17859C85O17912C93O17912C103O17969C117O17969C129O17859C135O18023,,
code-creation,LazyCompile,10,214729,0xc761d0e0a6,51,URLContext node:internal/url:161:14,0x273fd337750,~
code-source-info,0xc761d0e0a6,39,3883,4105,C0O3893C1O3904C5O3914C7O3926C11O3938C13O3952C17O3963C19O3977C23O3988C24O3998C28O4011C29O4021C33O4034C35O4044C39O4055C40O4066C44O4079C45O4093C50O4104,,
code-creation,LazyCompile,10,214820,0xc761d0e2ee,190,onParseComplete node:internal/url:533:25,0x273fd337ce0,~
code-source-info,0xc761d0e2ee,39,14738,15424,C0O14854C2O14859C4O14858C8O14872C10O14882C14O14894C16O14905C20O14920C22O14944C24O14942C29O14968C43O14933C47O14994C49O15018C51O15016C56O15042C70O15007C74O15068C76O15077C80O15088C82O15108C84O15106C89O15128C101O15136C103O15097C107O15150C109O15160C113O15172C115O15185C119O15200C121O15209C125O15220C127O15230C129O15229C134O15284C136O15289C141O15309C144O15305C149O15303C153O15333C155O15338C157O15337C163O15352C168O15361C172O15377C177O15399C179O15398C183O15377C189O15423,,
code-creation,LazyCompile,10,214978,0xc761d0e776,889,URLSearchParams node:internal/url:183:14,0x273fd3377f0,~
code-source-info,0xc761d0e776,39,4530,6988,C10O4556C16O4606C18O4611C24O4625C30O4643C42O4727C44O4732C46O4731C50O4756C52O4776C54O4775C57O4767C62O4977C64O4982C66O4981C71O5006C73O5011C77O5039C83O5039C87O5025C93O5062C101O5118C107O5165C119O5171C124O5165C125O5370C128O5402C156O5394C187O5394C190O5421C208O5544C210O5543C217O5591C233O5597C238O5591C239O5702C243O5739C271O5728C302O5728C305O5758C313O5792C317O5792C323O5758C331O5717C407O5826C413O5826C418O5383C492O5890C494O5895C500O5909C504O5943C532O5935C563O5935C566O5972C574O5979C579O6001C595O6007C600O6001C601O6090C609O6114C611O6113C617O6133C624O6142C629O6090C634O5924C707O6291C709O6296C715O6310C719O6338C725O6338C730O6382C732O6394C736O6387C741O6432C743O6436C747O6465C753O6465C759O6520C761O6551C767O6595C773O6595C778O6645C786O6661C791O6645C796O6682C798O6687C800O6686C805O6701C811O6701C817O6403C822O6369C827O6803C833O6810C838O6836C839O6844C846O6848C851O6869C861O6869C867O6886C871O6886C876O6962C878O6967C883O6976C888O6987,,
code-creation,LazyCompile,10,215096,0xc761d0ed56,35,initSearchParams node:internal/url:1019:26,0x273fd338cf8,~
code-source-info,0xc761d0ed56,39,28156,28277,C0O28173C4O28191C6O28195C11O28209C15O28220C16O28227C17O28236C19O28240C25O28256C29O28254C34O28276,,
code-creation,LazyCompile,10,215165,0xc761d0ef06,199,encodePathChars node:internal/url:1443:25,0x273fd339148,~
code-source-info,0xc761d0ef06,39,40900,41605,C0O40916C8O40920C15O40965C22O41009C31O40976C38O41091C46O41109C52O41109C59O41155C66O41199C75O41166C82O41226C90O41230C97O41276C104O41320C113O41287C120O41345C128O41349C135O41395C142O41439C151O41406C158O41471C166O41475C173O41521C180O41565C189O41532C196O41586C198O41602,,
code-creation,LazyCompile,10,215247,0xc761d0f136,70,set pathname node:internal/url:887:15,0x273fd3388e8,~
code-source-info,0xc761d0f136,39,24614,24823,C0O24663C5O24686C9O24695C11O24694C16O24717C17O24724C18O24730C29O24742C38O24765C40O24764C49O24806C54O24806C63O24730C69O24822,,
code-creation,LazyCompile,10,215289,0xc761d0f286,31, node:internal/url:638:21,0x273fd338088,~
code-source-info,0xc761d0f286,39,18137,18214,C0O18147C4O18160C6O18159C10O18169C19O18177C21O18175C26O18203C30O18209,,
code-creation,LazyCompile,10,215347,0xc761d0f3b6,108,onParsePathComplete node:internal/url:592:29,0x273fd337ec0,~
code-source-info,0xc761d0f3b6,39,16756,17238,C0O16876C2O16881C4O16880C8O16894C10O16907C12O16905C17O16927C22O16941C24O16950C28O16963C35O16976C40O16973C46O17013C48O17022C52O17033C59O17047C61O17046C66O17043C70O17129C72O17142C74O17140C79O17162C84O17176C86O17185C90O17198C97O17211C102O17208C107O17237,,
code-creation,LazyCompile,10,215399,0xc761d0f556,18,get href node:internal/url:736:11,0x273fd338218,~
code-source-info,0xc761d0f556,39,20900,20940,C0O20910C4O20922C6O20921C12O20930C17O20935,,
code-creation,LazyCompile,10,215479,0xc761d0f80e,393, node:internal/url:684:12,0x273fd338178,~
code-source-info,0xc761d0f80e
code-creation,LazyCompile,10,215607,0xc761d0fc9e,308,import node:internal/modules/esm/loader:372:15,0x36339d22f20,~
code-source-info,0xc761d0fc9e,114,11547,12117,C10O11547C18O11611C25O11611C30O11642C32O11655C41O11669C50O11714C55O11740C64O11740C70O11778C81O11973C90O11793C98O11783C100O11783C116O11821C123O11844C137O11821C143O11887C154O11888C160O11922C170O11923C175O11814C186O11765C201O12001C212O12022C217O12018C223O12007C235O12001C261O12055C270O12108C283O12112,,
code-creation,LazyCompile,10,215696,0xc761d10006,251,getModuleJob node:internal/modules/esm/loader:285:21,0x36339d22ed0,~
code-source-info,0xc761d10006,114,8519,9368,C10O8519C18O8571C20O8604C22O8613C26O8622C33O8629C38O8796C49O8847C54O8847C59O8834C65O8940C82O8940C95O8929C118O8906C123O8914C128O9021C133O9031C138O9057C143O9031C150O9132C154O9177C159O9187C166O9213C176O9187C181O9235C185O9267C187O9278C208O9294C214O9352C226O9363,,
code-creation,LazyCompile,10,215795,0xc761d1045e,425,resolve node:internal/modules/esm/loader:556:16,0x36339d23060,~
code-source-info,0xc761d1045e,114,17002,18544,C10O17002C32O17068C37O17068C75O17114C79O17146C91O17217C94O17217C100O17249C120O17255C125O17249C126O17379C133O17430C135O17435C140O17445C144O17474C146O17479C150O17490C157O17497C168O17542C174O17552C178O17604C185O17641C191O17662C197O17689C207O17587C220O17581C246O17749C252O17794C270O17800C275O17794C276O17929C281O17937C286O17964C297O18044C318O18050C323O18044C324O18195C330O18279C351O18285C356O18279C357O18424C366O18424C371O18496C378O18512C384O18527C400O18539,,
code-creation,LazyCompile,10,216032,0xc761d10ad6,939,defaultResolve node:internal/modules/esm/resolve:1128:30,0x36339d2b438,~
code-source-info,0xc761d10ad
code-creation,LazyCompile,10,216301,0xc761d13916,31,shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:975:49,0x36339d2b258,~
code-source-info,0xc761d13916,118,32653,32792,C0O32670C2O32684C7O32692C8O32705C9O32709C10O32722C16O32726C21O32735C22O32747C23O32751C26O32758C30O32789,,
code-creation,LazyCompile,10,216350,0xc761d13a2e,81,isRelativeSpecifier node:internal/modules/esm/resolve:965:29,0x36339d2b208,~
code-source-info,0xc761d13a2e,118,32350,32601,C0O32367C1O32380C7O32384C12O32414C19O32421C26O32439C32O32443C37O32452C38O32464C39O32470C41O32483C47O32487C52O32519C59O32526C66O32544C72O32548C77O32557C78O32569C79O32585C80O32598,,
code-creation,LazyCompile,10,216409,0xc761d13bbe,15,get protocol node:internal/url:772:15,0x273fd338358,~
code-source-info,0xc761d13bbe,39,21820,21863,C0O21830C4O21842C6O21841C10O21851C14O21858,,
tick,0x7ff7c11cf8d9,216435,0,0x0,3,0x7ff7c08240c0,0xc761d1052d,0xc761d10058,0xc761d0fd27,0xc761d0d9bd,0xc761d0bcf5,0x7ff7c0c8b243,0x7ff7c0274770,0xc761d0c90b
code-creation,LazyCompile,10,216467,0xc761d13db6,191,checkIfDisallowedImport node:internal/modules/esm/resolve:1059:33,0x36339d2b348,~
code-source-info,0xc761d13db6,118,35531,36707,C0O35573C4O35619C16O35648C24O35619C29O35692C36O35701C41O35739C48O35748C53O35777C56O35781C62O35940C66O35972C73O35981C78O36015C85O36024C90O36060C106O36066C111O36060C112O36252C117O36273C127O36280C128O36297C133O36314C138O36314C145O36358C161O36364C166O36358C167O36538C183O36544C188O36538C190O36706,,
code-creation,LazyCompile,10,216534,0xc761d1401e,104,throwIfUnsupportedURLScheme node:internal/modules/esm/resolve:1107:37,0x36339d2b3e8,~
code-source-info,0xc761d1401e,118,36954,37425,C0O36996C4O37028C11O37037C16O37064C23O37073C30O37103C32O37158C39O37167C44O37199C51O37208C56O37248C63O37297C77O37356C88O37297C96O37254C101O37248C103O37424,,
code-creation,LazyCompile,10,216615,0xc761d141d6,64,getConditionsSet node:internal/modules/esm/resolve:170:26,0x36339d2aa88,~
code-source-info,0xc761d141d6,118,5549,5885,C0O5567C6O5614C8O5610C13O5641C18O5646C24O5681C40O5687C45O5681C46O5812C53O5819C58O5843C59O5852C63O5882,,
code-creation,LazyCompile,10,216678,0xc761d14356,171,moduleResolve node:internal/modules/esm/resolve:988:23,0x36339d2b2a8,~
code-source-info,0xc761d14356,118,32994,33785,C0O33069C7O33078C12O33103C19O33112C23O33235C25O33248C28O33252C34O33311C47O33322C55O33358C60O33384C66O33388C71O33404C83O33420C89O33407C99O33503C106O33514C115O33512C116O33556C120O33582C132O33593C138O33675C145O33684C150O33702C152O33718C153O33722C165O33729C170O33782,,
code-creation,LazyCompile,10,216802,0xc761d146e6,490,finalizeResolution node:internal/modules/esm/resolve:397:28,0x36339d2ad08,~
code-source-info,0xc761d146e
code-creation,LazyCompile,10,216931,0xc761d14b06,78,get pathname node:internal/url:878:15,0x273fd338878,~
code-source-info,0xc761d14b06,39,24396,24596,C0O24418C4O24423C6O24422C10O24438C14O24447C16O24446C21O24480C27O24484C30O24488C31O24502C36O24507C42O24514C47O24528C49O24538C50O24544C57O24555C60O24578C68O24555C77O24591,,
code-creation,LazyCompile,10,217033,0xc761d14d5e,106,fileURLToPath node:internal/url:1416:23,0x273fd3390f8,~
code-source-info,0xc761d14d5e,39,39764,40097,C0O39776C6O39811C13O39818C22O39841C25O39846C31O39872C49O39878C54O39872C55O39949C62O39958C67O39976C77O39982C82O39976C83O40021C92O40040C101O40068C105O40094,,
code-creation,LazyCompile,10,217101,0xc761d14f96,150,get origin node:internal/url:749:13,0x273fd3382e8,~
code-source-info,0xc761d14f96,39,21222,21802,C0O21306C4O21311C6O21310C10O21338C59O21386C64O21391C70O21398C78O21435C83O21455C89O21459C95O21443C101O21465C105O21472C110O21570C116O21591C117O21703C122O21735C127O21747C132O21757C137O21710C142O21763C143O21776C149O21797,,
code-creation,LazyCompile,10,217186,0xc761d15266,261,getPathFromURLWin32 node:internal/url:1363:29,0x273fd339058,~
code-source-info,0xc761d
code-creation,LazyCompile,10,217255,0xc761d1550e,19,get hostname node:internal/url:844:15,0x273fd3386c8,~
code-source-info,0xc761d1550e,39,23572,23619,C0O23582C4O23594C6O23593C10O23603C18O23614,,
code-creation,LazyCompile,10,217324,0xc761d15886,30,tryStatSync node:internal/modules/esm/resolve:189:3,0x36339d2b488,~
code-source-info,0xc761d15886,118,6098,6164,C0O6153C5O6117C10O6108C21O6157C24O6153C29O6164,,
code-creation,LazyCompile,10,217379,0xc761d15a3e,123,statSync node:fs:1543:18,0x379432d84e8,~
code-source-info,0xc761d15a3e,80,40711,41125,C7O40711C16O40774C21O40781C26O40820C33O40822C40O40847C45O40855C52O40860C55O40871C60O40871C66O40933C76O40855C82O40973C88O40988C96O41001C102O41030C103O41047C104O41056C109O41056C113O41088C118O41095C122O41122,,
code-creation,LazyCompile,10,217488,0xc761d15c4e,64,hasNoEntryError node:fs:1480:25,0x379432d83b8,~
code-source-info,0xc761d15c4e,80,39085,39287,C0O39104C6O39132C11O39148C16O39132C21O39161C27O39175C36O39179C39O39192C40O39211C46O39236C51O39242C58O39247C61O39260C62O39271C63O39284,,
code-creation,LazyCompile,10,217565,0xc761d15d86,576,getStatsFromBinding node:internal/fs/utils:531:29,0x379432e24e0,~
code-source-info,0xc761d15d86,81,14559,15632,C13O14584C18O14588C24O14620C31O14659C34O14656C43O14678C46O14675C55O14697C58O14694C67O14723C70O14720C79O14742C82O14739C91O14761C94O14758C103O14787C106O14784C115O14806C118O14803C127O14825C130O14822C139O14851C142O14848C154O14899C157O14895C167O14919C170O14915C174O14869C189O14968C192O14964C202O14988C205O14984C210O14938C225O15037C228O15033C239O15057C242O15053C247O15007C263O15106C266O15102C277O15126C280O15122C285O15076C294O14627C299O15144C300O15153C307O15184C310O15181C319O15203C322O15200C331O15222C334O15219C343O15246C346O15243C355O15265C358O15262C367O15284C370O15281C379O15308C382O15305C391O15327C394O15324C403O15346C406O15343C415O15370C418O15367C430O15410C433O15406C443O15430C446O15426C450O15386C465O15471C468O15467C478O15491C481O15487C486O15447C501O15532C504O15528C515O15552C518O15548C523O15508C539O15593C542O15589C553O15613C556O15609C561O15569C570O15160C575O15629,,
code-creation,LazyCompile,10,217677,0xc761d161b6,16,isBigUint64Array node:internal/util/types:53:26,0x2e6f8147880,~
code-source-info,0xc761d161b6,17,1423,1514,C0O1436C5O1443C12O1490C15O1511,,
code-creation,LazyCompile,10,217711,0xc761d162d6,19,msFromTimeSpec node:internal/fs/utils:447:24,0x379432e2208,~
code-source-info,0xc761d162d6,81,11486,11547,C0O11503C2O11516C4O11514C10O11535C12O11533C15O11526C18O11544,,
code-creation,LazyCompile,10,217759,0xc761d16516,116,Stats node:internal/fs/utils:496:15,0x379432e2400,~
code-source-info,0xc761d16516,81,13278,13819,C0O13418C41O13418C46O13548C48O13561C52O13575C54O13588C58O13602C60O13615C64O13629C66O13646C70O13664C73O13677C77O13675C81O13701C84O13714C88O13712C92O13738C95O13751C99O13749C103O13775C106O13792C110O13790C115O13818,,
code-creation,LazyCompile,10,217808,0xc761d166ee,62,StatsBase node:internal/fs/utils:401:19,0x379432e1dd8,~
code-source-info,0xc761d166ee,81,10347,10648,C0O10435C2O10444C6O10454C8O10464C12O10475C14O10486C18O10498C20O10507C24O10517C26O10526C30O10536C32O10546C36O10557C38O10570C42O10584C44O10593C48O10603C50O10613C54O10624C56O10636C61O10647,,
code-creation,LazyCompile,10,217868,0xc761d168e6,29,dateFromMs node:internal/fs/utils:461:20,0x379432e22a8,~
code-source-info,0xc761d168e6,81,12012,12059,C0O12022C7O12038C10O12038C17O12049C23O12029C28O12056,,
code-creation,LazyCompile,10,217909,0xc761d169ee,16,StatsBase.isDirectory node:internal/fs/utils:415:43,0x379432e1e28,~
code-source-info,0xc761d169ee,81,10694,10745,C0O10714C7O10733C10O10714C15O10742,,
code-creation,LazyCompile,10,217946,0xc761d16b06,54,Stats._checkModeProperty node:internal/fs/utils:518:46,0x379432e2450,~
code-source-info,0xc761d16b06,81,14177,14405,C0O14193C8O14224C10O14220C17O14248C19O14244C26O14277C28O14273C33O14295C34O14308C35O14374C42O14381C44O14379C50O14389C53O14402,,
code-creation,LazyCompile,10,217982,0xc761d16c3e,16,StatsBase.isFile node:internal/fs/utils:419:38,0x379432e1eb8,~
code-source-info,0xc761d16c3e,81,10787,10838,C0O10807C7O10826C10O10807C15O10835,,
tick,0x7ffdf681d014,218101,1,0x7ff7c02f7210,6,0x7ff7c0bf59a0,0x231d0e0baea,0xc761d14888,0xc761d143fb,0xc761d10d41,0xc761d1052d,0xc761d10058,0xc761d0fd27,0xc761d0d9bd,0xc761d0bcf5,0x7ff7c0c8b243,0x7ff7c0274770,0xc761d0c90b
code-creation,Function,11,218217,0x231d0e0d460,568,handleErrorFromBinding node:internal/fs/utils:341:32,0x379432e1ce8,^
code-source-info,0x231d0e0d460,81,8304,8815,,,
code-creation,Function,11,218240,0x231d0e0d700,152,hasHooks node:internal/async_hooks:471:18,0xa8296b8a28,^
code-source-info,0x231d0e0d700,13,16531,16579,,,
code-creation,Function,11,218256,0x231d0e0d800,108,isEmpty node:internal/fixed_queue:67:10,0x273fd31fa10,^
code-source-info,0x231d0e0d800,34,3150,3197,,,
code-creation,Function,11,218288,0x231d0e0d8e0,1916,getPathFromURLWin32 node:internal/url:1363:29,0x273fd339058,^
code-source-info,0x231d0e0d8e0,39,37816,39214,,,
code-creation,Function,11,218307,0x231d0e0e0c0,164,isUint8Array node:internal/util/types:13:22,0x2e6f8147418,^
code-source-info,0x231d0e0e0c0,17,269,356,,,
code-creation,Function,11,218324,0x231d0e0e1e0,188,isURLInstance node:internal/url:1495:23,0x273fd339208,^
code-source-info,0x231d0e0e1e0,39,42921,43020,,,
code-creation,LazyCompile,10,218440,0xc761d171ae,37,get search node:internal/url:896:13,0x273fd338958,~
code-source-info,0xc761d171ae,39,24839,24970,C0O24867C4O24872C6O24871C10O24857C15O24887C19O24915C24O24930C26O24940C27O24946C32O24957C36O24965,,
code-creation,LazyCompile,10,218483,0xc761d172f6,37,get hash node:internal/url:926:11,0x273fd338aa8,~
code-source-info,0xc761d172f6,39,25601,25744,C0O25632C4O25637C6O25636C10O25619C15O25652C19O25686C24O25701C26O25711C27O25717C32O25728C36O25739,,
code-creation,LazyCompile,10,218570,0xc761d17486,181,set search node:internal/url:903:13,0x273fd3389c8,~
code-source-info,0xc761d17486,39,24986,25509,C0O25014C4O25019C6O25018C10O25034C17O25043C23O25069C25O25080C30O25097C31O25107C35O25122C44O25136C46O25135C51O25132C57O25178C58O25188C64O25192C69O25201C79O25210C86O25250C88O25260C92O25273C101O25286C106O25283C110O25314C114O25337C125O25351C134O25385C142O25385C154O25337C159O25459C168O25481C170O25480C174O25459C180O25508,,
code-creation,LazyCompile,10,218652,0xc761d1767e,41,toUSVString node:internal/util:59:21,0x2e6f8145110,~
code-source-info,0xc761d1767e,16,1409,1709,C0O1432C4O1586C11O1606C14O1586C20O1636C22O1653C24O1664C25O1668C30O1699C35O1675C40O1706,,
code-creation,LazyCompile,10,218723,0xc761d177f6,144,set hash node:internal/url:933:11,0x273fd338b10,~
code-source-info,0xc761d177f6,39,25758,26205,C0O25784C4O25789C6O25788C10O25839C15O25862C17O25882C18O25895C22O25910C31O25924C33O25923C38O25920C42O25955C43O25962C44O25975C45O25983C51O25987C56O25996C66O26003C73O26039C75O26052C79O26063C88O26076C93O26073C97O26105C108O26117C117O26150C125O26150C137O26105C143O26204,,
code-creation,LazyCompile,10,218779,0xc761d179be,51,throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:1100:39,0x36339d2b398,~
code-source-info,0xc761d179be,118,36749,36914,C0O36768C7O36777C12O36796C19O36805C24O36831C31O36840C36O36860C43O36866C48O36860C50O36913,,
code-creation,LazyCompile,10,218843,0xc761d17e26,64,defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:103:39,0x36339d2f678,~
code-source-info,0xc761d17e26,119,3548,3759,C0O3583C7O3583C13O3600C20O3635C23O3660C28O3605C35O3676C36O3688C37O3692C42O3723C46O3715C58O3732C63O3756,,
code-creation,LazyCompile,10,218882,0xc761d18366,18,toString node:internal/url:732:11,0x273fd3381c8,~
code-source-info,0xc761d18366,39,20846,20886,C0O20856C4O20868C6O20867C12O20876C17O20881,,
code-creation,LazyCompile,10,218969,0xc761d1870e,280,getFileProtocolModuleFormat node:internal/modules/esm/get_format:51:37,0x36339d2f5d8,~
code-source-info,0xc761d1870e,119,1588,2922,C0O1639C5O1639C10O1674C15O1674C20O1696C22O1704C27O1722C32O1729C39O1749C50O1786C51O1812C58O1830C62O1840C64O1852C66O1866C67O1872C74O1908C79O2007C83O2025C84O2042C85O2065C88O2074C93O2078C100O2098C107O2118C112O2150C117O2150C122O2206C127O2206C132O2254C139O2275C142O2291C147O2275C156O2254C162O2324C167O2395C171O2491C182O2470C191O2568C201O2545C207O2621C216O2747C229O2765C239O2708C243O2799C259O2805C264O2799C265O2874C270O2881C279O2919,,
code-creation,LazyCompile,10,219102,0xc761d18ae6,275,extname node:path:836:10,0x375c9f4d838,~
code-source-info,0xc761d18ae
code-creation,LazyCompile,10,219186,0xc761d18d76,13,getPackageType node:internal/modules/esm/resolve:848:24,0x36339d2b0c8,~
code-source-info,0xc761d18d76,118,28538,28631,C0O28571C3O28571C8O28623C12O28628,,
code-creation,LazyCompile,10,219244,0xc761d18fce,173,getPackageScopeConfig node:internal/modules/esm/resolve:253:31,0x36339d2ab28,~
code-source-info,0xc761d18fce,118,7802,8901,C0O7839C13O7839C19O7938C24O7953C32O7957C39O8035C41O8069C46O8086C49O8086C54O8069C60O8195C66O8203C68O8224C69O8259C72O8280C85O8297C91O8506C96O8538C100O8515C105O8548C107O7879C110O8587C115O8587C120O8643C127O8661C132O8709C137O8731C142O8775C147O8800C154O8820C159O8837C164O8837C170O8877C172O8898,,
code-creation,LazyCompile,10,219389,0xc761d193ee,331,getPackageConfig node:internal/modules/esm/resolve:197:26,0x36339d2aad8,~
code-source-info,0xc761d193ee,118,6331,7694,C0O6377C5O6394C10O6394C16O6408C18O6443C20O6459C21O6483C26O6501C31O6501C37O6511C42O6523C44O6578C51O6598C56O6639C61O6663C66O6711C71O6738C78O6762C83O6779C88O6779C94O6810C96O6831C97O6846C102O6873C107O6887C115O6885C125O6932C137O6991C144O7002C163O7029C168O7043C174O7029C178O7027C185O7076C192O6938C197O6932C198O7108C203O7117C208O7123C213O7129C218O7162C223O7190C233O7243C235O7267C241O7297C243O7318C249O7348C251O7423C253O7432C260O7453C265O7469C268O7511C275O7529C281O7559C287O7570C293O7581C299O7592C305O7606C312O7624C317O7641C322O7641C328O7670C330O7691,,
code-creation,Function,11,219549,0x231d0e0e300,956,URL node:internal/url:621:14,0x273fd337fb0,^
code-source-info,0x231d0e0e300,39,17620,18024,,,
code-creation,Function,11,219574,0x231d0e0e720,280, node:internal/url:638:21,0x273fd338088,^
code-source-info,0x231d0e0e720,39,18137,18214,,,
code-creation,Function,11,219590,0x231d0e0e8a0,156,get protocol node:internal/url:772:15,0x273fd338358,^
code-source-info,0x231d0e0e8a0,39,21820,21863,,,
code-creation,Function,11,219607,0x231d0e0e9a0,340,URLContext node:internal/url:161:14,0x273fd337750,^
code-source-info,0x231d0e0e9a0,39,3883,4105,,,
code-creation,Function,11,219633,0x231d0e0eb60,1468,onParseComplete node:internal/url:533:25,0x273fd337ce0,^
code-source-info,0x231d0e0eb60,39,14738,15424,,,
code-creation,LazyCompile,10,219739,0xc761d19ce6,78,get node:internal/modules/esm/module_map:18:6,0x36339d254e0,~
code-source-info,0xc761d19ce6,115,604,748,C11O617C18O645C28O645C33O678C43O678C48O713C50O726C61O726C71O736C77O743,,
code-creation,LazyCompile,10,219807,0xc761d19ede,111,#createModuleJob node:internal/modules/esm/loader:321:19,0x36339d22cf0,~
code-source-info,0xc761d19ede,114,10035,10886,C0O10035C17O10108C22O10555C31O10598C37O10598C42O10657C70O10657C76O10810C79O10815C84O10825C92O10851C103O10825C108O10870C110O10881,,
code-creation,LazyCompile,10,219899,0xc761d1a206,196,ModuleJob node:internal/modules/esm/module_job:56:14,0x36339d26370,~
code-source-info,0xc761d1a206,116,1367,3272,C0O1367C27O1400C32O1400C50O1478C55O1490C59O1505C64O1527C68O1552C73O1564C77O1579C82O1595C86O1616C90O1628C94O1766C101O1787C104O1816C113O1825C122O1830C135O1787C140O1785C144O1937C149O2948C152O2962C155O2960C159O3072C169O3099C178O3107C181O3072C186O3237C190O3255C195O3271,,
code-creation,LazyCompile,10,219982,0xc761d1ac7e,193,moduleProvider node:internal/modules/esm/loader:322:28,0xc761d19e08,~
code-source-info,0xc761d1ac7e,114,10108,10527,C10O10108C18O10206C21O10217C26O10222C33O10238C39O10255C43O10217C57O10206C80O10165C85O10187C90O10312C97O10324C102O10324C108O10351C110O10379C125O10385C130O10379C131O10452C153O10459C168O10520,,
tick,0x7ff7c08dccbb,220098,0,0x0,2,0x7ff7c08240c0,0xc761d1aca9,0xc761d1a28d,0xc761d19f24,0xc761d100d6,0x7ff7c0c8b243,0x7ff7c0274770,0xc761d0c90b
code-creation,LazyCompile,10,220119,0xc761d1b08e,397,load node:internal/modules/esm/loader:401:13,0x36339d22f70,~
code-source-info,0xc761d1b08e,114,12495,13760,C10O12495C60O12544C62O12549C67O12557C71O12584C73O12589C77O12598C84O12605C95O12648C101O12656C105O12681C114O12687C127O12681C153O12731C159O12772C177O12778C182O12772C183O12907C188O12922C193O12954C198O12999C210O12999C216O13108C225O13154C229O13171C242O13114C247O13108C248O13214C254O13255C275O13261C280O13255C281O13406C296O13481C299O13481C309O13517C312O13517C318O13550C337O13556C342O13550C343O13709C350O13725C356O13740C372O13755,,
code-creation,LazyCompile,10,220210,0xc761d1b456,226,defaultLoad node:internal/modules/esm/load:13:27,0x36339d387f8,~
code-source-info,0xc761d1b456,125,380,859,C10O380C18O408C23O452C28O465C33O494C38O521C43O536C56O530C84O578C98O578C103O634C105O651C112O680C117O707C121O732C126O759C131O774C144O768C172O816C179O830C185O843C201O856,,
code-creation,LazyCompile,10,220276,0xc761d1b7d6,150,validateAssertions node:internal/modules/esm/assert:55:28,0x36339d28470,~
code-source-info,0xc761d1b7d6,117,1835,2993,C12O1897C17O1897C26O1940C33O1953C37O1968C38O1999C48O2155C55O2505C66O2130C67O2142C68O2320C76O2325C83O2393C84O2405C85O2422C88O2469C93O2429C98O2475C99O2581C100O2593C101O2745C109O2750C116O2862C129O2868C134O2862C135O2939C138O2979C143O2939C149O2992,,
code-creation,LazyCompile,10,220375,0xc761d1bb46,430,defaultGetSource node:internal/modules/esm/get_source:30:32,0x36339d38f38,~
code-source-info,0xc761d1bb46,126,903,1881,C10O903C18O956C25O956C31O977C33O999C40O1008C45O1028C50O1043C62O1037C92O1087C99O1096C104O1130C111O1150C114O1175C119O1130C125O1191C127O1212C134O1218C139O1212C140O1267C147O1278C154O1299C161O1319C164O1319C171O1345C180O1308C188O1384C194O1432C201O1441C206O1469C213O1478C218O1515C223O1521C236O1515C262O1575C274O1565C304O1598C311O1647C324O1707C343O1647C350O1604C355O1598C356O1778C363O1788C372O1807C377O1814C382O1823C387O1823C393O1864C405O1878,,
code-creation,LazyCompile,10,220511,0xc761d1c116,196,readFile node:internal/fs/promises:788:24,0x36339d3b258,~
code-source-info,0xc761d1c116,127,22848,23194,C10O22848C18O22869C23O22890C28O22879C35O22939C44O22957C46O22977C48O22966C53O22994C56O23001C71O23031C72O23037C75O23058C80O23037C84O23083C98O23089C111O23083C137O23117C145O23152C151O23184C156O23124C171O23191,,
code-creation,LazyCompile,10,220564,0xc761d1dd2e,29,checkAborted node:internal/fs/promises:320:22,0x36339d3a588,~
code-source-info,0xc761d1dd2e,127,7483,7549,C0O7497C7O7507C16O7523C21O7529C26O7523C28O7548,,
code-creation,LazyCompile,10,220611,0xc761d1ded6,182,open node:internal/fs/promises:450:20,0x36339d3a768,~
code-source-info,0xc761d1ded6,127,11766,12079,C10O11766C18O11791C23O11798C29O11845C34O11845C39O11870C55O11877C62O11916C69O11950C72O11958C79O11973C82O11984C87O11984C95O12061C104O11958C117O11944C142O11923C157O12076,,
code-creation,LazyCompile,10,221200,0xc761d1e3ce,263,link node:internal/modules/esm/module_job:69:18,0xc761d1a088,~
code-source-info,0xc761d1e3ce,116,1937,2889,C4O1937C26O1958C36O1983C48O1972C73O1970C77O2005C89O2017C98O2035C100O2024C104O2005C108O2357C110O2357C112O2385C117O2390C122O2397C132O2397C138O2728C140O2765C151O2786C156O2782C162O2771C174O2765C199O2825C210O2847C218O2843C224O2832C238O2882,,
code-creation,LazyCompile,10,221258,0xc761d1e656,19,primordials.PromisePrototypeCatch node:internal/per_context/primordials:406:37,0xa82968a548,~
code-source-info,0xc761d1e656,6,11986,12074,C0O12018C13O12018C18O12074,,
code-creation,LazyCompile,10,221321,0xc761d1e82e,216,set node:internal/modules/esm/module_map:23:6,0x36339d25530,~
code-source-info,0xc761d1e82e,115,755,1288,C11O768C21O801C31O801C36O834C46O834C51O869C55O888C57O877C62O898C73O955C91O961C96O955C97O1024C109O1041C124O1066C126O1062C137O1106C148O1024C152O1165C154O1171C165O1171C178O1183C183O1183C188O1208C190O1231C194O1243C196O1256C210O1256C215O1283,,
code-creation,LazyCompile,10,221375,0xc761d1ea36,10, node:internal/modules/esm/module_map:9:63,0x36339d25440,~
code-source-info,0xc761d1ea36,115,271,298,C0O284C2O290C9O297,,
code-creation,LazyCompile,10,221405,0xc761d1eafe,10, node:internal/modules/esm/loader:381:15,0xc761d0fb08,~
code-source-info,0xc761d1eafe,114,11893,11911,C0O11906C5O11906C9O11911,,
code-creation,LazyCompile,10,221480,0xc761d1ef56,433,run node:internal/modules/esm/module_job:193:12,0x36339d26460,~
code-source-info,0xc761d1ef56,116,7177,8381,C10O7177C18O7198C23O7198C35O7187C58O7234C61O7265C66O7301C71O7308C76O7308C90O7290C128O7368C133O7373C143O7380C152O7415C158O7453C163O7415C169O7474C182O7484C186O7521C196O7553C204O7525C211O7588C224O7598C228O7688C235O7719C240O7726C248O7688C259O7758C267O7808C272O7815C277O7758C292O7836C297O7891C302O7919C307O7926C312O7892C318O7959C325O7964C330O7991C344O8140C358O8082C364O8163C370O8243C376O8001C380O8324C382O8324C383O8345C388O8367C408O8376,,
code-creation,LazyCompile,10,221549,0xc761d1f286,24,instantiate node:internal/modules/esm/module_job:102:14,0x36339d263c0,~
code-source-info,0xc761d1f286,116,3289,3428,C0O3308C6O3370C11O3370C15O3363C19O3410C23O3423,,
code-creation,LazyCompile,10,221675,0xc761d1f98e,935,_instantiate node:internal/modules/esm/module_job:109:21,0x36339d26410,~
code-source-info,0xc761d1f98e
code-creation,LazyCompile,10,221792,0xc761d20006,179,addJobsToDependencyGraph node:internal/modules/esm/module_job:111:38,0xc761d1f6d0,~
code-source-info,0xc761d20006,116,3535,3840,C10O3535C18O3565C23O3581C28O3581C35O3608C46O3615C47O3632C52O3644C57O3644C62O3706C74O3690C100O3721C111O3743C118O3771C123O3805C126O3771C134O3739C140O3728C154O3833,,
code-creation,LazyCompile,10,221939,0xc761d2039e,627,processPromiseRejections node:internal/process/promises:211:34,0x273fd31e438,~
script-source,33,node:internal/process/promises,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  Error\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeWeakMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  tickInfo\x2C\x0d\n  promiseRejectEvents: {\x0d\n    kPromiseRejectWithNoHandler\x2C\x0d\n    kPromiseHandlerAddedAfterReject\x2C\x0d\n    kPromiseResolveAfterResolved\x2C\x0d\n    kPromiseRejectAfterResolved\x0d\n  }\x2C\x0d\n  setPromiseRejectCallback\x0d\n} = internalBinding('task_queue');\x0d\n\x0d\nconst {\x0d\n  noSideEffectsToString\x2C\x0d\n  triggerUncaughtException\x0d\n} = internalBinding('errors');\x0d\n\x0d\nconst {\x0d\n  pushAsyncContext\x2C\x0d\n  popAsyncContext\x2C\x0d\n  symbols: {\x0d\n    async_id_symbol: kAsyncIdSymbol\x2C\x0d\n    trigger_async_id_symbol: kTriggerAsyncIdSymbol\x0d\n  }\x0d\n} = require('internal/async_hooks');\x0d\nconst { isErrorStackTraceLimitWritable } = require('internal/errors');\x0d\n\x0d\n// *Must* match Environment::TickInfo::Fields in src/env.h.\x0d\nconst kHasRejectionToWarn = 1;\x0d\n\x0d\nconst maybeUnhandledPromises = new SafeWeakMap();\x0d\nconst pendingUnhandledRejections = [];\x0d\nconst asyncHandledRejections = [];\x0d\nlet lastPromiseId = 0;\x0d\n\x0d\n// --unhandled-rejections=none:\x0d\n// Emit 'unhandledRejection'\x2C but do not emit any warning.\x0d\nconst kIgnoreUnhandledRejections = 0;\x0d\n\x0d\n// --unhandled-rejections=warn:\x0d\n// Emit 'unhandledRejection'\x2C then emit 'UnhandledPromiseRejectionWarning'.\x0d\nconst kAlwaysWarnUnhandledRejections = 1;\x0d\n\x0d\n// --unhandled-rejections=strict:\x0d\n// Emit 'uncaughtException'. If it's not handled\x2C print the error to stderr\x0d\n// and exit the process.\x0d\n// Otherwise\x2C emit 'unhandledRejection'. If 'unhandledRejection' is not\x0d\n// handled\x2C emit 'UnhandledPromiseRejectionWarning'.\x0d\nconst kStrictUnhandledRejections = 2;\x0d\n\x0d\n// --unhandled-rejections=throw:\x0d\n// Emit 'unhandledRejection'\x2C if it's unhandled\x2C emit\x0d\n// 'uncaughtException'. If it's not handled\x2C print the error to stderr\x0d\n// and exit the process.\x0d\nconst kThrowUnhandledRejections = 3;\x0d\n\x0d\n// --unhandled-rejections=warn-with-error-code:\x0d\n// Emit 'unhandledRejection'\x2C if it's unhandled\x2C emit\x0d\n// 'UnhandledPromiseRejectionWarning'\x2C then set process exit code to 1.\x0d\n\x0d\nconst kWarnWithErrorCodeUnhandledRejections = 4;\x0d\n\x0d\nlet unhandledRejectionsMode;\x0d\n\x0d\nfunction setHasRejectionToWarn(value) {\x0d\n  tickInfo[kHasRejectionToWarn] = value ? 1 : 0;\x0d\n}\x0d\n\x0d\nfunction hasRejectionToWarn() {\x0d\n  return tickInfo[kHasRejectionToWarn] === 1;\x0d\n}\x0d\n\x0d\nfunction isErrorLike(o) {\x0d\n  return typeof o === 'object' &&\x0d\n         o !== null &&\x0d\n         ObjectPrototypeHasOwnProperty(o\x2C 'stack');\x0d\n}\x0d\n\x0d\nfunction getUnhandledRejectionsMode() {\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  switch (getOptionValue('--unhandled-rejections')) {\x0d\n    case 'none':\x0d\n      return kIgnoreUnhandledRejections;\x0d\n    case 'warn':\x0d\n      return kAlwaysWarnUnhandledRejections;\x0d\n    case 'strict':\x0d\n      return kStrictUnhandledRejections;\x0d\n    case 'throw':\x0d\n      return kThrowUnhandledRejections;\x0d\n    case 'warn-with-error-code':\x0d\n      return kWarnWithErrorCodeUnhandledRejections;\x0d\n    default:\x0d\n      return kThrowUnhandledRejections;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction promiseRejectHandler(type\x2C promise\x2C reason) {\x0d\n  if (unhandledRejectionsMode === undefined) {\x0d\n    unhandledRejectionsMode = getUnhandledRejectionsMode();\x0d\n  }\x0d\n  switch (type) {\x0d\n    case kPromiseRejectWithNoHandler:\x0d\n      unhandledRejection(promise\x2C reason);\x0d\n      break;\x0d\n    case kPromiseHandlerAddedAfterReject:\x0d\n      handledRejection(promise);\x0d\n      break;\x0d\n    case kPromiseResolveAfterResolved:\x0d\n      resolveError('resolve'\x2C promise\x2C reason);\x0d\n      break;\x0d\n    case kPromiseRejectAfterResolved:\x0d\n      resolveError('reject'\x2C promise\x2C reason);\x0d\n      break;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction resolveError(type\x2C promise\x2C reason) {\x0d\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\x0d\n  // the executed promise.\x0d\n  process.nextTick(() => {\x0d\n    process.emit('multipleResolves'\x2C type\x2C promise\x2C reason);\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction unhandledRejection(promise\x2C reason) {\x0d\n  const emit = (reason\x2C promise\x2C promiseInfo) => {\x0d\n    if (promiseInfo.domain) {\x0d\n      return promiseInfo.domain.emit('error'\x2C reason);\x0d\n    }\x0d\n    return process.emit('unhandledRejection'\x2C reason\x2C promise);\x0d\n  };\x0d\n\x0d\n  maybeUnhandledPromises.set(promise\x2C {\x0d\n    reason\x2C\x0d\n    uid: ++lastPromiseId\x2C\x0d\n    warned: false\x2C\x0d\n    domain: process.domain\x2C\x0d\n    emit\x0d\n  });\x0d\n  // This causes the promise to be referenced at least for one tick.\x0d\n  ArrayPrototypePush(pendingUnhandledRejections\x2C promise);\x0d\n  setHasRejectionToWarn(true);\x0d\n}\x0d\n\x0d\nfunction handledRejection(promise) {\x0d\n  const promiseInfo = maybeUnhandledPromises.get(promise);\x0d\n  if (promiseInfo !== undefined) {\x0d\n    maybeUnhandledPromises.delete(promise);\x0d\n    if (promiseInfo.warned) {\x0d\n      const { uid } = promiseInfo;\x0d\n      // Generate the warning object early to get a good stack trace.\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const warning = new Error('Promise rejection was handled ' +\x0d\n                                `asynchronously (rejection id: ${uid})`);\x0d\n      warning.name = 'PromiseRejectionHandledWarning';\x0d\n      warning.id = uid;\x0d\n      ArrayPrototypePush(asyncHandledRejections\x2C { promise\x2C warning });\x0d\n      setHasRejectionToWarn(true);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n  if (maybeUnhandledPromises.size === 0 && asyncHandledRejections.length === 0)\x0d\n    setHasRejectionToWarn(false);\x0d\n}\x0d\n\x0d\nconst unhandledRejectionErrName = 'UnhandledPromiseRejectionWarning';\x0d\nfunction emitUnhandledRejectionWarning(uid\x2C reason) {\x0d\n  const warning = getErrorWithoutStack(\x0d\n    unhandledRejectionErrName\x2C\x0d\n    'Unhandled promise rejection. This error originated either by ' +\x0d\n      'throwing inside of an async function without a catch block\x2C ' +\x0d\n      'or by rejecting a promise which was not handled with .catch(). ' +\x0d\n      'To terminate the node process on unhandled promise ' +\x0d\n      'rejection\x2C use the CLI flag `--unhandled-rejections=strict` (see ' +\x0d\n      'https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). ' +\x0d\n      `(rejection id: ${uid})`\x0d\n  );\x0d\n  try {\x0d\n    if (isErrorLike(reason)) {\x0d\n      warning.stack = reason.stack;\x0d\n      process.emitWarning(reason.stack\x2C unhandledRejectionErrName);\x0d\n    } else {\x0d\n      process.emitWarning(\x0d\n        noSideEffectsToString(reason)\x2C unhandledRejectionErrName);\x0d\n    }\x0d\n  } catch {\x0d\n    try {\x0d\n      process.emitWarning(\x0d\n        noSideEffectsToString(reason)\x2C unhandledRejectionErrName);\x0d\n    } catch {\x0d\n      // Ignore.\x0d\n    }\x0d\n  }\x0d\n\x0d\n  process.emitWarning(warning);\x0d\n}\x0d\n\x0d\n// If this method returns true\x2C we've executed user code or triggered\x0d\n// a warning to be emitted which requires the microtask and next tick\x0d\n// queues to be drained again.\x0d\nfunction processPromiseRejections() {\x0d\n  let maybeScheduledTicksOrMicrotasks = asyncHandledRejections.length > 0;\x0d\n\x0d\n  while (asyncHandledRejections.length > 0) {\x0d\n    const { promise\x2C warning } = ArrayPrototypeShift(asyncHandledRejections);\x0d\n    if (!process.emit('rejectionHandled'\x2C promise)) {\x0d\n      process.emitWarning(warning);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let len = pendingUnhandledRejections.length;\x0d\n  while (len--) {\x0d\n    const promise = ArrayPrototypeShift(pendingUnhandledRejections);\x0d\n    const promiseInfo = maybeUnhandledPromises.get(promise);\x0d\n    if (promiseInfo === undefined) {\x0d\n      continue;\x0d\n    }\x0d\n    promiseInfo.warned = true;\x0d\n    const { reason\x2C uid\x2C emit } = promiseInfo;\x0d\n\x0d\n    let needPop = true;\x0d\n    const {\x0d\n      [kAsyncIdSymbol]: promiseAsyncId\x2C\x0d\n      [kTriggerAsyncIdSymbol]: promiseTriggerAsyncId\x2C\x0d\n    } = promise;\x0d\n    // We need to check if async_hooks are enabled\x0d\n    // don't use enabledHooksExist as a Promise could\x0d\n    // come from a vm.* context and not have an async id\x0d\n    if (typeof promiseAsyncId !== 'undefined') {\x0d\n      pushAsyncContext(\x0d\n        promiseAsyncId\x2C\x0d\n        promiseTriggerAsyncId\x2C\x0d\n        promise\x0d\n      );\x0d\n    }\x0d\n    try {\x0d\n      switch (unhandledRejectionsMode) {\x0d\n        case kStrictUnhandledRejections: {\x0d\n          const err = isErrorLike(reason) ?\x0d\n            reason : generateUnhandledRejectionError(reason);\x0d\n          // This destroys the async stack\x2C don't clear it after\x0d\n          triggerUncaughtException(err\x2C true /* fromPromise */);\x0d\n          if (typeof promiseAsyncId !== 'undefined') {\x0d\n            pushAsyncContext(\x0d\n              promise[kAsyncIdSymbol]\x2C\x0d\n              promise[kTriggerAsyncIdSymbol]\x2C\x0d\n              promise\x0d\n            );\x0d\n          }\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n          break;\x0d\n        }\x0d\n        case kIgnoreUnhandledRejections: {\x0d\n          emit(reason\x2C promise\x2C promiseInfo);\x0d\n          break;\x0d\n        }\x0d\n        case kAlwaysWarnUnhandledRejections: {\x0d\n          emit(reason\x2C promise\x2C promiseInfo);\x0d\n          emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n          break;\x0d\n        }\x0d\n        case kThrowUnhandledRejections: {\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) {\x0d\n            const err = isErrorLike(reason) ?\x0d\n              reason : generateUnhandledRejectionError(reason);\x0d\n              // This destroys the async stack\x2C don't clear it after\x0d\n            triggerUncaughtException(err\x2C true /* fromPromise */);\x0d\n            needPop = false;\x0d\n          }\x0d\n          break;\x0d\n        }\x0d\n        case kWarnWithErrorCodeUnhandledRejections: {\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) {\x0d\n            emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n            process.exitCode = 1;\x0d\n          }\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    } finally {\x0d\n      if (needPop) {\x0d\n        if (typeof promiseAsyncId !== 'undefined') {\x0d\n          popAsyncContext(promiseAsyncId);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    maybeScheduledTicksOrMicrotasks = true;\x0d\n  }\x0d\n  return maybeScheduledTicksOrMicrotasks ||\x0d\n         pendingUnhandledRejections.length !== 0;\x0d\n}\x0d\n\x0d\nfunction getErrorWithoutStack(name\x2C message) {\x0d\n  // Reset the stack to prevent any overhead.\x0d\n  const tmp = Error.stackTraceLimit;\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmp;\x0d\n  ObjectDefineProperty(err\x2C 'name'\x2C {\x0d\n    value: name\x2C\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: true\x2C\x0d\n  });\x0d\n  return err;\x0d\n}\x0d\n\x0d\nfunction generateUnhandledRejectionError(reason) {\x0d\n  const message =\x0d\n    'This error originated either by ' +\x0d\n    'throwing inside of an async function without a catch block\x2C ' +\x0d\n    'or by rejecting a promise which was not handled with .catch().' +\x0d\n    ' The promise rejected with the reason ' +\x0d\n    `"${noSideEffectsToString(reason)}".`;\x0d\n\x0d\n  const err = getErrorWithoutStack('UnhandledPromiseRejection'\x2C message);\x0d\n  err.code = 'ERR_UNHANDLED_REJECTION';\x0d\n  return err;\x0d\n}\x0d\n\x0d\nfunction listenForRejections() {\x0d\n  setPromiseRejectCallback(promiseRejectHandler);\x0d\n}\x0d\nmodule.exports = {\x0d\n  hasRejectionToWarn\x2C\x0d\n  setHasRejectionToWarn\x2C\x0d\n  listenForRejections\x2C\x0d\n  processPromiseRejections\x2C\x0d\n};\x0d\n
code-source-info,0xc761d2039e
code-creation,LazyCompile,10,222490,0xc761d212f6,25,setHasRejectionToWarn node:internal/process/promises:75:31,0x273fd31d9a8,~
code-source-info,0xc761d212f6,33,2169,2231,C0O2182C7O2191C12O2214C19O2212C24O2230,,
tick,0x7ff7c09ef47c,222552,0,0x0,3,0x7ff7c08240c0,0xc761d0c923
code-creation,LazyCompile,10,222568,0xc761d21416,112,FileHandle node:internal/fs/promises:117:14,0x36339d3b2a8,~
code-source-info,0xc761d21416,127,2979,3152,C3O2999C11O2999C40O3013C45O3018C50O3027C54O3046C59O3051C67O3058C69O3082C77O3056C81O3098C86O3103C91O3110C95O3120C100O3125C104O3140C111O3151,,
code-creation,LazyCompile,10,222619,0xc761d21596,63,MixedEventEmitter node:internal/event_target:964:16,0x3dde95c5d18,~
code-source-info,0xc761d21596,44,26760,26894,C0O26760C8O26779C15O26786C21O26822C25O26831C29O26822C41O26845C48O26867C54O26845C62O26893,,
code-creation,LazyCompile,10,222755,0xc761d2187e,601,readFileHandle node:internal/fs/promises:360:30,0x36339d3a628,~
code-source-info,0xc761d2187e
code-creation,LazyCompile,10,222858,0xc761d21cc6,8,get fd node:internal/fs/promises:130:9,0x36339d3b360,~
code-source-info,0xc761d21cc6,127,3229,3261,C0O3239C2O3251C4O3250C7O3256,,
code-creation,LazyCompile,10,222907,0xc761d21e46,33,primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:418:43,0xa82968a600,~
code-source-info,0xc761d21e46,6,12582,12862,C0O12582C13O12718C27O12718C32O12862,,
code-creation,LazyCompile,10,222946,0xc761d21fd6,46, node:internal/per_context/primordials:421:15,0xc761d21d98,~
code-source-info,0xc761d21fd6,6,12730,12857,C0O12847C14O12745C20O12820C28O12827C34O12846C39O12847C45O12857,,
code-creation,LazyCompile,10,222980,0xc761d2211e,27,SafePromise node:internal/per_context/primordials:402:16,0xa82968a4f8,~
code-source-info,0xc761d2211e,6,11906,11937,C3O11919C7O11925C11O11919C26O11936,,
code-creation,LazyCompile,10,223012,0xc761d22216,22, node:internal/per_context/primordials:422:21,0xc761d21f20,~
code-source-info,0xc761d22216,6,12761,12810,C0O12771C16O12771C21O12810,,
code-creation,LazyCompile,10,223062,0xc761d2230e,19,allocUnsafeSlow node:buffer:383:50,0x2e6f81771a8,~
code-source-info,0xc761d2230e,24,11607,11675,C0O11619C5O11619C9O11640C14O11647C18O11672,,
code-creation,LazyCompile,10,223101,0xc761d22436,71,createUnsafeBuffer node:internal/buffer:1059:28,0x273fd30bd18,~
code-source-info,0xc761d22436,25,31379,31495,C0O31391C8O31403C15O31422C22O31429C39O31471C48O31483C70O31494,,
code-creation,LazyCompile,10,223288,0xc761d22726,248,close node:internal/fs/promises:190:11,0x36339d3d4b0,~
code-source-info,0xc761d22726,127,4415,5236,C0O4428C7O4437C9O4436C15O4442C20O4459C27O4466C30O4483C31O4498C38O4507C40O4506C45O4532C52O4544C54O4543C57O4559C58O4574C65O4579C73O4585C77O4594C84O4603C86O4602C91O4610C96O4626C103O4631C108O4636C112O4649C119O4654C126O4671C136O4714C138O4713C142O4723C147O4723C157O4671C162O4669C168O4815C175O4820C182O4837C189O4879C199O4875C210O4837C215O4835C219O5179C222O5184C230O5184C235O5204C242O5216C244O5215C247O5231,,
code-creation,LazyCompile,10,223419,0xc761d22a8e,17, node:internal/fs/promises:204:9,0xc761d22510,~
code-source-info,0xc761d22a8e,127,4741,4783,C0O4749C7O4754C11O4769C16O4782,,
code-creation,LazyCompile,10,223512,0xc761d22e26,193,moduleStrategy node:internal/modules/esm/translators:112:56,0x3dde95c8ce0,~
code-source-info,0xc761d22e26,129,3253,3705,C0O3253C23O3280C36O3280C41O3325C46O3334C52O3356C59O3356C64O3393C76O3429C81O3393C85O3455C106O3455C112O3504C119O3515C124O3527C129O3531C134O3568C146O3653C150O3527C156O3688C168O3702,,
code-creation,LazyCompile,10,223573,0xc761d23b9e,83,assertBufferSource node:internal/modules/esm/translators:74:28,0x3dde95c8ab0,~
code-source-info,0xc761d23b9e,129,2103,2510,C0O2138C10O2190C11O2197C12O2254C15O2254C19O2214C24O2233C29O2274C35O2301C41O2332C42O2339C43O2348C50O2401C77O2354C82O2348,,
code-creation,LazyCompile,10,223614,0xc761d23cf6,31,lazyTypes node:internal/modules/esm/translators:22:19,0x3dde95c8a10,~
code-source-info,0xc761d23cf6,129,417,514,C0O425C6O446C10O460C11O464C17O480C24O478C30O511,,
code-creation,LazyCompile,10,223655,0xc761d23e0e,72,stringify node:internal/modules/esm/translators:90:19,0x3dde95c8b00,~
code-source-info,0xc761d23e0e,129,2532,2737,C0O2544C6O2574C8O2586C9O2590C20O2590C25O2645C33O2678C36O2674C45O2694C50O2653C56O2706C61O2721C66O2721C71O2734,,
code-creation,LazyCompile,10,223747,0xc761d23ffe,206,TextDecoder node:internal/encoding:380:16,0x273fd313fe8,~
script-source,27,node:internal/encoding,'use strict';\x0d\n\x0d\n// An implementation of the WHATWG Encoding Standard\x0d\n// https://encoding.spec.whatwg.org\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  Uint32Array\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_ENCODING_INVALID_ENCODED_DATA\x2C\x0d\n  ERR_ENCODING_NOT_SUPPORTED\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_THIS\x2C\x0d\n  ERR_NO_ICU\x0d\n} = require('internal/errors').codes;\x0d\nconst kHandle = Symbol('handle');\x0d\nconst kFlags = Symbol('flags');\x0d\nconst kEncoding = Symbol('encoding');\x0d\nconst kDecoder = Symbol('decoder');\x0d\nconst kEncoder = Symbol('encoder');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  customInspectSymbol: inspect\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  validateString\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  encodeInto\x2C\x0d\n  encodeUtf8String\x0d\n} = internalBinding('buffer');\x0d\n\x0d\nlet Buffer;\x0d\nfunction lazyBuffer() {\x0d\n  if (Buffer === undefined)\x0d\n    Buffer = require('buffer').Buffer;\x0d\n  return Buffer;\x0d\n}\x0d\n\x0d\nfunction validateEncoder(obj) {\x0d\n  if (obj == null || obj[kEncoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextEncoder');\x0d\n}\x0d\n\x0d\nfunction validateDecoder(obj) {\x0d\n  if (obj == null || obj[kDecoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextDecoder');\x0d\n}\x0d\n\x0d\nconst CONVERTER_FLAGS_FLUSH = 0x1;\x0d\nconst CONVERTER_FLAGS_FATAL = 0x2;\x0d\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\x0d\n\x0d\nconst empty = new Uint8Array(0);\x0d\n\x0d\nconst encodings = new SafeMap([\x0d\n  ['unicode-1-1-utf-8'\x2C 'utf-8']\x2C\x0d\n  ['utf8'\x2C 'utf-8']\x2C\x0d\n  ['utf-8'\x2C 'utf-8']\x2C\x0d\n  ['866'\x2C 'ibm866']\x2C\x0d\n  ['cp866'\x2C 'ibm866']\x2C\x0d\n  ['csibm866'\x2C 'ibm866']\x2C\x0d\n  ['ibm866'\x2C 'ibm866']\x2C\x0d\n  ['csisolatin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-ir-101'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso88592'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2:1987'\x2C 'iso-8859-2']\x2C\x0d\n  ['l2'\x2C 'iso-8859-2']\x2C\x0d\n  ['latin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['csisolatin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-ir-109'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso88593'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3:1988'\x2C 'iso-8859-3']\x2C\x0d\n  ['l3'\x2C 'iso-8859-3']\x2C\x0d\n  ['latin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['csisolatin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-ir-110'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso88594'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4:1988'\x2C 'iso-8859-4']\x2C\x0d\n  ['l4'\x2C 'iso-8859-4']\x2C\x0d\n  ['latin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['csisolatincyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['cyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-ir-144'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso88595'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5:1988'\x2C 'iso-8859-5']\x2C\x0d\n  ['arabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['asmo-708'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596e'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596i'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatinarabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['ecma-114'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-e'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-i'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-ir-127'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso88596'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6:1987'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatingreek'\x2C 'iso-8859-7']\x2C\x0d\n  ['ecma-118'\x2C 'iso-8859-7']\x2C\x0d\n  ['elot_928'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek8'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-ir-126'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso88597'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7:1987'\x2C 'iso-8859-7']\x2C\x0d\n  ['sun_eu_greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['csiso88598e'\x2C 'iso-8859-8']\x2C\x0d\n  ['csisolatinhebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['hebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8-e'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-ir-138'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso88598'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8:1988'\x2C 'iso-8859-8']\x2C\x0d\n  ['visual'\x2C 'iso-8859-8']\x2C\x0d\n  ['csiso88598i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['iso-8859-8-i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['logical'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['csisolatin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-ir-157'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso885910'\x2C 'iso-8859-10']\x2C\x0d\n  ['l6'\x2C 'iso-8859-10']\x2C\x0d\n  ['latin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso885913'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso-8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso885914'\x2C 'iso-8859-14']\x2C\x0d\n  ['csisolatin9'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso-8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso885915'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso_8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['l9'\x2C 'iso-8859-15']\x2C\x0d\n  ['cskoi8r'\x2C 'koi8-r']\x2C\x0d\n  ['koi'\x2C 'koi8-r']\x2C\x0d\n  ['koi8'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8_r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-ru'\x2C 'koi8-u']\x2C\x0d\n  ['koi8-u'\x2C 'koi8-u']\x2C\x0d\n  ['csmacintosh'\x2C 'macintosh']\x2C\x0d\n  ['mac'\x2C 'macintosh']\x2C\x0d\n  ['macintosh'\x2C 'macintosh']\x2C\x0d\n  ['x-mac-roman'\x2C 'macintosh']\x2C\x0d\n  ['dos-874'\x2C 'windows-874']\x2C\x0d\n  ['iso-8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso885911'\x2C 'windows-874']\x2C\x0d\n  ['tis-620'\x2C 'windows-874']\x2C\x0d\n  ['windows-874'\x2C 'windows-874']\x2C\x0d\n  ['cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['windows-1250'\x2C 'windows-1250']\x2C\x0d\n  ['x-cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['windows-1251'\x2C 'windows-1251']\x2C\x0d\n  ['x-cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['ansi_x3.4-1968'\x2C 'windows-1252']\x2C\x0d\n  ['ascii'\x2C 'windows-1252']\x2C\x0d\n  ['cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp819'\x2C 'windows-1252']\x2C\x0d\n  ['csisolatin1'\x2C 'windows-1252']\x2C\x0d\n  ['ibm819'\x2C 'windows-1252']\x2C\x0d\n  ['iso-8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso-ir-100'\x2C 'windows-1252']\x2C\x0d\n  ['iso8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso88591'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1:1987'\x2C 'windows-1252']\x2C\x0d\n  ['l1'\x2C 'windows-1252']\x2C\x0d\n  ['latin1'\x2C 'windows-1252']\x2C\x0d\n  ['us-ascii'\x2C 'windows-1252']\x2C\x0d\n  ['windows-1252'\x2C 'windows-1252']\x2C\x0d\n  ['x-cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['windows-1253'\x2C 'windows-1253']\x2C\x0d\n  ['x-cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['csisolatin5'\x2C 'windows-1254']\x2C\x0d\n  ['iso-8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso-ir-148'\x2C 'windows-1254']\x2C\x0d\n  ['iso8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso88599'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9:1989'\x2C 'windows-1254']\x2C\x0d\n  ['l5'\x2C 'windows-1254']\x2C\x0d\n  ['latin5'\x2C 'windows-1254']\x2C\x0d\n  ['windows-1254'\x2C 'windows-1254']\x2C\x0d\n  ['x-cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['windows-1255'\x2C 'windows-1255']\x2C\x0d\n  ['x-cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['windows-1256'\x2C 'windows-1256']\x2C\x0d\n  ['x-cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['windows-1257'\x2C 'windows-1257']\x2C\x0d\n  ['x-cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['windows-1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-mac-cyrillic'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['x-mac-ukrainian'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['chinese'\x2C 'gbk']\x2C\x0d\n  ['csgb2312'\x2C 'gbk']\x2C\x0d\n  ['csiso58gb231280'\x2C 'gbk']\x2C\x0d\n  ['gb2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312-80'\x2C 'gbk']\x2C\x0d\n  ['gbk'\x2C 'gbk']\x2C\x0d\n  ['iso-ir-58'\x2C 'gbk']\x2C\x0d\n  ['x-gbk'\x2C 'gbk']\x2C\x0d\n  ['gb18030'\x2C 'gb18030']\x2C\x0d\n  ['big5'\x2C 'big5']\x2C\x0d\n  ['big5-hkscs'\x2C 'big5']\x2C\x0d\n  ['cn-big5'\x2C 'big5']\x2C\x0d\n  ['csbig5'\x2C 'big5']\x2C\x0d\n  ['x-x-big5'\x2C 'big5']\x2C\x0d\n  ['cseucpkdfmtjapanese'\x2C 'euc-jp']\x2C\x0d\n  ['euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['x-euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['csiso2022jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['iso-2022-jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['csshiftjis'\x2C 'shift_jis']\x2C\x0d\n  ['ms932'\x2C 'shift_jis']\x2C\x0d\n  ['ms_kanji'\x2C 'shift_jis']\x2C\x0d\n  ['shift-jis'\x2C 'shift_jis']\x2C\x0d\n  ['shift_jis'\x2C 'shift_jis']\x2C\x0d\n  ['sjis'\x2C 'shift_jis']\x2C\x0d\n  ['windows-31j'\x2C 'shift_jis']\x2C\x0d\n  ['x-sjis'\x2C 'shift_jis']\x2C\x0d\n  ['cseuckr'\x2C 'euc-kr']\x2C\x0d\n  ['csksc56011987'\x2C 'euc-kr']\x2C\x0d\n  ['euc-kr'\x2C 'euc-kr']\x2C\x0d\n  ['iso-ir-149'\x2C 'euc-kr']\x2C\x0d\n  ['korean'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1987'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1989'\x2C 'euc-kr']\x2C\x0d\n  ['ksc5601'\x2C 'euc-kr']\x2C\x0d\n  ['ksc_5601'\x2C 'euc-kr']\x2C\x0d\n  ['windows-949'\x2C 'euc-kr']\x2C\x0d\n  ['utf-16be'\x2C 'utf-16be']\x2C\x0d\n  ['utf-16le'\x2C 'utf-16le']\x2C\x0d\n  ['utf-16'\x2C 'utf-16le']\x2C\x0d\n]);\x0d\n\x0d\n// Unfortunately\x2C String.prototype.trim also removes non-ascii whitespace\x2C\x0d\n// so we have to do this manually\x0d\nfunction trimAsciiWhitespace(label) {\x0d\n  let s = 0;\x0d\n  let e = label.length;\x0d\n  while (s < e && (\x0d\n    label[s] === '\\u0009' ||\x0d\n    label[s] === '\\u000a' ||\x0d\n    label[s] === '\\u000c' ||\x0d\n    label[s] === '\\u000d' ||\x0d\n    label[s] === '\\u0020')) {\x0d\n    s++;\x0d\n  }\x0d\n  while (e > s && (\x0d\n    label[e - 1] === '\\u0009' ||\x0d\n    label[e - 1] === '\\u000a' ||\x0d\n    label[e - 1] === '\\u000c' ||\x0d\n    label[e - 1] === '\\u000d' ||\x0d\n    label[e - 1] === '\\u0020')) {\x0d\n    e--;\x0d\n  }\x0d\n  return StringPrototypeSlice(label\x2C s\x2C e);\x0d\n}\x0d\n\x0d\nfunction getEncodingFromLabel(label) {\x0d\n  const enc = encodings.get(label);\x0d\n  if (enc !== undefined) return enc;\x0d\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\x0d\n}\x0d\n\x0d\nconst encodeIntoResults = new Uint32Array(2);\x0d\n\x0d\nclass TextEncoder {\x0d\n  constructor() {\x0d\n    this[kEncoder] = true;\x0d\n  }\x0d\n\x0d\n  get encoding() {\x0d\n    validateEncoder(this);\x0d\n    return 'utf-8';\x0d\n  }\x0d\n\x0d\n  encode(input = '') {\x0d\n    validateEncoder(this);\x0d\n    return encodeUtf8String(`${input}`);\x0d\n  }\x0d\n\x0d\n  encodeInto(src\x2C dest) {\x0d\n    validateEncoder(this);\x0d\n    validateString(src\x2C 'src');\x0d\n    if (!dest || !isUint8Array(dest))\x0d\n      throw new ERR_INVALID_ARG_TYPE('dest'\x2C 'Uint8Array'\x2C dest);\x0d\n    encodeInto(src\x2C dest\x2C encodeIntoResults);\x0d\n    return { read: encodeIntoResults[0]\x2C written: encodeIntoResults[1] };\x0d\n  }\x0d\n\x0d\n  [inspect](depth\x2C opts) {\x0d\n    validateEncoder(this);\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n    const ctor = getConstructorOf(this);\x0d\n    const obj = ObjectCreate({\x0d\n      constructor: ctor === null ? TextEncoder : ctor\x0d\n    });\x0d\n    obj.encoding = this.encoding;\x0d\n    // Lazy to avoid circular dependency\x0d\n    return require('internal/util/inspect').inspect(obj\x2C opts);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  TextEncoder.prototype\x2C {\x0d\n    'encode': kEnumerableProperty\x2C\x0d\n    'encodeInto': kEnumerableProperty\x2C\x0d\n    'encoding': kEnumerableProperty\x2C\x0d\n    [SymbolToStringTag]: { configurable: true\x2C value: 'TextEncoder' }\x2C\x0d\n  });\x0d\n\x0d\nconst TextDecoder =\x0d\n  internalBinding('config').hasIntl ?\x0d\n    makeTextDecoderICU() :\x0d\n    makeTextDecoderJS();\x0d\n\x0d\nfunction makeTextDecoderICU() {\x0d\n  const {\x0d\n    decode: _decode\x2C\x0d\n    getConverter\x2C\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = {}) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      const handle = getConverter(enc\x2C flags);\x0d\n      if (handle === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      this[kHandle] = handle;\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n    }\x0d\n\x0d\n\x0d\n    decode(input = empty\x2C options = {}) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (!isArrayBufferView(input)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null)\x0d\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\x0d\n\x0d\n      const ret = _decode(this[kHandle]\x2C input\x2C flags);\x0d\n      if (typeof ret === 'number') {\x0d\n        throw new ERR_ENCODING_INVALID_ENCODED_DATA(this.encoding\x2C ret);\x0d\n      }\x0d\n      return ret.toString('ucs2');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\nfunction makeTextDecoderJS() {\x0d\n  let StringDecoder;\x0d\n  function lazyStringDecoder() {\x0d\n    if (StringDecoder === undefined)\x0d\n      ({ StringDecoder } = require('string_decoder'));\x0d\n    return StringDecoder;\x0d\n  }\x0d\n\x0d\n  const kBOMSeen = Symbol('BOM seen');\x0d\n\x0d\n  function hasConverter(encoding) {\x0d\n    return encoding === 'utf-8' || encoding === 'utf-16le';\x0d\n  }\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = {}) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined || !hasConverter(enc))\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        if (options.fatal) {\x0d\n          throw new ERR_NO_ICU('"fatal" option');\x0d\n        }\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\x0d\n      this[kHandle] = new (lazyStringDecoder())(enc);\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n      this[kBOMSeen] = false;\x0d\n    }\x0d\n\x0d\n    decode(input = empty\x2C options = {}) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (isArrayBufferView(input)) {\x0d\n        input = lazyBuffer().from(input.buffer\x2C input.byteOffset\x2C\x0d\n                                  input.byteLength);\x0d\n      } else {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\x0d\n        this[kBOMSeen] = false;\x0d\n      }\x0d\n\x0d\n      if (options !== null && options.stream) {\x0d\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\x0d\n      } else {\x0d\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\x0d\n      }\x0d\n\x0d\n      let result = this[kFlags] & CONVERTER_FLAGS_FLUSH ?\x0d\n        this[kHandle].end(input) :\x0d\n        this[kHandle].write(input);\x0d\n\x0d\n      if (result.length > 0 &&\x0d\n          !this[kBOMSeen] &&\x0d\n          !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\x0d\n        // If the very first result in the stream is a BOM\x2C and we are not\x0d\n        // explicitly told to ignore it\x2C then we discard it.\x0d\n        if (result[0] === '\\ufeff') {\x0d\n          result = StringPrototypeSlice(result\x2C 1);\x0d\n        }\x0d\n        this[kBOMSeen] = true;\x0d\n      }\x0d\n\x0d\n      return result;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\n// Mix in some shared properties.\x0d\nObjectDefineProperties(\x0d\n  TextDecoder.prototype\x2C\x0d\n  ObjectGetOwnPropertyDescriptors({\x0d\n    get encoding() {\x0d\n      validateDecoder(this);\x0d\n      return this[kEncoding];\x0d\n    }\x2C\x0d\n\x0d\n    get fatal() {\x0d\n      validateDecoder(this);\x0d\n      return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\x0d\n    }\x2C\x0d\n\x0d\n    get ignoreBOM() {\x0d\n      validateDecoder(this);\x0d\n      return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\x0d\n              CONVERTER_FLAGS_IGNORE_BOM;\x0d\n    }\x2C\x0d\n\x0d\n    [inspect](depth\x2C opts) {\x0d\n      validateDecoder(this);\x0d\n      if (typeof depth === 'number' && depth < 0)\x0d\n        return this;\x0d\n      const constructor = getConstructorOf(this) || TextDecoder;\x0d\n      const obj = ObjectCreate({ constructor });\x0d\n      obj.encoding = this.encoding;\x0d\n      obj.fatal = this.fatal;\x0d\n      obj.ignoreBOM = this.ignoreBOM;\x0d\n      if (opts.showHidden) {\x0d\n        obj[kFlags] = this[kFlags];\x0d\n        obj[kHandle] = this[kHandle];\x0d\n      }\x0d\n      // Lazy to avoid circular dependency\x0d\n      const { inspect } = require('internal/util/inspect');\x0d\n      return `${constructor.name} ${inspect(obj)}`;\x0d\n    }\x0d\n  })\x0d\n);\x0d\n\x0d\nObjectDefineProperties(TextDecoder.prototype\x2C {\x0d\n  decode: kEnumerableProperty\x2C\x0d\n  [inspect]: { enumerable: false }\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    configurable: true\x2C\x0d\n    value: 'TextDecoder'\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  getEncodingFromLabel\x2C\x0d\n  TextDecoder\x2C\x0d\n  TextEncoder\x0d\n};\x0d\n
code-source-info,0xc761d23ffe,27,10699,11509,C15O10699C21O10743C25O10776C35O10791C43O10776C48O10927C53O10927C58O10966C60O10998C69O11004C74O10998C75O11067C77O11077C81O11127C94O11135C103O11188C116O11200C125O11265C130O11265C136O11298C138O11333C147O11339C152O11333C153O11390C157O11395C161O11405C165O11420C169O11425C174O11434C178O11451C182O11456C187O11464C191O11480C195O11485C200O11496C205O11508,,
tick,0x7ff7c017222a,224516,0,0x0,3,0x7ff7c0812760,0xc761d23e32,0xc761d22e54,0xc761d1ad17,0x7ff7c0c8b243
code-creation,LazyCompile,10,224546,0xc761d25486,55,getEncodingFromLabel node:internal/encoding:314:30,0x273fd313d20,~
code-source-info,0xc761d25486,27,8982,9136,C0O9007C5O9017C10O9017C16O9032C18O9055C20O9066C21O9070C26O9087C34O9117C39O9117C44O9091C49O9087C54O9133,,
code-creation,LazyCompile,10,224636,0xc761d25796,227,decode node:internal/encoding:409:11,0x273fd314108,~
code-source-info,0xc761d25796,27,11525,12371,C8O11534C25O11564C30O11564C34O11594C41O11598C47O11634C52O11642C56O11654C61O11655C69O11682C76O11687C82O11724C102O11730C107O11724C108O11904C118O11919C126O11904C131O12055C133O12065C137O12113C153O12126C159O12170C168O12183C170O12182C180O12170C186O12215C190O12255C197O12304C207O12261C212O12255C213O12347C221O12347C226O12364,,
code-creation,LazyCompile,10,224695,0xc761d259be,37,validateDecoder node:internal/encoding:65:25,0x273fd313c80,~
code-source-info,0xc761d259be,27,1357,1461,C0O1368C7O1391C9O1390C14O1401C19O1416C29O1422C34O1416C36O1460,,
code-creation,LazyCompile,10,224748,0xc761d25b0e,12,slice node:buffer:603:12,0x2e6f8177ac8,~
code-source-info,0xc761d25b0e,24,17607,17653,C0O17632C5O17632C11O17653,,
code-creation,LazyCompile,10,224792,0xc761d25bf6,10, node:internal/modules/esm/translators:42:63,0x3dde95c8c90,~
code-source-info,0xc761d25bf6,129,1058,1085,C0O1071C2O1077C9O1084,,
code-creation,Script,10,224862,0xc761d25fe6,77, file:///C:/Exequiel/curso-coderhouse-backend/practica/gzip-log-perf/routes/randomNumbers.js:1:1,0xc761d25d80,~
script-source,145,file:///C:/Exequiel/curso-coderhouse-backend/practica/gzip-log-perf/routes/randomNumbers.js,\x0d\n\x0d\nexport function numerosRandom(x = 100000000){const numeros = {}\x0d\nfor(let i = 0; i < x; i++) {\x0d\n    const randomNum = Math.ceil(Math.random() * 1000)\x0d\n    numeros[randomNum] ? numeros[randomNum]++ : numeros[randomNum] = 1\x0d\n}\x0d\nreturn numeros\x0d\n}\x0d\n\x0d\nprocess.on('message'\x2C valor => {\x0d\n    let calcular\x0d\n    if(valor === null) {\x0d\n        calcular = numerosRandom()\x0d\n    } else {\x0d\n        calcular = numerosRandom(valor)\x0d\n    }\x0d\n    process.send(`Calculo de numeros random ${JSON.stringify(calcular)}`)\x0d\n})
code-source-info,0xc761d25fe6,145,0,503,C10O0C28O0C48O0C52O250C56O258C69O258C76O503,,
code-creation,LazyCompile,10,224998,0xc761d2644e,44,refCounted node:internal/child_process:539:13,0x2c63eb23f28,~
code-source-info,0xc761d2644e,100,14732,14834,C0O14742C3O14752C9O14753C15O14759C22O14774C27O14802C29O14807C33O14816C38O14816C43O14833,,
code-creation,LazyCompile,10,225058,0xc761d2656e,15, node:internal/modules/esm/loader:382:15,0xc761d0fb58,~
code-source-info,0xc761d2656e,114,11928,11965,C0O11931C5O11951C10O11951C14O11965,,
code-creation,LazyCompile,10,225151,0xc761d2671e,307,removeListener node:events:689:28,0x2e6f816bcd8,~
code-source-info,0xc761d2671e
code-creation,LazyCompile,10,225243,0xc761d26a06,64,stopListeningIfSignal node:internal/process/signal:43:31,0xa8296bdd70,~
code-source-info,0xc761d26a06,93,978,1149,C0O1003C5O1015C10O1015C16O1029C21O1063C26O1063C33O1083C38O1102C43O1102C47O1116C52O1128C57O1134C63O1148,,
code-creation,LazyCompile,10,225284,0xc761d26b4e,30,onRemoveListener node:child_process:178:57,0x36339d08be0,~
code-source-info,0xc761d26b4e,99,5444,5535,C0O5458C2O5467C9O5489C14O5507C19O5515C24O5515C29O5534,,
tick,0x7ffdf681f424,226204,0,0x0,8
tick,0x7ffdf681f424,228174,0,0x0,8
tick,0x7ffdf681f424,230160,0,0x0,8
tick,0x7ffdf681f424,232002,0,0x0,8
tick,0x7ffdf681f424,234201,0,0x0,8
tick,0x7ffdf681f424,236167,0,0x0,8
tick,0x7ffdf681f424,238191,0,0x0,8
tick,0x7ffdf681f424,240135,0,0x0,8
tick,0x7ffdf681f424,241302,0,0x0,8
tick,0x7ffdf681f424,243298,0,0x0,8
tick,0x7ffdf681f424,245292,0,0x0,8
tick,0x7ffdf681f424,247271,0,0x0,8
tick,0x7ffdf681f424,249270,0,0x0,8
tick,0x7ffdf681f424,251265,0,0x0,8
tick,0x7ffdf681f424,253261,0,0x0,8
tick,0x7ffdf681f424,255284,0,0x0,8
tick,0x7ffdf681f424,257253,0,0x0,8
tick,0x7ffdf681f424,259276,0,0x0,8
tick,0x7ffdf681f424,261242,0,0x0,8
tick,0x7ffdf681f424,263254,0,0x0,8
tick,0x7ffdf681f424,265226,0,0x0,8
tick,0x7ffdf681f424,267240,0,0x0,8
tick,0x7ffdf681f424,269248,0,0x0,8
tick,0x7ffdf681f424,271192,0,0x0,8
tick,0x7ffdf681f424,273212,0,0x0,8
tick,0x7ffdf681f424,275168,0,0x0,8
tick,0x7ffdf681f424,277199,0,0x0,8
tick,0x7ffdf681f424,279144,0,0x0,8
tick,0x7ffdf681f424,281123,0,0x0,8
tick,0x7ffdf681f424,283140,0,0x0,8
tick,0x7ffdf681f424,285129,0,0x0,8
tick,0x7ffdf681f424,287121,0,0x0,8
tick,0x7ffdf681f424,289106,0,0x0,8
tick,0x7ffdf681f424,291118,0,0x0,8
tick,0x7ffdf681f424,293115,0,0x0,8
tick,0x7ffdf681f424,295096,0,0x0,8
tick,0x7ffdf681f424,297096,0,0x0,8
tick,0x7ffdf681f424,299104,0,0x0,8
tick,0x7ffdf681f424,301085,0,0x0,8
tick,0x7ffdf681f424,303119,0,0x0,8
tick,0x7ffdf681f424,305131,0,0x0,8
tick,0x7ffdf681f424,307053,0,0x0,8
tick,0x7ffdf681f424,309036,0,0x0,8
tick,0x7ffdf681f424,311126,0,0x0,8
tick,0x7ffdf681f424,313138,0,0x0,8
tick,0x7ffdf681f424,315131,0,0x0,8
tick,0x7ffdf681f424,317112,0,0x0,8
tick,0x7ffdf681f424,319094,0,0x0,8
tick,0x7ffdf681f424,321107,0,0x0,8
tick,0x7ffdf681f424,323104,0,0x0,8
tick,0x7ffdf681f424,325098,0,0x0,8
tick,0x7ffdf681f424,327093,0,0x0,8
tick,0x7ffdf681f424,329091,0,0x0,8
tick,0x7ffdf681f424,331007,0,0x0,8
tick,0x7ffdf681f424,333084,0,0x0,8
tick,0x7ffdf681f424,335103,0,0x0,8
tick,0x7ffdf681f424,337072,0,0x0,8
tick,0x7ffdf681f424,339063,0,0x0,8
tick,0x7ffdf681f424,341054,0,0x0,8
tick,0x7ffdf681f424,343048,0,0x0,8
tick,0x7ffdf681f424,345052,0,0x0,8
tick,0x7ffdf681f424,347044,0,0x0,8
tick,0x7ffdf681f424,349077,0,0x0,8
tick,0x7ffdf681f424,351034,0,0x0,8
tick,0x7ffdf681f424,353065,0,0x0,8
tick,0x7ffdf681f424,355020,0,0x0,8
tick,0x7ffdf681f424,357039,0,0x0,8
tick,0x7ffdf681f424,359019,0,0x0,8
tick,0x7ffdf681f424,361012,0,0x0,8
tick,0x7ffdf681f424,363009,0,0x0,8
tick,0x7ffdf681f424,365018,0,0x0,8
tick,0x7ffdf681f424,367013,0,0x0,8
tick,0x7ffdf681f424,368986,0,0x0,8
tick,0x7ffdf681f424,370987,0,0x0,8
tick,0x7ffdf681f424,372978,0,0x0,8
tick,0x7ffdf681f424,375007,0,0x0,8
tick,0x7ffdf681f424,376973,0,0x0,8
tick,0x7ffdf681f424,378993,0,0x0,8
tick,0x7ffdf681f424,380898,0,0x0,8
tick,0x7ffdf681f424,382949,0,0x0,8
tick,0x7ffdf681f424,384862,0,0x0,8
tick,0x7ffdf681f424,386944,0,0x0,8
tick,0x7ffdf681f424,388931,0,0x0,8
tick,0x7ffdf681f424,390924,0,0x0,8
tick,0x7ffdf681f424,392825,0,0x0,8
tick,0x7ffdf681f424,394923,0,0x0,8
tick,0x7ffdf681f424,396951,0,0x0,8
tick,0x7ffdf681f424,398907,0,0x0,8
tick,0x7ffdf681f424,400937,0,0x0,8
tick,0x7ffdf681f424,402895,0,0x0,8
tick,0x7ffdf681f424,404881,0,0x0,8
tick,0x7ffdf681f424,406883,0,0x0,8
tick,0x7ffdf681f424,408889,0,0x0,8
tick,0x7ffdf681f424,410870,0,0x0,8
tick,0x7ffdf681f424,412873,0,0x0,8
tick,0x7ffdf681f424,414817,0,0x0,8
tick,0x7ffdf681f424,416854,0,0x0,8
tick,0x7ffdf681f424,418873,0,0x0,8
tick,0x7ffdf681f424,420843,0,0x0,8
tick,0x7ffdf681f424,422779,0,0x0,8
tick,0x7ffdf681f424,424846,0,0x0,8
tick,0x7ffdf681f424,426839,0,0x0,8
tick,0x7ffdf681f424,428819,0,0x0,8
tick,0x7ffdf681f424,430831,0,0x0,8
tick,0x7ffdf681f424,432828,0,0x0,8
tick,0x7ffdf681f424,434818,0,0x0,8
tick,0x7ffdf681f424,436757,0,0x0,8
tick,0x7ffdf681f424,438691,0,0x0,8
tick,0x7ffdf681f424,440844,0,0x0,8
tick,0x7ffdf681f424,442782,0,0x0,8
tick,0x7ffdf681f424,444803,0,0x0,8
tick,0x7ffdf681f424,446780,0,0x0,8
tick,0x7ffdf681f424,448769,0,0x0,8
tick,0x7ffdf681f424,450783,0,0x0,8
tick,0x7ffdf681f424,452766,0,0x0,8
tick,0x7ffdf681f424,454760,0,0x0,8
tick,0x7ffdf681f424,456753,0,0x0,8
tick,0x7ffdf681f424,458706,0,0x0,8
tick,0x7ffdf681f424,460634,0,0x0,8
tick,0x7ffdf681f424,462619,0,0x0,8
tick,0x7ffdf681f424,464753,0,0x0,8
tick,0x7ffdf681f424,466755,0,0x0,8
tick,0x7ffdf681f424,468740,0,0x0,8
tick,0x7ffdf681f424,470714,0,0x0,8
tick,0x7ffdf681f424,472593,0,0x0,8
tick,0x7ffdf681f424,474706,0,0x0,8
tick,0x7ffdf681f424,476697,0,0x0,8
tick,0x7ffdf681f424,478690,0,0x0,8
tick,0x7ffdf681f424,480708,0,0x0,8
tick,0x7ffdf681f424,482684,0,0x0,8
tick,0x7ffdf681f424,484701,0,0x0,8
tick,0x7ffdf681f424,486689,0,0x0,8
tick,0x7ffdf681f424,488686,0,0x0,8
tick,0x7ffdf681f424,490664,0,0x0,8
tick,0x7ffdf681f424,492654,0,0x0,8
tick,0x7ffdf681f424,494646,0,0x0,8
tick,0x7ffdf681f424,496653,0,0x0,8
tick,0x7ffdf681f424,498635,0,0x0,8
tick,0x7ffdf681f424,500629,0,0x0,8
tick,0x7ffdf681f424,502633,0,0x0,8
tick,0x7ffdf681f424,504620,0,0x0,8
tick,0x7ffdf681f424,506650,0,0x0,8
tick,0x7ffdf681f424,508620,0,0x0,8
tick,0x7ffdf681f424,510638,0,0x0,8
tick,0x7ffdf681f424,512615,0,0x0,8
tick,0x7ffdf681f424,514540,0,0x0,8
tick,0x7ffdf681f424,516597,0,0x0,8
tick,0x7ffdf681f424,518589,0,0x0,8
tick,0x7ffdf681f424,520581,0,0x0,8
tick,0x7ffdf681f424,522538,0,0x0,8
tick,0x7ffdf681f424,524574,0,0x0,8
tick,0x7ffdf681f424,526560,0,0x0,8
tick,0x7ffdf681f424,528592,0,0x0,8
tick,0x7ffdf681f424,530553,0,0x0,8
tick,0x7ffdf681f424,532562,0,0x0,8
tick,0x7ffdf681f424,534547,0,0x0,8
tick,0x7ffdf681f424,536531,0,0x0,8
tick,0x7ffdf681f424,538542,0,0x0,8
tick,0x7ffdf681f424,540535,0,0x0,8
tick,0x7ffdf681f424,542520,0,0x0,8
tick,0x7ffdf681f424,544421,0,0x0,8
tick,0x7ffdf681f424,546432,0,0x0,8
tick,0x7ffdf681f424,548393,0,0x0,8
tick,0x7ffdf681f424,550410,0,0x0,8
tick,0x7ffdf681f424,552394,0,0x0,8
tick,0x7ffdf681f424,554409,0,0x0,8
tick,0x7ffdf681f424,556327,0,0x0,8
tick,0x7ffdf681f424,558475,0,0x0,8
tick,0x7ffdf681f424,560474,0,0x0,8
tick,0x7ffdf681f424,562466,0,0x0,8
tick,0x7ffdf681f424,564349,0,0x0,8
tick,0x7ffdf681f424,566449,0,0x0,8
tick,0x7ffdf681f424,568446,0,0x0,8
tick,0x7ffdf681f424,570454,0,0x0,8
tick,0x7ffdf681f424,572401,0,0x0,8
tick,0x7ffdf681f424,574325,0,0x0,8
tick,0x7ffdf681f424,576431,0,0x0,8
tick,0x7ffdf681f424,578304,0,0x0,8
tick,0x7ffdf681f424,580300,0,0x0,8
tick,0x7ffdf681f424,582352,0,0x0,8
tick,0x7ffdf681f424,584319,0,0x0,8
tick,0x7ffdf681f424,586323,0,0x0,8
tick,0x7ffdf681f424,588318,0,0x0,8
tick,0x7ffdf681f424,590420,0,0x0,8
tick,0x7ffdf681f424,592428,0,0x0,8
tick,0x7ffdf681f424,594430,0,0x0,8
tick,0x7ffdf681f424,596399,0,0x0,8
tick,0x7ffdf681f424,598410,0,0x0,8
tick,0x7ffdf681f424,600398,0,0x0,8
tick,0x7ffdf681f424,602379,0,0x0,8
tick,0x7ffdf681f424,603631,0,0x0,8
tick,0x7ffdf681f424,605578,0,0x0,8
tick,0x7ffdf681f424,607555,0,0x0,8
tick,0x7ffdf681f424,608696,0,0x0,8
tick,0x7ffdf681f424,610727,0,0x0,8
tick,0x7ffdf681f424,612716,0,0x0,8
tick,0x7ffdf681f424,614643,0,0x0,8
tick,0x7ffdf681f424,616680,0,0x0,8
tick,0x7ffdf681f424,618781,0,0x0,8
tick,0x7ffdf681f424,620822,0,0x0,8
tick,0x7ffdf681f424,622679,0,0x0,8
tick,0x7ffdf681f424,624790,0,0x0,8
tick,0x7ffdf681f424,626769,0,0x0,8
tick,0x7ffdf681f424,627913,0,0x0,8
tick,0x7ffdf681f424,629031,0,0x0,8
tick,0x7ffdf681f424,631003,0,0x0,8
tick,0x7ffdf681f424,633014,0,0x0,8
tick,0x7ffdf681f424,635002,0,0x0,8
tick,0x7ffdf681f424,636158,0,0x0,8
tick,0x7ffdf681f424,638142,0,0x0,8
tick,0x7ffdf681f424,640268,0,0x0,8
tick,0x7ffdf681f424,642253,0,0x0,8
tick,0x7ffdf681f424,643375,0,0x0,8
tick,0x7ffdf681f424,645384,0,0x0,8
tick,0x7ffdf681f424,647363,0,0x0,8
tick,0x7ffdf681f424,649210,0,0x0,8
tick,0x7ffdf681f424,651374,0,0x0,8
tick,0x7ffdf681f424,653362,0,0x0,8
tick,0x7ffdf681f424,655350,0,0x0,8
tick,0x7ffdf681f424,657344,0,0x0,8
tick,0x7ffdf681f424,659360,0,0x0,8
tick,0x7ffdf681f424,661340,0,0x0,8
tick,0x7ffdf681f424,663325,0,0x0,8
tick,0x7ffdf681f424,665345,0,0x0,8
tick,0x7ffdf681f424,667321,0,0x0,8
tick,0x7ffdf681f424,669314,0,0x0,8
tick,0x7ffdf681f424,671308,0,0x0,8
tick,0x7ffdf681f424,673315,0,0x0,8
tick,0x7ffdf681f424,675301,0,0x0,8
tick,0x7ffdf681f424,677295,0,0x0,8
tick,0x7ffdf681f424,679296,0,0x0,8
tick,0x7ffdf681f424,681200,0,0x0,8
tick,0x7ffdf681f424,683280,0,0x0,8
tick,0x7ffdf681f424,685281,0,0x0,8
tick,0x7ffdf681f424,687265,0,0x0,8
tick,0x7ffdf681f424,689268,0,0x0,8
tick,0x7ffdf681f424,691161,0,0x0,8
tick,0x7ffdf681f424,693191,0,0x0,8
tick,0x7ffdf681f424,695248,0,0x0,8
tick,0x7ffdf681f424,697251,0,0x0,8
tick,0x7ffdf681f424,699231,0,0x0,8
tick,0x7ffdf681f424,701227,0,0x0,8
tick,0x7ffdf681f424,703186,0,0x0,8
tick,0x7ffdf681f424,705119,0,0x0,8
tick,0x7ffdf681f424,707077,0,0x0,8
tick,0x7ffdf681f424,709071,0,0x0,8
tick,0x7ffdf681f424,711137,0,0x0,8
tick,0x7ffdf681f424,713171,0,0x0,8
tick,0x7ffdf681f424,715190,0,0x0,8
tick,0x7ffdf681f424,717188,0,0x0,8
tick,0x7ffdf681f424,719188,0,0x0,8
tick,0x7ffdf681f424,721170,0,0x0,8
tick,0x7ffdf681f424,723066,0,0x0,8
tick,0x7ffdf681f424,725201,0,0x0,8
tick,0x7ffdf681f424,727170,0,0x0,8
tick,0x7ffdf681f424,729152,0,0x0,8
tick,0x7ffdf681f424,731044,0,0x0,8
tick,0x7ffdf681f424,733147,0,0x0,8
tick,0x7ffdf681f424,735142,0,0x0,8
tick,0x7ffdf681f424,737131,0,0x0,8
tick,0x7ffdf681f424,739139,0,0x0,8
tick,0x7ffdf681f424,741125,0,0x0,8
tick,0x7ffdf681f424,743116,0,0x0,8
tick,0x7ffdf681f424,745119,0,0x0,8
tick,0x7ffdf681f424,747128,0,0x0,8
tick,0x7ffdf681f424,749112,0,0x0,8
tick,0x7ffdf681f424,751109,0,0x0,8
tick,0x7ffdf681f424,753101,0,0x0,8
tick,0x7ffdf681f424,755094,0,0x0,8
tick,0x7ffdf681f424,757087,0,0x0,8
tick,0x7ffdf681f424,759084,0,0x0,8
tick,0x7ffdf681f424,761095,0,0x0,8
tick,0x7ffdf681f424,763077,0,0x0,8
tick,0x7ffdf681f424,765086,0,0x0,8
tick,0x7ffdf681f424,766948,0,0x0,8
tick,0x7ffdf681f424,768964,0,0x0,8
tick,0x7ffdf681f424,771085,0,0x0,8
tick,0x7ffdf681f424,772945,0,0x0,8
tick,0x7ffdf681f424,775041,0,0x0,8
tick,0x7ffdf681f424,777003,0,0x0,8
tick,0x7ffdf681f424,779029,0,0x0,8
tick,0x7ffdf681f424,780958,0,0x0,8
tick,0x7ffdf681f424,783075,0,0x0,8
tick,0x7ffdf681f424,785014,0,0x0,8
tick,0x7ffdf681f424,787002,0,0x0,8
tick,0x7ffdf681f424,789010,0,0x0,8
tick,0x7ffdf681f424,791020,0,0x0,8
tick,0x7ffdf681f424,793012,0,0x0,8
tick,0x7ffdf681f424,794988,0,0x0,8
tick,0x7ffdf681f424,796988,0,0x0,8
tick,0x7ffdf681f424,798948,0,0x0,8
tick,0x7ffdf681f424,800978,0,0x0,8
tick,0x7ffdf681f424,802964,0,0x0,8
tick,0x7ffdf681f424,804853,0,0x0,8
tick,0x7ffdf681f424,806963,0,0x0,8
tick,0x7ffdf681f424,808953,0,0x0,8
tick,0x7ffdf681f424,810937,0,0x0,8
tick,0x7ffdf681f424,812902,0,0x0,8
tick,0x7ffdf681f424,814947,0,0x0,8
tick,0x7ffdf681f424,816820,0,0x0,8
tick,0x7ffdf681f424,818932,0,0x0,8
tick,0x7ffdf681f424,820888,0,0x0,8
tick,0x7ffdf681f424,822798,0,0x0,8
tick,0x7ffdf681f424,824903,0,0x0,8
tick,0x7ffdf681f424,826903,0,0x0,8
tick,0x7ffdf681f424,828905,0,0x0,8
tick,0x7ffdf681f424,830896,0,0x0,8
tick,0x7ffdf681f424,832884,0,0x0,8
tick,0x7ffdf681f424,834893,0,0x0,8
tick,0x7ffdf681f424,836876,0,0x0,8
tick,0x7ffdf681f424,838871,0,0x0,8
tick,0x7ffdf681f424,840864,0,0x0,8
tick,0x7ffdf681f424,842833,0,0x0,8
tick,0x7ffdf681f424,844769,0,0x0,8
tick,0x7ffdf681f424,846847,0,0x0,8
tick,0x7ffdf681f424,848844,0,0x0,8
tick,0x7ffdf681f424,850838,0,0x0,8
tick,0x7ffdf681f424,852840,0,0x0,8
tick,0x7ffdf681f424,854824,0,0x0,8
tick,0x7ffdf681f424,856829,0,0x0,8
tick,0x7ffdf681f424,858819,0,0x0,8
tick,0x7ffdf681f424,860814,0,0x0,8
tick,0x7ffdf681f424,862813,0,0x0,8
tick,0x7ffdf681f424,864770,0,0x0,8
tick,0x7ffdf681f424,866793,0,0x0,8
tick,0x7ffdf681f424,868787,0,0x0,8
tick,0x7ffdf681f424,870786,0,0x0,8
tick,0x7ffdf681f424,872666,0,0x0,8
tick,0x7ffdf681f424,874770,0,0x0,8
tick,0x7ffdf681f424,876765,0,0x0,8
tick,0x7ffdf681f424,878776,0,0x0,8
tick,0x7ffdf681f424,880695,0,0x0,8
tick,0x7ffdf681f424,882652,0,0x0,8
tick,0x7ffdf681f424,884756,0,0x0,8
tick,0x7ffdf681f424,886752,0,0x0,8
tick,0x7ffdf681f424,888742,0,0x0,8
tick,0x7ffdf681f424,890727,0,0x0,8
tick,0x7ffdf681f424,892737,0,0x0,8
tick,0x7ffdf681f424,894736,0,0x0,8
tick,0x7ffdf681f424,896679,0,0x0,8
tick,0x7ffdf681f424,898724,0,0x0,8
tick,0x7ffdf681f424,900711,0,0x0,8
tick,0x7ffdf681f424,902706,0,0x0,8
tick,0x7ffdf681f424,904662,0,0x0,8
tick,0x7ffdf681f424,906694,0,0x0,8
tick,0x7ffdf681f424,908701,0,0x0,8
tick,0x7ffdf681f424,910690,0,0x0,8
tick,0x7ffdf681f424,912680,0,0x0,8
tick,0x7ffdf681f424,914561,0,0x0,8
tick,0x7ffdf681f424,916708,0,0x0,8
tick,0x7ffdf681f424,918697,0,0x0,8
tick,0x7ffdf681f424,920536,0,0x0,8
tick,0x7ffdf681f424,922562,0,0x0,8
tick,0x7ffdf681f424,924631,0,0x0,8
tick,0x7ffdf681f424,925782,0,0x0,8
tick,0x7ffdf681f424,927799,0,0x0,8
tick,0x7ffdf681f424,928939,0,0x0,8
tick,0x7ffdf681f424,930921,0,0x0,8
tick,0x7ffdf681f424,932947,0,0x0,8
tick,0x7ffdf681f424,934942,0,0x0,8
tick,0x7ffdf681f424,936077,0,0x0,8
tick,0x7ffdf681f424,938128,0,0x0,8
tick,0x7ffdf681f424,940249,0,0x0,8
tick,0x7ffdf681f424,941402,0,0x0,8
tick,0x7ffdf681f424,943405,0,0x0,8
tick,0x7ffdf681f424,945390,0,0x0,8
tick,0x7ffdf681f424,946530,0,0x0,8
tick,0x7ffdf681f424,948560,0,0x0,8
tick,0x7ffdf681f424,950622,0,0x0,8
tick,0x7ffdf681f424,951769,0,0x0,8
tick,0x7ffdf681f424,953752,0,0x0,8
tick,0x7ffdf681f424,955778,0,0x0,8
tick,0x7ffdf681f424,957702,0,0x0,8
tick,0x7ffdf681f424,959702,0,0x0,8
tick,0x7ffdf681f424,961709,0,0x0,8
tick,0x7ffdf681f424,963684,0,0x0,8
tick,0x7ffdf681f424,965807,0,0x0,8
tick,0x7ffdf681f424,967888,0,0x0,8
tick,0x7ffdf681f424,969879,0,0x0,8
tick,0x7ffdf681f424,971912,0,0x0,8
tick,0x7ffdf681f424,974051,0,0x0,8
tick,0x7ffdf681f424,976037,0,0x0,8
tick,0x7ffdf681f424,978069,0,0x0,8
tick,0x7ffdf681f424,980060,0,0x0,8
tick,0x7ffdf681f424,982041,0,0x0,8
tick,0x7ffdf681f424,984033,0,0x0,8
tick,0x7ffdf681f424,986023,0,0x0,8
tick,0x7ffdf681f424,988009,0,0x0,8
tick,0x7ffdf681f424,990003,0,0x0,8
tick,0x7ffdf681f424,992005,0,0x0,8
tick,0x7ffdf681f424,994001,0,0x0,8
tick,0x7ffdf681f424,995949,0,0x0,8
tick,0x7ffdf681f424,997909,0,0x0,8
tick,0x7ffdf681f424,999987,0,0x0,8
tick,0x7ffdf681f424,1001972,0,0x0,8
tick,0x7ffdf681f424,1003979,0,0x0,8
tick,0x7ffdf681f424,1005980,0,0x0,8
tick,0x7ffdf681f424,1007974,0,0x0,8
tick,0x7ffdf681f424,1009959,0,0x0,8
tick,0x7ffdf681f424,1011913,0,0x0,8
tick,0x7ffdf681f424,1013959,0,0x0,8
tick,0x7ffdf681f424,1015942,0,0x0,8
tick,0x7ffdf681f424,1017892,0,0x0,8
tick,0x7ffdf681f424,1019930,0,0x0,8
tick,0x7ffdf681f424,1021929,0,0x0,8
tick,0x7ffdf681f424,1023928,0,0x0,8
tick,0x7ffdf681f424,1025910,0,0x0,8
tick,0x7ffdf681f424,1027900,0,0x0,8
tick,0x7ffdf681f424,1029909,0,0x0,8
tick,0x7ffdf681f424,1031898,0,0x0,8
tick,0x7ffdf681f424,1033883,0,0x0,8
tick,0x7ffdf681f424,1035887,0,0x0,8
tick,0x7ffdf681f424,1037882,0,0x0,8
tick,0x7ffdf681f424,1039854,0,0x0,8
tick,0x7ffdf681f424,1041778,0,0x0,8
tick,0x7ffdf681f424,1043870,0,0x0,8
tick,0x7ffdf681f424,1045856,0,0x0,8
tick,0x7ffdf681f424,1047772,0,0x0,8
tick,0x7ffdf681f424,1049853,0,0x0,8
tick,0x7ffdf681f424,1051840,0,0x0,8
tick,0x7ffdf681f424,1053842,0,0x0,8
tick,0x7ffdf681f424,1055843,0,0x0,8
tick,0x7ffdf681f424,1057839,0,0x0,8
tick,0x7ffdf681f424,1059815,0,0x0,8
tick,0x7ffdf681f424,1061771,0,0x0,8
tick,0x7ffdf681f424,1063816,0,0x0,8
tick,0x7ffdf681f424,1065812,0,0x0,8
tick,0x7ffdf681f424,1067794,0,0x0,8
tick,0x7ffdf681f424,1069796,0,0x0,8
tick,0x7ffdf681f424,1071735,0,0x0,8
tick,0x7ffdf681f424,1073681,0,0x0,8
tick,0x7ffdf681f424,1075714,0,0x0,8
tick,0x7ffdf681f424,1077784,0,0x0,8
tick,0x7ffdf681f424,1079631,0,0x0,8
tick,0x7ffdf681f424,1081696,0,0x0,8
tick,0x7ffdf681f424,1083557,0,0x0,8
tick,0x7ffdf681f424,1085631,0,0x0,8
tick,0x7ffdf681f424,1087632,0,0x0,8
tick,0x7ffdf681f424,1089623,0,0x0,8
tick,0x7ffdf681f424,1091604,0,0x0,8
tick,0x7ffdf681f424,1093605,0,0x0,8
tick,0x7ffdf681f424,1095510,0,0x0,8
tick,0x7ffdf681f424,1097507,0,0x0,8
tick,0x7ffdf681f424,1099497,0,0x0,8
tick,0x7ffdf681f424,1101544,0,0x0,8
tick,0x7ffdf681f424,1103537,0,0x0,8
tick,0x7ffdf681f424,1105477,0,0x0,8
tick,0x7ffdf681f424,1107507,0,0x0,8
tick,0x7ffdf681f424,1109522,0,0x0,8
tick,0x7ffdf681f424,1111516,0,0x0,8
tick,0x7ffdf681f424,1113478,0,0x0,8
tick,0x7ffdf681f424,1115486,0,0x0,8
tick,0x7ffdf681f424,1117469,0,0x0,8
tick,0x7ffdf681f424,1119504,0,0x0,8
tick,0x7ffdf681f424,1121469,0,0x0,8
tick,0x7ffdf681f424,1123591,0,0x0,8
tick,0x7ffdf681f424,1125479,0,0x0,8
tick,0x7ffdf681f424,1127541,0,0x0,8
tick,0x7ffdf681f424,1129532,0,0x0,8
tick,0x7ffdf681f424,1131468,0,0x0,8
tick,0x7ffdf681f424,1133558,0,0x0,8
tick,0x7ffdf681f424,1135540,0,0x0,8
tick,0x7ffdf681f424,1137557,0,0x0,8
tick,0x7ffdf681f424,1139384,0,0x0,8
tick,0x7ffdf681f424,1141424,0,0x0,8
tick,0x7ffdf681f424,1143436,0,0x0,8
tick,0x7ffdf681f424,1145480,0,0x0,8
tick,0x7ffdf681f424,1147521,0,0x0,8
tick,0x7ffdf681f424,1149489,0,0x0,8
tick,0x7ffdf681f424,1151467,0,0x0,8
tick,0x7ffdf681f424,1153448,0,0x0,8
tick,0x7ffdf681f424,1155529,0,0x0,8
tick,0x7ffdf681f424,1157399,0,0x0,8
tick,0x7ffdf681f424,1159426,0,0x0,8
tick,0x7ffdf681f424,1161550,0,0x0,8
tick,0x7ffdf681f424,1163509,0,0x0,8
tick,0x7ffdf681f424,1165501,0,0x0,8
tick,0x7ffdf681f424,1167516,0,0x0,8
tick,0x7ffdf681f424,1168712,0,0x0,8
tick,0x7ffdf681f424,1170666,0,0x0,8
tick,0x7ffdf681f424,1172689,0,0x0,8
tick,0x7ffdf681f424,1174663,0,0x0,8
tick,0x7ffdf681f424,1176668,0,0x0,8
tick,0x7ffdf681f424,1178679,0,0x0,8
tick,0x7ffdf681f424,1180671,0,0x0,8
tick,0x7ffdf681f424,1182654,0,0x0,8
tick,0x7ffdf681f424,1184643,0,0x0,8
tick,0x7ffdf681f424,1186659,0,0x0,8
tick,0x7ffdf681f424,1188627,0,0x0,8
tick,0x7ffdf681f424,1190628,0,0x0,8
tick,0x7ffdf681f424,1192628,0,0x0,8
tick,0x7ffdf681f424,1194617,0,0x0,8
tick,0x7ffdf681f424,1196606,0,0x0,8
tick,0x7ffdf681f424,1198616,0,0x0,8
tick,0x7ffdf681f424,1200591,0,0x0,8
tick,0x7ffdf681f424,1202606,0,0x0,8
tick,0x7ffdf681f424,1204586,0,0x0,8
tick,0x7ffdf681f424,1206586,0,0x0,8
tick,0x7ffdf681f424,1208580,0,0x0,8
tick,0x7ffdf681f424,1210573,0,0x0,8
tick,0x7ffdf681f424,1212562,0,0x0,8
tick,0x7ffdf681f424,1214469,0,0x0,8
tick,0x7ffdf681f424,1216571,0,0x0,8
tick,0x7ffdf681f424,1218553,0,0x0,8
tick,0x7ffdf681f424,1220541,0,0x0,8
tick,0x7ffdf681f424,1222506,0,0x0,8
tick,0x7ffdf681f424,1224422,0,0x0,8
tick,0x7ffdf681f424,1226457,0,0x0,8
tick,0x7ffdf681f424,1228569,0,0x0,8
tick,0x7ffdf681f424,1230544,0,0x0,8
tick,0x7ffdf681f424,1232420,0,0x0,8
tick,0x7ffdf681f424,1234509,0,0x0,8
tick,0x7ffdf681f424,1236536,0,0x0,8
tick,0x7ffdf681f424,1238525,0,0x0,8
tick,0x7ffdf681f424,1240384,0,0x0,8
tick,0x7ffdf681f424,1242494,0,0x0,8
tick,0x7ffdf681f424,1244486,0,0x0,8
tick,0x7ffdf681f424,1246645,0,0x0,8
tick,0x7ffdf681f424,1247758,0,0x0,8
tick,0x7ffdf681f424,1249840,0,0x0,8
tick,0x7ffdf681f424,1251876,0,0x0,8
tick,0x7ffdf681f424,1252991,0,0x0,8
tick,0x7ffdf681f424,1254940,0,0x0,8
tick,0x7ffdf681f424,1256860,0,0x0,8
tick,0x7ffdf681f424,1258847,0,0x0,8
tick,0x7ffdf681f424,1260943,0,0x0,8
tick,0x7ffdf681f424,1262923,0,0x0,8
tick,0x7ffdf681f424,1264829,0,0x0,8
tick,0x7ffdf681f424,1266947,0,0x0,8
tick,0x7ffdf681f424,1268031,0,0x0,8
tick,0x7ffdf681f424,1270025,0,0x0,8
tick,0x7ffdf681f424,1272056,0,0x0,8
tick,0x7ffdf681f424,1274009,0,0x0,8
tick,0x7ffdf681f424,1275200,0,0x0,8
tick,0x7ffdf681f424,1277158,0,0x0,8
tick,0x7ffdf681f424,1278347,0,0x0,8
tick,0x7ffdf681f424,1280322,0,0x0,8
tick,0x7ffdf681f424,1282358,0,0x0,8
tick,0x7ffdf681f424,1284284,0,0x0,8
tick,0x7ffdf681f424,1285434,0,0x0,8
tick,0x7ffdf681f424,1287413,0,0x0,8
tick,0x7ffdf681f424,1288591,0,0x0,8
tick,0x7ffdf681f424,1290566,0,0x0,8
tick,0x7ffdf681f424,1292643,0,0x0,8
tick,0x7ffdf681f424,1294543,0,0x0,8
tick,0x7ffdf681f424,1295699,0,0x0,8
tick,0x7ffdf681f424,1297685,0,0x0,8
tick,0x7ffdf681f424,1299688,0,0x0,8
tick,0x7ffdf681f424,1301705,0,0x0,8
tick,0x7ffdf681f424,1303684,0,0x0,8
tick,0x7ffdf681f424,1305628,0,0x0,8
tick,0x7ffdf681f424,1307706,0,0x0,8
tick,0x7ffdf681f424,1309754,0,0x0,8
tick,0x7ffdf681f424,1311701,0,0x0,8
tick,0x7ffdf681f424,1313763,0,0x0,8
tick,0x7ffdf681f424,1315848,0,0x0,8
tick,0x7ffdf681f424,1317793,0,0x0,8
tick,0x7ffdf681f424,1319817,0,0x0,8
tick,0x7ffdf681f424,1321808,0,0x0,8
tick,0x7ffdf681f424,1323808,0,0x0,8
tick,0x7ffdf681f424,1325789,0,0x0,8
tick,0x7ffdf681f424,1327873,0,0x0,8
tick,0x7ffdf681f424,1329857,0,0x0,8
tick,0x7ffdf681f424,1331942,0,0x0,8
tick,0x7ffdf681f424,1333995,0,0x0,8
tick,0x7ffdf681f424,1335939,0,0x0,8
tick,0x7ffdf681f424,1337932,0,0x0,8
tick,0x7ffdf681f424,1339979,0,0x0,8
tick,0x7ffdf681f424,1342146,0,0x0,8
tick,0x7ffdf681f424,1344117,0,0x0,8
tick,0x7ffdf681f424,1346193,0,0x0,8
tick,0x7ffdf681f424,1348170,0,0x0,8
tick,0x7ffdf681f424,1350159,0,0x0,8
tick,0x7ffdf681f424,1352285,0,0x0,8
tick,0x7ffdf681f424,1354253,0,0x0,8
tick,0x7ffdf681f424,1356353,0,0x0,8
tick,0x7ffdf681f424,1358331,0,0x0,8
tick,0x7ffdf681f424,1360288,0,0x0,8
tick,0x7ffdf681f424,1362302,0,0x0,8
tick,0x7ffdf681f424,1364283,0,0x0,8
tick,0x7ffdf681f424,1366316,0,0x0,8
tick,0x7ffdf681f424,1368266,0,0x0,8
tick,0x7ffdf681f424,1370369,0,0x0,8
tick,0x7ffdf681f424,1372455,0,0x0,8
tick,0x7ffdf681f424,1374422,0,0x0,8
tick,0x7ffdf681f424,1376534,0,0x0,8
tick,0x7ffdf681f424,1378536,0,0x0,8
tick,0x7ffdf681f424,1380562,0,0x0,8
tick,0x7ffdf681f424,1382522,0,0x0,8
tick,0x7ffdf681f424,1384518,0,0x0,8
tick,0x7ffdf681f424,1386433,0,0x0,8
tick,0x7ffdf681f424,1388405,0,0x0,8
tick,0x7ffdf681f424,1390457,0,0x0,8
tick,0x7ffdf681f424,1392454,0,0x0,8
tick,0x7ffdf681f424,1394476,0,0x0,8
tick,0x7ffdf681f424,1396615,0,0x0,8
tick,0x7ffdf681f424,1398640,0,0x0,8
tick,0x7ffdf681f424,1400619,0,0x0,8
tick,0x7ffdf681f424,1402529,0,0x0,8
tick,0x7ffdf681f424,1404589,0,0x0,8
tick,0x7ffdf681f424,1406499,0,0x0,8
tick,0x7ffdf681f424,1408592,0,0x0,8
tick,0x7ffdf681f424,1410577,0,0x0,8
tick,0x7ffdf681f424,1412579,0,0x0,8
tick,0x7ffdf681f424,1414460,0,0x0,8
tick,0x7ffdf681f424,1416598,0,0x0,8
tick,0x7ffdf681f424,1418581,0,0x0,8
tick,0x7ffdf681f424,1420550,0,0x0,8
tick,0x7ffdf681f424,1422552,0,0x0,8
tick,0x7ffdf681f424,1424541,0,0x0,8
tick,0x7ffdf681f424,1426539,0,0x0,8
tick,0x7ffdf681f424,1428540,0,0x0,8
tick,0x7ffdf681f424,1430525,0,0x0,8
tick,0x7ffdf681f424,1432529,0,0x0,8
tick,0x7ffdf681f424,1434520,0,0x0,8
tick,0x7ffdf681f424,1436514,0,0x0,8
tick,0x7ffdf681f424,1438424,0,0x0,8
tick,0x7ffdf681f424,1440492,0,0x0,8
tick,0x7ffdf681f424,1442492,0,0x0,8
tick,0x7ffdf681f424,1444494,0,0x0,8
tick,0x7ffdf681f424,1446481,0,0x0,8
tick,0x7ffdf681f424,1448476,0,0x0,8
tick,0x7ffdf681f424,1450472,0,0x0,8
tick,0x7ffdf681f424,1452462,0,0x0,8
tick,0x7ffdf681f424,1454457,0,0x0,8
tick,0x7ffdf681f424,1456452,0,0x0,8
tick,0x7ffdf681f424,1458363,0,0x0,8
tick,0x7ffdf681f424,1460297,0,0x0,8
tick,0x7ffdf681f424,1462369,0,0x0,8
tick,0x7ffdf681f424,1464367,0,0x0,8
tick,0x7ffdf681f424,1466429,0,0x0,8
tick,0x7ffdf681f424,1468416,0,0x0,8
tick,0x7ffdf681f424,1470413,0,0x0,8
tick,0x7ffdf681f424,1472414,0,0x0,8
tick,0x7ffdf681f424,1474405,0,0x0,8
tick,0x7ffdf681f424,1476434,0,0x0,8
tick,0x7ffdf681f424,1478390,0,0x0,8
tick,0x7ffdf681f424,1480385,0,0x0,8
tick,0x7ffdf681f424,1482332,0,0x0,8
tick,0x7ffdf681f424,1484381,0,0x0,8
tick,0x7ffdf681f424,1486382,0,0x0,8
tick,0x7ffdf681f424,1488382,0,0x0,8
tick,0x7ffdf681f424,1490365,0,0x0,8
tick,0x7ffdf681f424,1492364,0,0x0,8
tick,0x7ffdf681f424,1494355,0,0x0,8
tick,0x7ffdf681f424,1496345,0,0x0,8
tick,0x7ffdf681f424,1498341,0,0x0,8
tick,0x7ffdf681f424,1500330,0,0x0,8
tick,0x7ffdf681f424,1502329,0,0x0,8
tick,0x7ffdf681f424,1504371,0,0x0,8
tick,0x7ffdf681f424,1506216,0,0x0,8
tick,0x7ffdf681f424,1508311,0,0x0,8
tick,0x7ffdf681f424,1510310,0,0x0,8
tick,0x7ffdf681f424,1512294,0,0x0,8
tick,0x7ffdf681f424,1514300,0,0x0,8
tick,0x7ffdf681f424,1516294,0,0x0,8
tick,0x7ffdf681f424,1518287,0,0x0,8
tick,0x7ffdf681f424,1520293,0,0x0,8
tick,0x7ffdf681f424,1522274,0,0x0,8
tick,0x7ffdf681f424,1524270,0,0x0,8
tick,0x7ffdf681f424,1526258,0,0x0,8
tick,0x7ffdf681f424,1528264,0,0x0,8
tick,0x7ffdf681f424,1530148,0,0x0,8
tick,0x7ffdf681f424,1532256,0,0x0,8
tick,0x7ffdf681f424,1534135,0,0x0,8
tick,0x7ffdf681f424,1536178,0,0x0,8
tick,0x7ffdf681f424,1538251,0,0x0,8
tick,0x7ffdf681f424,1540224,0,0x0,8
tick,0x7ffdf681f424,1542234,0,0x0,8
tick,0x7ffdf681f424,1544222,0,0x0,8
tick,0x7ffdf681f424,1546212,0,0x0,8
tick,0x7ffdf681f424,1548238,0,0x0,8
tick,0x7ffdf681f424,1550198,0,0x0,8
tick,0x7ffdf681f424,1552088,0,0x0,8
tick,0x7ffdf681f424,1554186,0,0x0,8
tick,0x7ffdf681f424,1556071,0,0x0,8
tick,0x7ffdf681f424,1558184,0,0x0,8
tick,0x7ffdf681f424,1560168,0,0x0,8
tick,0x7ffdf681f424,1562171,0,0x0,8
tick,0x7ffdf681f424,1564208,0,0x0,8
tick,0x7ffdf681f424,1566055,0,0x0,8
tick,0x7ffdf681f424,1568156,0,0x0,8
tick,0x7ffdf681f424,1570190,0,0x0,8
tick,0x7ffdf681f424,1572131,0,0x0,8
tick,0x7ffdf681f424,1574043,0,0x0,8
tick,0x7ffdf681f424,1576131,0,0x0,8
tick,0x7ffdf681f424,1578115,0,0x0,8
tick,0x7ffdf681f424,1580119,0,0x0,8
tick,0x7ffdf681f424,1582018,0,0x0,8
tick,0x7ffdf681f424,1584119,0,0x0,8
tick,0x7ffdf681f424,1586086,0,0x0,8
tick,0x7ffdf681f424,1588094,0,0x0,8
tick,0x7ffdf681f424,1590001,0,0x0,8
tick,0x7ffdf681f424,1592012,0,0x0,8
tick,0x7ffdf681f424,1594104,0,0x0,8
tick,0x7ffdf681f424,1596080,0,0x0,8
tick,0x7ffdf681f424,1597988,0,0x0,8
tick,0x7ffdf681f424,1599960,0,0x0,8
tick,0x7ffdf681f424,1601971,0,0x0,8
tick,0x7ffdf681f424,1603956,0,0x0,8
tick,0x7ffdf681f424,1606007,0,0x0,8
tick,0x7ffdf681f424,1607905,0,0x0,8
tick,0x7ffdf681f424,1610039,0,0x0,8
tick,0x7ffdf681f424,1611972,0,0x0,8
tick,0x7ffdf681f424,1614060,0,0x0,8
tick,0x7ffdf681f424,1615921,0,0x0,8
tick,0x7ffdf681f424,1618014,0,0x0,8
tick,0x7ffdf681f424,1620010,0,0x0,8
tick,0x7ffdf681f424,1622010,0,0x0,8
tick,0x7ffdf681f424,1623902,0,0x0,8
tick,0x7ffdf681f424,1626002,0,0x0,8
tick,0x7ffdf681f424,1627979,0,0x0,8
tick,0x7ffdf681f424,1629995,0,0x0,8
tick,0x7ffdf681f424,1631983,0,0x0,8
tick,0x7ffdf681f424,1633971,0,0x0,8
tick,0x7ffdf681f424,1635996,0,0x0,8
tick,0x7ffdf681f424,1637958,0,0x0,8
tick,0x7ffdf681f424,1639951,0,0x0,8
tick,0x7ffdf681f424,1641958,0,0x0,8
tick,0x7ffdf681f424,1643950,0,0x0,8
tick,0x7ffdf681f424,1645946,0,0x0,8
tick,0x7ffdf681f424,1647788,0,0x0,8
tick,0x7ffdf681f424,1649929,0,0x0,8
tick,0x7ffdf681f424,1651933,0,0x0,8
tick,0x7ffdf681f424,1653914,0,0x0,8
tick,0x7ffdf681f424,1655924,0,0x0,8
tick,0x7ffdf681f424,1657945,0,0x0,8
tick,0x7ffdf681f424,1659898,0,0x0,8
tick,0x7ffdf681f424,1661901,0,0x0,8
tick,0x7ffdf681f424,1663899,0,0x0,8
tick,0x7ffdf681f424,1665893,0,0x0,8
tick,0x7ffdf681f424,1667881,0,0x0,8
tick,0x7ffdf681f424,1669891,0,0x0,8
tick,0x7ffdf681f424,1671874,0,0x0,8
tick,0x7ffdf681f424,1673873,0,0x0,8
tick,0x7ffdf681f424,1675861,0,0x0,8
tick,0x7ffdf681f424,1677774,0,0x0,8
tick,0x7ffdf681f424,1679859,0,0x0,8
tick,0x7ffdf681f424,1681859,0,0x0,8
tick,0x7ffdf681f424,1683748,0,0x0,8
tick,0x7ffdf681f424,1685892,0,0x0,8
tick,0x7ffdf681f424,1687725,0,0x0,8
tick,0x7ffdf681f424,1689744,0,0x0,8
tick,0x7ffdf681f424,1691829,0,0x0,8
tick,0x7ffdf681f424,1693818,0,0x0,8
tick,0x7ffdf681f424,1695842,0,0x0,8
tick,0x7ffdf681f424,1697745,0,0x0,8
tick,0x7ffdf681f424,1699795,0,0x0,8
tick,0x7ffdf681f424,1701814,0,0x0,8
tick,0x7ffdf681f424,1703754,0,0x0,8
tick,0x7ffdf681f424,1705785,0,0x0,8
tick,0x7ffdf681f424,1707799,0,0x0,8
tick,0x7ffdf681f424,1709771,0,0x0,8
tick,0x7ffdf681f424,1711732,0,0x0,8
tick,0x7ffdf681f424,1713769,0,0x0,8
tick,0x7ffdf681f424,1715757,0,0x0,8
tick,0x7ffdf681f424,1717759,0,0x0,8
tick,0x7ffdf681f424,1719745,0,0x0,8
tick,0x7ffdf681f424,1721740,0,0x0,8
tick,0x7ffdf681f424,1723776,0,0x0,8
tick,0x7ffdf681f424,1725737,0,0x0,8
tick,0x7ffdf681f424,1727729,0,0x0,8
tick,0x7ffdf681f424,1729684,0,0x0,8
tick,0x7ffdf681f424,1731729,0,0x0,8
tick,0x7ffdf681f424,1733504,0,0x0,8
tick,0x7ffdf681f424,1735538,0,0x0,8
tick,0x7ffdf681f424,1737521,0,0x0,8
tick,0x7ffdf681f424,1739520,0,0x0,8
tick,0x7ffdf681f424,1741651,0,0x0,8
tick,0x7ffdf681f424,1743628,0,0x0,8
tick,0x7ffdf681f424,1745640,0,0x0,8
tick,0x7ffdf681f424,1747683,0,0x0,8
tick,0x7ffdf681f424,1749690,0,0x0,8
tick,0x7ffdf681f424,1751676,0,0x0,8
tick,0x7ffdf681f424,1753686,0,0x0,8
tick,0x7ffdf681f424,1755663,0,0x0,8
tick,0x7ffdf681f424,1757659,0,0x0,8
tick,0x7ffdf681f424,1759656,0,0x0,8
tick,0x7ffdf681f424,1761653,0,0x0,8
tick,0x7ffdf681f424,1763642,0,0x0,8
tick,0x7ffdf681f424,1765553,0,0x0,8
tick,0x7ffdf681f424,1767662,0,0x0,8
tick,0x7ffdf681f424,1769625,0,0x0,8
tick,0x7ffdf681f424,1771619,0,0x0,8
tick,0x7ffdf681f424,1773615,0,0x0,8
tick,0x7ffdf681f424,1775565,0,0x0,8
tick,0x7ffdf681f424,1777604,0,0x0,8
tick,0x7ffdf681f424,1779596,0,0x0,8
tick,0x7ffdf681f424,1781594,0,0x0,8
tick,0x7ffdf681f424,1783595,0,0x0,8
tick,0x7ffdf681f424,1785587,0,0x0,8
tick,0x7ffdf681f424,1787580,0,0x0,8
tick,0x7ffdf681f424,1789497,0,0x0,8
tick,0x7ffdf681f424,1791575,0,0x0,8
tick,0x7ffdf681f424,1793559,0,0x0,8
tick,0x7ffdf681f424,1795567,0,0x0,8
tick,0x7ffdf681f424,1797557,0,0x0,8
tick,0x7ffdf681f424,1799542,0,0x0,8
tick,0x7ffdf681f424,1801539,0,0x0,8
tick,0x7ffdf681f424,1803534,0,0x0,8
tick,0x7ffdf681f424,1805538,0,0x0,8
tick,0x7ffdf681f424,1807516,0,0x0,8
tick,0x7ffdf681f424,1809519,0,0x0,8
tick,0x7ffdf681f424,1811539,0,0x0,8
tick,0x7ffdf681f424,1813509,0,0x0,8
tick,0x7ffdf681f424,1815511,0,0x0,8
tick,0x7ffdf681f424,1817505,0,0x0,8
tick,0x7ffdf681f424,1819508,0,0x0,8
tick,0x7ffdf681f424,1821481,0,0x0,8
tick,0x7ffdf681f424,1823478,0,0x0,8
tick,0x7ffdf681f424,1825474,0,0x0,8
tick,0x7ffdf681f424,1827476,0,0x0,8
tick,0x7ffdf681f424,1829463,0,0x0,8
tick,0x7ffdf681f424,1831383,0,0x0,8
tick,0x7ffdf681f424,1833478,0,0x0,8
tick,0x7ffdf681f424,1835446,0,0x0,8
tick,0x7ffdf681f424,1837448,0,0x0,8
tick,0x7ffdf681f424,1839435,0,0x0,8
tick,0x7ffdf681f424,1841320,0,0x0,8
tick,0x7ffdf681f424,1843319,0,0x0,8
tick,0x7ffdf681f424,1845437,0,0x0,8
tick,0x7ffdf681f424,1847417,0,0x0,8
tick,0x7ffdf681f424,1849421,0,0x0,8
tick,0x7ffdf681f424,1851404,0,0x0,8
tick,0x7ffdf681f424,1853404,0,0x0,8
tick,0x7ffdf681f424,1855426,0,0x0,8
tick,0x7ffdf681f424,1857384,0,0x0,8
tick,0x7ffdf681f424,1859383,0,0x0,8
tick,0x7ffdf681f424,1861384,0,0x0,8
tick,0x7ffdf681f424,1863378,0,0x0,8
tick,0x7ffdf681f424,1865366,0,0x0,8
tick,0x7ffdf681f424,1867364,0,0x0,8
tick,0x7ffdf681f424,1869371,0,0x0,8
tick,0x7ffdf681f424,1871254,0,0x0,8
tick,0x7ffdf681f424,1873347,0,0x0,8
tick,0x7ffdf681f424,1875342,0,0x0,8
tick,0x7ffdf681f424,1877392,0,0x0,8
tick,0x7ffdf681f424,1879331,0,0x0,8
tick,0x7ffdf681f424,1881230,0,0x0,8
tick,0x7ffdf681f424,1883324,0,0x0,8
tick,0x7ffdf681f424,1885315,0,0x0,8
tick,0x7ffdf681f424,1887315,0,0x0,8
tick,0x7ffdf681f424,1889314,0,0x0,8
tick,0x7ffdf681f424,1891292,0,0x0,8
tick,0x7ffdf681f424,1893334,0,0x0,8
tick,0x7ffdf681f424,1895287,0,0x0,8
tick,0x7ffdf681f424,1897279,0,0x0,8
tick,0x7ffdf681f424,1899322,0,0x0,8
tick,0x7ffdf681f424,1901279,0,0x0,8
tick,0x7ffdf681f424,1903288,0,0x0,8
tick,0x7ffdf681f424,1905266,0,0x0,8
tick,0x7ffdf681f424,1907258,0,0x0,8
tick,0x7ffdf681f424,1909248,0,0x0,8
tick,0x7ffdf681f424,1911252,0,0x0,8
tick,0x7ffdf681f424,1913254,0,0x0,8
tick,0x7ffdf681f424,1915157,0,0x0,8
tick,0x7ffdf681f424,1917229,0,0x0,8
tick,0x7ffdf681f424,1919123,0,0x0,8
tick,0x7ffdf681f424,1921177,0,0x0,8
tick,0x7ffdf681f424,1923120,0,0x0,8
tick,0x7ffdf681f424,1925215,0,0x0,8
tick,0x7ffdf681f424,1927208,0,0x0,8
tick,0x7ffdf681f424,1929200,0,0x0,8
tick,0x7ffdf681f424,1931101,0,0x0,8
tick,0x7ffdf681f424,1933192,0,0x0,8
tick,0x7ffdf681f424,1935193,0,0x0,8
tick,0x7ffdf681f424,1937205,0,0x0,8
tick,0x7ffdf681f424,1939057,0,0x0,8
tick,0x7ffdf681f424,1941188,0,0x0,8
tick,0x7ffdf681f424,1943193,0,0x0,8
tick,0x7ffdf681f424,1945149,0,0x0,8
tick,0x7ffdf681f424,1947165,0,0x0,8
tick,0x7ffdf681f424,1949148,0,0x0,8
tick,0x7ffdf681f424,1951131,0,0x0,8
tick,0x7ffdf681f424,1953139,0,0x0,8
tick,0x7ffdf681f424,1955127,0,0x0,8
tick,0x7ffdf681f424,1957118,0,0x0,8
tick,0x7ffdf681f424,1959129,0,0x0,8
tick,0x7ffdf681f424,1961109,0,0x0,8
tick,0x7ffdf681f424,1963103,0,0x0,8
tick,0x7ffdf681f424,1965176,0,0x0,8
tick,0x7ffdf681f424,1967093,0,0x0,8
tick,0x7ffdf681f424,1969087,0,0x0,8
tick,0x7ffdf681f424,1971089,0,0x0,8
tick,0x7ffdf681f424,1972976,0,0x0,8
tick,0x7ffdf681f424,1975114,0,0x0,8
tick,0x7ffdf681f424,1977087,0,0x0,8
tick,0x7ffdf681f424,1979069,0,0x0,8
tick,0x7ffdf681f424,1981078,0,0x0,8
tick,0x7ffdf681f424,1983051,0,0x0,8
tick,0x7ffdf681f424,1985043,0,0x0,8
tick,0x7ffdf681f424,1987102,0,0x0,8
tick,0x7ffdf681f424,1989041,0,0x0,8
tick,0x7ffdf681f424,1991031,0,0x0,8
tick,0x7ffdf681f424,1993051,0,0x0,8
tick,0x7ffdf681f424,1995027,0,0x0,8
tick,0x7ffdf681f424,1996921,0,0x0,8
tick,0x7ffdf681f424,1999024,0,0x0,8
tick,0x7ffdf681f424,2001006,0,0x0,8
tick,0x7ffdf681f424,2003032,0,0x0,8
tick,0x7ffdf681f424,2004993,0,0x0,8
tick,0x7ffdf681f424,2006991,0,0x0,8
tick,0x7ffdf681f424,2009055,0,0x0,8
tick,0x7ffdf681f424,2010981,0,0x0,8
tick,0x7ffdf681f424,2012968,0,0x0,8
tick,0x7ffdf681f424,2014973,0,0x0,8
tick,0x7ffdf681f424,2016968,0,0x0,8
tick,0x7ffdf681f424,2018961,0,0x0,8
tick,0x7ffdf681f424,2020960,0,0x0,8
tick,0x7ffdf681f424,2022833,0,0x0,8
tick,0x7ffdf681f424,2024840,0,0x0,8
tick,0x7ffdf681f424,2026937,0,0x0,8
tick,0x7ffdf681f424,2028926,0,0x0,8
tick,0x7ffdf681f424,2030958,0,0x0,8
tick,0x7ffdf681f424,2032921,0,0x0,8
tick,0x7ffdf681f424,2034937,0,0x0,8
tick,0x7ffdf681f424,2036959,0,0x0,8
tick,0x7ffdf681f424,2038141,0,0x0,8
tick,0x7ffdf681f424,2039324,0,0x0,8
tick,0x7ffdf681f424,2040506,0,0x0,8
tick,0x7ffdf681f424,2042547,0,0x0,8
tick,0x7ffdf681f424,2044490,0,0x0,8
tick,0x7ffdf681f424,2046485,0,0x0,8
tick,0x7ffdf681f424,2048476,0,0x0,8
tick,0x7ffdf681f424,2050688,0,0x0,8
tick,0x7ffdf681f424,2052684,0,0x0,8
tick,0x7ffdf681f424,2054533,0,0x0,8
tick,0x7ffdf681f424,2056581,0,0x0,8
tick,0x7ffdf681f424,2058599,0,0x0,8
tick,0x7ffdf681f424,2060596,0,0x0,8
tick,0x7ffdf681f424,2062621,0,0x0,8
tick,0x7ffdf681f424,2064521,0,0x0,8
tick,0x7ffdf681f424,2066578,0,0x0,8
tick,0x7ffdf681f424,2068581,0,0x0,8
tick,0x7ffdf681f424,2070564,0,0x0,8
tick,0x7ffdf681f424,2072467,0,0x0,8
tick,0x7ffdf681f424,2074562,0,0x0,8
tick,0x7ffdf681f424,2076551,0,0x0,8
tick,0x7ffdf681f424,2078551,0,0x0,8
tick,0x7ffdf681f424,2080538,0,0x0,8
tick,0x7ffdf681f424,2082425,0,0x0,8
tick,0x7ffdf681f424,2084575,0,0x0,8
tick,0x7ffdf681f424,2086475,0,0x0,8
tick,0x7ffdf681f424,2088517,0,0x0,8
tick,0x7ffdf681f424,2090524,0,0x0,8
tick,0x7ffdf681f424,2092511,0,0x0,8
tick,0x7ffdf681f424,2094501,0,0x0,8
tick,0x7ffdf681f424,2096507,0,0x0,8
tick,0x7ffdf681f424,2098492,0,0x0,8
tick,0x7ffdf681f424,2100517,0,0x0,8
tick,0x7ffdf681f424,2102490,0,0x0,8
tick,0x7ffdf681f424,2104482,0,0x0,8
tick,0x7ffdf681f424,2106430,0,0x0,8
tick,0x7ffdf681f424,2108532,0,0x0,8
tick,0x7ffdf681f424,2110457,0,0x0,8
tick,0x7ffdf681f424,2112472,0,0x0,8
tick,0x7ffdf681f424,2114427,0,0x0,8
tick,0x7ffdf681f424,2116445,0,0x0,8
tick,0x7ffdf681f424,2118465,0,0x0,8
tick,0x7ffdf681f424,2120426,0,0x0,8
tick,0x7ffdf681f424,2122435,0,0x0,8
tick,0x7ffdf681f424,2124421,0,0x0,8
tick,0x7ffdf681f424,2126414,0,0x0,8
tick,0x7ffdf681f424,2128451,0,0x0,8
tick,0x7ffdf681f424,2130435,0,0x0,8
tick,0x7ffdf681f424,2132398,0,0x0,8
tick,0x7ffdf681f424,2134403,0,0x0,8
tick,0x7ffdf681f424,2136388,0,0x0,8
tick,0x7ffdf681f424,2138382,0,0x0,8
tick,0x7ffdf681f424,2140391,0,0x0,8
tick,0x7ffdf681f424,2142378,0,0x0,8
tick,0x7ffdf681f424,2144412,0,0x0,8
tick,0x7ffdf681f424,2146401,0,0x0,8
tick,0x7ffdf681f424,2148292,0,0x0,8
tick,0x7ffdf681f424,2150268,0,0x0,8
tick,0x7ffdf681f424,2152351,0,0x0,8
tick,0x7ffdf681f424,2154343,0,0x0,8
tick,0x7ffdf681f424,2156231,0,0x0,8
tick,0x7ffdf681f424,2158330,0,0x0,8
tick,0x7ffdf681f424,2160323,0,0x0,8
tick,0x7ffdf681f424,2162346,0,0x0,8
tick,0x7ffdf681f424,2164328,0,0x0,8
tick,0x7ffdf681f424,2166320,0,0x0,8
tick,0x7ffdf681f424,2168302,0,0x0,8
tick,0x7ffdf681f424,2170303,0,0x0,8
tick,0x7ffdf681f424,2172331,0,0x0,8
tick,0x7ffdf681f424,2174311,0,0x0,8
tick,0x7ffdf681f424,2176281,0,0x0,8
tick,0x7ffdf681f424,2178283,0,0x0,8
tick,0x7ffdf681f424,2180279,0,0x0,8
tick,0x7ffdf681f424,2182277,0,0x0,8
tick,0x7ffdf681f424,2184265,0,0x0,8
tick,0x7ffdf681f424,2186255,0,0x0,8
tick,0x7ffdf681f424,2188255,0,0x0,8
tick,0x7ffdf681f424,2190244,0,0x0,8
tick,0x7ffdf681f424,2192238,0,0x0,8
tick,0x7ffdf681f424,2194330,0,0x0,8
tick,0x7ffdf681f424,2196254,0,0x0,8
tick,0x7ffdf681f424,2198227,0,0x0,8
tick,0x7ffdf681f424,2200233,0,0x0,8
tick,0x7ffdf681f424,2202206,0,0x0,8
tick,0x7ffdf681f424,2204208,0,0x0,8
tick,0x7ffdf681f424,2206125,0,0x0,8
tick,0x7ffdf681f424,2208086,0,0x0,8
tick,0x7ffdf681f424,2210201,0,0x0,8
tick,0x7ffdf681f424,2212187,0,0x0,8
tick,0x7ffdf681f424,2214186,0,0x0,8
tick,0x7ffdf681f424,2216245,0,0x0,8
tick,0x7ffdf681f424,2218185,0,0x0,8
tick,0x7ffdf681f424,2220165,0,0x0,8
tick,0x7ffdf681f424,2222166,0,0x0,8
tick,0x7ffdf681f424,2224154,0,0x0,8
tick,0x7ffdf681f424,2226161,0,0x0,8
tick,0x7ffdf681f424,2228182,0,0x0,8
tick,0x7ffdf681f424,2230141,0,0x0,8
tick,0x7ffdf681f424,2232148,0,0x0,8
tick,0x7ffdf681f424,2234126,0,0x0,8
tick,0x7ffdf681f424,2236015,0,0x0,8
tick,0x7ffdf681f424,2238199,0,0x0,8
tick,0x7ffdf681f424,2240135,0,0x0,8
tick,0x7ffdf681f424,2242104,0,0x0,8
tick,0x7ffdf681f424,2244109,0,0x0,8
tick,0x7ffdf681f424,2246102,0,0x0,8
tick,0x7ffdf681f424,2247989,0,0x0,8
tick,0x7ffdf681f424,2250098,0,0x0,8
tick,0x7ffdf681f424,2252080,0,0x0,8
tick,0x7ffdf681f424,2254083,0,0x0,8
tick,0x7ffdf681f424,2256074,0,0x0,8
tick,0x7ffdf681f424,2258058,0,0x0,8
tick,0x7ffdf681f424,2260097,0,0x0,8
tick,0x7ffdf681f424,2262093,0,0x0,8
tick,0x7ffdf681f424,2264056,0,0x0,8
tick,0x7ffdf681f424,2266048,0,0x0,8
tick,0x7ffdf681f424,2268054,0,0x0,8
tick,0x7ffdf681f424,2270030,0,0x0,8
tick,0x7ffdf681f424,2272065,0,0x0,8
tick,0x7ffdf681f424,2274020,0,0x0,8
tick,0x7ffdf681f424,2276028,0,0x0,8
tick,0x7ffdf681f424,2278008,0,0x0,8
tick,0x7ffdf681f424,2280004,0,0x0,8
tick,0x7ffdf681f424,2282071,0,0x0,8
tick,0x7ffdf681f424,2284020,0,0x0,8
tick,0x7ffdf681f424,2285987,0,0x0,8
tick,0x7ffdf681f424,2287997,0,0x0,8
tick,0x7ffdf681f424,2289977,0,0x0,8
tick,0x7ffdf681f424,2291972,0,0x0,8
tick,0x7ffdf681f424,2293992,0,0x0,8
tick,0x7ffdf681f424,2295956,0,0x0,8
tick,0x7ffdf681f424,2297849,0,0x0,8
tick,0x7ffdf681f424,2299958,0,0x0,8
tick,0x7ffdf681f424,2301843,0,0x0,8
tick,0x7ffdf681f424,2303904,0,0x0,8
tick,0x7ffdf681f424,2306027,0,0x0,8
tick,0x7ffdf681f424,2307968,0,0x0,8
tick,0x7ffdf681f424,2309944,0,0x0,8
tick,0x7ffdf681f424,2311920,0,0x0,8
tick,0x7ffdf681f424,2313911,0,0x0,8
tick,0x7ffdf681f424,2315818,0,0x0,8
tick,0x7ffdf681f424,2317902,0,0x0,8
tick,0x7ffdf681f424,2319906,0,0x0,8
tick,0x7ffdf681f424,2321892,0,0x0,8
tick,0x7ffdf681f424,2323887,0,0x0,8
tick,0x7ffdf681f424,2325921,0,0x0,8
tick,0x7ffdf681f424,2327877,0,0x0,8
tick,0x7ffdf681f424,2329870,0,0x0,8
tick,0x7ffdf681f424,2331767,0,0x0,8
tick,0x7ffdf681f424,2333859,0,0x0,8
tick,0x7ffdf681f424,2335854,0,0x0,8
tick,0x7ffdf681f424,2337879,0,0x0,8
tick,0x7ffdf681f424,2339750,0,0x0,8
tick,0x7ffdf681f424,2341847,0,0x0,8
tick,0x7ffdf681f424,2343845,0,0x0,8
tick,0x7ffdf681f424,2345837,0,0x0,8
tick,0x7ffdf681f424,2347790,0,0x0,8
tick,0x7ffdf681f424,2349855,0,0x0,8
tick,0x7ffdf681f424,2351812,0,0x0,8
tick,0x7ffdf681f424,2353716,0,0x0,8
tick,0x7ffdf681f424,2355795,0,0x0,8
tick,0x7ffdf681f424,2357799,0,0x0,8
tick,0x7ffdf681f424,2359807,0,0x0,8
tick,0x7ffdf681f424,2361793,0,0x0,8
tick,0x7ffdf681f424,2363791,0,0x0,8
tick,0x7ffdf681f424,2365774,0,0x0,8
tick,0x7ffdf681f424,2367769,0,0x0,8
tick,0x7ffdf681f424,2369807,0,0x0,8
tick,0x7ffdf681f424,2371760,0,0x0,8
tick,0x7ffdf681f424,2373753,0,0x0,8
tick,0x7ffdf681f424,2375756,0,0x0,8
tick,0x7ffdf681f424,2377742,0,0x0,8
tick,0x7ffdf681f424,2379636,0,0x0,8
tick,0x7ffdf681f424,2381737,0,0x0,8
tick,0x7ffdf681f424,2383727,0,0x0,8
tick,0x7ffdf681f424,2385730,0,0x0,8
tick,0x7ffdf681f424,2387716,0,0x0,8
tick,0x7ffdf681f424,2389606,0,0x0,8
tick,0x7ffdf681f424,2391700,0,0x0,8
tick,0x7ffdf681f424,2393728,0,0x0,8
tick,0x7ffdf681f424,2395695,0,0x0,8
tick,0x7ffdf681f424,2397687,0,0x0,8
tick,0x7ffdf681f424,2399686,0,0x0,8
tick,0x7ffdf681f424,2401683,0,0x0,8
tick,0x7ffdf681f424,2403706,0,0x0,8
tick,0x7ffdf681f424,2405674,0,0x0,8
tick,0x7ffdf681f424,2407677,0,0x0,8
tick,0x7ffdf681f424,2409657,0,0x0,8
tick,0x7ffdf681f424,2411653,0,0x0,8
tick,0x7ffdf681f424,2413679,0,0x0,8
tick,0x7ffdf681f424,2415641,0,0x0,8
tick,0x7ffdf681f424,2417636,0,0x0,8
tick,0x7ffdf681f424,2419633,0,0x0,8
tick,0x7ffdf681f424,2421625,0,0x0,8
tick,0x7ffdf681f424,2423510,0,0x0,8
tick,0x7ffdf681f424,2425534,0,0x0,8
tick,0x7ffdf681f424,2427499,0,0x0,8
tick,0x7ffdf681f424,2429561,0,0x0,8
tick,0x7ffdf681f424,2431547,0,0x0,8
tick,0x7ffdf681f424,2433483,0,0x0,8
tick,0x7ffdf681f424,2435509,0,0x0,8
tick,0x7ffdf681f424,2437511,0,0x0,8
tick,0x7ffdf681f424,2439542,0,0x0,8
tick,0x7ffdf681f424,2441473,0,0x0,8
tick,0x7ffdf681f424,2443499,0,0x0,8
tick,0x7ffdf681f424,2445446,0,0x0,8
tick,0x7ffdf681f424,2447530,0,0x0,8
tick,0x7ffdf681f424,2449437,0,0x0,8
tick,0x7ffdf681f424,2451454,0,0x0,8
tick,0x7ffdf681f424,2453431,0,0x0,8
tick,0x7ffdf681f424,2455433,0,0x0,8
tick,0x7ffdf681f424,2457448,0,0x0,8
tick,0x7ffdf681f424,2459438,0,0x0,8
tick,0x7ffdf681f424,2461448,0,0x0,8
tick,0x7ffdf681f424,2463390,0,0x0,8
tick,0x7ffdf681f424,2465430,0,0x0,8
tick,0x7ffdf681f424,2467401,0,0x0,8
tick,0x7ffdf681f424,2469407,0,0x0,8
tick,0x7ffdf681f424,2471440,0,0x0,8
tick,0x7ffdf681f424,2473379,0,0x0,8
tick,0x7ffdf681f424,2475424,0,0x0,8
tick,0x7ffdf681f424,2477378,0,0x0,8
tick,0x7ffdf681f424,2479444,0,0x0,8
tick,0x7ffdf681f424,2481373,0,0x0,8
tick,0x7ffdf681f424,2483416,0,0x0,8
tick,0x7ffdf681f424,2485368,0,0x0,8
tick,0x7ffdf681f424,2487331,0,0x0,8
tick,0x7ffdf681f424,2489372,0,0x0,8
tick,0x7ffdf681f424,2491417,0,0x0,8
tick,0x7ffdf681f424,2493374,0,0x0,8
tick,0x7ffdf681f424,2495369,0,0x0,8
tick,0x7ffdf681f424,2497356,0,0x0,8
tick,0x7ffdf681f424,2499337,0,0x0,8
tick,0x7ffdf681f424,2501375,0,0x0,8
tick,0x7ffdf681f424,2503353,0,0x0,8
tick,0x7ffdf681f424,2505335,0,0x0,8
tick,0x7ffdf681f424,2507307,0,0x0,8
tick,0x7ffdf681f424,2509411,0,0x0,8
tick,0x7ffdf681f424,2511292,0,0x0,8
tick,0x7ffdf681f424,2513351,0,0x0,8
tick,0x7ffdf681f424,2515320,0,0x0,8
tick,0x7ffdf681f424,2517278,0,0x0,8
tick,0x7ffdf681f424,2519279,0,0x0,8
tick,0x7ffdf681f424,2521271,0,0x0,8
tick,0x7ffdf681f424,2523227,0,0x0,8
tick,0x7ffdf681f424,2525311,0,0x0,8
tick,0x7ffdf681f424,2527309,0,0x0,8
tick,0x7ffdf681f424,2529324,0,0x0,8
tick,0x7ffdf681f424,2531284,0,0x0,8
tick,0x7ffdf681f424,2533230,0,0x0,8
tick,0x7ffdf681f424,2535251,0,0x0,8
tick,0x7ffdf681f424,2537273,0,0x0,8
tick,0x7ffdf681f424,2539262,0,0x0,8
tick,0x7ffdf681f424,2541313,0,0x0,8
tick,0x7ffdf681f424,2543193,0,0x0,8
tick,0x7ffdf681f424,2545296,0,0x0,8
tick,0x7ffdf681f424,2547334,0,0x0,8
tick,0x7ffdf681f424,2549312,0,0x0,8
tick,0x7ffdf681f424,2551245,0,0x0,8
tick,0x7ffdf681f424,2553256,0,0x0,8
tick,0x7ffdf681f424,2555271,0,0x0,8
tick,0x7ffdf681f424,2557142,0,0x0,8
tick,0x7ffdf681f424,2559257,0,0x0,8
tick,0x7ffdf681f424,2561266,0,0x0,8
tick,0x7ffdf681f424,2563260,0,0x0,8
tick,0x7ffdf681f424,2565142,0,0x0,8
tick,0x7ffdf681f424,2567250,0,0x0,8
tick,0x7ffdf681f424,2569238,0,0x0,8
tick,0x7ffdf681f424,2571227,0,0x0,8
tick,0x7ffdf681f424,2573110,0,0x0,8
tick,0x7ffdf681f424,2575214,0,0x0,8
tick,0x7ffdf681f424,2577209,0,0x0,8
tick,0x7ffdf681f424,2579202,0,0x0,8
tick,0x7ffdf681f424,2581123,0,0x0,8
tick,0x7ffdf681f424,2583052,0,0x0,8
tick,0x7ffdf681f424,2585184,0,0x0,8
tick,0x7ffdf681f424,2587183,0,0x0,8
tick,0x7ffdf681f424,2589165,0,0x0,8
tick,0x7ffdf681f424,2591165,0,0x0,8
tick,0x7ffdf681f424,2593160,0,0x0,8
tick,0x7ffdf681f424,2595180,0,0x0,8
tick,0x7ffdf681f424,2597166,0,0x0,8
tick,0x7ffdf681f424,2599158,0,0x0,8
tick,0x7ffdf681f424,2601167,0,0x0,8
tick,0x7ffdf681f424,2603139,0,0x0,8
tick,0x7ffdf681f424,2605147,0,0x0,8
tick,0x7ffdf681f424,2607044,0,0x0,8
tick,0x7ffdf681f424,2609133,0,0x0,8
tick,0x7ffdf681f424,2611022,0,0x0,8
tick,0x7ffdf681f424,2613116,0,0x0,8
tick,0x7ffdf681f424,2615032,0,0x0,8
tick,0x7ffdf681f424,2616997,0,0x0,8
tick,0x7ffdf681f424,2619088,0,0x0,8
tick,0x7ffdf681f424,2621136,0,0x0,8
tick,0x7ffdf681f424,2623023,0,0x0,8
tick,0x7ffdf681f424,2625095,0,0x0,8
tick,0x7ffdf681f424,2627067,0,0x0,8
tick,0x7ffdf681f424,2629058,0,0x0,8
tick,0x7ffdf681f424,2631058,0,0x0,8
tick,0x7ffdf681f424,2632981,0,0x0,8
tick,0x7ffdf681f424,2635048,0,0x0,8
tick,0x7ffdf681f424,2637038,0,0x0,8
tick,0x7ffdf681f424,2639034,0,0x0,8
tick,0x7ffdf681f424,2640955,0,0x0,8
tick,0x7ffdf681f424,2643024,0,0x0,8
tick,0x7ffdf681f424,2645031,0,0x0,8
tick,0x7ffdf681f424,2647014,0,0x0,8
tick,0x7ffdf681f424,2648898,0,0x0,8
tick,0x7ffdf681f424,2651001,0,0x0,8
tick,0x7ffdf681f424,2652996,0,0x0,8
tick,0x7ffdf681f424,2655015,0,0x0,8
tick,0x7ffdf681f424,2656874,0,0x0,8
tick,0x7ffdf681f424,2658981,0,0x0,8
tick,0x7ffdf681f424,2660976,0,0x0,8
tick,0x7ffdf681f424,2662967,0,0x0,8
tick,0x7ffdf681f424,2664852,0,0x0,8
tick,0x7ffdf681f424,2666978,0,0x0,8
tick,0x7ffdf681f424,2668949,0,0x0,8
tick,0x7ffdf681f424,2670963,0,0x0,8
tick,0x7ffdf681f424,2672827,0,0x0,8
tick,0x7ffdf681f424,2674970,0,0x0,8
tick,0x7ffdf681f424,2676934,0,0x0,8
tick,0x7ffdf681f424,2678946,0,0x0,8
tick,0x7ffdf681f424,2680933,0,0x0,8
tick,0x7ffdf681f424,2682926,0,0x0,8
tick,0x7ffdf681f424,2684911,0,0x0,8
tick,0x7ffdf681f424,2686913,0,0x0,8
tick,0x7ffdf681f424,2688866,0,0x0,8
tick,0x7ffdf681f424,2690903,0,0x0,8
tick,0x7ffdf681f424,2692831,0,0x0,8
tick,0x7ffdf681f424,2694883,0,0x0,8
tick,0x7ffdf681f424,2696885,0,0x0,8
tick,0x7ffdf681f424,2698843,0,0x0,8
tick,0x7ffdf681f424,2700904,0,0x0,8
tick,0x7ffdf681f424,2702870,0,0x0,8
tick,0x7ffdf681f424,2704871,0,0x0,8
tick,0x7ffdf681f424,2706766,0,0x0,8
tick,0x7ffdf681f424,2708790,0,0x0,8
tick,0x7ffdf681f424,2710784,0,0x0,8
tick,0x7ffdf681f424,2712844,0,0x0,8
tick,0x7ffdf681f424,2714812,0,0x0,8
tick,0x7ffdf681f424,2716809,0,0x0,8
tick,0x7ffdf681f424,2718721,0,0x0,8
tick,0x7ffdf681f424,2720840,0,0x0,8
tick,0x7ffdf681f424,2722828,0,0x0,8
tick,0x7ffdf681f424,2724813,0,0x0,8
tick,0x7ffdf681f424,2726806,0,0x0,8
tick,0x7ffdf681f424,2728800,0,0x0,8
tick,0x7ffdf681f424,2730795,0,0x0,8
tick,0x7ffdf681f424,2732795,0,0x0,8
tick,0x7ffdf681f424,2734671,0,0x0,8
tick,0x7ffdf681f424,2736766,0,0x0,8
tick,0x7ffdf681f424,2738741,0,0x0,8
tick,0x7ffdf681f424,2740773,0,0x0,8
tick,0x7ffdf681f424,2742752,0,0x0,8
tick,0x7ffdf681f424,2744762,0,0x0,8
tick,0x7ffdf681f424,2746752,0,0x0,8
tick,0x7ffdf681f424,2748711,0,0x0,8
tick,0x7ffdf681f424,2750746,0,0x0,8
tick,0x7ffdf681f424,2752681,0,0x0,8
tick,0x7ffdf681f424,2754644,0,0x0,8
tick,0x7ffdf681f424,2756621,0,0x0,8
tick,0x7ffdf681f424,2758712,0,0x0,8
tick,0x7ffdf681f424,2760616,0,0x0,8
tick,0x7ffdf681f424,2762737,0,0x0,8
tick,0x7ffdf681f424,2764649,0,0x0,8
tick,0x7ffdf681f424,2766639,0,0x0,8
tick,0x7ffdf681f424,2768592,0,0x0,8
tick,0x7ffdf681f424,2770582,0,0x0,8
tick,0x7ffdf681f424,2772573,0,0x0,8
tick,0x7ffdf681f424,2774572,0,0x0,8
tick,0x7ffdf681f424,2776621,0,0x0,8
tick,0x7ffdf681f424,2778568,0,0x0,8
tick,0x7ffdf681f424,2780571,0,0x0,8
tick,0x7ffdf681f424,2782548,0,0x0,8
tick,0x7ffdf681f424,2784557,0,0x0,8
tick,0x7ffdf681f424,2786520,0,0x0,8
tick,0x7ffdf681f424,2788528,0,0x0,8
tick,0x7ffdf681f424,2790608,0,0x0,8
tick,0x7ffdf681f424,2792520,0,0x0,8
tick,0x7ffdf681f424,2794528,0,0x0,8
tick,0x7ffdf681f424,2796523,0,0x0,8
tick,0x7ffdf681f424,2798562,0,0x0,8
tick,0x7ffdf681f424,2800534,0,0x0,8
tick,0x7ffdf681f424,2802602,0,0x0,8
tick,0x7ffdf681f424,2804522,0,0x0,8
tick,0x7ffdf681f424,2806484,0,0x0,8
tick,0x7ffdf681f424,2808474,0,0x0,8
tick,0x7ffdf681f424,2810539,0,0x0,8
tick,0x7ffdf681f424,2812505,0,0x0,8
tick,0x7ffdf681f424,2814496,0,0x0,8
tick,0x7ffdf681f424,2816513,0,0x0,8
tick,0x7ffdf681f424,2818454,0,0x0,8
tick,0x7ffdf681f424,2820508,0,0x0,8
tick,0x7ffdf681f424,2822440,0,0x0,8
tick,0x7ffdf681f424,2824438,0,0x0,8
tick,0x7ffdf681f424,2826440,0,0x0,8
tick,0x7ffdf681f424,2828426,0,0x0,8
tick,0x7ffdf681f424,2830479,0,0x0,8
tick,0x7ffdf681f424,2832416,0,0x0,8
tick,0x7ffdf681f424,2834407,0,0x0,8
tick,0x7ffdf681f424,2836419,0,0x0,8
tick,0x7ffdf681f424,2838400,0,0x0,8
tick,0x7ffdf681f424,2840420,0,0x0,8
tick,0x7ffdf681f424,2842396,0,0x0,8
tick,0x7ffdf681f424,2844519,0,0x0,8
tick,0x7ffdf681f424,2846493,0,0x0,8
tick,0x7ffdf681f424,2848373,0,0x0,8
tick,0x7ffdf681f424,2850365,0,0x0,8
tick,0x7ffdf681f424,2852511,0,0x0,8
tick,0x7ffdf681f424,2854456,0,0x0,8
tick,0x7ffdf681f424,2856426,0,0x0,8
tick,0x7ffdf681f424,2858430,0,0x0,8
tick,0x7ffdf681f424,2860446,0,0x0,8
tick,0x7ffdf681f424,2862461,0,0x0,8
tick,0x7ffdf681f424,2864453,0,0x0,8
tick,0x7ffdf681f424,2866429,0,0x0,8
tick,0x7ffdf681f424,2868434,0,0x0,8
tick,0x7ffdf681f424,2870419,0,0x0,8
tick,0x7ffdf681f424,2872357,0,0x0,8
tick,0x7ffdf681f424,2874430,0,0x0,8
tick,0x7ffdf681f424,2876430,0,0x0,8
tick,0x7ffdf681f424,2878392,0,0x0,8
tick,0x7ffdf681f424,2880303,0,0x0,8
tick,0x7ffdf681f424,2882402,0,0x0,8
tick,0x7ffdf681f424,2890026,0,0x0,8
tick,0x7ffdf681f424,2890089,0,0x0,8
tick,0x7ffdf681f424,2896668,0,0x0,8
tick,0x7ffdf681f424,2898332,0,0x0,8
tick,0x7ffdf681f424,2900352,0,0x0,8
tick,0x7ffdf681f424,2902275,0,0x0,8
tick,0x7ffdf681f424,2904202,0,0x0,8
tick,0x7ffdf681f424,2906165,0,0x0,8
tick,0x7ffdf681f424,2908387,0,0x0,8
tick,0x7ffdf681f424,2910406,0,0x0,8
tick,0x7ffdf681f424,2912362,0,0x0,8
tick,0x7ffdf681f424,2914274,0,0x0,8
tick,0x7ffdf681f424,2916253,0,0x0,8
tick,0x7ffdf681f424,2918299,0,0x0,8
tick,0x7ffdf681f424,2920341,0,0x0,8
tick,0x7ffdf681f424,2921530,0,0x0,8
tick,0x7ffdf681f424,2923431,0,0x0,8
tick,0x7ffdf681f424,2924656,0,0x0,8
tick,0x7ffdf681f424,2925882,0,0x0,8
tick,0x7ffdf681f424,2927063,0,0x0,8
tick,0x7ffdf681f424,2928293,0,0x0,8
tick,0x7ffdf681f424,2930283,0,0x0,8
tick,0x7ffdf681f424,2932523,0,0x0,8
tick,0x7ffdf681f424,2934519,0,0x0,8
tick,0x7ffdf681f424,2935708,0,0x0,8
tick,0x7ffdf681f424,2936940,0,0x0,8
tick,0x7ffdf681f424,2938846,0,0x0,8
tick,0x7ffdf681f424,2940925,0,0x0,8
tick,0x7ffdf681f424,2942886,0,0x0,8
tick,0x7ffdf681f424,2944037,0,0x0,8
tick,0x7ffdf681f424,2946038,0,0x0,8
tick,0x7ffdf681f424,2947265,0,0x0,8
tick,0x7ffdf681f424,2948432,0,0x0,8
tick,0x7ffdf681f424,2950463,0,0x0,8
tick,0x7ffdf681f424,2952390,0,0x0,8
tick,0x7ffdf681f424,2954420,0,0x0,8
tick,0x7ffdf681f424,2956563,0,0x0,8
tick,0x7ffdf681f424,2957649,0,0x0,8
tick,0x7ffdf681f424,2959608,0,0x0,8
tick,0x7ffdf681f424,2961693,0,0x0,8
tick,0x7ffdf681f424,2963694,0,0x0,8
tick,0x7ffdf681f424,2965796,0,0x0,8
tick,0x7ffdf681f424,2967001,0,0x0,8
tick,0x7ffdf681f424,2968209,0,0x0,8
tick,0x7ffdf681f424,2969391,0,0x0,8
tick,0x7ffdf681f424,2971355,0,0x0,8
tick,0x7ffdf681f424,2973255,0,0x0,8
tick,0x7ffdf681f424,2974355,0,0x0,8
tick,0x7ffdf681f424,2976538,0,0x0,8
tick,0x7ffdf681f424,2978650,0,0x0,8
tick,0x7ffdf681f424,2980684,0,0x0,8
tick,0x7ffdf681f424,2982580,0,0x0,8
tick,0x7ffdf681f424,2983713,0,0x0,8
tick,0x7ffdf681f424,2985613,0,0x0,8
tick,0x7ffdf681f424,2987689,0,0x0,8
tick,0x7ffdf681f424,2989656,0,0x0,8
tick,0x7ffdf681f424,2990760,0,0x0,8
tick,0x7ffdf681f424,2992742,0,0x0,8
tick,0x7ffdf681f424,2994639,0,0x0,8
tick,0x7ffdf681f424,2996739,0,0x0,8
tick,0x7ffdf681f424,2998620,0,0x0,8
tick,0x7ffdf681f424,3000624,0,0x0,8
tick,0x7ffdf681f424,3002704,0,0x0,8
tick,0x7ffdf681f424,3004618,0,0x0,8
tick,0x7ffdf681f424,3006605,0,0x0,8
tick,0x7ffdf681f424,3008701,0,0x0,8
tick,0x7ffdf681f424,3010614,0,0x0,8
tick,0x7ffdf681f424,3012694,0,0x0,8
tick,0x7ffdf681f424,3014633,0,0x0,8
tick,0x7ffdf681f424,3016669,0,0x0,8
tick,0x7ffdf681f424,3018563,0,0x0,8
tick,0x7ffdf681f424,3020661,0,0x0,8
tick,0x7ffdf681f424,3022652,0,0x0,8
tick,0x7ffdf681f424,3024663,0,0x0,8
tick,0x7ffdf681f424,3026640,0,0x0,8
tick,0x7ffdf681f424,3028641,0,0x0,8
tick,0x7ffdf681f424,3030629,0,0x0,8
tick,0x7ffdf681f424,3032637,0,0x0,8
tick,0x7ffdf681f424,3034565,0,0x0,8
tick,0x7ffdf681f424,3036623,0,0x0,8
tick,0x7ffdf681f424,3038511,0,0x0,8
tick,0x7ffdf681f424,3040580,0,0x0,8
tick,0x7ffdf681f424,3042603,0,0x0,8
tick,0x7ffdf681f424,3044596,0,0x0,8
tick,0x7ffdf681f424,3046476,0,0x0,8
tick,0x7ffdf681f424,3048594,0,0x0,8
tick,0x7ffdf681f424,3050584,0,0x0,8
tick,0x7ffdf681f424,3052576,0,0x0,8
tick,0x7ffdf681f424,3054574,0,0x0,8
tick,0x7ffdf681f424,3056407,0,0x0,8
tick,0x7ffdf681f424,3058554,0,0x0,8
tick,0x7ffdf681f424,3060554,0,0x0,8
tick,0x7ffdf681f424,3062543,0,0x0,8
tick,0x7ffdf681f424,3064450,0,0x0,8
tick,0x7ffdf681f424,3066539,0,0x0,8
tick,0x7ffdf681f424,3068504,0,0x0,8
tick,0x7ffdf681f424,3070425,0,0x0,8
tick,0x7ffdf681f424,3072425,0,0x0,8
tick,0x7ffdf681f424,3074535,0,0x0,8
tick,0x7ffdf681f424,3076512,0,0x0,8
tick,0x7ffdf681f424,3078526,0,0x0,8
tick,0x7ffdf681f424,3080503,0,0x0,8
tick,0x7ffdf681f424,3082411,0,0x0,8
tick,0x7ffdf681f424,3084512,0,0x0,8
tick,0x7ffdf681f424,3086481,0,0x0,8
tick,0x7ffdf681f424,3088479,0,0x0,8
tick,0x7ffdf681f424,3090382,0,0x0,8
tick,0x7ffdf681f424,3092371,0,0x0,8
tick,0x7ffdf681f424,3094340,0,0x0,8
tick,0x7ffdf681f424,3096327,0,0x0,8
tick,0x7ffdf681f424,3098349,0,0x0,8
tick,0x7ffdf681f424,3100378,0,0x0,8
tick,0x7ffdf681f424,3102437,0,0x0,8
tick,0x7ffdf681f424,3104444,0,0x0,8
tick,0x7ffdf681f424,3106327,0,0x0,8
tick,0x7ffdf681f424,3108321,0,0x0,8
tick,0x7ffdf681f424,3110320,0,0x0,8
tick,0x7ffdf681f424,3112355,0,0x0,8
tick,0x7ffdf681f424,3114327,0,0x0,8
tick,0x7ffdf681f424,3116314,0,0x0,8
tick,0x7ffdf681f424,3118403,0,0x0,8
tick,0x7ffdf681f424,3120273,0,0x0,8
tick,0x7ffdf681f424,3122260,0,0x0,8
tick,0x7ffdf681f424,3124315,0,0x0,8
tick,0x7ffdf681f424,3126316,0,0x0,8
tick,0x7ffdf681f424,3128313,0,0x0,8
tick,0x7ffdf681f424,3130324,0,0x0,8
tick,0x7ffdf681f424,3132309,0,0x0,8
tick,0x7ffdf681f424,3134315,0,0x0,8
tick,0x7ffdf681f424,3136285,0,0x0,8
tick,0x7ffdf681f424,3138307,0,0x0,8
tick,0x7ffdf681f424,3140234,0,0x0,8
tick,0x7ffdf681f424,3142345,0,0x0,8
tick,0x7ffdf681f424,3144332,0,0x0,8
tick,0x7ffdf681f424,3146266,0,0x0,8
tick,0x7ffdf681f424,3148153,0,0x0,8
tick,0x7ffdf681f424,3150310,0,0x0,8
tick,0x7ffdf681f424,3152314,0,0x0,8
tick,0x7ffdf681f424,3154301,0,0x0,8
tick,0x7ffdf681f424,3156259,0,0x0,8
tick,0x7ffdf681f424,3158292,0,0x0,8
tick,0x7ffdf681f424,3160295,0,0x0,8
tick,0x7ffdf681f424,3162280,0,0x0,8
tick,0x7ffdf681f424,3164274,0,0x0,8
tick,0x7ffdf681f424,3166314,0,0x0,8
tick,0x7ffdf681f424,3168254,0,0x0,8
tick,0x7ffdf681f424,3170261,0,0x0,8
tick,0x7ffdf681f424,3172255,0,0x0,8
tick,0x7ffdf681f424,3174247,0,0x0,8
tick,0x7ffdf681f424,3176243,0,0x0,8
tick,0x7ffdf681f424,3178250,0,0x0,8
tick,0x7ffdf681f424,3180237,0,0x0,8
tick,0x7ffdf681f424,3182212,0,0x0,8
tick,0x7ffdf681f424,3184227,0,0x0,8
tick,0x7ffdf681f424,3186216,0,0x0,8
tick,0x7ffdf681f424,3188244,0,0x0,8
tick,0x7ffdf681f424,3190212,0,0x0,8
tick,0x7ffdf681f424,3192203,0,0x0,8
tick,0x7ffdf681f424,3194154,0,0x0,8
tick,0x7ffdf681f424,3196189,0,0x0,8
tick,0x7ffdf681f424,3198092,0,0x0,8
tick,0x7ffdf681f424,3200188,0,0x0,8
tick,0x7ffdf681f424,3202175,0,0x0,8
tick,0x7ffdf681f424,3204186,0,0x0,8
tick,0x7ffdf681f424,3206177,0,0x0,8
tick,0x7ffdf681f424,3208164,0,0x0,8
tick,0x7ffdf681f424,3210097,0,0x0,8
tick,0x7ffdf681f424,3212167,0,0x0,8
tick,0x7ffdf681f424,3214166,0,0x0,8
tick,0x7ffdf681f424,3216145,0,0x0,8
tick,0x7ffdf681f424,3218138,0,0x0,8
tick,0x7ffdf681f424,3220128,0,0x0,8
tick,0x7ffdf681f424,3222154,0,0x0,8
tick,0x7ffdf681f424,3224005,0,0x0,8
tick,0x7ffdf681f424,3226059,0,0x0,8
tick,0x7ffdf681f424,3228016,0,0x0,8
tick,0x7ffdf681f424,3230013,0,0x0,8
tick,0x7ffdf681f424,3231893,0,0x0,8
tick,0x7ffdf681f424,3233880,0,0x0,8
tick,0x7ffdf681f424,3235941,0,0x0,8
tick,0x7ffdf681f424,3238074,0,0x0,8
tick,0x7ffdf681f424,3239923,0,0x0,8
tick,0x7ffdf681f424,3242008,0,0x0,8
tick,0x7ffdf681f424,3243971,0,0x0,8
tick,0x7ffdf681f424,3246059,0,0x0,8
tick,0x7ffdf681f424,3247946,0,0x0,8
tick,0x7ffdf681f424,3249959,0,0x0,8
tick,0x7ffdf681f424,3252048,0,0x0,8
tick,0x7ffdf681f424,3253987,0,0x0,8
tick,0x7ffdf681f424,3256051,0,0x0,8
tick,0x7ffdf681f424,3257938,0,0x0,8
tick,0x7ffdf681f424,3259933,0,0x0,8
tick,0x7ffdf681f424,3262027,0,0x0,8
tick,0x7ffdf681f424,3264015,0,0x0,8
tick,0x7ffdf681f424,3265930,0,0x0,8
tick,0x7ffdf681f424,3267997,0,0x0,8
tick,0x7ffdf681f424,3269995,0,0x0,8
tick,0x7ffdf681f424,3271982,0,0x0,8
tick,0x7ffdf681f424,3273894,0,0x0,8
tick,0x7ffdf681f424,3275979,0,0x0,8
tick,0x7ffdf681f424,3277981,0,0x0,8
tick,0x7ffdf681f424,3279971,0,0x0,8
tick,0x7ffdf681f424,3281835,0,0x0,8
tick,0x7ffdf681f424,3283954,0,0x0,8
tick,0x7ffdf681f424,3285944,0,0x0,8
tick,0x7ffdf681f424,3287955,0,0x0,8
tick,0x7ffdf681f424,3289788,0,0x0,8
tick,0x7ffdf681f424,3291929,0,0x0,8
tick,0x7ffdf681f424,3293917,0,0x0,8
tick,0x7ffdf681f424,3295912,0,0x0,8
tick,0x7ffdf681f424,3297889,0,0x0,8
tick,0x7ffdf681f424,3299811,0,0x0,8
tick,0x7ffdf681f424,3301824,0,0x0,8
tick,0x7ffdf681f424,3303911,0,0x0,8
tick,0x7ffdf681f424,3305900,0,0x0,8
tick,0x7ffdf681f424,3307804,0,0x0,8
tick,0x7ffdf681f424,3309781,0,0x0,8
tick,0x7ffdf681f424,3311771,0,0x0,8
tick,0x7ffdf681f424,3313881,0,0x0,8
tick,0x7ffdf681f424,3315778,0,0x0,8
tick,0x7ffdf681f424,3317763,0,0x0,8
tick,0x7ffdf681f424,3319912,0,0x0,8
tick,0x7ffdf681f424,3321856,0,0x0,8
tick,0x7ffdf681f424,3323754,0,0x0,8
tick,0x7ffdf681f424,3325856,0,0x0,8
tick,0x7ffdf681f424,3327838,0,0x0,8
tick,0x7ffdf681f424,3329836,0,0x0,8
tick,0x7ffdf681f424,3331725,0,0x0,8
tick,0x7ffdf681f424,3333824,0,0x0,8
tick,0x7ffdf681f424,3335812,0,0x0,8
tick,0x7ffdf681f424,3337809,0,0x0,8
tick,0x7ffdf681f424,3339738,0,0x0,8
tick,0x7ffdf681f424,3341810,0,0x0,8
tick,0x7ffdf681f424,3343804,0,0x0,8
tick,0x7ffdf681f424,3345828,0,0x0,8
tick,0x7ffdf681f424,3347784,0,0x0,8
tick,0x7ffdf681f424,3349785,0,0x0,8
tick,0x7ffdf681f424,3351785,0,0x0,8
tick,0x7ffdf681f424,3353787,0,0x0,8
tick,0x7ffdf681f424,3355690,0,0x0,8
tick,0x7ffdf681f424,3357774,0,0x0,8
tick,0x7ffdf681f424,3359756,0,0x0,8
tick,0x7ffdf681f424,3361664,0,0x0,8
tick,0x7ffdf681f424,3363745,0,0x0,8
tick,0x7ffdf681f424,3365660,0,0x0,8
tick,0x7ffdf681f424,3367654,0,0x0,8
tick,0x7ffdf681f424,3369721,0,0x0,8
tick,0x7ffdf681f424,3371722,0,0x0,8
tick,0x7ffdf681f424,3373629,0,0x0,8
tick,0x7ffdf681f424,3375659,0,0x0,8
tick,0x7ffdf681f424,3377626,0,0x0,8
tick,0x7ffdf681f424,3379639,0,0x0,8
tick,0x7ffdf681f424,3381592,0,0x0,8
tick,0x7ffdf681f424,3383586,0,0x0,8
tick,0x7ffdf681f424,3385678,0,0x0,8
tick,0x7ffdf681f424,3387682,0,0x0,8
tick,0x7ffdf681f424,3389679,0,0x0,8
tick,0x7ffdf681f424,3391668,0,0x0,8
tick,0x7ffdf681f424,3393567,0,0x0,8
tick,0x7ffdf681f424,3395604,0,0x0,8
tick,0x7ffdf681f424,3397618,0,0x0,8
tick,0x7ffdf681f424,3399650,0,0x0,8
tick,0x7ffdf681f424,3401548,0,0x0,8
tick,0x7ffdf681f424,3403533,0,0x0,8
tick,0x7ffdf681f424,3405486,0,0x0,8
tick,0x7ffdf681f424,3407471,0,0x0,8
tick,0x7ffdf681f424,3409539,0,0x0,8
tick,0x7ffdf681f424,3411541,0,0x0,8
tick,0x7ffdf681f424,3413522,0,0x0,8
tick,0x7ffdf681f424,3415527,0,0x0,8
tick,0x7ffdf681f424,3417426,0,0x0,8
tick,0x7ffdf681f424,3419506,0,0x0,8
tick,0x7ffdf681f424,3421474,0,0x0,8
tick,0x7ffdf681f424,3423475,0,0x0,8
tick,0x7ffdf681f424,3425491,0,0x0,8
tick,0x7ffdf681f424,3427450,0,0x0,8
tick,0x7ffdf681f424,3429445,0,0x0,8
tick,0x7ffdf681f424,3431445,0,0x0,8
tick,0x7ffdf681f424,3433399,0,0x0,8
tick,0x7ffdf681f424,3435449,0,0x0,8
tick,0x7ffdf681f424,3437446,0,0x0,8
tick,0x7ffdf681f424,3439381,0,0x0,8
tick,0x7ffdf681f424,3441398,0,0x0,8
tick,0x7ffdf681f424,3443364,0,0x0,8
tick,0x7ffdf681f424,3445374,0,0x0,8
tick,0x7ffdf681f424,3447364,0,0x0,8
tick,0x7ffdf681f424,3449360,0,0x0,8
tick,0x7ffdf681f424,3451383,0,0x0,8
tick,0x7ffdf681f424,3453396,0,0x0,8
tick,0x7ffdf681f424,3455384,0,0x0,8
tick,0x7ffdf681f424,3457395,0,0x0,8
tick,0x7ffdf681f424,3459373,0,0x0,8
tick,0x7ffdf681f424,3461326,0,0x0,8
tick,0x7ffdf681f424,3463367,0,0x0,8
tick,0x7ffdf681f424,3465373,0,0x0,8
tick,0x7ffdf681f424,3467316,0,0x0,8
tick,0x7ffdf681f424,3469311,0,0x0,8
tick,0x7ffdf681f424,3471295,0,0x0,8
tick,0x7ffdf681f424,3473264,0,0x0,8
tick,0x7ffdf681f424,3475290,0,0x0,8
tick,0x7ffdf681f424,3477281,0,0x0,8
tick,0x7ffdf681f424,3479283,0,0x0,8
tick,0x7ffdf681f424,3481309,0,0x0,8
tick,0x7ffdf681f424,3483279,0,0x0,8
tick,0x7ffdf681f424,3485316,0,0x0,8
tick,0x7ffdf681f424,3487277,0,0x0,8
tick,0x7ffdf681f424,3489266,0,0x0,8
tick,0x7ffdf681f424,3491248,0,0x0,8
tick,0x7ffdf681f424,3493256,0,0x0,8
tick,0x7ffdf681f424,3495278,0,0x0,8
tick,0x7ffdf681f424,3497279,0,0x0,8
tick,0x7ffdf681f424,3499250,0,0x0,8
tick,0x7ffdf681f424,3501285,0,0x0,8
tick,0x7ffdf681f424,3503264,0,0x0,8
tick,0x7ffdf681f424,3505274,0,0x0,8
tick,0x7ffdf681f424,3507256,0,0x0,8
tick,0x7ffdf681f424,3509266,0,0x0,8
tick,0x7ffdf681f424,3511290,0,0x0,8
tick,0x7ffdf681f424,3513265,0,0x0,8
tick,0x7ffdf681f424,3515278,0,0x0,8
tick,0x7ffdf681f424,3517211,0,0x0,8
tick,0x7ffdf681f424,3519300,0,0x0,8
tick,0x7ffdf681f424,3521279,0,0x0,8
tick,0x7ffdf681f424,3523217,0,0x0,8
tick,0x7ffdf681f424,3525269,0,0x0,8
tick,0x7ffdf681f424,3527294,0,0x0,8
tick,0x7ffdf681f424,3529277,0,0x0,8
tick,0x7ffdf681f424,3531416,0,0x0,8
tick,0x7ffdf681f424,3533143,0,0x0,8
tick,0x7ffdf681f424,3535315,0,0x0,8
tick,0x7ffdf681f424,3537266,0,0x0,8
tick,0x7ffdf681f424,3539218,0,0x0,8
tick,0x7ffdf681f424,3541135,0,0x0,8
tick,0x7ffdf681f424,3543273,0,0x0,8
tick,0x7ffdf681f424,3545214,0,0x0,8
tick,0x7ffdf681f424,3547204,0,0x0,8
tick,0x7ffdf681f424,3549202,0,0x0,8
tick,0x7ffdf681f424,3551095,0,0x0,8
tick,0x7ffdf681f424,3553222,0,0x0,8
tick,0x7ffdf681f424,3555186,0,0x0,8
tick,0x7ffdf681f424,3557182,0,0x0,8
tick,0x7ffdf681f424,3559182,0,0x0,8
tick,0x7ffdf681f424,3561152,0,0x0,8
tick,0x7ffdf681f424,3563172,0,0x0,8
tick,0x7ffdf681f424,3565133,0,0x0,8
tick,0x7ffdf681f424,3567074,0,0x0,8
tick,0x7ffdf681f424,3569173,0,0x0,8
tick,0x7ffdf681f424,3571147,0,0x0,8
tick,0x7ffdf681f424,3573087,0,0x0,8
tick,0x7ffdf681f424,3575128,0,0x0,8
tick,0x7ffdf681f424,3577131,0,0x0,8
tick,0x7ffdf681f424,3579126,0,0x0,8
tick,0x7ffdf681f424,3581168,0,0x0,8
tick,0x7ffdf681f424,3583103,0,0x0,8
tick,0x7ffdf681f424,3585119,0,0x0,8
tick,0x7ffdf681f424,3587093,0,0x0,8
tick,0x7ffdf681f424,3589089,0,0x0,8
tick,0x7ffdf681f424,3591092,0,0x0,8
tick,0x7ffdf681f424,3593092,0,0x0,8
tick,0x7ffdf681f424,3595082,0,0x0,8
tick,0x7ffdf681f424,3597074,0,0x0,8
tick,0x7ffdf681f424,3599066,0,0x0,8
tick,0x7ffdf681f424,3601061,0,0x0,8
tick,0x7ffdf681f424,3603056,0,0x0,8
tick,0x7ffdf681f424,3605039,0,0x0,8
tick,0x7ffdf681f424,3606992,0,0x0,8
tick,0x7ffdf681f424,3608961,0,0x0,8
tick,0x7ffdf681f424,3611032,0,0x0,8
tick,0x7ffdf681f424,3613021,0,0x0,8
tick,0x7ffdf681f424,3614951,0,0x0,8
tick,0x7ffdf681f424,3617046,0,0x0,8
tick,0x7ffdf681f424,3619012,0,0x0,8
tick,0x7ffdf681f424,3621009,0,0x0,8
tick,0x7ffdf681f424,3622970,0,0x0,8
tick,0x7ffdf681f424,3624996,0,0x0,8
tick,0x7ffdf681f424,3627013,0,0x0,8
tick,0x7ffdf681f424,3628990,0,0x0,8
tick,0x7ffdf681f424,3630980,0,0x0,8
tick,0x7ffdf681f424,3632979,0,0x0,8
tick,0x7ffdf681f424,3634970,0,0x0,8
tick,0x7ffdf681f424,3636963,0,0x0,8
tick,0x7ffdf681f424,3638967,0,0x0,8
tick,0x7ffdf681f424,3640951,0,0x0,8
tick,0x7ffdf681f424,3642955,0,0x0,8
tick,0x7ffdf681f424,3644933,0,0x0,8
tick,0x7ffdf681f424,3646938,0,0x0,8
tick,0x7ffdf681f424,3648948,0,0x0,8
tick,0x7ffdf681f424,3650935,0,0x0,8
tick,0x7ffdf681f424,3652950,0,0x0,8
tick,0x7ffdf681f424,3654880,0,0x0,8
tick,0x7ffdf681f424,3656916,0,0x0,8
tick,0x7ffdf681f424,3658806,0,0x0,8
tick,0x7ffdf681f424,3660920,0,0x0,8
tick,0x7ffdf681f424,3662846,0,0x0,8
tick,0x7ffdf681f424,3664814,0,0x0,8
tick,0x7ffdf681f424,3666812,0,0x0,8
tick,0x7ffdf681f424,3668878,0,0x0,8
tick,0x7ffdf681f424,3670767,0,0x0,8
tick,0x7ffdf681f424,3672818,0,0x0,8
tick,0x7ffdf681f424,3674783,0,0x0,8
tick,0x7ffdf681f424,3676747,0,0x0,8
tick,0x7ffdf681f424,3678745,0,0x0,8
tick,0x7ffdf681f424,3680735,0,0x0,8
tick,0x7ffdf681f424,3682768,0,0x0,8
tick,0x7ffdf681f424,3684724,0,0x0,8
tick,0x7ffdf681f424,3686735,0,0x0,8
tick,0x7ffdf681f424,3688717,0,0x0,8
tick,0x7ffdf681f424,3690747,0,0x0,8
tick,0x7ffdf681f424,3692702,0,0x0,8
tick,0x7ffdf681f424,3694715,0,0x0,8
tick,0x7ffdf681f424,3696784,0,0x0,8
tick,0x7ffdf681f424,3698688,0,0x0,8
tick,0x7ffdf681f424,3700681,0,0x0,8
tick,0x7ffdf681f424,3702760,0,0x0,8
tick,0x7ffdf681f424,3704701,0,0x0,8
tick,0x7ffdf681f424,3706668,0,0x0,8
tick,0x7ffdf681f424,3708660,0,0x0,8
tick,0x7ffdf681f424,3710653,0,0x0,8
tick,0x7ffdf681f424,3712650,0,0x0,8
tick,0x7ffdf681f424,3714679,0,0x0,8
tick,0x7ffdf681f424,3716673,0,0x0,8
tick,0x7ffdf681f424,3718655,0,0x0,8
tick,0x7ffdf681f424,3720635,0,0x0,8
tick,0x7ffdf681f424,3722658,0,0x0,8
tick,0x7ffdf681f424,3724686,0,0x0,8
tick,0x7ffdf681f424,3726659,0,0x0,8
tick,0x7ffdf681f424,3728613,0,0x0,8
tick,0x7ffdf681f424,3730634,0,0x0,8
tick,0x7ffdf681f424,3732569,0,0x0,8
tick,0x7ffdf681f424,3734647,0,0x0,8
tick,0x7ffdf681f424,3736592,0,0x0,8
tick,0x7ffdf681f424,3738615,0,0x0,8
tick,0x7ffdf681f424,3740647,0,0x0,8
tick,0x7ffdf681f424,3742614,0,0x0,8
tick,0x7ffdf681f424,3744715,0,0x0,8
tick,0x7ffdf681f424,3746614,0,0x0,8
tick,0x7ffdf681f424,3748600,0,0x0,8
tick,0x7ffdf681f424,3750596,0,0x0,8
tick,0x7ffdf681f424,3752705,0,0x0,8
tick,0x7ffdf681f424,3754691,0,0x0,8
tick,0x7ffdf681f424,3756569,0,0x0,8
tick,0x7ffdf681f424,3758580,0,0x0,8
tick,0x7ffdf681f424,3760683,0,0x0,8
tick,0x7ffdf681f424,3762588,0,0x0,8
tick,0x7ffdf681f424,3764678,0,0x0,8
tick,0x7ffdf681f424,3766548,0,0x0,8
tick,0x7ffdf681f424,3768622,0,0x0,8
tick,0x7ffdf681f424,3770658,0,0x0,8
tick,0x7ffdf681f424,3772636,0,0x0,8
tick,0x7ffdf681f424,3774566,0,0x0,8
tick,0x7ffdf681f424,3776593,0,0x0,8
tick,0x7ffdf681f424,3778629,0,0x0,8
tick,0x7ffdf681f424,3780628,0,0x0,8
tick,0x7ffdf681f424,3782500,0,0x0,8
tick,0x7ffdf681f424,3784613,0,0x0,8
tick,0x7ffdf681f424,3786606,0,0x0,8
tick,0x7ffdf681f424,3788596,0,0x0,8
tick,0x7ffdf681f424,3790395,0,0x0,8
tick,0x7ffdf681f424,3792491,0,0x0,8
tick,0x7ffdf681f424,3794580,0,0x0,8
tick,0x7ffdf681f424,3796579,0,0x0,8
tick,0x7ffdf681f424,3798472,0,0x0,8
tick,0x7ffdf681f424,3800580,0,0x0,8
tick,0x7ffdf681f424,3802560,0,0x0,8
tick,0x7ffdf681f424,3804564,0,0x0,8
tick,0x7ffdf681f424,3806489,0,0x0,8
tick,0x7ffdf681f424,3808448,0,0x0,8
tick,0x7ffdf681f424,3810541,0,0x0,8
tick,0x7ffdf681f424,3812567,0,0x0,8
tick,0x7ffdf681f424,3814446,0,0x0,8
tick,0x7ffdf681f424,3816449,0,0x0,8
tick,0x7ffdf681f424,3818532,0,0x0,8
tick,0x7ffdf681f424,3820519,0,0x0,8
tick,0x7ffdf681f424,3822509,0,0x0,8
tick,0x7ffdf681f424,3824409,0,0x0,8
tick,0x7ffdf681f424,3826517,0,0x0,8
tick,0x7ffdf681f424,3828481,0,0x0,8
tick,0x7ffdf681f424,3830488,0,0x0,8
tick,0x7ffdf681f424,3832403,0,0x0,8
tick,0x7ffdf681f424,3834501,0,0x0,8
tick,0x7ffdf681f424,3836468,0,0x0,8
tick,0x7ffdf681f424,3838345,0,0x0,8
tick,0x7ffdf681f424,3840362,0,0x0,8
tick,0x7ffdf681f424,3842377,0,0x0,8
tick,0x7ffdf681f424,3844450,0,0x0,8
tick,0x7ffdf681f424,3846445,0,0x0,8
tick,0x7ffdf681f424,3848317,0,0x0,8
tick,0x7ffdf681f424,3850335,0,0x0,8
tick,0x7ffdf681f424,3852434,0,0x0,8
tick,0x7ffdf681f424,3854429,0,0x0,8
tick,0x7ffdf681f424,3856318,0,0x0,8
tick,0x7ffdf681f424,3858327,0,0x0,8
tick,0x7ffdf681f424,3860419,0,0x0,8
tick,0x7ffdf681f424,3862336,0,0x0,8
tick,0x7ffdf681f424,3864396,0,0x0,8
tick,0x7ffdf681f424,3866300,0,0x0,8
tick,0x7ffdf681f424,3868304,0,0x0,8
tick,0x7ffdf681f424,3870396,0,0x0,8
tick,0x7ffdf681f424,3872376,0,0x0,8
tick,0x7ffdf681f424,3874262,0,0x0,8
tick,0x7ffdf681f424,3876373,0,0x0,8
tick,0x7ffdf681f424,3878274,0,0x0,8
tick,0x7ffdf681f424,3880367,0,0x0,8
tick,0x7ffdf681f424,3882288,0,0x0,8
tick,0x7ffdf681f424,3884281,0,0x0,8
tick,0x7ffdf681f424,3886339,0,0x0,8
tick,0x7ffdf681f424,3888314,0,0x0,8
tick,0x7ffdf681f424,3890263,0,0x0,8
tick,0x7ffdf681f424,3892321,0,0x0,8
tick,0x7ffdf681f424,3894308,0,0x0,8
tick,0x7ffdf681f424,3896318,0,0x0,8
tick,0x7ffdf681f424,3898240,0,0x0,8
tick,0x7ffdf681f424,3900202,0,0x0,8
tick,0x7ffdf681f424,3902327,0,0x0,8
tick,0x7ffdf681f424,3904297,0,0x0,8
tick,0x7ffdf681f424,3906254,0,0x0,8
tick,0x7ffdf681f424,3908179,0,0x0,8
tick,0x7ffdf681f424,3910281,0,0x0,8
tick,0x7ffdf681f424,3912292,0,0x0,8
tick,0x7ffdf681f424,3914156,0,0x0,8
tick,0x7ffdf681f424,3916231,0,0x0,8
tick,0x7ffdf681f424,3918148,0,0x0,8
tick,0x7ffdf681f424,3920271,0,0x0,8
tick,0x7ffdf681f424,3922211,0,0x0,8
tick,0x7ffdf681f424,3924179,0,0x0,8
tick,0x7ffdf681f424,3926162,0,0x0,8
tick,0x7ffdf681f424,3928253,0,0x0,8
tick,0x7ffdf681f424,3930226,0,0x0,8
tick,0x7ffdf681f424,3932134,0,0x0,8
tick,0x7ffdf681f424,3934079,0,0x0,8
tick,0x7ffdf681f424,3936172,0,0x0,8
tick,0x7ffdf681f424,3938158,0,0x0,8
tick,0x7ffdf681f424,3940079,0,0x0,8
tick,0x7ffdf681f424,3942094,0,0x0,8
tick,0x7ffdf681f424,3944137,0,0x0,8
tick,0x7ffdf681f424,3946127,0,0x0,8
tick,0x7ffdf681f424,3948041,0,0x0,8
tick,0x7ffdf681f424,3950076,0,0x0,8
tick,0x7ffdf681f424,3952129,0,0x0,8
tick,0x7ffdf681f424,3954177,0,0x0,8
tick,0x7ffdf681f424,3956150,0,0x0,8
tick,0x7ffdf681f424,3958111,0,0x0,8
tick,0x7ffdf681f424,3960154,0,0x0,8
tick,0x7ffdf681f424,3962157,0,0x0,8
tick,0x7ffdf681f424,3964141,0,0x0,8
tick,0x7ffdf681f424,3966093,0,0x0,8
tick,0x7ffdf681f424,3968127,0,0x0,8
tick,0x7ffdf681f424,3970126,0,0x0,8
tick,0x7ffdf681f424,3972115,0,0x0,8
tick,0x7ffdf681f424,3974101,0,0x0,8
tick,0x7ffdf681f424,3976104,0,0x0,8
tick,0x7ffdf681f424,3978110,0,0x0,8
tick,0x7ffdf681f424,3980098,0,0x0,8
tick,0x7ffdf681f424,3981980,0,0x0,8
tick,0x7ffdf681f424,3984081,0,0x0,8
tick,0x7ffdf681f424,3986069,0,0x0,8
tick,0x7ffdf681f424,3988016,0,0x0,8
tick,0x7ffdf681f424,3989924,0,0x0,8
tick,0x7ffdf681f424,3992051,0,0x0,8
tick,0x7ffdf681f424,3993951,0,0x0,8
tick,0x7ffdf681f424,3996050,0,0x0,8
tick,0x7ffdf681f424,3998081,0,0x0,8
tick,0x7ffdf681f424,4000043,0,0x0,8
tick,0x7ffdf681f424,4002032,0,0x0,8
tick,0x7ffdf681f424,4004029,0,0x0,8
tick,0x7ffdf681f424,4006018,0,0x0,8
tick,0x7ffdf681f424,4007875,0,0x0,8
tick,0x7ffdf681f424,4009989,0,0x0,8
tick,0x7ffdf681f424,4012011,0,0x0,8
tick,0x7ffdf681f424,4013997,0,0x0,8
tick,0x7ffdf681f424,4015998,0,0x0,8
tick,0x7ffdf681f424,4017903,0,0x0,8
tick,0x7ffdf681f424,4019982,0,0x0,8
tick,0x7ffdf681f424,4021996,0,0x0,8
tick,0x7ffdf681f424,4023869,0,0x0,8
tick,0x7ffdf681f424,4025965,0,0x0,8
tick,0x7ffdf681f424,4027964,0,0x0,8
tick,0x7ffdf681f424,4029952,0,0x0,8
tick,0x7ffdf681f424,4031984,0,0x0,8
tick,0x7ffdf681f424,4033947,0,0x0,8
tick,0x7ffdf681f424,4035947,0,0x0,8
tick,0x7ffdf681f424,4037943,0,0x0,8
tick,0x7ffdf681f424,4039834,0,0x0,8
tick,0x7ffdf681f424,4041936,0,0x0,8
tick,0x7ffdf681f424,4043925,0,0x0,8
tick,0x7ffdf681f424,4045927,0,0x0,8
tick,0x7ffdf681f424,4047920,0,0x0,8
tick,0x7ffdf681f424,4049904,0,0x0,8
tick,0x7ffdf681f424,4051905,0,0x0,8
tick,0x7ffdf681f424,4053933,0,0x0,8
tick,0x7ffdf681f424,4055901,0,0x0,8
tick,0x7ffdf681f424,4057891,0,0x0,8
tick,0x7ffdf681f424,4059892,0,0x0,8
tick,0x7ffdf681f424,4061893,0,0x0,8
tick,0x7ffdf681f424,4063880,0,0x0,8
tick,0x7ffdf681f424,4065872,0,0x0,8
tick,0x7ffdf681f424,4067877,0,0x0,8
tick,0x7ffdf681f424,4069774,0,0x0,8
tick,0x7ffdf681f424,4071858,0,0x0,8
tick,0x7ffdf681f424,4073848,0,0x0,8
tick,0x7ffdf681f424,4075781,0,0x0,8
tick,0x7ffdf681f424,4077802,0,0x0,8
tick,0x7ffdf681f424,4079849,0,0x0,8
tick,0x7ffdf681f424,4081727,0,0x0,8
tick,0x7ffdf681f424,4083819,0,0x0,8
tick,0x7ffdf681f424,4085807,0,0x0,8
tick,0x7ffdf681f424,4087810,0,0x0,8
tick,0x7ffdf681f424,4089754,0,0x0,8
tick,0x7ffdf681f424,4091791,0,0x0,8
tick,0x7ffdf681f424,4093794,0,0x0,8
tick,0x7ffdf681f424,4095788,0,0x0,8
tick,0x7ffdf681f424,4097804,0,0x0,8
tick,0x7ffdf681f424,4099770,0,0x0,8
tick,0x7ffdf681f424,4101769,0,0x0,8
tick,0x7ffdf681f424,4103778,0,0x0,8
tick,0x7ffdf681f424,4105769,0,0x0,8
tick,0x7ffdf681f424,4107756,0,0x0,8
tick,0x7ffdf681f424,4109761,0,0x0,8
tick,0x7ffdf681f424,4111767,0,0x0,8
tick,0x7ffdf681f424,4113742,0,0x0,8
tick,0x7ffdf681f424,4115732,0,0x0,8
tick,0x7ffdf681f424,4117739,0,0x0,8
tick,0x7ffdf681f424,4119663,0,0x0,8
tick,0x7ffdf681f424,4121728,0,0x0,8
tick,0x7ffdf681f424,4123715,0,0x0,8
tick,0x7ffdf681f424,4125716,0,0x0,8
tick,0x7ffdf681f424,4127702,0,0x0,8
tick,0x7ffdf681f424,4129700,0,0x0,8
tick,0x7ffdf681f424,4131589,0,0x0,8
tick,0x7ffdf681f424,4133697,0,0x0,8
tick,0x7ffdf681f424,4135679,0,0x0,8
tick,0x7ffdf681f424,4137680,0,0x0,8
tick,0x7ffdf681f424,4139677,0,0x0,8
tick,0x7ffdf681f424,4141610,0,0x0,8
tick,0x7ffdf681f424,4143703,0,0x0,8
tick,0x7ffdf681f424,4145559,0,0x0,8
tick,0x7ffdf681f424,4147563,0,0x0,8
tick,0x7ffdf681f424,4149672,0,0x0,8
tick,0x7ffdf681f424,4151650,0,0x0,8
tick,0x7ffdf681f424,4153646,0,0x0,8
tick,0x7ffdf681f424,4155641,0,0x0,8
tick,0x7ffdf681f424,4157534,0,0x0,8
tick,0x7ffdf681f424,4159624,0,0x0,8
tick,0x7ffdf681f424,4161618,0,0x0,8
tick,0x7ffdf681f424,4163477,0,0x0,8
tick,0x7ffdf681f424,4165524,0,0x0,8
tick,0x7ffdf681f424,4167634,0,0x0,8
tick,0x7ffdf681f424,4168826,0,0x0,8
tick,0x7ffdf681f424,4169967,0,0x0,8
tick,0x7ffdf681f424,4171154,0,0x0,8
tick,0x7ffdf681f424,4172411,0,0x0,8
tick,0x7ffdf681f424,4173518,0,0x0,8
tick,0x7ffdf681f424,4175505,0,0x0,8
tick,0x7ffdf681f424,4177454,0,0x0,8
tick,0x7ffdf681f424,4178575,0,0x0,8
tick,0x7ffdf681f424,4180586,0,0x0,8
tick,0x7ffdf681f424,4182568,0,0x0,8
tick,0x7ffdf681f424,4184577,0,0x0,8
tick,0x7ffdf681f424,4185704,0,0x0,8
tick,0x7ffdf681f424,4187690,0,0x0,8
tick,0x7ffdf681f424,4189727,0,0x0,8
tick,0x7ffdf681f424,4191673,0,0x0,8
tick,0x7ffdf681f424,4193671,0,0x0,8
tick,0x7ffdf681f424,4195664,0,0x0,8
tick,0x7ffdf681f424,4197658,0,0x0,8
tick,0x7ffdf681f424,4199628,0,0x0,8
tick,0x7ffdf681f424,4201624,0,0x0,8
tick,0x7ffdf681f424,4203699,0,0x0,8
tick,0x7ffdf681f424,4205708,0,0x0,8
tick,0x7ffdf681f424,4207671,0,0x0,8
tick,0x7ffdf681f424,4209668,0,0x0,8
tick,0x7ffdf681f424,4211663,0,0x0,8
tick,0x7ffdf681f424,4213651,0,0x0,8
tick,0x7ffdf681f424,4215650,0,0x0,8
tick,0x7ffdf681f424,4217651,0,0x0,8
tick,0x7ffdf681f424,4219675,0,0x0,8
tick,0x7ffdf681f424,4221636,0,0x0,8
tick,0x7ffdf681f424,4223637,0,0x0,8
tick,0x7ffdf681f424,4225624,0,0x0,8
tick,0x7ffdf681f424,4227647,0,0x0,8
tick,0x7ffdf681f424,4229609,0,0x0,8
tick,0x7ffdf681f424,4231501,0,0x0,8
tick,0x7ffdf681f424,4233607,0,0x0,8
tick,0x7ffdf681f424,4235594,0,0x0,8
tick,0x7ffdf681f424,4237588,0,0x0,8
tick,0x7ffdf681f424,4239599,0,0x0,8
tick,0x7ffdf681f424,4241556,0,0x0,8
tick,0x7ffdf681f424,4243583,0,0x0,8
tick,0x7ffdf681f424,4245565,0,0x0,8
tick,0x7ffdf681f424,4247552,0,0x0,8
tick,0x7ffdf681f424,4249586,0,0x0,8
tick,0x7ffdf681f424,4251548,0,0x0,8
tick,0x7ffdf681f424,4253551,0,0x0,8
tick,0x7ffdf681f424,4255538,0,0x0,8
tick,0x7ffdf681f424,4257527,0,0x0,8
tick,0x7ffdf681f424,4259520,0,0x0,8
tick,0x7ffdf681f424,4261516,0,0x0,8
tick,0x7ffdf681f424,4263489,0,0x0,8
tick,0x7ffdf681f424,4265509,0,0x0,8
tick,0x7ffdf681f424,4267500,0,0x0,8
tick,0x7ffdf681f424,4269501,0,0x0,8
tick,0x7ffdf681f424,4271528,0,0x0,8
tick,0x7ffdf681f424,4273450,0,0x0,8
tick,0x7ffdf681f424,4275498,0,0x0,8
tick,0x7ffdf681f424,4277483,0,0x0,8
tick,0x7ffdf681f424,4279474,0,0x0,8
tick,0x7ffdf681f424,4281429,0,0x0,8
tick,0x7ffdf681f424,4283465,0,0x0,8
tick,0x7ffdf681f424,4285441,0,0x0,8
tick,0x7ffdf681f424,4287450,0,0x0,8
tick,0x7ffdf681f424,4289445,0,0x0,8
tick,0x7ffdf681f424,4291442,0,0x0,8
tick,0x7ffdf681f424,4293479,0,0x0,8
tick,0x7ffdf681f424,4295427,0,0x0,8
tick,0x7ffdf681f424,4297421,0,0x0,8
tick,0x7ffdf681f424,4299312,0,0x0,8
tick,0x7ffdf681f424,4301312,0,0x0,8
tick,0x7ffdf681f424,4303421,0,0x0,8
tick,0x7ffdf681f424,4305408,0,0x0,8
tick,0x7ffdf681f424,4307414,0,0x0,8
tick,0x7ffdf681f424,4309408,0,0x0,8
tick,0x7ffdf681f424,4311407,0,0x0,8
tick,0x7ffdf681f424,4313395,0,0x0,8
tick,0x7ffdf681f424,4315407,0,0x0,8
tick,0x7ffdf681f424,4317367,0,0x0,8
tick,0x7ffdf681f424,4319369,0,0x0,8
tick,0x7ffdf681f424,4321368,0,0x0,8
tick,0x7ffdf681f424,4323258,0,0x0,8
tick,0x7ffdf681f424,4325282,0,0x0,8
tick,0x7ffdf681f424,4327267,0,0x0,8
tick,0x7ffdf681f424,4329163,0,0x0,8
tick,0x7ffdf681f424,4331121,0,0x0,8
tick,0x7ffdf681f424,4333165,0,0x0,8
tick,0x7ffdf681f424,4335243,0,0x0,8
tick,0x7ffdf681f424,4337333,0,0x0,8
tick,0x7ffdf681f424,4339313,0,0x0,8
tick,0x7ffdf681f424,4341309,0,0x0,8
tick,0x7ffdf681f424,4343295,0,0x0,8
tick,0x7ffdf681f424,4345301,0,0x0,8
tick,0x7ffdf681f424,4347288,0,0x0,8
tick,0x7ffdf681f424,4349293,0,0x0,8
tick,0x7ffdf681f424,4351241,0,0x0,8
tick,0x7ffdf681f424,4353277,0,0x0,8
tick,0x7ffdf681f424,4355267,0,0x0,8
tick,0x7ffdf681f424,4357263,0,0x0,8
tick,0x7ffdf681f424,4359296,0,0x0,8
tick,0x7ffdf681f424,4361261,0,0x0,8
tick,0x7ffdf681f424,4363262,0,0x0,8
tick,0x7ffdf681f424,4365143,0,0x0,8
tick,0x7ffdf681f424,4367111,0,0x0,8
tick,0x7ffdf681f424,4369101,0,0x0,8
tick,0x7ffdf681f424,4371204,0,0x0,8
tick,0x7ffdf681f424,4373137,0,0x0,8
tick,0x7ffdf681f424,4375219,0,0x0,8
tick,0x7ffdf681f424,4377143,0,0x0,8
tick,0x7ffdf681f424,4379209,0,0x0,8
tick,0x7ffdf681f424,4381245,0,0x0,8
tick,0x7ffdf681f424,4383198,0,0x0,8
tick,0x7ffdf681f424,4385210,0,0x0,8
tick,0x7ffdf681f424,4387195,0,0x0,8
tick,0x7ffdf681f424,4389183,0,0x0,8
tick,0x7ffdf681f424,4391177,0,0x0,8
tick,0x7ffdf681f424,4393163,0,0x0,8
tick,0x7ffdf681f424,4395168,0,0x0,8
tick,0x7ffdf681f424,4397160,0,0x0,8
tick,0x7ffdf681f424,4399149,0,0x0,8
tick,0x7ffdf681f424,4401145,0,0x0,8
tick,0x7ffdf681f424,4403218,0,0x0,8
tick,0x7ffdf681f424,4405133,0,0x0,8
tick,0x7ffdf681f424,4407125,0,0x0,8
tick,0x7ffdf681f424,4409130,0,0x0,8
tick,0x7ffdf681f424,4411124,0,0x0,8
tick,0x7ffdf681f424,4413122,0,0x0,8
tick,0x7ffdf681f424,4415038,0,0x0,8
tick,0x7ffdf681f424,4417113,0,0x0,8
tick,0x7ffdf681f424,4419109,0,0x0,8
tick,0x7ffdf681f424,4421096,0,0x0,8
tick,0x7ffdf681f424,4423010,0,0x0,8
tick,0x7ffdf681f424,4424867,0,0x0,8
tick,0x7ffdf681f424,4426915,0,0x0,8
tick,0x7ffdf681f424,4429019,0,0x0,8
tick,0x7ffdf681f424,4431083,0,0x0,8
tick,0x7ffdf681f424,4433072,0,0x0,8
tick,0x7ffdf681f424,4435064,0,0x0,8
tick,0x7ffdf681f424,4437057,0,0x0,8
tick,0x7ffdf681f424,4438955,0,0x0,8
tick,0x7ffdf681f424,4441046,0,0x0,8
tick,0x7ffdf681f424,4443039,0,0x0,8
tick,0x7ffdf681f424,4445036,0,0x0,8
tick,0x7ffdf681f424,4447042,0,0x0,8
tick,0x7ffdf681f424,4449017,0,0x0,8
tick,0x7ffdf681f424,4451034,0,0x0,8
tick,0x7ffdf681f424,4452911,0,0x0,8
tick,0x7ffdf681f424,4454950,0,0x0,8
tick,0x7ffdf681f424,4457028,0,0x0,8
tick,0x7ffdf681f424,4458998,0,0x0,8
tick,0x7ffdf681f424,4461004,0,0x0,8
tick,0x7ffdf681f424,4463001,0,0x0,8
tick,0x7ffdf681f424,4464894,0,0x0,8
tick,0x7ffdf681f424,4466978,0,0x0,8
tick,0x7ffdf681f424,4468995,0,0x0,8
tick,0x7ffdf681f424,4470975,0,0x0,8
tick,0x7ffdf681f424,4472967,0,0x0,8
tick,0x7ffdf681f424,4474966,0,0x0,8
tick,0x7ffdf681f424,4476949,0,0x0,8
tick,0x7ffdf681f424,4478943,0,0x0,8
tick,0x7ffdf681f424,4480942,0,0x0,8
tick,0x7ffdf681f424,4482946,0,0x0,8
tick,0x7ffdf681f424,4484926,0,0x0,8
tick,0x7ffdf681f424,4486923,0,0x0,8
tick,0x7ffdf681f424,4488823,0,0x0,8
tick,0x7ffdf681f424,4490951,0,0x0,8
tick,0x7ffdf681f424,4492907,0,0x0,8
tick,0x7ffdf681f424,4494901,0,0x0,8
tick,0x7ffdf681f424,4496903,0,0x0,8
tick,0x7ffdf681f424,4498902,0,0x0,8
tick,0x7ffdf681f424,4500884,0,0x0,8
tick,0x7ffdf681f424,4502881,0,0x0,8
tick,0x7ffdf681f424,4504885,0,0x0,8
tick,0x7ffdf681f424,4506824,0,0x0,8
tick,0x7ffdf681f424,4508865,0,0x0,8
tick,0x7ffdf681f424,4510858,0,0x0,8
tick,0x7ffdf681f424,4512886,0,0x0,8
tick,0x7ffdf681f424,4514818,0,0x0,8
tick,0x7ffdf681f424,4516848,0,0x0,8
tick,0x7ffdf681f424,4518845,0,0x0,8
tick,0x7ffdf681f424,4520834,0,0x0,8
tick,0x7ffdf681f424,4522828,0,0x0,8
tick,0x7ffdf681f424,4524826,0,0x0,8
tick,0x7ffdf681f424,4526830,0,0x0,8
tick,0x7ffdf681f424,4528816,0,0x0,8
tick,0x7ffdf681f424,4530825,0,0x0,8
tick,0x7ffdf681f424,4532804,0,0x0,8
tick,0x7ffdf681f424,4534834,0,0x0,8
tick,0x7ffdf681f424,4536791,0,0x0,8
tick,0x7ffdf681f424,4538783,0,0x0,8
tick,0x7ffdf681f424,4540789,0,0x0,8
tick,0x7ffdf681f424,4542776,0,0x0,8
tick,0x7ffdf681f424,4544769,0,0x0,8
tick,0x7ffdf681f424,4546769,0,0x0,8
tick,0x7ffdf681f424,4548768,0,0x0,8
tick,0x7ffdf681f424,4550762,0,0x0,8
tick,0x7ffdf681f424,4552751,0,0x0,8
tick,0x7ffdf681f424,4554756,0,0x0,8
tick,0x7ffdf681f424,4556643,0,0x0,8
tick,0x7ffdf681f424,4558728,0,0x0,8
tick,0x7ffdf681f424,4560728,0,0x0,8
tick,0x7ffdf681f424,4562727,0,0x0,8
tick,0x7ffdf681f424,4564717,0,0x0,8
tick,0x7ffdf681f424,4566711,0,0x0,8
tick,0x7ffdf681f424,4568708,0,0x0,8
tick,0x7ffdf681f424,4570711,0,0x0,8
tick,0x7ffdf681f424,4572692,0,0x0,8
tick,0x7ffdf681f424,4574687,0,0x0,8
tick,0x7ffdf681f424,4576683,0,0x0,8
tick,0x7ffdf681f424,4578692,0,0x0,8
tick,0x7ffdf681f424,4580678,0,0x0,8
tick,0x7ffdf681f424,4582668,0,0x0,8
tick,0x7ffdf681f424,4584669,0,0x0,8
tick,0x7ffdf681f424,4586629,0,0x0,8
tick,0x7ffdf681f424,4588664,0,0x0,8
tick,0x7ffdf681f424,4590644,0,0x0,8
tick,0x7ffdf681f424,4592651,0,0x0,8
tick,0x7ffdf681f424,4594636,0,0x0,8
tick,0x7ffdf681f424,4596639,0,0x0,8
tick,0x7ffdf681f424,4598628,0,0x0,8
tick,0x7ffdf681f424,4600656,0,0x0,8
tick,0x7ffdf681f424,4602611,0,0x0,8
tick,0x7ffdf681f424,4604615,0,0x0,8
tick,0x7ffdf681f424,4606508,0,0x0,8
tick,0x7ffdf681f424,4608521,0,0x0,8
tick,0x7ffdf681f424,4610593,0,0x0,8
tick,0x7ffdf681f424,4612586,0,0x0,8
tick,0x7ffdf681f424,4614595,0,0x0,8
tick,0x7ffdf681f424,4616578,0,0x0,8
tick,0x7ffdf681f424,4618574,0,0x0,8
tick,0x7ffdf681f424,4620567,0,0x0,8
tick,0x7ffdf681f424,4622606,0,0x0,8
tick,0x7ffdf681f424,4624562,0,0x0,8
tick,0x7ffdf681f424,4626550,0,0x0,8
tick,0x7ffdf681f424,4628557,0,0x0,8
tick,0x7ffdf681f424,4630541,0,0x0,8
tick,0x7ffdf681f424,4632543,0,0x0,8
tick,0x7ffdf681f424,4634539,0,0x0,8
tick,0x7ffdf681f424,4636538,0,0x0,8
tick,0x7ffdf681f424,4638519,0,0x0,8
tick,0x7ffdf681f424,4640512,0,0x0,8
tick,0x7ffdf681f424,4642511,0,0x0,8
tick,0x7ffdf681f424,4644459,0,0x0,8
tick,0x7ffdf681f424,4646502,0,0x0,8
tick,0x7ffdf681f424,4648385,0,0x0,8
tick,0x7ffdf681f424,4650489,0,0x0,8
tick,0x7ffdf681f424,4652480,0,0x0,8
tick,0x7ffdf681f424,4654478,0,0x0,8
tick,0x7ffdf681f424,4656473,0,0x0,8
tick,0x7ffdf681f424,4658481,0,0x0,8
tick,0x7ffdf681f424,4660463,0,0x0,8
tick,0x7ffdf681f424,4662449,0,0x0,8
tick,0x7ffdf681f424,4664454,0,0x0,8
tick,0x7ffdf681f424,4666516,0,0x0,8
tick,0x7ffdf681f424,4668436,0,0x0,8
tick,0x7ffdf681f424,4670434,0,0x0,8
tick,0x7ffdf681f424,4672436,0,0x0,8
tick,0x7ffdf681f424,4674417,0,0x0,8
tick,0x7ffdf681f424,4676417,0,0x0,8
tick,0x7ffdf681f424,4678421,0,0x0,8
tick,0x7ffdf681f424,4680424,0,0x0,8
tick,0x7ffdf681f424,4682403,0,0x0,8
tick,0x7ffdf681f424,4684307,0,0x0,8
tick,0x7ffdf681f424,4686381,0,0x0,8
tick,0x7ffdf681f424,4688462,0,0x0,8
tick,0x7ffdf681f424,4690280,0,0x0,8
tick,0x7ffdf681f424,4692366,0,0x0,8
tick,0x7ffdf681f424,4694371,0,0x0,8
tick,0x7ffdf681f424,4696353,0,0x0,8
tick,0x7ffdf681f424,4698249,0,0x0,8
tick,0x7ffdf681f424,4700345,0,0x0,8
tick,0x7ffdf681f424,4702320,0,0x0,8
tick,0x7ffdf681f424,4704332,0,0x0,8
tick,0x7ffdf681f424,4706334,0,0x0,8
tick,0x7ffdf681f424,4708324,0,0x0,8
tick,0x7ffdf681f424,4710381,0,0x0,8
tick,0x7ffdf681f424,4712313,0,0x0,8
tick,0x7ffdf681f424,4714314,0,0x0,8
tick,0x7ffdf681f424,4716329,0,0x0,8
tick,0x7ffdf681f424,4718302,0,0x0,8
tick,0x7ffdf681f424,4720289,0,0x0,8
tick,0x7ffdf681f424,4722289,0,0x0,8
tick,0x7ffdf681f424,4724296,0,0x0,8
tick,0x7ffdf681f424,4726272,0,0x0,8
tick,0x7ffdf681f424,4728268,0,0x0,8
tick,0x7ffdf681f424,4730273,0,0x0,8
tick,0x7ffdf681f424,4732218,0,0x0,8
tick,0x7ffdf681f424,4734154,0,0x0,8
tick,0x7ffdf681f424,4736268,0,0x0,8
tick,0x7ffdf681f424,4737465,0,0x0,8
tick,0x7ffdf681f424,4739322,0,0x0,8
tick,0x7ffdf681f424,4741425,0,0x0,8
tick,0x7ffdf681f424,4743393,0,0x0,8
tick,0x7ffdf681f424,4744518,0,0x0,8
tick,0x7ffdf681f424,4746517,0,0x0,8
tick,0x7ffdf681f424,4748523,0,0x0,8
tick,0x7ffdf681f424,4749602,0,0x0,8
tick,0x7ffdf681f424,4750807,0,0x0,8
tick,0x7ffdf681f424,4751954,0,0x0,8
tick,0x7ffdf681f424,4753949,0,0x0,8
tick,0x7ffdf681f424,4756001,0,0x0,8
tick,0x7ffdf681f424,4757959,0,0x0,8
tick,0x7ffdf681f424,4759847,0,0x0,8
tick,0x7ffdf681f424,4761926,0,0x0,8
tick,0x7ffdf681f424,4764016,0,0x0,8
tick,0x7ffdf681f424,4766078,0,0x0,8
tick,0x7ffdf681f424,4768162,0,0x0,8
tick,0x7ffdf681f424,4770116,0,0x0,8
tick,0x7ffdf681f424,4772115,0,0x0,8
tick,0x7ffdf681f424,4774108,0,0x0,8
tick,0x7ffdf681f424,4776098,0,0x0,8
tick,0x7ffdf681f424,4778093,0,0x0,8
tick,0x7ffdf681f424,4780085,0,0x0,8
tick,0x7ffdf681f424,4782082,0,0x0,8
tick,0x7ffdf681f424,4784090,0,0x0,8
tick,0x7ffdf681f424,4786076,0,0x0,8
tick,0x7ffdf681f424,4788110,0,0x0,8
tick,0x7ffdf681f424,4790055,0,0x0,8
tick,0x7ffdf681f424,4792064,0,0x0,8
tick,0x7ffdf681f424,4794086,0,0x0,8
tick,0x7ffdf681f424,4796093,0,0x0,8
tick,0x7ffdf681f424,4798134,0,0x0,8
tick,0x7ffdf681f424,4800117,0,0x0,8
tick,0x7ffdf681f424,4802116,0,0x0,8
tick,0x7ffdf681f424,4804078,0,0x0,8
tick,0x7ffdf681f424,4806032,0,0x0,8
tick,0x7ffdf681f424,4808070,0,0x0,8
tick,0x7ffdf681f424,4810074,0,0x0,8
tick,0x7ffdf681f424,4812076,0,0x0,8
tick,0x7ffdf681f424,4814050,0,0x0,8
tick,0x7ffdf681f424,4816056,0,0x0,8
tick,0x7ffdf681f424,4818066,0,0x0,8
tick,0x7ffdf681f424,4820034,0,0x0,8
tick,0x7ffdf681f424,4822036,0,0x0,8
tick,0x7ffdf681f424,4824056,0,0x0,8
tick,0x7ffdf681f424,4826044,0,0x0,8
tick,0x7ffdf681f424,4827993,0,0x0,8
tick,0x7ffdf681f424,4829983,0,0x0,8
tick,0x7ffdf681f424,4832015,0,0x0,8
tick,0x7ffdf681f424,4834005,0,0x0,8
tick,0x7ffdf681f424,4836014,0,0x0,8
tick,0x7ffdf681f424,4838018,0,0x0,8
tick,0x7ffdf681f424,4840010,0,0x0,8
tick,0x7ffdf681f424,4841987,0,0x0,8
tick,0x7ffdf681f424,4843982,0,0x0,8
tick,0x7ffdf681f424,4845973,0,0x0,8
tick,0x7ffdf681f424,4847962,0,0x0,8
tick,0x7ffdf681f424,4849914,0,0x0,8
tick,0x7ffdf681f424,4851951,0,0x0,8
tick,0x7ffdf681f424,4853962,0,0x0,8
tick,0x7ffdf681f424,4855943,0,0x0,8
tick,0x7ffdf681f424,4857944,0,0x0,8
tick,0x7ffdf681f424,4859956,0,0x0,8
tick,0x7ffdf681f424,4861926,0,0x0,8
tick,0x7ffdf681f424,4863928,0,0x0,8
tick,0x7ffdf681f424,4865912,0,0x0,8
tick,0x7ffdf681f424,4867928,0,0x0,8
tick,0x7ffdf681f424,4869904,0,0x0,8
tick,0x7ffdf681f424,4871883,0,0x0,8
tick,0x7ffdf681f424,4873892,0,0x0,8
tick,0x7ffdf681f424,4875872,0,0x0,8
tick,0x7ffdf681f424,4877900,0,0x0,8
tick,0x7ffdf681f424,4879875,0,0x0,8
tick,0x7ffdf681f424,4881891,0,0x0,8
tick,0x7ffdf681f424,4883887,0,0x0,8
tick,0x7ffdf681f424,4885860,0,0x0,8
tick,0x7ffdf681f424,4887862,0,0x0,8
tick,0x7ffdf681f424,4889879,0,0x0,8
tick,0x7ffdf681f424,4891833,0,0x0,8
tick,0x7ffdf681f424,4893821,0,0x0,8
tick,0x7ffdf681f424,4895836,0,0x0,8
tick,0x7ffdf681f424,4897835,0,0x0,8
tick,0x7ffdf681f424,4899827,0,0x0,8
tick,0x7ffdf681f424,4901817,0,0x0,8
tick,0x7ffdf681f424,4903811,0,0x0,8
tick,0x7ffdf681f424,4905814,0,0x0,8
tick,0x7ffdf681f424,4907800,0,0x0,8
tick,0x7ffdf681f424,4909793,0,0x0,8
tick,0x7ffdf681f424,4911822,0,0x0,8
tick,0x7ffdf681f424,4913810,0,0x0,8
tick,0x7ffdf681f424,4915798,0,0x0,8
tick,0x7ffdf681f424,4917836,0,0x0,8
tick,0x7ffdf681f424,4919710,0,0x0,8
tick,0x7ffdf681f424,4921703,0,0x0,8
tick,0x7ffdf681f424,4922819,0,0x0,8
tick,0x7ffdf681f424,4924813,0,0x0,8
tick,0x7ffdf681f424,4926801,0,0x0,8
tick,0x7ffdf681f424,4927975,0,0x0,8
tick,0x7ffdf681f424,4929150,0,0x0,8
tick,0x7ffdf681f424,4931153,0,0x0,8
tick,0x7ffdf681f424,4933182,0,0x0,8
tick,0x7ffdf681f424,4934365,0,0x0,8
tick,0x7ffdf681f424,4936428,0,0x0,8
tick,0x7ffdf681f424,4938506,0,0x0,8
tick,0x7ffdf681f424,4939643,0,0x0,8
tick,0x7ffdf681f424,4941657,0,0x0,8
tick,0x7ffdf681f424,4943642,0,0x0,8
tick,0x7ffdf681f424,4945647,0,0x0,8
tick,0x7ffdf681f424,4947609,0,0x0,8
tick,0x7ffdf681f424,4948726,0,0x0,8
tick,0x7ffdf681f424,4949909,0,0x0,8
tick,0x7ffdf681f424,4951904,0,0x0,8
tick,0x7ffdf681f424,4953864,0,0x0,8
tick,0x7ffdf681f424,4955043,0,0x0,8
tick,0x7ffdf681f424,4957029,0,0x0,8
tick,0x7ffdf681f424,4959005,0,0x0,8
tick,0x7ffdf681f424,4961040,0,0x0,8
tick,0x7ffdf681f424,4963016,0,0x0,8
tick,0x7ffdf681f424,4964959,0,0x0,8
tick,0x7ffdf681f424,4966077,0,0x0,8
tick,0x7ffdf681f424,4968139,0,0x0,8
tick,0x7ffdf681f424,4969258,0,0x0,8
tick,0x7ffdf681f424,4971298,0,0x0,8
tick,0x7ffdf681f424,4972425,0,0x0,8
tick,0x7ffdf681f424,4974433,0,0x0,8
tick,0x7ffdf681f424,4976543,0,0x0,8
tick,0x7ffdf681f424,4978533,0,0x0,8
tick,0x7ffdf681f424,4980519,0,0x0,8
tick,0x7ffdf681f424,4982527,0,0x0,8
tick,0x7ffdf681f424,4984520,0,0x0,8
tick,0x7ffdf681f424,4986514,0,0x0,8
tick,0x7ffdf681f424,4988490,0,0x0,8
tick,0x7ffdf681f424,4990489,0,0x0,8
tick,0x7ffdf681f424,4992539,0,0x0,8
tick,0x7ffdf681f424,4994490,0,0x0,8
tick,0x7ffdf681f424,4996501,0,0x0,8
tick,0x7ffdf681f424,4998489,0,0x0,8
tick,0x7ffdf681f424,5000526,0,0x0,8
tick,0x7ffdf681f424,5002467,0,0x0,8
tick,0x7ffdf681f424,5004452,0,0x0,8
tick,0x7ffdf681f424,5006462,0,0x0,8
tick,0x7ffdf681f424,5008439,0,0x0,8
tick,0x7ffdf681f424,5010428,0,0x0,8
tick,0x7ffdf681f424,5012431,0,0x0,8
tick,0x7ffdf681f424,5014441,0,0x0,8
tick,0x7ffdf681f424,5016430,0,0x0,8
tick,0x7ffdf681f424,5018333,0,0x0,8
tick,0x7ffdf681f424,5020409,0,0x0,8
tick,0x7ffdf681f424,5022405,0,0x0,8
tick,0x7ffdf681f424,5024400,0,0x0,8
tick,0x7ffdf681f424,5026394,0,0x0,8
tick,0x7ffdf681f424,5028388,0,0x0,8
tick,0x7ffdf681f424,5030383,0,0x0,8
tick,0x7ffdf681f424,5032438,0,0x0,8
tick,0x7ffdf681f424,5034401,0,0x0,8
tick,0x7ffdf681f424,5036388,0,0x0,8
tick,0x7ffdf681f424,5038367,0,0x0,8
tick,0x7ffdf681f424,5040359,0,0x0,8
tick,0x7ffdf681f424,5042357,0,0x0,8
tick,0x7ffdf681f424,5044359,0,0x0,8
tick,0x7ffdf681f424,5046347,0,0x0,8
tick,0x7ffdf681f424,5048233,0,0x0,8
tick,0x7ffdf681f424,5050367,0,0x0,8
tick,0x7ffdf681f424,5052331,0,0x0,8
tick,0x7ffdf681f424,5054319,0,0x0,8
tick,0x7ffdf681f424,5056320,0,0x0,8
tick,0x7ffdf681f424,5058331,0,0x0,8
tick,0x7ffdf681f424,5060336,0,0x0,8
tick,0x7ffdf681f424,5062335,0,0x0,8
tick,0x7ffdf681f424,5064311,0,0x0,8
tick,0x7ffdf681f424,5066181,0,0x0,8
tick,0x7ffdf681f424,5068194,0,0x0,8
tick,0x7ffdf681f424,5070292,0,0x0,8
tick,0x7ffdf681f424,5072281,0,0x0,8
tick,0x7ffdf681f424,5074283,0,0x0,8
tick,0x7ffdf681f424,5076260,0,0x0,8
tick,0x7ffdf681f424,5078286,0,0x0,8
tick,0x7ffdf681f424,5080282,0,0x0,8
tick,0x7ffdf681f424,5082266,0,0x0,8
tick,0x7ffdf681f424,5084256,0,0x0,8
tick,0x7ffdf681f424,5086251,0,0x0,8
tick,0x7ffdf681f424,5088236,0,0x0,8
tick,0x7ffdf681f424,5090123,0,0x0,8
tick,0x7ffdf681f424,5092228,0,0x0,8
tick,0x7ffdf681f424,5094227,0,0x0,8
tick,0x7ffdf681f424,5096219,0,0x0,8
tick,0x7ffdf681f424,5098199,0,0x0,8
tick,0x7ffdf681f424,5100233,0,0x0,8
tick,0x7ffdf681f424,5102211,0,0x0,8
tick,0x7ffdf681f424,5104204,0,0x0,8
tick,0x7ffdf681f424,5106186,0,0x0,8
tick,0x7ffdf681f424,5108190,0,0x0,8
tick,0x7ffdf681f424,5110179,0,0x0,8
tick,0x7ffdf681f424,5112211,0,0x0,8
tick,0x7ffdf681f424,5114165,0,0x0,8
tick,0x7ffdf681f424,5116160,0,0x0,8
tick,0x7ffdf681f424,5118156,0,0x0,8
tick,0x7ffdf681f424,5120142,0,0x0,8
tick,0x7ffdf681f424,5122174,0,0x0,8
tick,0x7ffdf681f424,5124154,0,0x0,8
tick,0x7ffdf681f424,5126137,0,0x0,8
tick,0x7ffdf681f424,5128135,0,0x0,8
tick,0x7ffdf681f424,5130123,0,0x0,8
tick,0x7ffdf681f424,5132122,0,0x0,8
tick,0x7ffdf681f424,5134112,0,0x0,8
tick,0x7ffdf681f424,5136110,0,0x0,8
tick,0x7ffdf681f424,5138101,0,0x0,8
tick,0x7ffdf681f424,5139989,0,0x0,8
tick,0x7ffdf681f424,5142160,0,0x0,8
tick,0x7ffdf681f424,5143987,0,0x0,8
tick,0x7ffdf681f424,5146111,0,0x0,8
tick,0x7ffdf681f424,5148087,0,0x0,8
tick,0x7ffdf681f424,5150069,0,0x0,8
tick,0x7ffdf681f424,5152064,0,0x0,8
tick,0x7ffdf681f424,5154063,0,0x0,8
tick,0x7ffdf681f424,5156052,0,0x0,8
tick,0x7ffdf681f424,5158051,0,0x0,8
tick,0x7ffdf681f424,5160042,0,0x0,8
tick,0x7ffdf681f424,5162047,0,0x0,8
tick,0x7ffdf681f424,5164101,0,0x0,8
tick,0x7ffdf681f424,5166062,0,0x0,8
tick,0x7ffdf681f424,5168050,0,0x0,8
tick,0x7ffdf681f424,5170030,0,0x0,8
tick,0x7ffdf681f424,5172025,0,0x0,8
tick,0x7ffdf681f424,5174016,0,0x0,8
tick,0x7ffdf681f424,5176010,0,0x0,8
tick,0x7ffdf681f424,5177994,0,0x0,8
tick,0x7ffdf681f424,5179990,0,0x0,8
tick,0x7ffdf681f424,5181945,0,0x0,8
tick,0x7ffdf681f424,5183979,0,0x0,8
tick,0x7ffdf681f424,5185992,0,0x0,8
tick,0x7ffdf681f424,5187996,0,0x0,8
tick,0x7ffdf681f424,5189891,0,0x0,8
tick,0x7ffdf681f424,5191965,0,0x0,8
tick,0x7ffdf681f424,5193952,0,0x0,8
tick,0x7ffdf681f424,5195956,0,0x0,8
tick,0x7ffdf681f424,5197951,0,0x0,8
tick,0x7ffdf681f424,5199941,0,0x0,8
tick,0x7ffdf681f424,5201930,0,0x0,8
tick,0x7ffdf681f424,5203927,0,0x0,8
tick,0x7ffdf681f424,5205808,0,0x0,8
tick,0x7ffdf681f424,5207924,0,0x0,8
tick,0x7ffdf681f424,5209935,0,0x0,8
tick,0x7ffdf681f424,5211920,0,0x0,8
tick,0x7ffdf681f424,5213905,0,0x0,8
tick,0x7ffdf681f424,5215893,0,0x0,8
tick,0x7ffdf681f424,5217902,0,0x0,8
tick,0x7ffdf681f424,5219798,0,0x0,8
tick,0x7ffdf681f424,5221796,0,0x0,8
tick,0x7ffdf681f424,5223893,0,0x0,8
tick,0x7ffdf681f424,5225867,0,0x0,8
tick,0x7ffdf681f424,5227866,0,0x0,8
tick,0x7ffdf681f424,5229850,0,0x0,8
tick,0x7ffdf681f424,5231747,0,0x0,8
tick,0x7ffdf681f424,5233869,0,0x0,8
tick,0x7ffdf681f424,5235839,0,0x0,8
tick,0x7ffdf681f424,5237836,0,0x0,8
tick,0x7ffdf681f424,5239839,0,0x0,8
tick,0x7ffdf681f424,5241827,0,0x0,8
tick,0x7ffdf681f424,5243838,0,0x0,8
tick,0x7ffdf681f424,5245822,0,0x0,8
tick,0x7ffdf681f424,5247817,0,0x0,8
tick,0x7ffdf681f424,5249803,0,0x0,8
tick,0x7ffdf681f424,5251874,0,0x0,8
tick,0x7ffdf681f424,5253815,0,0x0,8
tick,0x7ffdf681f424,5255797,0,0x0,8
tick,0x7ffdf681f424,5257789,0,0x0,8
tick,0x7ffdf681f424,5259781,0,0x0,8
tick,0x7ffdf681f424,5261772,0,0x0,8
tick,0x7ffdf681f424,5263770,0,0x0,8
tick,0x7ffdf681f424,5265771,0,0x0,8
tick,0x7ffdf681f424,5267779,0,0x0,8
tick,0x7ffdf681f424,5269759,0,0x0,8
tick,0x7ffdf681f424,5271747,0,0x0,8
tick,0x7ffdf681f424,5273743,0,0x0,8
tick,0x7ffdf681f424,5275756,0,0x0,8
tick,0x7ffdf681f424,5277745,0,0x0,8
tick,0x7ffdf681f424,5279731,0,0x0,8
tick,0x7ffdf681f424,5281623,0,0x0,8
tick,0x7ffdf681f424,5283716,0,0x0,8
tick,0x7ffdf681f424,5285709,0,0x0,8
tick,0x7ffdf681f424,5287701,0,0x0,8
tick,0x7ffdf681f424,5289716,0,0x0,8
tick,0x7ffdf681f424,5291696,0,0x0,8
tick,0x7ffdf681f424,5293685,0,0x0,8
tick,0x7ffdf681f424,5295674,0,0x0,8
tick,0x7ffdf681f424,5297573,0,0x0,8
tick,0x7ffdf681f424,5299677,0,0x0,8
tick,0x7ffdf681f424,5301652,0,0x0,8
tick,0x7ffdf681f424,5303663,0,0x0,8
tick,0x7ffdf681f424,5305659,0,0x0,8
tick,0x7ffdf681f424,5307655,0,0x0,8
tick,0x7ffdf681f424,5309647,0,0x0,8
tick,0x7ffdf681f424,5311651,0,0x0,8
tick,0x7ffdf681f424,5313632,0,0x0,8
tick,0x7ffdf681f424,5315631,0,0x0,8
tick,0x7ffdf681f424,5317616,0,0x0,8
tick,0x7ffdf681f424,5319616,0,0x0,8
tick,0x7ffdf681f424,5321627,0,0x0,8
tick,0x7ffdf681f424,5323483,0,0x0,8
tick,0x7ffdf681f424,5325597,0,0x0,8
tick,0x7ffdf681f424,5327613,0,0x0,8
tick,0x7ffdf681f424,5329614,0,0x0,8
tick,0x7ffdf681f424,5331566,0,0x0,8
tick,0x7ffdf681f424,5333580,0,0x0,8
tick,0x7ffdf681f424,5335578,0,0x0,8
tick,0x7ffdf681f424,5337568,0,0x0,8
tick,0x7ffdf681f424,5339635,0,0x0,8
tick,0x7ffdf681f424,5341582,0,0x0,8
tick,0x7ffdf681f424,5343573,0,0x0,8
tick,0x7ffdf681f424,5345555,0,0x0,8
tick,0x7ffdf681f424,5347546,0,0x0,8
tick,0x7ffdf681f424,5349546,0,0x0,8
tick,0x7ffdf681f424,5351531,0,0x0,8
tick,0x7ffdf681f424,5353531,0,0x0,8
tick,0x7ffdf681f424,5355525,0,0x0,8
tick,0x7ffdf681f424,5357515,0,0x0,8
tick,0x7ffdf681f424,5359513,0,0x0,8
tick,0x7ffdf681f424,5361494,0,0x0,8
tick,0x7ffdf681f424,5363501,0,0x0,8
tick,0x7ffdf681f424,5365516,0,0x0,8
tick,0x7ffdf681f424,5367497,0,0x0,8
tick,0x7ffdf681f424,5369483,0,0x0,8
tick,0x7ffdf681f424,5371488,0,0x0,8
tick,0x7ffdf681f424,5373361,0,0x0,8
tick,0x7ffdf681f424,5375360,0,0x0,8
tick,0x7ffdf681f424,5377468,0,0x0,8
tick,0x7ffdf681f424,5379460,0,0x0,8
tick,0x7ffdf681f424,5381459,0,0x0,8
tick,0x7ffdf681f424,5383440,0,0x0,8
tick,0x7ffdf681f424,5385434,0,0x0,8
tick,0x7ffdf681f424,5387449,0,0x0,8
tick,0x7ffdf681f424,5389327,0,0x0,8
tick,0x7ffdf681f424,5391427,0,0x0,8
tick,0x7ffdf681f424,5393419,0,0x0,8
tick,0x7ffdf681f424,5395411,0,0x0,8
tick,0x7ffdf681f424,5397410,0,0x0,8
tick,0x7ffdf681f424,5399415,0,0x0,8
tick,0x7ffdf681f424,5401397,0,0x0,8
tick,0x7ffdf681f424,5403392,0,0x0,8
tick,0x7ffdf681f424,5405453,0,0x0,8
tick,0x7ffdf681f424,5407409,0,0x0,8
tick,0x7ffdf681f424,5409406,0,0x0,8
tick,0x7ffdf681f424,5411384,0,0x0,8
tick,0x7ffdf681f424,5413366,0,0x0,8
tick,0x7ffdf681f424,5415335,0,0x0,8
tick,0x7ffdf681f424,5417355,0,0x0,8
tick,0x7ffdf681f424,5419360,0,0x0,8
tick,0x7ffdf681f424,5421362,0,0x0,8
tick,0x7ffdf681f424,5423247,0,0x0,8
tick,0x7ffdf681f424,5425334,0,0x0,8
tick,0x7ffdf681f424,5427322,0,0x0,8
tick,0x7ffdf681f424,5429323,0,0x0,8
tick,0x7ffdf681f424,5431337,0,0x0,8
tick,0x7ffdf681f424,5433318,0,0x0,8
tick,0x7ffdf681f424,5435311,0,0x0,8
tick,0x7ffdf681f424,5437301,0,0x0,8
tick,0x7ffdf681f424,5439170,0,0x0,8
tick,0x7ffdf681f424,5441291,0,0x0,8
tick,0x7ffdf681f424,5443289,0,0x0,8
tick,0x7ffdf681f424,5445280,0,0x0,8
tick,0x7ffdf681f424,5447275,0,0x0,8
tick,0x7ffdf681f424,5449264,0,0x0,8
tick,0x7ffdf681f424,5451274,0,0x0,8
tick,0x7ffdf681f424,5453274,0,0x0,8
tick,0x7ffdf681f424,5455270,0,0x0,8
tick,0x7ffdf681f424,5457146,0,0x0,8
tick,0x7ffdf681f424,5459245,0,0x0,8
tick,0x7ffdf681f424,5461239,0,0x0,8
tick,0x7ffdf681f424,5463236,0,0x0,8
tick,0x7ffdf681f424,5465129,0,0x0,8
tick,0x7ffdf681f424,5467222,0,0x0,8
tick,0x7ffdf681f424,5469216,0,0x0,8
tick,0x7ffdf681f424,5471217,0,0x0,8
tick,0x7ffdf681f424,5473239,0,0x0,8
tick,0x7ffdf681f424,5475216,0,0x0,8
tick,0x7ffdf681f424,5477208,0,0x0,8
tick,0x7ffdf681f424,5479190,0,0x0,8
tick,0x7ffdf681f424,5481185,0,0x0,8
tick,0x7ffdf681f424,5483184,0,0x0,8
tick,0x7ffdf681f424,5485174,0,0x0,8
tick,0x7ffdf681f424,5487171,0,0x0,8
tick,0x7ffdf681f424,5489178,0,0x0,8
tick,0x7ffdf681f424,5491164,0,0x0,8
tick,0x7ffdf681f424,5493155,0,0x0,8
tick,0x7ffdf681f424,5495172,0,0x0,8
tick,0x7ffdf681f424,5497158,0,0x0,8
tick,0x7ffdf681f424,5499142,0,0x0,8
tick,0x7ffdf681f424,5501139,0,0x0,8
tick,0x7ffdf681f424,5503125,0,0x0,8
tick,0x7ffdf681f424,5505116,0,0x0,8
tick,0x7ffdf681f424,5507119,0,0x0,8
tick,0x7ffdf681f424,5509109,0,0x0,8
tick,0x7ffdf681f424,5511110,0,0x0,8
tick,0x7ffdf681f424,5513062,0,0x0,8
tick,0x7ffdf681f424,5514985,0,0x0,8
tick,0x7ffdf681f424,5517113,0,0x0,8
tick,0x7ffdf681f424,5519102,0,0x0,8
tick,0x7ffdf681f424,5521084,0,0x0,8
tick,0x7ffdf681f424,5523082,0,0x0,8
tick,0x7ffdf681f424,5525074,0,0x0,8
tick,0x7ffdf681f424,5526943,0,0x0,8
tick,0x7ffdf681f424,5528966,0,0x0,8
tick,0x7ffdf681f424,5531066,0,0x0,8
tick,0x7ffdf681f424,5533011,0,0x0,8
tick,0x7ffdf681f424,5535049,0,0x0,8
tick,0x7ffdf681f424,5537032,0,0x0,8
tick,0x7ffdf681f424,5539033,0,0x0,8
tick,0x7ffdf681f424,5541044,0,0x0,8
tick,0x7ffdf681f424,5543052,0,0x0,8
tick,0x7ffdf681f424,5545015,0,0x0,8
tick,0x7ffdf681f424,5547010,0,0x0,8
tick,0x7ffdf681f424,5549003,0,0x0,8
tick,0x7ffdf681f424,5551007,0,0x0,8
tick,0x7ffdf681f424,5552986,0,0x0,8
tick,0x7ffdf681f424,5554989,0,0x0,8
tick,0x7ffdf681f424,5556890,0,0x0,8
tick,0x7ffdf681f424,5558974,0,0x0,8
tick,0x7ffdf681f424,5560971,0,0x0,8
tick,0x7ffdf681f424,5562988,0,0x0,8
tick,0x7ffdf681f424,5564941,0,0x0,8
tick,0x7ffdf681f424,5566955,0,0x0,8
tick,0x7ffdf681f424,5568950,0,0x0,8
tick,0x7ffdf681f424,5570954,0,0x0,8
tick,0x7ffdf681f424,5572949,0,0x0,8
tick,0x7ffdf681f424,5574945,0,0x0,8
tick,0x7ffdf681f424,5576929,0,0x0,8
tick,0x7ffdf681f424,5578928,0,0x0,8
tick,0x7ffdf681f424,5580964,0,0x0,8
tick,0x7ffdf681f424,5582939,0,0x0,8
tick,0x7ffdf681f424,5584922,0,0x0,8
tick,0x7ffdf681f424,5586910,0,0x0,8
tick,0x7ffdf681f424,5588891,0,0x0,8
tick,0x7ffdf681f424,5590894,0,0x0,8
tick,0x7ffdf681f424,5592885,0,0x0,8
tick,0x7ffdf681f424,5594879,0,0x0,8
tick,0x7ffdf681f424,5596874,0,0x0,8
tick,0x7ffdf681f424,5598870,0,0x0,8
tick,0x7ffdf681f424,5600864,0,0x0,8
tick,0x7ffdf681f424,5602862,0,0x0,8
tick,0x7ffdf681f424,5604747,0,0x0,8
tick,0x7ffdf681f424,5606756,0,0x0,8
tick,0x7ffdf681f424,5608752,0,0x0,8
tick,0x7ffdf681f424,5610842,0,0x0,8
tick,0x7ffdf681f424,5612832,0,0x0,8
tick,0x7ffdf681f424,5614836,0,0x0,8
tick,0x7ffdf681f424,5616831,0,0x0,8
tick,0x7ffdf681f424,5618709,0,0x0,8
tick,0x7ffdf681f424,5620811,0,0x0,8
tick,0x7ffdf681f424,5622818,0,0x0,8
tick,0x7ffdf681f424,5624878,0,0x0,8
tick,0x7ffdf681f424,5626818,0,0x0,8
tick,0x7ffdf681f424,5628805,0,0x0,8
tick,0x7ffdf681f424,5630796,0,0x0,8
tick,0x7ffdf681f424,5632784,0,0x0,8
tick,0x7ffdf681f424,5634778,0,0x0,8
tick,0x7ffdf681f424,5636762,0,0x0,8
tick,0x7ffdf681f424,5638764,0,0x0,8
tick,0x7ffdf681f424,5640761,0,0x0,8
tick,0x7ffdf681f424,5642757,0,0x0,8
tick,0x7ffdf681f424,5644746,0,0x0,8
tick,0x7ffdf681f424,5646739,0,0x0,8
tick,0x7ffdf681f424,5648742,0,0x0,8
tick,0x7ffdf681f424,5650745,0,0x0,8
tick,0x7ffdf681f424,5652739,0,0x0,8
tick,0x7ffdf681f424,5654733,0,0x0,8
tick,0x7ffdf681f424,5656632,0,0x0,8
tick,0x7ffdf681f424,5658710,0,0x0,8
tick,0x7ffdf681f424,5660704,0,0x0,8
tick,0x7ffdf681f424,5662699,0,0x0,8
tick,0x7ffdf681f424,5664694,0,0x0,8
tick,0x7ffdf681f424,5666692,0,0x0,8
tick,0x7ffdf681f424,5668761,0,0x0,8
tick,0x7ffdf681f424,5670704,0,0x0,8
tick,0x7ffdf681f424,5672693,0,0x0,8
tick,0x7ffdf681f424,5674676,0,0x0,8
tick,0x7ffdf681f424,5676662,0,0x0,8
tick,0x7ffdf681f424,5678666,0,0x0,8
tick,0x7ffdf681f424,5680636,0,0x0,8
tick,0x7ffdf681f424,5682564,0,0x0,8
tick,0x7ffdf681f424,5684646,0,0x0,8
tick,0x7ffdf681f424,5686638,0,0x0,8
tick,0x7ffdf681f424,5688630,0,0x0,8
tick,0x7ffdf681f424,5690557,0,0x0,8
tick,0x7ffdf681f424,5692619,0,0x0,8
tick,0x7ffdf681f424,5694595,0,0x0,8
tick,0x7ffdf681f424,5696614,0,0x0,8
tick,0x7ffdf681f424,5698520,0,0x0,8
tick,0x7ffdf681f424,5700597,0,0x0,8
tick,0x7ffdf681f424,5702600,0,0x0,8
tick,0x7ffdf681f424,5704494,0,0x0,8
tick,0x7ffdf681f424,5706495,0,0x0,8
tick,0x7ffdf681f424,5708433,0,0x0,8
tick,0x7ffdf681f424,5710451,0,0x0,8
tick,0x7ffdf681f424,5712561,0,0x0,8
tick,0x7ffdf681f424,5714561,0,0x0,8
tick,0x7ffdf681f424,5716573,0,0x0,8
tick,0x7ffdf681f424,5718562,0,0x0,8
tick,0x7ffdf681f424,5720546,0,0x0,8
tick,0x7ffdf681f424,5722544,0,0x0,8
tick,0x7ffdf681f424,5724534,0,0x0,8
tick,0x7ffdf681f424,5726531,0,0x0,8
tick,0x7ffdf681f424,5728524,0,0x0,8
tick,0x7ffdf681f424,5730523,0,0x0,8
tick,0x7ffdf681f424,5732521,0,0x0,8
tick,0x7ffdf681f424,5734352,0,0x0,8
tick,0x7ffdf681f424,5736447,0,0x0,8
tick,0x7ffdf681f424,5738453,0,0x0,8
tick,0x7ffdf681f424,5740443,0,0x0,8
tick,0x7ffdf681f424,5742548,0,0x0,8
tick,0x7ffdf681f424,5744495,0,0x0,8
tick,0x7ffdf681f424,5746468,0,0x0,8
tick,0x7ffdf681f424,5748363,0,0x0,8
tick,0x7ffdf681f424,5750456,0,0x0,8
tick,0x7ffdf681f424,5752453,0,0x0,8
tick,0x7ffdf681f424,5754448,0,0x0,8
tick,0x7ffdf681f424,5756436,0,0x0,8
tick,0x7ffdf681f424,5758444,0,0x0,8
tick,0x7ffdf681f424,5760348,0,0x0,8
tick,0x7ffdf681f424,5762433,0,0x0,8
tick,0x7ffdf681f424,5764421,0,0x0,8
tick,0x7ffdf681f424,5766350,0,0x0,8
tick,0x7ffdf681f424,5768413,0,0x0,8
tick,0x7ffdf681f424,5770405,0,0x0,8
tick,0x7ffdf681f424,5772399,0,0x0,8
tick,0x7ffdf681f424,5774396,0,0x0,8
tick,0x7ffdf681f424,5776384,0,0x0,8
tick,0x7ffdf681f424,5778378,0,0x0,8
tick,0x7ffdf681f424,5780387,0,0x0,8
tick,0x7ffdf681f424,5782373,0,0x0,8
tick,0x7ffdf681f424,5784385,0,0x0,8
tick,0x7ffdf681f424,5786362,0,0x0,8
tick,0x7ffdf681f424,5788356,0,0x0,8
tick,0x7ffdf681f424,5790305,0,0x0,8
tick,0x7ffdf681f424,5792347,0,0x0,8
tick,0x7ffdf681f424,5794341,0,0x0,8
tick,0x7ffdf681f424,5796335,0,0x0,8
tick,0x7ffdf681f424,5798295,0,0x0,8
tick,0x7ffdf681f424,5800377,0,0x0,8
tick,0x7ffdf681f424,5802342,0,0x0,8
tick,0x7ffdf681f424,5804331,0,0x0,8
tick,0x7ffdf681f424,5806319,0,0x0,8
tick,0x7ffdf681f424,5808311,0,0x0,8
tick,0x7ffdf681f424,5810298,0,0x0,8
tick,0x7ffdf681f424,5812299,0,0x0,8
tick,0x7ffdf681f424,5814285,0,0x0,8
tick,0x7ffdf681f424,5816290,0,0x0,8
tick,0x7ffdf681f424,5818285,0,0x0,8
tick,0x7ffdf681f424,5820174,0,0x0,8
tick,0x7ffdf681f424,5822269,0,0x0,8
tick,0x7ffdf681f424,5824298,0,0x0,8
tick,0x7ffdf681f424,5826269,0,0x0,8
tick,0x7ffdf681f424,5828256,0,0x0,8
tick,0x7ffdf681f424,5830247,0,0x0,8
tick,0x7ffdf681f424,5832245,0,0x0,8
tick,0x7ffdf681f424,5834132,0,0x0,8
tick,0x7ffdf681f424,5836127,0,0x0,8
tick,0x7ffdf681f424,5838234,0,0x0,8
tick,0x7ffdf681f424,5840125,0,0x0,8
tick,0x7ffdf681f424,5842134,0,0x0,8
tick,0x7ffdf681f424,5844210,0,0x0,8
tick,0x7ffdf681f424,5846212,0,0x0,8
tick,0x7ffdf681f424,5848227,0,0x0,8
tick,0x7ffdf681f424,5850210,0,0x0,8
tick,0x7ffdf681f424,5852192,0,0x0,8
tick,0x7ffdf681f424,5854186,0,0x0,8
tick,0x7ffdf681f424,5856181,0,0x0,8
tick,0x7ffdf681f424,5858179,0,0x0,8
tick,0x7ffdf681f424,5860171,0,0x0,8
tick,0x7ffdf681f424,5862188,0,0x0,8
tick,0x7ffdf681f424,5864165,0,0x0,8
tick,0x7ffdf681f424,5866158,0,0x0,8
tick,0x7ffdf681f424,5868055,0,0x0,8
tick,0x7ffdf681f424,5870001,0,0x0,8
tick,0x7ffdf681f424,5871969,0,0x0,8
tick,0x7ffdf681f424,5874015,0,0x0,8
tick,0x7ffdf681f424,5875953,0,0x0,8
tick,0x7ffdf681f424,5878130,0,0x0,8
tick,0x7ffdf681f424,5880118,0,0x0,8
tick,0x7ffdf681f424,5882017,0,0x0,8
tick,0x7ffdf681f424,5884117,0,0x0,8
tick,0x7ffdf681f424,5886110,0,0x0,8
tick,0x7ffdf681f424,5888137,0,0x0,8
tick,0x7ffdf681f424,5889978,0,0x0,8
tick,0x7ffdf681f424,5892122,0,0x0,8
tick,0x7ffdf681f424,5894086,0,0x0,8
tick,0x7ffdf681f424,5896078,0,0x0,8
tick,0x7ffdf681f424,5898106,0,0x0,8
tick,0x7ffdf681f424,5900081,0,0x0,8
tick,0x7ffdf681f424,5902072,0,0x0,8
tick,0x7ffdf681f424,5904064,0,0x0,8
tick,0x7ffdf681f424,5906052,0,0x0,8
tick,0x7ffdf681f424,5908049,0,0x0,8
tick,0x7ffdf681f424,5910046,0,0x0,8
tick,0x7ffdf681f424,5911933,0,0x0,8
tick,0x7ffdf681f424,5913980,0,0x0,8
tick,0x7ffdf681f424,5916030,0,0x0,8
tick,0x7ffdf681f424,5918022,0,0x0,8
tick,0x7ffdf681f424,5920005,0,0x0,8
tick,0x7ffdf681f424,5921999,0,0x0,8
tick,0x7ffdf681f424,5923935,0,0x0,8
tick,0x7ffdf681f424,5926021,0,0x0,8
tick,0x7ffdf681f424,5927985,0,0x0,8
tick,0x7ffdf681f424,5929989,0,0x0,8
tick,0x7ffdf681f424,5931818,0,0x0,8
tick,0x7ffdf681f424,5934006,0,0x0,8
tick,0x7ffdf681f424,5936017,0,0x0,8
tick,0x7ffdf681f424,5937973,0,0x0,8
tick,0x7ffdf681f424,5939960,0,0x0,8
tick,0x7ffdf681f424,5941962,0,0x0,8
tick,0x7ffdf681f424,5943958,0,0x0,8
tick,0x7ffdf681f424,5945950,0,0x0,8
tick,0x7ffdf681f424,5947931,0,0x0,8
tick,0x7ffdf681f424,5949924,0,0x0,8
tick,0x7ffdf681f424,5951920,0,0x0,8
tick,0x7ffdf681f424,5953973,0,0x0,8
tick,0x7ffdf681f424,5955934,0,0x0,8
tick,0x7ffdf681f424,5957919,0,0x0,8
tick,0x7ffdf681f424,5959907,0,0x0,8
tick,0x7ffdf681f424,5961892,0,0x0,8
tick,0x7ffdf681f424,5963895,0,0x0,8
tick,0x7ffdf681f424,5965879,0,0x0,8
tick,0x7ffdf681f424,5967882,0,0x0,8
tick,0x7ffdf681f424,5969871,0,0x0,8
tick,0x7ffdf681f424,5971866,0,0x0,8
tick,0x7ffdf681f424,5973871,0,0x0,8
tick,0x7ffdf681f424,5975840,0,0x0,8
tick,0x7ffdf681f424,5977850,0,0x0,8
tick,0x7ffdf681f424,5979860,0,0x0,8
tick,0x7ffdf681f424,5981739,0,0x0,8
tick,0x7ffdf681f424,5983838,0,0x0,8
tick,0x7ffdf681f424,5985831,0,0x0,8
tick,0x7ffdf681f424,5987715,0,0x0,8
tick,0x7ffdf681f424,5989719,0,0x0,8
tick,0x7ffdf681f424,5991820,0,0x0,8
tick,0x7ffdf681f424,5993801,0,0x0,8
tick,0x7ffdf681f424,5995805,0,0x0,8
tick,0x7ffdf681f424,5997787,0,0x0,8
tick,0x7ffdf681f424,5999763,0,0x0,8
tick,0x7ffdf681f424,6001798,0,0x0,8
tick,0x7ffdf681f424,6003800,0,0x0,8
tick,0x7ffdf681f424,6005785,0,0x0,8
tick,0x7ffdf681f424,6007798,0,0x0,8
tick,0x7ffdf681f424,6009770,0,0x0,8
tick,0x7ffdf681f424,6011759,0,0x0,8
tick,0x7ffdf681f424,6013755,0,0x0,8
tick,0x7ffdf681f424,6015743,0,0x0,8
tick,0x7ffdf681f424,6017744,0,0x0,8
tick,0x7ffdf681f424,6019726,0,0x0,8
tick,0x7ffdf681f424,6021761,0,0x0,8
tick,0x7ffdf681f424,6023666,0,0x0,8
tick,0x7ffdf681f424,6025750,0,0x0,8
tick,0x7ffdf681f424,6027716,0,0x0,8
tick,0x7ffdf681f424,6029642,0,0x0,8
tick,0x7ffdf681f424,6031655,0,0x0,8
tick,0x7ffdf681f424,6033715,0,0x0,8
tick,0x7ffdf681f424,6035614,0,0x0,8
tick,0x7ffdf681f424,6037614,0,0x0,8
tick,0x7ffdf681f424,6039588,0,0x0,8
tick,0x7ffdf681f424,6041571,0,0x0,8
tick,0x7ffdf681f424,6043567,0,0x0,8
tick,0x7ffdf681f424,6045649,0,0x0,8
tick,0x7ffdf681f424,6047671,0,0x0,8
tick,0x7ffdf681f424,6049572,0,0x0,8
tick,0x7ffdf681f424,6051683,0,0x0,8
tick,0x7ffdf681f424,6053642,0,0x0,8
tick,0x7ffdf681f424,6055645,0,0x0,8
tick,0x7ffdf681f424,6057673,0,0x0,8
tick,0x7ffdf681f424,6059655,0,0x0,8
tick,0x7ffdf681f424,6061638,0,0x0,8
tick,0x7ffdf681f424,6063620,0,0x0,8
tick,0x7ffdf681f424,6065519,0,0x0,8
tick,0x7ffdf681f424,6067670,0,0x0,8
tick,0x7ffdf681f424,6069625,0,0x0,8
tick,0x7ffdf681f424,6071600,0,0x0,8
tick,0x7ffdf681f424,6073488,0,0x0,8
tick,0x7ffdf681f424,6075599,0,0x0,8
tick,0x7ffdf681f424,6077583,0,0x0,8
tick,0x7ffdf681f424,6079587,0,0x0,8
tick,0x7ffdf681f424,6081580,0,0x0,8
tick,0x7ffdf681f424,6083568,0,0x0,8
tick,0x7ffdf681f424,6085579,0,0x0,8
tick,0x7ffdf681f424,6087560,0,0x0,8
tick,0x7ffdf681f424,6089572,0,0x0,8
tick,0x7ffdf681f424,6091551,0,0x0,8
tick,0x7ffdf681f424,6093538,0,0x0,8
tick,0x7ffdf681f424,6095541,0,0x0,8
tick,0x7ffdf681f424,6097530,0,0x0,8
tick,0x7ffdf681f424,6099534,0,0x0,8
tick,0x7ffdf681f424,6101532,0,0x0,8
tick,0x7ffdf681f424,6103521,0,0x0,8
tick,0x7ffdf681f424,6105505,0,0x0,8
tick,0x7ffdf681f424,6107530,0,0x0,8
tick,0x7ffdf681f424,6109550,0,0x0,8
tick,0x7ffdf681f424,6111515,0,0x0,8
tick,0x7ffdf681f424,6113409,0,0x0,8
tick,0x7ffdf681f424,6115352,0,0x0,8
tick,0x7ffdf681f424,6117380,0,0x0,8
tick,0x7ffdf681f424,6119335,0,0x0,8
tick,0x7ffdf681f424,6121412,0,0x0,8
tick,0x7ffdf681f424,6123321,0,0x0,8
tick,0x7ffdf681f424,6125334,0,0x0,8
tick,0x7ffdf681f424,6127348,0,0x0,8
tick,0x7ffdf681f424,6129464,0,0x0,8
tick,0x7ffdf681f424,6131434,0,0x0,8
tick,0x7ffdf681f424,6133460,0,0x0,8
tick,0x7ffdf681f424,6135461,0,0x0,8
tick,0x7ffdf681f424,6137455,0,0x0,8
tick,0x7ffdf681f424,6139442,0,0x0,8
tick,0x7ffdf681f424,6141306,0,0x0,8
tick,0x7ffdf681f424,6143316,0,0x0,8
tick,0x7ffdf681f424,6145436,0,0x0,8
tick,0x7ffdf681f424,6147386,0,0x0,8
tick,0x7ffdf681f424,6149408,0,0x0,8
tick,0x7ffdf681f424,6151408,0,0x0,8
tick,0x7ffdf681f424,6153388,0,0x0,8
tick,0x7ffdf681f424,6155395,0,0x0,8
tick,0x7ffdf681f424,6157399,0,0x0,8
tick,0x7ffdf681f424,6159387,0,0x0,8
tick,0x7ffdf681f424,6161378,0,0x0,8
tick,0x7ffdf681f424,6163355,0,0x0,8
tick,0x7ffdf681f424,6165241,0,0x0,8
tick,0x7ffdf681f424,6167344,0,0x0,8
tick,0x7ffdf681f424,6169353,0,0x0,8
tick,0x7ffdf681f424,6171333,0,0x0,8
tick,0x7ffdf681f424,6173401,0,0x0,8
tick,0x7ffdf681f424,6175347,0,0x0,8
tick,0x7ffdf681f424,6177342,0,0x0,8
tick,0x7ffdf681f424,6179311,0,0x0,8
tick,0x7ffdf681f424,6181320,0,0x0,8
tick,0x7ffdf681f424,6183306,0,0x0,8
tick,0x7ffdf681f424,6185312,0,0x0,8
tick,0x7ffdf681f424,6187290,0,0x0,8
tick,0x7ffdf681f424,6189283,0,0x0,8
tick,0x7ffdf681f424,6191284,0,0x0,8
tick,0x7ffdf681f424,6193274,0,0x0,8
tick,0x7ffdf681f424,6195254,0,0x0,8
tick,0x7ffdf681f424,6197258,0,0x0,8
tick,0x7ffdf681f424,6199286,0,0x0,8
tick,0x7ffdf681f424,6201308,0,0x0,8
tick,0x7ffdf681f424,6203256,0,0x0,8
tick,0x7ffdf681f424,6205250,0,0x0,8
tick,0x7ffdf681f424,6207240,0,0x0,8
tick,0x7ffdf681f424,6209232,0,0x0,8
tick,0x7ffdf681f424,6211227,0,0x0,8
tick,0x7ffdf681f424,6213227,0,0x0,8
tick,0x7ffdf681f424,6215114,0,0x0,8
tick,0x7ffdf681f424,6217231,0,0x0,8
tick,0x7ffdf681f424,6219110,0,0x0,8
tick,0x7ffdf681f424,6221229,0,0x0,8
tick,0x7ffdf681f424,6223139,0,0x0,8
tick,0x7ffdf681f424,6225206,0,0x0,8
tick,0x7ffdf681f424,6227191,0,0x0,8
tick,0x7ffdf681f424,6229193,0,0x0,8
tick,0x7ffdf681f424,6231183,0,0x0,8
tick,0x7ffdf681f424,6233168,0,0x0,8
tick,0x7ffdf681f424,6235162,0,0x0,8
tick,0x7ffdf681f424,6237165,0,0x0,8
tick,0x7ffdf681f424,6239220,0,0x0,8
tick,0x7ffdf681f424,6241170,0,0x0,8
tick,0x7ffdf681f424,6243160,0,0x0,8
tick,0x7ffdf681f424,6245151,0,0x0,8
tick,0x7ffdf681f424,6247148,0,0x0,8
tick,0x7ffdf681f424,6249176,0,0x0,8
tick,0x7ffdf681f424,6251126,0,0x0,8
tick,0x7ffdf681f424,6253124,0,0x0,8
tick,0x7ffdf681f424,6255126,0,0x0,8
tick,0x7ffdf681f424,6257075,0,0x0,8
tick,0x7ffdf681f424,6259056,0,0x0,8
tick,0x7ffdf681f424,6261196,0,0x0,8
tick,0x7ffdf681f424,6263282,0,0x0,8
tick,0x7ffdf681f424,6265214,0,0x0,8
tick,0x7ffdf681f424,6267149,0,0x0,8
tick,0x7ffdf681f424,6269133,0,0x0,8
tick,0x7ffdf681f424,6271242,0,0x0,8
tick,0x7ffdf681f424,6273278,0,0x0,8
tick,0x7ffdf681f424,6275164,0,0x0,8
tick,0x7ffdf681f424,6277281,0,0x0,8
tick,0x7ffdf681f424,6279318,0,0x0,8
tick,0x7ffdf681f424,6281232,0,0x0,8
tick,0x7ffdf681f424,6283199,0,0x0,8
tick,0x7ffdf681f424,6285254,0,0x0,8
tick,0x7ffdf681f424,6287262,0,0x0,8
tick,0x7ffdf681f424,6289317,0,0x0,8
tick,0x7ffdf681f424,6291189,0,0x0,8
tick,0x7ffdf681f424,6293287,0,0x0,8
tick,0x7ffdf681f424,6295173,0,0x0,8
tick,0x7ffdf681f424,6297394,0,0x0,8
tick,0x7ffdf681f424,6299290,0,0x0,8
tick,0x7ffdf681f424,6301262,0,0x0,8
tick,0x7ffdf681f424,6302442,0,0x0,8
tick,0x7ffdf681f424,6304431,0,0x0,8
tick,0x7ffdf681f424,6306434,0,0x0,8
tick,0x7ffdf681f424,6308377,0,0x0,8
tick,0x7ffdf681f424,6310398,0,0x0,8
tick,0x7ffdf681f424,6311543,0,0x0,8
tick,0x7ffdf681f424,6313544,0,0x0,8
tick,0x7ffdf681f424,6315554,0,0x0,8
tick,0x7ffdf681f424,6317507,0,0x0,8
tick,0x7ffdf681f424,6319501,0,0x0,8
tick,0x7ffdf681f424,6321527,0,0x0,8
tick,0x7ffdf681f424,6323536,0,0x0,8
tick,0x7ffdf681f424,6325594,0,0x0,8
tick,0x7ffdf681f424,6327599,0,0x0,8
tick,0x7ffdf681f424,6329555,0,0x0,8
tick,0x7ffdf681f424,6331575,0,0x0,8
tick,0x7ffdf681f424,6333563,0,0x0,8
tick,0x7ffdf681f424,6335582,0,0x0,8
tick,0x7ffdf681f424,6337608,0,0x0,8
tick,0x7ffdf681f424,6339549,0,0x0,8
tick,0x7ffdf681f424,6341603,0,0x0,8
tick,0x7ffdf681f424,6343585,0,0x0,8
tick,0x7ffdf681f424,6345588,0,0x0,8
tick,0x7ffdf681f424,6347583,0,0x0,8
tick,0x7ffdf681f424,6349534,0,0x0,8
tick,0x7ffdf681f424,6351572,0,0x0,8
tick,0x7ffdf681f424,6353558,0,0x0,8
tick,0x7ffdf681f424,6355561,0,0x0,8
tick,0x7ffdf681f424,6357543,0,0x0,8
tick,0x7ffdf681f424,6359552,0,0x0,8
tick,0x7ffdf681f424,6361557,0,0x0,8
tick,0x7ffdf681f424,6363520,0,0x0,8
tick,0x7ffdf681f424,6365525,0,0x0,8
tick,0x7ffdf681f424,6367521,0,0x0,8
tick,0x7ffdf681f424,6369521,0,0x0,8
tick,0x7ffdf681f424,6371521,0,0x0,8
tick,0x7ffdf681f424,6373434,0,0x0,8
tick,0x7ffdf681f424,6375504,0,0x0,8
tick,0x7ffdf681f424,6377503,0,0x0,8
tick,0x7ffdf681f424,6379534,0,0x0,8
tick,0x7ffdf681f424,6381486,0,0x0,8
tick,0x7ffdf681f424,6383502,0,0x0,8
tick,0x7ffdf681f424,6385480,0,0x0,8
tick,0x7ffdf681f424,6387382,0,0x0,8
tick,0x7ffdf681f424,6389463,0,0x0,8
tick,0x7ffdf681f424,6391466,0,0x0,8
tick,0x7ffdf681f424,6393456,0,0x0,8
tick,0x7ffdf681f424,6395448,0,0x0,8
tick,0x7ffdf681f424,6397439,0,0x0,8
tick,0x7ffdf681f424,6399438,0,0x0,8
tick,0x7ffdf681f424,6401427,0,0x0,8
tick,0x7ffdf681f424,6403428,0,0x0,8
tick,0x7ffdf681f424,6405433,0,0x0,8
tick,0x7ffdf681f424,6407427,0,0x0,8
tick,0x7ffdf681f424,6409409,0,0x0,8
tick,0x7ffdf681f424,6411407,0,0x0,8
tick,0x7ffdf681f424,6413370,0,0x0,8
tick,0x7ffdf681f424,6415299,0,0x0,8
tick,0x7ffdf681f424,6417396,0,0x0,8
tick,0x7ffdf681f424,6419329,0,0x0,8
tick,0x7ffdf681f424,6421384,0,0x0,8
tick,0x7ffdf681f424,6423379,0,0x0,8
tick,0x7ffdf681f424,6425373,0,0x0,8
tick,0x7ffdf681f424,6427383,0,0x0,8
tick,0x7ffdf681f424,6429373,0,0x0,8
tick,0x7ffdf681f424,6431359,0,0x0,8
tick,0x7ffdf681f424,6433309,0,0x0,8
tick,0x7ffdf681f424,6435347,0,0x0,8
tick,0x7ffdf681f424,6437347,0,0x0,8
tick,0x7ffdf681f424,6439236,0,0x0,8
tick,0x7ffdf681f424,6441324,0,0x0,8
tick,0x7ffdf681f424,6443321,0,0x0,8
tick,0x7ffdf681f424,6445351,0,0x0,8
tick,0x7ffdf681f424,6447222,0,0x0,8
tick,0x7ffdf681f424,6449225,0,0x0,8
tick,0x7ffdf681f424,6451304,0,0x0,8
tick,0x7ffdf681f424,6453301,0,0x0,8
tick,0x7ffdf681f424,6455300,0,0x0,8
tick,0x7ffdf681f424,6457185,0,0x0,8
tick,0x7ffdf681f424,6459285,0,0x0,8
tick,0x7ffdf681f424,6461236,0,0x0,8
tick,0x7ffdf681f424,6463274,0,0x0,8
tick,0x7ffdf681f424,6465156,0,0x0,8
tick,0x7ffdf681f424,6467227,0,0x0,8
tick,0x7ffdf681f424,6469270,0,0x0,8
tick,0x7ffdf681f424,6471267,0,0x0,8
tick,0x7ffdf681f424,6473238,0,0x0,8
tick,0x7ffdf681f424,6475242,0,0x0,8
tick,0x7ffdf681f424,6477239,0,0x0,8
tick,0x7ffdf681f424,6479234,0,0x0,8
tick,0x7ffdf681f424,6481226,0,0x0,8
tick,0x7ffdf681f424,6483225,0,0x0,8
tick,0x7ffdf681f424,6485215,0,0x0,8
tick,0x7ffdf681f424,6487215,0,0x0,8
tick,0x7ffdf681f424,6489197,0,0x0,8
tick,0x7ffdf681f424,6491200,0,0x0,8
tick,0x7ffdf681f424,6493209,0,0x0,8
tick,0x7ffdf681f424,6495200,0,0x0,8
tick,0x7ffdf681f424,6497189,0,0x0,8
tick,0x7ffdf681f424,6499183,0,0x0,8
tick,0x7ffdf681f424,6501170,0,0x0,8
tick,0x7ffdf681f424,6503169,0,0x0,8
tick,0x7ffdf681f424,6505169,0,0x0,8
tick,0x7ffdf681f424,6507051,0,0x0,8
tick,0x7ffdf681f424,6509159,0,0x0,8
tick,0x7ffdf681f424,6511140,0,0x0,8
tick,0x7ffdf681f424,6513149,0,0x0,8
tick,0x7ffdf681f424,6515139,0,0x0,8
tick,0x7ffdf681f424,6517174,0,0x0,8
tick,0x7ffdf681f424,6519132,0,0x0,8
tick,0x7ffdf681f424,6521121,0,0x0,8
tick,0x7ffdf681f424,6523113,0,0x0,8
tick,0x7ffdf681f424,6525015,0,0x0,8
tick,0x7ffdf681f424,6527110,0,0x0,8
tick,0x7ffdf681f424,6529101,0,0x0,8
tick,0x7ffdf681f424,6531096,0,0x0,8
tick,0x7ffdf681f424,6532952,0,0x0,8
tick,0x7ffdf681f424,6535097,0,0x0,8
tick,0x7ffdf681f424,6536977,0,0x0,8
tick,0x7ffdf681f424,6539083,0,0x0,8
tick,0x7ffdf681f424,6541027,0,0x0,8
tick,0x7ffdf681f424,6543069,0,0x0,8
tick,0x7ffdf681f424,6545061,0,0x0,8
tick,0x7ffdf681f424,6547048,0,0x0,8
tick,0x7ffdf681f424,6549055,0,0x0,8
tick,0x7ffdf681f424,6551055,0,0x0,8
tick,0x7ffdf681f424,6553035,0,0x0,8
tick,0x7ffdf681f424,6555004,0,0x0,8
tick,0x7ffdf681f424,6556916,0,0x0,8
tick,0x7ffdf681f424,6559007,0,0x0,8
tick,0x7ffdf681f424,6561026,0,0x0,8
tick,0x7ffdf681f424,6563010,0,0x0,8
tick,0x7ffdf681f424,6565010,0,0x0,8
tick,0x7ffdf681f424,6566998,0,0x0,8
tick,0x7ffdf681f424,6568999,0,0x0,8
tick,0x7ffdf681f424,6570987,0,0x0,8
tick,0x7ffdf681f424,6572986,0,0x0,8
tick,0x7ffdf681f424,6574981,0,0x0,8
tick,0x7ffdf681f424,6576970,0,0x0,8
tick,0x7ffdf681f424,6578972,0,0x0,8
tick,0x7ffdf681f424,6580971,0,0x0,8
tick,0x7ffdf681f424,6582982,0,0x0,8
tick,0x7ffdf681f424,6584952,0,0x0,8
tick,0x7ffdf681f424,6586979,0,0x0,8
tick,0x7ffdf681f424,6588890,0,0x0,8
tick,0x7ffdf681f424,6590941,0,0x0,8
tick,0x7ffdf681f424,6592936,0,0x0,8
tick,0x7ffdf681f424,6594888,0,0x0,8
tick,0x7ffdf681f424,6596919,0,0x0,8
tick,0x7ffdf681f424,6598863,0,0x0,8
tick,0x7ffdf681f424,6600801,0,0x0,8
tick,0x7ffdf681f424,6602812,0,0x0,8
tick,0x7ffdf681f424,6604946,0,0x0,8
tick,0x7ffdf681f424,6606810,0,0x0,8
tick,0x7ffdf681f424,6608889,0,0x0,8
tick,0x7ffdf681f424,6610882,0,0x0,8
tick,0x7ffdf681f424,6612877,0,0x0,8
tick,0x7ffdf681f424,6614883,0,0x0,8
tick,0x7ffdf681f424,6616865,0,0x0,8
tick,0x7ffdf681f424,6618866,0,0x0,8
tick,0x7ffdf681f424,6620824,0,0x0,8
tick,0x7ffdf681f424,6622741,0,0x0,8
tick,0x7ffdf681f424,6624747,0,0x0,8
tick,0x7ffdf681f424,6626694,0,0x0,8
tick,0x7ffdf681f424,6628618,0,0x0,8
tick,0x7ffdf681f424,6630808,0,0x0,8
tick,0x7ffdf681f424,6632644,0,0x0,8
tick,0x7ffdf681f424,6634778,0,0x0,8
tick,0x7ffdf681f424,6636847,0,0x0,8
tick,0x7ffdf681f424,6638819,0,0x0,8
tick,0x7ffdf681f424,6640671,0,0x0,8
tick,0x7ffdf681f424,6642784,0,0x0,8
tick,0x7ffdf681f424,6644739,0,0x0,8
tick,0x7ffdf681f424,6646798,0,0x0,8
tick,0x7ffdf681f424,6648743,0,0x0,8
tick,0x7ffdf681f424,6650815,0,0x0,8
tick,0x7ffdf681f424,6652767,0,0x0,8
tick,0x7ffdf681f424,6654004,0,0x0,8
tick,0x7ffdf681f424,6655984,0,0x0,8
tick,0x7ffdf681f424,6657982,0,0x0,8
tick,0x7ffdf681f424,6659940,0,0x0,8
tick,0x7ffdf681f424,6661974,0,0x0,8
tick,0x7ffdf681f424,6663915,0,0x0,8
tick,0x7ffdf681f424,6665919,0,0x0,8
tick,0x7ffdf681f424,6667912,0,0x0,8
tick,0x7ffdf681f424,6669957,0,0x0,8
tick,0x7ffdf681f424,6671925,0,0x0,8
tick,0x7ffdf681f424,6673882,0,0x0,8
tick,0x7ffdf681f424,6675869,0,0x0,8
tick,0x7ffdf681f424,6677803,0,0x0,8
tick,0x7ffdf681f424,6679868,0,0x0,8
tick,0x7ffdf681f424,6681760,0,0x0,8
tick,0x7ffdf681f424,6683870,0,0x0,8
tick,0x7ffdf681f424,6685865,0,0x0,8
tick,0x7ffdf681f424,6687837,0,0x0,8
tick,0x7ffdf681f424,6689834,0,0x0,8
tick,0x7ffdf681f424,6691832,0,0x0,8
tick,0x7ffdf681f424,6693821,0,0x0,8
tick,0x7ffdf681f424,6695810,0,0x0,8
tick,0x7ffdf681f424,6697824,0,0x0,8
tick,0x7ffdf681f424,6699821,0,0x0,8
tick,0x7ffdf681f424,6701808,0,0x0,8
tick,0x7ffdf681f424,6703796,0,0x0,8
tick,0x7ffdf681f424,6705810,0,0x0,8
tick,0x7ffdf681f424,6707791,0,0x0,8
tick,0x7ffdf681f424,6709790,0,0x0,8
tick,0x7ffdf681f424,6711775,0,0x0,8
tick,0x7ffdf681f424,6713781,0,0x0,8
tick,0x7ffdf681f424,6715762,0,0x0,8
tick,0x7ffdf681f424,6717775,0,0x0,8
tick,0x7ffdf681f424,6719757,0,0x0,8
tick,0x7ffdf681f424,6721762,0,0x0,8
tick,0x7ffdf681f424,6723705,0,0x0,8
tick,0x7ffdf681f424,6725734,0,0x0,8
tick,0x7ffdf681f424,6727729,0,0x0,8
tick,0x7ffdf681f424,6729757,0,0x0,8
tick,0x7ffdf681f424,6731725,0,0x0,8
tick,0x7ffdf681f424,6733733,0,0x0,8
tick,0x7ffdf681f424,6735617,0,0x0,8
tick,0x7ffdf681f424,6737717,0,0x0,8
tick,0x7ffdf681f424,6739594,0,0x0,8
tick,0x7ffdf681f424,6741586,0,0x0,8
tick,0x7ffdf681f424,6743714,0,0x0,8
tick,0x7ffdf681f424,6745695,0,0x0,8
tick,0x7ffdf681f424,6747682,0,0x0,8
tick,0x7ffdf681f424,6749698,0,0x0,8
tick,0x7ffdf681f424,6751679,0,0x0,8
tick,0x7ffdf681f424,6753560,0,0x0,8
tick,0x7ffdf681f424,6755572,0,0x0,8
tick,0x7ffdf681f424,6757688,0,0x0,8
tick,0x7ffdf681f424,6759651,0,0x0,8
tick,0x7ffdf681f424,6761647,0,0x0,8
tick,0x7ffdf681f424,6763640,0,0x0,8
tick,0x7ffdf681f424,6765525,0,0x0,8
tick,0x7ffdf681f424,6767639,0,0x0,8
tick,0x7ffdf681f424,6769626,0,0x0,8
tick,0x7ffdf681f424,6771690,0,0x0,8
tick,0x7ffdf681f424,6773524,0,0x0,8
tick,0x7ffdf681f424,6775501,0,0x0,8
tick,0x7ffdf681f424,6777603,0,0x0,8
tick,0x7ffdf681f424,6779607,0,0x0,8
tick,0x7ffdf681f424,6781518,0,0x0,8
tick,0x7ffdf681f424,6783596,0,0x0,8
tick,0x7ffdf681f424,6785559,0,0x0,8
tick,0x7ffdf681f424,6787585,0,0x0,8
tick,0x7ffdf681f424,6789503,0,0x0,8
tick,0x7ffdf681f424,6791550,0,0x0,8
tick,0x7ffdf681f424,6793573,0,0x0,8
tick,0x7ffdf681f424,6795495,0,0x0,8
tick,0x7ffdf681f424,6796602,0,0x0,8
tick,0x7ffdf681f424,6798492,0,0x0,8
tick,0x7ffdf681f424,6800437,0,0x0,8
tick,0x7ffdf681f424,6802520,0,0x0,8
tick,0x7ffdf681f424,6804543,0,0x0,8
tick,0x7ffdf681f424,6806587,0,0x0,8
tick,0x7ffdf681f424,6808556,0,0x0,8
tick,0x7ffdf681f424,6810575,0,0x0,8
tick,0x7ffdf681f424,6812595,0,0x0,8
tick,0x7ffdf681f424,6814552,0,0x0,8
tick,0x7ffdf681f424,6816563,0,0x0,8
tick,0x7ffdf681f424,6818500,0,0x0,8
tick,0x7ffdf681f424,6820590,0,0x0,8
tick,0x7ffdf681f424,6822496,0,0x0,8
tick,0x7ffdf681f424,6824527,0,0x0,8
tick,0x7ffdf681f424,6826525,0,0x0,8
tick,0x7ffdf681f424,6828549,0,0x0,8
tick,0x7ffdf681f424,6830583,0,0x0,8
tick,0x7ffdf681f424,6832515,0,0x0,8
tick,0x7ffdf681f424,6834808,0,0x0,8
tick,0x7ffdf681f424,6836698,0,0x0,8
tick,0x7ffdf681f424,6838690,0,0x0,8
tick,0x7ffdf681f424,6840561,0,0x0,8
tick,0x7ffdf681f424,6842651,0,0x0,8
tick,0x7ffdf681f424,6844638,0,0x0,8
tick,0x7ffdf681f424,6846650,0,0x0,8
tick,0x7ffdf681f424,6848523,0,0x0,8
tick,0x7ffdf681f424,6850464,0,0x0,8
tick,0x7ffdf681f424,6852428,0,0x0,8
tick,0x7ffdf681f424,6854418,0,0x0,8
tick,0x7ffdf681f424,6856528,0,0x0,8
tick,0x7ffdf681f424,6858377,0,0x0,8
tick,0x7ffdf681f424,6860502,0,0x0,8
tick,0x7ffdf681f424,6862542,0,0x0,8
tick,0x7ffdf681f424,6864596,0,0x0,8
tick,0x7ffdf681f424,6866509,0,0x0,8
tick,0x7ffdf681f424,6868516,0,0x0,8
tick,0x7ffdf681f424,6870559,0,0x0,8
tick,0x7ffdf681f424,6872562,0,0x0,8
tick,0x7ffdf681f424,6874566,0,0x0,8
tick,0x7ffdf681f424,6876538,0,0x0,8
tick,0x7ffdf681f424,6878551,0,0x0,8
tick,0x7ffdf681f424,6880546,0,0x0,8
tick,0x7ffdf681f424,6882526,0,0x0,8
tick,0x7ffdf681f424,6884525,0,0x0,8
tick,0x7ffdf681f424,6886519,0,0x0,8
tick,0x7ffdf681f424,6888508,0,0x0,8
tick,0x7ffdf681f424,6890402,0,0x0,8
tick,0x7ffdf681f424,6892501,0,0x0,8
tick,0x7ffdf681f424,6894500,0,0x0,8
tick,0x7ffdf681f424,6896510,0,0x0,8
tick,0x7ffdf681f424,6898502,0,0x0,8
tick,0x7ffdf681f424,6900473,0,0x0,8
tick,0x7ffdf681f424,6902505,0,0x0,8
tick,0x7ffdf681f424,6904469,0,0x0,8
tick,0x7ffdf681f424,6906474,0,0x0,8
tick,0x7ffdf681f424,6908366,0,0x0,8
tick,0x7ffdf681f424,6910464,0,0x0,8
tick,0x7ffdf681f424,6912447,0,0x0,8
tick,0x7ffdf681f424,6914292,0,0x0,8
tick,0x7ffdf681f424,6916347,0,0x0,8
tick,0x7ffdf681f424,6918325,0,0x0,8
tick,0x7ffdf681f424,6920381,0,0x0,8
tick,0x7ffdf681f424,6922380,0,0x0,8
tick,0x7ffdf681f424,6924365,0,0x0,8
tick,0x7ffdf681f424,6926407,0,0x0,8
tick,0x7ffdf681f424,6928401,0,0x0,8
tick,0x7ffdf681f424,6930396,0,0x0,8
tick,0x7ffdf681f424,6932413,0,0x0,8
tick,0x7ffdf681f424,6934378,0,0x0,8
tick,0x7ffdf681f424,6936386,0,0x0,8
tick,0x7ffdf681f424,6938381,0,0x0,8
tick,0x7ffdf681f424,6940274,0,0x0,8
tick,0x7ffdf681f424,6942387,0,0x0,8
tick,0x7ffdf681f424,6944356,0,0x0,8
tick,0x7ffdf681f424,6946268,0,0x0,8
tick,0x7ffdf681f424,6948256,0,0x0,8
tick,0x7ffdf681f424,6950157,0,0x0,8
tick,0x7ffdf681f424,6952260,0,0x0,8
tick,0x7ffdf681f424,6954288,0,0x0,8
tick,0x7ffdf681f424,6956254,0,0x0,8
tick,0x7ffdf681f424,6958178,0,0x0,8
tick,0x7ffdf681f424,6960109,0,0x0,8
tick,0x7ffdf681f424,6962247,0,0x0,8
tick,0x7ffdf681f424,6964241,0,0x0,8
tick,0x7ffdf681f424,6966146,0,0x0,8
tick,0x7ffdf681f424,6968266,0,0x0,8
tick,0x7ffdf681f424,6970248,0,0x0,8
tick,0x7ffdf681f424,6972250,0,0x0,8
tick,0x7ffdf681f424,6974193,0,0x0,8
tick,0x7ffdf681f424,6976237,0,0x0,8
tick,0x7ffdf681f424,6978222,0,0x0,8
tick,0x7ffdf681f424,6980202,0,0x0,8
tick,0x7ffdf681f424,6982116,0,0x0,8
tick,0x7ffdf681f424,6984218,0,0x0,8
tick,0x7ffdf681f424,6986094,0,0x0,8
tick,0x7ffdf681f424,6988204,0,0x0,8
tick,0x7ffdf681f424,6990148,0,0x0,8
tick,0x7ffdf681f424,6992217,0,0x0,8
tick,0x7ffdf681f424,6994181,0,0x0,8
tick,0x7ffdf681f424,6996205,0,0x0,8
tick,0x7ffdf681f424,6998187,0,0x0,8
tick,0x7ffdf681f424,7000252,0,0x0,8
tick,0x7ffdf681f424,7002174,0,0x0,8
tick,0x7ffdf681f424,7004232,0,0x0,8
tick,0x7ffdf681f424,7006176,0,0x0,8
tick,0x7ffdf681f424,7008230,0,0x0,8
tick,0x7ffdf681f424,7010081,0,0x0,8
tick,0x7ffdf681f424,7012128,0,0x0,8
tick,0x7ffdf681f424,7014182,0,0x0,8
tick,0x7ffdf681f424,7016192,0,0x0,8
tick,0x7ffdf681f424,7018167,0,0x0,8
tick,0x7ffdf681f424,7020206,0,0x0,8
tick,0x7ffdf681f424,7022156,0,0x0,8
tick,0x7ffdf681f424,7024179,0,0x0,8
tick,0x7ffdf681f424,7026139,0,0x0,8
tick,0x7ffdf681f424,7028121,0,0x0,8
tick,0x7ffdf681f424,7030132,0,0x0,8
tick,0x7ffdf681f424,7032023,0,0x0,8
tick,0x7ffdf681f424,7034122,0,0x0,8
tick,0x7ffdf681f424,7036111,0,0x0,8
tick,0x7ffdf681f424,7038111,0,0x0,8
tick,0x7ffdf681f424,7040113,0,0x0,8
tick,0x7ffdf681f424,7042064,0,0x0,8
tick,0x7ffdf681f424,7044108,0,0x0,8
tick,0x7ffdf681f424,7046087,0,0x0,8
tick,0x7ffdf681f424,7048087,0,0x0,8
tick,0x7ffdf681f424,7050071,0,0x0,8
tick,0x7ffdf681f424,7052094,0,0x0,8
tick,0x7ffdf681f424,7054112,0,0x0,8
tick,0x7ffdf681f424,7056003,0,0x0,8
tick,0x7ffdf681f424,7058055,0,0x0,8
tick,0x7ffdf681f424,7060050,0,0x0,8
tick,0x7ffdf681f424,7061959,0,0x0,8
tick,0x7ffdf681f424,7064031,0,0x0,8
tick,0x7ffdf681f424,7066037,0,0x0,8
tick,0x7ffdf681f424,7068034,0,0x0,8
tick,0x7ffdf681f424,7070051,0,0x0,8
tick,0x7ffdf681f424,7071968,0,0x0,8
tick,0x7ffdf681f424,7073908,0,0x0,8
tick,0x7ffdf681f424,7076016,0,0x0,8
tick,0x7ffdf681f424,7077997,0,0x0,8
tick,0x7ffdf681f424,7080002,0,0x0,8
tick,0x7ffdf681f424,7081914,0,0x0,8
tick,0x7ffdf681f424,7084015,0,0x0,8
tick,0x7ffdf681f424,7085943,0,0x0,8
tick,0x7ffdf681f424,7087987,0,0x0,8
tick,0x7ffdf681f424,7089973,0,0x0,8
tick,0x7ffdf681f424,7091965,0,0x0,8
tick,0x7ffdf681f424,7093930,0,0x0,8
tick,0x7ffdf681f424,7095959,0,0x0,8
tick,0x7ffdf681f424,7097951,0,0x0,8
tick,0x7ffdf681f424,7099889,0,0x0,8
tick,0x7ffdf681f424,7101939,0,0x0,8
tick,0x7ffdf681f424,7103931,0,0x0,8
tick,0x7ffdf681f424,7105958,0,0x0,8
tick,0x7ffdf681f424,7107884,0,0x0,8
tick,0x7ffdf681f424,7109923,0,0x0,8
tick,0x7ffdf681f424,7111947,0,0x0,8
tick,0x7ffdf681f424,7113912,0,0x0,8
tick,0x7ffdf681f424,7115883,0,0x0,8
tick,0x7ffdf681f424,7117895,0,0x0,8
tick,0x7ffdf681f424,7119891,0,0x0,8
tick,0x7ffdf681f424,7121835,0,0x0,8
tick,0x7ffdf681f424,7123777,0,0x0,8
tick,0x7ffdf681f424,7125887,0,0x0,8
tick,0x7ffdf681f424,7127868,0,0x0,8
tick,0x7ffdf681f424,7129826,0,0x0,8
tick,0x7ffdf681f424,7131870,0,0x0,8
tick,0x7ffdf681f424,7133865,0,0x0,8
tick,0x7ffdf681f424,7135833,0,0x0,8
tick,0x7ffdf681f424,7137720,0,0x0,8
tick,0x7ffdf681f424,7139762,0,0x0,8
tick,0x7ffdf681f424,7141740,0,0x0,8
tick,0x7ffdf681f424,7143723,0,0x0,8
tick,0x7ffdf681f424,7145815,0,0x0,8
tick,0x7ffdf681f424,7147805,0,0x0,8
tick,0x7ffdf681f424,7149724,0,0x0,8
tick,0x7ffdf681f424,7151766,0,0x0,8
tick,0x7ffdf681f424,7153826,0,0x0,8
tick,0x7ffdf681f424,7155793,0,0x0,8
tick,0x7ffdf681f424,7157790,0,0x0,8
tick,0x7ffdf681f424,7159797,0,0x0,8
tick,0x7ffdf681f424,7161783,0,0x0,8
tick,0x7ffdf681f424,7163778,0,0x0,8
tick,0x7ffdf681f424,7165724,0,0x0,8
tick,0x7ffdf681f424,7167777,0,0x0,8
tick,0x7ffdf681f424,7169759,0,0x0,8
tick,0x7ffdf681f424,7171748,0,0x0,8
tick,0x7ffdf681f424,7173601,0,0x0,8
tick,0x7ffdf681f424,7175754,0,0x0,8
tick,0x7ffdf681f424,7177741,0,0x0,8
tick,0x7ffdf681f424,7179731,0,0x0,8
tick,0x7ffdf681f424,7181737,0,0x0,8
tick,0x7ffdf681f424,7183738,0,0x0,8
tick,0x7ffdf681f424,7185713,0,0x0,8
tick,0x7ffdf681f424,7187686,0,0x0,8
tick,0x7ffdf681f424,7189705,0,0x0,8
tick,0x7ffdf681f424,7191715,0,0x0,8
tick,0x7ffdf681f424,7193695,0,0x0,8
tick,0x7ffdf681f424,7195649,0,0x0,8
tick,0x7ffdf681f424,7197684,0,0x0,8
tick,0x7ffdf681f424,7199677,0,0x0,8
tick,0x7ffdf681f424,7201681,0,0x0,8
tick,0x7ffdf681f424,7203678,0,0x0,8
tick,0x7ffdf681f424,7205662,0,0x0,8
tick,0x7ffdf681f424,7207673,0,0x0,8
tick,0x7ffdf681f424,7209671,0,0x0,8
tick,0x7ffdf681f424,7211664,0,0x0,8
tick,0x7ffdf681f424,7213639,0,0x0,8
tick,0x7ffdf681f424,7215577,0,0x0,8
tick,0x7ffdf681f424,7217584,0,0x0,8
tick,0x7ffdf681f424,7219520,0,0x0,8
tick,0x7ffdf681f424,7221574,0,0x0,8
tick,0x7ffdf681f424,7223570,0,0x0,8
tick,0x7ffdf681f424,7225620,0,0x0,8
tick,0x7ffdf681f424,7227606,0,0x0,8
tick,0x7ffdf681f424,7229598,0,0x0,8
tick,0x7ffdf681f424,7231626,0,0x0,8
tick,0x7ffdf681f424,7233485,0,0x0,8
tick,0x7ffdf681f424,7235577,0,0x0,8
tick,0x7ffdf681f424,7237574,0,0x0,8
tick,0x7ffdf681f424,7239523,0,0x0,8
tick,0x7ffdf681f424,7241574,0,0x0,8
tick,0x7ffdf681f424,7243572,0,0x0,8
tick,0x7ffdf681f424,7245565,0,0x0,8
tick,0x7ffdf681f424,7247503,0,0x0,8
tick,0x7ffdf681f424,7249581,0,0x0,8
tick,0x7ffdf681f424,7251556,0,0x0,8
tick,0x7ffdf681f424,7253485,0,0x0,8
tick,0x7ffdf681f424,7255539,0,0x0,8
tick,0x7ffdf681f424,7257527,0,0x0,8
tick,0x7ffdf681f424,7259521,0,0x0,8
tick,0x7ffdf681f424,7261480,0,0x0,8
tick,0x7ffdf681f424,7263511,0,0x0,8
tick,0x7ffdf681f424,7265406,0,0x0,8
tick,0x7ffdf681f424,7267533,0,0x0,8
tick,0x7ffdf681f424,7269511,0,0x0,8
tick,0x7ffdf681f424,7271509,0,0x0,8
tick,0x7ffdf681f424,7273492,0,0x0,8
tick,0x7ffdf681f424,7275467,0,0x0,8
tick,0x7ffdf681f424,7277432,0,0x0,8
tick,0x7ffdf681f424,7279482,0,0x0,8
tick,0x7ffdf681f424,7281468,0,0x0,8
tick,0x7ffdf681f424,7283424,0,0x0,8
tick,0x7ffdf681f424,7285483,0,0x0,8
tick,0x7ffdf681f424,7287450,0,0x0,8
tick,0x7ffdf681f424,7289434,0,0x0,8
tick,0x7ffdf681f424,7291349,0,0x0,8
tick,0x7ffdf681f424,7293328,0,0x0,8
tick,0x7ffdf681f424,7295448,0,0x0,8
tick,0x7ffdf681f424,7297464,0,0x0,8
tick,0x7ffdf681f424,7299417,0,0x0,8
tick,0x7ffdf681f424,7301403,0,0x0,8
tick,0x7ffdf681f424,7303419,0,0x0,8
tick,0x7ffdf681f424,7305362,0,0x0,8
tick,0x7ffdf681f424,7307407,0,0x0,8
tick,0x7ffdf681f424,7309389,0,0x0,8
tick,0x7ffdf681f424,7311393,0,0x0,8
tick,0x7ffdf681f424,7313421,0,0x0,8
tick,0x7ffdf681f424,7315260,0,0x0,8
tick,0x7ffdf681f424,7317370,0,0x0,8
tick,0x7ffdf681f424,7319311,0,0x0,8
tick,0x7ffdf681f424,7321359,0,0x0,8
tick,0x7ffdf681f424,7323367,0,0x0,8
tick,0x7ffdf681f424,7325359,0,0x0,8
tick,0x7ffdf681f424,7327373,0,0x0,8
tick,0x7ffdf681f424,7329349,0,0x0,8
tick,0x7ffdf681f424,7331332,0,0x0,8
tick,0x7ffdf681f424,7333337,0,0x0,8
tick,0x7ffdf681f424,7335343,0,0x0,8
tick,0x7ffdf681f424,7337318,0,0x0,8
tick,0x7ffdf681f424,7339311,0,0x0,8
tick,0x7ffdf681f424,7341317,0,0x0,8
tick,0x7ffdf681f424,7343303,0,0x0,8
tick,0x7ffdf681f424,7345292,0,0x0,8
tick,0x7ffdf681f424,7347288,0,0x0,8
tick,0x7ffdf681f424,7349246,0,0x0,8
tick,0x7ffdf681f424,7351276,0,0x0,8
tick,0x7ffdf681f424,7353279,0,0x0,8
tick,0x7ffdf681f424,7355266,0,0x0,8
tick,0x7ffdf681f424,7357159,0,0x0,8
tick,0x7ffdf681f424,7359255,0,0x0,8
tick,0x7ffdf681f424,7361252,0,0x0,8
tick,0x7ffdf681f424,7363188,0,0x0,8
tick,0x7ffdf681f424,7365247,0,0x0,8
tick,0x7ffdf681f424,7367241,0,0x0,8
tick,0x7ffdf681f424,7369140,0,0x0,8
tick,0x7ffdf681f424,7371192,0,0x0,8
tick,0x7ffdf681f424,7373246,0,0x0,8
tick,0x7ffdf681f424,7375220,0,0x0,8
tick,0x7ffdf681f424,7377207,0,0x0,8
tick,0x7ffdf681f424,7379189,0,0x0,8
tick,0x7ffdf681f424,7381205,0,0x0,8
tick,0x7ffdf681f424,7383205,0,0x0,8
tick,0x7ffdf681f424,7385209,0,0x0,8
tick,0x7ffdf681f424,7387187,0,0x0,8
tick,0x7ffdf681f424,7389181,0,0x0,8
tick,0x7ffdf681f424,7391171,0,0x0,8
tick,0x7ffdf681f424,7393140,0,0x0,8
tick,0x7ffdf681f424,7395052,0,0x0,8
tick,0x7ffdf681f424,7397060,0,0x0,8
tick,0x7ffdf681f424,7399150,0,0x0,8
tick,0x7ffdf681f424,7401148,0,0x0,8
tick,0x7ffdf681f424,7403114,0,0x0,8
tick,0x7ffdf681f424,7405108,0,0x0,8
tick,0x7ffdf681f424,7407036,0,0x0,8
tick,0x7ffdf681f424,7409091,0,0x0,8
tick,0x7ffdf681f424,7411115,0,0x0,8
tick,0x7ffdf681f424,7413078,0,0x0,8
tick,0x7ffdf681f424,7415063,0,0x0,8
tick,0x7ffdf681f424,7417098,0,0x0,8
tick,0x7ffdf681f424,7419104,0,0x0,8
tick,0x7ffdf681f424,7421095,0,0x0,8
tick,0x7ffdf681f424,7423070,0,0x0,8
tick,0x7ffdf681f424,7425085,0,0x0,8
tick,0x7ffdf681f424,7427079,0,0x0,8
tick,0x7ffdf681f424,7429078,0,0x0,8
tick,0x7ffdf681f424,7431073,0,0x0,8
tick,0x7ffdf681f424,7433062,0,0x0,8
tick,0x7ffdf681f424,7435055,0,0x0,8
tick,0x7ffdf681f424,7437021,0,0x0,8
tick,0x7ffdf681f424,7438933,0,0x0,8
tick,0x7ffdf681f424,7441041,0,0x0,8
tick,0x7ffdf681f424,7443055,0,0x0,8
tick,0x7ffdf681f424,7444961,0,0x0,8
tick,0x7ffdf681f424,7446919,0,0x0,8
tick,0x7ffdf681f424,7448878,0,0x0,8
tick,0x7ffdf681f424,7451005,0,0x0,8
tick,0x7ffdf681f424,7453014,0,0x0,8
tick,0x7ffdf681f424,7455000,0,0x0,8
tick,0x7ffdf681f424,7456936,0,0x0,8
tick,0x7ffdf681f424,7458967,0,0x0,8
tick,0x7ffdf681f424,7460793,0,0x0,8
tick,0x7ffdf681f424,7462767,0,0x0,8
tick,0x7ffdf681f424,7464860,0,0x0,8
tick,0x7ffdf681f424,7466773,0,0x0,8
tick,0x7ffdf681f424,7468801,0,0x0,8
tick,0x7ffdf681f424,7470883,0,0x0,8
tick,0x7ffdf681f424,7472910,0,0x0,8
tick,0x7ffdf681f424,7474924,0,0x0,8
tick,0x7ffdf681f424,7476947,0,0x0,8
tick,0x7ffdf681f424,7478956,0,0x0,8
tick,0x7ffdf681f424,7480952,0,0x0,8
tick,0x7ffdf681f424,7482891,0,0x0,8
tick,0x7ffdf681f424,7484926,0,0x0,8
tick,0x7ffdf681f424,7486934,0,0x0,8
tick,0x7ffdf681f424,7488896,0,0x0,8
tick,0x7ffdf681f424,7490838,0,0x0,8
tick,0x7ffdf681f424,7492908,0,0x0,8
tick,0x7ffdf681f424,7494900,0,0x0,8
tick,0x7ffdf681f424,7496889,0,0x0,8
tick,0x7ffdf681f424,7498782,0,0x0,8
tick,0x7ffdf681f424,7500877,0,0x0,8
tick,0x7ffdf681f424,7502887,0,0x0,8
tick,0x7ffdf681f424,7504896,0,0x0,8
tick,0x7ffdf681f424,7506869,0,0x0,8
tick,0x7ffdf681f424,7508864,0,0x0,8
tick,0x7ffdf681f424,7510861,0,0x0,8
tick,0x7ffdf681f424,7512845,0,0x0,8
tick,0x7ffdf681f424,7514841,0,0x0,8
tick,0x7ffdf681f424,7516836,0,0x0,8
tick,0x7ffdf681f424,7518832,0,0x0,8
tick,0x7ffdf681f424,7520826,0,0x0,8
tick,0x7ffdf681f424,7522721,0,0x0,8
tick,0x7ffdf681f424,7524823,0,0x0,8
tick,0x7ffdf681f424,7526837,0,0x0,8
tick,0x7ffdf681f424,7528809,0,0x0,8
tick,0x7ffdf681f424,7530800,0,0x0,8
tick,0x7ffdf681f424,7532793,0,0x0,8
tick,0x7ffdf681f424,7534802,0,0x0,8
tick,0x7ffdf681f424,7536797,0,0x0,8
tick,0x7ffdf681f424,7538777,0,0x0,8
tick,0x7ffdf681f424,7540773,0,0x0,8
tick,0x7ffdf681f424,7542777,0,0x0,8
tick,0x7ffdf681f424,7544767,0,0x0,8
tick,0x7ffdf681f424,7546643,0,0x0,8
tick,0x7ffdf681f424,7548584,0,0x0,8
tick,0x7ffdf681f424,7550624,0,0x0,8
tick,0x7ffdf681f424,7552594,0,0x0,8
tick,0x7ffdf681f424,7554521,0,0x0,8
tick,0x7ffdf681f424,7556643,0,0x0,8
tick,0x7ffdf681f424,7558503,0,0x0,8
tick,0x7ffdf681f424,7560633,0,0x0,8
tick,0x7ffdf681f424,7562658,0,0x0,8
tick,0x7ffdf681f424,7564714,0,0x0,8
tick,0x7ffdf681f424,7566541,0,0x0,8
tick,0x7ffdf681f424,7568655,0,0x0,8
tick,0x7ffdf681f424,7570640,0,0x0,8
tick,0x7ffdf681f424,7572700,0,0x0,8
tick,0x7ffdf681f424,7574630,0,0x0,8
tick,0x7ffdf681f424,7576623,0,0x0,8
tick,0x7ffdf681f424,7578651,0,0x0,8
tick,0x7ffdf681f424,7580616,0,0x0,8
tick,0x7ffdf681f424,7582616,0,0x0,8
tick,0x7ffdf681f424,7584675,0,0x0,8
tick,0x7ffdf681f424,7586655,0,0x0,8
tick,0x7ffdf681f424,7588636,0,0x0,8
tick,0x7ffdf681f424,7590482,0,0x0,8
tick,0x7ffdf681f424,7592567,0,0x0,8
tick,0x7ffdf681f424,7594632,0,0x0,8
tick,0x7ffdf681f424,7596632,0,0x0,8
tick,0x7ffdf681f424,7598541,0,0x0,8
tick,0x7ffdf681f424,7600502,0,0x0,8
tick,0x7ffdf681f424,7602634,0,0x0,8
tick,0x7ffdf681f424,7604595,0,0x0,8
tick,0x7ffdf681f424,7606606,0,0x0,8
tick,0x7ffdf681f424,7608587,0,0x0,8
tick,0x7ffdf681f424,7610608,0,0x0,8
tick,0x7ffdf681f424,7612578,0,0x0,8
tick,0x7ffdf681f424,7614599,0,0x0,8
tick,0x7ffdf681f424,7616562,0,0x0,8
tick,0x7ffdf681f424,7618585,0,0x0,8
tick,0x7ffdf681f424,7620436,0,0x0,8
tick,0x7ffdf681f424,7622551,0,0x0,8
tick,0x7ffdf681f424,7624550,0,0x0,8
tick,0x7ffdf681f424,7626540,0,0x0,8
tick,0x7ffdf681f424,7628534,0,0x0,8
tick,0x7ffdf681f424,7630527,0,0x0,8
tick,0x7ffdf681f424,7632531,0,0x0,8
tick,0x7ffdf681f424,7634520,0,0x0,8
tick,0x7ffdf681f424,7636527,0,0x0,8
tick,0x7ffdf681f424,7638502,0,0x0,8
tick,0x7ffdf681f424,7640392,0,0x0,8
tick,0x7ffdf681f424,7642535,0,0x0,8
tick,0x7ffdf681f424,7644494,0,0x0,8
tick,0x7ffdf681f424,7646485,0,0x0,8
tick,0x7ffdf681f424,7648377,0,0x0,8
tick,0x7ffdf681f424,7650489,0,0x0,8
tick,0x7ffdf681f424,7652471,0,0x0,8
tick,0x7ffdf681f424,7654281,0,0x0,8
tick,0x7ffdf681f424,7656246,0,0x0,8
tick,0x7ffdf681f424,7658241,0,0x0,8
tick,0x7ffdf681f424,7660301,0,0x0,8
tick,0x7ffdf681f424,7662367,0,0x0,8
tick,0x7ffdf681f424,7664410,0,0x0,8
tick,0x7ffdf681f424,7666364,0,0x0,8
tick,0x7ffdf681f424,7668402,0,0x0,8
tick,0x7ffdf681f424,7670368,0,0x0,8
tick,0x7ffdf681f424,7672383,0,0x0,8
tick,0x7ffdf681f424,7674342,0,0x0,8
tick,0x7ffdf681f424,7676354,0,0x0,8
tick,0x7ffdf681f424,7678276,0,0x0,8
tick,0x7ffdf681f424,7680415,0,0x0,8
tick,0x7ffdf681f424,7682262,0,0x0,8
tick,0x7ffdf681f424,7684346,0,0x0,8
tick,0x7ffdf681f424,7686348,0,0x0,8
tick,0x7ffdf681f424,7688330,0,0x0,8
tick,0x7ffdf681f424,7690236,0,0x0,8
tick,0x7ffdf681f424,7692341,0,0x0,8
tick,0x7ffdf681f424,7694315,0,0x0,8
tick,0x7ffdf681f424,7696330,0,0x0,8
tick,0x7ffdf681f424,7698307,0,0x0,8
tick,0x7ffdf681f424,7700321,0,0x0,8
tick,0x7ffdf681f424,7702317,0,0x0,8
tick,0x7ffdf681f424,7704327,0,0x0,8
tick,0x7ffdf681f424,7706277,0,0x0,8
tick,0x7ffdf681f424,7708287,0,0x0,8
tick,0x7ffdf681f424,7710269,0,0x0,8
tick,0x7ffdf681f424,7712285,0,0x0,8
tick,0x7ffdf681f424,7714244,0,0x0,8
tick,0x7ffdf681f424,7716265,0,0x0,8
tick,0x7ffdf681f424,7718139,0,0x0,8
tick,0x7ffdf681f424,7720217,0,0x0,8
tick,0x7ffdf681f424,7722241,0,0x0,8
tick,0x7ffdf681f424,7724244,0,0x0,8
tick,0x7ffdf681f424,7726253,0,0x0,8
tick,0x7ffdf681f424,7728218,0,0x0,8
tick,0x7ffdf681f424,7730262,0,0x0,8
tick,0x7ffdf681f424,7732152,0,0x0,8
tick,0x7ffdf681f424,7734128,0,0x0,8
tick,0x7ffdf681f424,7736162,0,0x0,8
tick,0x7ffdf681f424,7738231,0,0x0,8
tick,0x7ffdf681f424,7740142,0,0x0,8
tick,0x7ffdf681f424,7742224,0,0x0,8
tick,0x7ffdf681f424,7744042,0,0x0,8
tick,0x7ffdf681f424,7746125,0,0x0,8
tick,0x7ffdf681f424,7747245,0,0x0,8
tick,0x7ffdf681f424,7749204,0,0x0,8
tick,0x7ffdf681f424,7751226,0,0x0,8
tick,0x7ffdf681f424,7753090,0,0x0,8
tick,0x7ffdf681f424,7754212,0,0x0,8
tick,0x7ffdf681f424,7756130,0,0x0,8
tick,0x7ffdf681f424,7758173,0,0x0,8
tick,0x7ffdf681f424,7760286,0,0x0,8
tick,0x7ffdf681f424,7761473,0,0x0,8
tick,0x7ffdf681f424,7763397,0,0x0,8
tick,0x7ffdf681f424,7765405,0,0x0,8
tick,0x7ffdf681f424,7767435,0,0x0,8
tick,0x7ffdf681f424,7769407,0,0x0,8
tick,0x7ffdf681f424,7770579,0,0x0,8
tick,0x7ffdf681f424,7771758,0,0x0,8
tick,0x7ffdf681f424,7773693,0,0x0,8
tick,0x7ffdf681f424,7775773,0,0x0,8
tick,0x7ffdf681f424,7777686,0,0x0,8
tick,0x7ffdf681f424,7779720,0,0x0,8
tick,0x7ffdf681f424,7780904,0,0x0,8
tick,0x7ffdf681f424,7782006,0,0x0,8
tick,0x7ffdf681f424,7784046,0,0x0,8
tick,0x7ffdf681f424,7786110,0,0x0,8
tick,0x7ffdf681f424,7788018,0,0x0,8
tick,0x7ffdf681f424,7790064,0,0x0,8
tick,0x7ffdf681f424,7791982,0,0x0,8
tick,0x7ffdf681f424,7794048,0,0x0,8
tick,0x7ffdf681f424,7795985,0,0x0,8
tick,0x7ffdf681f424,7797888,0,0x0,8
tick,0x7ffdf681f424,7799924,0,0x0,8
tick,0x7ffdf681f424,7801938,0,0x0,8
tick,0x7ffdf681f424,7803989,0,0x0,8
tick,0x7ffdf681f424,7805967,0,0x0,8
tick,0x7ffdf681f424,7807835,0,0x0,8
tick,0x7ffdf681f424,7809951,0,0x0,8
tick,0x7ffdf681f424,7811996,0,0x0,8
tick,0x7ffdf681f424,7813950,0,0x0,8
tick,0x7ffdf681f424,7815844,0,0x0,8
tick,0x7ffdf681f424,7817975,0,0x0,8
tick,0x7ffdf681f424,7819833,0,0x0,8
tick,0x7ffdf681f424,7821926,0,0x0,8
tick,0x7ffdf681f424,7823833,0,0x0,8
tick,0x7ffdf681f424,7825919,0,0x0,8
tick,0x7ffdf681f424,7827908,0,0x0,8
tick,0x7ffdf681f424,7829807,0,0x0,8
tick,0x7ffdf681f424,7831913,0,0x0,8
tick,0x7ffdf681f424,7833882,0,0x0,8
tick,0x7ffdf681f424,7835890,0,0x0,8
tick,0x7ffdf681f424,7837918,0,0x0,8
tick,0x7ffdf681f424,7839881,0,0x0,8
tick,0x7ffdf681f424,7841860,0,0x0,8
tick,0x7ffdf681f424,7843869,0,0x0,8
tick,0x7ffdf681f424,7845896,0,0x0,8
tick,0x7ffdf681f424,7847859,0,0x0,8
tick,0x7ffdf681f424,7849839,0,0x0,8
tick,0x7ffdf681f424,7851845,0,0x0,8
tick,0x7ffdf681f424,7853828,0,0x0,8
tick,0x7ffdf681f424,7855857,0,0x0,8
tick,0x7ffdf681f424,7857822,0,0x0,8
tick,0x7ffdf681f424,7859840,0,0x0,8
tick,0x7ffdf681f424,7861715,0,0x0,8
tick,0x7ffdf681f424,7863818,0,0x0,8
tick,0x7ffdf681f424,7865796,0,0x0,8
tick,0x7ffdf681f424,7867811,0,0x0,8
tick,0x7ffdf681f424,7869805,0,0x0,8
tick,0x7ffdf681f424,7871795,0,0x0,8
tick,0x7ffdf681f424,7873699,0,0x0,8
tick,0x7ffdf681f424,7875771,0,0x0,8
tick,0x7ffdf681f424,7877778,0,0x0,8
tick,0x7ffdf681f424,7879772,0,0x0,8
tick,0x7ffdf681f424,7881794,0,0x0,8
tick,0x7ffdf681f424,7883764,0,0x0,8
tick,0x7ffdf681f424,7885792,0,0x0,8
tick,0x7ffdf681f424,7887787,0,0x0,8
tick,0x7ffdf681f424,7889789,0,0x0,8
tick,0x7ffdf681f424,7891778,0,0x0,8
tick,0x7ffdf681f424,7893771,0,0x0,8
tick,0x7ffdf681f424,7895780,0,0x0,8
tick,0x7ffdf681f424,7897761,0,0x0,8
tick,0x7ffdf681f424,7899775,0,0x0,8
tick,0x7ffdf681f424,7901758,0,0x0,8
tick,0x7ffdf681f424,7903801,0,0x0,8
tick,0x7ffdf681f424,7905699,0,0x0,8
tick,0x7ffdf681f424,7907731,0,0x0,8
tick,0x7ffdf681f424,7909765,0,0x0,8
tick,0x7ffdf681f424,7911734,0,0x0,8
tick,0x7ffdf681f424,7913615,0,0x0,8
tick,0x7ffdf681f424,7915604,0,0x0,8
tick,0x7ffdf681f424,7917701,0,0x0,8
tick,0x7ffdf681f424,7919698,0,0x0,8
tick,0x7ffdf681f424,7921705,0,0x0,8
tick,0x7ffdf681f424,7923653,0,0x0,8
tick,0x7ffdf681f424,7925697,0,0x0,8
tick,0x7ffdf681f424,7927691,0,0x0,8
tick,0x7ffdf681f424,7929677,0,0x0,8
tick,0x7ffdf681f424,7931670,0,0x0,8
tick,0x7ffdf681f424,7933664,0,0x0,8
tick,0x7ffdf681f424,7935674,0,0x0,8
tick,0x7ffdf681f424,7937662,0,0x0,8
tick,0x7ffdf681f424,7939681,0,0x0,8
tick,0x7ffdf681f424,7941660,0,0x0,8
tick,0x7ffdf681f424,7943636,0,0x0,8
tick,0x7ffdf681f424,7945642,0,0x0,8
tick,0x7ffdf681f424,7947653,0,0x0,8
tick,0x7ffdf681f424,7949599,0,0x0,8
tick,0x7ffdf681f424,7951622,0,0x0,8
tick,0x7ffdf681f424,7953624,0,0x0,8
tick,0x7ffdf681f424,7955608,0,0x0,8
tick,0x7ffdf681f424,7957619,0,0x0,8
tick,0x7ffdf681f424,7959600,0,0x0,8
tick,0x7ffdf681f424,7961647,0,0x0,8
tick,0x7ffdf681f424,7963597,0,0x0,8
tick,0x7ffdf681f424,7965482,0,0x0,8
tick,0x7ffdf681f424,7967591,0,0x0,8
tick,0x7ffdf681f424,7969583,0,0x0,8
tick,0x7ffdf681f424,7971585,0,0x0,8
tick,0x7ffdf681f424,7973577,0,0x0,8
tick,0x7ffdf681f424,7975556,0,0x0,8
tick,0x7ffdf681f424,7977553,0,0x0,8
tick,0x7ffdf681f424,7979552,0,0x0,8
tick,0x7ffdf681f424,7981551,0,0x0,8
tick,0x7ffdf681f424,7983472,0,0x0,8
tick,0x7ffdf681f424,7985528,0,0x0,8
tick,0x7ffdf681f424,7987537,0,0x0,8
tick,0x7ffdf681f424,7989534,0,0x0,8
tick,0x7ffdf681f424,7991416,0,0x0,8
tick,0x7ffdf681f424,7993518,0,0x0,8
tick,0x7ffdf681f424,7995514,0,0x0,8
tick,0x7ffdf681f424,7997499,0,0x0,8
tick,0x7ffdf681f424,7999500,0,0x0,8
tick,0x7ffdf681f424,8001484,0,0x0,8
tick,0x7ffdf681f424,8003484,0,0x0,8
tick,0x7ffdf681f424,8005486,0,0x0,8
tick,0x7ffdf681f424,8007470,0,0x0,8
tick,0x7ffdf681f424,8009517,0,0x0,8
tick,0x7ffdf681f424,8011465,0,0x0,8
tick,0x7ffdf681f424,8013470,0,0x0,8
tick,0x7ffdf681f424,8015310,0,0x0,8
tick,0x7ffdf681f424,8017458,0,0x0,8
tick,0x7ffdf681f424,8019456,0,0x0,8
tick,0x7ffdf681f424,8021445,0,0x0,8
tick,0x7ffdf681f424,8023437,0,0x0,8
tick,0x7ffdf681f424,8025430,0,0x0,8
tick,0x7ffdf681f424,8027489,0,0x0,8
tick,0x7ffdf681f424,8029415,0,0x0,8
tick,0x7ffdf681f424,8031408,0,0x0,8
tick,0x7ffdf681f424,8033417,0,0x0,8
tick,0x7ffdf681f424,8035406,0,0x0,8
tick,0x7ffdf681f424,8037397,0,0x0,8
tick,0x7ffdf681f424,8039385,0,0x0,8
tick,0x7ffdf681f424,8041386,0,0x0,8
tick,0x7ffdf681f424,8043381,0,0x0,8
tick,0x7ffdf681f424,8045371,0,0x0,8
tick,0x7ffdf681f424,8047368,0,0x0,8
tick,0x7ffdf681f424,8049428,0,0x0,8
tick,0x7ffdf681f424,8051355,0,0x0,8
tick,0x7ffdf681f424,8053367,0,0x0,8
tick,0x7ffdf681f424,8055345,0,0x0,8
tick,0x7ffdf681f424,8057282,0,0x0,8
tick,0x7ffdf681f424,8059346,0,0x0,8
tick,0x7ffdf681f424,8061215,0,0x0,8
tick,0x7ffdf681f424,8063436,0,0x0,8
tick,0x7ffdf681f424,8065374,0,0x0,8
tick,0x7ffdf681f424,8067314,0,0x0,8
tick,0x7ffdf681f424,8069307,0,0x0,8
tick,0x7ffdf681f424,8071320,0,0x0,8
tick,0x7ffdf681f424,8073210,0,0x0,8
tick,0x7ffdf681f424,8075183,0,0x0,8
tick,0x7ffdf681f424,8077286,0,0x0,8
tick,0x7ffdf681f424,8079294,0,0x0,8
tick,0x7ffdf681f424,8081281,0,0x0,8
tick,0x7ffdf681f424,8083272,0,0x0,8
tick,0x7ffdf681f424,8085266,0,0x0,8
tick,0x7ffdf681f424,8087264,0,0x0,8
tick,0x7ffdf681f424,8089259,0,0x0,8
tick,0x7ffdf681f424,8091256,0,0x0,8
tick,0x7ffdf681f424,8093253,0,0x0,8
tick,0x7ffdf681f424,8095235,0,0x0,8
tick,0x7ffdf681f424,8097232,0,0x0,8
tick,0x7ffdf681f424,8099228,0,0x0,8
tick,0x7ffdf681f424,8101235,0,0x0,8
tick,0x7ffdf681f424,8103236,0,0x0,8
tick,0x7ffdf681f424,8105218,0,0x0,8
tick,0x7ffdf681f424,8107100,0,0x0,8
tick,0x7ffdf681f424,8109206,0,0x0,8
tick,0x7ffdf681f424,8111186,0,0x0,8
tick,0x7ffdf681f424,8113187,0,0x0,8
tick,0x7ffdf681f424,8115262,0,0x0,8
tick,0x7ffdf681f424,8117175,0,0x0,8
tick,0x7ffdf681f424,8119177,0,0x0,8
tick,0x7ffdf681f424,8121175,0,0x0,8
tick,0x7ffdf681f424,8123171,0,0x0,8
tick,0x7ffdf681f424,8125156,0,0x0,8
tick,0x7ffdf681f424,8127156,0,0x0,8
tick,0x7ffdf681f424,8129141,0,0x0,8
tick,0x7ffdf681f424,8131138,0,0x0,8
tick,0x7ffdf681f424,8133136,0,0x0,8
tick,0x7ffdf681f424,8135134,0,0x0,8
tick,0x7ffdf681f424,8137118,0,0x0,8
tick,0x7ffdf681f424,8139120,0,0x0,8
tick,0x7ffdf681f424,8141142,0,0x0,8
tick,0x7ffdf681f424,8143111,0,0x0,8
tick,0x7ffdf681f424,8145145,0,0x0,8
tick,0x7ffdf681f424,8147107,0,0x0,8
tick,0x7ffdf681f424,8148985,0,0x0,8
tick,0x7ffdf681f424,8151093,0,0x0,8
tick,0x7ffdf681f424,8153088,0,0x0,8
tick,0x7ffdf681f424,8155087,0,0x0,8
tick,0x7ffdf681f424,8157015,0,0x0,8
tick,0x7ffdf681f424,8159075,0,0x0,8
tick,0x7ffdf681f424,8161056,0,0x0,8
tick,0x7ffdf681f424,8163071,0,0x0,8
tick,0x7ffdf681f424,8165069,0,0x0,8
tick,0x7ffdf681f424,8167058,0,0x0,8
tick,0x7ffdf681f424,8168981,0,0x0,8
tick,0x7ffdf681f424,8171037,0,0x0,8
tick,0x7ffdf681f424,8173029,0,0x0,8
tick,0x7ffdf681f424,8175008,0,0x0,8
tick,0x7ffdf681f424,8177022,0,0x0,8
tick,0x7ffdf681f424,8179016,0,0x0,8
tick,0x7ffdf681f424,8181023,0,0x0,8
tick,0x7ffdf681f424,8183020,0,0x0,8
tick,0x7ffdf681f424,8185061,0,0x0,8
tick,0x7ffdf681f424,8186826,0,0x0,8
tick,0x7ffdf681f424,8188830,0,0x0,8
tick,0x7ffdf681f424,8190961,0,0x0,8
tick,0x7ffdf681f424,8192897,0,0x0,8
tick,0x7ffdf681f424,8195061,0,0x0,8
tick,0x7ffdf681f424,8196209,0,0x0,8
tick,0x7ffdf681f424,8197432,0,0x0,8
tick,0x7ffdf681f424,8198589,0,0x0,8
tick,0x7ffdf681f424,8200591,0,0x0,8
tick,0x7ffdf681f424,8202627,0,0x0,8
tick,0x7ffdf681f424,8203704,0,0x0,8
tick,0x7ffdf681f424,8205701,0,0x0,8
tick,0x7ffdf681f424,8207685,0,0x0,8
tick,0x7ffdf681f424,8209698,0,0x0,8
tick,0x7ffdf681f424,8211682,0,0x0,8
tick,0x7ffdf681f424,8213713,0,0x0,8
tick,0x7ffdf681f424,8215586,0,0x0,8
tick,0x7ffdf681f424,8217703,0,0x0,8
tick,0x7ffdf681f424,8219697,0,0x0,8
tick,0x7ffdf681f424,8221685,0,0x0,8
tick,0x7ffdf681f424,8223693,0,0x0,8
tick,0x7ffdf681f424,8225672,0,0x0,8
tick,0x7ffdf681f424,8227678,0,0x0,8
tick,0x7ffdf681f424,8229658,0,0x0,8
tick,0x7ffdf681f424,8231665,0,0x0,8
tick,0x7ffdf681f424,8233653,0,0x0,8
tick,0x7ffdf681f424,8235673,0,0x0,8
tick,0x7ffdf681f424,8237644,0,0x0,8
tick,0x7ffdf681f424,8239641,0,0x0,8
tick,0x7ffdf681f424,8241638,0,0x0,8
tick,0x7ffdf681f424,8243621,0,0x0,8
tick,0x7ffdf681f424,8245654,0,0x0,8
tick,0x7ffdf681f424,8247612,0,0x0,8
tick,0x7ffdf681f424,8249616,0,0x0,8
tick,0x7ffdf681f424,8251597,0,0x0,8
tick,0x7ffdf681f424,8253640,0,0x0,8
tick,0x7ffdf681f424,8255491,0,0x0,8
tick,0x7ffdf681f424,8256582,0,0x0,8
tick,0x7ffdf681f424,8258713,0,0x0,8
tick,0x7ffdf681f424,8260787,0,0x0,8
tick,0x7ffdf681f424,8262890,0,0x0,8
tick,0x7ffdf681f424,8264861,0,0x0,8
tick,0x7ffdf681f424,8266870,0,0x0,8
tick,0x7ffdf681f424,8268857,0,0x0,8
tick,0x7ffdf681f424,8270845,0,0x0,8
tick,0x7ffdf681f424,8272936,0,0x0,8
tick,0x7ffdf681f424,8274978,0,0x0,8
tick,0x7ffdf681f424,8276970,0,0x0,8
tick,0x7ffdf681f424,8279021,0,0x0,8
tick,0x7ffdf681f424,8281006,0,0x0,8
tick,0x7ffdf681f424,8283053,0,0x0,8
tick,0x7ffdf681f424,8285156,0,0x0,8
tick,0x7ffdf681f424,8287193,0,0x0,8
tick,0x7ffdf681f424,8289349,0,0x0,8
tick,0x7ffdf681f424,8291359,0,0x0,8
tick,0x7ffdf681f424,8293374,0,0x0,8
tick,0x7ffdf681f424,8295407,0,0x0,8
tick,0x7ffdf681f424,8297487,0,0x0,8
tick,0x7ffdf681f424,8299611,0,0x0,8
tick,0x7ffdf681f424,8301642,0,0x0,8
tick,0x7ffdf681f424,8303699,0,0x0,8
tick,0x7ffdf681f424,8305720,0,0x0,8
tick,0x7ffdf681f424,8307618,0,0x0,8
tick,0x7ffdf681f424,8309719,0,0x0,8
tick,0x7ffdf681f424,8311661,0,0x0,8
tick,0x7ffdf681f424,8313725,0,0x0,8
tick,0x7ffdf681f424,8315696,0,0x0,8
tick,0x7ffdf681f424,8317711,0,0x0,8
tick,0x7ffdf681f424,8319777,0,0x0,8
tick,0x7ffdf681f424,8321736,0,0x0,8
tick,0x7ffdf681f424,8323826,0,0x0,8
tick,0x7ffdf681f424,8325889,0,0x0,8
tick,0x7ffdf681f424,8327815,0,0x0,8
tick,0x7ffdf681f424,8329829,0,0x0,8
tick,0x7ffdf681f424,8331796,0,0x0,8
tick,0x7ffdf681f424,8333871,0,0x0,8
tick,0x7ffdf681f424,8335965,0,0x0,8
tick,0x7ffdf681f424,8338014,0,0x0,8
tick,0x7ffdf681f424,8339987,0,0x0,8
tick,0x7ffdf681f424,8342053,0,0x0,8
tick,0x7ffdf681f424,8344103,0,0x0,8
tick,0x7ffdf681f424,8346128,0,0x0,8
tick,0x7ffdf681f424,8348171,0,0x0,8
tick,0x7ffdf681f424,8350072,0,0x0,8
tick,0x7ffdf681f424,8352092,0,0x0,8
tick,0x7ffdf681f424,8354181,0,0x0,8
tick,0x7ffdf681f424,8356291,0,0x0,8
tick,0x7ffdf681f424,8358229,0,0x0,8
tick,0x7ffdf681f424,8360221,0,0x0,8
tick,0x7ffdf681f424,8362236,0,0x0,8
tick,0x7ffdf681f424,8364243,0,0x0,8
tick,0x7ffdf681f424,8366174,0,0x0,8
tick,0x7ffdf681f424,8368277,0,0x0,8
tick,0x7ffdf681f424,8370217,0,0x0,8
tick,0x7ffdf681f424,8372243,0,0x0,8
tick,0x7ffdf681f424,8374298,0,0x0,8
tick,0x7ffdf681f424,8376271,0,0x0,8
tick,0x7ffdf681f424,8378385,0,0x0,8
tick,0x7ffdf681f424,8380338,0,0x0,8
tick,0x7ffdf681f424,8382371,0,0x0,8
tick,0x7ffdf681f424,8384362,0,0x0,8
tick,0x7ffdf681f424,8386340,0,0x0,8
tick,0x7ffdf681f424,8388359,0,0x0,8
tick,0x7ffdf681f424,8390293,0,0x0,8
tick,0x7ffdf681f424,8392327,0,0x0,8
tick,0x7ffdf681f424,8394319,0,0x0,8
tick,0x7ffdf681f424,8396278,0,0x0,8
tick,0x7ffdf681f424,8398385,0,0x0,8
tick,0x7ffdf681f424,8400488,0,0x0,8
tick,0x7ffdf681f424,8402493,0,0x0,8
tick,0x7ffdf681f424,8404441,0,0x0,8
tick,0x7ffdf681f424,8406561,0,0x0,8
tick,0x7ffdf681f424,8408633,0,0x0,8
tick,0x7ffdf681f424,8410720,0,0x0,8
tick,0x7ffdf681f424,8412758,0,0x0,8
tick,0x7ffdf681f424,8414757,0,0x0,8
tick,0x7ffdf681f424,8416842,0,0x0,8
tick,0x7ffdf681f424,8418000,0,0x0,8
tick,0x7ffdf681f424,8419990,0,0x0,8
tick,0x7ffdf681f424,8422007,0,0x0,8
tick,0x7ffdf681f424,8423967,0,0x0,8
tick,0x7ffdf681f424,8425989,0,0x0,8
tick,0x7ffdf681f424,8427987,0,0x0,8
tick,0x7ffdf681f424,8429988,0,0x0,8
tick,0x7ffdf681f424,8431989,0,0x0,8
tick,0x7ffdf681f424,8433963,0,0x0,8
tick,0x7ffdf681f424,8435946,0,0x0,8
tick,0x7ffdf681f424,8437970,0,0x0,8
tick,0x7ffdf681f424,8439928,0,0x0,8
tick,0x7ffdf681f424,8441936,0,0x0,8
tick,0x7ffdf681f424,8443952,0,0x0,8
tick,0x7ffdf681f424,8445949,0,0x0,8
tick,0x7ffdf681f424,8447893,0,0x0,8
tick,0x7ffdf681f424,8449904,0,0x0,8
tick,0x7ffdf681f424,8451903,0,0x0,8
tick,0x7ffdf681f424,8453911,0,0x0,8
tick,0x7ffdf681f424,8455905,0,0x0,8
tick,0x7ffdf681f424,8457880,0,0x0,8
tick,0x7ffdf681f424,8459873,0,0x0,8
tick,0x7ffdf681f424,8461868,0,0x0,8
tick,0x7ffdf681f424,8463865,0,0x0,8
tick,0x7ffdf681f424,8465846,0,0x0,8
tick,0x7ffdf681f424,8467859,0,0x0,8
tick,0x7ffdf681f424,8469848,0,0x0,8
tick,0x7ffdf681f424,8471831,0,0x0,8
tick,0x7ffdf681f424,8473824,0,0x0,8
tick,0x7ffdf681f424,8475853,0,0x0,8
tick,0x7ffdf681f424,8477834,0,0x0,8
tick,0x7ffdf681f424,8479826,0,0x0,8
tick,0x7ffdf681f424,8481811,0,0x0,8
tick,0x7ffdf681f424,8483808,0,0x0,8
tick,0x7ffdf681f424,8485804,0,0x0,8
tick,0x7ffdf681f424,8487811,0,0x0,8
tick,0x7ffdf681f424,8489832,0,0x0,8
tick,0x7ffdf681f424,8491804,0,0x0,8
tick,0x7ffdf681f424,8493783,0,0x0,8
tick,0x7ffdf681f424,8495780,0,0x0,8
tick,0x7ffdf681f424,8497803,0,0x0,8
tick,0x7ffdf681f424,8499786,0,0x0,8
tick,0x7ffdf681f424,8501771,0,0x0,8
tick,0x7ffdf681f424,8503760,0,0x0,8
tick,0x7ffdf681f424,8505753,0,0x0,8
tick,0x7ffdf681f424,8507757,0,0x0,8
tick,0x7ffdf681f424,8509751,0,0x0,8
tick,0x7ffdf681f424,8511759,0,0x0,8
tick,0x7ffdf681f424,8513730,0,0x0,8
tick,0x7ffdf681f424,8515704,0,0x0,8
tick,0x7ffdf681f424,8517767,0,0x0,8
tick,0x7ffdf681f424,8519701,0,0x0,8
tick,0x7ffdf681f424,8521723,0,0x0,8
tick,0x7ffdf681f424,8523814,0,0x0,8
tick,0x7ffdf681f424,8525732,0,0x0,8
tick,0x7ffdf681f424,8527695,0,0x0,8
tick,0x7ffdf681f424,8529708,0,0x0,8
tick,0x7ffdf681f424,8531691,0,0x0,8
tick,0x7ffdf681f424,8533676,0,0x0,8
tick,0x7ffdf681f424,8535675,0,0x0,8
tick,0x7ffdf681f424,8537666,0,0x0,8
tick,0x7ffdf681f424,8539689,0,0x0,8
tick,0x7ffdf681f424,8541709,0,0x0,8
tick,0x7ffdf681f424,8543691,0,0x0,8
tick,0x7ffdf681f424,8545662,0,0x0,8
tick,0x7ffdf681f424,8547681,0,0x0,8
tick,0x7ffdf681f424,8549653,0,0x0,8
tick,0x7ffdf681f424,8551627,0,0x0,8
tick,0x7ffdf681f424,8553698,0,0x0,8
tick,0x7ffdf681f424,8555650,0,0x0,8
tick,0x7ffdf681f424,8557607,0,0x0,8
tick,0x7ffdf681f424,8559611,0,0x0,8
tick,0x7ffdf681f424,8561603,0,0x0,8
tick,0x7ffdf681f424,8563616,0,0x0,8
tick,0x7ffdf681f424,8565610,0,0x0,8
tick,0x7ffdf681f424,8567594,0,0x0,8
tick,0x7ffdf681f424,8569580,0,0x0,8
tick,0x7ffdf681f424,8571577,0,0x0,8
tick,0x7ffdf681f424,8573563,0,0x0,8
tick,0x7ffdf681f424,8575550,0,0x0,8
tick,0x7ffdf681f424,8577570,0,0x0,8
tick,0x7ffdf681f424,8579575,0,0x0,8
tick,0x7ffdf681f424,8581550,0,0x0,8
tick,0x7ffdf681f424,8583543,0,0x0,8
tick,0x7ffdf681f424,8585573,0,0x0,8
tick,0x7ffdf681f424,8587550,0,0x0,8
tick,0x7ffdf681f424,8589523,0,0x0,8
tick,0x7ffdf681f424,8591521,0,0x0,8
tick,0x7ffdf681f424,8593542,0,0x0,8
tick,0x7ffdf681f424,8595536,0,0x0,8
tick,0x7ffdf681f424,8597532,0,0x0,8
tick,0x7ffdf681f424,8599468,0,0x0,8
tick,0x7ffdf681f424,8601508,0,0x0,8
tick,0x7ffdf681f424,8603404,0,0x0,8
tick,0x7ffdf681f424,8605520,0,0x0,8
tick,0x7ffdf681f424,8607427,0,0x0,8
tick,0x7ffdf681f424,8609543,0,0x0,8
tick,0x7ffdf681f424,8610765,0,0x0,8
tick,0x7ffdf681f424,8611954,0,0x0,8
tick,0x7ffdf681f424,8613190,0,0x0,8
tick,0x7ffdf681f424,8614388,0,0x0,8
tick,0x7ffdf681f424,8615530,0,0x0,8
tick,0x7ffdf681f424,8617570,0,0x0,8
tick,0x7ffdf681f424,8619591,0,0x0,8
tick,0x7ffdf681f424,8621553,0,0x0,8
tick,0x7ffdf681f424,8623528,0,0x0,8
tick,0x7ffdf681f424,8625509,0,0x0,8
tick,0x7ffdf681f424,8627556,0,0x0,8
tick,0x7ffdf681f424,8629566,0,0x0,8
tick,0x7ffdf681f424,8631528,0,0x0,8
tick,0x7ffdf681f424,8633555,0,0x0,8
tick,0x7ffdf681f424,8635470,0,0x0,8
tick,0x7ffdf681f424,8637465,0,0x0,8
tick,0x7ffdf681f424,8639457,0,0x0,8
tick,0x7ffdf681f424,8641454,0,0x0,8
tick,0x7ffdf681f424,8643445,0,0x0,8
tick,0x7ffdf681f424,8645437,0,0x0,8
tick,0x7ffdf681f424,8647426,0,0x0,8
tick,0x7ffdf681f424,8649517,0,0x0,8
tick,0x7ffdf681f424,8651414,0,0x0,8
tick,0x7ffdf681f424,8653462,0,0x0,8
tick,0x7ffdf681f424,8655404,0,0x0,8
tick,0x7ffdf681f424,8657398,0,0x0,8
tick,0x7ffdf681f424,8659396,0,0x0,8
tick,0x7ffdf681f424,8661385,0,0x0,8
tick,0x7ffdf681f424,8663380,0,0x0,8
tick,0x7ffdf681f424,8665375,0,0x0,8
tick,0x7ffdf681f424,8667386,0,0x0,8
tick,0x7ffdf681f424,8669372,0,0x0,8
tick,0x7ffdf681f424,8671436,0,0x0,8
tick,0x7ffdf681f424,8673348,0,0x0,8
tick,0x7ffdf681f424,8675349,0,0x0,8
tick,0x7ffdf681f424,8677420,0,0x0,8
tick,0x7ffdf681f424,8679383,0,0x0,8
tick,0x7ffdf681f424,8681378,0,0x0,8
tick,0x7ffdf681f424,8683409,0,0x0,8
tick,0x7ffdf681f424,8685413,0,0x0,8
tick,0x7ffdf681f424,8687377,0,0x0,8
tick,0x7ffdf681f424,8689407,0,0x0,8
tick,0x7ffdf681f424,8691373,0,0x0,8
tick,0x7ffdf681f424,8693365,0,0x0,8
tick,0x7ffdf681f424,8695365,0,0x0,8
tick,0x7ffdf681f424,8697345,0,0x0,8
tick,0x7ffdf681f424,8699373,0,0x0,8
tick,0x7ffdf681f424,8701325,0,0x0,8
tick,0x7ffdf681f424,8703332,0,0x0,8
tick,0x7ffdf681f424,8705325,0,0x0,8
tick,0x7ffdf681f424,8707324,0,0x0,8
tick,0x7ffdf681f424,8709314,0,0x0,8
tick,0x7ffdf681f424,8711297,0,0x0,8
tick,0x7ffdf681f424,8713301,0,0x0,8
tick,0x7ffdf681f424,8715324,0,0x0,8
tick,0x7ffdf681f424,8717310,0,0x0,8
tick,0x7ffdf681f424,8719309,0,0x0,8
tick,0x7ffdf681f424,8721283,0,0x0,8
tick,0x7ffdf681f424,8723285,0,0x0,8
tick,0x7ffdf681f424,8725275,0,0x0,8
tick,0x7ffdf681f424,8727269,0,0x0,8
tick,0x7ffdf681f424,8729283,0,0x0,8
tick,0x7ffdf681f424,8731282,0,0x0,8
tick,0x7ffdf681f424,8733252,0,0x0,8
tick,0x7ffdf681f424,8735267,0,0x0,8
tick,0x7ffdf681f424,8737262,0,0x0,8
tick,0x7ffdf681f424,8739257,0,0x0,8
tick,0x7ffdf681f424,8741283,0,0x0,8
tick,0x7ffdf681f424,8743279,0,0x0,8
tick,0x7ffdf681f424,8745251,0,0x0,8
tick,0x7ffdf681f424,8747272,0,0x0,8
tick,0x7ffdf681f424,8749215,0,0x0,8
tick,0x7ffdf681f424,8751144,0,0x0,8
tick,0x7ffdf681f424,8753168,0,0x0,8
tick,0x7ffdf681f424,8755185,0,0x0,8
tick,0x7ffdf681f424,8757112,0,0x0,8
tick,0x7ffdf681f424,8759149,0,0x0,8
tick,0x7ffdf681f424,8761186,0,0x0,8
tick,0x7ffdf681f424,8763137,0,0x0,8
tick,0x7ffdf681f424,8765120,0,0x0,8
tick,0x7ffdf681f424,8767118,0,0x0,8
tick,0x7ffdf681f424,8769184,0,0x0,8
tick,0x7ffdf681f424,8771118,0,0x0,8
tick,0x7ffdf681f424,8773101,0,0x0,8
tick,0x7ffdf681f424,8775090,0,0x0,8
tick,0x7ffdf681f424,8777087,0,0x0,8
tick,0x7ffdf681f424,8779071,0,0x0,8
tick,0x7ffdf681f424,8781076,0,0x0,8
tick,0x7ffdf681f424,8783066,0,0x0,8
tick,0x7ffdf681f424,8785061,0,0x0,8
tick,0x7ffdf681f424,8787055,0,0x0,8
tick,0x7ffdf681f424,8789055,0,0x0,8
tick,0x7ffdf681f424,8791045,0,0x0,8
tick,0x7ffdf681f424,8792954,0,0x0,8
tick,0x7ffdf681f424,8794989,0,0x0,8
tick,0x7ffdf681f424,8797028,0,0x0,8
tick,0x7ffdf681f424,8798947,0,0x0,8
tick,0x7ffdf681f424,8800101,0,0x0,8
tick,0x7ffdf681f424,8802117,0,0x0,8
tick,0x7ffdf681f424,8804080,0,0x0,8
tick,0x7ffdf681f424,8806065,0,0x0,8
tick,0x7ffdf681f424,8808042,0,0x0,8
tick,0x7ffdf681f424,8810042,0,0x0,8
tick,0x7ffdf681f424,8812058,0,0x0,8
tick,0x7ffdf681f424,8813164,0,0x0,8
tick,0x7ffdf681f424,8815200,0,0x0,8
tick,0x7ffdf681f424,8816337,0,0x0,8
tick,0x7ffdf681f424,8818400,0,0x0,8
tick,0x7ffdf681f424,8820403,0,0x0,8
tick,0x7ffdf681f424,8822439,0,0x0,8
tick,0x7ffdf681f424,8824420,0,0x0,8
tick,0x7ffdf681f424,8826305,0,0x0,8
tick,0x7ffdf681f424,8828295,0,0x0,8
tick,0x7ffdf681f424,8830384,0,0x0,8
tick,0x7ffdf681f424,8832326,0,0x0,8
tick,0x7ffdf681f424,8834356,0,0x0,8
tick,0x7ffdf681f424,8836342,0,0x0,8
tick,0x7ffdf681f424,8838342,0,0x0,8
tick,0x7ffdf681f424,8840358,0,0x0,8
tick,0x7ffdf681f424,8842327,0,0x0,8
tick,0x7ffdf681f424,8844312,0,0x0,8
tick,0x7ffdf681f424,8846307,0,0x0,8
tick,0x7ffdf681f424,8848321,0,0x0,8
tick,0x7ffdf681f424,8850299,0,0x0,8
tick,0x7ffdf681f424,8852336,0,0x0,8
tick,0x7ffdf681f424,8854380,0,0x0,8
tick,0x7ffdf681f424,8856309,0,0x0,8
tick,0x7ffdf681f424,8858294,0,0x0,8
tick,0x7ffdf681f424,8860286,0,0x0,8
tick,0x7ffdf681f424,8862365,0,0x0,8
tick,0x7ffdf681f424,8864318,0,0x0,8
tick,0x7ffdf681f424,8866312,0,0x0,8
tick,0x7ffdf681f424,8868361,0,0x0,8
tick,0x7ffdf681f424,8870315,0,0x0,8
tick,0x7ffdf681f424,8872278,0,0x0,8
tick,0x7ffdf681f424,8874328,0,0x0,8
tick,0x7ffdf681f424,8876306,0,0x0,8
tick,0x7ffdf681f424,8878282,0,0x0,8
tick,0x7ffdf681f424,8880251,0,0x0,8
tick,0x7ffdf681f424,8882253,0,0x0,8
tick,0x7ffdf681f424,8884264,0,0x0,8
tick,0x7ffdf681f424,8886282,0,0x0,8
tick,0x7ffdf681f424,8888281,0,0x0,8
tick,0x7ffdf681f424,8890274,0,0x0,8
tick,0x7ffdf681f424,8892216,0,0x0,8
tick,0x7ffdf681f424,8894239,0,0x0,8
tick,0x7ffdf681f424,8896231,0,0x0,8
tick,0x7ffdf681f424,8898276,0,0x0,8
tick,0x7ffdf681f424,8900258,0,0x0,8
tick,0x7ffdf681f424,8902246,0,0x0,8
tick,0x7ffdf681f424,8904220,0,0x0,8
tick,0x7ffdf681f424,8906201,0,0x0,8
tick,0x7ffdf681f424,8908207,0,0x0,8
tick,0x7ffdf681f424,8910207,0,0x0,8
tick,0x7ffdf681f424,8912211,0,0x0,8
tick,0x7ffdf681f424,8914200,0,0x0,8
tick,0x7ffdf681f424,8916173,0,0x0,8
tick,0x7ffdf681f424,8918232,0,0x0,8
tick,0x7ffdf681f424,8920231,0,0x0,8
tick,0x7ffdf681f424,8922210,0,0x0,8
tick,0x7ffdf681f424,8924043,0,0x0,8
tick,0x7ffdf681f424,8926135,0,0x0,8
tick,0x7ffdf681f424,8928022,0,0x0,8
tick,0x7ffdf681f424,8930010,0,0x0,8
tick,0x7ffdf681f424,8932100,0,0x0,8
tick,0x7ffdf681f424,8934130,0,0x0,8
tick,0x7ffdf681f424,8936107,0,0x0,8
tick,0x7ffdf681f424,8938103,0,0x0,8
tick,0x7ffdf681f424,8940106,0,0x0,8
tick,0x7ffdf681f424,8942166,0,0x0,8
tick,0x7ffdf681f424,8944129,0,0x0,8
tick,0x7ffdf681f424,8946099,0,0x0,8
tick,0x7ffdf681f424,8948087,0,0x0,8
tick,0x7ffdf681f424,8950085,0,0x0,8
tick,0x7ffdf681f424,8952073,0,0x0,8
tick,0x7ffdf681f424,8954066,0,0x0,8
tick,0x7ffdf681f424,8956072,0,0x0,8
tick,0x7ffdf681f424,8958088,0,0x0,8
tick,0x7ffdf681f424,8960059,0,0x0,8
tick,0x7ffdf681f424,8962050,0,0x0,8
tick,0x7ffdf681f424,8964059,0,0x0,8
tick,0x7ffdf681f424,8966055,0,0x0,8
tick,0x7ffdf681f424,8968034,0,0x0,8
tick,0x7ffdf681f424,8970028,0,0x0,8
tick,0x7ffdf681f424,8972026,0,0x0,8
tick,0x7ffdf681f424,8973922,0,0x0,8
tick,0x7ffdf681f424,8976003,0,0x0,8
tick,0x7ffdf681f424,8978028,0,0x0,8
tick,0x7ffdf681f424,8979896,0,0x0,8
tick,0x7ffdf681f424,8981897,0,0x0,8
tick,0x7ffdf681f424,8984021,0,0x0,8
tick,0x7ffdf681f424,8986002,0,0x0,8
tick,0x7ffdf681f424,8987883,0,0x0,8
tick,0x7ffdf681f424,8989960,0,0x0,8
tick,0x7ffdf681f424,8991912,0,0x0,8
tick,0x7ffdf681f424,8993960,0,0x0,8
tick,0x7ffdf681f424,8995966,0,0x0,8
tick,0x7ffdf681f424,8997945,0,0x0,8
tick,0x7ffdf681f424,8999943,0,0x0,8
tick,0x7ffdf681f424,9001940,0,0x0,8
tick,0x7ffdf681f424,9003905,0,0x0,8
tick,0x7ffdf681f424,9005924,0,0x0,8
tick,0x7ffdf681f424,9007997,0,0x0,8
tick,0x7ffdf681f424,9009943,0,0x0,8
tick,0x7ffdf681f424,9011912,0,0x0,8
tick,0x7ffdf681f424,9013910,0,0x0,8
tick,0x7ffdf681f424,9015887,0,0x0,8
tick,0x7ffdf681f424,9017900,0,0x0,8
tick,0x7ffdf681f424,9019892,0,0x0,8
tick,0x7ffdf681f424,9021887,0,0x0,8
tick,0x7ffdf681f424,9023801,0,0x0,8
tick,0x7ffdf681f424,9025876,0,0x0,8
tick,0x7ffdf681f424,9027866,0,0x0,8
tick,0x7ffdf681f424,9029889,0,0x0,8
tick,0x7ffdf681f424,9031887,0,0x0,8
tick,0x7ffdf681f424,9033857,0,0x0,8
tick,0x7ffdf681f424,9035855,0,0x0,8
tick,0x7ffdf681f424,9037851,0,0x0,8
tick,0x7ffdf681f424,9039847,0,0x0,8
tick,0x7ffdf681f424,9041837,0,0x0,8
tick,0x7ffdf681f424,9043842,0,0x0,8
tick,0x7ffdf681f424,9045829,0,0x0,8
tick,0x7ffdf681f424,9047745,0,0x0,8
tick,0x7ffdf681f424,9049648,0,0x0,8
tick,0x7ffdf681f424,9051769,0,0x0,8
tick,0x7ffdf681f424,9053617,0,0x0,8
tick,0x7ffdf681f424,9055674,0,0x0,8
tick,0x7ffdf681f424,9057718,0,0x0,8
tick,0x7ffdf681f424,9059632,0,0x0,8
tick,0x7ffdf681f424,9061596,0,0x0,8
tick,0x7ffdf681f424,9063592,0,0x0,8
tick,0x7ffdf681f424,9065604,0,0x0,8
tick,0x7ffdf681f424,9067578,0,0x0,8
tick,0x7ffdf681f424,9069570,0,0x0,8
tick,0x7ffdf681f424,9071588,0,0x0,8
tick,0x7ffdf681f424,9073584,0,0x0,8
tick,0x7ffdf681f424,9075605,0,0x0,8
tick,0x7ffdf681f424,9077604,0,0x0,8
tick,0x7ffdf681f424,9079563,0,0x0,8
tick,0x7ffdf681f424,9081608,0,0x0,8
tick,0x7ffdf681f424,9083662,0,0x0,8
tick,0x7ffdf681f424,9085550,0,0x0,8
tick,0x7ffdf681f424,9087613,0,0x0,8
tick,0x7ffdf681f424,9089687,0,0x0,8
tick,0x7ffdf681f424,9091700,0,0x0,8
tick,0x7ffdf681f424,9093702,0,0x0,8
tick,0x7ffdf681f424,9095702,0,0x0,8
tick,0x7ffdf681f424,9097701,0,0x0,8
tick,0x7ffdf681f424,9099578,0,0x0,8
tick,0x7ffdf681f424,9101570,0,0x0,8
tick,0x7ffdf681f424,9103520,0,0x0,8
tick,0x7ffdf681f424,9105580,0,0x0,8
tick,0x7ffdf681f424,9107513,0,0x0,8
tick,0x7ffdf681f424,9109572,0,0x0,8
tick,0x7ffdf681f424,9111484,0,0x0,8
tick,0x7ffdf681f424,9113589,0,0x0,8
tick,0x7ffdf681f424,9115496,0,0x0,8
tick,0x7ffdf681f424,9117555,0,0x0,8
tick,0x7ffdf681f424,9119597,0,0x0,8
tick,0x7ffdf681f424,9121638,0,0x0,8
tick,0x7ffdf681f424,9123538,0,0x0,8
tick,0x7ffdf681f424,9125521,0,0x0,8
tick,0x7ffdf681f424,9127519,0,0x0,8
tick,0x7ffdf681f424,9129456,0,0x0,8
tick,0x7ffdf681f424,9131477,0,0x0,8
tick,0x7ffdf681f424,9133447,0,0x0,8
tick,0x7ffdf681f424,9135448,0,0x0,8
tick,0x7ffdf681f424,9137458,0,0x0,8
tick,0x7ffdf681f424,9139463,0,0x0,8
tick,0x7ffdf681f424,9141445,0,0x0,8
tick,0x7ffdf681f424,9143483,0,0x0,8
tick,0x7ffdf681f424,9145485,0,0x0,8
tick,0x7ffdf681f424,9147592,0,0x0,8
tick,0x7ffdf681f424,9149622,0,0x0,8
tick,0x7ffdf681f424,9151590,0,0x0,8
tick,0x7ffdf681f424,9153548,0,0x0,8
tick,0x7ffdf681f424,9155570,0,0x0,8
tick,0x7ffdf681f424,9157419,0,0x0,8
tick,0x7ffdf681f424,9159419,0,0x0,8
tick,0x7ffdf681f424,9161423,0,0x0,8
tick,0x7ffdf681f424,9163374,0,0x0,8
tick,0x7ffdf681f424,9165361,0,0x0,8
tick,0x7ffdf681f424,9167358,0,0x0,8
tick,0x7ffdf681f424,9169331,0,0x0,8
tick,0x7ffdf681f424,9171362,0,0x0,8
tick,0x7ffdf681f424,9173323,0,0x0,8
tick,0x7ffdf681f424,9175335,0,0x0,8
tick,0x7ffdf681f424,9177318,0,0x0,8
tick,0x7ffdf681f424,9179407,0,0x0,8
tick,0x7ffdf681f424,9181447,0,0x0,8
tick,0x7ffdf681f424,9183395,0,0x0,8
tick,0x7ffdf681f424,9185375,0,0x0,8
tick,0x7ffdf681f424,9187399,0,0x0,8
tick,0x7ffdf681f424,9189399,0,0x0,8
tick,0x7ffdf681f424,9191374,0,0x0,8
tick,0x7ffdf681f424,9193366,0,0x0,8
tick,0x7ffdf681f424,9195384,0,0x0,8
tick,0x7ffdf681f424,9197392,0,0x0,8
tick,0x7ffdf681f424,9199335,0,0x0,8
tick,0x7ffdf681f424,9201417,0,0x0,8
tick,0x7ffdf681f424,9203406,0,0x0,8
tick,0x7ffdf681f424,9205279,0,0x0,8
tick,0x7ffdf681f424,9207287,0,0x0,8
tick,0x7ffdf681f424,9209277,0,0x0,8
tick,0x7ffdf681f424,9211430,0,0x0,8
tick,0x7ffdf681f424,9213255,0,0x0,8
tick,0x7ffdf681f424,9215225,0,0x0,8
tick,0x7ffdf681f424,9217213,0,0x0,8
tick,0x7ffdf681f424,9219209,0,0x0,8
tick,0x7ffdf681f424,9221169,0,0x0,8
tick,0x7ffdf681f424,9223186,0,0x0,8
tick,0x7ffdf681f424,9225224,0,0x0,8
tick,0x7ffdf681f424,9227196,0,0x0,8
tick,0x7ffdf681f424,9229188,0,0x0,8
tick,0x7ffdf681f424,9231158,0,0x0,8
tick,0x7ffdf681f424,9233151,0,0x0,8
tick,0x7ffdf681f424,9235203,0,0x0,8
tick,0x7ffdf681f424,9237259,0,0x0,8
tick,0x7ffdf681f424,9239268,0,0x0,8
tick,0x7ffdf681f424,9241234,0,0x0,8
tick,0x7ffdf681f424,9243247,0,0x0,8
tick,0x7ffdf681f424,9245229,0,0x0,8
tick,0x7ffdf681f424,9247273,0,0x0,8
tick,0x7ffdf681f424,9249221,0,0x0,8
tick,0x7ffdf681f424,9251222,0,0x0,8
tick,0x7ffdf681f424,9253212,0,0x0,8
tick,0x7ffdf681f424,9255253,0,0x0,8
tick,0x7ffdf681f424,9257228,0,0x0,8
tick,0x7ffdf681f424,9259206,0,0x0,8
tick,0x7ffdf681f424,9261206,0,0x0,8
tick,0x7ffdf681f424,9263187,0,0x0,8
tick,0x7ffdf681f424,9265184,0,0x0,8
tick,0x7ffdf681f424,9267199,0,0x0,8
tick,0x7ffdf681f424,9269173,0,0x0,8
tick,0x7ffdf681f424,9271165,0,0x0,8
tick,0x7ffdf681f424,9273157,0,0x0,8
tick,0x7ffdf681f424,9275139,0,0x0,8
tick,0x7ffdf681f424,9277148,0,0x0,8
tick,0x7ffdf681f424,9279171,0,0x0,8
tick,0x7ffdf681f424,9281130,0,0x0,8
tick,0x7ffdf681f424,9283138,0,0x0,8
tick,0x7ffdf681f424,9285147,0,0x0,8
tick,0x7ffdf681f424,9287127,0,0x0,8
tick,0x7ffdf681f424,9289111,0,0x0,8
tick,0x7ffdf681f424,9291117,0,0x0,8
tick,0x7ffdf681f424,9293092,0,0x0,8
tick,0x7ffdf681f424,9295096,0,0x0,8
tick,0x7ffdf681f424,9297095,0,0x0,8
tick,0x7ffdf681f424,9299096,0,0x0,8
tick,0x7ffdf681f424,9301114,0,0x0,8
tick,0x7ffdf681f424,9303059,0,0x0,8
tick,0x7ffdf681f424,9305066,0,0x0,8
tick,0x7ffdf681f424,9307064,0,0x0,8
tick,0x7ffdf681f424,9309047,0,0x0,8
tick,0x7ffdf681f424,9311061,0,0x0,8
tick,0x7ffdf681f424,9313045,0,0x0,8
tick,0x7ffdf681f424,9315089,0,0x0,8
tick,0x7ffdf681f424,9317005,0,0x0,8
tick,0x7ffdf681f424,9319026,0,0x0,8
tick,0x7ffdf681f424,9320997,0,0x0,8
tick,0x7ffdf681f424,9323053,0,0x0,8
tick,0x7ffdf681f424,9325011,0,0x0,8
tick,0x7ffdf681f424,9327011,0,0x0,8
tick,0x7ffdf681f424,9329011,0,0x0,8
tick,0x7ffdf681f424,9330999,0,0x0,8
tick,0x7ffdf681f424,9332994,0,0x0,8
tick,0x7ffdf681f424,9334986,0,0x0,8
tick,0x7ffdf681f424,9336981,0,0x0,8
tick,0x7ffdf681f424,9338976,0,0x0,8
tick,0x7ffdf681f424,9340979,0,0x0,8
tick,0x7ffdf681f424,9342963,0,0x0,8
tick,0x7ffdf681f424,9344968,0,0x0,8
tick,0x7ffdf681f424,9346960,0,0x0,8
tick,0x7ffdf681f424,9348958,0,0x0,8
tick,0x7ffdf681f424,9350949,0,0x0,8
tick,0x7ffdf681f424,9352928,0,0x0,8
tick,0x7ffdf681f424,9354935,0,0x0,8
tick,0x7ffdf681f424,9356930,0,0x0,8
tick,0x7ffdf681f424,9358925,0,0x0,8
tick,0x7ffdf681f424,9360916,0,0x0,8
tick,0x7ffdf681f424,9362913,0,0x0,8
tick,0x7ffdf681f424,9364928,0,0x0,8
tick,0x7ffdf681f424,9366943,0,0x0,8
tick,0x7ffdf681f424,9368925,0,0x0,8
tick,0x7ffdf681f424,9370907,0,0x0,8
tick,0x7ffdf681f424,9372907,0,0x0,8
tick,0x7ffdf681f424,9374891,0,0x0,8
tick,0x7ffdf681f424,9376887,0,0x0,8
tick,0x7ffdf681f424,9378879,0,0x0,8
tick,0x7ffdf681f424,9380876,0,0x0,8
tick,0x7ffdf681f424,9382873,0,0x0,8
tick,0x7ffdf681f424,9384866,0,0x0,8
tick,0x7ffdf681f424,9386854,0,0x0,8
tick,0x7ffdf681f424,9388878,0,0x0,8
tick,0x7ffdf681f424,9390850,0,0x0,8
tick,0x7ffdf681f424,9392832,0,0x0,8
tick,0x7ffdf681f424,9394810,0,0x0,8
tick,0x7ffdf681f424,9396829,0,0x0,8
tick,0x7ffdf681f424,9398834,0,0x0,8
tick,0x7ffdf681f424,9400821,0,0x0,8
tick,0x7ffdf681f424,9402815,0,0x0,8
tick,0x7ffdf681f424,9404810,0,0x0,8
tick,0x7ffdf681f424,9406796,0,0x0,8
tick,0x7ffdf681f424,9408797,0,0x0,8
tick,0x7ffdf681f424,9410751,0,0x0,8
tick,0x7ffdf681f424,9412785,0,0x0,8
tick,0x7ffdf681f424,9414784,0,0x0,8
tick,0x7ffdf681f424,9416778,0,0x0,8
tick,0x7ffdf681f424,9418769,0,0x0,8
tick,0x7ffdf681f424,9420784,0,0x0,8
tick,0x7ffdf681f424,9422773,0,0x0,8
tick,0x7ffdf681f424,9424768,0,0x0,8
tick,0x7ffdf681f424,9426773,0,0x0,8
tick,0x7ffdf681f424,9428746,0,0x0,8
tick,0x7ffdf681f424,9430743,0,0x0,8
tick,0x7ffdf681f424,9432765,0,0x0,8
tick,0x7ffdf681f424,9434727,0,0x0,8
tick,0x7ffdf681f424,9436730,0,0x0,8
tick,0x7ffdf681f424,9438727,0,0x0,8
tick,0x7ffdf681f424,9440715,0,0x0,8
tick,0x7ffdf681f424,9442710,0,0x0,8
tick,0x7ffdf681f424,9444708,0,0x0,8
tick,0x7ffdf681f424,9446703,0,0x0,8
tick,0x7ffdf681f424,9448703,0,0x0,8
tick,0x7ffdf681f424,9450659,0,0x0,8
tick,0x7ffdf681f424,9452678,0,0x0,8
tick,0x7ffdf681f424,9454692,0,0x0,8
tick,0x7ffdf681f424,9456682,0,0x0,8
tick,0x7ffdf681f424,9458664,0,0x0,8
tick,0x7ffdf681f424,9460660,0,0x0,8
tick,0x7ffdf681f424,9462654,0,0x0,8
tick,0x7ffdf681f424,9464649,0,0x0,8
tick,0x7ffdf681f424,9466644,0,0x0,8
tick,0x7ffdf681f424,9468637,0,0x0,8
tick,0x7ffdf681f424,9470634,0,0x0,8
tick,0x7ffdf681f424,9472625,0,0x0,8
tick,0x7ffdf681f424,9474637,0,0x0,8
tick,0x7ffdf681f424,9476651,0,0x0,8
tick,0x7ffdf681f424,9478618,0,0x0,8
tick,0x7ffdf681f424,9480610,0,0x0,8
tick,0x7ffdf681f424,9482598,0,0x0,8
tick,0x7ffdf681f424,9484598,0,0x0,8
tick,0x7ffdf681f424,9486596,0,0x0,8
tick,0x7ffdf681f424,9488589,0,0x0,8
tick,0x7ffdf681f424,9490582,0,0x0,8
tick,0x7ffdf681f424,9492592,0,0x0,8
tick,0x7ffdf681f424,9494578,0,0x0,8
tick,0x7ffdf681f424,9496560,0,0x0,8
tick,0x7ffdf681f424,9498591,0,0x0,8
tick,0x7ffdf681f424,9500559,0,0x0,8
tick,0x7ffdf681f424,9502543,0,0x0,8
tick,0x7ffdf681f424,9504539,0,0x0,8
tick,0x7ffdf681f424,9506537,0,0x0,8
tick,0x7ffdf681f424,9508520,0,0x0,8
tick,0x7ffdf681f424,9510535,0,0x0,8
tick,0x7ffdf681f424,9512529,0,0x0,8
tick,0x7ffdf681f424,9514518,0,0x0,8
tick,0x7ffdf681f424,9516442,0,0x0,8
tick,0x7ffdf681f424,9518432,0,0x0,8
tick,0x7ffdf681f424,9520423,0,0x0,8
tick,0x7ffdf681f424,9522501,0,0x0,8
tick,0x7ffdf681f424,9524468,0,0x0,8
tick,0x7ffdf681f424,9526466,0,0x0,8
tick,0x7ffdf681f424,9528479,0,0x0,8
tick,0x7ffdf681f424,9530451,0,0x0,8
tick,0x7ffdf681f424,9532455,0,0x0,8
tick,0x7ffdf681f424,9534434,0,0x0,8
tick,0x7ffdf681f424,9536414,0,0x0,8
tick,0x7ffdf681f424,9538419,0,0x0,8
tick,0x7ffdf681f424,9540457,0,0x0,8
tick,0x7ffdf681f424,9542488,0,0x0,8
tick,0x7ffdf681f424,9544461,0,0x0,8
tick,0x7ffdf681f424,9546460,0,0x0,8
tick,0x7ffdf681f424,9548504,0,0x0,8
tick,0x7ffdf681f424,9550544,0,0x0,8
tick,0x7ffdf681f424,9552432,0,0x0,8
tick,0x7ffdf681f424,9554412,0,0x0,8
tick,0x7ffdf681f424,9556461,0,0x0,8
tick,0x7ffdf681f424,9558386,0,0x0,8
tick,0x7ffdf681f424,9560394,0,0x0,8
tick,0x7ffdf681f424,9562336,0,0x0,8
tick,0x7ffdf681f424,9564307,0,0x0,8
tick,0x7ffdf681f424,9566401,0,0x0,8
tick,0x7ffdf681f424,9568293,0,0x0,8
tick,0x7ffdf681f424,9570302,0,0x0,8
tick,0x7ffdf681f424,9572295,0,0x0,8
tick,0x7ffdf681f424,9574331,0,0x0,8
tick,0x7ffdf681f424,9576345,0,0x0,8
tick,0x7ffdf681f424,9578416,0,0x0,8
tick,0x7ffdf681f424,9580406,0,0x0,8
tick,0x7ffdf681f424,9582276,0,0x0,8
tick,0x7ffdf681f424,9584398,0,0x0,8
tick,0x7ffdf681f424,9586349,0,0x0,8
tick,0x7ffdf681f424,9588360,0,0x0,8
tick,0x7ffdf681f424,9590454,0,0x0,8
tick,0x7ffdf681f424,9592364,0,0x0,8
tick,0x7ffdf681f424,9594357,0,0x0,8
tick,0x7ffdf681f424,9596352,0,0x0,8
tick,0x7ffdf681f424,9598279,0,0x0,8
tick,0x7ffdf681f424,9600354,0,0x0,8
tick,0x7ffdf681f424,9602335,0,0x0,8
tick,0x7ffdf681f424,9604276,0,0x0,8
tick,0x7ffdf681f424,9606249,0,0x0,8
tick,0x7ffdf681f424,9608184,0,0x0,8
tick,0x7ffdf681f424,9610254,0,0x0,8
tick,0x7ffdf681f424,9612253,0,0x0,8
tick,0x7ffdf681f424,9614224,0,0x0,8
tick,0x7ffdf681f424,9616247,0,0x0,8
tick,0x7ffdf681f424,9618193,0,0x0,8
tick,0x7ffdf681f424,9620247,0,0x0,8
tick,0x7ffdf681f424,9622165,0,0x0,8
tick,0x7ffdf681f424,9624184,0,0x0,8
tick,0x7ffdf681f424,9626102,0,0x0,8
tick,0x7ffdf681f424,9628115,0,0x0,8
tick,0x7ffdf681f424,9630180,0,0x0,8
tick,0x7ffdf681f424,9632213,0,0x0,8
tick,0x7ffdf681f424,9634205,0,0x0,8
tick,0x7ffdf681f424,9636193,0,0x0,8
tick,0x7ffdf681f424,9638188,0,0x0,8
tick,0x7ffdf681f424,9640179,0,0x0,8
tick,0x7ffdf681f424,9642166,0,0x0,8
tick,0x7ffdf681f424,9644164,0,0x0,8
tick,0x7ffdf681f424,9646162,0,0x0,8
tick,0x7ffdf681f424,9648159,0,0x0,8
tick,0x7ffdf681f424,9650130,0,0x0,8
tick,0x7ffdf681f424,9652052,0,0x0,8
tick,0x7ffdf681f424,9654042,0,0x0,8
tick,0x7ffdf681f424,9656094,0,0x0,8
tick,0x7ffdf681f424,9658085,0,0x0,8
tick,0x7ffdf681f424,9660106,0,0x0,8
tick,0x7ffdf681f424,9662089,0,0x0,8
tick,0x7ffdf681f424,9664080,0,0x0,8
tick,0x7ffdf681f424,9666079,0,0x0,8
tick,0x7ffdf681f424,9668063,0,0x0,8
tick,0x7ffdf681f424,9670063,0,0x0,8
tick,0x7ffdf681f424,9672052,0,0x0,8
tick,0x7ffdf681f424,9674003,0,0x0,8
tick,0x7ffdf681f424,9676048,0,0x0,8
tick,0x7ffdf681f424,9678076,0,0x0,8
tick,0x7ffdf681f424,9680049,0,0x0,8
tick,0x7ffdf681f424,9682086,0,0x0,8
tick,0x7ffdf681f424,9684135,0,0x0,8
tick,0x7ffdf681f424,9686056,0,0x0,8
tick,0x7ffdf681f424,9688052,0,0x0,8
tick,0x7ffdf681f424,9690071,0,0x0,8
tick,0x7ffdf681f424,9692046,0,0x0,8
tick,0x7ffdf681f424,9694038,0,0x0,8
tick,0x7ffdf681f424,9696035,0,0x0,8
tick,0x7ffdf681f424,9698028,0,0x0,8
tick,0x7ffdf681f424,9700067,0,0x0,8
tick,0x7ffdf681f424,9702016,0,0x0,8
tick,0x7ffdf681f424,9704017,0,0x0,8
tick,0x7ffdf681f424,9705988,0,0x0,8
tick,0x7ffdf681f424,9707991,0,0x0,8
tick,0x7ffdf681f424,9709983,0,0x0,8
tick,0x7ffdf681f424,9711978,0,0x0,8
tick,0x7ffdf681f424,9713978,0,0x0,8
tick,0x7ffdf681f424,9716005,0,0x0,8
tick,0x7ffdf681f424,9717964,0,0x0,8
tick,0x7ffdf681f424,9719968,0,0x0,8
tick,0x7ffdf681f424,9721933,0,0x0,8
tick,0x7ffdf681f424,9723959,0,0x0,8
tick,0x7ffdf681f424,9725942,0,0x0,8
tick,0x7ffdf681f424,9727966,0,0x0,8
tick,0x7ffdf681f424,9729933,0,0x0,8
tick,0x7ffdf681f424,9731926,0,0x0,8
tick,0x7ffdf681f424,9733915,0,0x0,8
tick,0x7ffdf681f424,9735801,0,0x0,8
tick,0x7ffdf681f424,9737856,0,0x0,8
tick,0x7ffdf681f424,9739820,0,0x0,8
tick,0x7ffdf681f424,9741855,0,0x0,8
tick,0x7ffdf681f424,9743772,0,0x0,8
tick,0x7ffdf681f424,9745845,0,0x0,8
tick,0x7ffdf681f424,9747839,0,0x0,8
tick,0x7ffdf681f424,9749845,0,0x0,8
tick,0x7ffdf681f424,9751899,0,0x0,8
tick,0x7ffdf681f424,9753909,0,0x0,8
tick,0x7ffdf681f424,9755939,0,0x0,8
tick,0x7ffdf681f424,9757882,0,0x0,8
tick,0x7ffdf681f424,9759857,0,0x0,8
tick,0x7ffdf681f424,9761867,0,0x0,8
tick,0x7ffdf681f424,9763858,0,0x0,8
tick,0x7ffdf681f424,9765852,0,0x0,8
tick,0x7ffdf681f424,9767845,0,0x0,8
tick,0x7ffdf681f424,9769863,0,0x0,8
tick,0x7ffdf681f424,9771831,0,0x0,8
tick,0x7ffdf681f424,9773825,0,0x0,8
tick,0x7ffdf681f424,9775851,0,0x0,8
tick,0x7ffdf681f424,9777829,0,0x0,8
tick,0x7ffdf681f424,9779837,0,0x0,8
tick,0x7ffdf681f424,9781801,0,0x0,8
tick,0x7ffdf681f424,9783809,0,0x0,8
tick,0x7ffdf681f424,9785794,0,0x0,8
tick,0x7ffdf681f424,9787791,0,0x0,8
tick,0x7ffdf681f424,9789779,0,0x0,8
tick,0x7ffdf681f424,9791806,0,0x0,8
tick,0x7ffdf681f424,9793804,0,0x0,8
tick,0x7ffdf681f424,9795806,0,0x0,8
tick,0x7ffdf681f424,9797765,0,0x0,8
tick,0x7ffdf681f424,9799782,0,0x0,8
tick,0x7ffdf681f424,9801799,0,0x0,8
tick,0x7ffdf681f424,9803689,0,0x0,8
tick,0x7ffdf681f424,9805767,0,0x0,8
tick,0x7ffdf681f424,9807783,0,0x0,8
tick,0x7ffdf681f424,9809700,0,0x0,8
tick,0x7ffdf681f424,9811722,0,0x0,8
tick,0x7ffdf681f424,9813722,0,0x0,8
tick,0x7ffdf681f424,9815742,0,0x0,8
tick,0x7ffdf681f424,9817739,0,0x0,8
tick,0x7ffdf681f424,9819725,0,0x0,8
tick,0x7ffdf681f424,9821720,0,0x0,8
tick,0x7ffdf681f424,9823773,0,0x0,8
tick,0x7ffdf681f424,9825653,0,0x0,8
tick,0x7ffdf681f424,9827643,0,0x0,8
tick,0x7ffdf681f424,9829687,0,0x0,8
tick,0x7ffdf681f424,9831664,0,0x0,8
tick,0x7ffdf681f424,9833673,0,0x0,8
tick,0x7ffdf681f424,9835684,0,0x0,8
tick,0x7ffdf681f424,9837677,0,0x0,8
tick,0x7ffdf681f424,9839665,0,0x0,8
tick,0x7ffdf681f424,9841685,0,0x0,8
tick,0x7ffdf681f424,9843668,0,0x0,8
tick,0x7ffdf681f424,9845664,0,0x0,8
tick,0x7ffdf681f424,9847667,0,0x0,8
tick,0x7ffdf681f424,9849636,0,0x0,8
tick,0x7ffdf681f424,9851587,0,0x0,8
tick,0x7ffdf681f424,9853608,0,0x0,8
tick,0x7ffdf681f424,9855563,0,0x0,8
tick,0x7ffdf681f424,9857591,0,0x0,8
tick,0x7ffdf681f424,9859615,0,0x0,8
tick,0x7ffdf681f424,9861592,0,0x0,8
tick,0x7ffdf681f424,9863583,0,0x0,8
tick,0x7ffdf681f424,9865557,0,0x0,8
tick,0x7ffdf681f424,9867550,0,0x0,8
tick,0x7ffdf681f424,9869529,0,0x0,8
tick,0x7ffdf681f424,9871515,0,0x0,8
tick,0x7ffdf681f424,9873539,0,0x0,8
tick,0x7ffdf681f424,9875524,0,0x0,8
tick,0x7ffdf681f424,9877558,0,0x0,8
tick,0x7ffdf681f424,9879553,0,0x0,8
tick,0x7ffdf681f424,9881486,0,0x0,8
tick,0x7ffdf681f424,9883481,0,0x0,8
tick,0x7ffdf681f424,9885506,0,0x0,8
tick,0x7ffdf681f424,9887504,0,0x0,8
tick,0x7ffdf681f424,9889469,0,0x0,8
tick,0x7ffdf681f424,9891507,0,0x0,8
tick,0x7ffdf681f424,9893489,0,0x0,8
tick,0x7ffdf681f424,9895480,0,0x0,8
tick,0x7ffdf681f424,9897467,0,0x0,8
tick,0x7ffdf681f424,9899475,0,0x0,8
tick,0x7ffdf681f424,9901500,0,0x0,8
tick,0x7ffdf681f424,9903522,0,0x0,8
tick,0x7ffdf681f424,9905369,0,0x0,8
tick,0x7ffdf681f424,9907476,0,0x0,8
tick,0x7ffdf681f424,9909441,0,0x0,8
tick,0x7ffdf681f424,9911441,0,0x0,8
tick,0x7ffdf681f424,9913385,0,0x0,8
tick,0x7ffdf681f424,9915503,0,0x0,8
tick,0x7ffdf681f424,9917440,0,0x0,8
tick,0x7ffdf681f424,9919421,0,0x0,8
tick,0x7ffdf681f424,9921424,0,0x0,8
tick,0x7ffdf681f424,9923421,0,0x0,8
tick,0x7ffdf681f424,9925390,0,0x0,8
tick,0x7ffdf681f424,9927358,0,0x0,8
tick,0x7ffdf681f424,9929368,0,0x0,8
tick,0x7ffdf681f424,9931350,0,0x0,8
tick,0x7ffdf681f424,9933447,0,0x0,8
tick,0x7ffdf681f424,9935311,0,0x0,8
tick,0x7ffdf681f424,9937419,0,0x0,8
tick,0x7ffdf681f424,9939391,0,0x0,8
tick,0x7ffdf681f424,9941431,0,0x0,8
tick,0x7ffdf681f424,9943422,0,0x0,8
tick,0x7ffdf681f424,9945265,0,0x0,8
tick,0x7ffdf681f424,9947381,0,0x0,8
tick,0x7ffdf681f424,9949293,0,0x0,8
tick,0x7ffdf681f424,9951325,0,0x0,8
tick,0x7ffdf681f424,9953358,0,0x0,8
tick,0x7ffdf681f424,9955344,0,0x0,8
tick,0x7ffdf681f424,9957208,0,0x0,8
tick,0x7ffdf681f424,9959367,0,0x0,8
tick,0x7ffdf681f424,9961365,0,0x0,8
tick,0x7ffdf681f424,9963293,0,0x0,8
tick,0x7ffdf681f424,9965250,0,0x0,8
tick,0x7ffdf681f424,9967212,0,0x0,8
tick,0x7ffdf681f424,9969291,0,0x0,8
tick,0x7ffdf681f424,9971268,0,0x0,8
tick,0x7ffdf681f424,9973279,0,0x0,8
tick,0x7ffdf681f424,9975263,0,0x0,8
tick,0x7ffdf681f424,9977259,0,0x0,8
tick,0x7ffdf681f424,9979287,0,0x0,8
tick,0x7ffdf681f424,9981309,0,0x0,8
tick,0x7ffdf681f424,9983220,0,0x0,8
tick,0x7ffdf681f424,9985304,0,0x0,8
tick,0x7ffdf681f424,9987274,0,0x0,8
tick,0x7ffdf681f424,9989293,0,0x0,8
tick,0x7ffdf681f424,9991218,0,0x0,8
tick,0x7ffdf681f424,9993265,0,0x0,8
tick,0x7ffdf681f424,9995281,0,0x0,8
tick,0x7ffdf681f424,9997253,0,0x0,8
tick,0x7ffdf681f424,9999164,0,0x0,8
tick,0x7ffdf681f424,10001260,0,0x0,8
tick,0x7ffdf681f424,10003264,0,0x0,8
tick,0x7ffdf681f424,10005277,0,0x0,8
tick,0x7ffdf681f424,10007145,0,0x0,8
tick,0x7ffdf681f424,10009307,0,0x0,8
tick,0x7ffdf681f424,10011225,0,0x0,8
tick,0x7ffdf681f424,10013232,0,0x0,8
tick,0x7ffdf681f424,10015213,0,0x0,8
tick,0x7ffdf681f424,10017222,0,0x0,8
tick,0x7ffdf681f424,10019203,0,0x0,8
tick,0x7ffdf681f424,10021216,0,0x0,8
tick,0x7ffdf681f424,10023211,0,0x0,8
tick,0x7ffdf681f424,10025200,0,0x0,8
tick,0x7ffdf681f424,10027201,0,0x0,8
tick,0x7ffdf681f424,10029178,0,0x0,8
tick,0x7ffdf681f424,10031213,0,0x0,8
tick,0x7ffdf681f424,10033190,0,0x0,8
tick,0x7ffdf681f424,10035158,0,0x0,8
tick,0x7ffdf681f424,10037178,0,0x0,8
tick,0x7ffdf681f424,10039170,0,0x0,8
tick,0x7ffdf681f424,10041181,0,0x0,8
tick,0x7ffdf681f424,10043157,0,0x0,8
tick,0x7ffdf681f424,10045168,0,0x0,8
tick,0x7ffdf681f424,10047161,0,0x0,8
tick,0x7ffdf681f424,10049142,0,0x0,8
tick,0x7ffdf681f424,10051103,0,0x0,8
tick,0x7ffdf681f424,10053007,0,0x0,8
tick,0x7ffdf681f424,10055058,0,0x0,8
tick,0x7ffdf681f424,10057037,0,0x0,8
tick,0x7ffdf681f424,10059130,0,0x0,8
tick,0x7ffdf681f424,10061100,0,0x0,8
tick,0x7ffdf681f424,10063045,0,0x0,8
tick,0x7ffdf681f424,10065083,0,0x0,8
tick,0x7ffdf681f424,10067054,0,0x0,8
tick,0x7ffdf681f424,10069082,0,0x0,8
tick,0x7ffdf681f424,10071048,0,0x0,8
tick,0x7ffdf681f424,10073052,0,0x0,8
tick,0x7ffdf681f424,10075054,0,0x0,8
tick,0x7ffdf681f424,10077025,0,0x0,8
tick,0x7ffdf681f424,10079018,0,0x0,8
tick,0x7ffdf681f424,10081049,0,0x0,8
tick,0x7ffdf681f424,10082990,0,0x0,8
tick,0x7ffdf681f424,10084951,0,0x0,8
tick,0x7ffdf681f424,10087055,0,0x0,8
tick,0x7ffdf681f424,10088998,0,0x0,8
tick,0x7ffdf681f424,10091036,0,0x0,8
tick,0x7ffdf681f424,10093029,0,0x0,8
tick,0x7ffdf681f424,10095011,0,0x0,8
tick,0x7ffdf681f424,10097011,0,0x0,8
tick,0x7ffdf681f424,10099018,0,0x0,8
tick,0x7ffdf681f424,10101009,0,0x0,8
tick,0x7ffdf681f424,10103009,0,0x0,8
tick,0x7ffdf681f424,10104982,0,0x0,8
tick,0x7ffdf681f424,10106978,0,0x0,8
tick,0x7ffdf681f424,10108979,0,0x0,8
tick,0x7ffdf681f424,10110937,0,0x0,8
tick,0x7ffdf681f424,10112971,0,0x0,8
tick,0x7ffdf681f424,10114958,0,0x0,8
tick,0x7ffdf681f424,10116944,0,0x0,8
tick,0x7ffdf681f424,10118948,0,0x0,8
tick,0x7ffdf681f424,10120942,0,0x0,8
tick,0x7ffdf681f424,10122968,0,0x0,8
tick,0x7ffdf681f424,10124903,0,0x0,8
tick,0x7ffdf681f424,10126976,0,0x0,8
tick,0x7ffdf681f424,10128896,0,0x0,8
tick,0x7ffdf681f424,10130916,0,0x0,8
tick,0x7ffdf681f424,10132895,0,0x0,8
tick,0x7ffdf681f424,10134910,0,0x0,8
tick,0x7ffdf681f424,10136879,0,0x0,8
tick,0x7ffdf681f424,10138945,0,0x0,8
tick,0x7ffdf681f424,10140895,0,0x0,8
tick,0x7ffdf681f424,10142868,0,0x0,8
tick,0x7ffdf681f424,10144871,0,0x0,8
tick,0x7ffdf681f424,10146894,0,0x0,8
tick,0x7ffdf681f424,10148869,0,0x0,8
tick,0x7ffdf681f424,10150865,0,0x0,8
tick,0x7ffdf681f424,10152847,0,0x0,8
tick,0x7ffdf681f424,10154878,0,0x0,8
tick,0x7ffdf681f424,10156845,0,0x0,8
tick,0x7ffdf681f424,10158849,0,0x0,8
tick,0x7ffdf681f424,10160764,0,0x0,8
tick,0x7ffdf681f424,10162738,0,0x0,8
tick,0x7ffdf681f424,10164770,0,0x0,8
tick,0x7ffdf681f424,10166723,0,0x0,8
tick,0x7ffdf681f424,10168749,0,0x0,8
tick,0x7ffdf681f424,10170720,0,0x0,8
tick,0x7ffdf681f424,10172738,0,0x0,8
tick,0x7ffdf681f424,10174706,0,0x0,8
tick,0x7ffdf681f424,10176711,0,0x0,8
tick,0x7ffdf681f424,10178695,0,0x0,8
tick,0x7ffdf681f424,10180700,0,0x0,8
tick,0x7ffdf681f424,10182671,0,0x0,8
tick,0x7ffdf681f424,10184721,0,0x0,8
tick,0x7ffdf681f424,10186650,0,0x0,8
tick,0x7ffdf681f424,10188706,0,0x0,8
tick,0x7ffdf681f424,10190643,0,0x0,8
tick,0x7ffdf681f424,10192688,0,0x0,8
tick,0x7ffdf681f424,10194652,0,0x0,8
tick,0x7ffdf681f424,10196654,0,0x0,8
tick,0x7ffdf681f424,10198637,0,0x0,8
tick,0x7ffdf681f424,10200676,0,0x0,8
tick,0x7ffdf681f424,10202663,0,0x0,8
tick,0x7ffdf681f424,10204670,0,0x0,8
tick,0x7ffdf681f424,10206615,0,0x0,8
tick,0x7ffdf681f424,10208608,0,0x0,8
tick,0x7ffdf681f424,10210617,0,0x0,8
tick,0x7ffdf681f424,10212642,0,0x0,8
tick,0x7ffdf681f424,10214665,0,0x0,8
tick,0x7ffdf681f424,10216649,0,0x0,8
tick,0x7ffdf681f424,10218687,0,0x0,8
tick,0x7ffdf681f424,10220658,0,0x0,8
tick,0x7ffdf681f424,10222687,0,0x0,8
tick,0x7ffdf681f424,10224666,0,0x0,8
tick,0x7ffdf681f424,10226644,0,0x0,8
tick,0x7ffdf681f424,10228653,0,0x0,8
tick,0x7ffdf681f424,10230647,0,0x0,8
tick,0x7ffdf681f424,10232636,0,0x0,8
tick,0x7ffdf681f424,10234606,0,0x0,8
tick,0x7ffdf681f424,10236651,0,0x0,8
tick,0x7ffdf681f424,10238624,0,0x0,8
tick,0x7ffdf681f424,10240619,0,0x0,8
tick,0x7ffdf681f424,10242615,0,0x0,8
tick,0x7ffdf681f424,10244629,0,0x0,8
tick,0x7ffdf681f424,10246610,0,0x0,8
tick,0x7ffdf681f424,10248616,0,0x0,8
tick,0x7ffdf681f424,10250615,0,0x0,8
tick,0x7ffdf681f424,10252576,0,0x0,8
tick,0x7ffdf681f424,10254580,0,0x0,8
tick,0x7ffdf681f424,10256588,0,0x0,8
tick,0x7ffdf681f424,10258567,0,0x0,8
tick,0x7ffdf681f424,10260576,0,0x0,8
tick,0x7ffdf681f424,10262566,0,0x0,8
tick,0x7ffdf681f424,10264573,0,0x0,8
tick,0x7ffdf681f424,10266554,0,0x0,8
tick,0x7ffdf681f424,10268586,0,0x0,8
tick,0x7ffdf681f424,10270559,0,0x0,8
tick,0x7ffdf681f424,10272480,0,0x0,8
tick,0x7ffdf681f424,10274517,0,0x0,8
tick,0x7ffdf681f424,10276539,0,0x0,8
tick,0x7ffdf681f424,10278510,0,0x0,8
tick,0x7ffdf681f424,10280441,0,0x0,8
tick,0x7ffdf681f424,10282489,0,0x0,8
tick,0x7ffdf681f424,10284509,0,0x0,8
tick,0x7ffdf681f424,10286544,0,0x0,8
tick,0x7ffdf681f424,10288426,0,0x0,8
tick,0x7ffdf681f424,10290496,0,0x0,8
tick,0x7ffdf681f424,10292335,0,0x0,8
tick,0x7ffdf681f424,10294344,0,0x0,8
tick,0x7ffdf681f424,10296429,0,0x0,8
tick,0x7ffdf681f424,10298424,0,0x0,8
tick,0x7ffdf681f424,10300449,0,0x0,8
tick,0x7ffdf681f424,10302345,0,0x0,8
tick,0x7ffdf681f424,10304355,0,0x0,8
tick,0x7ffdf681f424,10306340,0,0x0,8
tick,0x7ffdf681f424,10308421,0,0x0,8
tick,0x7ffdf681f424,10310390,0,0x0,8
tick,0x7ffdf681f424,10312363,0,0x0,8
tick,0x7ffdf681f424,10314360,0,0x0,8
tick,0x7ffdf681f424,10316372,0,0x0,8
tick,0x7ffdf681f424,10318408,0,0x0,8
tick,0x7ffdf681f424,10320408,0,0x0,8
tick,0x7ffdf681f424,10322375,0,0x0,8
tick,0x7ffdf681f424,10324291,0,0x0,8
tick,0x7ffdf681f424,10326344,0,0x0,8
tick,0x7ffdf681f424,10328331,0,0x0,8
tick,0x7ffdf681f424,10330360,0,0x0,8
tick,0x7ffdf681f424,10332241,0,0x0,8
tick,0x7ffdf681f424,10334231,0,0x0,8
tick,0x7ffdf681f424,10336218,0,0x0,8
tick,0x7ffdf681f424,10338208,0,0x0,8
tick,0x7ffdf681f424,10340200,0,0x0,8
tick,0x7ffdf681f424,10342205,0,0x0,8
tick,0x7ffdf681f424,10344219,0,0x0,8
tick,0x7ffdf681f424,10346191,0,0x0,8
tick,0x7ffdf681f424,10348212,0,0x0,8
tick,0x7ffdf681f424,10350215,0,0x0,8
tick,0x7ffdf681f424,10352349,0,0x0,8
tick,0x7ffdf681f424,10354225,0,0x0,8
tick,0x7ffdf681f424,10356198,0,0x0,8
tick,0x7ffdf681f424,10358199,0,0x0,8
tick,0x7ffdf681f424,10360182,0,0x0,8
tick,0x7ffdf681f424,10362192,0,0x0,8
tick,0x7ffdf681f424,10364192,0,0x0,8
tick,0x7ffdf681f424,10366186,0,0x0,8
tick,0x7ffdf681f424,10368183,0,0x0,8
tick,0x7ffdf681f424,10370167,0,0x0,8
tick,0x7ffdf681f424,10372205,0,0x0,8
tick,0x7ffdf681f424,10374145,0,0x0,8
tick,0x7ffdf681f424,10376140,0,0x0,8
tick,0x7ffdf681f424,10378202,0,0x0,8
tick,0x7ffdf681f424,10380251,0,0x0,8
tick,0x7ffdf681f424,10382252,0,0x0,8
tick,0x7ffdf681f424,10384240,0,0x0,8
tick,0x7ffdf681f424,10386274,0,0x0,8
tick,0x7ffdf681f424,10388237,0,0x0,8
tick,0x7ffdf681f424,10390236,0,0x0,8
tick,0x7ffdf681f424,10392242,0,0x0,8
tick,0x7ffdf681f424,10394207,0,0x0,8
tick,0x7ffdf681f424,10396214,0,0x0,8
tick,0x7ffdf681f424,10398178,0,0x0,8
tick,0x7ffdf681f424,10400129,0,0x0,8
tick,0x7ffdf681f424,10402193,0,0x0,8
tick,0x7ffdf681f424,10404164,0,0x0,8
tick,0x7ffdf681f424,10406223,0,0x0,8
tick,0x7ffdf681f424,10408184,0,0x0,8
tick,0x7ffdf681f424,10410053,0,0x0,8
tick,0x7ffdf681f424,10412167,0,0x0,8
tick,0x7ffdf681f424,10414174,0,0x0,8
tick,0x7ffdf681f424,10416105,0,0x0,8
tick,0x7ffdf681f424,10418159,0,0x0,8
tick,0x7ffdf681f424,10420124,0,0x0,8
tick,0x7ffdf681f424,10421984,0,0x0,8
tick,0x7ffdf681f424,10423056,0,0x0,8
tick,0x7ffdf681f424,10425076,0,0x0,8
tick,0x7ffdf681f424,10427076,0,0x0,8
tick,0x7ffdf681f424,10429081,0,0x0,8
tick,0x7ffdf681f424,10431004,0,0x0,8
tick,0x7ffdf681f424,10432994,0,0x0,8
tick,0x7ffdf681f424,10434946,0,0x0,8
tick,0x7ffdf681f424,10436966,0,0x0,8
tick,0x7ffdf681f424,10438046,0,0x0,8
tick,0x7ffdf681f424,10440015,0,0x0,8
tick,0x7ffdf681f424,10441985,0,0x0,8
tick,0x7ffdf681f424,10443975,0,0x0,8
tick,0x7ffdf681f424,10445986,0,0x0,8
tick,0x7ffdf681f424,10447944,0,0x0,8
tick,0x7ffdf681f424,10449953,0,0x0,8
tick,0x7ffdf681f424,10451976,0,0x0,8
tick,0x7ffdf681f424,10453926,0,0x0,8
tick,0x7ffdf681f424,10455997,0,0x0,8
tick,0x7ffdf681f424,10458044,0,0x0,8
tick,0x7ffdf681f424,10460023,0,0x0,8
tick,0x7ffdf681f424,10462011,0,0x0,8
tick,0x7ffdf681f424,10464036,0,0x0,8
tick,0x7ffdf681f424,10466028,0,0x0,8
tick,0x7ffdf681f424,10468028,0,0x0,8
tick,0x7ffdf681f424,10470008,0,0x0,8
tick,0x7ffdf681f424,10471975,0,0x0,8
tick,0x7ffdf681f424,10474005,0,0x0,8
tick,0x7ffdf681f424,10475927,0,0x0,8
tick,0x7ffdf681f424,10478014,0,0x0,8
tick,0x7ffdf681f424,10479974,0,0x0,8
tick,0x7ffdf681f424,10481977,0,0x0,8
tick,0x7ffdf681f424,10483946,0,0x0,8
tick,0x7ffdf681f424,10485908,0,0x0,8
tick,0x7ffdf681f424,10487978,0,0x0,8
tick,0x7ffdf681f424,10489986,0,0x0,8
tick,0x7ffdf681f424,10491981,0,0x0,8
tick,0x7ffdf681f424,10493877,0,0x0,8
tick,0x7ffdf681f424,10495930,0,0x0,8
tick,0x7ffdf681f424,10497926,0,0x0,8
tick,0x7ffdf681f424,10499905,0,0x0,8
tick,0x7ffdf681f424,10501949,0,0x0,8
tick,0x7ffdf681f424,10503937,0,0x0,8
tick,0x7ffdf681f424,10505910,0,0x0,8
tick,0x7ffdf681f424,10507973,0,0x0,8
tick,0x7ffdf681f424,10509890,0,0x0,8
tick,0x7ffdf681f424,10511912,0,0x0,8
tick,0x7ffdf681f424,10513908,0,0x0,8
tick,0x7ffdf681f424,10515845,0,0x0,8
tick,0x7ffdf681f424,10517848,0,0x0,8
tick,0x7ffdf681f424,10519891,0,0x0,8
tick,0x7ffdf681f424,10521881,0,0x0,8
tick,0x7ffdf681f424,10523924,0,0x0,8
tick,0x7ffdf681f424,10525977,0,0x0,8
tick,0x7ffdf681f424,10527973,0,0x0,8
tick,0x7ffdf681f424,10529963,0,0x0,8
tick,0x7ffdf681f424,10531963,0,0x0,8
tick,0x7ffdf681f424,10533955,0,0x0,8
tick,0x7ffdf681f424,10535939,0,0x0,8
tick,0x7ffdf681f424,10537949,0,0x0,8
tick,0x7ffdf681f424,10539973,0,0x0,8
tick,0x7ffdf681f424,10541929,0,0x0,8
tick,0x7ffdf681f424,10543926,0,0x0,8
tick,0x7ffdf681f424,10545951,0,0x0,8
tick,0x7ffdf681f424,10547919,0,0x0,8
tick,0x7ffdf681f424,10549923,0,0x0,8
tick,0x7ffdf681f424,10551848,0,0x0,8
tick,0x7ffdf681f424,10553983,0,0x0,8
tick,0x7ffdf681f424,10555780,0,0x0,8
tick,0x7ffdf681f424,10557762,0,0x0,8
tick,0x7ffdf681f424,10559777,0,0x0,8
tick,0x7ffdf681f424,10561825,0,0x0,8
tick,0x7ffdf681f424,10563808,0,0x0,8
tick,0x7ffdf681f424,10565785,0,0x0,8
tick,0x7ffdf681f424,10567742,0,0x0,8
tick,0x7ffdf681f424,10569768,0,0x0,8
tick,0x7ffdf681f424,10571722,0,0x0,8
tick,0x7ffdf681f424,10573721,0,0x0,8
tick,0x7ffdf681f424,10575742,0,0x0,8
tick,0x7ffdf681f424,10577708,0,0x0,8
tick,0x7ffdf681f424,10579730,0,0x0,8
tick,0x7ffdf681f424,10581694,0,0x0,8
tick,0x7ffdf681f424,10583737,0,0x0,8
tick,0x7ffdf681f424,10585900,0,0x0,8
tick,0x7ffdf681f424,10588620,0,0x0,8
tick,0x7ffdf681f424,10589801,0,0x0,8
tick,0x7ffdf681f424,10592405,0,0x0,8
tick,0x7ffdf681f424,10594796,0,0x0,8
tick,0x7ffdf681f424,10597428,0,0x0,8
tick,0x7ffdf681f424,10599400,0,0x0,8
tick,0x7ffdf681f424,10600717,0,0x0,8
tick,0x7ffdf681f424,10602734,0,0x0,8
tick,0x7ffdf681f424,10604735,0,0x0,8
tick,0x7ffdf681f424,10606757,0,0x0,8
tick,0x7ffdf681f424,10610325,0,0x0,8
tick,0x7ffdf681f424,10611624,0,0x0,8
tick,0x7ffdf681f424,10613619,0,0x0,8
tick,0x7ffdf681f424,10615615,0,0x0,8
tick,0x7ffdf681f424,10617622,0,0x0,8
tick,0x7ffdf681f424,10619599,0,0x0,8
tick,0x7ffdf681f424,10621622,0,0x0,8
tick,0x7ffdf681f424,10623612,0,0x0,8
tick,0x7ffdf681f424,10625585,0,0x0,8
tick,0x7ffdf681f424,10627584,0,0x0,8
tick,0x7ffdf681f424,10629576,0,0x0,8
tick,0x7ffdf681f424,10631571,0,0x0,8
tick,0x7ffdf681f424,10634478,0,0x0,8
tick,0x7ffdf681f424,10635575,0,0x0,8
tick,0x7ffdf681f424,10639574,0,0x0,8
tick,0x7ffdf681f424,10640662,0,0x0,8
tick,0x7ffdf681f424,10642600,0,0x0,8
tick,0x7ffdf681f424,10651675,0,0x0,8
tick,0x7ffdf681f424,10653584,0,0x0,8
tick,0x7ffdf681f424,10655580,0,0x0,8
tick,0x7ffdf681f424,10658166,0,0x0,8
tick,0x7ffdf681f424,10659614,0,0x0,8
tick,0x7ffdf681f424,10661489,0,0x0,8
tick,0x7ffdf681f424,10663615,0,0x0,8
tick,0x7ffdf681f424,10665590,0,0x0,8
tick,0x7ffdf681f424,10667617,0,0x0,8
tick,0x7ffdf681f424,10669536,0,0x0,8
tick,0x7ffdf681f424,10671450,0,0x0,8
tick,0x7ffdf681f424,10672470,0,0x0,8
tick,0x7ffdf681f424,10674452,0,0x0,8
tick,0x7ffdf681f424,10676612,0,0x0,8
tick,0x7ffdf681f424,10678560,0,0x0,8
tick,0x7ffdf681f424,10680598,0,0x0,8
tick,0x7ffdf681f424,10682888,0,0x0,8
tick,0x7ffdf681f424,10684527,0,0x0,8
tick,0x7ffdf681f424,10686708,0,0x0,8
tick,0x7ffdf681f424,10688541,0,0x0,8
tick,0x7ffdf681f424,10690833,0,0x0,8
tick,0x7ffdf681f424,10692509,0,0x0,8
tick,0x7ffdf681f424,10694448,0,0x0,8
tick,0x7ffdf681f424,10696434,0,0x0,8
tick,0x7ffdf681f424,10698864,0,0x0,8
tick,0x7ffdf681f424,10700562,0,0x0,8
tick,0x7ffdf681f424,10702607,0,0x0,8
tick,0x7ffdf681f424,10704487,0,0x0,8
tick,0x7ffdf681f424,10706674,0,0x0,8
tick,0x7ffdf681f424,10708405,0,0x0,8
tick,0x7ffdf681f424,10710726,0,0x0,8
tick,0x7ffdf681f424,10712467,0,0x0,8
tick,0x7ffdf681f424,10714418,0,0x0,8
tick,0x7ffdf681f424,10716341,0,0x0,8
tick,0x7ffdf681f424,10718333,0,0x0,8
tick,0x7ffdf681f424,10720333,0,0x0,8
tick,0x7ffdf681f424,10722475,0,0x0,8
tick,0x7ffdf681f424,10724400,0,0x0,8
tick,0x7ffdf681f424,10726351,0,0x0,8
tick,0x7ffdf681f424,10728371,0,0x0,8
tick,0x7ffdf681f424,10730322,0,0x0,8
tick,0x7ffdf681f424,10732296,0,0x0,8
tick,0x7ffdf681f424,10734291,0,0x0,8
tick,0x7ffdf681f424,10736339,0,0x0,8
tick,0x7ffdf681f424,10738341,0,0x0,8
tick,0x7ffdf681f424,10740274,0,0x0,8
tick,0x7ffdf681f424,10742377,0,0x0,8
tick,0x7ffdf681f424,10744275,0,0x0,8
tick,0x7ffdf681f424,10746259,0,0x0,8
tick,0x7ffdf681f424,10748263,0,0x0,8
tick,0x7ffdf681f424,10750320,0,0x0,8
tick,0x7ffdf681f424,10752243,0,0x0,8
tick,0x7ffdf681f424,10754243,0,0x0,8
tick,0x7ffdf681f424,10756229,0,0x0,8
tick,0x7ffdf681f424,10758227,0,0x0,8
tick,0x7ffdf681f424,10760235,0,0x0,8
tick,0x7ffdf681f424,10762259,0,0x0,8
tick,0x7ffdf681f424,10777872,0,0x0,8
tick,0x7ffdf681f424,10779194,0,0x0,8
tick,0x7ffdf681f424,10781168,0,0x0,8
tick,0x7ffdf681f424,10783161,0,0x0,8
tick,0x7ffdf681f424,10785444,0,0x0,8
tick,0x7ffdf681f424,10787172,0,0x0,8
tick,0x7ffdf681f424,10789212,0,0x0,8
tick,0x7ffdf681f424,10791138,0,0x0,8
tick,0x7ffdf681f424,10793143,0,0x0,8
tick,0x7ffdf681f424,10804819,0,0x0,8
tick,0x7ffdf681f424,10806435,0,0x0,8
tick,0x7ffdf681f424,10808108,0,0x0,8
tick,0x7ffdf681f424,10814323,0,0x0,8
tick,0x7ffdf681f424,10816079,0,0x0,8
tick,0x7ffdf681f424,10818078,0,0x0,8
tick,0x7ffdf681f424,10820070,0,0x0,8
tick,0x7ffdf681f424,10822072,0,0x0,8
tick,0x7ffdf681f424,10824156,0,0x0,8
tick,0x7ffdf681f424,10826083,0,0x0,8
tick,0x7ffdf681f424,10828039,0,0x0,8
tick,0x7ffdf681f424,10830032,0,0x0,8
tick,0x7ffdf681f424,10832033,0,0x0,8
tick,0x7ffdf681f424,10834037,0,0x0,8
tick,0x7ffdf681f424,10836022,0,0x0,8
tick,0x7ffdf681f424,10838060,0,0x0,8
tick,0x7ffdf681f424,10840018,0,0x0,8
tick,0x7ffdf681f424,10842012,0,0x0,8
tick,0x7ffdf681f424,10844151,0,0x0,8
tick,0x7ffdf681f424,10845994,0,0x0,8
tick,0x7ffdf681f424,10847987,0,0x0,8
tick,0x7ffdf681f424,10849978,0,0x0,8
tick,0x7ffdf681f424,10851978,0,0x0,8
tick,0x7ffdf681f424,10866645,0,0x0,8
tick,0x7ffdf681f424,10867934,0,0x0,8
tick,0x7ffdf681f424,10870364,0,0x0,8
tick,0x7ffdf681f424,10871930,0,0x0,8
tick,0x7ffdf681f424,10874006,0,0x0,8
tick,0x7ffdf681f424,10875957,0,0x0,8
tick,0x7ffdf681f424,10877983,0,0x0,8
tick,0x7ffdf681f424,10879911,0,0x0,8
tick,0x7ffdf681f424,10882007,0,0x0,8
tick,0x7ffdf681f424,10884044,0,0x0,8
tick,0x7ffdf681f424,10885885,0,0x0,8
tick,0x7ffdf681f424,10887879,0,0x0,8
tick,0x7ffdf681f424,10889875,0,0x0,8
tick,0x7ffdf681f424,10893937,0,0x0,8
tick,0x7ffdf681f424,10895859,0,0x0,8
tick,0x7ffdf681f424,10898286,0,0x0,8
tick,0x7ffdf681f424,10899853,0,0x0,8
tick,0x7ffdf681f424,10902041,0,0x0,8
tick,0x7ffdf681f424,10904726,0,0x0,8
tick,0x7ffdf681f424,10906130,0,0x0,8
tick,0x7ffdf681f424,10907957,0,0x0,8
tick,0x7ffdf681f424,10909976,0,0x0,8
tick,0x7ffdf681f424,10911932,0,0x0,8
tick,0x7ffdf681f424,10913813,0,0x0,8
tick,0x7ffdf681f424,10915810,0,0x0,8
tick,0x7ffdf681f424,10917798,0,0x0,8
tick,0x7ffdf681f424,10919793,0,0x0,8
tick,0x7ffdf681f424,10921780,0,0x0,8
tick,0x7ffdf681f424,10923775,0,0x0,8
tick,0x7ffdf681f424,10925788,0,0x0,8
tick,0x7ffdf681f424,10927771,0,0x0,8
tick,0x7ffdf681f424,10929760,0,0x0,8
tick,0x7ffdf681f424,10931754,0,0x0,8
tick,0x7ffdf681f424,10933773,0,0x0,8
tick,0x7ffdf681f424,10936052,0,0x0,8
tick,0x7ffdf681f424,10937894,0,0x0,8
tick,0x7ffdf681f424,10953260,0,0x0,8
tick,0x7ffdf681f424,10954744,0,0x0,8
tick,0x7ffdf681f424,10956796,0,0x0,8
tick,0x7ffdf681f424,10958879,0,0x0,8
tick,0x7ffdf681f424,10960799,0,0x0,8
tick,0x7ffdf681f424,10962762,0,0x0,8
tick,0x7ffdf681f424,10964733,0,0x0,8
tick,0x7ffdf681f424,10966679,0,0x0,8
tick,0x7ffdf681f424,10968660,0,0x0,8
tick,0x7ffdf681f424,10970658,0,0x0,8
tick,0x7ffdf681f424,10972664,0,0x0,8
tick,0x7ffdf681f424,10974763,0,0x0,8
tick,0x7ffdf681f424,10976784,0,0x0,8
tick,0x7ffdf681f424,10978691,0,0x0,8
tick,0x7ffdf681f424,10980812,0,0x0,8
tick,0x7ffdf681f424,10982654,0,0x0,8
tick,0x7ffdf681f424,10984620,0,0x0,8
tick,0x7ffdf681f424,10986616,0,0x0,8
tick,0x7ffdf681f424,10988607,0,0x0,8
tick,0x7ffdf681f424,10990619,0,0x0,8
tick,0x7ffdf681f424,10992600,0,0x0,8
tick,0x7ffdf681f424,10994604,0,0x0,8
tick,0x7ffdf681f424,10996589,0,0x0,8
tick,0x7ffdf681f424,10998582,0,0x0,8
tick,0x7ffdf681f424,11000577,0,0x0,8
tick,0x7ffdf681f424,11002578,0,0x0,8
tick,0x7ffdf681f424,11004566,0,0x0,8
tick,0x7ffdf681f424,11006559,0,0x0,8
tick,0x7ffdf681f424,11008553,0,0x0,8
tick,0x7ffdf681f424,11010548,0,0x0,8
tick,0x7ffdf681f424,11022858,0,0x0,8
tick,0x7ffdf681f424,11027491,0,0x0,8
tick,0x7ffdf681f424,11029503,0,0x0,8
tick,0x7ffdf681f424,11031490,0,0x0,8
tick,0x7ffdf681f424,11033487,0,0x0,8
tick,0x7ffdf681f424,11035503,0,0x0,8
tick,0x7ffdf681f424,11037483,0,0x0,8
tick,0x7ffdf681f424,11039521,0,0x0,8
tick,0x7ffdf681f424,11041519,0,0x0,8
tick,0x7ffdf681f424,11043586,0,0x0,8
tick,0x7ffdf681f424,11045460,0,0x0,8
tick,0x7ffdf681f424,11047509,0,0x0,8
tick,0x7ffdf681f424,11049484,0,0x0,8
tick,0x7ffdf681f424,11057746,0,0x0,8
tick,0x7ffdf681f424,11058544,0,0x0,8
tick,0x7ffdf681f424,11060623,0,0x0,8
tick,0x7ffdf681f424,11062487,0,0x0,8
tick,0x7ffdf681f424,11064432,0,0x0,8
tick,0x7ffdf681f424,11066402,0,0x0,8
tick,0x7ffdf681f424,11068394,0,0x0,8
tick,0x7ffdf681f424,11070385,0,0x0,8
tick,0x7ffdf681f424,11072376,0,0x0,8
tick,0x7ffdf681f424,11074396,0,0x0,8
tick,0x7ffdf681f424,11076388,0,0x0,8
tick,0x7ffdf681f424,11078366,0,0x0,8
tick,0x7ffdf681f424,11080365,0,0x0,8
tick,0x7ffdf681f424,11082399,0,0x0,8
tick,0x7ffdf681f424,11084398,0,0x0,8
tick,0x7ffdf681f424,11086391,0,0x0,8
tick,0x7ffdf681f424,11088530,0,0x0,8
tick,0x7ffdf681f424,11090349,0,0x0,8
tick,0x7ffdf681f424,11092360,0,0x0,8
tick,0x7ffdf681f424,11094330,0,0x0,8
tick,0x7ffdf681f424,11096332,0,0x0,8
tick,0x7ffdf681f424,11098315,0,0x0,8
tick,0x7ffdf681f424,11100320,0,0x0,8
tick,0x7ffdf681f424,11102312,0,0x0,8
tick,0x7ffdf681f424,11104314,0,0x0,8
tick,0x7ffdf681f424,11106313,0,0x0,8
tick,0x7ffdf681f424,11108493,0,0x0,8
tick,0x7ffdf681f424,11110303,0,0x0,8
tick,0x7ffdf681f424,11112292,0,0x0,8
tick,0x7ffdf681f424,11114273,0,0x0,8
tick,0x7ffdf681f424,11116283,0,0x0,8
tick,0x7ffdf681f424,11118262,0,0x0,8
tick,0x7ffdf681f424,11120375,0,0x0,8
tick,0x7ffdf681f424,11122252,0,0x0,8
tick,0x7ffdf681f424,11124254,0,0x0,8
tick,0x7ffdf681f424,11126244,0,0x0,8
tick,0x7ffdf681f424,11128255,0,0x0,8
tick,0x7ffdf681f424,11130236,0,0x0,8
tick,0x7ffdf681f424,11132242,0,0x0,8
tick,0x7ffdf681f424,11134234,0,0x0,8
tick,0x7ffdf681f424,11136302,0,0x0,8
tick,0x7ffdf681f424,11138216,0,0x0,8
tick,0x7ffdf681f424,11140217,0,0x0,8
tick,0x7ffdf681f424,11147094,0,0x0,8
tick,0x7ffdf681f424,11154793,0,0x0,8
tick,0x7ffdf681f424,11156192,0,0x0,8
tick,0x7ffdf681f424,11158168,0,0x0,8
tick,0x7ffdf681f424,11161360,0,0x0,8
tick,0x7ffdf681f424,11162166,0,0x0,8
tick,0x7ffdf681f424,11164267,0,0x0,8
tick,0x7ffdf681f424,11166148,0,0x0,8
tick,0x7ffdf681f424,11168400,0,0x0,8
tick,0x7ffdf681f424,11170171,0,0x0,8
tick,0x7ffdf681f424,11172168,0,0x0,8
tick,0x7ffdf681f424,11174559,0,0x0,8
tick,0x7ffdf681f424,11176368,0,0x0,8
tick,0x7ffdf681f424,11178162,0,0x0,8
tick,0x7ffdf681f424,11180130,0,0x0,8
tick,0x7ffdf681f424,11182118,0,0x0,8
tick,0x7ffdf681f424,11184089,0,0x0,8
tick,0x7ffdf681f424,11186135,0,0x0,8
tick,0x7ffdf681f424,11188077,0,0x0,8
tick,0x7ffdf681f424,11190072,0,0x0,8
tick,0x7ffdf681f424,11192066,0,0x0,8
tick,0x7ffdf681f424,11194059,0,0x0,8
tick,0x7ffdf681f424,11196050,0,0x0,8
tick,0x7ffdf681f424,11198052,0,0x0,8
tick,0x7ffdf681f424,11200069,0,0x0,8
tick,0x7ffdf681f424,11202040,0,0x0,8
tick,0x7ffdf681f424,11204031,0,0x0,8
tick,0x7ffdf681f424,11206061,0,0x0,8
tick,0x7ffdf681f424,11210082,0,0x0,8
tick,0x7ffdf681f424,11214436,0,0x0,8
tick,0x7ffdf681f424,11216441,0,0x0,8
tick,0x7ffdf681f424,11239835,0,0x0,8
tick,0x7ffdf681f424,11239885,0,0x0,8
tick,0x7ffdf681f424,11240946,0,0x0,8
tick,0x7ffdf681f424,11242933,0,0x0,8
tick,0x7ffdf681f424,11246724,0,0x0,8
tick,0x7ffdf681f424,11247112,0,0x0,8
tick,0x7ffdf681f424,11248980,0,0x0,8
tick,0x7ffdf681f424,11250949,0,0x0,8
tick,0x7ffdf681f424,11252907,0,0x0,8
tick,0x7ffdf681f424,11255263,0,0x0,8
tick,0x7ffdf681f424,11256900,0,0x0,8
tick,0x7ffdf681f424,11258891,0,0x0,8
tick,0x7ffdf681f424,11260880,0,0x0,8
tick,0x7ffdf681f424,11262873,0,0x0,8
tick,0x7ffdf681f424,11264871,0,0x0,8
tick,0x7ffdf681f424,11266885,0,0x0,8
tick,0x7ffdf681f424,11268880,0,0x0,8
tick,0x7ffdf681f424,11270862,0,0x0,8
tick,0x7ffdf681f424,11272858,0,0x0,8
tick,0x7ffdf681f424,11274841,0,0x0,8
tick,0x7ffdf681f424,11276840,0,0x0,8
tick,0x7ffdf681f424,11278832,0,0x0,8
tick,0x7ffdf681f424,11289287,0,0x0,8
tick,0x7ffdf681f424,11290803,0,0x0,8
tick,0x7ffdf681f424,11292796,0,0x0,8
tick,0x7ffdf681f424,11294799,0,0x0,8
tick,0x7ffdf681f424,11296799,0,0x0,8
tick,0x7ffdf681f424,11298818,0,0x0,8
tick,0x7ffdf681f424,11300788,0,0x0,8
tick,0x7ffdf681f424,11302817,0,0x0,8
tick,0x7ffdf681f424,11304828,0,0x0,8
tick,0x7ffdf681f424,11306773,0,0x0,8
tick,0x7ffdf681f424,11308761,0,0x0,8
tick,0x7ffdf681f424,11310757,0,0x0,8
tick,0x7ffdf681f424,11312747,0,0x0,8
tick,0x7ffdf681f424,11314744,0,0x0,8
tick,0x7ffdf681f424,11316729,0,0x0,8
tick,0x7ffdf681f424,11318727,0,0x0,8
tick,0x7ffdf681f424,11320720,0,0x0,8
tick,0x7ffdf681f424,11322720,0,0x0,8
tick,0x7ffdf681f424,11324715,0,0x0,8
tick,0x7ffdf681f424,11326764,0,0x0,8
tick,0x7ffdf681f424,11328703,0,0x0,8
tick,0x7ffdf681f424,11330694,0,0x0,8
tick,0x7ffdf681f424,11332690,0,0x0,8
tick,0x7ffdf681f424,11334684,0,0x0,8
tick,0x7ffdf681f424,11336669,0,0x0,8
tick,0x7ffdf681f424,11338689,0,0x0,8
tick,0x7ffdf681f424,11340726,0,0x0,8
tick,0x7ffdf681f424,11342667,0,0x0,8
tick,0x7ffdf681f424,11344699,0,0x0,8
tick,0x7ffdf681f424,11346656,0,0x0,8
tick,0x7ffdf681f424,11348646,0,0x0,8
tick,0x7ffdf681f424,11350661,0,0x0,8
tick,0x7ffdf681f424,11352636,0,0x0,8
tick,0x7ffdf681f424,11354628,0,0x0,8
tick,0x7ffdf681f424,11356624,0,0x0,8
tick,0x7ffdf681f424,11358623,0,0x0,8
tick,0x7ffdf681f424,11360618,0,0x0,8
tick,0x7ffdf681f424,11362609,0,0x0,8
tick,0x7ffdf681f424,11364622,0,0x0,8
tick,0x7ffdf681f424,11366600,0,0x0,8
tick,0x7ffdf681f424,11368646,0,0x0,8
tick,0x7ffdf681f424,11370590,0,0x0,8
tick,0x7ffdf681f424,11372711,0,0x0,8
tick,0x7ffdf681f424,11374761,0,0x0,8
tick,0x7ffdf681f424,11376573,0,0x0,8
tick,0x7ffdf681f424,11391600,0,0x0,8
tick,0x7ffdf681f424,11393538,0,0x0,8
tick,0x7ffdf681f424,11395526,0,0x0,8
tick,0x7ffdf681f424,11398199,0,0x0,8
tick,0x7ffdf681f424,11400307,0,0x0,8
tick,0x7ffdf681f424,11401508,0,0x0,8
tick,0x7ffdf681f424,11403567,0,0x0,8
tick,0x7ffdf681f424,11405560,0,0x0,8
tick,0x7ffdf681f424,11407490,0,0x0,8
tick,0x7ffdf681f424,11410485,0,0x0,8
tick,0x7ffdf681f424,11412476,0,0x0,8
tick,0x7ffdf681f424,11414468,0,0x0,8
tick,0x7ffdf681f424,11416465,0,0x0,8
tick,0x7ffdf681f424,11418846,0,0x0,8
tick,0x7ffdf681f424,11420479,0,0x0,8
tick,0x7ffdf681f424,11422457,0,0x0,8
tick,0x7ffdf681f424,11424496,0,0x0,8
tick,0x7ffdf681f424,11426564,0,0x0,8
tick,0x7ffdf681f424,11428487,0,0x0,8
tick,0x7ffdf681f424,11430465,0,0x0,8
tick,0x7ffdf681f424,11432432,0,0x0,8
tick,0x7ffdf681f424,11434417,0,0x0,8
tick,0x7ffdf681f424,11436410,0,0x0,8
tick,0x7ffdf681f424,11438404,0,0x0,8
tick,0x7ffdf681f424,11440395,0,0x0,8
tick,0x7ffdf681f424,11442458,0,0x0,8
tick,0x7ffdf681f424,11444412,0,0x0,8
tick,0x7ffdf681f424,11446389,0,0x0,8
tick,0x7ffdf681f424,11448383,0,0x0,8
tick,0x7ffdf681f424,11450377,0,0x0,8
tick,0x7ffdf681f424,11452377,0,0x0,8
tick,0x7ffdf681f424,11454370,0,0x0,8
tick,0x7ffdf681f424,11456358,0,0x0,8
tick,0x7ffdf681f424,11458351,0,0x0,8
tick,0x7ffdf681f424,11460751,0,0x0,8
tick,0x7ffdf681f424,11462461,0,0x0,8
tick,0x7ffdf681f424,11467855,0,0x0,8
tick,0x7ffdf681f424,11469532,0,0x0,8
tick,0x7ffdf681f424,11471376,0,0x0,8
tick,0x7ffdf681f424,11473333,0,0x0,8
tick,0x7ffdf681f424,11475320,0,0x0,8
tick,0x7ffdf681f424,11477304,0,0x0,8
tick,0x7ffdf681f424,11479298,0,0x0,8
tick,0x7ffdf681f424,11481293,0,0x0,8
tick,0x7ffdf681f424,11483360,0,0x0,8
tick,0x7ffdf681f424,11485310,0,0x0,8
tick,0x7ffdf681f424,11487307,0,0x0,8
tick,0x7ffdf681f424,11489273,0,0x0,8
tick,0x7ffdf681f424,11491270,0,0x0,8
tick,0x7ffdf681f424,11493258,0,0x0,8
tick,0x7ffdf681f424,11495252,0,0x0,8
tick,0x7ffdf681f424,11497263,0,0x0,8
tick,0x7ffdf681f424,11499250,0,0x0,8
tick,0x7ffdf681f424,11501241,0,0x0,8
tick,0x7ffdf681f424,11503244,0,0x0,8
tick,0x7ffdf681f424,11505236,0,0x0,8
tick,0x7ffdf681f424,11507258,0,0x0,8
tick,0x7ffdf681f424,11509227,0,0x0,8
tick,0x7ffdf681f424,11511212,0,0x0,8
tick,0x7ffdf681f424,11513209,0,0x0,8
tick,0x7ffdf681f424,11515200,0,0x0,8
tick,0x7ffdf681f424,11517199,0,0x0,8
tick,0x7ffdf681f424,11519243,0,0x0,8
tick,0x7ffdf681f424,11521194,0,0x0,8
tick,0x7ffdf681f424,11526226,0,0x0,8
tick,0x7ffdf681f424,11526660,0,0x0,8
tick,0x7ffdf681f424,11528235,0,0x0,8
tick,0x7ffdf681f424,11540377,0,0x0,8
tick,0x7ffdf681f424,11542375,0,0x0,8
tick,0x7ffdf681f424,11544840,0,0x0,8
tick,0x7ffdf681f424,11546118,0,0x0,8
tick,0x7ffdf681f424,11559675,0,0x0,8
tick,0x7ffdf681f424,11561101,0,0x0,8
tick,0x7ffdf681f424,11563162,0,0x0,8
tick,0x7ffdf681f424,11565133,0,0x0,8
tick,0x7ffdf681f424,11567759,0,0x0,8
tick,0x7ffdf681f424,11569121,0,0x0,8
tick,0x7ffdf681f424,11571079,0,0x0,8
tick,0x7ffdf681f424,11573237,0,0x0,8
tick,0x7ffdf681f424,11575120,0,0x0,8
tick,0x7ffdf681f424,11577230,0,0x0,8
tick,0x7ffdf681f424,11579030,0,0x0,8
tick,0x7ffdf681f424,11581025,0,0x0,8
tick,0x7ffdf681f424,11583017,0,0x0,8
tick,0x7ffdf681f424,11585014,0,0x0,8
tick,0x7ffdf681f424,11587008,0,0x0,8
tick,0x7ffdf681f424,11589001,0,0x0,8
tick,0x7ffdf681f424,11591032,0,0x0,8
tick,0x7ffdf681f424,11592996,0,0x0,8
tick,0x7ffdf681f424,11595003,0,0x0,8
tick,0x7ffdf681f424,11597050,0,0x0,8
tick,0x7ffdf681f424,11599032,0,0x0,8
tick,0x7ffdf681f424,11600968,0,0x0,8
tick,0x7ffdf681f424,11602988,0,0x0,8
tick,0x7ffdf681f424,11605106,0,0x0,8
tick,0x7ffdf681f424,11606958,0,0x0,8
tick,0x7ffdf681f424,11608948,0,0x0,8
tick,0x7ffdf681f424,11610958,0,0x0,8
tick,0x7ffdf681f424,11612939,0,0x0,8
tick,0x7ffdf681f424,11614948,0,0x0,8
tick,0x7ffdf681f424,11616974,0,0x0,8
tick,0x7ffdf681f424,11618926,0,0x0,8
tick,0x7ffdf681f424,11620915,0,0x0,8
tick,0x7ffdf681f424,11622914,0,0x0,8
tick,0x7ffdf681f424,11624914,0,0x0,8
tick,0x7ffdf681f424,11626902,0,0x0,8
tick,0x7ffdf681f424,11628902,0,0x0,8
tick,0x7ffdf681f424,11630889,0,0x0,8
tick,0x7ffdf681f424,11632882,0,0x0,8
tick,0x7ffdf681f424,11634879,0,0x0,8
tick,0x7ffdf681f424,11649985,0,0x0,8
tick,0x7ffdf681f424,11650033,0,0x0,8
tick,0x7ffdf681f424,11651845,0,0x0,8
tick,0x7ffdf681f424,11653981,0,0x0,8
tick,0x7ffdf681f424,11655911,0,0x0,8
tick,0x7ffdf681f424,11657841,0,0x0,8
tick,0x7ffdf681f424,11659818,0,0x0,8
tick,0x7ffdf681f424,11661810,0,0x0,8
tick,0x7ffdf681f424,11663801,0,0x0,8
tick,0x7ffdf681f424,11665799,0,0x0,8
tick,0x7ffdf681f424,11667792,0,0x0,8
tick,0x7ffdf681f424,11684561,0,0x0,8
tick,0x7ffdf681f424,11685751,0,0x0,8
tick,0x7ffdf681f424,11687743,0,0x0,8
tick,0x7ffdf681f424,11690155,0,0x0,8
tick,0x7ffdf681f424,11691831,0,0x0,8
tick,0x7ffdf681f424,11693761,0,0x0,8
tick,0x7ffdf681f424,11695764,0,0x0,8
tick,0x7ffdf681f424,11697708,0,0x0,8
tick,0x7ffdf681f424,11699728,0,0x0,8
tick,0x7ffdf681f424,11701701,0,0x0,8
tick,0x7ffdf681f424,11703699,0,0x0,8
tick,0x7ffdf681f424,11705692,0,0x0,8
tick,0x7ffdf681f424,11707684,0,0x0,8
tick,0x7ffdf681f424,11709677,0,0x0,8
tick,0x7ffdf681f424,11711672,0,0x0,8
tick,0x7ffdf681f424,11713936,0,0x0,8
tick,0x7ffdf681f424,11715929,0,0x0,8
tick,0x7ffdf681f424,11717929,0,0x0,8
tick,0x7ffdf681f424,11719775,0,0x0,8
tick,0x7ffdf681f424,11721704,0,0x0,8
tick,0x7ffdf681f424,11723653,0,0x0,8
tick,0x7ffdf681f424,11725643,0,0x0,8
tick,0x7ffdf681f424,11727635,0,0x0,8
tick,0x7ffdf681f424,11729648,0,0x0,8
tick,0x7ffdf681f424,11731800,0,0x0,8
tick,0x7ffdf681f424,11734786,0,0x0,8
tick,0x7ffdf681f424,11736668,0,0x0,8
tick,0x7ffdf681f424,11738599,0,0x0,8
tick,0x7ffdf681f424,11740600,0,0x0,8
tick,0x7ffdf681f424,11742597,0,0x0,8
tick,0x7ffdf681f424,11744585,0,0x0,8
tick,0x7ffdf681f424,11746585,0,0x0,8
tick,0x7ffdf681f424,11748577,0,0x0,8
tick,0x7ffdf681f424,11750574,0,0x0,8
tick,0x7ffdf681f424,11752565,0,0x0,8
tick,0x7ffdf681f424,11754556,0,0x0,8
tick,0x7ffdf681f424,11756553,0,0x0,8
tick,0x7ffdf681f424,11758545,0,0x0,8
tick,0x7ffdf681f424,11760549,0,0x0,8
tick,0x7ffdf681f424,11762541,0,0x0,8
tick,0x7ffdf681f424,11764524,0,0x0,8
tick,0x7ffdf681f424,11766539,0,0x0,8
tick,0x7ffdf681f424,11768523,0,0x0,8
tick,0x7ffdf681f424,11770547,0,0x0,8
tick,0x7ffdf681f424,11772515,0,0x0,8
tick,0x7ffdf681f424,11774943,0,0x0,8
tick,0x7ffdf681f424,11776873,0,0x0,8
tick,0x7ffdf681f424,11778521,0,0x0,8
tick,0x7ffdf681f424,11780491,0,0x0,8
tick,0x7ffdf681f424,11784950,0,0x0,8
tick,0x7ffdf681f424,11796094,0,0x0,8
tick,0x7ffdf681f424,11797467,0,0x0,8
tick,0x7ffdf681f424,11799440,0,0x0,8
tick,0x7ffdf681f424,11801443,0,0x0,8
tick,0x7ffdf681f424,11803545,0,0x0,8
tick,0x7ffdf681f424,11805489,0,0x0,8
tick,0x7ffdf681f424,11807475,0,0x0,8
tick,0x7ffdf681f424,11809417,0,0x0,8
tick,0x7ffdf681f424,11811410,0,0x0,8
tick,0x7ffdf681f424,11813406,0,0x0,8
tick,0x7ffdf681f424,11815397,0,0x0,8
tick,0x7ffdf681f424,11817396,0,0x0,8
tick,0x7ffdf681f424,11819397,0,0x0,8
tick,0x7ffdf681f424,11821380,0,0x0,8
tick,0x7ffdf681f424,11823378,0,0x0,8
tick,0x7ffdf681f424,11825379,0,0x0,8
tick,0x7ffdf681f424,11827368,0,0x0,8
tick,0x7ffdf681f424,11829360,0,0x0,8
tick,0x7ffdf681f424,11831353,0,0x0,8
tick,0x7ffdf681f424,11833954,0,0x0,8
tick,0x7ffdf681f424,11835908,0,0x0,8
tick,0x7ffdf681f424,11849294,0,0x0,8
tick,0x7ffdf681f424,11851304,0,0x0,8
tick,0x7ffdf681f424,11853310,0,0x0,8
tick,0x7ffdf681f424,11855310,0,0x0,8
tick,0x7ffdf681f424,11857805,0,0x0,8
tick,0x7ffdf681f424,11859299,0,0x0,8
tick,0x7ffdf681f424,11861280,0,0x0,8
tick,0x7ffdf681f424,11863269,0,0x0,8
tick,0x7ffdf681f424,11865268,0,0x0,8
tick,0x7ffdf681f424,11867260,0,0x0,8
tick,0x7ffdf681f424,11869258,0,0x0,8
tick,0x7ffdf681f424,11882315,0,0x0,8
tick,0x7ffdf681f424,11884218,0,0x0,8
tick,0x7ffdf681f424,11886693,0,0x0,8
tick,0x7ffdf681f424,11888327,0,0x0,8
tick,0x7ffdf681f424,11890290,0,0x0,8
tick,0x7ffdf681f424,11892196,0,0x0,8
tick,0x7ffdf681f424,11894188,0,0x0,8
tick,0x7ffdf681f424,11896181,0,0x0,8
tick,0x7ffdf681f424,11898175,0,0x0,8
tick,0x7ffdf681f424,11900172,0,0x0,8
tick,0x7ffdf681f424,11902244,0,0x0,8
tick,0x7ffdf681f424,11904161,0,0x0,8
tick,0x7ffdf681f424,11906164,0,0x0,8
tick,0x7ffdf681f424,11908147,0,0x0,8
tick,0x7ffdf681f424,11910149,0,0x0,8
tick,0x7ffdf681f424,11912138,0,0x0,8
tick,0x7ffdf681f424,11914135,0,0x0,8
tick,0x7ffdf681f424,11916137,0,0x0,8
tick,0x7ffdf681f424,11918121,0,0x0,8
tick,0x7ffdf681f424,11920131,0,0x0,8
tick,0x7ffdf681f424,11922114,0,0x0,8
tick,0x7ffdf681f424,11924160,0,0x0,8
tick,0x7ffdf681f424,11926110,0,0x0,8
tick,0x7ffdf681f424,11933590,0,0x0,8
tick,0x7ffdf681f424,11934089,0,0x0,8
tick,0x7ffdf681f424,11936080,0,0x0,8
tick,0x7ffdf681f424,11938079,0,0x0,8
tick,0x7ffdf681f424,11940064,0,0x0,8
tick,0x7ffdf681f424,11942061,0,0x0,8
tick,0x7ffdf681f424,11944053,0,0x0,8
tick,0x7ffdf681f424,11946304,0,0x0,8
tick,0x7ffdf681f424,11948046,0,0x0,8
tick,0x7ffdf681f424,11950053,0,0x0,8
tick,0x7ffdf681f424,11952095,0,0x0,8
tick,0x7ffdf681f424,11954026,0,0x0,8
tick,0x7ffdf681f424,11956019,0,0x0,8
tick,0x7ffdf681f424,11958036,0,0x0,8
tick,0x7ffdf681f424,11960036,0,0x0,8
tick,0x7ffdf681f424,11962008,0,0x0,8
tick,0x7ffdf681f424,11964076,0,0x0,8
tick,0x7ffdf681f424,11965998,0,0x0,8
tick,0x7ffdf681f424,11967991,0,0x0,8
tick,0x7ffdf681f424,11969989,0,0x0,8
tick,0x7ffdf681f424,11972110,0,0x0,8
tick,0x7ffdf681f424,11974029,0,0x0,8
tick,0x7ffdf681f424,11977192,0,0x0,8
tick,0x7ffdf681f424,11978073,0,0x0,8
tick,0x7ffdf681f424,11980004,0,0x0,8
tick,0x7ffdf681f424,11981966,0,0x0,8
tick,0x7ffdf681f424,11983997,0,0x0,8
tick,0x7ffdf681f424,11985948,0,0x0,8
tick,0x7ffdf681f424,11987996,0,0x0,8
tick,0x7ffdf681f424,11990010,0,0x0,8
tick,0x7ffdf681f424,11991977,0,0x0,8
tick,0x7ffdf681f424,11993918,0,0x0,8
tick,0x7ffdf681f424,11995915,0,0x0,8
tick,0x7ffdf681f424,11997914,0,0x0,8
tick,0x7ffdf681f424,11999950,0,0x0,8
tick,0x7ffdf681f424,12001934,0,0x0,8
tick,0x7ffdf681f424,12003934,0,0x0,8
tick,0x7ffdf681f424,12007959,0,0x0,8
tick,0x7ffdf681f424,12010185,0,0x0,8
tick,0x7ffdf681f424,12011902,0,0x0,8
tick,0x7ffdf681f424,12013871,0,0x0,8
tick,0x7ffdf681f424,12015914,0,0x0,8
tick,0x7ffdf681f424,12017856,0,0x0,8
tick,0x7ffdf681f424,12019865,0,0x0,8
tick,0x7ffdf681f424,12021903,0,0x0,8
tick,0x7ffdf681f424,12023845,0,0x0,8
tick,0x7ffdf681f424,12025843,0,0x0,8
tick,0x7ffdf681f424,12027829,0,0x0,8
tick,0x7ffdf681f424,12029822,0,0x0,8
tick,0x7ffdf681f424,12031817,0,0x0,8
tick,0x7ffdf681f424,12033846,0,0x0,8
tick,0x7ffdf681f424,12035812,0,0x0,8
tick,0x7ffdf681f424,12037815,0,0x0,8
tick,0x7ffdf681f424,12052012,0,0x0,8
tick,0x7ffdf681f424,12053766,0,0x0,8
tick,0x7ffdf681f424,12055930,0,0x0,8
tick,0x7ffdf681f424,12057810,0,0x0,8
tick,0x7ffdf681f424,12059774,0,0x0,8
tick,0x7ffdf681f424,12061737,0,0x0,8
tick,0x7ffdf681f424,12063743,0,0x0,8
tick,0x7ffdf681f424,12065797,0,0x0,8
tick,0x7ffdf681f424,12067754,0,0x0,8
tick,0x7ffdf681f424,12069718,0,0x0,8
tick,0x7ffdf681f424,12071710,0,0x0,8
tick,0x7ffdf681f424,12073715,0,0x0,8
tick,0x7ffdf681f424,12075709,0,0x0,8
tick,0x7ffdf681f424,12077692,0,0x0,8
tick,0x7ffdf681f424,12079692,0,0x0,8
tick,0x7ffdf681f424,12081683,0,0x0,8
tick,0x7ffdf681f424,12083678,0,0x0,8
tick,0x7ffdf681f424,12085672,0,0x0,8
tick,0x7ffdf681f424,12087672,0,0x0,8
tick,0x7ffdf681f424,12089677,0,0x0,8
tick,0x7ffdf681f424,12091682,0,0x0,8
tick,0x7ffdf681f424,12093655,0,0x0,8
tick,0x7ffdf681f424,12095654,0,0x0,8
tick,0x7ffdf681f424,12097645,0,0x0,8
tick,0x7ffdf681f424,12099648,0,0x0,8
tick,0x7ffdf681f424,12101633,0,0x0,8
tick,0x7ffdf681f424,12103629,0,0x0,8
tick,0x7ffdf681f424,12105641,0,0x0,8
tick,0x7ffdf681f424,12107621,0,0x0,8
tick,0x7ffdf681f424,12109724,0,0x0,8
tick,0x7ffdf681f424,12111637,0,0x0,8
tick,0x7ffdf681f424,12113603,0,0x0,8
tick,0x7ffdf681f424,12115603,0,0x0,8
tick,0x7ffdf681f424,12117598,0,0x0,8
tick,0x7ffdf681f424,12119727,0,0x0,8
tick,0x7ffdf681f424,12128450,0,0x0,8
tick,0x7ffdf681f424,12134500,0,0x0,8
tick,0x7ffdf681f424,12135546,0,0x0,8
tick,0x7ffdf681f424,12137560,0,0x0,8
tick,0x7ffdf681f424,12139537,0,0x0,8
tick,0x7ffdf681f424,12141545,0,0x0,8
tick,0x7ffdf681f424,12143573,0,0x0,8
tick,0x7ffdf681f424,12145548,0,0x0,8
tick,0x7ffdf681f424,12147508,0,0x0,8
tick,0x7ffdf681f424,12149526,0,0x0,8
tick,0x7ffdf681f424,12151520,0,0x0,8
tick,0x7ffdf681f424,12156124,0,0x0,8
tick,0x7ffdf681f424,12160537,0,0x0,8
tick,0x7ffdf681f424,12162683,0,0x0,8
tick,0x7ffdf681f424,12164725,0,0x0,8
tick,0x7ffdf681f424,12166532,0,0x0,8
tick,0x7ffdf681f424,12168840,0,0x0,8
tick,0x7ffdf681f424,12170448,0,0x0,8
tick,0x7ffdf681f424,12172862,0,0x0,8
tick,0x7ffdf681f424,12174445,0,0x0,8
tick,0x7ffdf681f424,12176477,0,0x0,8
tick,0x7ffdf681f424,12178434,0,0x0,8
tick,0x7ffdf681f424,12180420,0,0x0,8
tick,0x7ffdf681f424,12182482,0,0x0,8
tick,0x7ffdf681f424,12184412,0,0x0,8
tick,0x7ffdf681f424,12186432,0,0x0,8
tick,0x7ffdf681f424,12188404,0,0x0,8
tick,0x7ffdf681f424,12190395,0,0x0,8
tick,0x7ffdf681f424,12192388,0,0x0,8
tick,0x7ffdf681f424,12194380,0,0x0,8
tick,0x7ffdf681f424,12196373,0,0x0,8
tick,0x7ffdf681f424,12198381,0,0x0,8
tick,0x7ffdf681f424,12200371,0,0x0,8
tick,0x7ffdf681f424,12215059,0,0x0,8
tick,0x7ffdf681f424,12215093,0,0x0,8
tick,0x7ffdf681f424,12216336,0,0x0,8
tick,0x7ffdf681f424,12218321,0,0x0,8
tick,0x7ffdf681f424,12220628,0,0x0,8
tick,0x7ffdf681f424,12222370,0,0x0,8
tick,0x7ffdf681f424,12224313,0,0x0,8
tick,0x7ffdf681f424,12226299,0,0x0,8
tick,0x7ffdf681f424,12228293,0,0x0,8
tick,0x7ffdf681f424,12230288,0,0x0,8
tick,0x7ffdf681f424,12232280,0,0x0,8
tick,0x7ffdf681f424,12234285,0,0x0,8
tick,0x7ffdf681f424,12236273,0,0x0,8
tick,0x7ffdf681f424,12238528,0,0x0,8
tick,0x7ffdf681f424,12240258,0,0x0,8
tick,0x7ffdf681f424,12242264,0,0x0,8
tick,0x7ffdf681f424,12244251,0,0x0,8
tick,0x7ffdf681f424,12246242,0,0x0,8
tick,0x7ffdf681f424,12248235,0,0x0,8
tick,0x7ffdf681f424,12250277,0,0x0,8
tick,0x7ffdf681f424,12252225,0,0x0,8
tick,0x7ffdf681f424,12254212,0,0x0,8
tick,0x7ffdf681f424,12256221,0,0x0,8
tick,0x7ffdf681f424,12259747,0,0x0,8
tick,0x7ffdf681f424,12261297,0,0x0,8
tick,0x7ffdf681f424,12263777,0,0x0,8
tick,0x7ffdf681f424,12274982,0,0x0,8
tick,0x7ffdf681f424,12276170,0,0x0,8
tick,0x7ffdf681f424,12278175,0,0x0,8
tick,0x7ffdf681f424,12280295,0,0x0,8
tick,0x7ffdf681f424,12282916,0,0x0,8
tick,0x7ffdf681f424,12284333,0,0x0,8
tick,0x7ffdf681f424,12286181,0,0x0,8
tick,0x7ffdf681f424,12288180,0,0x0,8
tick,0x7ffdf681f424,12294280,0,0x0,8
tick,0x7ffdf681f424,12304497,0,0x0,8
tick,0x7ffdf681f424,12306090,0,0x0,8
tick,0x7ffdf681f424,12308137,0,0x0,8
tick,0x7ffdf681f424,12310088,0,0x0,8
tick,0x7ffdf681f424,12312144,0,0x0,8
tick,0x7ffdf681f424,12314070,0,0x0,8
tick,0x7ffdf681f424,12316078,0,0x0,8
tick,0x7ffdf681f424,12318055,0,0x0,8
tick,0x7ffdf681f424,12320048,0,0x0,8
tick,0x7ffdf681f424,12322038,0,0x0,8
tick,0x7ffdf681f424,12324036,0,0x0,8
tick,0x7ffdf681f424,12326036,0,0x0,8
tick,0x7ffdf681f424,12328027,0,0x0,8
tick,0x7ffdf681f424,12330039,0,0x0,8
tick,0x7ffdf681f424,12332021,0,0x0,8
tick,0x7ffdf681f424,12334010,0,0x0,8
tick,0x7ffdf681f424,12336001,0,0x0,8
tick,0x7ffdf681f424,12337999,0,0x0,8
tick,0x7ffdf681f424,12339991,0,0x0,8
tick,0x7ffdf681f424,12341987,0,0x0,8
tick,0x7ffdf681f424,12343981,0,0x0,8
tick,0x7ffdf681f424,12345979,0,0x0,8
tick,0x7ffdf681f424,12347975,0,0x0,8
tick,0x7ffdf681f424,12349966,0,0x0,8
tick,0x7ffdf681f424,12351960,0,0x0,8
tick,0x7ffdf681f424,12353957,0,0x0,8
tick,0x7ffdf681f424,12355956,0,0x0,8
tick,0x7ffdf681f424,12357967,0,0x0,8
tick,0x7ffdf681f424,12359943,0,0x0,8
tick,0x7ffdf681f424,12361931,0,0x0,8
tick,0x7ffdf681f424,12365033,0,0x0,8
tick,0x7ffdf681f424,12377155,0,0x0,8
tick,0x7ffdf681f424,12378900,0,0x0,8
tick,0x7ffdf681f424,12380895,0,0x0,8
tick,0x7ffdf681f424,12382940,0,0x0,8
tick,0x7ffdf681f424,12384944,0,0x0,8
tick,0x7ffdf681f424,12386875,0,0x0,8
tick,0x7ffdf681f424,12389517,0,0x0,8
tick,0x7ffdf681f424,12390879,0,0x0,8
tick,0x7ffdf681f424,12405756,0,0x0,8
tick,0x7ffdf681f424,12406880,0,0x0,8
tick,0x7ffdf681f424,12408812,0,0x0,8
tick,0x7ffdf681f424,12410807,0,0x0,8
tick,0x7ffdf681f424,12412824,0,0x0,8
tick,0x7ffdf681f424,12414824,0,0x0,8
tick,0x7ffdf681f424,12416850,0,0x0,8
tick,0x7ffdf681f424,12418784,0,0x0,8
tick,0x7ffdf681f424,12420777,0,0x0,8
tick,0x7ffdf681f424,12422774,0,0x0,8
tick,0x7ffdf681f424,12424768,0,0x0,8
tick,0x7ffdf681f424,12426773,0,0x0,8
tick,0x7ffdf681f424,12428797,0,0x0,8
tick,0x7ffdf681f424,12430753,0,0x0,8
tick,0x7ffdf681f424,12432749,0,0x0,8
tick,0x7ffdf681f424,12434745,0,0x0,8
tick,0x7ffdf681f424,12436738,0,0x0,8
tick,0x7ffdf681f424,12438743,0,0x0,8
tick,0x7ffdf681f424,12440737,0,0x0,8
tick,0x7ffdf681f424,12442721,0,0x0,8
tick,0x7ffdf681f424,12444713,0,0x0,8
tick,0x7ffdf681f424,12446712,0,0x0,8
tick,0x7ffdf681f424,12448698,0,0x0,8
tick,0x7ffdf681f424,12450706,0,0x0,8
tick,0x7ffdf681f424,12453102,0,0x0,8
tick,0x7ffdf681f424,12454698,0,0x0,8
tick,0x7ffdf681f424,12456686,0,0x0,8
tick,0x7ffdf681f424,12458702,0,0x0,8
tick,0x7ffdf681f424,12460671,0,0x0,8
tick,0x7ffdf681f424,12475910,0,0x0,8
tick,0x7ffdf681f424,12477632,0,0x0,8
tick,0x7ffdf681f424,12479625,0,0x0,8
tick,0x7ffdf681f424,12482731,0,0x0,8
tick,0x7ffdf681f424,12483716,0,0x0,8
tick,0x7ffdf681f424,12485652,0,0x0,8
tick,0x7ffdf681f424,12487609,0,0x0,8
tick,0x7ffdf681f424,12489601,0,0x0,8
tick,0x7ffdf681f424,12491591,0,0x0,8
tick,0x7ffdf681f424,12493588,0,0x0,8
tick,0x7ffdf681f424,12495584,0,0x0,8
tick,0x7ffdf681f424,12497575,0,0x0,8
tick,0x7ffdf681f424,12499572,0,0x0,8
tick,0x7ffdf681f424,12501560,0,0x0,8
tick,0x7ffdf681f424,12503557,0,0x0,8
tick,0x7ffdf681f424,12519484,0,0x0,8
tick,0x7ffdf681f424,12520512,0,0x0,8
tick,0x7ffdf681f424,12522510,0,0x0,8
tick,0x7ffdf681f424,12524638,0,0x0,8
tick,0x7ffdf681f424,12526495,0,0x0,8
tick,0x7ffdf681f424,12528499,0,0x0,8
tick,0x7ffdf681f424,12530564,0,0x0,8
tick,0x7ffdf681f424,12532518,0,0x0,8
tick,0x7ffdf681f424,12534484,0,0x0,8
tick,0x7ffdf681f424,12536468,0,0x0,8
tick,0x7ffdf681f424,12538504,0,0x0,8
tick,0x7ffdf681f424,12540461,0,0x0,8
tick,0x7ffdf681f424,12542462,0,0x0,8
tick,0x7ffdf681f424,12544450,0,0x0,8
tick,0x7ffdf681f424,12546446,0,0x0,8
tick,0x7ffdf681f424,12548435,0,0x0,8
tick,0x7ffdf681f424,12550432,0,0x0,8
tick,0x7ffdf681f424,12552477,0,0x0,8
tick,0x7ffdf681f424,12554422,0,0x0,8
tick,0x7ffdf681f424,12556433,0,0x0,8
tick,0x7ffdf681f424,12558414,0,0x0,8
tick,0x7ffdf681f424,12560419,0,0x0,8
tick,0x7ffdf681f424,12572576,0,0x0,8
tick,0x7ffdf681f424,12574373,0,0x0,8
tick,0x7ffdf681f424,12576444,0,0x0,8
tick,0x7ffdf681f424,12578464,0,0x0,8
tick,0x7ffdf681f424,12580351,0,0x0,8
tick,0x7ffdf681f424,12582353,0,0x0,8
tick,0x7ffdf681f424,12584351,0,0x0,8
tick,0x7ffdf681f424,12586336,0,0x0,8
tick,0x7ffdf681f424,12588328,0,0x0,8
tick,0x7ffdf681f424,12590323,0,0x0,8
tick,0x7ffdf681f424,12592317,0,0x0,8
tick,0x7ffdf681f424,12594316,0,0x0,8
tick,0x7ffdf681f424,12596310,0,0x0,8
tick,0x7ffdf681f424,12598301,0,0x0,8
tick,0x7ffdf681f424,12600297,0,0x0,8
tick,0x7ffdf681f424,12602290,0,0x0,8
tick,0x7ffdf681f424,12604308,0,0x0,8
tick,0x7ffdf681f424,12606376,0,0x0,8
tick,0x7ffdf681f424,12608272,0,0x0,8
tick,0x7ffdf681f424,12610269,0,0x0,8
tick,0x7ffdf681f424,12632574,0,0x0,8
tick,0x7ffdf681f424,12636065,0,0x0,8
tick,0x7ffdf681f424,12641873,0,0x0,8
tick,0x7ffdf681f424,12643183,0,0x0,8
tick,0x7ffdf681f424,12645190,0,0x0,8
tick,0x7ffdf681f424,12647174,0,0x0,8
tick,0x7ffdf681f424,12649902,0,0x0,8
tick,0x7ffdf681f424,12651162,0,0x0,8
tick,0x7ffdf681f424,12653167,0,0x0,8
tick,0x7ffdf681f424,12655160,0,0x0,8
tick,0x7ffdf681f424,12657150,0,0x0,8
tick,0x7ffdf681f424,12659148,0,0x0,8
tick,0x7ffdf681f424,12661132,0,0x0,8
tick,0x7ffdf681f424,12663135,0,0x0,8
tick,0x7ffdf681f424,12665120,0,0x0,8
tick,0x7ffdf681f424,12667118,0,0x0,8
tick,0x7ffdf681f424,12669112,0,0x0,8
tick,0x7ffdf681f424,12671106,0,0x0,8
tick,0x7ffdf681f424,12673121,0,0x0,8
tick,0x7ffdf681f424,12675114,0,0x0,8
tick,0x7ffdf681f424,12677091,0,0x0,8
tick,0x7ffdf681f424,12679473,0,0x0,8
tick,0x7ffdf681f424,12681080,0,0x0,8
tick,0x7ffdf681f424,12683089,0,0x0,8
tick,0x7ffdf681f424,12685080,0,0x0,8
tick,0x7ffdf681f424,12687062,0,0x0,8
tick,0x7ffdf681f424,12689075,0,0x0,8
tick,0x7ffdf681f424,12691049,0,0x0,8
tick,0x7ffdf681f424,12693051,0,0x0,8
tick,0x7ffdf681f424,12695046,0,0x0,8
tick,0x7ffdf681f424,12697056,0,0x0,8
tick,0x7ffdf681f424,12699041,0,0x0,8
tick,0x7ffdf681f424,12704716,0,0x0,8
tick,0x7ffdf681f424,12704815,0,0x0,8
tick,0x7ffdf681f424,12711263,0,0x0,8
tick,0x7ffdf681f424,12715890,0,0x0,8
tick,0x7ffdf681f424,12717625,0,0x0,8
tick,0x7ffdf681f424,12718993,0,0x0,8
tick,0x7ffdf681f424,12721030,0,0x0,8
tick,0x7ffdf681f424,12723826,0,0x0,8
tick,0x7ffdf681f424,12725139,0,0x0,8
tick,0x7ffdf681f424,12727010,0,0x0,8
tick,0x7ffdf681f424,12728956,0,0x0,8
tick,0x7ffdf681f424,12730953,0,0x0,8
tick,0x7ffdf681f424,12732958,0,0x0,8
tick,0x7ffdf681f424,12734943,0,0x0,8
tick,0x7ffdf681f424,12736938,0,0x0,8
tick,0x7ffdf681f424,12739794,0,0x0,8
tick,0x7ffdf681f424,12741839,0,0x0,8
tick,0x7ffdf681f424,12755089,0,0x0,8
tick,0x7ffdf681f424,12756900,0,0x0,8
tick,0x7ffdf681f424,12758880,0,0x0,8
tick,0x7ffdf681f424,12760872,0,0x0,8
tick,0x7ffdf681f424,12762911,0,0x0,8
tick,0x7ffdf681f424,12764871,0,0x0,8
tick,0x7ffdf681f424,12766893,0,0x0,8
tick,0x7ffdf681f424,12768924,0,0x0,8
tick,0x7ffdf681f424,12770932,0,0x0,8
tick,0x7ffdf681f424,12772841,0,0x0,8
tick,0x7ffdf681f424,12774832,0,0x0,8
tick,0x7ffdf681f424,12776828,0,0x0,8
tick,0x7ffdf681f424,12778820,0,0x0,8
tick,0x7ffdf681f424,12780821,0,0x0,8
tick,0x7ffdf681f424,12782814,0,0x0,8
tick,0x7ffdf681f424,12784804,0,0x0,8
tick,0x7ffdf681f424,12786802,0,0x0,8
tick,0x7ffdf681f424,12788794,0,0x0,8
tick,0x7ffdf681f424,12790870,0,0x0,8
tick,0x7ffdf681f424,12793115,0,0x0,8
tick,0x7ffdf681f424,12795121,0,0x0,8
tick,0x7ffdf681f424,12796921,0,0x0,8
tick,0x7ffdf681f424,12799123,0,0x0,8
tick,0x7ffdf681f424,12800776,0,0x0,8
tick,0x7ffdf681f424,12802812,0,0x0,8
tick,0x7ffdf681f424,12804762,0,0x0,8
tick,0x7ffdf681f424,12806800,0,0x0,8
tick,0x7ffdf681f424,12808755,0,0x0,8
tick,0x7ffdf681f424,12810746,0,0x0,8
tick,0x7ffdf681f424,12812741,0,0x0,8
tick,0x7ffdf681f424,12814734,0,0x0,8
tick,0x7ffdf681f424,12816739,0,0x0,8
tick,0x7ffdf681f424,12818726,0,0x0,8
tick,0x7ffdf681f424,12820750,0,0x0,8
tick,0x7ffdf681f424,12822705,0,0x0,8
tick,0x7ffdf681f424,12824701,0,0x0,8
tick,0x7ffdf681f424,12826690,0,0x0,8
tick,0x7ffdf681f424,12828710,0,0x0,8
tick,0x7ffdf681f424,12830685,0,0x0,8
tick,0x7ffdf681f424,12832684,0,0x0,8
tick,0x7ffdf681f424,12836070,0,0x0,8
tick,0x7ffdf681f424,12837676,0,0x0,8
tick,0x7ffdf681f424,12839722,0,0x0,8
tick,0x7ffdf681f424,12841671,0,0x0,8
tick,0x7ffdf681f424,12843730,0,0x0,8
tick,0x7ffdf681f424,12845654,0,0x0,8
tick,0x7ffdf681f424,12847639,0,0x0,8
tick,0x7ffdf681f424,12849631,0,0x0,8
tick,0x7ffdf681f424,12851627,0,0x0,8
tick,0x7ffdf681f424,12853633,0,0x0,8
tick,0x7ffdf681f424,12855694,0,0x0,8
tick,0x7ffdf681f424,12857705,0,0x0,8
tick,0x7ffdf681f424,12859609,0,0x0,8
tick,0x7ffdf681f424,12861595,0,0x0,8
tick,0x7ffdf681f424,12863596,0,0x0,8
tick,0x7ffdf681f424,12865589,0,0x0,8
tick,0x7ffdf681f424,12867593,0,0x0,8
tick,0x7ffdf681f424,12869623,0,0x0,8
tick,0x7ffdf681f424,12871577,0,0x0,8
tick,0x7ffdf681f424,12873562,0,0x0,8
tick,0x7ffdf681f424,12875571,0,0x0,8
tick,0x7ffdf681f424,12877561,0,0x0,8
tick,0x7ffdf681f424,12879550,0,0x0,8
tick,0x7ffdf681f424,12881547,0,0x0,8
tick,0x7ffdf681f424,12883541,0,0x0,8
tick,0x7ffdf681f424,12885536,0,0x0,8
tick,0x7ffdf681f424,12895956,0,0x0,8
tick,0x7ffdf681f424,12897568,0,0x0,8
tick,0x7ffdf681f424,12901143,0,0x0,8
tick,0x7ffdf681f424,12902496,0,0x0,8
tick,0x7ffdf681f424,12904499,0,0x0,8
tick,0x7ffdf681f424,12906536,0,0x0,8
tick,0x7ffdf681f424,12908567,0,0x0,8
tick,0x7ffdf681f424,12910475,0,0x0,8
tick,0x7ffdf681f424,12912466,0,0x0,8
tick,0x7ffdf681f424,12914496,0,0x0,8
tick,0x7ffdf681f424,12916457,0,0x0,8
tick,0x7ffdf681f424,12918453,0,0x0,8
tick,0x7ffdf681f424,12920440,0,0x0,8
tick,0x7ffdf681f424,12922458,0,0x0,8
tick,0x7ffdf681f424,12924438,0,0x0,8
tick,0x7ffdf681f424,12926430,0,0x0,8
tick,0x7ffdf681f424,12928419,0,0x0,8
tick,0x7ffdf681f424,12930418,0,0x0,8
tick,0x7ffdf681f424,12932413,0,0x0,8
tick,0x7ffdf681f424,12934405,0,0x0,8
tick,0x7ffdf681f424,12936398,0,0x0,8
tick,0x7ffdf681f424,12938391,0,0x0,8
tick,0x7ffdf681f424,12940386,0,0x0,8
tick,0x7ffdf681f424,12942397,0,0x0,8
tick,0x7ffdf681f424,12944392,0,0x0,8
tick,0x7ffdf681f424,12946375,0,0x0,8
tick,0x7ffdf681f424,12948364,0,0x0,8
tick,0x7ffdf681f424,12950365,0,0x0,8
tick,0x7ffdf681f424,12956987,0,0x0,8
tick,0x7ffdf681f424,12958460,0,0x0,8
tick,0x7ffdf681f424,12960572,0,0x0,8
tick,0x7ffdf681f424,12968291,0,0x0,8
tick,0x7ffdf681f424,12968346,0,0x0,8
tick,0x7ffdf681f424,12970440,0,0x0,8
tick,0x7ffdf681f424,12972302,0,0x0,8
tick,0x7ffdf681f424,12974310,0,0x0,8
tick,0x7ffdf681f424,12976377,0,0x0,8
tick,0x7ffdf681f424,12978326,0,0x0,8
tick,0x7ffdf681f424,12980322,0,0x0,8
tick,0x7ffdf681f424,12982284,0,0x0,8
tick,0x7ffdf681f424,12984271,0,0x0,8
tick,0x7ffdf681f424,12986267,0,0x0,8
tick,0x7ffdf681f424,12988313,0,0x0,8
tick,0x7ffdf681f424,12990256,0,0x0,8
tick,0x7ffdf681f424,12992253,0,0x0,8
tick,0x7ffdf681f424,12994250,0,0x0,8
tick,0x7ffdf681f424,12996237,0,0x0,8
tick,0x7ffdf681f424,12998231,0,0x0,8
tick,0x7ffdf681f424,13000226,0,0x0,8
tick,0x7ffdf681f424,13014042,0,0x0,8
tick,0x7ffdf681f424,13014086,0,0x0,8
tick,0x7ffdf681f424,13015187,0,0x0,8
tick,0x7ffdf681f424,13017187,0,0x0,8
tick,0x7ffdf681f424,13019192,0,0x0,8
tick,0x7ffdf681f424,13021450,0,0x0,8
tick,0x7ffdf681f424,13023295,0,0x0,8
tick,0x7ffdf681f424,13025163,0,0x0,8
tick,0x7ffdf681f424,13027157,0,0x0,8
tick,0x7ffdf681f424,13029152,0,0x0,8
tick,0x7ffdf681f424,13031143,0,0x0,8
tick,0x7ffdf681f424,13033147,0,0x0,8
tick,0x7ffdf681f424,13035137,0,0x0,8
tick,0x7ffdf681f424,13037127,0,0x0,8
tick,0x7ffdf681f424,13039120,0,0x0,8
tick,0x7ffdf681f424,13041118,0,0x0,8
tick,0x7ffdf681f424,13043113,0,0x0,8
tick,0x7ffdf681f424,13045112,0,0x0,8
tick,0x7ffdf681f424,13047102,0,0x0,8
tick,0x7ffdf681f424,13049092,0,0x0,8
tick,0x7ffdf681f424,13051087,0,0x0,8
tick,0x7ffdf681f424,13053084,0,0x0,8
tick,0x7ffdf681f424,13055078,0,0x0,8
tick,0x7ffdf681f424,13057091,0,0x0,8
tick,0x7ffdf681f424,13059081,0,0x0,8
tick,0x7ffdf681f424,13066141,0,0x0,8
tick,0x7ffdf681f424,13068200,0,0x0,8
tick,0x7ffdf681f424,13070062,0,0x0,8
tick,0x7ffdf681f424,13072100,0,0x0,8
tick,0x7ffdf681f424,13079977,0,0x0,8
tick,0x7ffdf681f424,13081014,0,0x0,8
tick,0x7ffdf681f424,13095505,0,0x0,8
tick,0x7ffdf681f424,13096987,0,0x0,8
tick,0x7ffdf681f424,13098987,0,0x0,8
tick,0x7ffdf681f424,13102366,0,0x0,8
tick,0x7ffdf681f424,13104058,0,0x0,8
tick,0x7ffdf681f424,13106004,0,0x0,8
tick,0x7ffdf681f424,13108330,0,0x0,8
tick,0x7ffdf681f424,13109943,0,0x0,8
tick,0x7ffdf681f424,13112043,0,0x0,8
tick,0x7ffdf681f424,13113927,0,0x0,8
tick,0x7ffdf681f424,13115964,0,0x0,8
tick,0x7ffdf681f424,13117921,0,0x0,8
tick,0x7ffdf681f424,13119938,0,0x0,8
tick,0x7ffdf681f424,13121914,0,0x0,8
tick,0x7ffdf681f424,13123906,0,0x0,8
tick,0x7ffdf681f424,13125901,0,0x0,8
tick,0x7ffdf681f424,13127894,0,0x0,8
tick,0x7ffdf681f424,13129886,0,0x0,8
tick,0x7ffdf681f424,13131905,0,0x0,8
tick,0x7ffdf681f424,13133872,0,0x0,8
tick,0x7ffdf681f424,13135870,0,0x0,8
tick,0x7ffdf681f424,13137863,0,0x0,8
tick,0x7ffdf681f424,13139854,0,0x0,8
tick,0x7ffdf681f424,13141872,0,0x0,8
tick,0x7ffdf681f424,13143847,0,0x0,8
tick,0x7ffdf681f424,13158992,0,0x0,8
tick,0x7ffdf681f424,13160804,0,0x0,8
tick,0x7ffdf681f424,13162909,0,0x0,8
tick,0x7ffdf681f424,13164923,0,0x0,8
tick,0x7ffdf681f424,13166952,0,0x0,8
tick,0x7ffdf681f424,13168792,0,0x0,8
tick,0x7ffdf681f424,13170774,0,0x0,8
tick,0x7ffdf681f424,13172769,0,0x0,8
tick,0x7ffdf681f424,13174762,0,0x0,8
tick,0x7ffdf681f424,13178947,0,0x0,8
tick,0x7ffdf681f424,13191421,0,0x0,8
tick,0x7ffdf681f424,13192721,0,0x0,8
tick,0x7ffdf681f424,13194710,0,0x0,8
tick,0x7ffdf681f424,13196774,0,0x0,8
tick,0x7ffdf681f424,13198744,0,0x0,8
tick,0x7ffdf681f424,13200703,0,0x0,8
tick,0x7ffdf681f424,13202749,0,0x0,8
tick,0x7ffdf681f424,13204750,0,0x0,8
tick,0x7ffdf681f424,13206684,0,0x0,8
tick,0x7ffdf681f424,13208672,0,0x0,8
tick,0x7ffdf681f424,13210666,0,0x0,8
tick,0x7ffdf681f424,13212664,0,0x0,8
tick,0x7ffdf681f424,13214659,0,0x0,8
tick,0x7ffdf681f424,13216650,0,0x0,8
tick,0x7ffdf681f424,13218647,0,0x0,8
tick,0x7ffdf681f424,13220639,0,0x0,8
tick,0x7ffdf681f424,13222661,0,0x0,8
tick,0x7ffdf681f424,13225502,0,0x0,8
tick,0x7ffdf681f424,13237269,0,0x0,8
tick,0x7ffdf681f424,13237301,0,0x0,8
tick,0x7ffdf681f424,13238591,0,0x0,8
tick,0x7ffdf681f424,13240592,0,0x0,8
tick,0x7ffdf681f424,13242652,0,0x0,8
tick,0x7ffdf681f424,13244592,0,0x0,8
tick,0x7ffdf681f424,13248463,0,0x0,8
tick,0x7ffdf681f424,13249614,0,0x0,8
tick,0x7ffdf681f424,13251560,0,0x0,8
tick,0x7ffdf681f424,13253552,0,0x0,8
tick,0x7ffdf681f424,13255542,0,0x0,8
tick,0x7ffdf681f424,13257542,0,0x0,8
tick,0x7ffdf681f424,13259553,0,0x0,8
tick,0x7ffdf681f424,13261530,0,0x0,8
tick,0x7ffdf681f424,13263533,0,0x0,8
tick,0x7ffdf681f424,13265518,0,0x0,8
tick,0x7ffdf681f424,13267513,0,0x0,8
tick,0x7ffdf681f424,13269508,0,0x0,8
tick,0x7ffdf681f424,13271504,0,0x0,8
tick,0x7ffdf681f424,13273505,0,0x0,8
tick,0x7ffdf681f424,13275842,0,0x0,8
tick,0x7ffdf681f424,13277614,0,0x0,8
tick,0x7ffdf681f424,13281028,0,0x0,8
tick,0x7ffdf681f424,13282543,0,0x0,8
tick,0x7ffdf681f424,13284565,0,0x0,8
tick,0x7ffdf681f424,13292446,0,0x0,8
tick,0x7ffdf681f424,13294443,0,0x0,8
tick,0x7ffdf681f424,13296431,0,0x0,8
tick,0x7ffdf681f424,13298432,0,0x0,8
tick,0x7ffdf681f424,13300478,0,0x0,8
tick,0x7ffdf681f424,13302538,0,0x0,8
tick,0x7ffdf681f424,13304435,0,0x0,8
tick,0x7ffdf681f424,13309337,0,0x0,8
tick,0x7ffdf681f424,13310447,0,0x0,8
tick,0x7ffdf681f424,13312397,0,0x0,8
tick,0x7ffdf681f424,13314402,0,0x0,8
tick,0x7ffdf681f424,13316386,0,0x0,8
tick,0x7ffdf681f424,13330651,0,0x0,8
tick,0x7ffdf681f424,13332346,0,0x0,8
tick,0x7ffdf681f424,13334337,0,0x0,8
tick,0x7ffdf681f424,13336342,0,0x0,8
tick,0x7ffdf681f424,13338399,0,0x0,8
tick,0x7ffdf681f424,13340360,0,0x0,8
tick,0x7ffdf681f424,13342389,0,0x0,8
tick,0x7ffdf681f424,13344313,0,0x0,8
tick,0x7ffdf681f424,13346311,0,0x0,8
tick,0x7ffdf681f424,13348298,0,0x0,8
tick,0x7ffdf681f424,13350303,0,0x0,8
tick,0x7ffdf681f424,13352292,0,0x0,8
tick,0x7ffdf681f424,13354286,0,0x0,8
tick,0x7ffdf681f424,13356276,0,0x0,8
tick,0x7ffdf681f424,13358271,0,0x0,8
tick,0x7ffdf681f424,13360262,0,0x0,8
tick,0x7ffdf681f424,13362261,0,0x0,8
tick,0x7ffdf681f424,13364254,0,0x0,8
tick,0x7ffdf681f424,13366249,0,0x0,8
tick,0x7ffdf681f424,13368242,0,0x0,8
tick,0x7ffdf681f424,13370238,0,0x0,8
tick,0x7ffdf681f424,13372239,0,0x0,8
tick,0x7ffdf681f424,13374310,0,0x0,8
tick,0x7ffdf681f424,13376221,0,0x0,8
tick,0x7ffdf681f424,13378219,0,0x0,8
tick,0x7ffdf681f424,13380210,0,0x0,8
tick,0x7ffdf681f424,13382220,0,0x0,8
tick,0x7ffdf681f424,13384825,0,0x0,8
tick,0x7ffdf681f424,13397335,0,0x0,8
tick,0x7ffdf681f424,13400051,0,0x0,8
tick,0x7ffdf681f424,13401165,0,0x0,8
tick,0x7ffdf681f424,13403444,0,0x0,8
tick,0x7ffdf681f424,13405177,0,0x0,8
tick,0x7ffdf681f424,13407230,0,0x0,8
tick,0x7ffdf681f424,13409195,0,0x0,8
tick,0x7ffdf681f424,13411159,0,0x0,8
tick,0x7ffdf681f424,13413124,0,0x0,8
tick,0x7ffdf681f424,13415125,0,0x0,8
tick,0x7ffdf681f424,13417135,0,0x0,8
tick,0x7ffdf681f424,13419743,0,0x0,8
tick,0x7ffdf681f424,13433257,0,0x0,8
tick,0x7ffdf681f424,13435085,0,0x0,8
tick,0x7ffdf681f424,13437061,0,0x0,8
tick,0x7ffdf681f424,13439064,0,0x0,8
tick,0x7ffdf681f424,13441195,0,0x0,8
tick,0x7ffdf681f424,13443115,0,0x0,8
tick,0x7ffdf681f424,13445057,0,0x0,8
tick,0x7ffdf681f424,13447035,0,0x0,8
tick,0x7ffdf681f424,13449065,0,0x0,8
tick,0x7ffdf681f424,13451262,0,0x0,8
tick,0x7ffdf681f424,13453019,0,0x0,8
tick,0x7ffdf681f424,13455022,0,0x0,8
tick,0x7ffdf681f424,13457006,0,0x0,8
tick,0x7ffdf681f424,13459005,0,0x0,8
tick,0x7ffdf681f424,13460997,0,0x0,8
tick,0x7ffdf681f424,13462995,0,0x0,8
tick,0x7ffdf681f424,13464990,0,0x0,8
tick,0x7ffdf681f424,13466981,0,0x0,8
tick,0x7ffdf681f424,13468974,0,0x0,8
tick,0x7ffdf681f424,13470980,0,0x0,8
tick,0x7ffdf681f424,13472967,0,0x0,8
tick,0x7ffdf681f424,13474960,0,0x0,8
tick,0x7ffdf681f424,13476957,0,0x0,8
tick,0x7ffdf681f424,13478951,0,0x0,8
tick,0x7ffdf681f424,13487529,0,0x0,8
tick,0x7ffdf681f424,13496193,0,0x0,8
tick,0x7ffdf681f424,13497900,0,0x0,8
tick,0x7ffdf681f424,13499900,0,0x0,8
tick,0x7ffdf681f424,13501941,0,0x0,8
tick,0x7ffdf681f424,13503972,0,0x0,8
tick,0x7ffdf681f424,13505929,0,0x0,8
tick,0x7ffdf681f424,13507873,0,0x0,8
tick,0x7ffdf681f424,13509884,0,0x0,8
tick,0x7ffdf681f424,13511914,0,0x0,8
tick,0x7ffdf681f424,13513857,0,0x0,8
tick,0x7ffdf681f424,13515854,0,0x0,8
tick,0x7ffdf681f424,13517851,0,0x0,8
tick,0x7ffdf681f424,13519841,0,0x0,8
tick,0x7ffdf681f424,13521831,0,0x0,8
tick,0x7ffdf681f424,13523835,0,0x0,8
tick,0x7ffdf681f424,13525830,0,0x0,8
tick,0x7ffdf681f424,13528126,0,0x0,8
tick,0x7ffdf681f424,13529853,0,0x0,8
tick,0x7ffdf681f424,13531805,0,0x0,8
tick,0x7ffdf681f424,13533803,0,0x0,8
tick,0x7ffdf681f424,13535805,0,0x0,8
tick,0x7ffdf681f424,13537803,0,0x0,8
tick,0x7ffdf681f424,13539796,0,0x0,8
tick,0x7ffdf681f424,13541782,0,0x0,8
tick,0x7ffdf681f424,13543774,0,0x0,8
tick,0x7ffdf681f424,13545776,0,0x0,8
tick,0x7ffdf681f424,13552871,0,0x0,8
tick,0x7ffdf681f424,13564233,0,0x0,8
tick,0x7ffdf681f424,13565720,0,0x0,8
tick,0x7ffdf681f424,13567715,0,0x0,8
tick,0x7ffdf681f424,13570835,0,0x0,8
tick,0x7ffdf681f424,13586491,0,0x0,8
tick,0x7ffdf681f424,13586542,0,0x0,8
tick,0x7ffdf681f424,13587679,0,0x0,8
tick,0x7ffdf681f424,13589662,0,0x0,8
tick,0x7ffdf681f424,13592178,0,0x0,8
tick,0x7ffdf681f424,13593676,0,0x0,8
tick,0x7ffdf681f424,13595642,0,0x0,8
tick,0x7ffdf681f424,13597634,0,0x0,8
tick,0x7ffdf681f424,13599631,0,0x0,8
tick,0x7ffdf681f424,13601620,0,0x0,8
tick,0x7ffdf681f424,13603612,0,0x0,8
tick,0x7ffdf681f424,13605610,0,0x0,8
tick,0x7ffdf681f424,13607674,0,0x0,8
tick,0x7ffdf681f424,13609595,0,0x0,8
tick,0x7ffdf681f424,13611593,0,0x0,8
tick,0x7ffdf681f424,13613592,0,0x0,8
tick,0x7ffdf681f424,13615583,0,0x0,8
tick,0x7ffdf681f424,13617577,0,0x0,8
tick,0x7ffdf681f424,13619583,0,0x0,8
tick,0x7ffdf681f424,13621600,0,0x0,8
tick,0x7ffdf681f424,13623566,0,0x0,8
tick,0x7ffdf681f424,13625557,0,0x0,8
tick,0x7ffdf681f424,13627553,0,0x0,8
tick,0x7ffdf681f424,13629543,0,0x0,8
tick,0x7ffdf681f424,13631559,0,0x0,8
tick,0x7ffdf681f424,13633534,0,0x0,8
tick,0x7ffdf681f424,13635535,0,0x0,8
tick,0x7ffdf681f424,13637525,0,0x0,8
tick,0x7ffdf681f424,13639515,0,0x0,8
tick,0x7ffdf681f424,13641517,0,0x0,8
tick,0x7ffdf681f424,13643508,0,0x0,8
tick,0x7ffdf681f424,13645625,0,0x0,8
tick,0x7ffdf681f424,13657845,0,0x0,8
tick,0x7ffdf681f424,13659473,0,0x0,8
tick,0x7ffdf681f424,13661462,0,0x0,8
tick,0x7ffdf681f424,13663560,0,0x0,8
tick,0x7ffdf681f424,13665473,0,0x0,8
tick,0x7ffdf681f424,13667473,0,0x0,8
tick,0x7ffdf681f424,13669441,0,0x0,8
tick,0x7ffdf681f424,13671430,0,0x0,8
tick,0x7ffdf681f424,13673425,0,0x0,8
tick,0x7ffdf681f424,13675431,0,0x0,8
tick,0x7ffdf681f424,13677418,0,0x0,8
tick,0x7ffdf681f424,13679454,0,0x0,8
tick,0x7ffdf681f424,13681442,0,0x0,8
tick,0x7ffdf681f424,13683406,0,0x0,8
tick,0x7ffdf681f424,13685403,0,0x0,8
tick,0x7ffdf681f424,13687525,0,0x0,8
tick,0x7ffdf681f424,13690806,0,0x0,8
tick,0x7ffdf681f424,13694617,0,0x0,8
tick,0x7ffdf681f424,13704114,0,0x0,8
tick,0x7ffdf681f424,13705345,0,0x0,8
tick,0x7ffdf681f424,13707341,0,0x0,8
tick,0x7ffdf681f424,13709343,0,0x0,8
tick,0x7ffdf681f424,13711356,0,0x0,8
tick,0x7ffdf681f424,13713350,0,0x0,8
tick,0x7ffdf681f424,13715325,0,0x0,8
tick,0x7ffdf681f424,13717523,0,0x0,8
tick,0x7ffdf681f424,13719313,0,0x0,8
tick,0x7ffdf681f424,13721307,0,0x0,8
tick,0x7ffdf681f424,13723295,0,0x0,8
tick,0x7ffdf681f424,13725309,0,0x0,8
tick,0x7ffdf681f424,13727284,0,0x0,8
tick,0x7ffdf681f424,13729280,0,0x0,8
tick,0x7ffdf681f424,13731277,0,0x0,8
tick,0x7ffdf681f424,13733280,0,0x0,8
tick,0x7ffdf681f424,13746321,0,0x0,8
tick,0x7ffdf681f424,13748240,0,0x0,8
tick,0x7ffdf681f424,13750234,0,0x0,8
tick,0x7ffdf681f424,13752865,0,0x0,8
tick,0x7ffdf681f424,13754350,0,0x0,8
tick,0x7ffdf681f424,13756379,0,0x0,8
tick,0x7ffdf681f424,13758226,0,0x0,8
tick,0x7ffdf681f424,13760211,0,0x0,8
tick,0x7ffdf681f424,13762193,0,0x0,8
tick,0x7ffdf681f424,13764194,0,0x0,8
tick,0x7ffdf681f424,13766203,0,0x0,8
tick,0x7ffdf681f424,13768182,0,0x0,8
tick,0x7ffdf681f424,13770167,0,0x0,8
tick,0x7ffdf681f424,13772166,0,0x0,8
tick,0x7ffdf681f424,13774159,0,0x0,8
tick,0x7ffdf681f424,13776163,0,0x0,8
tick,0x7ffdf681f424,13778162,0,0x0,8
tick,0x7ffdf681f424,13780142,0,0x0,8
tick,0x7ffdf681f424,13782137,0,0x0,8
tick,0x7ffdf681f424,13784134,0,0x0,8
tick,0x7ffdf681f424,13786127,0,0x0,8
tick,0x7ffdf681f424,13788118,0,0x0,8
tick,0x7ffdf681f424,13790133,0,0x0,8
tick,0x7ffdf681f424,13792163,0,0x0,8
tick,0x7ffdf681f424,13794104,0,0x0,8
tick,0x7ffdf681f424,13808557,0,0x0,8
tick,0x7ffdf681f424,13808593,0,0x0,8
tick,0x7ffdf681f424,13810067,0,0x0,8
tick,0x7ffdf681f424,13812177,0,0x0,8
tick,0x7ffdf681f424,13814136,0,0x0,8
tick,0x7ffdf681f424,13816358,0,0x0,8
tick,0x7ffdf681f424,13818064,0,0x0,8
tick,0x7ffdf681f424,13820063,0,0x0,8
tick,0x7ffdf681f424,13822064,0,0x0,8
tick,0x7ffdf681f424,13824033,0,0x0,8
tick,0x7ffdf681f424,13826023,0,0x0,8
tick,0x7ffdf681f424,13828046,0,0x0,8
tick,0x7ffdf681f424,13830011,0,0x0,8
tick,0x7ffdf681f424,13832017,0,0x0,8
tick,0x7ffdf681f424,13834008,0,0x0,8
tick,0x7ffdf681f424,13835996,0,0x0,8
tick,0x7ffdf681f424,13838000,0,0x0,8
tick,0x7ffdf681f424,13839982,0,0x0,8
tick,0x7ffdf681f424,13841978,0,0x0,8
tick,0x7ffdf681f424,13843974,0,0x0,8
tick,0x7ffdf681f424,13845963,0,0x0,8
tick,0x7ffdf681f424,13847963,0,0x0,8
tick,0x7ffdf681f424,13849968,0,0x0,8
tick,0x7ffdf681f424,13851958,0,0x0,8
tick,0x7ffdf681f424,13853945,0,0x0,8
tick,0x7ffdf681f424,13855950,0,0x0,8
tick,0x7ffdf681f424,13871563,0,0x0,8
tick,0x7ffdf681f424,13872910,0,0x0,8
tick,0x7ffdf681f424,13874954,0,0x0,8
tick,0x7ffdf681f424,13876911,0,0x0,8
tick,0x7ffdf681f424,13878881,0,0x0,8
tick,0x7ffdf681f424,13880874,0,0x0,8
tick,0x7ffdf681f424,13882872,0,0x0,8
tick,0x7ffdf681f424,13899349,0,0x0,8
tick,0x7ffdf681f424,13900834,0,0x0,8
tick,0x7ffdf681f424,13902814,0,0x0,8
tick,0x7ffdf681f424,13905346,0,0x0,8
tick,0x7ffdf681f424,13906806,0,0x0,8
tick,0x7ffdf681f424,13908856,0,0x0,8
tick,0x7ffdf681f424,13910792,0,0x0,8
tick,0x7ffdf681f424,13912791,0,0x0,8
tick,0x7ffdf681f424,13914790,0,0x0,8
tick,0x7ffdf681f424,13916794,0,0x0,8
tick,0x7ffdf681f424,13918774,0,0x0,8
tick,0x7ffdf681f424,13920771,0,0x0,8
tick,0x7ffdf681f424,13922764,0,0x0,8
tick,0x7ffdf681f424,13924759,0,0x0,8
tick,0x7ffdf681f424,13926757,0,0x0,8
tick,0x7ffdf681f424,13928765,0,0x0,8
tick,0x7ffdf681f424,13930740,0,0x0,8
tick,0x7ffdf681f424,13932746,0,0x0,8
tick,0x7ffdf681f424,13934735,0,0x0,8
tick,0x7ffdf681f424,13936724,0,0x0,8
tick,0x7ffdf681f424,13938719,0,0x0,8
tick,0x7ffdf681f424,13940716,0,0x0,8
tick,0x7ffdf681f424,13942722,0,0x0,8
tick,0x7ffdf681f424,13944846,0,0x0,8
tick,0x7ffdf681f424,13946696,0,0x0,8
tick,0x7ffdf681f424,13948691,0,0x0,8
tick,0x7ffdf681f424,13950691,0,0x0,8
tick,0x7ffdf681f424,13952679,0,0x0,8
tick,0x7ffdf681f424,13954676,0,0x0,8
tick,0x7ffdf681f424,13956669,0,0x0,8
tick,0x7ffdf681f424,13958675,0,0x0,8
tick,0x7ffdf681f424,13971882,0,0x0,8
tick,0x7ffdf681f424,13973627,0,0x0,8
tick,0x7ffdf681f424,13975628,0,0x0,8
tick,0x7ffdf681f424,13977662,0,0x0,8
tick,0x7ffdf681f424,13979612,0,0x0,8
tick,0x7ffdf681f424,13981613,0,0x0,8
tick,0x7ffdf681f424,13983602,0,0x0,8
tick,0x7ffdf681f424,13985592,0,0x0,8
tick,0x7ffdf681f424,13988116,0,0x0,8
tick,0x7ffdf681f424,13989715,0,0x0,8
tick,0x7ffdf681f424,13991655,0,0x0,8
tick,0x7ffdf681f424,13993581,0,0x0,8
tick,0x7ffdf681f424,13995573,0,0x0,8
tick,0x7ffdf681f424,13997666,0,0x0,8
tick,0x7ffdf681f424,13999565,0,0x0,8
tick,0x7ffdf681f424,14001561,0,0x0,8
tick,0x7ffdf681f424,14009483,0,0x0,8
tick,0x7ffdf681f424,14010530,0,0x0,8
tick,0x7ffdf681f424,14012523,0,0x0,8
tick,0x7ffdf681f424,14014664,0,0x0,8
tick,0x7ffdf681f424,14016526,0,0x0,8
tick,0x7ffdf681f424,14018523,0,0x0,8
tick,0x7ffdf681f424,14020515,0,0x0,8
tick,0x7ffdf681f424,14022495,0,0x0,8
tick,0x7ffdf681f424,14024490,0,0x0,8
tick,0x7ffdf681f424,14026492,0,0x0,8
tick,0x7ffdf681f424,14028477,0,0x0,8
tick,0x7ffdf681f424,14030478,0,0x0,8
tick,0x7ffdf681f424,14032475,0,0x0,8
tick,0x7ffdf681f424,14034465,0,0x0,8
tick,0x7ffdf681f424,14036457,0,0x0,8
tick,0x7ffdf681f424,14038457,0,0x0,8
tick,0x7ffdf681f424,14040457,0,0x0,8
tick,0x7ffdf681f424,14042484,0,0x0,8
tick,0x7ffdf681f424,14044449,0,0x0,8
tick,0x7ffdf681f424,14046432,0,0x0,8
tick,0x7ffdf681f424,14048425,0,0x0,8
tick,0x7ffdf681f424,14050423,0,0x0,8
tick,0x7ffdf681f424,14052419,0,0x0,8
tick,0x7ffdf681f424,14054459,0,0x0,8
tick,0x7ffdf681f424,14056412,0,0x0,8
tick,0x7ffdf681f424,14058426,0,0x0,8
tick,0x7ffdf681f424,14060400,0,0x0,8
tick,0x7ffdf681f424,14073555,0,0x0,8
tick,0x7ffdf681f424,14075362,0,0x0,8
tick,0x7ffdf681f424,14077424,0,0x0,8
tick,0x7ffdf681f424,14079421,0,0x0,8
tick,0x7ffdf681f424,14081375,0,0x0,8
tick,0x7ffdf681f424,14083343,0,0x0,8
tick,0x7ffdf681f424,14085333,0,0x0,8
tick,0x7ffdf681f424,14087348,0,0x0,8
tick,0x7ffdf681f424,14089318,0,0x0,8
tick,0x7ffdf681f424,14091312,0,0x0,8
tick,0x7ffdf681f424,14093305,0,0x0,8
tick,0x7ffdf681f424,14095303,0,0x0,8
tick,0x7ffdf681f424,14097293,0,0x0,8
tick,0x7ffdf681f424,14099288,0,0x0,8
tick,0x7ffdf681f424,14101288,0,0x0,8
tick,0x7ffdf681f424,14103276,0,0x0,8
tick,0x7ffdf681f424,14105273,0,0x0,8
tick,0x7ffdf681f424,14107267,0,0x0,8
tick,0x7ffdf681f424,14109262,0,0x0,8
tick,0x7ffdf681f424,14119212,0,0x0,8
tick,0x7ffdf681f424,14120744,0,0x0,8
tick,0x7ffdf681f424,14125775,0,0x0,8
tick,0x7ffdf681f424,14127225,0,0x0,8
tick,0x7ffdf681f424,14129258,0,0x0,8
tick,0x7ffdf681f424,14131260,0,0x0,8
tick,0x7ffdf681f424,14133333,0,0x0,8
tick,0x7ffdf681f424,14135229,0,0x0,8
tick,0x7ffdf681f424,14137251,0,0x0,8
tick,0x7ffdf681f424,14139195,0,0x0,8
tick,0x7ffdf681f424,14141218,0,0x0,8
tick,0x7ffdf681f424,14143264,0,0x0,8
tick,0x7ffdf681f424,14145170,0,0x0,8
tick,0x7ffdf681f424,14147164,0,0x0,8
tick,0x7ffdf681f424,14149157,0,0x0,8
tick,0x7ffdf681f424,14151455,0,0x0,8
tick,0x7ffdf681f424,14164369,0,0x0,8
tick,0x7ffdf681f424,14166146,0,0x0,8
tick,0x7ffdf681f424,14168181,0,0x0,8
tick,0x7ffdf681f424,14170135,0,0x0,8
tick,0x7ffdf681f424,14172118,0,0x0,8
tick,0x7ffdf681f424,14174217,0,0x0,8
tick,0x7ffdf681f424,14176086,0,0x0,8
tick,0x7ffdf681f424,14178082,0,0x0,8
tick,0x7ffdf681f424,14180073,0,0x0,8
tick,0x7ffdf681f424,14182065,0,0x0,8
tick,0x7ffdf681f424,14184093,0,0x0,8
tick,0x7ffdf681f424,14186072,0,0x0,8
tick,0x7ffdf681f424,14188050,0,0x0,8
tick,0x7ffdf681f424,14190044,0,0x0,8
tick,0x7ffdf681f424,14192053,0,0x0,8
tick,0x7ffdf681f424,14194038,0,0x0,8
tick,0x7ffdf681f424,14196028,0,0x0,8
tick,0x7ffdf681f424,14198028,0,0x0,8
tick,0x7ffdf681f424,14200020,0,0x0,8
tick,0x7ffdf681f424,14202014,0,0x0,8
tick,0x7ffdf681f424,14204010,0,0x0,8
tick,0x7ffdf681f424,14206005,0,0x0,8
tick,0x7ffdf681f424,14208018,0,0x0,8
tick,0x7ffdf681f424,14209996,0,0x0,8
tick,0x7ffdf681f424,14226002,0,0x0,8
tick,0x7ffdf681f424,14227958,0,0x0,8
tick,0x7ffdf681f424,14242055,0,0x0,8
tick,0x7ffdf681f424,14244041,0,0x0,8
tick,0x7ffdf681f424,14245980,0,0x0,8
tick,0x7ffdf681f424,14248018,0,0x0,8
tick,0x7ffdf681f424,14249888,0,0x0,8
tick,0x7ffdf681f424,14251954,0,0x0,8
tick,0x7ffdf681f424,14253921,0,0x0,8
tick,0x7ffdf681f424,14255944,0,0x0,8
tick,0x7ffdf681f424,14257869,0,0x0,8
tick,0x7ffdf681f424,14259863,0,0x0,8
tick,0x7ffdf681f424,14261867,0,0x0,8
tick,0x7ffdf681f424,14263847,0,0x0,8
tick,0x7ffdf681f424,14265846,0,0x0,8
tick,0x7ffdf681f424,14267844,0,0x0,8
tick,0x7ffdf681f424,14269861,0,0x0,8
tick,0x7ffdf681f424,14271837,0,0x0,8
tick,0x7ffdf681f424,14273824,0,0x0,8
tick,0x7ffdf681f424,14275823,0,0x0,8
tick,0x7ffdf681f424,14277814,0,0x0,8
tick,0x7ffdf681f424,14279820,0,0x0,8
tick,0x7ffdf681f424,14281801,0,0x0,8
tick,0x7ffdf681f424,14283803,0,0x0,8
tick,0x7ffdf681f424,14285788,0,0x0,8
tick,0x7ffdf681f424,14287784,0,0x0,8
tick,0x7ffdf681f424,14289777,0,0x0,8
tick,0x7ffdf681f424,14291782,0,0x0,8
tick,0x7ffdf681f424,14293796,0,0x0,8
tick,0x7ffdf681f424,14295768,0,0x0,8
tick,0x7ffdf681f424,14297770,0,0x0,8
tick,0x7ffdf681f424,14299757,0,0x0,8
tick,0x7ffdf681f424,14309707,0,0x0,8
tick,0x7ffdf681f424,14315395,0,0x0,8
tick,0x7ffdf681f424,14316715,0,0x0,8
tick,0x7ffdf681f424,14318722,0,0x0,8
tick,0x7ffdf681f424,14323669,0,0x0,8
tick,0x7ffdf681f424,14324826,0,0x0,8
tick,0x7ffdf681f424,14329031,0,0x0,8
tick,0x7ffdf681f424,14331671,0,0x0,8
tick,0x7ffdf681f424,14336708,0,0x0,8
tick,0x7ffdf681f424,14338661,0,0x0,8
tick,0x7ffdf681f424,14340671,0,0x0,8
tick,0x7ffdf681f424,14342647,0,0x0,8
tick,0x7ffdf681f424,14344639,0,0x0,8
tick,0x7ffdf681f424,14346667,0,0x0,8
tick,0x7ffdf681f424,14348650,0,0x0,8
tick,0x7ffdf681f424,14350641,0,0x0,8
tick,0x7ffdf681f424,14352667,0,0x0,8
tick,0x7ffdf681f424,14354666,0,0x0,8
tick,0x7ffdf681f424,14356751,0,0x0,8
tick,0x7ffdf681f424,14358614,0,0x0,8
tick,0x7ffdf681f424,14360593,0,0x0,8
tick,0x7ffdf681f424,14362612,0,0x0,8
tick,0x7ffdf681f424,14364618,0,0x0,8
tick,0x7ffdf681f424,14366586,0,0x0,8
tick,0x7ffdf681f424,14368655,0,0x0,8
tick,0x7ffdf681f424,14370569,0,0x0,8
tick,0x7ffdf681f424,14372564,0,0x0,8
tick,0x7ffdf681f424,14374562,0,0x0,8
tick,0x7ffdf681f424,14376560,0,0x0,8
tick,0x7ffdf681f424,14378552,0,0x0,8
tick,0x7ffdf681f424,14380540,0,0x0,8
tick,0x7ffdf681f424,14382532,0,0x0,8
tick,0x7ffdf681f424,14384529,0,0x0,8
tick,0x7ffdf681f424,14386521,0,0x0,8
tick,0x7ffdf681f424,14388522,0,0x0,8
tick,0x7ffdf681f424,14390507,0,0x0,8
tick,0x7ffdf681f424,14392510,0,0x0,8
tick,0x7ffdf681f424,14394533,0,0x0,8
tick,0x7ffdf681f424,14396513,0,0x0,8
tick,0x7ffdf681f424,14399346,0,0x0,8
tick,0x7ffdf681f424,14400542,0,0x0,8
tick,0x7ffdf681f424,14411263,0,0x0,8
tick,0x7ffdf681f424,14412451,0,0x0,8
tick,0x7ffdf681f424,14414451,0,0x0,8
tick,0x7ffdf681f424,14416511,0,0x0,8
tick,0x7ffdf681f424,14418513,0,0x0,8
tick,0x7ffdf681f424,14420432,0,0x0,8
tick,0x7ffdf681f424,14422424,0,0x0,8
tick,0x7ffdf681f424,14424451,0,0x0,8
tick,0x7ffdf681f424,14426531,0,0x0,8
tick,0x7ffdf681f424,14441340,0,0x0,8
tick,0x7ffdf681f424,14442377,0,0x0,8
tick,0x7ffdf681f424,14444373,0,0x0,8
tick,0x7ffdf681f424,14446367,0,0x0,8
tick,0x7ffdf681f424,14448370,0,0x0,8
tick,0x7ffdf681f424,14450453,0,0x0,8
tick,0x7ffdf681f424,14452363,0,0x0,8
tick,0x7ffdf681f424,14454379,0,0x0,8
tick,0x7ffdf681f424,14456357,0,0x0,8
tick,0x7ffdf681f424,14458342,0,0x0,8
tick,0x7ffdf681f424,14460338,0,0x0,8
tick,0x7ffdf681f424,14462324,0,0x0,8
tick,0x7ffdf681f424,14464318,0,0x0,8
tick,0x7ffdf681f424,14466345,0,0x0,8
tick,0x7ffdf681f424,14468312,0,0x0,8
tick,0x7ffdf681f424,14470300,0,0x0,8
tick,0x7ffdf681f424,14472302,0,0x0,8
tick,0x7ffdf681f424,14474299,0,0x0,8
tick,0x7ffdf681f424,14476290,0,0x0,8
tick,0x7ffdf681f424,14478277,0,0x0,8
tick,0x7ffdf681f424,14480272,0,0x0,8
tick,0x7ffdf681f424,14482268,0,0x0,8
tick,0x7ffdf681f424,14484259,0,0x0,8
tick,0x7ffdf681f424,14486251,0,0x0,8
tick,0x7ffdf681f424,14488252,0,0x0,8
tick,0x7ffdf681f424,14501684,0,0x0,8
tick,0x7ffdf681f424,14503210,0,0x0,8
tick,0x7ffdf681f424,14505263,0,0x0,8
tick,0x7ffdf681f424,14507228,0,0x0,8
tick,0x7ffdf681f424,14509221,0,0x0,8
tick,0x7ffdf681f424,14511200,0,0x0,8
tick,0x7ffdf681f424,14513188,0,0x0,8
tick,0x7ffdf681f424,14515190,0,0x0,8
tick,0x7ffdf681f424,14517181,0,0x0,8
tick,0x7ffdf681f424,14519167,0,0x0,8
tick,0x7ffdf681f424,14521161,0,0x0,8
tick,0x7ffdf681f424,14523202,0,0x0,8
tick,0x7ffdf681f424,14525154,0,0x0,8
tick,0x7ffdf681f424,14529191,0,0x0,8
tick,0x7ffdf681f424,14542810,0,0x0,8
tick,0x7ffdf681f424,14544101,0,0x0,8
tick,0x7ffdf681f424,14546133,0,0x0,8
tick,0x7ffdf681f424,14548093,0,0x0,8
tick,0x7ffdf681f424,14550106,0,0x0,8
tick,0x7ffdf681f424,14552123,0,0x0,8
tick,0x7ffdf681f424,14554079,0,0x0,8
tick,0x7ffdf681f424,14556070,0,0x0,8
tick,0x7ffdf681f424,14558065,0,0x0,8
tick,0x7ffdf681f424,14560059,0,0x0,8
tick,0x7ffdf681f424,14562052,0,0x0,8
tick,0x7ffdf681f424,14564054,0,0x0,8
tick,0x7ffdf681f424,14566040,0,0x0,8
tick,0x7ffdf681f424,14568039,0,0x0,8
tick,0x7ffdf681f424,14570034,0,0x0,8
tick,0x7ffdf681f424,14572025,0,0x0,8
tick,0x7ffdf681f424,14574025,0,0x0,8
tick,0x7ffdf681f424,14576014,0,0x0,8
tick,0x7ffdf681f424,14578007,0,0x0,8
tick,0x7ffdf681f424,14580005,0,0x0,8
tick,0x7ffdf681f424,14581996,0,0x0,8
tick,0x7ffdf681f424,14583993,0,0x0,8
tick,0x7ffdf681f424,14601144,0,0x0,8
tick,0x7ffdf681f424,14602948,0,0x0,8
tick,0x7ffdf681f424,14604979,0,0x0,8
tick,0x7ffdf681f424,14606986,0,0x0,8
tick,0x7ffdf681f424,14608974,0,0x0,8
tick,0x7ffdf681f424,14610930,0,0x0,8
tick,0x7ffdf681f424,14612917,0,0x0,8
tick,0x7ffdf681f424,14614908,0,0x0,8
tick,0x7ffdf681f424,14616907,0,0x0,8
tick,0x7ffdf681f424,14618898,0,0x0,8
tick,0x7ffdf681f424,14623193,0,0x0,8
tick,0x7ffdf681f424,14624905,0,0x0,8
tick,0x7ffdf681f424,14626878,0,0x0,8
tick,0x7ffdf681f424,14628871,0,0x0,8
tick,0x7ffdf681f424,14630866,0,0x0,8
tick,0x7ffdf681f424,14632859,0,0x0,8
tick,0x7ffdf681f424,14634856,0,0x0,8
tick,0x7ffdf681f424,14636848,0,0x0,8
tick,0x7ffdf681f424,14638841,0,0x0,8
tick,0x7ffdf681f424,14640838,0,0x0,8
tick,0x7ffdf681f424,14642852,0,0x0,8
tick,0x7ffdf681f424,14644918,0,0x0,8
tick,0x7ffdf681f424,14646826,0,0x0,8
tick,0x7ffdf681f424,14648843,0,0x0,8
tick,0x7ffdf681f424,14650827,0,0x0,8
tick,0x7ffdf681f424,14652812,0,0x0,8
tick,0x7ffdf681f424,14654810,0,0x0,8
tick,0x7ffdf681f424,14668252,0,0x0,8
tick,0x7ffdf681f424,14669769,0,0x0,8
tick,0x7ffdf681f424,14671769,0,0x0,8
tick,0x7ffdf681f424,14673785,0,0x0,8
tick,0x7ffdf681f424,14675848,0,0x0,8
tick,0x7ffdf681f424,14677785,0,0x0,8
tick,0x7ffdf681f424,14679757,0,0x0,8
tick,0x7ffdf681f424,14681845,0,0x0,8
tick,0x7ffdf681f424,14683754,0,0x0,8
tick,0x7ffdf681f424,14685870,0,0x0,8
tick,0x7ffdf681f424,14687727,0,0x0,8
tick,0x7ffdf681f424,14689773,0,0x0,8
tick,0x7ffdf681f424,14691719,0,0x0,8
tick,0x7ffdf681f424,14693761,0,0x0,8
tick,0x7ffdf681f424,14699271,0,0x0,8
tick,0x7ffdf681f424,14700691,0,0x0,8
tick,0x7ffdf681f424,14702676,0,0x0,8
tick,0x7ffdf681f424,14704669,0,0x0,8
tick,0x7ffdf681f424,14706662,0,0x0,8
tick,0x7ffdf681f424,14708658,0,0x0,8
tick,0x7ffdf681f424,14710656,0,0x0,8
tick,0x7ffdf681f424,14712699,0,0x0,8
tick,0x7ffdf681f424,14714664,0,0x0,8
tick,0x7ffdf681f424,14716648,0,0x0,8
tick,0x7ffdf681f424,14718638,0,0x0,8
tick,0x7ffdf681f424,14720632,0,0x0,8
tick,0x7ffdf681f424,14722625,0,0x0,8
tick,0x7ffdf681f424,14724618,0,0x0,8
tick,0x7ffdf681f424,14726666,0,0x0,8
tick,0x7ffdf681f424,14728672,0,0x0,8
tick,0x7ffdf681f424,14730599,0,0x0,8
tick,0x7ffdf681f424,14732603,0,0x0,8
tick,0x7ffdf681f424,14746310,0,0x0,8
tick,0x7ffdf681f424,14747558,0,0x0,8
tick,0x7ffdf681f424,14750819,0,0x0,8
tick,0x7ffdf681f424,14752654,0,0x0,8
tick,0x7ffdf681f424,14755094,0,0x0,8
tick,0x7ffdf681f424,14756546,0,0x0,8
tick,0x7ffdf681f424,14758551,0,0x0,8
tick,0x7ffdf681f424,14760549,0,0x0,8
tick,0x7ffdf681f424,14762516,0,0x0,8
tick,0x7ffdf681f424,14764508,0,0x0,8
tick,0x7ffdf681f424,14766551,0,0x0,8
tick,0x7ffdf681f424,14768504,0,0x0,8
tick,0x7ffdf681f424,14770500,0,0x0,8
tick,0x7ffdf681f424,14772489,0,0x0,8
tick,0x7ffdf681f424,14774539,0,0x0,8
tick,0x7ffdf681f424,14776487,0,0x0,8
tick,0x7ffdf681f424,14778479,0,0x0,8
tick,0x7ffdf681f424,14780470,0,0x0,8
tick,0x7ffdf681f424,14782466,0,0x0,8
tick,0x7ffdf681f424,14784458,0,0x0,8
tick,0x7ffdf681f424,14786521,0,0x0,8
tick,0x7ffdf681f424,14788452,0,0x0,8
tick,0x7ffdf681f424,14790438,0,0x0,8
tick,0x7ffdf681f424,14792437,0,0x0,8
tick,0x7ffdf681f424,14794430,0,0x0,8
tick,0x7ffdf681f424,14796422,0,0x0,8
tick,0x7ffdf681f424,14798423,0,0x0,8
tick,0x7ffdf681f424,14800421,0,0x0,8
tick,0x7ffdf681f424,14802409,0,0x0,8
tick,0x7ffdf681f424,14804401,0,0x0,8
tick,0x7ffdf681f424,14816783,0,0x0,8
tick,0x7ffdf681f424,14818369,0,0x0,8
tick,0x7ffdf681f424,14820405,0,0x0,8
tick,0x7ffdf681f424,14822386,0,0x0,8
tick,0x7ffdf681f424,14824401,0,0x0,8
tick,0x7ffdf681f424,14826347,0,0x0,8
tick,0x7ffdf681f424,14828343,0,0x0,8
tick,0x7ffdf681f424,14830380,0,0x0,8
tick,0x7ffdf681f424,14833117,0,0x0,8
tick,0x7ffdf681f424,14834567,0,0x0,8
tick,0x7ffdf681f424,14836332,0,0x0,8
tick,0x7ffdf681f424,14838320,0,0x0,8
tick,0x7ffdf681f424,14849204,0,0x0,8
tick,0x7ffdf681f424,14850281,0,0x0,8
tick,0x7ffdf681f424,14852279,0,0x0,8
tick,0x7ffdf681f424,14854320,0,0x0,8
tick,0x7ffdf681f424,14856326,0,0x0,8
tick,0x7ffdf681f424,14858316,0,0x0,8
tick,0x7ffdf681f424,14860256,0,0x0,8
tick,0x7ffdf681f424,14862252,0,0x0,8
tick,0x7ffdf681f424,14864254,0,0x0,8
tick,0x7ffdf681f424,14866271,0,0x0,8
tick,0x7ffdf681f424,14868243,0,0x0,8
tick,0x7ffdf681f424,14870229,0,0x0,8
tick,0x7ffdf681f424,14872236,0,0x0,8
tick,0x7ffdf681f424,14874234,0,0x0,8
tick,0x7ffdf681f424,14876212,0,0x0,8
tick,0x7ffdf681f424,14878210,0,0x0,8
tick,0x7ffdf681f424,14880221,0,0x0,8
tick,0x7ffdf681f424,14883807,0,0x0,8
tick,0x7ffdf681f424,14896844,0,0x0,8
tick,0x7ffdf681f424,14896878,0,0x0,8
tick,0x7ffdf681f424,14898153,0,0x0,8
tick,0x7ffdf681f424,14900148,0,0x0,8
tick,0x7ffdf681f424,14902227,0,0x0,8
tick,0x7ffdf681f424,14904188,0,0x0,8
tick,0x7ffdf681f424,14906373,0,0x0,8
tick,0x7ffdf681f424,14908130,0,0x0,8
tick,0x7ffdf681f424,14910133,0,0x0,8
tick,0x7ffdf681f424,14912116,0,0x0,8
tick,0x7ffdf681f424,14914157,0,0x0,8
tick,0x7ffdf681f424,14916394,0,0x0,8
tick,0x7ffdf681f424,14918116,0,0x0,8
tick,0x7ffdf681f424,14920094,0,0x0,8
tick,0x7ffdf681f424,14922088,0,0x0,8
tick,0x7ffdf681f424,14924092,0,0x0,8
tick,0x7ffdf681f424,14926079,0,0x0,8
tick,0x7ffdf681f424,14928079,0,0x0,8
tick,0x7ffdf681f424,14930072,0,0x0,8
tick,0x7ffdf681f424,14932086,0,0x0,8
tick,0x7ffdf681f424,14934061,0,0x0,8
tick,0x7ffdf681f424,14936058,0,0x0,8
tick,0x7ffdf681f424,14938049,0,0x0,8
tick,0x7ffdf681f424,14940060,0,0x0,8
tick,0x7ffdf681f424,14942043,0,0x0,8
tick,0x7ffdf681f424,14944036,0,0x0,8
tick,0x7ffdf681f424,14946043,0,0x0,8
tick,0x7ffdf681f424,14948017,0,0x0,8
tick,0x7ffdf681f424,14950027,0,0x0,8
tick,0x7ffdf681f424,14952006,0,0x0,8
tick,0x7ffdf681f424,14954005,0,0x0,8
tick,0x7ffdf681f424,14955996,0,0x0,8
tick,0x7ffdf681f424,14957991,0,0x0,8
tick,0x7ffdf681f424,14960008,0,0x0,8
tick,0x7ffdf681f424,14961987,0,0x0,8
tick,0x7ffdf681f424,14965134,0,0x0,8
tick,0x7ffdf681f424,14979173,0,0x0,8
tick,0x7ffdf681f424,14980942,0,0x0,8
tick,0x7ffdf681f424,14983241,0,0x0,8
tick,0x7ffdf681f424,14986553,0,0x0,8
tick,0x7ffdf681f424,14997902,0,0x0,8
tick,0x7ffdf681f424,14999894,0,0x0,8
tick,0x7ffdf681f424,15001985,0,0x0,8
tick,0x7ffdf681f424,15008715,0,0x0,8
tick,0x7ffdf681f424,15009857,0,0x0,8
tick,0x7ffdf681f424,15011862,0,0x0,8
tick,0x7ffdf681f424,15013844,0,0x0,8
tick,0x7ffdf681f424,15015845,0,0x0,8
tick,0x7ffdf681f424,15017891,0,0x0,8
tick,0x7ffdf681f424,15019840,0,0x0,8
tick,0x7ffdf681f424,15021826,0,0x0,8
tick,0x7ffdf681f424,15023817,0,0x0,8
tick,0x7ffdf681f424,15025815,0,0x0,8
tick,0x7ffdf681f424,15027816,0,0x0,8
tick,0x7ffdf681f424,15029803,0,0x0,8
tick,0x7ffdf681f424,15031808,0,0x0,8
tick,0x7ffdf681f424,15033793,0,0x0,8
tick,0x7ffdf681f424,15035861,0,0x0,8
tick,0x7ffdf681f424,15037889,0,0x0,8
tick,0x7ffdf681f424,15039777,0,0x0,8
tick,0x7ffdf681f424,15041774,0,0x0,8
tick,0x7ffdf681f424,15043762,0,0x0,8
tick,0x7ffdf681f424,15045760,0,0x0,8
tick,0x7ffdf681f424,15048469,0,0x0,8
tick,0x7ffdf681f424,15049842,0,0x0,8
tick,0x7ffdf681f424,15051754,0,0x0,8
tick,0x7ffdf681f424,15053767,0,0x0,8
tick,0x7ffdf681f424,15056159,0,0x0,8
tick,0x7ffdf681f424,15057782,0,0x0,8
tick,0x7ffdf681f424,15062459,0,0x0,8
tick,0x7ffdf681f424,15063717,0,0x0,8
tick,0x7ffdf681f424,15065711,0,0x0,8
tick,0x7ffdf681f424,15067704,0,0x0,8
tick,0x7ffdf681f424,15069701,0,0x0,8
tick,0x7ffdf681f424,15071693,0,0x0,8
tick,0x7ffdf681f424,15073766,0,0x0,8
tick,0x7ffdf681f424,15075877,0,0x0,8
tick,0x7ffdf681f424,15077756,0,0x0,8
tick,0x7ffdf681f424,15079676,0,0x0,8
tick,0x7ffdf681f424,15081662,0,0x0,8
tick,0x7ffdf681f424,15083657,0,0x0,8
tick,0x7ffdf681f424,15085679,0,0x0,8
tick,0x7ffdf681f424,15087645,0,0x0,8
tick,0x7ffdf681f424,15089640,0,0x0,8
tick,0x7ffdf681f424,15091639,0,0x0,8
tick,0x7ffdf681f424,15093632,0,0x0,8
tick,0x7ffdf681f424,15095642,0,0x0,8
tick,0x7ffdf681f424,15097624,0,0x0,8
tick,0x7ffdf681f424,15099710,0,0x0,8
tick,0x7ffdf681f424,15101612,0,0x0,8
tick,0x7ffdf681f424,15103609,0,0x0,8
tick,0x7ffdf681f424,15105602,0,0x0,8
tick,0x7ffdf681f424,15107595,0,0x0,8
tick,0x7ffdf681f424,15111266,0,0x0,8
tick,0x7ffdf681f424,15113034,0,0x0,8
tick,0x7ffdf681f424,15125766,0,0x0,8
tick,0x7ffdf681f424,15127539,0,0x0,8
tick,0x7ffdf681f424,15129537,0,0x0,8
tick,0x7ffdf681f424,15131545,0,0x0,8
tick,0x7ffdf681f424,15133524,0,0x0,8
tick,0x7ffdf681f424,15135620,0,0x0,8
tick,0x7ffdf681f424,15137562,0,0x0,8
tick,0x7ffdf681f424,15139505,0,0x0,8
tick,0x7ffdf681f424,15141495,0,0x0,8
tick,0x7ffdf681f424,15143496,0,0x0,8
tick,0x7ffdf681f424,15145499,0,0x0,8
tick,0x7ffdf681f424,15147491,0,0x0,8
tick,0x7ffdf681f424,15149482,0,0x0,8
tick,0x7ffdf681f424,15151514,0,0x0,8
tick,0x7ffdf681f424,15153536,0,0x0,8
tick,0x7ffdf681f424,15155475,0,0x0,8
tick,0x7ffdf681f424,15157464,0,0x0,8
tick,0x7ffdf681f424,15170981,0,0x0,8
tick,0x7ffdf681f424,15172423,0,0x0,8
tick,0x7ffdf681f424,15174416,0,0x0,8
tick,0x7ffdf681f424,15176758,0,0x0,8
tick,0x7ffdf681f424,15178451,0,0x0,8
tick,0x7ffdf681f424,15180404,0,0x0,8
tick,0x7ffdf681f424,15182417,0,0x0,8
tick,0x7ffdf681f424,15184390,0,0x0,8
tick,0x7ffdf681f424,15186379,0,0x0,8
tick,0x7ffdf681f424,15188380,0,0x0,8
tick,0x7ffdf681f424,15190373,0,0x0,8
tick,0x7ffdf681f424,15192379,0,0x0,8
tick,0x7ffdf681f424,15194363,0,0x0,8
tick,0x7ffdf681f424,15196355,0,0x0,8
tick,0x7ffdf681f424,15198353,0,0x0,8
tick,0x7ffdf681f424,15200346,0,0x0,8
tick,0x7ffdf681f424,15202336,0,0x0,8
tick,0x7ffdf681f424,15204333,0,0x0,8
tick,0x7ffdf681f424,15206327,0,0x0,8
tick,0x7ffdf681f424,15208328,0,0x0,8
tick,0x7ffdf681f424,15210327,0,0x0,8
tick,0x7ffdf681f424,15212344,0,0x0,8
tick,0x7ffdf681f424,15214425,0,0x0,8
tick,0x7ffdf681f424,15216332,0,0x0,8
tick,0x7ffdf681f424,15218298,0,0x0,8
tick,0x7ffdf681f424,15221214,0,0x0,8
tick,0x7ffdf681f424,15222538,0,0x0,8
tick,0x7ffdf681f424,15224389,0,0x0,8
tick,0x7ffdf681f424,15226475,0,0x0,8
tick,0x7ffdf681f424,15228279,0,0x0,8
tick,0x7ffdf681f424,15230312,0,0x0,8
tick,0x7ffdf681f424,15232271,0,0x0,8
tick,0x7ffdf681f424,15234329,0,0x0,8
tick,0x7ffdf681f424,15236267,0,0x0,8
tick,0x7ffdf681f424,15238248,0,0x0,8
tick,0x7ffdf681f424,15240240,0,0x0,8
tick,0x7ffdf681f424,15242257,0,0x0,8
tick,0x7ffdf681f424,15244234,0,0x0,8
tick,0x7ffdf681f424,15246231,0,0x0,8
tick,0x7ffdf681f424,15248221,0,0x0,8
tick,0x7ffdf681f424,15250212,0,0x0,8
tick,0x7ffdf681f424,15252211,0,0x0,8
tick,0x7ffdf681f424,15254218,0,0x0,8
tick,0x7ffdf681f424,15256197,0,0x0,8
tick,0x7ffdf681f424,15258749,0,0x0,8
tick,0x7ffdf681f424,15273007,0,0x0,8
tick,0x7ffdf681f424,15274154,0,0x0,8
tick,0x7ffdf681f424,15276150,0,0x0,8
tick,0x7ffdf681f424,15278143,0,0x0,8
tick,0x7ffdf681f424,15280477,0,0x0,8
tick,0x7ffdf681f424,15282172,0,0x0,8
tick,0x7ffdf681f424,15284196,0,0x0,8
tick,0x7ffdf681f424,15286115,0,0x0,8
tick,0x7ffdf681f424,15288113,0,0x0,8
tick,0x7ffdf681f424,15290104,0,0x0,8
tick,0x7ffdf681f424,15292111,0,0x0,8
tick,0x7ffdf681f424,15294098,0,0x0,8
tick,0x7ffdf681f424,15296094,0,0x0,8
tick,0x7ffdf681f424,15298087,0,0x0,8
tick,0x7ffdf681f424,15300085,0,0x0,8
tick,0x7ffdf681f424,15302081,0,0x0,8
tick,0x7ffdf681f424,15304069,0,0x0,8
tick,0x7ffdf681f424,15306085,0,0x0,8
tick,0x7ffdf681f424,15308064,0,0x0,8
tick,0x7ffdf681f424,15310069,0,0x0,8
tick,0x7ffdf681f424,15312046,0,0x0,8
tick,0x7ffdf681f424,15314040,0,0x0,8
tick,0x7ffdf681f424,15316038,0,0x0,8
tick,0x7ffdf681f424,15318032,0,0x0,8
tick,0x7ffdf681f424,15320025,0,0x0,8
tick,0x7ffdf681f424,15322019,0,0x0,8
tick,0x7ffdf681f424,15328763,0,0x0,8
tick,0x7ffdf681f424,15338418,0,0x0,8
tick,0x7ffdf681f424,15339976,0,0x0,8
tick,0x7ffdf681f424,15341992,0,0x0,8
tick,0x7ffdf681f424,15343968,0,0x0,8
tick,0x7ffdf681f424,15346034,0,0x0,8
tick,0x7ffdf681f424,15347954,0,0x0,8
tick,0x7ffdf681f424,15349981,0,0x0,8
tick,0x7ffdf681f424,15351936,0,0x0,8
tick,0x7ffdf681f424,15353943,0,0x0,8
tick,0x7ffdf681f424,15355939,0,0x0,8
tick,0x7ffdf681f424,15357976,0,0x0,8
tick,0x7ffdf681f424,15359928,0,0x0,8
tick,0x7ffdf681f424,15361936,0,0x0,8
tick,0x7ffdf681f424,15363910,0,0x0,8
tick,0x7ffdf681f424,15365940,0,0x0,8
tick,0x7ffdf681f424,15367904,0,0x0,8
tick,0x7ffdf681f424,15369903,0,0x0,8
tick,0x7ffdf681f424,15371886,0,0x0,8
tick,0x7ffdf681f424,15373885,0,0x0,8
tick,0x7ffdf681f424,15375884,0,0x0,8
tick,0x7ffdf681f424,15377868,0,0x0,8
tick,0x7ffdf681f424,15379868,0,0x0,8
tick,0x7ffdf681f424,15381875,0,0x0,8
tick,0x7ffdf681f424,15383858,0,0x0,8
tick,0x7ffdf681f424,15385847,0,0x0,8
tick,0x7ffdf681f424,15390016,0,0x0,8
tick,0x7ffdf681f424,15401748,0,0x0,8
tick,0x7ffdf681f424,15402805,0,0x0,8
tick,0x7ffdf681f424,15404804,0,0x0,8
tick,0x7ffdf681f424,15406850,0,0x0,8
tick,0x7ffdf681f424,15408835,0,0x0,8
tick,0x7ffdf681f424,15410788,0,0x0,8
tick,0x7ffdf681f424,15412781,0,0x0,8
tick,0x7ffdf681f424,15414776,0,0x0,8
tick,0x7ffdf681f424,15416767,0,0x0,8
tick,0x7ffdf681f424,15418759,0,0x0,8
tick,0x7ffdf681f424,15420759,0,0x0,8
tick,0x7ffdf681f424,15422754,0,0x0,8
tick,0x7ffdf681f424,15424919,0,0x0,8
tick,0x7ffdf681f424,15426874,0,0x0,8
tick,0x7ffdf681f424,15439921,0,0x0,8
tick,0x7ffdf681f424,15441713,0,0x0,8
tick,0x7ffdf681f424,15443696,0,0x0,8
tick,0x7ffdf681f424,15446385,0,0x0,8
tick,0x7ffdf681f424,15447685,0,0x0,8
tick,0x7ffdf681f424,15449794,0,0x0,8
tick,0x7ffdf681f424,15451679,0,0x0,8
tick,0x7ffdf681f424,15453666,0,0x0,8
tick,0x7ffdf681f424,15455691,0,0x0,8
tick,0x7ffdf681f424,15457654,0,0x0,8
tick,0x7ffdf681f424,15459689,0,0x0,8
tick,0x7ffdf681f424,15461663,0,0x0,8
tick,0x7ffdf681f424,15463639,0,0x0,8
tick,0x7ffdf681f424,15465640,0,0x0,8
tick,0x7ffdf681f424,15467631,0,0x0,8
tick,0x7ffdf681f424,15469629,0,0x0,8
tick,0x7ffdf681f424,15471629,0,0x0,8
tick,0x7ffdf681f424,15473614,0,0x0,8
tick,0x7ffdf681f424,15475618,0,0x0,8
tick,0x7ffdf681f424,15477627,0,0x0,8
tick,0x7ffdf681f424,15479601,0,0x0,8
tick,0x7ffdf681f424,15481592,0,0x0,8
tick,0x7ffdf681f424,15483591,0,0x0,8
tick,0x7ffdf681f424,15485584,0,0x0,8
tick,0x7ffdf681f424,15487578,0,0x0,8
tick,0x7ffdf681f424,15489568,0,0x0,8
tick,0x7ffdf681f424,15491593,0,0x0,8
tick,0x7ffdf681f424,15504835,0,0x0,8
tick,0x7ffdf681f424,15506528,0,0x0,8
tick,0x7ffdf681f424,15508972,0,0x0,8
tick,0x7ffdf681f424,15510621,0,0x0,8
tick,0x7ffdf681f424,15512538,0,0x0,8
tick,0x7ffdf681f424,15514505,0,0x0,8
tick,0x7ffdf681f424,15516548,0,0x0,8
tick,0x7ffdf681f424,15518498,0,0x0,8
tick,0x7ffdf681f424,15520510,0,0x0,8
tick,0x7ffdf681f424,15522497,0,0x0,8
tick,0x7ffdf681f424,15524481,0,0x0,8
tick,0x7ffdf681f424,15526487,0,0x0,8
tick,0x7ffdf681f424,15528472,0,0x0,8
tick,0x7ffdf681f424,15543267,0,0x0,8
tick,0x7ffdf681f424,15544432,0,0x0,8
tick,0x7ffdf681f424,15546430,0,0x0,8
tick,0x7ffdf681f424,15548433,0,0x0,8
tick,0x7ffdf681f424,15550535,0,0x0,8
tick,0x7ffdf681f424,15552408,0,0x0,8
tick,0x7ffdf681f424,15554475,0,0x0,8
tick,0x7ffdf681f424,15556391,0,0x0,8
tick,0x7ffdf681f424,15558387,0,0x0,8
tick,0x7ffdf681f424,15560399,0,0x0,8
tick,0x7ffdf681f424,15562403,0,0x0,8
tick,0x7ffdf681f424,15564374,0,0x0,8
tick,0x7ffdf681f424,15566368,0,0x0,8
tick,0x7ffdf681f424,15568362,0,0x0,8
tick,0x7ffdf681f424,15570355,0,0x0,8
tick,0x7ffdf681f424,15572350,0,0x0,8
tick,0x7ffdf681f424,15574344,0,0x0,8
tick,0x7ffdf681f424,15576354,0,0x0,8
tick,0x7ffdf681f424,15578336,0,0x0,8
tick,0x7ffdf681f424,15580327,0,0x0,8
tick,0x7ffdf681f424,15582425,0,0x0,8
tick,0x7ffdf681f424,15584316,0,0x0,8
tick,0x7ffdf681f424,15586317,0,0x0,8
tick,0x7ffdf681f424,15588310,0,0x0,8
tick,0x7ffdf681f424,15590306,0,0x0,8
tick,0x7ffdf681f424,15592298,0,0x0,8
tick,0x7ffdf681f424,15594292,0,0x0,8
tick,0x7ffdf681f424,15596290,0,0x0,8
tick,0x7ffdf681f424,15598280,0,0x0,8
tick,0x7ffdf681f424,15600279,0,0x0,8
tick,0x7ffdf681f424,15602273,0,0x0,8
tick,0x7ffdf681f424,15604262,0,0x0,8
tick,0x7ffdf681f424,15606257,0,0x0,8
tick,0x7ffdf681f424,15608258,0,0x0,8
tick,0x7ffdf681f424,15612266,0,0x0,8
tick,0x7ffdf681f424,15620151,0,0x0,8
tick,0x7ffdf681f424,15640752,0,0x0,8
tick,0x7ffdf681f424,15642169,0,0x0,8
tick,0x7ffdf681f424,15644179,0,0x0,8
tick,0x7ffdf681f424,15646753,0,0x0,8
tick,0x7ffdf681f424,15648256,0,0x0,8
tick,0x7ffdf681f424,15651986,0,0x0,8
tick,0x7ffdf681f424,15653134,0,0x0,8
tick,0x7ffdf681f424,15655134,0,0x0,8
tick,0x7ffdf681f424,15657127,0,0x0,8
tick,0x7ffdf681f424,15659119,0,0x0,8
tick,0x7ffdf681f424,15661114,0,0x0,8
tick,0x7ffdf681f424,15663110,0,0x0,8
tick,0x7ffdf681f424,15665131,0,0x0,8
tick,0x7ffdf681f424,15667101,0,0x0,8
tick,0x7ffdf681f424,15669094,0,0x0,8
tick,0x7ffdf681f424,15671102,0,0x0,8
tick,0x7ffdf681f424,15673119,0,0x0,8
tick,0x7ffdf681f424,15675084,0,0x0,8
tick,0x7ffdf681f424,15677072,0,0x0,8
tick,0x7ffdf681f424,15679071,0,0x0,8
tick,0x7ffdf681f424,15681069,0,0x0,8
tick,0x7ffdf681f424,15683072,0,0x0,8
tick,0x7ffdf681f424,15685052,0,0x0,8
tick,0x7ffdf681f424,15687046,0,0x0,8
tick,0x7ffdf681f424,15689047,0,0x0,8
tick,0x7ffdf681f424,15691032,0,0x0,8
tick,0x7ffdf681f424,15693031,0,0x0,8
tick,0x7ffdf681f424,15695024,0,0x0,8
tick,0x7ffdf681f424,15697349,0,0x0,8
tick,0x7ffdf681f424,15702446,0,0x0,8
tick,0x7ffdf681f424,15712822,0,0x0,8
tick,0x7ffdf681f424,15713995,0,0x0,8
tick,0x7ffdf681f424,15715967,0,0x0,8
tick,0x7ffdf681f424,15717975,0,0x0,8
tick,0x7ffdf681f424,15719969,0,0x0,8
tick,0x7ffdf681f424,15721959,0,0x0,8
tick,0x7ffdf681f424,15731060,0,0x0,8
tick,0x7ffdf681f424,15739156,0,0x0,8
tick,0x7ffdf681f424,15740947,0,0x0,8
tick,0x7ffdf681f424,15742931,0,0x0,8
tick,0x7ffdf681f424,15745286,0,0x0,8
tick,0x7ffdf681f424,15747259,0,0x0,8
tick,0x7ffdf681f424,15748964,0,0x0,8
tick,0x7ffdf681f424,15750894,0,0x0,8
tick,0x7ffdf681f424,15752880,0,0x0,8
tick,0x7ffdf681f424,15754872,0,0x0,8
tick,0x7ffdf681f424,15756859,0,0x0,8
tick,0x7ffdf681f424,15758857,0,0x0,8
tick,0x7ffdf681f424,15760845,0,0x0,8
tick,0x7ffdf681f424,15762851,0,0x0,8
tick,0x7ffdf681f424,15764842,0,0x0,8
tick,0x7ffdf681f424,15766845,0,0x0,8
tick,0x7ffdf681f424,15768835,0,0x0,8
tick,0x7ffdf681f424,15770821,0,0x0,8
tick,0x7ffdf681f424,15772812,0,0x0,8
tick,0x7ffdf681f424,15774979,0,0x0,8
tick,0x7ffdf681f424,15776822,0,0x0,8
tick,0x7ffdf681f424,15778816,0,0x0,8
tick,0x7ffdf681f424,15780791,0,0x0,8
tick,0x7ffdf681f424,15782787,0,0x0,8
tick,0x7ffdf681f424,15784786,0,0x0,8
tick,0x7ffdf681f424,15786777,0,0x0,8
tick,0x7ffdf681f424,15788774,0,0x0,8
tick,0x7ffdf681f424,15792277,0,0x0,8
tick,0x7ffdf681f424,15805302,0,0x0,8
tick,0x7ffdf681f424,15806744,0,0x0,8
tick,0x7ffdf681f424,15819842,0,0x0,8
tick,0x7ffdf681f424,15821687,0,0x0,8
tick,0x7ffdf681f424,15824257,0,0x0,8
tick,0x7ffdf681f424,15825716,0,0x0,8
tick,0x7ffdf681f424,15830172,0,0x0,8
tick,0x7ffdf681f424,15831657,0,0x0,8
tick,0x7ffdf681f424,15833675,0,0x0,8
tick,0x7ffdf681f424,15835645,0,0x0,8
tick,0x7ffdf681f424,15837996,0,0x0,8
tick,0x7ffdf681f424,15839688,0,0x0,8
tick,0x7ffdf681f424,15841805,0,0x0,8
tick,0x7ffdf681f424,15843632,0,0x0,8
tick,0x7ffdf681f424,15845623,0,0x0,8
tick,0x7ffdf681f424,15847629,0,0x0,8
tick,0x7ffdf681f424,15849745,0,0x0,8
tick,0x7ffdf681f424,15851606,0,0x0,8
tick,0x7ffdf681f424,15853607,0,0x0,8
tick,0x7ffdf681f424,15855604,0,0x0,8
tick,0x7ffdf681f424,15857586,0,0x0,8
tick,0x7ffdf681f424,15859581,0,0x0,8
tick,0x7ffdf681f424,15861590,0,0x0,8
tick,0x7ffdf681f424,15863573,0,0x0,8
tick,0x7ffdf681f424,15865566,0,0x0,8
tick,0x7ffdf681f424,15867565,0,0x0,8
tick,0x7ffdf681f424,15869554,0,0x0,8
tick,0x7ffdf681f424,15871552,0,0x0,8
tick,0x7ffdf681f424,15873544,0,0x0,8
tick,0x7ffdf681f424,15875551,0,0x0,8
tick,0x7ffdf681f424,15877547,0,0x0,8
tick,0x7ffdf681f424,15879530,0,0x0,8
tick,0x7ffdf681f424,15881524,0,0x0,8
tick,0x7ffdf681f424,15883521,0,0x0,8
tick,0x7ffdf681f424,15885520,0,0x0,8
tick,0x7ffdf681f424,15887507,0,0x0,8
tick,0x7ffdf681f424,15910104,0,0x0,8
tick,0x7ffdf681f424,15911664,0,0x0,8
tick,0x7ffdf681f424,15916243,0,0x0,8
tick,0x7ffdf681f424,15918917,0,0x0,8
tick,0x7ffdf681f424,15920425,0,0x0,8
tick,0x7ffdf681f424,15922423,0,0x0,8
tick,0x7ffdf681f424,15924426,0,0x0,8
tick,0x7ffdf681f424,15926442,0,0x0,8
tick,0x7ffdf681f424,15928406,0,0x0,8
tick,0x7ffdf681f424,15930394,0,0x0,8
tick,0x7ffdf681f424,15932426,0,0x0,8
tick,0x7ffdf681f424,15934381,0,0x0,8
tick,0x7ffdf681f424,15936373,0,0x0,8
tick,0x7ffdf681f424,15938369,0,0x0,8
tick,0x7ffdf681f424,15940387,0,0x0,8
tick,0x7ffdf681f424,15942360,0,0x0,8
tick,0x7ffdf681f424,15944359,0,0x0,8
tick,0x7ffdf681f424,15946353,0,0x0,8
tick,0x7ffdf681f424,15948341,0,0x0,8
tick,0x7ffdf681f424,15950338,0,0x0,8
tick,0x7ffdf681f424,15952334,0,0x0,8
tick,0x7ffdf681f424,15954328,0,0x0,8
tick,0x7ffdf681f424,15956327,0,0x0,8
tick,0x7ffdf681f424,15958319,0,0x0,8
tick,0x7ffdf681f424,15960380,0,0x0,8
tick,0x7ffdf681f424,15962328,0,0x0,8
tick,0x7ffdf681f424,15964303,0,0x0,8
tick,0x7ffdf681f424,15966367,0,0x0,8
tick,0x7ffdf681f424,15968303,0,0x0,8
tick,0x7ffdf681f424,15970285,0,0x0,8
tick,0x7ffdf681f424,15972283,0,0x0,8
tick,0x7ffdf681f424,15974276,0,0x0,8
tick,0x7ffdf681f424,15976270,0,0x0,8
tick,0x7ffdf681f424,15978269,0,0x0,8
tick,0x7ffdf681f424,15980261,0,0x0,8
tick,0x7ffdf681f424,15982256,0,0x0,8
tick,0x7ffdf681f424,15994135,0,0x0,8
tick,0x7ffdf681f424,16001361,0,0x0,8
tick,0x7ffdf681f424,16003207,0,0x0,8
tick,0x7ffdf681f424,16005274,0,0x0,8
tick,0x7ffdf681f424,16007267,0,0x0,8
tick,0x7ffdf681f424,16009271,0,0x0,8
tick,0x7ffdf681f424,16011195,0,0x0,8
tick,0x7ffdf681f424,16013181,0,0x0,8
tick,0x7ffdf681f424,16015164,0,0x0,8
tick,0x7ffdf681f424,16017177,0,0x0,8
tick,0x7ffdf681f424,16019159,0,0x0,8
tick,0x7ffdf681f424,16021176,0,0x0,8
tick,0x7ffdf681f424,16023149,0,0x0,8
tick,0x7ffdf681f424,16025144,0,0x0,8
tick,0x7ffdf681f424,16027136,0,0x0,8
tick,0x7ffdf681f424,16029129,0,0x0,8
tick,0x7ffdf681f424,16031120,0,0x0,8
tick,0x7ffdf681f424,16033124,0,0x0,8
tick,0x7ffdf681f424,16048960,0,0x0,8
tick,0x7ffdf681f424,16050087,0,0x0,8
tick,0x7ffdf681f424,16052076,0,0x0,8
tick,0x7ffdf681f424,16054096,0,0x0,8
tick,0x7ffdf681f424,16056094,0,0x0,8
tick,0x7ffdf681f424,16058121,0,0x0,8
tick,0x7ffdf681f424,16060064,0,0x0,8
tick,0x7ffdf681f424,16062044,0,0x0,8
tick,0x7ffdf681f424,16064034,0,0x0,8
tick,0x7ffdf681f424,16066030,0,0x0,8
tick,0x7ffdf681f424,16068028,0,0x0,8
tick,0x7ffdf681f424,16070698,0,0x0,8
tick,0x7ffdf681f424,16072368,0,0x0,8
tick,0x7ffdf681f424,16083988,0,0x0,8
tick,0x7ffdf681f424,16085982,0,0x0,8
tick,0x7ffdf681f424,16087983,0,0x0,8
tick,0x7ffdf681f424,16090008,0,0x0,8
tick,0x7ffdf681f424,16092034,0,0x0,8
tick,0x7ffdf681f424,16093956,0,0x0,8
tick,0x7ffdf681f424,16095952,0,0x0,8
tick,0x7ffdf681f424,16097944,0,0x0,8
tick,0x7ffdf681f424,16099937,0,0x0,8
tick,0x7ffdf681f424,16101933,0,0x0,8
tick,0x7ffdf681f424,16103927,0,0x0,8
tick,0x7ffdf681f424,16105942,0,0x0,8
tick,0x7ffdf681f424,16107916,0,0x0,8
tick,0x7ffdf681f424,16109914,0,0x0,8
tick,0x7ffdf681f424,16111903,0,0x0,8
tick,0x7ffdf681f424,16113912,0,0x0,8
tick,0x7ffdf681f424,16115894,0,0x0,8
tick,0x7ffdf681f424,16117890,0,0x0,8
tick,0x7ffdf681f424,16119886,0,0x0,8
tick,0x7ffdf681f424,16121890,0,0x0,8
tick,0x7ffdf681f424,16123875,0,0x0,8
tick,0x7ffdf681f424,16125872,0,0x0,8
tick,0x7ffdf681f424,16127884,0,0x0,8
tick,0x7ffdf681f424,16129858,0,0x0,8
tick,0x7ffdf681f424,16131862,0,0x0,8
tick,0x7ffdf681f424,16133851,0,0x0,8
tick,0x7ffdf681f424,16135865,0,0x0,8
tick,0x7ffdf681f424,16152417,0,0x0,8
tick,0x7ffdf681f424,16152884,0,0x0,8
tick,0x7ffdf681f424,16154793,0,0x0,8
tick,0x7ffdf681f424,16156850,0,0x0,8
tick,0x7ffdf681f424,16162093,0,0x0,8
tick,0x7ffdf681f424,16163776,0,0x0,8
tick,0x7ffdf681f424,16165769,0,0x0,8
tick,0x7ffdf681f424,16167762,0,0x0,8
tick,0x7ffdf681f424,16173284,0,0x0,8
tick,0x7ffdf681f424,16175624,0,0x0,8
tick,0x7ffdf681f424,16176750,0,0x0,8
tick,0x7ffdf681f424,16178730,0,0x0,8
tick,0x7ffdf681f424,16180732,0,0x0,8
tick,0x7ffdf681f424,16182808,0,0x0,8
tick,0x7ffdf681f424,16184740,0,0x0,8
tick,0x7ffdf681f424,16186727,0,0x0,8
tick,0x7ffdf681f424,16188703,0,0x0,8
tick,0x7ffdf681f424,16190704,0,0x0,8
tick,0x7ffdf681f424,16192696,0,0x0,8
tick,0x7ffdf681f424,16194689,0,0x0,8
tick,0x7ffdf681f424,16196780,0,0x0,8
tick,0x7ffdf681f424,16198788,0,0x0,8
tick,0x7ffdf681f424,16200681,0,0x0,8
tick,0x7ffdf681f424,16202672,0,0x0,8
tick,0x7ffdf681f424,16204678,0,0x0,8
tick,0x7ffdf681f424,16206655,0,0x0,8
tick,0x7ffdf681f424,16208665,0,0x0,8
tick,0x7ffdf681f424,16210663,0,0x0,8
tick,0x7ffdf681f424,16212638,0,0x0,8
tick,0x7ffdf681f424,16214779,0,0x0,8
tick,0x7ffdf681f424,16216641,0,0x0,8
tick,0x7ffdf681f424,16218623,0,0x0,8
tick,0x7ffdf681f424,16220620,0,0x0,8
tick,0x7ffdf681f424,16222619,0,0x0,8
tick,0x7ffdf681f424,16224606,0,0x0,8
tick,0x7ffdf681f424,16226604,0,0x0,8
tick,0x7ffdf681f424,16228636,0,0x0,8
tick,0x7ffdf681f424,16230594,0,0x0,8
tick,0x7ffdf681f424,16232587,0,0x0,8
tick,0x7ffdf681f424,16234584,0,0x0,8
tick,0x7ffdf681f424,16236593,0,0x0,8
tick,0x7ffdf681f424,16238572,0,0x0,8
tick,0x7ffdf681f424,16240696,0,0x0,8
tick,0x7ffdf681f424,16242857,0,0x0,8
tick,0x7ffdf681f424,16251305,0,0x0,8
tick,0x7ffdf681f424,16254317,0,0x0,8
tick,0x7ffdf681f424,16258994,0,0x0,8
tick,0x7ffdf681f424,16266863,0,0x0,8
tick,0x7ffdf681f424,16280230,0,0x0,8
tick,0x7ffdf681f424,16281466,0,0x0,8
tick,0x7ffdf681f424,16283451,0,0x0,8
tick,0x7ffdf681f424,16285450,0,0x0,8
tick,0x7ffdf681f424,16287447,0,0x0,8
tick,0x7ffdf681f424,16289458,0,0x0,8
tick,0x7ffdf681f424,16291563,0,0x0,8
tick,0x7ffdf681f424,16293428,0,0x0,8
tick,0x7ffdf681f424,16295425,0,0x0,8
tick,0x7ffdf681f424,16297452,0,0x0,8
tick,0x7ffdf681f424,16299472,0,0x0,8
tick,0x7ffdf681f424,16301414,0,0x0,8
tick,0x7ffdf681f424,16303411,0,0x0,8
tick,0x7ffdf681f424,16305414,0,0x0,8
tick,0x7ffdf681f424,16307422,0,0x0,8
tick,0x7ffdf681f424,16309385,0,0x0,8
tick,0x7ffdf681f424,16311393,0,0x0,8
tick,0x7ffdf681f424,16313640,0,0x0,8
tick,0x7ffdf681f424,16315409,0,0x0,8
tick,0x7ffdf681f424,16317440,0,0x0,8
tick,0x7ffdf681f424,16319361,0,0x0,8
tick,0x7ffdf681f424,16321354,0,0x0,8
tick,0x7ffdf681f424,16323352,0,0x0,8
tick,0x7ffdf681f424,16325350,0,0x0,8
tick,0x7ffdf681f424,16327337,0,0x0,8
tick,0x7ffdf681f424,16329335,0,0x0,8
tick,0x7ffdf681f424,16331332,0,0x0,8
tick,0x7ffdf681f424,16333352,0,0x0,8
tick,0x7ffdf681f424,16335354,0,0x0,8
tick,0x7ffdf681f424,16337332,0,0x0,8
tick,0x7ffdf681f424,16339342,0,0x0,8
tick,0x7ffdf681f424,16341297,0,0x0,8
tick,0x7ffdf681f424,16343307,0,0x0,8
tick,0x7ffdf681f424,16345337,0,0x0,8
tick,0x7ffdf681f424,16347308,0,0x0,8
tick,0x7ffdf681f424,16349276,0,0x0,8
tick,0x7ffdf681f424,16351279,0,0x0,8
tick,0x7ffdf681f424,16353271,0,0x0,8
tick,0x7ffdf681f424,16355259,0,0x0,8
tick,0x7ffdf681f424,16357252,0,0x0,8
tick,0x7ffdf681f424,16359287,0,0x0,8
tick,0x7ffdf681f424,16361246,0,0x0,8
tick,0x7ffdf681f424,16363237,0,0x0,8
tick,0x7ffdf681f424,16365260,0,0x0,8
tick,0x7ffdf681f424,16367355,0,0x0,8
tick,0x7ffdf681f424,16369242,0,0x0,8
tick,0x7ffdf681f424,16371220,0,0x0,8
tick,0x7ffdf681f424,16373238,0,0x0,8
tick,0x7ffdf681f424,16375398,0,0x0,8
tick,0x7ffdf681f424,16377210,0,0x0,8
tick,0x7ffdf681f424,16379196,0,0x0,8
tick,0x7ffdf681f424,16381200,0,0x0,8
tick,0x7ffdf681f424,16383334,0,0x0,8
tick,0x7ffdf681f424,16389573,0,0x0,8
tick,0x7ffdf681f424,16390238,0,0x0,8
tick,0x7ffdf681f424,16400774,0,0x0,8
tick,0x7ffdf681f424,16402144,0,0x0,8
tick,0x7ffdf681f424,16404128,0,0x0,8
tick,0x7ffdf681f424,16406129,0,0x0,8
tick,0x7ffdf681f424,16408357,0,0x0,8
tick,0x7ffdf681f424,16410308,0,0x0,8
tick,0x7ffdf681f424,16412156,0,0x0,8
tick,0x7ffdf681f424,16414496,0,0x0,8
tick,0x7ffdf681f424,16416154,0,0x0,8
tick,0x7ffdf681f424,16418126,0,0x0,8
tick,0x7ffdf681f424,16420107,0,0x0,8
tick,0x7ffdf681f424,16422102,0,0x0,8
tick,0x7ffdf681f424,16424101,0,0x0,8
tick,0x7ffdf681f424,16426146,0,0x0,8
tick,0x7ffdf681f424,16428218,0,0x0,8
tick,0x7ffdf681f424,16430138,0,0x0,8
tick,0x7ffdf681f424,16432056,0,0x0,8
tick,0x7ffdf681f424,16434062,0,0x0,8
tick,0x7ffdf681f424,16436054,0,0x0,8
tick,0x7ffdf681f424,16438045,0,0x0,8
tick,0x7ffdf681f424,16440032,0,0x0,8
tick,0x7ffdf681f424,16442068,0,0x0,8
tick,0x7ffdf681f424,16444033,0,0x0,8
tick,0x7ffdf681f424,16446027,0,0x0,8
tick,0x7ffdf681f424,16449390,0,0x0,8
tick,0x7ffdf681f424,16453338,0,0x0,8
tick,0x7ffdf681f424,16461685,0,0x0,8
tick,0x7ffdf681f424,16463002,0,0x0,8
tick,0x7ffdf681f424,16465876,0,0x0,8
tick,0x7ffdf681f424,16467157,0,0x0,8
tick,0x7ffdf681f424,16472499,0,0x0,8
tick,0x7ffdf681f424,16473972,0,0x0,8
tick,0x7ffdf681f424,16476102,0,0x0,8
tick,0x7ffdf681f424,16477934,0,0x0,8
tick,0x7ffdf681f424,16479933,0,0x0,8
tick,0x7ffdf681f424,16481923,0,0x0,8
tick,0x7ffdf681f424,16483933,0,0x0,8
tick,0x7ffdf681f424,16486019,0,0x0,8
tick,0x7ffdf681f424,16487909,0,0x0,8
tick,0x7ffdf681f424,16489897,0,0x0,8
tick,0x7ffdf681f424,16491938,0,0x0,8
tick,0x7ffdf681f424,16493889,0,0x0,8
tick,0x7ffdf681f424,16495890,0,0x0,8
tick,0x7ffdf681f424,16497896,0,0x0,8
tick,0x7ffdf681f424,16499902,0,0x0,8
tick,0x7ffdf681f424,16501871,0,0x0,8
tick,0x7ffdf681f424,16503877,0,0x0,8
tick,0x7ffdf681f424,16505856,0,0x0,8
tick,0x7ffdf681f424,16507858,0,0x0,8
tick,0x7ffdf681f424,16509856,0,0x0,8
tick,0x7ffdf681f424,16511879,0,0x0,8
tick,0x7ffdf681f424,16513838,0,0x0,8
tick,0x7ffdf681f424,16515829,0,0x0,8
tick,0x7ffdf681f424,16517826,0,0x0,8
tick,0x7ffdf681f424,16519831,0,0x0,8
tick,0x7ffdf681f424,16521813,0,0x0,8
tick,0x7ffdf681f424,16523805,0,0x0,8
tick,0x7ffdf681f424,16525805,0,0x0,8
tick,0x7ffdf681f424,16546182,0,0x0,8
tick,0x7ffdf681f424,16562430,0,0x0,8
tick,0x7ffdf681f424,16563790,0,0x0,8
tick,0x7ffdf681f424,16565731,0,0x0,8
tick,0x7ffdf681f424,16567950,0,0x0,8
tick,0x7ffdf681f424,16569694,0,0x0,8
tick,0x7ffdf681f424,16571683,0,0x0,8
tick,0x7ffdf681f424,16573687,0,0x0,8
tick,0x7ffdf681f424,16576164,0,0x0,8
tick,0x7ffdf681f424,16577677,0,0x0,8
tick,0x7ffdf681f424,16579660,0,0x0,8
tick,0x7ffdf681f424,16581658,0,0x0,8
tick,0x7ffdf681f424,16583877,0,0x0,8
tick,0x7ffdf681f424,16585682,0,0x0,8
tick,0x7ffdf681f424,16587645,0,0x0,8
tick,0x7ffdf681f424,16589634,0,0x0,8
tick,0x7ffdf681f424,16591723,0,0x0,8
tick,0x7ffdf681f424,16593633,0,0x0,8
tick,0x7ffdf681f424,16595621,0,0x0,8
tick,0x7ffdf681f424,16597610,0,0x0,8
tick,0x7ffdf681f424,16599607,0,0x0,8
tick,0x7ffdf681f424,16601604,0,0x0,8
tick,0x7ffdf681f424,16603701,0,0x0,8
tick,0x7ffdf681f424,16605599,0,0x0,8
tick,0x7ffdf681f424,16607583,0,0x0,8
tick,0x7ffdf681f424,16609602,0,0x0,8
tick,0x7ffdf681f424,16611577,0,0x0,8
tick,0x7ffdf681f424,16613568,0,0x0,8
tick,0x7ffdf681f424,16615567,0,0x0,8
tick,0x7ffdf681f424,16617567,0,0x0,8
tick,0x7ffdf681f424,16619556,0,0x0,8
tick,0x7ffdf681f424,16621562,0,0x0,8
tick,0x7ffdf681f424,16623540,0,0x0,8
tick,0x7ffdf681f424,16625603,0,0x0,8
tick,0x7ffdf681f424,16627542,0,0x0,8
tick,0x7ffdf681f424,16629535,0,0x0,8
tick,0x7ffdf681f424,16631527,0,0x0,8
tick,0x7ffdf681f424,16633616,0,0x0,8
tick,0x7ffdf681f424,16635524,0,0x0,8
tick,0x7ffdf681f424,16637503,0,0x0,8
tick,0x7ffdf681f424,16639523,0,0x0,8
tick,0x7ffdf681f424,16642253,0,0x0,8
tick,0x7ffdf681f424,16643677,0,0x0,8
tick,0x7ffdf681f424,16656527,0,0x0,8
tick,0x7ffdf681f424,16658455,0,0x0,8
tick,0x7ffdf681f424,16660442,0,0x0,8
tick,0x7ffdf681f424,16662444,0,0x0,8
tick,0x7ffdf681f424,16664442,0,0x0,8
tick,0x7ffdf681f424,16666891,0,0x0,8
tick,0x7ffdf681f424,16668471,0,0x0,8
tick,0x7ffdf681f424,16670427,0,0x0,8
tick,0x7ffdf681f424,16672765,0,0x0,8
tick,0x7ffdf681f424,16674404,0,0x0,8
tick,0x7ffdf681f424,16676406,0,0x0,8
tick,0x7ffdf681f424,16678400,0,0x0,8
tick,0x7ffdf681f424,16680394,0,0x0,8
tick,0x7ffdf681f424,16682380,0,0x0,8
tick,0x7ffdf681f424,16684393,0,0x0,8
tick,0x7ffdf681f424,16686378,0,0x0,8
tick,0x7ffdf681f424,16688367,0,0x0,8
tick,0x7ffdf681f424,16690359,0,0x0,8
tick,0x7ffdf681f424,16692430,0,0x0,8
tick,0x7ffdf681f424,16694353,0,0x0,8
tick,0x7ffdf681f424,16696349,0,0x0,8
tick,0x7ffdf681f424,16698349,0,0x0,8
tick,0x7ffdf681f424,16700500,0,0x0,8
tick,0x7ffdf681f424,16702330,0,0x0,8
tick,0x7ffdf681f424,16704331,0,0x0,8
tick,0x7ffdf681f424,16722295,0,0x0,8
tick,0x7ffdf681f424,16724357,0,0x0,8
tick,0x7ffdf681f424,16726269,0,0x0,8
tick,0x7ffdf681f424,16728275,0,0x0,8
tick,0x7ffdf681f424,16730256,0,0x0,8
tick,0x7ffdf681f424,16732255,0,0x0,8
tick,0x7ffdf681f424,16734595,0,0x0,8
tick,0x7ffdf681f424,16737669,0,0x0,8
tick,0x7ffdf681f424,16739591,0,0x0,8
tick,0x7ffdf681f424,16741287,0,0x0,8
tick,0x7ffdf681f424,16743287,0,0x0,8
tick,0x7ffdf681f424,16745219,0,0x0,8
tick,0x7ffdf681f424,16747207,0,0x0,8
tick,0x7ffdf681f424,16749204,0,0x0,8
tick,0x7ffdf681f424,16751201,0,0x0,8
tick,0x7ffdf681f424,16753195,0,0x0,8
tick,0x7ffdf681f424,16755190,0,0x0,8
tick,0x7ffdf681f424,16757183,0,0x0,8
tick,0x7ffdf681f424,16759260,0,0x0,8
tick,0x7ffdf681f424,16761175,0,0x0,8
tick,0x7ffdf681f424,16763185,0,0x0,8
tick,0x7ffdf681f424,16765187,0,0x0,8
tick,0x7ffdf681f424,16767194,0,0x0,8
tick,0x7ffdf681f424,16769154,0,0x0,8
tick,0x7ffdf681f424,16783373,0,0x0,8
tick,0x7ffdf681f424,16785159,0,0x0,8
tick,0x7ffdf681f424,16787115,0,0x0,8
tick,0x7ffdf681f424,16789104,0,0x0,8
tick,0x7ffdf681f424,16791185,0,0x0,8
tick,0x7ffdf681f424,16793112,0,0x0,8
tick,0x7ffdf681f424,16795215,0,0x0,8
tick,0x7ffdf681f424,16797103,0,0x0,8
tick,0x7ffdf681f424,16799099,0,0x0,8
tick,0x7ffdf681f424,16801115,0,0x0,8
tick,0x7ffdf681f424,16803066,0,0x0,8
tick,0x7ffdf681f424,16805057,0,0x0,8
tick,0x7ffdf681f424,16807083,0,0x0,8
tick,0x7ffdf681f424,16809213,0,0x0,8
tick,0x7ffdf681f424,16811098,0,0x0,8
tick,0x7ffdf681f424,16813037,0,0x0,8
tick,0x7ffdf681f424,16815035,0,0x0,8
tick,0x7ffdf681f424,16817063,0,0x0,8
tick,0x7ffdf681f424,16819022,0,0x0,8
tick,0x7ffdf681f424,16821018,0,0x0,8
tick,0x7ffdf681f424,16823013,0,0x0,8
tick,0x7ffdf681f424,16825013,0,0x0,8
tick,0x7ffdf681f424,16827002,0,0x0,8
tick,0x7ffdf681f424,16829012,0,0x0,8
tick,0x7ffdf681f424,16830986,0,0x0,8
tick,0x7ffdf681f424,16832983,0,0x0,8
tick,0x7ffdf681f424,16834983,0,0x0,8
tick,0x7ffdf681f424,16836970,0,0x0,8
tick,0x7ffdf681f424,16838985,0,0x0,8
tick,0x7ffdf681f424,16840958,0,0x0,8
tick,0x7ffdf681f424,16842979,0,0x0,8
tick,0x7ffdf681f424,16844960,0,0x0,8
tick,0x7ffdf681f424,16846942,0,0x0,8
tick,0x7ffdf681f424,16849084,0,0x0,8
tick,0x7ffdf681f424,16850945,0,0x0,8
tick,0x7ffdf681f424,16852932,0,0x0,8
tick,0x7ffdf681f424,16854920,0,0x0,8
tick,0x7ffdf681f424,16856914,0,0x0,8
tick,0x7ffdf681f424,16858914,0,0x0,8
tick,0x7ffdf681f424,16860983,0,0x0,8
tick,0x7ffdf681f424,16862900,0,0x0,8
tick,0x7ffdf681f424,16864922,0,0x0,8
tick,0x7ffdf681f424,16868170,0,0x0,8
tick,0x7ffdf681f424,16876788,0,0x0,8
tick,0x7ffdf681f424,16879257,0,0x0,8
tick,0x7ffdf681f424,16881272,0,0x0,8
tick,0x7ffdf681f424,16882847,0,0x0,8
tick,0x7ffdf681f424,16885000,0,0x0,8
tick,0x7ffdf681f424,16886842,0,0x0,8
tick,0x7ffdf681f424,16888885,0,0x0,8
tick,0x7ffdf681f424,16890842,0,0x0,8
tick,0x7ffdf681f424,16895754,0,0x0,8
tick,0x7ffdf681f424,16896823,0,0x0,8
tick,0x7ffdf681f424,16898803,0,0x0,8
tick,0x7ffdf681f424,16900803,0,0x0,8
tick,0x7ffdf681f424,16902796,0,0x0,8
tick,0x7ffdf681f424,16916981,0,0x0,8
tick,0x7ffdf681f424,16918805,0,0x0,8
tick,0x7ffdf681f424,16920774,0,0x0,8
tick,0x7ffdf681f424,16922745,0,0x0,8
tick,0x7ffdf681f424,16927406,0,0x0,8
tick,0x7ffdf681f424,16928726,0,0x0,8
tick,0x7ffdf681f424,16930781,0,0x0,8
tick,0x7ffdf681f424,16932720,0,0x0,8
tick,0x7ffdf681f424,16934727,0,0x0,8
tick,0x7ffdf681f424,16936704,0,0x0,8
tick,0x7ffdf681f424,16938706,0,0x0,8
tick,0x7ffdf681f424,16940690,0,0x0,8
tick,0x7ffdf681f424,16942715,0,0x0,8
tick,0x7ffdf681f424,16944687,0,0x0,8
tick,0x7ffdf681f424,16946676,0,0x0,8
tick,0x7ffdf681f424,16948668,0,0x0,8
tick,0x7ffdf681f424,16950694,0,0x0,8
tick,0x7ffdf681f424,16952665,0,0x0,8
tick,0x7ffdf681f424,16954653,0,0x0,8
tick,0x7ffdf681f424,16956669,0,0x0,8
tick,0x7ffdf681f424,16958755,0,0x0,8
tick,0x7ffdf681f424,16960663,0,0x0,8
tick,0x7ffdf681f424,16962634,0,0x0,8
tick,0x7ffdf681f424,16964634,0,0x0,8
tick,0x7ffdf681f424,16966866,0,0x0,8
tick,0x7ffdf681f424,16968647,0,0x0,8
tick,0x7ffdf681f424,16970621,0,0x0,8
tick,0x7ffdf681f424,16972612,0,0x0,8
tick,0x7ffdf681f424,16974600,0,0x0,8
tick,0x7ffdf681f424,16976630,0,0x0,8
tick,0x7ffdf681f424,16978592,0,0x0,8
tick,0x7ffdf681f424,16980583,0,0x0,8
tick,0x7ffdf681f424,16982582,0,0x0,8
tick,0x7ffdf681f424,16984592,0,0x0,8
tick,0x7ffdf681f424,16986577,0,0x0,8
tick,0x7ffdf681f424,16988661,0,0x0,8
tick,0x7ffdf681f424,16990560,0,0x0,8
tick,0x7ffdf681f424,16992638,0,0x0,8
tick,0x7ffdf681f424,16994556,0,0x0,8
tick,0x7ffdf681f424,16996572,0,0x0,8
tick,0x7ffdf681f424,16998549,0,0x0,8
tick,0x7ffdf681f424,17000574,0,0x0,8
tick,0x7ffdf681f424,17002530,0,0x0,8
tick,0x7ffdf681f424,17004523,0,0x0,8
tick,0x7ffdf681f424,17020335,0,0x0,8
tick,0x7ffdf681f424,17021485,0,0x0,8
tick,0x7ffdf681f424,17023477,0,0x0,8
tick,0x7ffdf681f424,17025555,0,0x0,8
tick,0x7ffdf681f424,17027859,0,0x0,8
tick,0x7ffdf681f424,17029596,0,0x0,8
tick,0x7ffdf681f424,17031458,0,0x0,8
tick,0x7ffdf681f424,17033770,0,0x0,8
tick,0x7ffdf681f424,17035489,0,0x0,8
tick,0x7ffdf681f424,17037570,0,0x0,8
tick,0x7ffdf681f424,17040677,0,0x0,8
tick,0x7ffdf681f424,17054524,0,0x0,8
tick,0x7ffdf681f424,17056623,0,0x0,8
tick,0x7ffdf681f424,17058494,0,0x0,8
tick,0x7ffdf681f424,17060392,0,0x0,8
tick,0x7ffdf681f424,17062448,0,0x0,8
tick,0x7ffdf681f424,17064409,0,0x0,8
tick,0x7ffdf681f424,17066400,0,0x0,8
tick,0x7ffdf681f424,17068507,0,0x0,8
tick,0x7ffdf681f424,17070365,0,0x0,8
tick,0x7ffdf681f424,17072341,0,0x0,8
tick,0x7ffdf681f424,17074347,0,0x0,8
tick,0x7ffdf681f424,17076338,0,0x0,8
tick,0x7ffdf681f424,17078326,0,0x0,8
tick,0x7ffdf681f424,17080318,0,0x0,8
tick,0x7ffdf681f424,17082322,0,0x0,8
tick,0x7ffdf681f424,17084352,0,0x0,8
tick,0x7ffdf681f424,17086307,0,0x0,8
tick,0x7ffdf681f424,17088294,0,0x0,8
tick,0x7ffdf681f424,17090296,0,0x0,8
tick,0x7ffdf681f424,17092308,0,0x0,8
tick,0x7ffdf681f424,17094285,0,0x0,8
tick,0x7ffdf681f424,17096273,0,0x0,8
tick,0x7ffdf681f424,17098269,0,0x0,8
tick,0x7ffdf681f424,17100474,0,0x0,8
tick,0x7ffdf681f424,17102263,0,0x0,8
tick,0x7ffdf681f424,17104255,0,0x0,8
tick,0x7ffdf681f424,17106249,0,0x0,8
tick,0x7ffdf681f424,17108410,0,0x0,8
tick,0x7ffdf681f424,17110248,0,0x0,8
tick,0x7ffdf681f424,17112232,0,0x0,8
tick,0x7ffdf681f424,17114226,0,0x0,8
tick,0x7ffdf681f424,17116220,0,0x0,8
tick,0x7ffdf681f424,17118220,0,0x0,8
tick,0x7ffdf681f424,17120366,0,0x0,8
tick,0x7ffdf681f424,17122213,0,0x0,8
tick,0x7ffdf681f424,17124202,0,0x0,8
tick,0x7ffdf681f424,17126197,0,0x0,8
tick,0x7ffdf681f424,17128191,0,0x0,8
tick,0x7ffdf681f424,17130182,0,0x0,8
tick,0x7ffdf681f424,17132177,0,0x0,8
tick,0x7ffdf681f424,17134192,0,0x0,8
tick,0x7ffdf681f424,17136171,0,0x0,8
tick,0x7ffdf681f424,17138162,0,0x0,8
tick,0x7ffdf681f424,17153333,0,0x0,8
tick,0x7ffdf681f424,17153360,0,0x0,8
tick,0x7ffdf681f424,17155132,0,0x0,8
tick,0x7ffdf681f424,17157278,0,0x0,8
tick,0x7ffdf681f424,17159217,0,0x0,8
tick,0x7ffdf681f424,17161153,0,0x0,8
tick,0x7ffdf681f424,17163098,0,0x0,8
tick,0x7ffdf681f424,17165095,0,0x0,8
tick,0x7ffdf681f424,17167115,0,0x0,8
tick,0x7ffdf681f424,17169083,0,0x0,8
tick,0x7ffdf681f424,17171528,0,0x0,8
tick,0x7ffdf681f424,17177119,0,0x0,8
tick,0x7ffdf681f424,17186546,0,0x0,8
tick,0x7ffdf681f424,17188032,0,0x0,8
tick,0x7ffdf681f424,17190034,0,0x0,8
tick,0x7ffdf681f424,17192137,0,0x0,8
tick,0x7ffdf681f424,17194099,0,0x0,8
tick,0x7ffdf681f424,17196010,0,0x0,8
tick,0x7ffdf681f424,17198038,0,0x0,8
tick,0x7ffdf681f424,17199998,0,0x0,8
tick,0x7ffdf681f424,17201996,0,0x0,8
tick,0x7ffdf681f424,17203988,0,0x0,8
tick,0x7ffdf681f424,17205989,0,0x0,8
tick,0x7ffdf681f424,17207978,0,0x0,8
tick,0x7ffdf681f424,17209969,0,0x0,8
tick,0x7ffdf681f424,17212022,0,0x0,8
tick,0x7ffdf681f424,17213961,0,0x0,8
tick,0x7ffdf681f424,17216907,0,0x0,8
tick,0x7ffdf681f424,17218055,0,0x0,8
tick,0x7ffdf681f424,17219982,0,0x0,8
tick,0x7ffdf681f424,17222015,0,0x0,8
tick,0x7ffdf681f424,17224098,0,0x0,8
tick,0x7ffdf681f424,17226049,0,0x0,8
tick,0x7ffdf681f424,17228039,0,0x0,8
tick,0x7ffdf681f424,17229966,0,0x0,8
tick,0x7ffdf681f424,17231973,0,0x0,8
tick,0x7ffdf681f424,17233984,0,0x0,8
tick,0x7ffdf681f424,17235986,0,0x0,8
tick,0x7ffdf681f424,17238041,0,0x0,8
tick,0x7ffdf681f424,17239934,0,0x0,8
tick,0x7ffdf681f424,17242009,0,0x0,8
tick,0x7ffdf681f424,17244092,0,0x0,8
tick,0x7ffdf681f424,17245888,0,0x0,8
tick,0x7ffdf681f424,17247882,0,0x0,8
tick,0x7ffdf681f424,17250928,0,0x0,8
tick,0x7ffdf681f424,17252907,0,0x0,8
tick,0x7ffdf681f424,17254861,0,0x0,8
tick,0x7ffdf681f424,17256855,0,0x0,8
tick,0x7ffdf681f424,17258865,0,0x0,8
tick,0x7ffdf681f424,17260896,0,0x0,8
tick,0x7ffdf681f424,17262836,0,0x0,8
tick,0x7ffdf681f424,17264909,0,0x0,8
tick,0x7ffdf681f424,17266838,0,0x0,8
tick,0x7ffdf681f424,17268818,0,0x0,8
tick,0x7ffdf681f424,17270852,0,0x0,8
tick,0x7ffdf681f424,17272806,0,0x0,8
tick,0x7ffdf681f424,17274947,0,0x0,8
tick,0x7ffdf681f424,17276819,0,0x0,8
tick,0x7ffdf681f424,17278801,0,0x0,8
tick,0x7ffdf681f424,17280783,0,0x0,8
tick,0x7ffdf681f424,17282774,0,0x0,8
tick,0x7ffdf681f424,17284802,0,0x0,8
tick,0x7ffdf681f424,17286769,0,0x0,8
tick,0x7ffdf681f424,17288764,0,0x0,8
tick,0x7ffdf681f424,17290758,0,0x0,8
tick,0x7ffdf681f424,17292759,0,0x0,8
tick,0x7ffdf681f424,17308978,0,0x0,8
tick,0x7ffdf681f424,17310714,0,0x0,8
tick,0x7ffdf681f424,17312712,0,0x0,8
tick,0x7ffdf681f424,17314989,0,0x0,8
tick,0x7ffdf681f424,17320176,0,0x0,8
tick,0x7ffdf681f424,17321679,0,0x0,8
tick,0x7ffdf681f424,17323670,0,0x0,8
tick,0x7ffdf681f424,17325708,0,0x0,8
tick,0x7ffdf681f424,17333084,0,0x0,8
tick,0x7ffdf681f424,17334649,0,0x0,8
tick,0x7ffdf681f424,17336640,0,0x0,8
tick,0x7ffdf681f424,17338687,0,0x0,8
tick,0x7ffdf681f424,17340633,0,0x0,8
tick,0x7ffdf681f424,17342713,0,0x0,8
tick,0x7ffdf681f424,17344655,0,0x0,8
tick,0x7ffdf681f424,17346606,0,0x0,8
tick,0x7ffdf681f424,17348603,0,0x0,8
tick,0x7ffdf681f424,17350613,0,0x0,8
tick,0x7ffdf681f424,17352591,0,0x0,8
tick,0x7ffdf681f424,17354587,0,0x0,8
tick,0x7ffdf681f424,17356580,0,0x0,8
tick,0x7ffdf681f424,17358701,0,0x0,8
tick,0x7ffdf681f424,17360584,0,0x0,8
tick,0x7ffdf681f424,17362564,0,0x0,8
tick,0x7ffdf681f424,17364559,0,0x0,8
tick,0x7ffdf681f424,17366631,0,0x0,8
tick,0x7ffdf681f424,17368552,0,0x0,8
tick,0x7ffdf681f424,17370559,0,0x0,8
tick,0x7ffdf681f424,17372555,0,0x0,8
tick,0x7ffdf681f424,17374612,0,0x0,8
tick,0x7ffdf681f424,17376559,0,0x0,8
tick,0x7ffdf681f424,17378647,0,0x0,8
tick,0x7ffdf681f424,17380528,0,0x0,8
tick,0x7ffdf681f424,17382523,0,0x0,8
tick,0x7ffdf681f424,17384559,0,0x0,8
tick,0x7ffdf681f424,17388341,0,0x0,8
tick,0x7ffdf681f424,17389563,0,0x0,8
tick,0x7ffdf681f424,17391081,0,0x0,8
tick,0x7ffdf681f424,17393061,0,0x0,8
tick,0x7ffdf681f424,17395741,0,0x0,8
tick,0x7ffdf681f424,17397096,0,0x0,8
tick,0x7ffdf681f424,17399239,0,0x0,8
tick,0x7ffdf681f424,17401350,0,0x0,8
tick,0x7ffdf681f424,17403176,0,0x0,8
tick,0x7ffdf681f424,17404957,0,0x0,8
tick,0x7ffdf681f424,17406953,0,0x0,8
tick,0x7ffdf681f424,17408957,0,0x0,8
tick,0x7ffdf681f424,17410943,0,0x0,8
tick,0x7ffdf681f424,17412936,0,0x0,8
tick,0x7ffdf681f424,17414925,0,0x0,8
tick,0x7ffdf681f424,17416922,0,0x0,8
tick,0x7ffdf681f424,17418909,0,0x0,8
tick,0x7ffdf681f424,17420925,0,0x0,8
tick,0x7ffdf681f424,17422914,0,0x0,8
tick,0x7ffdf681f424,17424998,0,0x0,8
tick,0x7ffdf681f424,17439209,0,0x0,8
tick,0x7ffdf681f424,17441057,0,0x0,8
tick,0x7ffdf681f424,17442918,0,0x0,8
tick,0x7ffdf681f424,17446109,0,0x0,8
tick,0x7ffdf681f424,17447900,0,0x0,8
tick,0x7ffdf681f424,17450014,0,0x0,8
tick,0x7ffdf681f424,17451899,0,0x0,8
tick,0x7ffdf681f424,17453856,0,0x0,8
tick,0x7ffdf681f424,17455824,0,0x0,8
tick,0x7ffdf681f424,17457822,0,0x0,8
tick,0x7ffdf681f424,17459862,0,0x0,8
tick,0x7ffdf681f424,17461883,0,0x0,8
tick,0x7ffdf681f424,17463803,0,0x0,8
tick,0x7ffdf681f424,17465797,0,0x0,8
tick,0x7ffdf681f424,17467889,0,0x0,8
tick,0x7ffdf681f424,17469791,0,0x0,8
tick,0x7ffdf681f424,17471797,0,0x0,8
tick,0x7ffdf681f424,17473774,0,0x0,8
tick,0x7ffdf681f424,17475777,0,0x0,8
tick,0x7ffdf681f424,17477780,0,0x0,8
tick,0x7ffdf681f424,17479786,0,0x0,8
tick,0x7ffdf681f424,17493505,0,0x0,8
tick,0x7ffdf681f424,17495907,0,0x0,8
tick,0x7ffdf681f424,17497222,0,0x0,8
tick,0x7ffdf681f424,17499222,0,0x0,8
tick,0x7ffdf681f424,17501217,0,0x0,8
tick,0x7ffdf681f424,17503262,0,0x0,8
tick,0x7ffdf681f424,17505248,0,0x0,8
tick,0x7ffdf681f424,17507259,0,0x0,8
tick,0x7ffdf681f424,17509191,0,0x0,8
tick,0x7ffdf681f424,17511185,0,0x0,8
tick,0x7ffdf681f424,17513184,0,0x0,8
tick,0x7ffdf681f424,17515172,0,0x0,8
tick,0x7ffdf681f424,17517174,0,0x0,8
tick,0x7ffdf681f424,17519174,0,0x0,8
tick,0x7ffdf681f424,17521157,0,0x0,8
tick,0x7ffdf681f424,17523150,0,0x0,8
tick,0x7ffdf681f424,17525150,0,0x0,8
tick,0x7ffdf681f424,17527555,0,0x0,8
tick,0x7ffdf681f424,17529145,0,0x0,8
tick,0x7ffdf681f424,17531135,0,0x0,8
tick,0x7ffdf681f424,17533124,0,0x0,8
tick,0x7ffdf681f424,17535142,0,0x0,8
tick,0x7ffdf681f424,17537591,0,0x0,8
tick,0x7ffdf681f424,17539747,0,0x0,8
tick,0x7ffdf681f424,17541322,0,0x0,8
tick,0x7ffdf681f424,17543312,0,0x0,8
tick,0x7ffdf681f424,17553932,0,0x0,8
tick,0x7ffdf681f424,17555110,0,0x0,8
tick,0x7ffdf681f424,17560158,0,0x0,8
tick,0x7ffdf681f424,17562074,0,0x0,8
tick,0x7ffdf681f424,17564051,0,0x0,8
tick,0x7ffdf681f424,17566108,0,0x0,8
tick,0x7ffdf681f424,17582332,0,0x0,8
tick,0x7ffdf681f424,17585967,0,0x0,8
tick,0x7ffdf681f424,17587982,0,0x0,8
tick,0x7ffdf681f424,17589975,0,0x0,8
tick,0x7ffdf681f424,17591985,0,0x0,8
tick,0x7ffdf681f424,17593974,0,0x0,8
tick,0x7ffdf681f424,17596018,0,0x0,8
tick,0x7ffdf681f424,17597997,0,0x0,8
tick,0x7ffdf681f424,17600410,0,0x0,8
tick,0x7ffdf681f424,17601953,0,0x0,8
tick,0x7ffdf681f424,17603941,0,0x0,8
tick,0x7ffdf681f424,17605931,0,0x0,8
tick,0x7ffdf681f424,17607927,0,0x0,8
tick,0x7ffdf681f424,17609922,0,0x0,8
tick,0x7ffdf681f424,17611921,0,0x0,8
tick,0x7ffdf681f424,17613968,0,0x0,8
tick,0x7ffdf681f424,17615901,0,0x0,8
tick,0x7ffdf681f424,17617901,0,0x0,8
tick,0x7ffdf681f424,17619894,0,0x0,8
tick,0x7ffdf681f424,17622310,0,0x0,8
tick,0x7ffdf681f424,17624219,0,0x0,8
tick,0x7ffdf681f424,17626042,0,0x0,8
tick,0x7ffdf681f424,17628032,0,0x0,8
tick,0x7ffdf681f424,17639090,0,0x0,8
tick,0x7ffdf681f424,17640844,0,0x0,8
tick,0x7ffdf681f424,17642853,0,0x0,8
tick,0x7ffdf681f424,17644819,0,0x0,8
tick,0x7ffdf681f424,17646831,0,0x0,8
tick,0x7ffdf681f424,17648845,0,0x0,8
tick,0x7ffdf681f424,17650986,0,0x0,8
tick,0x7ffdf681f424,17652889,0,0x0,8
tick,0x7ffdf681f424,17654943,0,0x0,8
tick,0x7ffdf681f424,17656842,0,0x0,8
tick,0x7ffdf681f424,17658879,0,0x0,8
tick,0x7ffdf681f424,17660793,0,0x0,8
tick,0x7ffdf681f424,17662789,0,0x0,8
tick,0x7ffdf681f424,17664777,0,0x0,8
tick,0x7ffdf681f424,17666781,0,0x0,8
tick,0x7ffdf681f424,17668764,0,0x0,8
tick,0x7ffdf681f424,17670759,0,0x0,8
tick,0x7ffdf681f424,17672755,0,0x0,8
tick,0x7ffdf681f424,17674756,0,0x0,8
tick,0x7ffdf681f424,17676757,0,0x0,8
tick,0x7ffdf681f424,17678740,0,0x0,8
tick,0x7ffdf681f424,17680737,0,0x0,8
tick,0x7ffdf681f424,17682724,0,0x0,8
tick,0x7ffdf681f424,17684721,0,0x0,8
tick,0x7ffdf681f424,17686715,0,0x0,8
tick,0x7ffdf681f424,17688706,0,0x0,8
tick,0x7ffdf681f424,17690703,0,0x0,8
tick,0x7ffdf681f424,17692715,0,0x0,8
tick,0x7ffdf681f424,17694706,0,0x0,8
tick,0x7ffdf681f424,17696746,0,0x0,8
tick,0x7ffdf681f424,17698682,0,0x0,8
tick,0x7ffdf681f424,17700699,0,0x0,8
tick,0x7ffdf681f424,17702771,0,0x0,8
tick,0x7ffdf681f424,17704670,0,0x0,8
tick,0x7ffdf681f424,17724664,0,0x0,8
tick,0x7ffdf681f424,17726614,0,0x0,8
tick,0x7ffdf681f424,17728609,0,0x0,8
tick,0x7ffdf681f424,17730597,0,0x0,8
tick,0x7ffdf681f424,17732593,0,0x0,8
tick,0x7ffdf681f424,17734710,0,0x0,8
tick,0x7ffdf681f424,17736631,0,0x0,8
tick,0x7ffdf681f424,17738593,0,0x0,8
tick,0x7ffdf681f424,17740592,0,0x0,8
tick,0x7ffdf681f424,17742725,0,0x0,8
tick,0x7ffdf681f424,17744592,0,0x0,8
tick,0x7ffdf681f424,17746567,0,0x0,8
tick,0x7ffdf681f424,17748643,0,0x0,8
tick,0x7ffdf681f424,17750644,0,0x0,8
tick,0x7ffdf681f424,17752619,0,0x0,8
tick,0x7ffdf681f424,17754547,0,0x0,8
tick,0x7ffdf681f424,17758426,0,0x0,8
tick,0x7ffdf681f424,17759604,0,0x0,8
tick,0x7ffdf681f424,17761560,0,0x0,8
tick,0x7ffdf681f424,17763511,0,0x0,8
tick,0x7ffdf681f424,17765509,0,0x0,8
tick,0x7ffdf681f424,17767507,0,0x0,8
tick,0x7ffdf681f424,17770919,0,0x0,8
tick,0x7ffdf681f424,17771557,0,0x0,8
tick,0x7ffdf681f424,17773568,0,0x0,8
tick,0x7ffdf681f424,17775536,0,0x0,8
tick,0x7ffdf681f424,17777520,0,0x0,8
tick,0x7ffdf681f424,17779472,0,0x0,8
tick,0x7ffdf681f424,17781461,0,0x0,8
tick,0x7ffdf681f424,17783760,0,0x0,8
tick,0x7ffdf681f424,17785456,0,0x0,8
tick,0x7ffdf681f424,17787446,0,0x0,8
tick,0x7ffdf681f424,17789437,0,0x0,8
tick,0x7ffdf681f424,17791434,0,0x0,8
tick,0x7ffdf681f424,17793442,0,0x0,8
tick,0x7ffdf681f424,17795432,0,0x0,8
tick,0x7ffdf681f424,17797418,0,0x0,8
tick,0x7ffdf681f424,17799409,0,0x0,8
tick,0x7ffdf681f424,17801422,0,0x0,8
tick,0x7ffdf681f424,17803406,0,0x0,8
tick,0x7ffdf681f424,17805403,0,0x0,8
tick,0x7ffdf681f424,17807394,0,0x0,8
tick,0x7ffdf681f424,17809394,0,0x0,8
tick,0x7ffdf681f424,17811450,0,0x0,8
tick,0x7ffdf681f424,17813373,0,0x0,8
tick,0x7ffdf681f424,17815372,0,0x0,8
tick,0x7ffdf681f424,17817421,0,0x0,8
tick,0x7ffdf681f424,17819360,0,0x0,8
tick,0x7ffdf681f424,17821364,0,0x0,8
tick,0x7ffdf681f424,17823345,0,0x0,8
tick,0x7ffdf681f424,17825383,0,0x0,8
tick,0x7ffdf681f424,17830065,0,0x0,8
tick,0x7ffdf681f424,17843351,0,0x0,8
tick,0x7ffdf681f424,17845321,0,0x0,8
tick,0x7ffdf681f424,17847371,0,0x0,8
tick,0x7ffdf681f424,17849279,0,0x0,8
tick,0x7ffdf681f424,17851281,0,0x0,8
tick,0x7ffdf681f424,17853281,0,0x0,8
tick,0x7ffdf681f424,17855268,0,0x0,8
tick,0x7ffdf681f424,17871527,0,0x0,8
tick,0x7ffdf681f424,17873214,0,0x0,8
tick,0x7ffdf681f424,17875319,0,0x0,8
tick,0x7ffdf681f424,17877207,0,0x0,8
tick,0x7ffdf681f424,17879301,0,0x0,8
tick,0x7ffdf681f424,17881675,0,0x0,8
tick,0x7ffdf681f424,17883260,0,0x0,8
tick,0x7ffdf681f424,17885372,0,0x0,8
tick,0x7ffdf681f424,17887187,0,0x0,8
tick,0x7ffdf681f424,17889175,0,0x0,8
tick,0x7ffdf681f424,17891196,0,0x0,8
tick,0x7ffdf681f424,17893170,0,0x0,8
tick,0x7ffdf681f424,17895168,0,0x0,8
tick,0x7ffdf681f424,17897149,0,0x0,8
tick,0x7ffdf681f424,17899146,0,0x0,8
tick,0x7ffdf681f424,17901147,0,0x0,8
tick,0x7ffdf681f424,17903140,0,0x0,8
tick,0x7ffdf681f424,17905133,0,0x0,8
tick,0x7ffdf681f424,17907122,0,0x0,8
tick,0x7ffdf681f424,17909132,0,0x0,8
tick,0x7ffdf681f424,17911131,0,0x0,8
tick,0x7ffdf681f424,17913110,0,0x0,8
tick,0x7ffdf681f424,17915184,0,0x0,8
tick,0x7ffdf681f424,17917144,0,0x0,8
tick,0x7ffdf681f424,17919092,0,0x0,8
tick,0x7ffdf681f424,17921090,0,0x0,8
tick,0x7ffdf681f424,17923078,0,0x0,8
tick,0x7ffdf681f424,17925136,0,0x0,8
tick,0x7ffdf681f424,17927091,0,0x0,8
tick,0x7ffdf681f424,17929065,0,0x0,8
tick,0x7ffdf681f424,17931060,0,0x0,8
tick,0x7ffdf681f424,17933085,0,0x0,8
tick,0x7ffdf681f424,17935086,0,0x0,8
tick,0x7ffdf681f424,17937061,0,0x0,8
tick,0x7ffdf681f424,17939039,0,0x0,8
tick,0x7ffdf681f424,17941030,0,0x0,8
tick,0x7ffdf681f424,17943037,0,0x0,8
tick,0x7ffdf681f424,17945038,0,0x0,8
tick,0x7ffdf681f424,17947019,0,0x0,8
tick,0x7ffdf681f424,17949012,0,0x0,8
tick,0x7ffdf681f424,17951008,0,0x0,8
tick,0x7ffdf681f424,17956474,0,0x0,8
tick,0x7ffdf681f424,17971651,0,0x0,8
tick,0x7ffdf681f424,17973307,0,0x0,8
tick,0x7ffdf681f424,17975951,0,0x0,8
tick,0x7ffdf681f424,17986901,0,0x0,8
tick,0x7ffdf681f424,17987191,0,0x0,8
tick,0x7ffdf681f424,17988993,0,0x0,8
tick,0x7ffdf681f424,17990899,0,0x0,8
tick,0x7ffdf681f424,17992924,0,0x0,8
tick,0x7ffdf681f424,17996933,0,0x0,8
tick,0x7ffdf681f424,17998884,0,0x0,8
tick,0x7ffdf681f424,18000884,0,0x0,8
tick,0x7ffdf681f424,18002871,0,0x0,8
tick,0x7ffdf681f424,18004859,0,0x0,8
tick,0x7ffdf681f424,18006857,0,0x0,8
tick,0x7ffdf681f424,18008993,0,0x0,8
tick,0x7ffdf681f424,18010886,0,0x0,8
tick,0x7ffdf681f424,18012842,0,0x0,8
tick,0x7ffdf681f424,18014837,0,0x0,8
tick,0x7ffdf681f424,18016878,0,0x0,8
tick,0x7ffdf681f424,18018827,0,0x0,8
tick,0x7ffdf681f424,18020847,0,0x0,8
tick,0x7ffdf681f424,18022814,0,0x0,8
tick,0x7ffdf681f424,18024812,0,0x0,8
tick,0x7ffdf681f424,18026838,0,0x0,8
tick,0x7ffdf681f424,18028797,0,0x0,8
tick,0x7ffdf681f424,18030795,0,0x0,8
tick,0x7ffdf681f424,18032788,0,0x0,8
tick,0x7ffdf681f424,18034782,0,0x0,8
tick,0x7ffdf681f424,18036814,0,0x0,8
tick,0x7ffdf681f424,18038777,0,0x0,8
tick,0x7ffdf681f424,18040765,0,0x0,8
tick,0x7ffdf681f424,18042768,0,0x0,8
tick,0x7ffdf681f424,18044752,0,0x0,8
tick,0x7ffdf681f424,18046756,0,0x0,8
tick,0x7ffdf681f424,18048760,0,0x0,8
tick,0x7ffdf681f424,18050779,0,0x0,8
tick,0x7ffdf681f424,18052734,0,0x0,8
tick,0x7ffdf681f424,18054728,0,0x0,8
tick,0x7ffdf681f424,18056836,0,0x0,8
tick,0x7ffdf681f424,18058738,0,0x0,8
tick,0x7ffdf681f424,18060712,0,0x0,8
tick,0x7ffdf681f424,18062773,0,0x0,8
tick,0x7ffdf681f424,18064700,0,0x0,8
tick,0x7ffdf681f424,18066711,0,0x0,8
tick,0x7ffdf681f424,18068696,0,0x0,8
tick,0x7ffdf681f424,18070741,0,0x0,8
tick,0x7ffdf681f424,18084138,0,0x0,8
tick,0x7ffdf681f424,18085650,0,0x0,8
tick,0x7ffdf681f424,18087648,0,0x0,8
tick,0x7ffdf681f424,18089830,0,0x0,8
tick,0x7ffdf681f424,18091966,0,0x0,8
tick,0x7ffdf681f424,18093632,0,0x0,8
tick,0x7ffdf681f424,18095620,0,0x0,8
tick,0x7ffdf681f424,18097621,0,0x0,8
tick,0x7ffdf681f424,18099608,0,0x0,8
tick,0x7ffdf681f424,18101610,0,0x0,8
tick,0x7ffdf681f424,18103622,0,0x0,8
tick,0x7ffdf681f424,18105615,0,0x0,8
tick,0x7ffdf681f424,18107588,0,0x0,8
tick,0x7ffdf681f424,18109582,0,0x0,8
tick,0x7ffdf681f424,18111581,0,0x0,8
tick,0x7ffdf681f424,18113576,0,0x0,8
tick,0x7ffdf681f424,18115719,0,0x0,8
tick,0x7ffdf681f424,18117567,0,0x0,8
tick,0x7ffdf681f424,18119558,0,0x0,8
tick,0x7ffdf681f424,18121645,0,0x0,8
tick,0x7ffdf681f424,18130803,0,0x0,8
tick,0x7ffdf681f424,18136640,0,0x0,8
tick,0x7ffdf681f424,18138516,0,0x0,8
tick,0x7ffdf681f424,18140501,0,0x0,8
tick,0x7ffdf681f424,18142830,0,0x0,8
tick,0x7ffdf681f424,18144515,0,0x0,8
tick,0x7ffdf681f424,18146558,0,0x0,8
tick,0x7ffdf681f424,18148477,0,0x0,8
tick,0x7ffdf681f424,18150509,0,0x0,8
tick,0x7ffdf681f424,18152474,0,0x0,8
tick,0x7ffdf681f424,18154464,0,0x0,8
tick,0x7ffdf681f424,18163548,0,0x0,8
tick,0x7ffdf681f424,18165450,0,0x0,8
tick,0x7ffdf681f424,18167477,0,0x0,8
tick,0x7ffdf681f424,18169434,0,0x0,8
tick,0x7ffdf681f424,18171912,0,0x0,8
tick,0x7ffdf681f424,18173420,0,0x0,8
tick,0x7ffdf681f424,18175410,0,0x0,8
tick,0x7ffdf681f424,18177532,0,0x0,8
tick,0x7ffdf681f424,18179453,0,0x0,8
tick,0x7ffdf681f424,18181396,0,0x0,8
tick,0x7ffdf681f424,18183480,0,0x0,8
tick,0x7ffdf681f424,18185380,0,0x0,8
tick,0x7ffdf681f424,18187375,0,0x0,8
tick,0x7ffdf681f424,18189383,0,0x0,8
tick,0x7ffdf681f424,18191363,0,0x0,8
tick,0x7ffdf681f424,18193363,0,0x0,8
tick,0x7ffdf681f424,18195354,0,0x0,8
tick,0x7ffdf681f424,18197349,0,0x0,8
tick,0x7ffdf681f424,18199345,0,0x0,8
tick,0x7ffdf681f424,18201339,0,0x0,8
tick,0x7ffdf681f424,18203352,0,0x0,8
tick,0x7ffdf681f424,18205326,0,0x0,8
tick,0x7ffdf681f424,18207319,0,0x0,8
tick,0x7ffdf681f424,18209316,0,0x0,8
tick,0x7ffdf681f424,18212833,0,0x0,8
tick,0x7ffdf681f424,18219905,0,0x0,8
tick,0x7ffdf681f424,18225806,0,0x0,8
tick,0x7ffdf681f424,18228140,0,0x0,8
tick,0x7ffdf681f424,18229256,0,0x0,8
tick,0x7ffdf681f424,18231272,0,0x0,8
tick,0x7ffdf681f424,18233242,0,0x0,8
tick,0x7ffdf681f424,18235244,0,0x0,8
tick,0x7ffdf681f424,18237248,0,0x0,8
tick,0x7ffdf681f424,18239446,0,0x0,8
tick,0x7ffdf681f424,18241229,0,0x0,8
tick,0x7ffdf681f424,18243280,0,0x0,8
tick,0x7ffdf681f424,18245257,0,0x0,8
tick,0x7ffdf681f424,18251745,0,0x0,8
tick,0x7ffdf681f424,18253243,0,0x0,8
tick,0x7ffdf681f424,18255199,0,0x0,8
tick,0x7ffdf681f424,18257208,0,0x0,8
tick,0x7ffdf681f424,18259183,0,0x0,8
tick,0x7ffdf681f424,18261478,0,0x0,8
tick,0x7ffdf681f424,18263174,0,0x0,8
tick,0x7ffdf681f424,18265171,0,0x0,8
tick,0x7ffdf681f424,18267220,0,0x0,8
tick,0x7ffdf681f424,18269195,0,0x0,8
tick,0x7ffdf681f424,18271197,0,0x0,8
tick,0x7ffdf681f424,18273189,0,0x0,8
tick,0x7ffdf681f424,18275139,0,0x0,8
tick,0x7ffdf681f424,18277126,0,0x0,8
tick,0x7ffdf681f424,18279121,0,0x0,8
tick,0x7ffdf681f424,18281122,0,0x0,8
tick,0x7ffdf681f424,18283117,0,0x0,8
tick,0x7ffdf681f424,18285127,0,0x0,8
tick,0x7ffdf681f424,18287126,0,0x0,8
tick,0x7ffdf681f424,18289194,0,0x0,8
tick,0x7ffdf681f424,18291113,0,0x0,8
tick,0x7ffdf681f424,18293103,0,0x0,8
tick,0x7ffdf681f424,18295088,0,0x0,8
tick,0x7ffdf681f424,18297090,0,0x0,8
tick,0x7ffdf681f424,18299078,0,0x0,8
tick,0x7ffdf681f424,18301100,0,0x0,8
tick,0x7ffdf681f424,18303071,0,0x0,8
tick,0x7ffdf681f424,18305064,0,0x0,8
tick,0x7ffdf681f424,18307058,0,0x0,8
tick,0x7ffdf681f424,18309062,0,0x0,8
tick,0x7ffdf681f424,18311114,0,0x0,8
tick,0x7ffdf681f424,18313095,0,0x0,8
tick,0x7ffdf681f424,18315044,0,0x0,8
tick,0x7ffdf681f424,18317053,0,0x0,8
tick,0x7ffdf681f424,18319027,0,0x0,8
tick,0x7ffdf681f424,18321021,0,0x0,8
tick,0x7ffdf681f424,18323015,0,0x0,8
tick,0x7ffdf681f424,18325020,0,0x0,8
tick,0x7ffdf681f424,18351860,0,0x0,8
tick,0x7ffdf681f424,18352933,0,0x0,8
tick,0x7ffdf681f424,18355027,0,0x0,8
tick,0x7ffdf681f424,18356969,0,0x0,8
tick,0x7ffdf681f424,18358929,0,0x0,8
tick,0x7ffdf681f424,18360914,0,0x0,8
tick,0x7ffdf681f424,18363395,0,0x0,8
tick,0x7ffdf681f424,18366119,0,0x0,8
tick,0x7ffdf681f424,18367910,0,0x0,8
tick,0x7ffdf681f424,18369884,0,0x0,8
tick,0x7ffdf681f424,18371883,0,0x0,8
tick,0x7ffdf681f424,18373877,0,0x0,8
tick,0x7ffdf681f424,18375882,0,0x0,8
tick,0x7ffdf681f424,18377859,0,0x0,8
tick,0x7ffdf681f424,18379863,0,0x0,8
tick,0x7ffdf681f424,18381852,0,0x0,8
tick,0x7ffdf681f424,18383874,0,0x0,8
tick,0x7ffdf681f424,18385838,0,0x0,8
tick,0x7ffdf681f424,18387845,0,0x0,8
tick,0x7ffdf681f424,18389837,0,0x0,8
tick,0x7ffdf681f424,18391827,0,0x0,8
tick,0x7ffdf681f424,18393819,0,0x0,8
tick,0x7ffdf681f424,18395825,0,0x0,8
tick,0x7ffdf681f424,18397807,0,0x0,8
tick,0x7ffdf681f424,18399804,0,0x0,8
tick,0x7ffdf681f424,18401798,0,0x0,8
tick,0x7ffdf681f424,18403792,0,0x0,8
tick,0x7ffdf681f424,18417723,0,0x0,8
tick,0x7ffdf681f424,18418756,0,0x0,8
tick,0x7ffdf681f424,18424515,0,0x0,8
tick,0x7ffdf681f424,18431324,0,0x0,8
tick,0x7ffdf681f424,18433893,0,0x0,8
tick,0x7ffdf681f424,18435719,0,0x0,8
tick,0x7ffdf681f424,18437773,0,0x0,8
tick,0x7ffdf681f424,18439710,0,0x0,8
tick,0x7ffdf681f424,18441852,0,0x0,8
tick,0x7ffdf681f424,18443702,0,0x0,8
tick,0x7ffdf681f424,18445680,0,0x0,8
tick,0x7ffdf681f424,18447668,0,0x0,8
tick,0x7ffdf681f424,18449666,0,0x0,8
tick,0x7ffdf681f424,18451670,0,0x0,8
tick,0x7ffdf681f424,18453745,0,0x0,8
tick,0x7ffdf681f424,18455671,0,0x0,8
tick,0x7ffdf681f424,18457709,0,0x0,8
tick,0x7ffdf681f424,18459649,0,0x0,8
tick,0x7ffdf681f424,18461643,0,0x0,8
tick,0x7ffdf681f424,18463649,0,0x0,8
tick,0x7ffdf681f424,18465632,0,0x0,8
tick,0x7ffdf681f424,18467630,0,0x0,8
tick,0x7ffdf681f424,18469618,0,0x0,8
tick,0x7ffdf681f424,18471613,0,0x0,8
tick,0x7ffdf681f424,18473612,0,0x0,8
tick,0x7ffdf681f424,18475616,0,0x0,8
tick,0x7ffdf681f424,18477596,0,0x0,8
tick,0x7ffdf681f424,18479586,0,0x0,8
tick,0x7ffdf681f424,18481583,0,0x0,8
tick,0x7ffdf681f424,18483648,0,0x0,8
tick,0x7ffdf681f424,18485579,0,0x0,8
tick,0x7ffdf681f424,18487572,0,0x0,8
tick,0x7ffdf681f424,18489566,0,0x0,8
tick,0x7ffdf681f424,18503282,0,0x0,8
tick,0x7ffdf681f424,18504536,0,0x0,8
tick,0x7ffdf681f424,18506523,0,0x0,8
tick,0x7ffdf681f424,18509724,0,0x0,8
tick,0x7ffdf681f424,18511559,0,0x0,8
tick,0x7ffdf681f424,18513531,0,0x0,8
tick,0x7ffdf681f424,18515502,0,0x0,8
tick,0x7ffdf681f424,18517545,0,0x0,8
tick,0x7ffdf681f424,18519516,0,0x0,8
tick,0x7ffdf681f424,18521483,0,0x0,8
tick,0x7ffdf681f424,18523477,0,0x0,8
tick,0x7ffdf681f424,18525477,0,0x0,8
tick,0x7ffdf681f424,18528618,0,0x0,8
tick,0x7ffdf681f424,18530523,0,0x0,8
tick,0x7ffdf681f424,18537085,0,0x0,8
tick,0x7ffdf681f424,18544552,0,0x0,8
tick,0x7ffdf681f424,18546413,0,0x0,8
tick,0x7ffdf681f424,18548419,0,0x0,8
tick,0x7ffdf681f424,18550563,0,0x0,8
tick,0x7ffdf681f424,18552511,0,0x0,8
tick,0x7ffdf681f424,18554417,0,0x0,8
tick,0x7ffdf681f424,18556388,0,0x0,8
tick,0x7ffdf681f424,18558405,0,0x0,8
tick,0x7ffdf681f424,18560388,0,0x0,8
tick,0x7ffdf681f424,18562375,0,0x0,8
tick,0x7ffdf681f424,18564366,0,0x0,8
tick,0x7ffdf681f424,18566362,0,0x0,8
tick,0x7ffdf681f424,18568356,0,0x0,8
tick,0x7ffdf681f424,18570352,0,0x0,8
tick,0x7ffdf681f424,18572346,0,0x0,8
tick,0x7ffdf681f424,18574383,0,0x0,8
tick,0x7ffdf681f424,18576338,0,0x0,8
tick,0x7ffdf681f424,18578328,0,0x0,8
tick,0x7ffdf681f424,18580323,0,0x0,8
tick,0x7ffdf681f424,18582323,0,0x0,8
tick,0x7ffdf681f424,18584316,0,0x0,8
tick,0x7ffdf681f424,18586307,0,0x0,8
tick,0x7ffdf681f424,18591034,0,0x0,8
tick,0x7ffdf681f424,18600236,0,0x0,8
tick,0x7ffdf681f424,18601269,0,0x0,8
tick,0x7ffdf681f424,18603268,0,0x0,8
tick,0x7ffdf681f424,18605365,0,0x0,8
tick,0x7ffdf681f424,18607318,0,0x0,8
tick,0x7ffdf681f424,18609254,0,0x0,8
tick,0x7ffdf681f424,18611247,0,0x0,8
tick,0x7ffdf681f424,18613238,0,0x0,8
tick,0x7ffdf681f424,18615233,0,0x0,8
tick,0x7ffdf681f424,18617222,0,0x0,8
tick,0x7ffdf681f424,18619217,0,0x0,8
tick,0x7ffdf681f424,18621241,0,0x0,8
tick,0x7ffdf681f424,18623210,0,0x0,8
tick,0x7ffdf681f424,18625216,0,0x0,8
tick,0x7ffdf681f424,18627203,0,0x0,8
tick,0x7ffdf681f424,18629233,0,0x0,8
tick,0x7ffdf681f424,18631203,0,0x0,8
tick,0x7ffdf681f424,18633240,0,0x0,8
tick,0x7ffdf681f424,18635224,0,0x0,8
tick,0x7ffdf681f424,18638144,0,0x0,8
tick,0x7ffdf681f424,18647183,0,0x0,8
tick,0x7ffdf681f424,18649138,0,0x0,8
tick,0x7ffdf681f424,18651151,0,0x0,8
tick,0x7ffdf681f424,18653130,0,0x0,8
tick,0x7ffdf681f424,18655138,0,0x0,8
tick,0x7ffdf681f424,18657154,0,0x0,8
tick,0x7ffdf681f424,18659120,0,0x0,8
tick,0x7ffdf681f424,18661112,0,0x0,8
tick,0x7ffdf681f424,18663102,0,0x0,8
tick,0x7ffdf681f424,18665096,0,0x0,8
tick,0x7ffdf681f424,18667145,0,0x0,8
tick,0x7ffdf681f424,18669094,0,0x0,8
tick,0x7ffdf681f424,18671087,0,0x0,8
tick,0x7ffdf681f424,18673141,0,0x0,8
tick,0x7ffdf681f424,18675110,0,0x0,8
tick,0x7ffdf681f424,18677061,0,0x0,8
tick,0x7ffdf681f424,18679061,0,0x0,8
tick,0x7ffdf681f424,18681050,0,0x0,8
tick,0x7ffdf681f424,18683051,0,0x0,8
tick,0x7ffdf681f424,18685044,0,0x0,8
tick,0x7ffdf681f424,18687034,0,0x0,8
tick,0x7ffdf681f424,18689037,0,0x0,8
tick,0x7ffdf681f424,18691105,0,0x0,8
tick,0x7ffdf681f424,18693032,0,0x0,8
tick,0x7ffdf681f424,18695033,0,0x0,8
tick,0x7ffdf681f424,18697025,0,0x0,8
tick,0x7ffdf681f424,18702863,0,0x0,8
tick,0x7ffdf681f424,18716097,0,0x0,8
tick,0x7ffdf681f424,18716131,0,0x0,8
tick,0x7ffdf681f424,18717960,0,0x0,8
tick,0x7ffdf681f424,18719958,0,0x0,8
tick,0x7ffdf681f424,18721972,0,0x0,8
tick,0x7ffdf681f424,18724010,0,0x0,8
tick,0x7ffdf681f424,18725939,0,0x0,8
tick,0x7ffdf681f424,18728037,0,0x0,8
tick,0x7ffdf681f424,18729927,0,0x0,8
tick,0x7ffdf681f424,18731919,0,0x0,8
tick,0x7ffdf681f424,18733922,0,0x0,8
tick,0x7ffdf681f424,18735910,0,0x0,8
tick,0x7ffdf681f424,18737942,0,0x0,8
tick,0x7ffdf681f424,18739896,0,0x0,8
tick,0x7ffdf681f424,18741942,0,0x0,8
tick,0x7ffdf681f424,18744041,0,0x0,8
tick,0x7ffdf681f424,18750859,0,0x0,8
tick,0x7ffdf681f424,18759322,0,0x0,8
tick,0x7ffdf681f424,18760848,0,0x0,8
tick,0x7ffdf681f424,18762836,0,0x0,8
tick,0x7ffdf681f424,18765113,0,0x0,8
tick,0x7ffdf681f424,18766872,0,0x0,8
tick,0x7ffdf681f424,18768862,0,0x0,8
tick,0x7ffdf681f424,18770965,0,0x0,8
tick,0x7ffdf681f424,18772810,0,0x0,8
tick,0x7ffdf681f424,18774807,0,0x0,8
tick,0x7ffdf681f424,18776806,0,0x0,8
tick,0x7ffdf681f424,18778794,0,0x0,8
tick,0x7ffdf681f424,18780790,0,0x0,8
tick,0x7ffdf681f424,18782787,0,0x0,8
tick,0x7ffdf681f424,18784778,0,0x0,8
tick,0x7ffdf681f424,18786775,0,0x0,8
tick,0x7ffdf681f424,18788766,0,0x0,8
tick,0x7ffdf681f424,18790757,0,0x0,8
tick,0x7ffdf681f424,18792754,0,0x0,8
tick,0x7ffdf681f424,18794750,0,0x0,8
tick,0x7ffdf681f424,18796744,0,0x0,8
tick,0x7ffdf681f424,18798739,0,0x0,8
tick,0x7ffdf681f424,18800353,0,0x0,8
tick,0x7ffdf681f424,18802352,0,0x0,8
tick,0x7ffdf681f424,18816222,0,0x0,8
tick,0x7ffdf681f424,18817311,0,0x0,8
tick,0x7ffdf681f424,18819302,0,0x0,8
tick,0x7ffdf681f424,18821366,0,0x0,8
tick,0x7ffdf681f424,18823349,0,0x0,8
tick,0x7ffdf681f424,18825605,0,0x0,8
tick,0x7ffdf681f424,18827289,0,0x0,8
tick,0x7ffdf681f424,18829303,0,0x0,8
tick,0x7ffdf681f424,18831265,0,0x0,8
tick,0x7ffdf681f424,18833259,0,0x0,8
tick,0x7ffdf681f424,18835260,0,0x0,8
tick,0x7ffdf681f424,18837256,0,0x0,8
tick,0x7ffdf681f424,18839243,0,0x0,8
tick,0x7ffdf681f424,18841240,0,0x0,8
tick,0x7ffdf681f424,18843232,0,0x0,8
tick,0x7ffdf681f424,18845558,0,0x0,8
tick,0x7ffdf681f424,18847298,0,0x0,8
tick,0x7ffdf681f424,18849241,0,0x0,8
tick,0x7ffdf681f424,18851724,0,0x0,8
tick,0x7ffdf681f424,18853218,0,0x0,8
tick,0x7ffdf681f424,18855265,0,0x0,8
tick,0x7ffdf681f424,18857228,0,0x0,8
tick,0x7ffdf681f424,18859246,0,0x0,8
tick,0x7ffdf681f424,18861199,0,0x0,8
tick,0x7ffdf681f424,18863303,0,0x0,8
tick,0x7ffdf681f424,18865188,0,0x0,8
tick,0x7ffdf681f424,18867348,0,0x0,8
tick,0x7ffdf681f424,18869166,0,0x0,8
tick,0x7ffdf681f424,18871163,0,0x0,8
tick,0x7ffdf681f424,18873151,0,0x0,8
tick,0x7ffdf681f424,18875156,0,0x0,8
tick,0x7ffdf681f424,18877404,0,0x0,8
tick,0x7ffdf681f424,18879154,0,0x0,8
tick,0x7ffdf681f424,18881171,0,0x0,8
tick,0x7ffdf681f424,18890629,0,0x0,8
tick,0x7ffdf681f424,18892135,0,0x0,8
tick,0x7ffdf681f424,18894314,0,0x0,8
tick,0x7ffdf681f424,18896215,0,0x0,8
tick,0x7ffdf681f424,18898256,0,0x0,8
tick,0x7ffdf681f424,18900105,0,0x0,8
tick,0x7ffdf681f424,18902199,0,0x0,8
tick,0x7ffdf681f424,18904078,0,0x0,8
tick,0x7ffdf681f424,18906067,0,0x0,8
tick,0x7ffdf681f424,18908064,0,0x0,8
tick,0x7ffdf681f424,18910056,0,0x0,8
tick,0x7ffdf681f424,18912059,0,0x0,8
tick,0x7ffdf681f424,18914096,0,0x0,8
tick,0x7ffdf681f424,18916041,0,0x0,8
tick,0x7ffdf681f424,18918040,0,0x0,8
tick,0x7ffdf681f424,18920030,0,0x0,8
tick,0x7ffdf681f424,18922047,0,0x0,8
tick,0x7ffdf681f424,18924017,0,0x0,8
tick,0x7ffdf681f424,18926066,0,0x0,8
tick,0x7ffdf681f424,18928011,0,0x0,8
tick,0x7ffdf681f424,18930007,0,0x0,8
tick,0x7ffdf681f424,18931996,0,0x0,8
tick,0x7ffdf681f424,18934047,0,0x0,8
tick,0x7ffdf681f424,18935992,0,0x0,8
tick,0x7ffdf681f424,18937984,0,0x0,8
tick,0x7ffdf681f424,18939980,0,0x0,8
tick,0x7ffdf681f424,18941981,0,0x0,8
tick,0x7ffdf681f424,18943966,0,0x0,8
tick,0x7ffdf681f424,18945961,0,0x0,8
tick,0x7ffdf681f424,18947973,0,0x0,8
tick,0x7ffdf681f424,18950866,0,0x0,8
tick,0x7ffdf681f424,18951954,0,0x0,8
tick,0x7ffdf681f424,18953952,0,0x0,8
tick,0x7ffdf681f424,18956082,0,0x0,8
tick,0x7ffdf681f424,18957950,0,0x0,8
tick,0x7ffdf681f424,18959939,0,0x0,8
tick,0x7ffdf681f424,18964623,0,0x0,8
tick,0x7ffdf681f424,18966605,0,0x0,8
tick,0x7ffdf681f424,18970947,0,0x0,8
tick,0x7ffdf681f424,18974939,0,0x0,8
tick,0x7ffdf681f424,18976895,0,0x0,8
tick,0x7ffdf681f424,18979022,0,0x0,8
tick,0x7ffdf681f424,18981148,0,0x0,8
tick,0x7ffdf681f424,18982923,0,0x0,8
tick,0x7ffdf681f424,18985067,0,0x0,8
tick,0x7ffdf681f424,18986852,0,0x0,8
tick,0x7ffdf681f424,18988855,0,0x0,8
tick,0x7ffdf681f424,18990888,0,0x0,8
tick,0x7ffdf681f424,18992835,0,0x0,8
tick,0x7ffdf681f424,18994851,0,0x0,8
tick,0x7ffdf681f424,18996827,0,0x0,8
tick,0x7ffdf681f424,18998819,0,0x0,8
tick,0x7ffdf681f424,19000842,0,0x0,8
tick,0x7ffdf681f424,19002813,0,0x0,8
tick,0x7ffdf681f424,19004802,0,0x0,8
tick,0x7ffdf681f424,19007167,0,0x0,8
tick,0x7ffdf681f424,19012749,0,0x0,8
tick,0x7ffdf681f424,19018772,0,0x0,8
tick,0x7ffdf681f424,19021068,0,0x0,8
tick,0x7ffdf681f424,19022757,0,0x0,8
tick,0x7ffdf681f424,19024753,0,0x0,8
tick,0x7ffdf681f424,19026967,0,0x0,8
tick,0x7ffdf681f424,19028795,0,0x0,8
tick,0x7ffdf681f424,19030767,0,0x0,8
tick,0x7ffdf681f424,19032729,0,0x0,8
tick,0x7ffdf681f424,19034726,0,0x0,8
tick,0x7ffdf681f424,19036715,0,0x0,8
tick,0x7ffdf681f424,19038708,0,0x0,8
tick,0x7ffdf681f424,19040707,0,0x0,8
tick,0x7ffdf681f424,19042698,0,0x0,8
tick,0x7ffdf681f424,19044691,0,0x0,8
tick,0x7ffdf681f424,19046686,0,0x0,8
tick,0x7ffdf681f424,19048681,0,0x0,8
tick,0x7ffdf681f424,19050679,0,0x0,8
tick,0x7ffdf681f424,19053069,0,0x0,8
tick,0x7ffdf681f424,19054678,0,0x0,8
tick,0x7ffdf681f424,19058878,0,0x0,8
tick,0x7ffdf681f424,19066213,0,0x0,8
tick,0x7ffdf681f424,19072653,0,0x0,8
tick,0x7ffdf681f424,19073637,0,0x0,8
tick,0x7ffdf681f424,19075618,0,0x0,8
tick,0x7ffdf681f424,19077606,0,0x0,8
tick,0x7ffdf681f424,19079607,0,0x0,8
tick,0x7ffdf681f424,19081607,0,0x0,8
tick,0x7ffdf681f424,19083608,0,0x0,8
tick,0x7ffdf681f424,19085602,0,0x0,8
tick,0x7ffdf681f424,19087579,0,0x0,8
tick,0x7ffdf681f424,19089596,0,0x0,8
tick,0x7ffdf681f424,19091580,0,0x0,8
tick,0x7ffdf681f424,19093564,0,0x0,8
tick,0x7ffdf681f424,19095618,0,0x0,8
tick,0x7ffdf681f424,19097612,0,0x0,8
tick,0x7ffdf681f424,19099575,0,0x0,8
tick,0x7ffdf681f424,19101600,0,0x0,8
tick,0x7ffdf681f424,19103553,0,0x0,8
tick,0x7ffdf681f424,19115389,0,0x0,8
tick,0x7ffdf681f424,19116502,0,0x0,8
tick,0x7ffdf681f424,19118494,0,0x0,8
tick,0x7ffdf681f424,19120487,0,0x0,8
tick,0x7ffdf681f424,19122488,0,0x0,8
tick,0x7ffdf681f424,19124495,0,0x0,8
tick,0x7ffdf681f424,19126573,0,0x0,8
tick,0x7ffdf681f424,19128681,0,0x0,8
tick,0x7ffdf681f424,19130480,0,0x0,8
tick,0x7ffdf681f424,19132463,0,0x0,8
tick,0x7ffdf681f424,19134509,0,0x0,8
tick,0x7ffdf681f424,19136450,0,0x0,8
tick,0x7ffdf681f424,19138455,0,0x0,8
tick,0x7ffdf681f424,19140440,0,0x0,8
tick,0x7ffdf681f424,19142445,0,0x0,8
tick,0x7ffdf681f424,19144465,0,0x0,8
tick,0x7ffdf681f424,19146421,0,0x0,8
tick,0x7ffdf681f424,19148417,0,0x0,8
tick,0x7ffdf681f424,19150421,0,0x0,8
tick,0x7ffdf681f424,19152407,0,0x0,8
tick,0x7ffdf681f424,19154430,0,0x0,8
tick,0x7ffdf681f424,19156440,0,0x0,8
tick,0x7ffdf681f424,19158397,0,0x0,8
tick,0x7ffdf681f424,19160396,0,0x0,8
tick,0x7ffdf681f424,19162382,0,0x0,8
tick,0x7ffdf681f424,19164378,0,0x0,8
tick,0x7ffdf681f424,19166372,0,0x0,8
tick,0x7ffdf681f424,19168366,0,0x0,8
tick,0x7ffdf681f424,19170359,0,0x0,8
tick,0x7ffdf681f424,19172356,0,0x0,8
tick,0x7ffdf681f424,19174380,0,0x0,8
tick,0x7ffdf681f424,19176348,0,0x0,8
tick,0x7ffdf681f424,19178338,0,0x0,8
tick,0x7ffdf681f424,19180338,0,0x0,8
tick,0x7ffdf681f424,19182337,0,0x0,8
tick,0x7ffdf681f424,19184328,0,0x0,8
tick,0x7ffdf681f424,19189336,0,0x0,8
tick,0x7ffdf681f424,19191612,0,0x0,8
tick,0x7ffdf681f424,19194969,0,0x0,8
tick,0x7ffdf681f424,19202713,0,0x0,8
tick,0x7ffdf681f424,19204273,0,0x0,8
tick,0x7ffdf681f424,19223758,0,0x0,8
tick,0x7ffdf681f424,19223819,0,0x0,8
tick,0x7ffdf681f424,19225237,0,0x0,8
tick,0x7ffdf681f424,19227217,0,0x0,8
tick,0x7ffdf681f424,19229326,0,0x0,8
tick,0x7ffdf681f424,19231242,0,0x0,8
tick,0x7ffdf681f424,19233230,0,0x0,8
tick,0x7ffdf681f424,19235197,0,0x0,8
tick,0x7ffdf681f424,19237180,0,0x0,8
tick,0x7ffdf681f424,19239199,0,0x0,8
tick,0x7ffdf681f424,19241174,0,0x0,8
tick,0x7ffdf681f424,19243197,0,0x0,8
tick,0x7ffdf681f424,19245180,0,0x0,8
tick,0x7ffdf681f424,19247158,0,0x0,8
tick,0x7ffdf681f424,19249146,0,0x0,8
tick,0x7ffdf681f424,19251149,0,0x0,8
tick,0x7ffdf681f424,19253136,0,0x0,8
tick,0x7ffdf681f424,19255131,0,0x0,8
tick,0x7ffdf681f424,19257130,0,0x0,8
tick,0x7ffdf681f424,19259122,0,0x0,8
tick,0x7ffdf681f424,19261113,0,0x0,8
tick,0x7ffdf681f424,19263119,0,0x0,8
tick,0x7ffdf681f424,19265105,0,0x0,8
tick,0x7ffdf681f424,19267111,0,0x0,8
tick,0x7ffdf681f424,19269096,0,0x0,8
tick,0x7ffdf681f424,19271090,0,0x0,8
tick,0x7ffdf681f424,19273088,0,0x0,8
tick,0x7ffdf681f424,19275080,0,0x0,8
tick,0x7ffdf681f424,19289142,0,0x0,8
tick,0x7ffdf681f424,19291043,0,0x0,8
tick,0x7ffdf681f424,19293164,0,0x0,8
tick,0x7ffdf681f424,19295121,0,0x0,8
tick,0x7ffdf681f424,19297222,0,0x0,8
tick,0x7ffdf681f424,19299018,0,0x0,8
tick,0x7ffdf681f424,19301011,0,0x0,8
tick,0x7ffdf681f424,19303030,0,0x0,8
tick,0x7ffdf681f424,19317240,0,0x0,8
tick,0x7ffdf681f424,19319076,0,0x0,8
tick,0x7ffdf681f424,19321177,0,0x0,8
tick,0x7ffdf681f424,19322958,0,0x0,8
tick,0x7ffdf681f424,19324951,0,0x0,8
tick,0x7ffdf681f424,19326952,0,0x0,8
tick,0x7ffdf681f424,19328963,0,0x0,8
tick,0x7ffdf681f424,19331313,0,0x0,8
tick,0x7ffdf681f424,19333008,0,0x0,8
tick,0x7ffdf681f424,19334959,0,0x0,8
tick,0x7ffdf681f424,19336932,0,0x0,8
tick,0x7ffdf681f424,19338913,0,0x0,8
tick,0x7ffdf681f424,19340903,0,0x0,8
tick,0x7ffdf681f424,19342902,0,0x0,8
tick,0x7ffdf681f424,19344897,0,0x0,8
tick,0x7ffdf681f424,19346883,0,0x0,8
tick,0x7ffdf681f424,19348878,0,0x0,8
tick,0x7ffdf681f424,19350885,0,0x0,8
tick,0x7ffdf681f424,19352878,0,0x0,8
tick,0x7ffdf681f424,19354915,0,0x0,8
tick,0x7ffdf681f424,19356860,0,0x0,8
tick,0x7ffdf681f424,19358861,0,0x0,8
tick,0x7ffdf681f424,19360894,0,0x0,8
tick,0x7ffdf681f424,19362842,0,0x0,8
tick,0x7ffdf681f424,19364840,0,0x0,8
tick,0x7ffdf681f424,19366861,0,0x0,8
tick,0x7ffdf681f424,19368828,0,0x0,8
tick,0x7ffdf681f424,19370834,0,0x0,8
tick,0x7ffdf681f424,19372820,0,0x0,8
tick,0x7ffdf681f424,19374846,0,0x0,8
tick,0x7ffdf681f424,19376824,0,0x0,8
tick,0x7ffdf681f424,19378802,0,0x0,8
tick,0x7ffdf681f424,19382928,0,0x0,8
tick,0x7ffdf681f424,19389775,0,0x0,8
tick,0x7ffdf681f424,19392974,0,0x0,8
tick,0x7ffdf681f424,19394763,0,0x0,8
tick,0x7ffdf681f424,19397124,0,0x0,8
tick,0x7ffdf681f424,19398839,0,0x0,8
tick,0x7ffdf681f424,19400748,0,0x0,8
tick,0x7ffdf681f424,19402776,0,0x0,8
tick,0x7ffdf681f424,19404733,0,0x0,8
tick,0x7ffdf681f424,19406728,0,0x0,8
tick,0x7ffdf681f424,19408722,0,0x0,8
tick,0x7ffdf681f424,19410717,0,0x0,8
tick,0x7ffdf681f424,19412713,0,0x0,8
tick,0x7ffdf681f424,19414712,0,0x0,8
tick,0x7ffdf681f424,19416703,0,0x0,8
tick,0x7ffdf681f424,19418728,0,0x0,8
tick,0x7ffdf681f424,19420702,0,0x0,8
tick,0x7ffdf681f424,19422690,0,0x0,8
tick,0x7ffdf681f424,19424683,0,0x0,8
tick,0x7ffdf681f424,19426678,0,0x0,8
tick,0x7ffdf681f424,19428668,0,0x0,8
tick,0x7ffdf681f424,19430664,0,0x0,8
tick,0x7ffdf681f424,19432658,0,0x0,8
tick,0x7ffdf681f424,19434853,0,0x0,8
tick,0x7ffdf681f424,19437513,0,0x0,8
tick,0x7ffdf681f424,19450647,0,0x0,8
tick,0x7ffdf681f424,19454073,0,0x0,8
tick,0x7ffdf681f424,19455846,0,0x0,8
tick,0x7ffdf681f424,19457852,0,0x0,8
tick,0x7ffdf681f424,19459595,0,0x0,8
tick,0x7ffdf681f424,19461618,0,0x0,8
tick,0x7ffdf681f424,19463591,0,0x0,8
tick,0x7ffdf681f424,19465572,0,0x0,8
tick,0x7ffdf681f424,19467567,0,0x0,8
tick,0x7ffdf681f424,19469863,0,0x0,8
tick,0x7ffdf681f424,19471723,0,0x0,8
tick,0x7ffdf681f424,19475411,0,0x0,8
tick,0x7ffdf681f424,19477872,0,0x0,8
tick,0x7ffdf681f424,19479539,0,0x0,8
tick,0x7ffdf681f424,19481532,0,0x0,8
tick,0x7ffdf681f424,19483540,0,0x0,8
tick,0x7ffdf681f424,19485524,0,0x0,8
tick,0x7ffdf681f424,19487510,0,0x0,8
tick,0x7ffdf681f424,19489503,0,0x0,8
tick,0x7ffdf681f424,19491496,0,0x0,8
tick,0x7ffdf681f424,19493497,0,0x0,8
tick,0x7ffdf681f424,19495521,0,0x0,8
tick,0x7ffdf681f424,19497484,0,0x0,8
tick,0x7ffdf681f424,19499493,0,0x0,8
tick,0x7ffdf681f424,19501477,0,0x0,8
tick,0x7ffdf681f424,19503470,0,0x0,8
tick,0x7ffdf681f424,19505465,0,0x0,8
tick,0x7ffdf681f424,19507460,0,0x0,8
tick,0x7ffdf681f424,19509456,0,0x0,8
tick,0x7ffdf681f424,19511484,0,0x0,8
tick,0x7ffdf681f424,19513449,0,0x0,8
tick,0x7ffdf681f424,19515439,0,0x0,8
tick,0x7ffdf681f424,19517442,0,0x0,8
tick,0x7ffdf681f424,19524466,0,0x0,8
tick,0x7ffdf681f424,19526780,0,0x0,8
tick,0x7ffdf681f424,19528566,0,0x0,8
tick,0x7ffdf681f424,19530440,0,0x0,8
tick,0x7ffdf681f424,19532836,0,0x0,8
tick,0x7ffdf681f424,19534782,0,0x0,8
tick,0x7ffdf681f424,19536381,0,0x0,8
tick,0x7ffdf681f424,19538380,0,0x0,8
tick,0x7ffdf681f424,19540373,0,0x0,8
tick,0x7ffdf681f424,19542500,0,0x0,8
tick,0x7ffdf681f424,19544365,0,0x0,8
tick,0x7ffdf681f424,19546383,0,0x0,8
tick,0x7ffdf681f424,19548351,0,0x0,8
tick,0x7ffdf681f424,19557712,0,0x0,8
tick,0x7ffdf681f424,19559335,0,0x0,8
tick,0x7ffdf681f424,19561395,0,0x0,8
tick,0x7ffdf681f424,19565119,0,0x0,8
tick,0x7ffdf681f424,19567257,0,0x0,8
tick,0x7ffdf681f424,19574350,0,0x0,8
tick,0x7ffdf681f424,19576302,0,0x0,8
tick,0x7ffdf681f424,19578275,0,0x0,8
tick,0x7ffdf681f424,19580283,0,0x0,8
tick,0x7ffdf681f424,19582513,0,0x0,8
tick,0x7ffdf681f424,19584266,0,0x0,8
tick,0x7ffdf681f424,19586250,0,0x0,8
tick,0x7ffdf681f424,19588243,0,0x0,8
tick,0x7ffdf681f424,19590254,0,0x0,8
tick,0x7ffdf681f424,19592234,0,0x0,8
tick,0x7ffdf681f424,19594228,0,0x0,8
tick,0x7ffdf681f424,19596222,0,0x0,8
tick,0x7ffdf681f424,19598222,0,0x0,8
tick,0x7ffdf681f424,19600268,0,0x0,8
tick,0x7ffdf681f424,19602205,0,0x0,8
tick,0x7ffdf681f424,19604197,0,0x0,8
tick,0x7ffdf681f424,19606194,0,0x0,8
tick,0x7ffdf681f424,19608187,0,0x0,8
tick,0x7ffdf681f424,19610203,0,0x0,8
tick,0x7ffdf681f424,19612178,0,0x0,8
tick,0x7ffdf681f424,19614178,0,0x0,8
tick,0x7ffdf681f424,19616175,0,0x0,8
tick,0x7ffdf681f424,19618172,0,0x0,8
tick,0x7ffdf681f424,19620315,0,0x0,8
tick,0x7ffdf681f424,19622158,0,0x0,8
tick,0x7ffdf681f424,19624150,0,0x0,8
tick,0x7ffdf681f424,19626165,0,0x0,8
tick,0x7ffdf681f424,19628142,0,0x0,8
tick,0x7ffdf681f424,19630131,0,0x0,8
tick,0x7ffdf681f424,19632145,0,0x0,8
tick,0x7ffdf681f424,19639272,0,0x0,8
tick,0x7ffdf681f424,19643950,0,0x0,8
tick,0x7ffdf681f424,19645137,0,0x0,8
tick,0x7ffdf681f424,19647099,0,0x0,8
tick,0x7ffdf681f424,19649095,0,0x0,8
tick,0x7ffdf681f424,19651074,0,0x0,8
tick,0x7ffdf681f424,19653078,0,0x0,8
tick,0x7ffdf681f424,19655101,0,0x0,8
tick,0x7ffdf681f424,19657330,0,0x0,8
tick,0x7ffdf681f424,19659735,0,0x0,8
tick,0x7ffdf681f424,19661058,0,0x0,8
tick,0x7ffdf681f424,19663049,0,0x0,8
tick,0x7ffdf681f424,19665069,0,0x0,8
tick,0x7ffdf681f424,19667458,0,0x0,8
tick,0x7ffdf681f424,19669051,0,0x0,8
tick,0x7ffdf681f424,19675422,0,0x0,8
tick,0x7ffdf681f424,19677004,0,0x0,8
tick,0x7ffdf681f424,19679010,0,0x0,8
tick,0x7ffdf681f424,19680989,0,0x0,8
tick,0x7ffdf681f424,19682982,0,0x0,8
tick,0x7ffdf681f424,19685005,0,0x0,8
tick,0x7ffdf681f424,19686985,0,0x0,8
tick,0x7ffdf681f424,19689063,0,0x0,8
tick,0x7ffdf681f424,19691167,0,0x0,8
tick,0x7ffdf681f424,19692977,0,0x0,8
tick,0x7ffdf681f424,19695026,0,0x0,8
tick,0x7ffdf681f424,19696954,0,0x0,8
tick,0x7ffdf681f424,19698942,0,0x0,8
tick,0x7ffdf681f424,19700947,0,0x0,8
tick,0x7ffdf681f424,19702934,0,0x0,8
tick,0x7ffdf681f424,19704992,0,0x0,8
tick,0x7ffdf681f424,19706926,0,0x0,8
tick,0x7ffdf681f424,19708948,0,0x0,8
tick,0x7ffdf681f424,19710916,0,0x0,8
tick,0x7ffdf681f424,19712910,0,0x0,8
tick,0x7ffdf681f424,19714955,0,0x0,8
tick,0x7ffdf681f424,19717013,0,0x0,8
tick,0x7ffdf681f424,19718896,0,0x0,8
tick,0x7ffdf681f424,19720900,0,0x0,8
tick,0x7ffdf681f424,19722925,0,0x0,8
tick,0x7ffdf681f424,19724875,0,0x0,8
tick,0x7ffdf681f424,19726872,0,0x0,8
tick,0x7ffdf681f424,19728864,0,0x0,8
tick,0x7ffdf681f424,19730972,0,0x0,8
tick,0x7ffdf681f424,19732918,0,0x0,8
tick,0x7ffdf681f424,19743664,0,0x0,8
tick,0x7ffdf681f424,19744824,0,0x0,8
tick,0x7ffdf681f424,19746818,0,0x0,8
tick,0x7ffdf681f424,19748816,0,0x0,8
tick,0x7ffdf681f424,19750812,0,0x0,8
tick,0x7ffdf681f424,19752807,0,0x0,8
tick,0x7ffdf681f424,19754878,0,0x0,8
tick,0x7ffdf681f424,19756807,0,0x0,8
tick,0x7ffdf681f424,19758822,0,0x0,8
tick,0x7ffdf681f424,19760793,0,0x0,8
tick,0x7ffdf681f424,19762776,0,0x0,8
tick,0x7ffdf681f424,19764772,0,0x0,8
tick,0x7ffdf681f424,19784027,0,0x0,8
tick,0x7ffdf681f424,19785741,0,0x0,8
tick,0x7ffdf681f424,19787714,0,0x0,8
tick,0x7ffdf681f424,19789800,0,0x0,8
tick,0x7ffdf681f424,19792131,0,0x0,8
tick,0x7ffdf681f424,19793716,0,0x0,8
tick,0x7ffdf681f424,19795693,0,0x0,8
tick,0x7ffdf681f424,19797686,0,0x0,8
tick,0x7ffdf681f424,19799677,0,0x0,8
tick,0x7ffdf681f424,19801674,0,0x0,8
tick,0x7ffdf681f424,19803671,0,0x0,8
tick,0x7ffdf681f424,19805667,0,0x0,8
tick,0x7ffdf681f424,19807654,0,0x0,8
tick,0x7ffdf681f424,19809819,0,0x0,8
tick,0x7ffdf681f424,19811645,0,0x0,8
tick,0x7ffdf681f424,19813644,0,0x0,8
tick,0x7ffdf681f424,19815671,0,0x0,8
tick,0x7ffdf681f424,19817639,0,0x0,8
tick,0x7ffdf681f424,19819625,0,0x0,8
tick,0x7ffdf681f424,19821621,0,0x0,8
tick,0x7ffdf681f424,19823614,0,0x0,8
tick,0x7ffdf681f424,19825653,0,0x0,8
tick,0x7ffdf681f424,19827616,0,0x0,8
tick,0x7ffdf681f424,19829606,0,0x0,8
tick,0x7ffdf681f424,19831595,0,0x0,8
tick,0x7ffdf681f424,19833685,0,0x0,8
tick,0x7ffdf681f424,19835591,0,0x0,8
tick,0x7ffdf681f424,19837579,0,0x0,8
tick,0x7ffdf681f424,19839569,0,0x0,8
tick,0x7ffdf681f424,19842011,0,0x0,8
tick,0x7ffdf681f424,19847049,0,0x0,8
tick,0x7ffdf681f424,19856525,0,0x0,8
tick,0x7ffdf681f424,19858541,0,0x0,8
tick,0x7ffdf681f424,19860516,0,0x0,8
tick,0x7ffdf681f424,19862949,0,0x0,8
tick,0x7ffdf681f424,19864612,0,0x0,8
tick,0x7ffdf681f424,19866732,0,0x0,8
tick,0x7ffdf681f424,19868656,0,0x0,8
tick,0x7ffdf681f424,19870488,0,0x0,8
tick,0x7ffdf681f424,19877998,0,0x0,8
tick,0x7ffdf681f424,19878436,0,0x0,8
tick,0x7ffdf681f424,19879569,0,0x0,8
tick,0x7ffdf681f424,19887253,0,0x0,8
tick,0x7ffdf681f424,19887301,0,0x0,8
tick,0x7ffdf681f424,19888446,0,0x0,8
tick,0x7ffdf681f424,19890440,0,0x0,8
tick,0x7ffdf681f424,19892475,0,0x0,8
tick,0x7ffdf681f424,19894446,0,0x0,8
tick,0x7ffdf681f424,19896429,0,0x0,8
tick,0x7ffdf681f424,19898419,0,0x0,8
tick,0x7ffdf681f424,19900407,0,0x0,8
tick,0x7ffdf681f424,19902405,0,0x0,8
tick,0x7ffdf681f424,19904405,0,0x0,8
tick,0x7ffdf681f424,19906398,0,0x0,8
tick,0x7ffdf681f424,19908387,0,0x0,8
tick,0x7ffdf681f424,19910405,0,0x0,8
tick,0x7ffdf681f424,19912381,0,0x0,8
tick,0x7ffdf681f424,19914378,0,0x0,8
tick,0x7ffdf681f424,19916368,0,0x0,8
tick,0x7ffdf681f424,19918367,0,0x0,8
tick,0x7ffdf681f424,19920409,0,0x0,8
tick,0x7ffdf681f424,19922373,0,0x0,8
tick,0x7ffdf681f424,19924342,0,0x0,8
tick,0x7ffdf681f424,19926338,0,0x0,8
tick,0x7ffdf681f424,19928333,0,0x0,8
tick,0x7ffdf681f424,19930331,0,0x0,8
tick,0x7ffdf681f424,19932416,0,0x0,8
tick,0x7ffdf681f424,19934320,0,0x0,8
tick,0x7ffdf681f424,19936310,0,0x0,8
tick,0x7ffdf681f424,19938305,0,0x0,8
tick,0x7ffdf681f424,19951793,0,0x0,8
tick,0x7ffdf681f424,19953274,0,0x0,8
tick,0x7ffdf681f424,19955267,0,0x0,8
tick,0x7ffdf681f424,19957265,0,0x0,8
tick,0x7ffdf681f424,19959281,0,0x0,8
tick,0x7ffdf681f424,19961303,0,0x0,8
tick,0x7ffdf681f424,19963257,0,0x0,8
tick,0x7ffdf681f424,19965238,0,0x0,8
tick,0x7ffdf681f424,19967237,0,0x0,8
tick,0x7ffdf681f424,19969232,0,0x0,8
tick,0x7ffdf681f424,19971682,0,0x0,8
tick,0x7ffdf681f424,19973252,0,0x0,8
tick,0x7ffdf681f424,19982571,0,0x0,8
tick,0x7ffdf681f424,19984560,0,0x0,8
tick,0x7ffdf681f424,19986209,0,0x0,8
tick,0x7ffdf681f424,19988212,0,0x0,8
tick,0x7ffdf681f424,19990184,0,0x0,8
tick,0x7ffdf681f424,19992213,0,0x0,8
tick,0x7ffdf681f424,19994163,0,0x0,8
tick,0x7ffdf681f424,19996152,0,0x0,8
tick,0x7ffdf681f424,19998161,0,0x0,8
tick,0x7ffdf681f424,20000490,0,0x0,8
tick,0x7ffdf681f424,20002283,0,0x0,8
tick,0x7ffdf681f424,20004148,0,0x0,8
tick,0x7ffdf681f424,20006125,0,0x0,8
tick,0x7ffdf681f424,20008111,0,0x0,8
tick,0x7ffdf681f424,20010258,0,0x0,8
tick,0x7ffdf681f424,20012220,0,0x0,8
tick,0x7ffdf681f424,20014261,0,0x0,8
tick,0x7ffdf681f424,20016205,0,0x0,8
tick,0x7ffdf681f424,20018202,0,0x0,8
tick,0x7ffdf681f424,20020202,0,0x0,8
tick,0x7ffdf681f424,20022234,0,0x0,8
tick,0x7ffdf681f424,20024186,0,0x0,8
tick,0x7ffdf681f424,20026178,0,0x0,8
tick,0x7ffdf681f424,20028176,0,0x0,8
tick,0x7ffdf681f424,20030167,0,0x0,8
tick,0x7ffdf681f424,20032163,0,0x0,8
tick,0x7ffdf681f424,20034155,0,0x0,8
tick,0x7ffdf681f424,20039315,0,0x0,8
tick,0x7ffdf681f424,20050258,0,0x0,8
tick,0x7ffdf681f424,20052136,0,0x0,8
tick,0x7ffdf681f424,20054127,0,0x0,8
tick,0x7ffdf681f424,20056103,0,0x0,8
tick,0x7ffdf681f424,20058123,0,0x0,8
tick,0x7ffdf681f424,20060099,0,0x0,8
tick,0x7ffdf681f424,20062085,0,0x0,8
tick,0x7ffdf681f424,20064076,0,0x0,8
tick,0x7ffdf681f424,20066069,0,0x0,8
tick,0x7ffdf681f424,20068074,0,0x0,8
tick,0x7ffdf681f424,20070065,0,0x0,8
tick,0x7ffdf681f424,20072066,0,0x0,8
tick,0x7ffdf681f424,20074051,0,0x0,8
tick,0x7ffdf681f424,20076057,0,0x0,8
tick,0x7ffdf681f424,20078055,0,0x0,8
tick,0x7ffdf681f424,20080030,0,0x0,8
tick,0x7ffdf681f424,20082032,0,0x0,8
tick,0x7ffdf681f424,20084024,0,0x0,8
tick,0x7ffdf681f424,20086022,0,0x0,8
tick,0x7ffdf681f424,20088009,0,0x0,8
tick,0x7ffdf681f424,20090005,0,0x0,8
tick,0x7ffdf681f424,20092024,0,0x0,8
tick,0x7ffdf681f424,20094002,0,0x0,8
tick,0x7ffdf681f424,20095992,0,0x0,8
tick,0x7ffdf681f424,20097995,0,0x0,8
tick,0x7ffdf681f424,20100403,0,0x0,8
tick,0x7ffdf681f424,20115739,0,0x0,8
tick,0x7ffdf681f424,20117392,0,0x0,8
tick,0x7ffdf681f424,20118933,0,0x0,8
tick,0x7ffdf681f424,20120961,0,0x0,8
tick,0x7ffdf681f424,20123008,0,0x0,8
tick,0x7ffdf681f424,20124927,0,0x0,8
tick,0x7ffdf681f424,20138208,0,0x0,8
tick,0x7ffdf681f424,20139878,0,0x0,8
tick,0x7ffdf681f424,20141945,0,0x0,8
tick,0x7ffdf681f424,20143895,0,0x0,8
tick,0x7ffdf681f424,20145900,0,0x0,8
tick,0x7ffdf681f424,20147859,0,0x0,8
tick,0x7ffdf681f424,20149846,0,0x0,8
tick,0x7ffdf681f424,20151841,0,0x0,8
tick,0x7ffdf681f424,20153847,0,0x0,8
tick,0x7ffdf681f424,20155848,0,0x0,8
tick,0x7ffdf681f424,20157827,0,0x0,8
tick,0x7ffdf681f424,20159829,0,0x0,8
tick,0x7ffdf681f424,20161820,0,0x0,8
tick,0x7ffdf681f424,20163818,0,0x0,8
tick,0x7ffdf681f424,20165802,0,0x0,8
tick,0x7ffdf681f424,20167800,0,0x0,8
tick,0x7ffdf681f424,20169799,0,0x0,8
tick,0x7ffdf681f424,20171800,0,0x0,8
tick,0x7ffdf681f424,20173785,0,0x0,8
tick,0x7ffdf681f424,20175815,0,0x0,8
tick,0x7ffdf681f424,20177818,0,0x0,8
tick,0x7ffdf681f424,20179769,0,0x0,8
tick,0x7ffdf681f424,20182750,0,0x0,8
tick,0x7ffdf681f424,20184873,0,0x0,8
tick,0x7ffdf681f424,20186751,0,0x0,8
tick,0x7ffdf681f424,20188743,0,0x0,8
tick,0x7ffdf681f424,20190791,0,0x0,8
tick,0x7ffdf681f424,20192736,0,0x0,8
tick,0x7ffdf681f424,20194726,0,0x0,8
tick,0x7ffdf681f424,20196724,0,0x0,8
tick,0x7ffdf681f424,20198715,0,0x0,8
tick,0x7ffdf681f424,20200715,0,0x0,8
tick,0x7ffdf681f424,20205845,0,0x0,8
tick,0x7ffdf681f424,20215236,0,0x0,8
tick,0x7ffdf681f424,20216671,0,0x0,8
tick,0x7ffdf681f424,20218694,0,0x0,8
tick,0x7ffdf681f424,20220976,0,0x0,8
tick,0x7ffdf681f424,20222869,0,0x0,8
tick,0x7ffdf681f424,20224670,0,0x0,8
tick,0x7ffdf681f424,20226767,0,0x0,8
tick,0x7ffdf681f424,20228637,0,0x0,8
tick,0x7ffdf681f424,20230630,0,0x0,8
tick,0x7ffdf681f424,20232626,0,0x0,8
tick,0x7ffdf681f424,20234619,0,0x0,8
tick,0x7ffdf681f424,20236617,0,0x0,8
tick,0x7ffdf681f424,20238613,0,0x0,8
tick,0x7ffdf681f424,20240607,0,0x0,8
tick,0x7ffdf681f424,20243276,0,0x0,8
tick,0x7ffdf681f424,20257510,0,0x0,8
tick,0x7ffdf681f424,20258556,0,0x0,8
tick,0x7ffdf681f424,20260566,0,0x0,8
tick,0x7ffdf681f424,20262788,0,0x0,8
tick,0x7ffdf681f424,20264569,0,0x0,8
tick,0x7ffdf681f424,20266570,0,0x0,8
tick,0x7ffdf681f424,20268565,0,0x0,8
tick,0x7ffdf681f424,20270532,0,0x0,8
tick,0x7ffdf681f424,20272520,0,0x0,8
tick,0x7ffdf681f424,20274514,0,0x0,8
tick,0x7ffdf681f424,20276523,0,0x0,8
tick,0x7ffdf681f424,20278504,0,0x0,8
tick,0x7ffdf681f424,20280497,0,0x0,8
tick,0x7ffdf681f424,20295681,0,0x0,8
tick,0x7ffdf681f424,20297454,0,0x0,8
tick,0x7ffdf681f424,20299448,0,0x0,8
tick,0x7ffdf681f424,20301447,0,0x0,8
tick,0x7ffdf681f424,20303437,0,0x0,8
tick,0x7ffdf681f424,20305526,0,0x0,8
tick,0x7ffdf681f424,20307444,0,0x0,8
tick,0x7ffdf681f424,20309421,0,0x0,8
tick,0x7ffdf681f424,20311416,0,0x0,8
tick,0x7ffdf681f424,20313477,0,0x0,8
tick,0x7ffdf681f424,20315403,0,0x0,8
tick,0x7ffdf681f424,20317403,0,0x0,8
tick,0x7ffdf681f424,20319391,0,0x0,8
tick,0x7ffdf681f424,20321384,0,0x0,8
tick,0x7ffdf681f424,20323384,0,0x0,8
tick,0x7ffdf681f424,20325387,0,0x0,8
tick,0x7ffdf681f424,20327372,0,0x0,8
tick,0x7ffdf681f424,20329361,0,0x0,8
tick,0x7ffdf681f424,20331362,0,0x0,8
tick,0x7ffdf681f424,20333356,0,0x0,8
tick,0x7ffdf681f424,20335356,0,0x0,8
tick,0x7ffdf681f424,20337344,0,0x0,8
tick,0x7ffdf681f424,20339347,0,0x0,8
tick,0x7ffdf681f424,20341335,0,0x0,8
tick,0x7ffdf681f424,20343334,0,0x0,8
tick,0x7ffdf681f424,20345324,0,0x0,8
tick,0x7ffdf681f424,20347319,0,0x0,8
tick,0x7ffdf681f424,20349311,0,0x0,8
tick,0x7ffdf681f424,20351308,0,0x0,8
tick,0x7ffdf681f424,20353301,0,0x0,8
tick,0x7ffdf681f424,20355297,0,0x0,8
tick,0x7ffdf681f424,20357290,0,0x0,8
tick,0x7ffdf681f424,20359401,0,0x0,8
tick,0x7ffdf681f424,20373846,0,0x0,8
tick,0x7ffdf681f424,20375294,0,0x0,8
tick,0x7ffdf681f424,20377238,0,0x0,8
tick,0x7ffdf681f424,20379289,0,0x0,8
tick,0x7ffdf681f424,20381247,0,0x0,8
tick,0x7ffdf681f424,20383239,0,0x0,8
tick,0x7ffdf681f424,20385233,0,0x0,8
tick,0x7ffdf681f424,20387210,0,0x0,8
tick,0x7ffdf681f424,20389208,0,0x0,8
tick,0x7ffdf681f424,20391207,0,0x0,8
tick,0x7ffdf681f424,20393199,0,0x0,8
tick,0x7ffdf681f424,20411077,0,0x0,8
tick,0x7ffdf681f424,20412182,0,0x0,8
tick,0x7ffdf681f424,20414143,0,0x0,8
tick,0x7ffdf681f424,20416251,0,0x0,8
tick,0x7ffdf681f424,20418278,0,0x0,8
tick,0x7ffdf681f424,20421201,0,0x0,8
tick,0x7ffdf681f424,20423121,0,0x0,8
tick,0x7ffdf681f424,20425113,0,0x0,8
tick,0x7ffdf681f424,20427111,0,0x0,8
tick,0x7ffdf681f424,20429101,0,0x0,8
tick,0x7ffdf681f424,20431118,0,0x0,8
tick,0x7ffdf681f424,20433092,0,0x0,8
tick,0x7ffdf681f424,20435091,0,0x0,8
tick,0x7ffdf681f424,20437076,0,0x0,8
tick,0x7ffdf681f424,20439074,0,0x0,8
tick,0x7ffdf681f424,20441075,0,0x0,8
tick,0x7ffdf681f424,20443186,0,0x0,8
tick,0x7ffdf681f424,20445068,0,0x0,8
tick,0x7ffdf681f424,20447051,0,0x0,8
tick,0x7ffdf681f424,20449044,0,0x0,8
tick,0x7ffdf681f424,20451041,0,0x0,8
tick,0x7ffdf681f424,20453138,0,0x0,8
tick,0x7ffdf681f424,20455510,0,0x0,8
tick,0x7ffdf681f424,20457133,0,0x0,8
tick,0x7ffdf681f424,20459106,0,0x0,8
tick,0x7ffdf681f424,20461073,0,0x0,8
tick,0x7ffdf681f424,20463026,0,0x0,8
tick,0x7ffdf681f424,20465056,0,0x0,8
tick,0x7ffdf681f424,20467604,0,0x0,8
tick,0x7ffdf681f424,20468996,0,0x0,8
tick,0x7ffdf681f424,20471039,0,0x0,8
tick,0x7ffdf681f424,20473368,0,0x0,8
tick,0x7ffdf681f424,20474993,0,0x0,8
tick,0x7ffdf681f424,20476974,0,0x0,8
tick,0x7ffdf681f424,20478966,0,0x0,8
tick,0x7ffdf681f424,20481018,0,0x0,8
tick,0x7ffdf681f424,20482981,0,0x0,8
tick,0x7ffdf681f424,20484965,0,0x0,8
tick,0x7ffdf681f424,20486945,0,0x0,8
tick,0x7ffdf681f424,20489289,0,0x0,8
tick,0x7ffdf681f424,20491036,0,0x0,8
tick,0x7ffdf681f424,20493033,0,0x0,8
tick,0x7ffdf681f424,20503122,0,0x0,8
tick,0x7ffdf681f424,20504908,0,0x0,8
tick,0x7ffdf681f424,20506921,0,0x0,8
tick,0x7ffdf681f424,20508927,0,0x0,8
tick,0x7ffdf681f424,20510891,0,0x0,8
tick,0x7ffdf681f424,20512429,0,0x0,8
tick,0x7ffdf681f424,20514384,0,0x0,8
tick,0x7ffdf681f424,20516371,0,0x0,8
tick,0x7ffdf681f424,20518370,0,0x0,8
tick,0x7ffdf681f424,20520360,0,0x0,8
tick,0x7ffdf681f424,20522352,0,0x0,8
tick,0x7ffdf681f424,20524360,0,0x0,8
tick,0x7ffdf681f424,20526361,0,0x0,8
tick,0x7ffdf681f424,20528343,0,0x0,8
tick,0x7ffdf681f424,20530334,0,0x0,8
tick,0x7ffdf681f424,20532334,0,0x0,8
tick,0x7ffdf681f424,20534363,0,0x0,8
tick,0x7ffdf681f424,20536322,0,0x0,8
tick,0x7ffdf681f424,20538310,0,0x0,8
tick,0x7ffdf681f424,20540322,0,0x0,8
tick,0x7ffdf681f424,20542323,0,0x0,8
tick,0x7ffdf681f424,20544301,0,0x0,8
tick,0x7ffdf681f424,20546336,0,0x0,8
tick,0x7ffdf681f424,20548289,0,0x0,8
tick,0x7ffdf681f424,20550296,0,0x0,8
tick,0x7ffdf681f424,20566565,0,0x0,8
tick,0x7ffdf681f424,20568242,0,0x0,8
tick,0x7ffdf681f424,20570238,0,0x0,8
tick,0x7ffdf681f424,20572392,0,0x0,8
tick,0x7ffdf681f424,20574280,0,0x0,8
tick,0x7ffdf681f424,20576267,0,0x0,8
tick,0x7ffdf681f424,20578214,0,0x0,8
tick,0x7ffdf681f424,20580202,0,0x0,8
tick,0x7ffdf681f424,20582210,0,0x0,8
tick,0x7ffdf681f424,20584368,0,0x0,8
tick,0x7ffdf681f424,20586260,0,0x0,8
tick,0x7ffdf681f424,20588203,0,0x0,8
tick,0x7ffdf681f424,20590763,0,0x0,8
tick,0x7ffdf681f424,20592250,0,0x0,8
tick,0x7ffdf681f424,20594275,0,0x0,8
tick,0x7ffdf681f424,20596533,0,0x0,8
tick,0x7ffdf681f424,20598164,0,0x0,8
tick,0x7ffdf681f424,20600203,0,0x0,8
tick,0x7ffdf681f424,20602208,0,0x0,8
tick,0x7ffdf681f424,20604208,0,0x0,8
tick,0x7ffdf681f424,20606138,0,0x0,8
tick,0x7ffdf681f424,20608144,0,0x0,8
tick,0x7ffdf681f424,20610139,0,0x0,8
tick,0x7ffdf681f424,20611692,0,0x0,8
tick,0x7ffdf681f424,20613639,0,0x0,8
tick,0x7ffdf681f424,20615968,0,0x0,8
tick,0x7ffdf681f424,20617628,0,0x0,8
tick,0x7ffdf681f424,20619604,0,0x0,8
tick,0x7ffdf681f424,20621706,0,0x0,8
tick,0x7ffdf681f424,20623603,0,0x0,8
tick,0x7ffdf681f424,20625603,0,0x0,8
tick,0x7ffdf681f424,20627584,0,0x0,8
tick,0x7ffdf681f424,20629581,0,0x0,8
tick,0x7ffdf681f424,20631574,0,0x0,8
tick,0x7ffdf681f424,20633565,0,0x0,8
tick,0x7ffdf681f424,20648772,0,0x0,8
tick,0x7ffdf681f424,20650525,0,0x0,8
tick,0x7ffdf681f424,20652521,0,0x0,8
tick,0x7ffdf681f424,20654520,0,0x0,8
tick,0x7ffdf681f424,20656508,0,0x0,8
tick,0x7ffdf681f424,20658499,0,0x0,8
tick,0x7ffdf681f424,20660495,0,0x0,8
tick,0x7ffdf681f424,20662497,0,0x0,8
tick,0x7ffdf681f424,20664485,0,0x0,8
tick,0x7ffdf681f424,20666478,0,0x0,8
tick,0x7ffdf681f424,20668479,0,0x0,8
tick,0x7ffdf681f424,20670468,0,0x0,8
tick,0x7ffdf681f424,20672464,0,0x0,8
tick,0x7ffdf681f424,20674458,0,0x0,8
tick,0x7ffdf681f424,20676453,0,0x0,8
tick,0x7ffdf681f424,20678629,0,0x0,8
tick,0x7ffdf681f424,20682355,0,0x0,8
tick,0x7ffdf681f424,20683434,0,0x0,8
tick,0x7ffdf681f424,20685432,0,0x0,8
tick,0x7ffdf681f424,20687438,0,0x0,8
tick,0x7ffdf681f424,20689425,0,0x0,8
tick,0x7ffdf681f424,20691415,0,0x0,8
tick,0x7ffdf681f424,20693412,0,0x0,8
tick,0x7ffdf681f424,20695407,0,0x0,8
tick,0x7ffdf681f424,20697397,0,0x0,8
tick,0x7ffdf681f424,20699388,0,0x0,8
tick,0x7ffdf681f424,20701393,0,0x0,8
tick,0x7ffdf681f424,20703379,0,0x0,8
tick,0x7ffdf681f424,20705376,0,0x0,8
tick,0x7ffdf681f424,20707377,0,0x0,8
tick,0x7ffdf681f424,20709398,0,0x0,8
tick,0x7ffdf681f424,20711361,0,0x0,8
tick,0x7ffdf681f424,20713373,0,0x0,8
tick,0x7ffdf681f424,20715359,0,0x0,8
tick,0x7ffdf681f424,20717353,0,0x0,8
tick,0x7ffdf681f424,20719338,0,0x0,8
tick,0x7ffdf681f424,20721366,0,0x0,8
tick,0x7ffdf681f424,20723327,0,0x0,8
tick,0x7ffdf681f424,20725439,0,0x0,8
tick,0x7ffdf681f424,20727317,0,0x0,8
tick,0x7ffdf681f424,20729360,0,0x0,8
tick,0x7ffdf681f424,20731949,0,0x0,8
tick,0x7ffdf681f424,20742503,0,0x0,8
tick,0x7ffdf681f424,20745279,0,0x0,8
tick,0x7ffdf681f424,20747264,0,0x0,8
tick,0x7ffdf681f424,20749456,0,0x0,8
tick,0x7ffdf681f424,20751263,0,0x0,8
tick,0x7ffdf681f424,20753372,0,0x0,8
tick,0x7ffdf681f424,20755246,0,0x0,8
tick,0x7ffdf681f424,20757261,0,0x0,8
tick,0x7ffdf681f424,20772672,0,0x0,8
tick,0x7ffdf681f424,20774198,0,0x0,8
tick,0x7ffdf681f424,20776199,0,0x0,8
tick,0x7ffdf681f424,20778196,0,0x0,8
tick,0x7ffdf681f424,20780476,0,0x0,8
tick,0x7ffdf681f424,20782538,0,0x0,8
tick,0x7ffdf681f424,20784182,0,0x0,8
tick,0x7ffdf681f424,20786160,0,0x0,8
tick,0x7ffdf681f424,20788194,0,0x0,8
tick,0x7ffdf681f424,20790148,0,0x0,8
tick,0x7ffdf681f424,20792170,0,0x0,8
tick,0x7ffdf681f424,20794143,0,0x0,8
tick,0x7ffdf681f424,20796142,0,0x0,8
tick,0x7ffdf681f424,20798126,0,0x0,8
tick,0x7ffdf681f424,20800132,0,0x0,8
tick,0x7ffdf681f424,20802118,0,0x0,8
tick,0x7ffdf681f424,20804120,0,0x0,8
tick,0x7ffdf681f424,20806102,0,0x0,8
tick,0x7ffdf681f424,20808099,0,0x0,8
tick,0x7ffdf681f424,20810119,0,0x0,8
tick,0x7ffdf681f424,20813359,0,0x0,8
tick,0x7ffdf681f424,20817444,0,0x0,8
tick,0x7ffdf681f424,20820527,0,0x0,8
tick,0x7ffdf681f424,20827827,0,0x0,8
tick,0x7ffdf681f424,20829042,0,0x0,8
tick,0x7ffdf681f424,20831043,0,0x0,8
tick,0x7ffdf681f424,20833050,0,0x0,8
tick,0x7ffdf681f424,20835039,0,0x0,8
tick,0x7ffdf681f424,20837024,0,0x0,8
tick,0x7ffdf681f424,20839018,0,0x0,8
tick,0x7ffdf681f424,20841018,0,0x0,8
tick,0x7ffdf681f424,20843008,0,0x0,8
tick,0x7ffdf681f424,20845006,0,0x0,8
tick,0x7ffdf681f424,20859470,0,0x0,8
tick,0x7ffdf681f424,20860965,0,0x0,8
tick,0x7ffdf681f424,20862962,0,0x0,8
tick,0x7ffdf681f424,20865161,0,0x0,8
tick,0x7ffdf681f424,20866969,0,0x0,8
tick,0x7ffdf681f424,20868966,0,0x0,8
tick,0x7ffdf681f424,20870931,0,0x0,8
tick,0x7ffdf681f424,20872925,0,0x0,8
tick,0x7ffdf681f424,20874924,0,0x0,8
tick,0x7ffdf681f424,20876915,0,0x0,8
tick,0x7ffdf681f424,20878906,0,0x0,8
tick,0x7ffdf681f424,20882099,0,0x0,8
tick,0x7ffdf681f424,20884189,0,0x0,8
tick,0x7ffdf681f424,20885891,0,0x0,8
tick,0x7ffdf681f424,20887887,0,0x0,8
tick,0x7ffdf681f424,20889880,0,0x0,8
tick,0x7ffdf681f424,20891876,0,0x0,8
tick,0x7ffdf681f424,20893871,0,0x0,8
tick,0x7ffdf681f424,20895876,0,0x0,8
tick,0x7ffdf681f424,20897889,0,0x0,8
tick,0x7ffdf681f424,20899857,0,0x0,8
tick,0x7ffdf681f424,20901861,0,0x0,8
tick,0x7ffdf681f424,20903860,0,0x0,8
tick,0x7ffdf681f424,20905875,0,0x0,8
tick,0x7ffdf681f424,20907835,0,0x0,8
tick,0x7ffdf681f424,20909832,0,0x0,8
tick,0x7ffdf681f424,20911824,0,0x0,8
tick,0x7ffdf681f424,20913823,0,0x0,8
tick,0x7ffdf681f424,20915819,0,0x0,8
tick,0x7ffdf681f424,20917814,0,0x0,8
tick,0x7ffdf681f424,20921709,0,0x0,8
tick,0x7ffdf681f424,20924715,0,0x0,8
tick,0x7ffdf681f424,20933859,0,0x0,8
tick,0x7ffdf681f424,20935762,0,0x0,8
tick,0x7ffdf681f424,20937758,0,0x0,8
tick,0x7ffdf681f424,20939798,0,0x0,8
tick,0x7ffdf681f424,20941786,0,0x0,8
tick,0x7ffdf681f424,20943748,0,0x0,8
tick,0x7ffdf681f424,20945744,0,0x0,8
tick,0x7ffdf681f424,20947738,0,0x0,8
tick,0x7ffdf681f424,20963289,0,0x0,8
tick,0x7ffdf681f424,20964681,0,0x0,8
tick,0x7ffdf681f424,20966677,0,0x0,8
tick,0x7ffdf681f424,20968677,0,0x0,8
tick,0x7ffdf681f424,20970677,0,0x0,8
tick,0x7ffdf681f424,20972753,0,0x0,8
tick,0x7ffdf681f424,20974660,0,0x0,8
tick,0x7ffdf681f424,20976655,0,0x0,8
tick,0x7ffdf681f424,20978645,0,0x0,8
tick,0x7ffdf681f424,20980635,0,0x0,8
tick,0x7ffdf681f424,20982644,0,0x0,8
tick,0x7ffdf681f424,20984641,0,0x0,8
tick,0x7ffdf681f424,20986619,0,0x0,8
tick,0x7ffdf681f424,20988617,0,0x0,8
tick,0x7ffdf681f424,20990626,0,0x0,8
tick,0x7ffdf681f424,20992604,0,0x0,8
tick,0x7ffdf681f424,20994598,0,0x0,8
tick,0x7ffdf681f424,20996609,0,0x0,8
tick,0x7ffdf681f424,20998590,0,0x0,8
tick,0x7ffdf681f424,21000595,0,0x0,8
tick,0x7ffdf681f424,21002578,0,0x0,8
tick,0x7ffdf681f424,21004576,0,0x0,8
tick,0x7ffdf681f424,21006592,0,0x0,8
tick,0x7ffdf681f424,21008564,0,0x0,8
tick,0x7ffdf681f424,21010649,0,0x0,8
tick,0x7ffdf681f424,21013001,0,0x0,8
tick,0x7ffdf681f424,21014577,0,0x0,8
tick,0x7ffdf681f424,21016556,0,0x0,8
tick,0x7ffdf681f424,21018608,0,0x0,8
tick,0x7ffdf681f424,21023483,0,0x0,8
tick,0x7ffdf681f424,21024566,0,0x0,8
tick,0x7ffdf681f424,21026528,0,0x0,8
tick,0x7ffdf681f424,21028510,0,0x0,8
tick,0x7ffdf681f424,21030527,0,0x0,8
tick,0x7ffdf681f424,21032901,0,0x0,8
tick,0x7ffdf681f424,21034528,0,0x0,8
tick,0x7ffdf681f424,21036536,0,0x0,8
tick,0x7ffdf681f424,21038482,0,0x0,8
tick,0x7ffdf681f424,21041159,0,0x0,8
tick,0x7ffdf681f424,21043483,0,0x0,8
tick,0x7ffdf681f424,21044530,0,0x0,8
tick,0x7ffdf681f424,21046462,0,0x0,8
tick,0x7ffdf681f424,21054920,0,0x0,8
tick,0x7ffdf681f424,21056441,0,0x0,8
tick,0x7ffdf681f424,21058451,0,0x0,8
tick,0x7ffdf681f424,21060453,0,0x0,8
tick,0x7ffdf681f424,21062540,0,0x0,8
tick,0x7ffdf681f424,21064423,0,0x0,8
tick,0x7ffdf681f424,21066411,0,0x0,8
tick,0x7ffdf681f424,21068404,0,0x0,8
tick,0x7ffdf681f424,21070447,0,0x0,8
tick,0x7ffdf681f424,21072402,0,0x0,8
tick,0x7ffdf681f424,21074384,0,0x0,8
tick,0x7ffdf681f424,21076390,0,0x0,8
tick,0x7ffdf681f424,21078382,0,0x0,8
tick,0x7ffdf681f424,21080513,0,0x0,8
tick,0x7ffdf681f424,21082372,0,0x0,8
tick,0x7ffdf681f424,21084370,0,0x0,8
tick,0x7ffdf681f424,21086358,0,0x0,8
tick,0x7ffdf681f424,21088350,0,0x0,8
tick,0x7ffdf681f424,21090347,0,0x0,8
tick,0x7ffdf681f424,21092956,0,0x0,8
tick,0x7ffdf681f424,21094406,0,0x0,8
tick,0x7ffdf681f424,21096343,0,0x0,8
tick,0x7ffdf681f424,21098587,0,0x0,8
tick,0x7ffdf681f424,21108794,0,0x0,8
tick,0x7ffdf681f424,21112500,0,0x0,8
tick,0x7ffdf681f424,21114355,0,0x0,8
tick,0x7ffdf681f424,21116325,0,0x0,8
tick,0x7ffdf681f424,21120717,0,0x0,8
tick,0x7ffdf681f424,21122320,0,0x0,8
tick,0x7ffdf681f424,21124254,0,0x0,8
tick,0x7ffdf681f424,21126254,0,0x0,8
tick,0x7ffdf681f424,21128251,0,0x0,8
tick,0x7ffdf681f424,21130244,0,0x0,8
tick,0x7ffdf681f424,21132235,0,0x0,8
tick,0x7ffdf681f424,21134229,0,0x0,8
tick,0x7ffdf681f424,21136246,0,0x0,8
tick,0x7ffdf681f424,21138220,0,0x0,8
tick,0x7ffdf681f424,21140209,0,0x0,8
tick,0x7ffdf681f424,21142224,0,0x0,8
tick,0x7ffdf681f424,21144214,0,0x0,8
tick,0x7ffdf681f424,21152506,0,0x0,8
tick,0x7ffdf681f424,21154196,0,0x0,8
tick,0x7ffdf681f424,21156556,0,0x0,8
tick,0x7ffdf681f424,21158193,0,0x0,8
tick,0x7ffdf681f424,21162189,0,0x0,8
tick,0x7ffdf681f424,21164248,0,0x0,8
tick,0x7ffdf681f424,21166142,0,0x0,8
tick,0x7ffdf681f424,21168218,0,0x0,8
tick,0x7ffdf681f424,21170196,0,0x0,8
tick,0x7ffdf681f424,21172197,0,0x0,8
tick,0x7ffdf681f424,21174124,0,0x0,8
tick,0x7ffdf681f424,21176126,0,0x0,8
tick,0x7ffdf681f424,21178123,0,0x0,8
tick,0x7ffdf681f424,21180228,0,0x0,8
tick,0x7ffdf681f424,21182670,0,0x0,8
tick,0x7ffdf681f424,21184424,0,0x0,8
tick,0x7ffdf681f424,21186103,0,0x0,8
tick,0x7ffdf681f424,21188150,0,0x0,8
tick,0x7ffdf681f424,21190088,0,0x0,8
tick,0x7ffdf681f424,21192335,0,0x0,8
tick,0x7ffdf681f424,21197203,0,0x0,8
tick,0x7ffdf681f424,21199056,0,0x0,8
tick,0x7ffdf681f424,21201046,0,0x0,8
tick,0x7ffdf681f424,21203043,0,0x0,8
tick,0x7ffdf681f424,21205069,0,0x0,8
tick,0x7ffdf681f424,21207113,0,0x0,8
tick,0x7ffdf681f424,21209028,0,0x0,8
tick,0x7ffdf681f424,21211032,0,0x0,8
tick,0x7ffdf681f424,21213019,0,0x0,8
tick,0x7ffdf681f424,21215110,0,0x0,8
tick,0x7ffdf681f424,21217008,0,0x0,8
tick,0x7ffdf681f424,21219023,0,0x0,8
tick,0x7ffdf681f424,21220997,0,0x0,8
tick,0x7ffdf681f424,21223008,0,0x0,8
tick,0x7ffdf681f424,21225000,0,0x0,8
tick,0x7ffdf681f424,21226994,0,0x0,8
tick,0x7ffdf681f424,21228986,0,0x0,8
tick,0x7ffdf681f424,21230970,0,0x0,8
tick,0x7ffdf681f424,21232963,0,0x0,8
tick,0x7ffdf681f424,21234956,0,0x0,8
tick,0x7ffdf681f424,21236953,0,0x0,8
tick,0x7ffdf681f424,21238951,0,0x0,8
tick,0x7ffdf681f424,21240946,0,0x0,8
tick,0x7ffdf681f424,21242937,0,0x0,8
tick,0x7ffdf681f424,21244934,0,0x0,8
tick,0x7ffdf681f424,21246927,0,0x0,8
tick,0x7ffdf681f424,21248922,0,0x0,8
tick,0x7ffdf681f424,21250919,0,0x0,8
tick,0x7ffdf681f424,21252908,0,0x0,8
tick,0x7ffdf681f424,21254934,0,0x0,8
tick,0x7ffdf681f424,21256899,0,0x0,8
tick,0x7ffdf681f424,21270538,0,0x0,8
tick,0x7ffdf681f424,21272136,0,0x0,8
tick,0x7ffdf681f424,21275386,0,0x0,8
tick,0x7ffdf681f424,21279154,0,0x0,8
tick,0x7ffdf681f424,21280884,0,0x0,8
tick,0x7ffdf681f424,21288542,0,0x0,8
tick,0x7ffdf681f424,21289822,0,0x0,8
tick,0x7ffdf681f424,21292432,0,0x0,8
tick,0x7ffdf681f424,21293916,0,0x0,8
tick,0x7ffdf681f424,21296055,0,0x0,8
tick,0x7ffdf681f424,21297912,0,0x0,8
tick,0x7ffdf681f424,21299790,0,0x0,8
tick,0x7ffdf681f424,21301884,0,0x0,8
tick,0x7ffdf681f424,21303829,0,0x0,8
tick,0x7ffdf681f424,21305788,0,0x0,8
tick,0x7ffdf681f424,21307772,0,0x0,8
tick,0x7ffdf681f424,21309769,0,0x0,8
tick,0x7ffdf681f424,21311753,0,0x0,8
tick,0x7ffdf681f424,21313785,0,0x0,8
tick,0x7ffdf681f424,21315745,0,0x0,8
tick,0x7ffdf681f424,21317735,0,0x0,8
tick,0x7ffdf681f424,21319731,0,0x0,8
tick,0x7ffdf681f424,21321730,0,0x0,8
tick,0x7ffdf681f424,21323724,0,0x0,8
tick,0x7ffdf681f424,21325736,0,0x0,8
tick,0x7ffdf681f424,21327714,0,0x0,8
tick,0x7ffdf681f424,21329705,0,0x0,8
tick,0x7ffdf681f424,21331710,0,0x0,8
tick,0x7ffdf681f424,21333702,0,0x0,8
tick,0x7ffdf681f424,21335690,0,0x0,8
tick,0x7ffdf681f424,21337684,0,0x0,8
tick,0x7ffdf681f424,21339680,0,0x0,8
tick,0x7ffdf681f424,21341673,0,0x0,8
tick,0x7ffdf681f424,21344476,0,0x0,8
tick,0x7ffdf681f424,21357657,0,0x0,8
tick,0x7ffdf681f424,21359639,0,0x0,8
tick,0x7ffdf681f424,21361652,0,0x0,8
tick,0x7ffdf681f424,21363893,0,0x0,8
tick,0x7ffdf681f424,21366487,0,0x0,8
tick,0x7ffdf681f424,21367634,0,0x0,8
tick,0x7ffdf681f424,21369655,0,0x0,8
tick,0x7ffdf681f424,21371645,0,0x0,8
tick,0x7ffdf681f424,21373598,0,0x0,8
tick,0x7ffdf681f424,21375771,0,0x0,8
tick,0x7ffdf681f424,21377593,0,0x0,8
tick,0x7ffdf681f424,21379583,0,0x0,8
tick,0x7ffdf681f424,21381575,0,0x0,8
tick,0x7ffdf681f424,21383705,0,0x0,8
tick,0x7ffdf681f424,21386627,0,0x0,8
tick,0x7ffdf681f424,21387575,0,0x0,8
tick,0x7ffdf681f424,21389581,0,0x0,8
tick,0x7ffdf681f424,21391749,0,0x0,8
tick,0x7ffdf681f424,21393533,0,0x0,8
tick,0x7ffdf681f424,21395530,0,0x0,8
tick,0x7ffdf681f424,21397523,0,0x0,8
tick,0x7ffdf681f424,21399521,0,0x0,8
tick,0x7ffdf681f424,21401515,0,0x0,8
tick,0x7ffdf681f424,21403509,0,0x0,8
tick,0x7ffdf681f424,21405505,0,0x0,8
tick,0x7ffdf681f424,21407498,0,0x0,8
tick,0x7ffdf681f424,21409498,0,0x0,8
tick,0x7ffdf681f424,21411491,0,0x0,8
tick,0x7ffdf681f424,21413499,0,0x0,8
tick,0x7ffdf681f424,21415637,0,0x0,8
tick,0x7ffdf681f424,21417470,0,0x0,8
tick,0x7ffdf681f424,21419469,0,0x0,8
tick,0x7ffdf681f424,21421460,0,0x0,8
tick,0x7ffdf681f424,21423453,0,0x0,8
tick,0x7ffdf681f424,21425522,0,0x0,8
tick,0x7ffdf681f424,21427452,0,0x0,8
tick,0x7ffdf681f424,21429443,0,0x0,8
tick,0x7ffdf681f424,21431449,0,0x0,8
tick,0x7ffdf681f424,21434226,0,0x0,8
tick,0x7ffdf681f424,21435654,0,0x0,8
tick,0x7ffdf681f424,21449482,0,0x0,8
tick,0x7ffdf681f424,21451384,0,0x0,8
tick,0x7ffdf681f424,21453380,0,0x0,8
tick,0x7ffdf681f424,21470308,0,0x0,8
tick,0x7ffdf681f424,21472380,0,0x0,8
tick,0x7ffdf681f424,21474326,0,0x0,8
tick,0x7ffdf681f424,21476391,0,0x0,8
tick,0x7ffdf681f424,21478323,0,0x0,8
tick,0x7ffdf681f424,21480306,0,0x0,8
tick,0x7ffdf681f424,21482299,0,0x0,8
tick,0x7ffdf681f424,21484306,0,0x0,8
tick,0x7ffdf681f424,21486286,0,0x0,8
tick,0x7ffdf681f424,21488289,0,0x0,8
tick,0x7ffdf681f424,21490377,0,0x0,8
tick,0x7ffdf681f424,21492300,0,0x0,8
tick,0x7ffdf681f424,21494266,0,0x0,8
tick,0x7ffdf681f424,21496256,0,0x0,8
tick,0x7ffdf681f424,21498259,0,0x0,8
tick,0x7ffdf681f424,21500249,0,0x0,8
tick,0x7ffdf681f424,21502244,0,0x0,8
tick,0x7ffdf681f424,21504292,0,0x0,8
tick,0x7ffdf681f424,21506235,0,0x0,8
tick,0x7ffdf681f424,21508234,0,0x0,8
tick,0x7ffdf681f424,21510227,0,0x0,8
tick,0x7ffdf681f424,21512266,0,0x0,8
tick,0x7ffdf681f424,21514231,0,0x0,8
tick,0x7ffdf681f424,21516231,0,0x0,8
tick,0x7ffdf681f424,21518207,0,0x0,8
tick,0x7ffdf681f424,21520196,0,0x0,8
tick,0x7ffdf681f424,21522192,0,0x0,8
tick,0x7ffdf681f424,21524208,0,0x0,8
tick,0x7ffdf681f424,21543779,0,0x0,8
tick,0x7ffdf681f424,21545852,0,0x0,8
tick,0x7ffdf681f424,21547168,0,0x0,8
tick,0x7ffdf681f424,21549124,0,0x0,8
tick,0x7ffdf681f424,21551126,0,0x0,8
tick,0x7ffdf681f424,21553449,0,0x0,8
tick,0x7ffdf681f424,21555103,0,0x0,8
tick,0x7ffdf681f424,21557115,0,0x0,8
tick,0x7ffdf681f424,21559095,0,0x0,8
tick,0x7ffdf681f424,21561090,0,0x0,8
tick,0x7ffdf681f424,21563155,0,0x0,8
tick,0x7ffdf681f424,21566986,0,0x0,8
tick,0x7ffdf681f424,21568083,0,0x0,8
tick,0x7ffdf681f424,21570064,0,0x0,8
tick,0x7ffdf681f424,21572084,0,0x0,8
tick,0x7ffdf681f424,21574053,0,0x0,8
tick,0x7ffdf681f424,21576049,0,0x0,8
tick,0x7ffdf681f424,21578051,0,0x0,8
tick,0x7ffdf681f424,21580037,0,0x0,8
tick,0x7ffdf681f424,21582029,0,0x0,8
tick,0x7ffdf681f424,21584060,0,0x0,8
tick,0x7ffdf681f424,21586022,0,0x0,8
tick,0x7ffdf681f424,21588014,0,0x0,8
tick,0x7ffdf681f424,21590007,0,0x0,8
tick,0x7ffdf681f424,21592002,0,0x0,8
tick,0x7ffdf681f424,21593999,0,0x0,8
tick,0x7ffdf681f424,21595990,0,0x0,8
tick,0x7ffdf681f424,21597990,0,0x0,8
tick,0x7ffdf681f424,21599989,0,0x0,8
tick,0x7ffdf681f424,21601978,0,0x0,8
tick,0x7ffdf681f424,21615927,0,0x0,8
tick,0x7ffdf681f424,21616942,0,0x0,8
tick,0x7ffdf681f424,21618940,0,0x0,8
tick,0x7ffdf681f424,21620508,0,0x0,8
tick,0x7ffdf681f424,21624782,0,0x0,8
tick,0x7ffdf681f424,21626444,0,0x0,8
tick,0x7ffdf681f424,21628448,0,0x0,8
tick,0x7ffdf681f424,21630435,0,0x0,8
tick,0x7ffdf681f424,21632417,0,0x0,8
tick,0x7ffdf681f424,21634414,0,0x0,8
tick,0x7ffdf681f424,21636409,0,0x0,8
tick,0x7ffdf681f424,21638403,0,0x0,8
tick,0x7ffdf681f424,21640403,0,0x0,8
tick,0x7ffdf681f424,21642390,0,0x0,8
tick,0x7ffdf681f424,21650743,0,0x0,8
tick,0x7ffdf681f424,21652796,0,0x0,8
tick,0x7ffdf681f424,21654413,0,0x0,8
tick,0x7ffdf681f424,21656351,0,0x0,8
tick,0x7ffdf681f424,21658350,0,0x0,8
tick,0x7ffdf681f424,21660344,0,0x0,8
tick,0x7ffdf681f424,21662353,0,0x0,8
tick,0x7ffdf681f424,21664347,0,0x0,8
tick,0x7ffdf681f424,21666366,0,0x0,8
tick,0x7ffdf681f424,21668332,0,0x0,8
tick,0x7ffdf681f424,21670332,0,0x0,8
tick,0x7ffdf681f424,21672308,0,0x0,8
tick,0x7ffdf681f424,21675217,0,0x0,8
tick,0x7ffdf681f424,21687488,0,0x0,8
tick,0x7ffdf681f424,21687514,0,0x0,8
tick,0x7ffdf681f424,21689274,0,0x0,8
tick,0x7ffdf681f424,21691421,0,0x0,8
tick,0x7ffdf681f424,21693472,0,0x0,8
tick,0x7ffdf681f424,21695301,0,0x0,8
tick,0x7ffdf681f424,21697594,0,0x0,8
tick,0x7ffdf681f424,21699237,0,0x0,8
tick,0x7ffdf681f424,21701235,0,0x0,8
tick,0x7ffdf681f424,21703229,0,0x0,8
tick,0x7ffdf681f424,21705245,0,0x0,8
tick,0x7ffdf681f424,21707227,0,0x0,8
tick,0x7ffdf681f424,21709326,0,0x0,8
tick,0x7ffdf681f424,21711212,0,0x0,8
tick,0x7ffdf681f424,21713201,0,0x0,8
tick,0x7ffdf681f424,21715204,0,0x0,8
tick,0x7ffdf681f424,21717243,0,0x0,8
tick,0x7ffdf681f424,21719185,0,0x0,8
tick,0x7ffdf681f424,21720784,0,0x0,8
tick,0x7ffdf681f424,21722838,0,0x0,8
tick,0x7ffdf681f424,21724779,0,0x0,8
tick,0x7ffdf681f424,21726766,0,0x0,8
tick,0x7ffdf681f424,21728774,0,0x0,8
tick,0x7ffdf681f424,21730797,0,0x0,8
tick,0x7ffdf681f424,21732759,0,0x0,8
tick,0x7ffdf681f424,21734776,0,0x0,8
tick,0x7ffdf681f424,21736740,0,0x0,8
tick,0x7ffdf681f424,21738742,0,0x0,8
tick,0x7ffdf681f424,21740730,0,0x0,8
tick,0x7ffdf681f424,21742729,0,0x0,8
tick,0x7ffdf681f424,21744723,0,0x0,8
tick,0x7ffdf681f424,21746735,0,0x0,8
tick,0x7ffdf681f424,21765000,0,0x0,8
tick,0x7ffdf681f424,21765029,0,0x0,8
tick,0x7ffdf681f424,21766663,0,0x0,8
tick,0x7ffdf681f424,21768659,0,0x0,8
tick,0x7ffdf681f424,21770703,0,0x0,8
tick,0x7ffdf681f424,21772664,0,0x0,8
tick,0x7ffdf681f424,21774662,0,0x0,8
tick,0x7ffdf681f424,21776638,0,0x0,8
tick,0x7ffdf681f424,21778629,0,0x0,8
tick,0x7ffdf681f424,21780621,0,0x0,8
tick,0x7ffdf681f424,21782622,0,0x0,8
tick,0x7ffdf681f424,21784620,0,0x0,8
tick,0x7ffdf681f424,21786623,0,0x0,8
tick,0x7ffdf681f424,21788603,0,0x0,8
tick,0x7ffdf681f424,21804597,0,0x0,8
tick,0x7ffdf681f424,21806559,0,0x0,8
tick,0x7ffdf681f424,21808563,0,0x0,8
tick,0x7ffdf681f424,21810552,0,0x0,8
tick,0x7ffdf681f424,21812561,0,0x0,8
tick,0x7ffdf681f424,21814594,0,0x0,8
tick,0x7ffdf681f424,21816656,0,0x0,8
tick,0x7ffdf681f424,21818860,0,0x0,8
tick,0x7ffdf681f424,21820550,0,0x0,8
tick,0x7ffdf681f424,21822552,0,0x0,8
tick,0x7ffdf681f424,21824504,0,0x0,8
tick,0x7ffdf681f424,21826527,0,0x0,8
tick,0x7ffdf681f424,21828507,0,0x0,8
tick,0x7ffdf681f424,21830491,0,0x0,8
tick,0x7ffdf681f424,21832496,0,0x0,8
tick,0x7ffdf681f424,21834486,0,0x0,8
tick,0x7ffdf681f424,21836474,0,0x0,8
tick,0x7ffdf681f424,21838475,0,0x0,8
tick,0x7ffdf681f424,21840467,0,0x0,8
tick,0x7ffdf681f424,21842460,0,0x0,8
tick,0x7ffdf681f424,21844455,0,0x0,8
tick,0x7ffdf681f424,21846447,0,0x0,8
tick,0x7ffdf681f424,21848442,0,0x0,8
tick,0x7ffdf681f424,21850440,0,0x0,8
tick,0x7ffdf681f424,21852433,0,0x0,8
tick,0x7ffdf681f424,21854426,0,0x0,8
tick,0x7ffdf681f424,21856419,0,0x0,8
tick,0x7ffdf681f424,21860103,0,0x0,8
tick,0x7ffdf681f424,21871100,0,0x0,8
tick,0x7ffdf681f424,21872379,0,0x0,8
tick,0x7ffdf681f424,21874381,0,0x0,8
tick,0x7ffdf681f424,21876647,0,0x0,8
tick,0x7ffdf681f424,21878394,0,0x0,8
tick,0x7ffdf681f424,21880359,0,0x0,8
tick,0x7ffdf681f424,21882352,0,0x0,8
tick,0x7ffdf681f424,21884361,0,0x0,8
tick,0x7ffdf681f424,21886347,0,0x0,8
tick,0x7ffdf681f424,21888339,0,0x0,8
tick,0x7ffdf681f424,21890331,0,0x0,8
tick,0x7ffdf681f424,21892349,0,0x0,8
tick,0x7ffdf681f424,21894319,0,0x0,8
tick,0x7ffdf681f424,21896313,0,0x0,8
tick,0x7ffdf681f424,21902692,0,0x0,8
tick,0x7ffdf681f424,21906525,0,0x0,8
tick,0x7ffdf681f424,21906564,0,0x0,8
tick,0x7ffdf681f424,21908832,0,0x0,8
tick,0x7ffdf681f424,21914785,0,0x0,8
tick,0x7ffdf681f424,21916275,0,0x0,8
tick,0x7ffdf681f424,21918260,0,0x0,8
tick,0x7ffdf681f424,21920251,0,0x0,8
tick,0x7ffdf681f424,21922271,0,0x0,8
tick,0x7ffdf681f424,21924284,0,0x0,8
tick,0x7ffdf681f424,21926606,0,0x0,8
tick,0x7ffdf681f424,21928462,0,0x0,8
tick,0x7ffdf681f424,21930243,0,0x0,8
tick,0x7ffdf681f424,21932246,0,0x0,8
tick,0x7ffdf681f424,21934215,0,0x0,8
tick,0x7ffdf681f424,21936218,0,0x0,8
tick,0x7ffdf681f424,21938205,0,0x0,8
tick,0x7ffdf681f424,21940195,0,0x0,8
tick,0x7ffdf681f424,21942237,0,0x0,8
tick,0x7ffdf681f424,21944188,0,0x0,8
tick,0x7ffdf681f424,21958703,0,0x0,8
tick,0x7ffdf681f424,21960147,0,0x0,8
tick,0x7ffdf681f424,21963335,0,0x0,8
tick,0x7ffdf681f424,21965144,0,0x0,8
tick,0x7ffdf681f424,21967137,0,0x0,8
tick,0x7ffdf681f424,21969148,0,0x0,8
tick,0x7ffdf681f424,21971116,0,0x0,8
tick,0x7ffdf681f424,21973114,0,0x0,8
tick,0x7ffdf681f424,21975114,0,0x0,8
tick,0x7ffdf681f424,21977097,0,0x0,8
tick,0x7ffdf681f424,21979096,0,0x0,8
tick,0x7ffdf681f424,21981101,0,0x0,8
tick,0x7ffdf681f424,21983082,0,0x0,8
tick,0x7ffdf681f424,21985082,0,0x0,8
tick,0x7ffdf681f424,21987074,0,0x0,8
tick,0x7ffdf681f424,21989066,0,0x0,8
tick,0x7ffdf681f424,21991073,0,0x0,8
tick,0x7ffdf681f424,21993057,0,0x0,8
tick,0x7ffdf681f424,21995053,0,0x0,8
tick,0x7ffdf681f424,21997049,0,0x0,8
tick,0x7ffdf681f424,21999041,0,0x0,8
tick,0x7ffdf681f424,22001062,0,0x0,8
tick,0x7ffdf681f424,22015990,0,0x0,8
tick,0x7ffdf681f424,22016995,0,0x0,8
tick,0x7ffdf681f424,22018993,0,0x0,8
tick,0x7ffdf681f424,22021033,0,0x0,8
tick,0x7ffdf681f424,22023030,0,0x0,8
tick,0x7ffdf681f424,22024978,0,0x0,8
tick,0x7ffdf681f424,22026974,0,0x0,8
tick,0x7ffdf681f424,22028962,0,0x0,8
tick,0x7ffdf681f424,22030955,0,0x0,8
tick,0x7ffdf681f424,22032952,0,0x0,8
tick,0x7ffdf681f424,22034946,0,0x0,8
tick,0x7ffdf681f424,22040710,0,0x0,8
tick,0x7ffdf681f424,22045210,0,0x0,8
tick,0x7ffdf681f424,22052629,0,0x0,8
tick,0x7ffdf681f424,22053894,0,0x0,8
tick,0x7ffdf681f424,22055888,0,0x0,8
tick,0x7ffdf681f424,22057944,0,0x0,8
tick,0x7ffdf681f424,22059951,0,0x0,8
tick,0x7ffdf681f424,22061886,0,0x0,8
tick,0x7ffdf681f424,22063970,0,0x0,8
tick,0x7ffdf681f424,22065862,0,0x0,8
tick,0x7ffdf681f424,22067859,0,0x0,8
tick,0x7ffdf681f424,22069852,0,0x0,8
tick,0x7ffdf681f424,22071846,0,0x0,8
tick,0x7ffdf681f424,22073841,0,0x0,8
tick,0x7ffdf681f424,22075836,0,0x0,8
tick,0x7ffdf681f424,22077829,0,0x0,8
tick,0x7ffdf681f424,22079861,0,0x0,8
tick,0x7ffdf681f424,22081823,0,0x0,8
tick,0x7ffdf681f424,22083810,0,0x0,8
tick,0x7ffdf681f424,22085816,0,0x0,8
tick,0x7ffdf681f424,22087800,0,0x0,8
tick,0x7ffdf681f424,22089793,0,0x0,8
tick,0x7ffdf681f424,22091810,0,0x0,8
tick,0x7ffdf681f424,22093787,0,0x0,8
tick,0x7ffdf681f424,22095789,0,0x0,8
tick,0x7ffdf681f424,22097812,0,0x0,8
tick,0x7ffdf681f424,22099792,0,0x0,8
tick,0x7ffdf681f424,22103536,0,0x0,8
tick,0x7ffdf681f424,22130181,0,0x0,8
tick,0x7ffdf681f424,22130518,0,0x0,8
tick,0x7ffdf681f424,22132195,0,0x0,8
tick,0x7ffdf681f424,22134197,0,0x0,8
tick,0x7ffdf681f424,22136218,0,0x0,8
tick,0x7ffdf681f424,22138215,0,0x0,8
tick,0x7ffdf681f424,22140181,0,0x0,8
tick,0x7ffdf681f424,22142959,0,0x0,8
tick,0x7ffdf681f424,22144190,0,0x0,8
tick,0x7ffdf681f424,22146160,0,0x0,8
tick,0x7ffdf681f424,22148158,0,0x0,8
tick,0x7ffdf681f424,22150143,0,0x0,8
tick,0x7ffdf681f424,22152141,0,0x0,8
tick,0x7ffdf681f424,22154142,0,0x0,8
tick,0x7ffdf681f424,22156128,0,0x0,8
tick,0x7ffdf681f424,22158127,0,0x0,8
tick,0x7ffdf681f424,22160181,0,0x0,8
tick,0x7ffdf681f424,22162112,0,0x0,8
tick,0x7ffdf681f424,22164127,0,0x0,8
tick,0x7ffdf681f424,22166100,0,0x0,8
tick,0x7ffdf681f424,22168103,0,0x0,8
tick,0x7ffdf681f424,22170089,0,0x0,8
tick,0x7ffdf681f424,22172096,0,0x0,8
tick,0x7ffdf681f424,22174091,0,0x0,8
tick,0x7ffdf681f424,22176074,0,0x0,8
tick,0x7ffdf681f424,22178239,0,0x0,8
tick,0x7ffdf681f424,22180074,0,0x0,8
tick,0x7ffdf681f424,22182063,0,0x0,8
tick,0x7ffdf681f424,22184058,0,0x0,8
tick,0x7ffdf681f424,22186053,0,0x0,8
tick,0x7ffdf681f424,22188044,0,0x0,8
tick,0x7ffdf681f424,22190038,0,0x0,8
tick,0x7ffdf681f424,22192035,0,0x0,8
tick,0x7ffdf681f424,22194042,0,0x0,8
tick,0x7ffdf681f424,22196021,0,0x0,8
tick,0x7ffdf681f424,22198025,0,0x0,8
tick,0x7ffdf681f424,22200010,0,0x0,8
tick,0x7ffdf681f424,22202011,0,0x0,8
tick,0x7ffdf681f424,22204000,0,0x0,8
tick,0x7ffdf681f424,22205991,0,0x0,8
tick,0x7ffdf681f424,22208348,0,0x0,8
tick,0x7ffdf681f424,22218678,0,0x0,8
tick,0x7ffdf681f424,22221831,0,0x0,8
tick,0x7ffdf681f424,22225488,0,0x0,8
tick,0x7ffdf681f424,22227450,0,0x0,8
tick,0x7ffdf681f424,22229445,0,0x0,8
tick,0x7ffdf681f424,22231809,0,0x0,8
tick,0x7ffdf681f424,22233435,0,0x0,8
tick,0x7ffdf681f424,22235433,0,0x0,8
tick,0x7ffdf681f424,22237424,0,0x0,8
tick,0x7ffdf681f424,22239416,0,0x0,8
tick,0x7ffdf681f424,22241407,0,0x0,8
tick,0x7ffdf681f424,22254271,0,0x0,8
tick,0x7ffdf681f424,22255659,0,0x0,8
tick,0x7ffdf681f424,22257481,0,0x0,8
tick,0x7ffdf681f424,22259776,0,0x0,8
tick,0x7ffdf681f424,22261358,0,0x0,8
tick,0x7ffdf681f424,22263351,0,0x0,8
tick,0x7ffdf681f424,22265363,0,0x0,8
tick,0x7ffdf681f424,22268026,0,0x0,8
tick,0x7ffdf681f424,22269354,0,0x0,8
tick,0x7ffdf681f424,22271362,0,0x0,8
tick,0x7ffdf681f424,22273331,0,0x0,8
tick,0x7ffdf681f424,22275319,0,0x0,8
tick,0x7ffdf681f424,22277315,0,0x0,8
tick,0x7ffdf681f424,22279305,0,0x0,8
tick,0x7ffdf681f424,22281306,0,0x0,8
tick,0x7ffdf681f424,22283301,0,0x0,8
tick,0x7ffdf681f424,22285288,0,0x0,8
tick,0x7ffdf681f424,22287287,0,0x0,8
tick,0x7ffdf681f424,22289284,0,0x0,8
tick,0x7ffdf681f424,22291346,0,0x0,8
tick,0x7ffdf681f424,22293285,0,0x0,8
tick,0x7ffdf681f424,22295389,0,0x0,8
tick,0x7ffdf681f424,22297272,0,0x0,8
tick,0x7ffdf681f424,22307614,0,0x0,8
tick,0x7ffdf681f424,22309236,0,0x0,8
tick,0x7ffdf681f424,22311281,0,0x0,8
tick,0x7ffdf681f424,22313342,0,0x0,8
tick,0x7ffdf681f424,22315447,0,0x0,8
tick,0x7ffdf681f424,22317210,0,0x0,8
tick,0x7ffdf681f424,22319423,0,0x0,8
tick,0x7ffdf681f424,22321193,0,0x0,8
tick,0x7ffdf681f424,22323193,0,0x0,8
tick,0x7ffdf681f424,22325187,0,0x0,8
tick,0x7ffdf681f424,22327187,0,0x0,8
tick,0x7ffdf681f424,22329174,0,0x0,8
tick,0x7ffdf681f424,22331175,0,0x0,8
tick,0x7ffdf681f424,22333193,0,0x0,8
tick,0x7ffdf681f424,22335197,0,0x0,8
tick,0x7ffdf681f424,22349660,0,0x0,8
tick,0x7ffdf681f424,22351243,0,0x0,8
tick,0x7ffdf681f424,22353121,0,0x0,8
tick,0x7ffdf681f424,22355187,0,0x0,8
tick,0x7ffdf681f424,22357116,0,0x0,8
tick,0x7ffdf681f424,22359124,0,0x0,8
tick,0x7ffdf681f424,22361092,0,0x0,8
tick,0x7ffdf681f424,22363085,0,0x0,8
tick,0x7ffdf681f424,22365105,0,0x0,8
tick,0x7ffdf681f424,22367071,0,0x0,8
tick,0x7ffdf681f424,22369066,0,0x0,8
tick,0x7ffdf681f424,22371064,0,0x0,8
tick,0x7ffdf681f424,22373057,0,0x0,8
tick,0x7ffdf681f424,22375098,0,0x0,8
tick,0x7ffdf681f424,22377049,0,0x0,8
tick,0x7ffdf681f424,22379065,0,0x0,8
tick,0x7ffdf681f424,22381059,0,0x0,8
tick,0x7ffdf681f424,22383060,0,0x0,8
tick,0x7ffdf681f424,22385047,0,0x0,8
tick,0x7ffdf681f424,22387018,0,0x0,8
tick,0x7ffdf681f424,22389013,0,0x0,8
tick,0x7ffdf681f424,22391008,0,0x0,8
tick,0x7ffdf681f424,22393049,0,0x0,8
tick,0x7ffdf681f424,22394998,0,0x0,8
tick,0x7ffdf681f424,22396997,0,0x0,8
tick,0x7ffdf681f424,22398991,0,0x0,8
tick,0x7ffdf681f424,22400981,0,0x0,8
tick,0x7ffdf681f424,22403906,0,0x0,8
tick,0x7ffdf681f424,22414958,0,0x0,8
tick,0x7ffdf681f424,22416960,0,0x0,8
tick,0x7ffdf681f424,22418937,0,0x0,8
tick,0x7ffdf681f424,22420985,0,0x0,8
tick,0x7ffdf681f424,22422941,0,0x0,8
tick,0x7ffdf681f424,22424985,0,0x0,8
tick,0x7ffdf681f424,22426934,0,0x0,8
tick,0x7ffdf681f424,22428927,0,0x0,8
tick,0x7ffdf681f424,22430905,0,0x0,8
tick,0x7ffdf681f424,22432899,0,0x0,8
tick,0x7ffdf681f424,22434898,0,0x0,8
tick,0x7ffdf681f424,22437241,0,0x0,8
tick,0x7ffdf681f424,22439003,0,0x0,8
tick,0x7ffdf681f424,22441131,0,0x0,8
tick,0x7ffdf681f424,22443069,0,0x0,8
tick,0x7ffdf681f424,22444924,0,0x0,8
tick,0x7ffdf681f424,22446872,0,0x0,8
tick,0x7ffdf681f424,22448857,0,0x0,8
tick,0x7ffdf681f424,22450850,0,0x0,8
tick,0x7ffdf681f424,22452848,0,0x0,8
tick,0x7ffdf681f424,22454893,0,0x0,8
tick,0x7ffdf681f424,22456835,0,0x0,8
tick,0x7ffdf681f424,22458826,0,0x0,8
tick,0x7ffdf681f424,22460819,0,0x0,8
tick,0x7ffdf681f424,22462821,0,0x0,8
tick,0x7ffdf681f424,22464898,0,0x0,8
tick,0x7ffdf681f424,22466806,0,0x0,8
tick,0x7ffdf681f424,22468849,0,0x0,8
tick,0x7ffdf681f424,22471075,0,0x0,8
tick,0x7ffdf681f424,22472791,0,0x0,8
tick,0x7ffdf681f424,22474788,0,0x0,8
tick,0x7ffdf681f424,22476777,0,0x0,8
tick,0x7ffdf681f424,22478773,0,0x0,8
tick,0x7ffdf681f424,22480773,0,0x0,8
tick,0x7ffdf681f424,22482761,0,0x0,8
tick,0x7ffdf681f424,22484871,0,0x0,8
tick,0x7ffdf681f424,22486752,0,0x0,8
tick,0x7ffdf681f424,22488747,0,0x0,8
tick,0x7ffdf681f424,22490744,0,0x0,8
tick,0x7ffdf681f424,22504184,0,0x0,8
tick,0x7ffdf681f424,22504227,0,0x0,8
tick,0x7ffdf681f424,22505705,0,0x0,8
tick,0x7ffdf681f424,22507704,0,0x0,8
tick,0x7ffdf681f424,22509994,0,0x0,8
tick,0x7ffdf681f424,22511810,0,0x0,8
tick,0x7ffdf681f424,22513702,0,0x0,8
tick,0x7ffdf681f424,22515684,0,0x0,8
tick,0x7ffdf681f424,22517673,0,0x0,8
tick,0x7ffdf681f424,22519689,0,0x0,8
tick,0x7ffdf681f424,22521660,0,0x0,8
tick,0x7ffdf681f424,22523656,0,0x0,8
tick,0x7ffdf681f424,22525681,0,0x0,8
tick,0x7ffdf681f424,22527642,0,0x0,8
tick,0x7ffdf681f424,22529640,0,0x0,8
tick,0x7ffdf681f424,22531629,0,0x0,8
tick,0x7ffdf681f424,22533628,0,0x0,8
tick,0x7ffdf681f424,22535657,0,0x0,8
tick,0x7ffdf681f424,22537614,0,0x0,8
tick,0x7ffdf681f424,22539609,0,0x0,8
tick,0x7ffdf681f424,22541600,0,0x0,8
tick,0x7ffdf681f424,22543596,0,0x0,8
tick,0x7ffdf681f424,22545589,0,0x0,8
tick,0x7ffdf681f424,22547926,0,0x0,8
tick,0x7ffdf681f424,22559231,0,0x0,8
tick,0x7ffdf681f424,22560557,0,0x0,8
tick,0x7ffdf681f424,22563368,0,0x0,8
tick,0x7ffdf681f424,22564557,0,0x0,8
tick,0x7ffdf681f424,22566639,0,0x0,8
tick,0x7ffdf681f424,22568538,0,0x0,8
tick,0x7ffdf681f424,22570545,0,0x0,8
tick,0x7ffdf681f424,22572983,0,0x0,8
tick,0x7ffdf681f424,22574576,0,0x0,8
tick,0x7ffdf681f424,22576516,0,0x0,8
tick,0x7ffdf681f424,22578521,0,0x0,8
tick,0x7ffdf681f424,22580529,0,0x0,8
tick,0x7ffdf681f424,22582936,0,0x0,8
tick,0x7ffdf681f424,22585889,0,0x0,8
tick,0x7ffdf681f424,22587606,0,0x0,8
tick,0x7ffdf681f424,22589522,0,0x0,8
tick,0x7ffdf681f424,22591482,0,0x0,8
tick,0x7ffdf681f424,22593466,0,0x0,8
tick,0x7ffdf681f424,22595523,0,0x0,8
tick,0x7ffdf681f424,22597518,0,0x0,8
tick,0x7ffdf681f424,22599461,0,0x0,8
tick,0x7ffdf681f424,22601448,0,0x0,8
tick,0x7ffdf681f424,22603441,0,0x0,8
tick,0x7ffdf681f424,22605448,0,0x0,8
tick,0x7ffdf681f424,22607434,0,0x0,8
tick,0x7ffdf681f424,22609429,0,0x0,8
tick,0x7ffdf681f424,22611420,0,0x0,8
tick,0x7ffdf681f424,22613415,0,0x0,8
tick,0x7ffdf681f424,22615442,0,0x0,8
tick,0x7ffdf681f424,22617401,0,0x0,8
tick,0x7ffdf681f424,22619400,0,0x0,8
tick,0x7ffdf681f424,22621392,0,0x0,8
tick,0x7ffdf681f424,22623391,0,0x0,8
tick,0x7ffdf681f424,22625386,0,0x0,8
tick,0x7ffdf681f424,22627379,0,0x0,8
tick,0x7ffdf681f424,22629372,0,0x0,8
tick,0x7ffdf681f424,22631379,0,0x0,8
tick,0x7ffdf681f424,22633357,0,0x0,8
tick,0x7ffdf681f424,22635360,0,0x0,8
tick,0x7ffdf681f424,22637347,0,0x0,8
tick,0x7ffdf681f424,22639345,0,0x0,8
tick,0x7ffdf681f424,22641339,0,0x0,8
tick,0x7ffdf681f424,22643332,0,0x0,8
tick,0x7ffdf681f424,22645330,0,0x0,8
tick,0x7ffdf681f424,22658230,0,0x0,8
tick,0x7ffdf681f424,22659294,0,0x0,8
tick,0x7ffdf681f424,22661300,0,0x0,8
tick,0x7ffdf681f424,22663331,0,0x0,8
tick,0x7ffdf681f424,22665350,0,0x0,8
tick,0x7ffdf681f424,22667693,0,0x0,8
tick,0x7ffdf681f424,22669268,0,0x0,8
tick,0x7ffdf681f424,22671269,0,0x0,8
tick,0x7ffdf681f424,22673259,0,0x0,8
tick,0x7ffdf681f424,22675252,0,0x0,8
tick,0x7ffdf681f424,22677245,0,0x0,8
tick,0x7ffdf681f424,22679248,0,0x0,8
tick,0x7ffdf681f424,22681239,0,0x0,8
tick,0x7ffdf681f424,22683228,0,0x0,8
tick,0x7ffdf681f424,22685246,0,0x0,8
tick,0x7ffdf681f424,22687218,0,0x0,8
tick,0x7ffdf681f424,22689214,0,0x0,8
tick,0x7ffdf681f424,22691208,0,0x0,8
tick,0x7ffdf681f424,22693606,0,0x0,8
tick,0x7ffdf681f424,22695701,0,0x0,8
tick,0x7ffdf681f424,22701607,0,0x0,8
tick,0x7ffdf681f424,22709217,0,0x0,8
tick,0x7ffdf681f424,22711194,0,0x0,8
tick,0x7ffdf681f424,22713151,0,0x0,8
tick,0x7ffdf681f424,22717890,0,0x0,8
tick,0x7ffdf681f424,22719161,0,0x0,8
tick,0x7ffdf681f424,22721244,0,0x0,8
tick,0x7ffdf681f424,22723122,0,0x0,8
tick,0x7ffdf681f424,22725143,0,0x0,8
tick,0x7ffdf681f424,22727114,0,0x0,8
tick,0x7ffdf681f424,22729108,0,0x0,8
tick,0x7ffdf681f424,22731106,0,0x0,8
tick,0x7ffdf681f424,22733092,0,0x0,8
tick,0x7ffdf681f424,22735106,0,0x0,8
tick,0x7ffdf681f424,22737089,0,0x0,8
tick,0x7ffdf681f424,22739990,0,0x0,8
tick,0x7ffdf681f424,22753625,0,0x0,8
tick,0x7ffdf681f424,22753660,0,0x0,8
tick,0x7ffdf681f424,22755041,0,0x0,8
tick,0x7ffdf681f424,22757031,0,0x0,8
tick,0x7ffdf681f424,22759208,0,0x0,8
tick,0x7ffdf681f424,22761083,0,0x0,8
tick,0x7ffdf681f424,22763024,0,0x0,8
tick,0x7ffdf681f424,22765006,0,0x0,8
tick,0x7ffdf681f424,22766999,0,0x0,8
tick,0x7ffdf681f424,22768999,0,0x0,8
tick,0x7ffdf681f424,22770993,0,0x0,8
tick,0x7ffdf681f424,22772988,0,0x0,8
tick,0x7ffdf681f424,22775168,0,0x0,8
tick,0x7ffdf681f424,22776979,0,0x0,8
tick,0x7ffdf681f424,22778971,0,0x0,8
tick,0x7ffdf681f424,22780967,0,0x0,8
tick,0x7ffdf681f424,22782959,0,0x0,8
tick,0x7ffdf681f424,22784982,0,0x0,8
tick,0x7ffdf681f424,22786947,0,0x0,8
tick,0x7ffdf681f424,22788943,0,0x0,8
tick,0x7ffdf681f424,22790938,0,0x0,8
tick,0x7ffdf681f424,22792936,0,0x0,8
tick,0x7ffdf681f424,22794929,0,0x0,8
tick,0x7ffdf681f424,22796923,0,0x0,8
tick,0x7ffdf681f424,22798923,0,0x0,8
tick,0x7ffdf681f424,22800915,0,0x0,8
tick,0x7ffdf681f424,22802923,0,0x0,8
tick,0x7ffdf681f424,22804902,0,0x0,8
tick,0x7ffdf681f424,22806896,0,0x0,8
tick,0x7ffdf681f424,22808905,0,0x0,8
tick,0x7ffdf681f424,22812407,0,0x0,8
tick,0x7ffdf681f424,22813070,0,0x0,8
tick,0x7ffdf681f424,22818080,0,0x0,8
tick,0x7ffdf681f424,22837063,0,0x0,8
tick,0x7ffdf681f424,22842134,0,0x0,8
tick,0x7ffdf681f424,22843830,0,0x0,8
tick,0x7ffdf681f424,22845807,0,0x0,8
tick,0x7ffdf681f424,22847800,0,0x0,8
tick,0x7ffdf681f424,22849777,0,0x0,8
tick,0x7ffdf681f424,22851775,0,0x0,8
tick,0x7ffdf681f424,22853787,0,0x0,8
tick,0x7ffdf681f424,22855756,0,0x0,8
tick,0x7ffdf681f424,22858085,0,0x0,8
tick,0x7ffdf681f424,22859779,0,0x0,8
tick,0x7ffdf681f424,22861756,0,0x0,8
tick,0x7ffdf681f424,22863826,0,0x0,8
tick,0x7ffdf681f424,22865802,0,0x0,8
tick,0x7ffdf681f424,22867903,0,0x0,8
tick,0x7ffdf681f424,22869734,0,0x0,8
tick,0x7ffdf681f424,22871726,0,0x0,8
tick,0x7ffdf681f424,22873723,0,0x0,8
tick,0x7ffdf681f424,22875741,0,0x0,8
tick,0x7ffdf681f424,22877725,0,0x0,8
tick,0x7ffdf681f424,22879706,0,0x0,8
tick,0x7ffdf681f424,22881701,0,0x0,8
tick,0x7ffdf681f424,22883695,0,0x0,8
tick,0x7ffdf681f424,22885687,0,0x0,8
tick,0x7ffdf681f424,22887679,0,0x0,8
tick,0x7ffdf681f424,22889672,0,0x0,8
tick,0x7ffdf681f424,22891671,0,0x0,8
tick,0x7ffdf681f424,22893672,0,0x0,8
tick,0x7ffdf681f424,22895694,0,0x0,8
tick,0x7ffdf681f424,22897723,0,0x0,8
tick,0x7ffdf681f424,22899662,0,0x0,8
tick,0x7ffdf681f424,22901646,0,0x0,8
tick,0x7ffdf681f424,22903641,0,0x0,8
tick,0x7ffdf681f424,22905632,0,0x0,8
tick,0x7ffdf681f424,22907625,0,0x0,8
tick,0x7ffdf681f424,22909625,0,0x0,8
tick,0x7ffdf681f424,22911917,0,0x0,8
tick,0x7ffdf681f424,22913919,0,0x0,8
tick,0x7ffdf681f424,22915648,0,0x0,8
tick,0x7ffdf681f424,22917604,0,0x0,8
tick,0x7ffdf681f424,22919662,0,0x0,8
tick,0x7ffdf681f424,22921600,0,0x0,8
tick,0x7ffdf681f424,22923619,0,0x0,8
tick,0x7ffdf681f424,22932342,0,0x0,8
tick,0x7ffdf681f424,22933567,0,0x0,8
tick,0x7ffdf681f424,22935558,0,0x0,8
tick,0x7ffdf681f424,22937678,0,0x0,8
tick,0x7ffdf681f424,22939558,0,0x0,8
tick,0x7ffdf681f424,22941776,0,0x0,8
tick,0x7ffdf681f424,22943540,0,0x0,8
tick,0x7ffdf681f424,22945523,0,0x0,8
tick,0x7ffdf681f424,22947541,0,0x0,8
tick,0x7ffdf681f424,22949517,0,0x0,8
tick,0x7ffdf681f424,22951509,0,0x0,8
tick,0x7ffdf681f424,22953500,0,0x0,8
tick,0x7ffdf681f424,22955633,0,0x0,8
tick,0x7ffdf681f424,22957492,0,0x0,8
tick,0x7ffdf681f424,22959490,0,0x0,8
tick,0x7ffdf681f424,22961482,0,0x0,8
tick,0x7ffdf681f424,22963475,0,0x0,8
tick,0x7ffdf681f424,22965491,0,0x0,8
tick,0x7ffdf681f424,22967474,0,0x0,8
tick,0x7ffdf681f424,22969473,0,0x0,8
tick,0x7ffdf681f424,22971470,0,0x0,8
tick,0x7ffdf681f424,22973791,0,0x0,8
tick,0x7ffdf681f424,22975459,0,0x0,8
tick,0x7ffdf681f424,22977442,0,0x0,8
tick,0x7ffdf681f424,22979434,0,0x0,8
tick,0x7ffdf681f424,22981432,0,0x0,8
tick,0x7ffdf681f424,22983438,0,0x0,8
tick,0x7ffdf681f424,22989278,0,0x0,8
tick,0x7ffdf681f424,22998425,0,0x0,8
tick,0x7ffdf681f424,23000402,0,0x0,8
tick,0x7ffdf681f424,23002575,0,0x0,8
tick,0x7ffdf681f424,23004379,0,0x0,8
tick,0x7ffdf681f424,23007289,0,0x0,8
tick,0x7ffdf681f424,23008385,0,0x0,8
tick,0x7ffdf681f424,23010615,0,0x0,8
tick,0x7ffdf681f424,23012351,0,0x0,8
tick,0x7ffdf681f424,23014360,0,0x0,8
tick,0x7ffdf681f424,23016335,0,0x0,8
tick,0x7ffdf681f424,23018334,0,0x0,8
tick,0x7ffdf681f424,23026321,0,0x0,8
tick,0x7ffdf681f424,23034724,0,0x0,8
tick,0x7ffdf681f424,23036283,0,0x0,8
tick,0x7ffdf681f424,23038279,0,0x0,8
tick,0x7ffdf681f424,23040309,0,0x0,8
tick,0x7ffdf681f424,23042646,0,0x0,8
tick,0x7ffdf681f424,23044267,0,0x0,8
tick,0x7ffdf681f424,23046264,0,0x0,8
tick,0x7ffdf681f424,23048263,0,0x0,8
tick,0x7ffdf681f424,23050263,0,0x0,8
tick,0x7ffdf681f424,23052250,0,0x0,8
tick,0x7ffdf681f424,23054235,0,0x0,8
tick,0x7ffdf681f424,23056232,0,0x0,8
tick,0x7ffdf681f424,23058248,0,0x0,8
tick,0x7ffdf681f424,23060221,0,0x0,8
tick,0x7ffdf681f424,23062410,0,0x0,8
tick,0x7ffdf681f424,23064208,0,0x0,8
tick,0x7ffdf681f424,23066210,0,0x0,8
tick,0x7ffdf681f424,23068202,0,0x0,8
tick,0x7ffdf681f424,23081308,0,0x0,8
tick,0x7ffdf681f424,23083164,0,0x0,8
tick,0x7ffdf681f424,23085163,0,0x0,8
tick,0x7ffdf681f424,23087170,0,0x0,8
tick,0x7ffdf681f424,23089166,0,0x0,8
tick,0x7ffdf681f424,23091201,0,0x0,8
tick,0x7ffdf681f424,23093133,0,0x0,8
tick,0x7ffdf681f424,23095130,0,0x0,8
tick,0x7ffdf681f424,23097126,0,0x0,8
tick,0x7ffdf681f424,23099122,0,0x0,8
tick,0x7ffdf681f424,23101112,0,0x0,8
tick,0x7ffdf681f424,23103114,0,0x0,8
tick,0x7ffdf681f424,23105108,0,0x0,8
tick,0x7ffdf681f424,23107097,0,0x0,8
tick,0x7ffdf681f424,23109111,0,0x0,8
tick,0x7ffdf681f424,23111086,0,0x0,8
tick,0x7ffdf681f424,23113075,0,0x0,8
tick,0x7ffdf681f424,23115072,0,0x0,8
tick,0x7ffdf681f424,23117063,0,0x0,8
tick,0x7ffdf681f424,23119110,0,0x0,8
tick,0x7ffdf681f424,23121067,0,0x0,8
tick,0x7ffdf681f424,23123049,0,0x0,8
tick,0x7ffdf681f424,23125046,0,0x0,8
tick,0x7ffdf681f424,23127041,0,0x0,8
tick,0x7ffdf681f424,23129037,0,0x0,8
tick,0x7ffdf681f424,23131027,0,0x0,8
tick,0x7ffdf681f424,23133024,0,0x0,8
tick,0x7ffdf681f424,23135021,0,0x0,8
tick,0x7ffdf681f424,23137016,0,0x0,8
tick,0x7ffdf681f424,23139006,0,0x0,8
tick,0x7ffdf681f424,23141001,0,0x0,8
tick,0x7ffdf681f424,23143001,0,0x0,8
tick,0x7ffdf681f424,23144994,0,0x0,8
tick,0x7ffdf681f424,23147004,0,0x0,8
tick,0x7ffdf681f424,23148991,0,0x0,8
tick,0x7ffdf681f424,23166411,0,0x0,8
tick,0x7ffdf681f424,23166443,0,0x0,8
tick,0x7ffdf681f424,23167937,0,0x0,8
tick,0x7ffdf681f424,23169954,0,0x0,8
tick,0x7ffdf681f424,23174460,0,0x0,8
tick,0x7ffdf681f424,23175925,0,0x0,8
tick,0x7ffdf681f424,23181296,0,0x0,8
tick,0x7ffdf681f424,23190143,0,0x0,8
tick,0x7ffdf681f424,23191869,0,0x0,8
tick,0x7ffdf681f424,23193867,0,0x0,8
tick,0x7ffdf681f424,23195928,0,0x0,8
tick,0x7ffdf681f424,23197900,0,0x0,8
tick,0x7ffdf681f424,23199885,0,0x0,8
tick,0x7ffdf681f424,23202919,0,0x0,8
tick,0x7ffdf681f424,23204831,0,0x0,8
tick,0x7ffdf681f424,23206826,0,0x0,8
tick,0x7ffdf681f424,23208827,0,0x0,8
tick,0x7ffdf681f424,23210822,0,0x0,8
tick,0x7ffdf681f424,23212815,0,0x0,8
tick,0x7ffdf681f424,23214810,0,0x0,8
tick,0x7ffdf681f424,23216812,0,0x0,8
tick,0x7ffdf681f424,23218794,0,0x0,8
tick,0x7ffdf681f424,23220788,0,0x0,8
tick,0x7ffdf681f424,23222788,0,0x0,8
tick,0x7ffdf681f424,23224792,0,0x0,8
tick,0x7ffdf681f424,23226809,0,0x0,8
tick,0x7ffdf681f424,23228768,0,0x0,8
tick,0x7ffdf681f424,23231579,0,0x0,8
tick,0x7ffdf681f424,23238734,0,0x0,8
tick,0x7ffdf681f424,23244404,0,0x0,8
tick,0x7ffdf681f424,23245730,0,0x0,8
tick,0x7ffdf681f424,23247724,0,0x0,8
tick,0x7ffdf681f424,23249780,0,0x0,8
tick,0x7ffdf681f424,23251919,0,0x0,8
tick,0x7ffdf681f424,23253707,0,0x0,8
tick,0x7ffdf681f424,23255695,0,0x0,8
tick,0x7ffdf681f424,23257695,0,0x0,8
tick,0x7ffdf681f424,23259684,0,0x0,8
tick,0x7ffdf681f424,23261680,0,0x0,8
tick,0x7ffdf681f424,23263677,0,0x0,8
tick,0x7ffdf681f424,23265685,0,0x0,8
tick,0x7ffdf681f424,23267676,0,0x0,8
tick,0x7ffdf681f424,23269658,0,0x0,8
tick,0x7ffdf681f424,23271655,0,0x0,8
tick,0x7ffdf681f424,23273651,0,0x0,8
tick,0x7ffdf681f424,23275646,0,0x0,8
tick,0x7ffdf681f424,23277644,0,0x0,8
tick,0x7ffdf681f424,23279636,0,0x0,8
tick,0x7ffdf681f424,23281628,0,0x0,8
tick,0x7ffdf681f424,23283620,0,0x0,8
tick,0x7ffdf681f424,23285622,0,0x0,8
tick,0x7ffdf681f424,23287638,0,0x0,8
tick,0x7ffdf681f424,23289611,0,0x0,8
tick,0x7ffdf681f424,23291597,0,0x0,8
tick,0x7ffdf681f424,23293599,0,0x0,8
tick,0x7ffdf681f424,23295593,0,0x0,8
tick,0x7ffdf681f424,23297585,0,0x0,8
tick,0x7ffdf681f424,23300754,0,0x0,8
tick,0x7ffdf681f424,23302593,0,0x0,8
tick,0x7ffdf681f424,23304575,0,0x0,8
tick,0x7ffdf681f424,23306626,0,0x0,8
tick,0x7ffdf681f424,23309607,0,0x0,8
tick,0x7ffdf681f424,23318542,0,0x0,8
tick,0x7ffdf681f424,23320635,0,0x0,8
tick,0x7ffdf681f424,23322568,0,0x0,8
tick,0x7ffdf681f424,23324518,0,0x0,8
tick,0x7ffdf681f424,23326548,0,0x0,8
tick,0x7ffdf681f424,23328525,0,0x0,8
tick,0x7ffdf681f424,23330638,0,0x0,8
tick,0x7ffdf681f424,23332504,0,0x0,8
tick,0x7ffdf681f424,23334547,0,0x0,8
tick,0x7ffdf681f424,23336484,0,0x0,8
tick,0x7ffdf681f424,23338475,0,0x0,8
tick,0x7ffdf681f424,23355909,0,0x0,8
tick,0x7ffdf681f424,23357424,0,0x0,8
tick,0x7ffdf681f424,23359436,0,0x0,8
tick,0x7ffdf681f424,23361422,0,0x0,8
tick,0x7ffdf681f424,23363529,0,0x0,8
tick,0x7ffdf681f424,23365583,0,0x0,8
tick,0x7ffdf681f424,23367551,0,0x0,8
tick,0x7ffdf681f424,23369399,0,0x0,8
tick,0x7ffdf681f424,23371391,0,0x0,8
tick,0x7ffdf681f424,23373411,0,0x0,8
tick,0x7ffdf681f424,23375386,0,0x0,8
tick,0x7ffdf681f424,23377384,0,0x0,8
tick,0x7ffdf681f424,23379366,0,0x0,8
tick,0x7ffdf681f424,23381358,0,0x0,8
tick,0x7ffdf681f424,23383358,0,0x0,8
tick,0x7ffdf681f424,23385371,0,0x0,8
tick,0x7ffdf681f424,23387344,0,0x0,8
tick,0x7ffdf681f424,23389338,0,0x0,8
tick,0x7ffdf681f424,23391331,0,0x0,8
tick,0x7ffdf681f424,23393329,0,0x0,8
tick,0x7ffdf681f424,23395323,0,0x0,8
tick,0x7ffdf681f424,23397315,0,0x0,8
tick,0x7ffdf681f424,23399318,0,0x0,8
tick,0x7ffdf681f424,23401310,0,0x0,8
tick,0x7ffdf681f424,23403302,0,0x0,8
tick,0x7ffdf681f424,23405291,0,0x0,8
tick,0x7ffdf681f424,23407289,0,0x0,8
tick,0x7ffdf681f424,23409282,0,0x0,8
tick,0x7ffdf681f424,23411280,0,0x0,8
tick,0x7ffdf681f424,23413276,0,0x0,8
tick,0x7ffdf681f424,23415268,0,0x0,8
tick,0x7ffdf681f424,23417293,0,0x0,8
tick,0x7ffdf681f424,23420251,0,0x0,8
tick,0x7ffdf681f424,23432967,0,0x0,8
tick,0x7ffdf681f424,23434243,0,0x0,8
tick,0x7ffdf681f424,23436218,0,0x0,8
tick,0x7ffdf681f424,23438261,0,0x0,8
tick,0x7ffdf681f424,23440276,0,0x0,8
tick,0x7ffdf681f424,23442200,0,0x0,8
tick,0x7ffdf681f424,23444195,0,0x0,8
tick,0x7ffdf681f424,23458811,0,0x0,8
tick,0x7ffdf681f424,23458844,0,0x0,8
tick,0x7ffdf681f424,23460157,0,0x0,8
tick,0x7ffdf681f424,23462150,0,0x0,8
tick,0x7ffdf681f424,23464283,0,0x0,8
tick,0x7ffdf681f424,23466149,0,0x0,8
tick,0x7ffdf681f424,23468139,0,0x0,8
tick,0x7ffdf681f424,23470135,0,0x0,8
tick,0x7ffdf681f424,23472118,0,0x0,8
tick,0x7ffdf681f424,23474120,0,0x0,8
tick,0x7ffdf681f424,23476116,0,0x0,8
tick,0x7ffdf681f424,23478115,0,0x0,8
tick,0x7ffdf681f424,23480096,0,0x0,8
tick,0x7ffdf681f424,23482092,0,0x0,8
tick,0x7ffdf681f424,23484118,0,0x0,8
tick,0x7ffdf681f424,23486081,0,0x0,8
tick,0x7ffdf681f424,23488081,0,0x0,8
tick,0x7ffdf681f424,23490304,0,0x0,8
tick,0x7ffdf681f424,23492134,0,0x0,8
tick,0x7ffdf681f424,23494060,0,0x0,8
tick,0x7ffdf681f424,23496108,0,0x0,8
tick,0x7ffdf681f424,23498048,0,0x0,8
tick,0x7ffdf681f424,23500041,0,0x0,8
tick,0x7ffdf681f424,23502037,0,0x0,8
tick,0x7ffdf681f424,23504029,0,0x0,8
tick,0x7ffdf681f424,23506024,0,0x0,8
tick,0x7ffdf681f424,23508026,0,0x0,8
tick,0x7ffdf681f424,23510026,0,0x0,8
tick,0x7ffdf681f424,23512015,0,0x0,8
tick,0x7ffdf681f424,23514005,0,0x0,8
tick,0x7ffdf681f424,23516004,0,0x0,8
tick,0x7ffdf681f424,23518012,0,0x0,8
tick,0x7ffdf681f424,23519994,0,0x0,8
tick,0x7ffdf681f424,23521987,0,0x0,8
tick,0x7ffdf681f424,23523985,0,0x0,8
tick,0x7ffdf681f424,23525977,0,0x0,8
tick,0x7ffdf681f424,23527970,0,0x0,8
tick,0x7ffdf681f424,23529963,0,0x0,8
tick,0x7ffdf681f424,23531485,0,0x0,8
tick,0x7ffdf681f424,23544932,0,0x0,8
tick,0x7ffdf681f424,23546449,0,0x0,8
tick,0x7ffdf681f424,23548451,0,0x0,8
tick,0x7ffdf681f424,23550517,0,0x0,8
tick,0x7ffdf681f424,23552452,0,0x0,8
tick,0x7ffdf681f424,23554435,0,0x0,8
tick,0x7ffdf681f424,23556422,0,0x0,8
tick,0x7ffdf681f424,23558545,0,0x0,8
tick,0x7ffdf681f424,23561649,0,0x0,8
tick,0x7ffdf681f424,23563541,0,0x0,8
tick,0x7ffdf681f424,23566334,0,0x0,8
tick,0x7ffdf681f424,23571403,0,0x0,8
tick,0x7ffdf681f424,23576438,0,0x0,8
tick,0x7ffdf681f424,23578389,0,0x0,8
tick,0x7ffdf681f424,23580357,0,0x0,8
tick,0x7ffdf681f424,23583003,0,0x0,8
tick,0x7ffdf681f424,23584778,0,0x0,8
tick,0x7ffdf681f424,23586407,0,0x0,8
tick,0x7ffdf681f424,23588406,0,0x0,8
tick,0x7ffdf681f424,23590332,0,0x0,8
tick,0x7ffdf681f424,23592330,0,0x0,8
tick,0x7ffdf681f424,23594322,0,0x0,8
tick,0x7ffdf681f424,23596314,0,0x0,8
tick,0x7ffdf681f424,23598306,0,0x0,8
tick,0x7ffdf681f424,23600303,0,0x0,8
tick,0x7ffdf681f424,23602297,0,0x0,8
tick,0x7ffdf681f424,23604288,0,0x0,8
tick,0x7ffdf681f424,23606281,0,0x0,8
tick,0x7ffdf681f424,23608277,0,0x0,8
tick,0x7ffdf681f424,23610274,0,0x0,8
tick,0x7ffdf681f424,23612270,0,0x0,8
tick,0x7ffdf681f424,23614272,0,0x0,8
tick,0x7ffdf681f424,23616268,0,0x0,8
tick,0x7ffdf681f424,23618252,0,0x0,8
tick,0x7ffdf681f424,23620260,0,0x0,8
tick,0x7ffdf681f424,23622241,0,0x0,8
tick,0x7ffdf681f424,23624242,0,0x0,8
tick,0x7ffdf681f424,23626240,0,0x0,8
tick,0x7ffdf681f424,23628226,0,0x0,8
tick,0x7ffdf681f424,23630218,0,0x0,8
tick,0x7ffdf681f424,23632216,0,0x0,8
tick,0x7ffdf681f424,23634235,0,0x0,8
tick,0x7ffdf681f424,23636206,0,0x0,8
tick,0x7ffdf681f424,23638413,0,0x0,8
tick,0x7ffdf681f424,23641889,0,0x0,8
tick,0x7ffdf681f424,23651855,0,0x0,8
tick,0x7ffdf681f424,23653165,0,0x0,8
tick,0x7ffdf681f424,23655158,0,0x0,8
tick,0x7ffdf681f424,23657205,0,0x0,8
tick,0x7ffdf681f424,23659281,0,0x0,8
tick,0x7ffdf681f424,23661142,0,0x0,8
tick,0x7ffdf681f424,23663285,0,0x0,8
tick,0x7ffdf681f424,23665256,0,0x0,8
tick,0x7ffdf681f424,23670537,0,0x0,8
tick,0x7ffdf681f424,23678790,0,0x0,8
tick,0x7ffdf681f424,23680096,0,0x0,8
tick,0x7ffdf681f424,23682087,0,0x0,8
tick,0x7ffdf681f424,23684116,0,0x0,8
tick,0x7ffdf681f424,23686184,0,0x0,8
tick,0x7ffdf681f424,23688077,0,0x0,8
tick,0x7ffdf681f424,23690066,0,0x0,8
tick,0x7ffdf681f424,23692060,0,0x0,8
tick,0x7ffdf681f424,23694051,0,0x0,8
tick,0x7ffdf681f424,23696044,0,0x0,8
tick,0x7ffdf681f424,23698051,0,0x0,8
tick,0x7ffdf681f424,23700040,0,0x0,8
tick,0x7ffdf681f424,23702035,0,0x0,8
tick,0x7ffdf681f424,23704038,0,0x0,8
tick,0x7ffdf681f424,23706017,0,0x0,8
tick,0x7ffdf681f424,23708009,0,0x0,8
tick,0x7ffdf681f424,23710035,0,0x0,8
tick,0x7ffdf681f424,23712001,0,0x0,8
tick,0x7ffdf681f424,23713994,0,0x0,8
tick,0x7ffdf681f424,23716005,0,0x0,8
tick,0x7ffdf681f424,23717985,0,0x0,8
tick,0x7ffdf681f424,23719977,0,0x0,8
tick,0x7ffdf681f424,23722012,0,0x0,8
tick,0x7ffdf681f424,23723972,0,0x0,8
tick,0x7ffdf681f424,23725968,0,0x0,8
tick,0x7ffdf681f424,23727961,0,0x0,8
tick,0x7ffdf681f424,23729944,0,0x0,8
tick,0x7ffdf681f424,23731975,0,0x0,8
tick,0x7ffdf681f424,23733947,0,0x0,8
tick,0x7ffdf681f424,23735952,0,0x0,8
tick,0x7ffdf681f424,23737978,0,0x0,8
tick,0x7ffdf681f424,23739994,0,0x0,8
tick,0x7ffdf681f424,23742827,0,0x0,8
tick,0x7ffdf681f424,23743932,0,0x0,8
tick,0x7ffdf681f424,23745930,0,0x0,8
tick,0x7ffdf681f424,23748345,0,0x0,8
tick,0x7ffdf681f424,23759763,0,0x0,8
tick,0x7ffdf681f424,23760877,0,0x0,8
tick,0x7ffdf681f424,23762872,0,0x0,8
tick,0x7ffdf681f424,23764869,0,0x0,8
tick,0x7ffdf681f424,23766884,0,0x0,8
tick,0x7ffdf681f424,23768894,0,0x0,8
tick,0x7ffdf681f424,23770906,0,0x0,8
tick,0x7ffdf681f424,23772868,0,0x0,8
tick,0x7ffdf681f424,23774888,0,0x0,8
tick,0x7ffdf681f424,23776841,0,0x0,8
tick,0x7ffdf681f424,23778862,0,0x0,8
tick,0x7ffdf681f424,23780821,0,0x0,8
tick,0x7ffdf681f424,23782816,0,0x0,8
tick,0x7ffdf681f424,23784811,0,0x0,8
tick,0x7ffdf681f424,23786802,0,0x0,8
tick,0x7ffdf681f424,23788801,0,0x0,8
tick,0x7ffdf681f424,23790796,0,0x0,8
tick,0x7ffdf681f424,23792790,0,0x0,8
tick,0x7ffdf681f424,23794777,0,0x0,8
tick,0x7ffdf681f424,23796774,0,0x0,8
tick,0x7ffdf681f424,23798784,0,0x0,8
tick,0x7ffdf681f424,23800764,0,0x0,8
tick,0x7ffdf681f424,23802891,0,0x0,8
tick,0x7ffdf681f424,23809912,0,0x0,8
tick,0x7ffdf681f424,23817888,0,0x0,8
tick,0x7ffdf681f424,23819717,0,0x0,8
tick,0x7ffdf681f424,23821755,0,0x0,8
tick,0x7ffdf681f424,23823785,0,0x0,8
tick,0x7ffdf681f424,23825705,0,0x0,8
tick,0x7ffdf681f424,23827697,0,0x0,8
tick,0x7ffdf681f424,23829689,0,0x0,8
tick,0x7ffdf681f424,23831682,0,0x0,8
tick,0x7ffdf681f424,23833689,0,0x0,8
tick,0x7ffdf681f424,23835680,0,0x0,8
tick,0x7ffdf681f424,23837685,0,0x0,8
tick,0x7ffdf681f424,23851641,0,0x0,8
tick,0x7ffdf681f424,23853623,0,0x0,8
tick,0x7ffdf681f424,23855658,0,0x0,8
tick,0x7ffdf681f424,23857671,0,0x0,8
tick,0x7ffdf681f424,23859619,0,0x0,8
tick,0x7ffdf681f424,23861612,0,0x0,8
tick,0x7ffdf681f424,23863597,0,0x0,8
tick,0x7ffdf681f424,23865591,0,0x0,8
tick,0x7ffdf681f424,23867588,0,0x0,8
tick,0x7ffdf681f424,23869587,0,0x0,8
tick,0x7ffdf681f424,23871729,0,0x0,8
tick,0x7ffdf681f424,23873593,0,0x0,8
tick,0x7ffdf681f424,23876829,0,0x0,8
tick,0x7ffdf681f424,23878552,0,0x0,8
tick,0x7ffdf681f424,23880550,0,0x0,8
tick,0x7ffdf681f424,23882544,0,0x0,8
tick,0x7ffdf681f424,23884564,0,0x0,8
tick,0x7ffdf681f424,23886532,0,0x0,8
tick,0x7ffdf681f424,23888529,0,0x0,8
tick,0x7ffdf681f424,23890521,0,0x0,8
tick,0x7ffdf681f424,23892560,0,0x0,8
tick,0x7ffdf681f424,23894514,0,0x0,8
tick,0x7ffdf681f424,23896505,0,0x0,8
tick,0x7ffdf681f424,23898502,0,0x0,8
tick,0x7ffdf681f424,23900502,0,0x0,8
tick,0x7ffdf681f424,23902500,0,0x0,8
tick,0x7ffdf681f424,23904678,0,0x0,8
tick,0x7ffdf681f424,23907205,0,0x0,8
tick,0x7ffdf681f424,23908487,0,0x0,8
tick,0x7ffdf681f424,23910612,0,0x0,8
tick,0x7ffdf681f424,23912525,0,0x0,8
tick,0x7ffdf681f424,23923078,0,0x0,8
tick,0x7ffdf681f424,23923108,0,0x0,8
tick,0x7ffdf681f424,23924442,0,0x0,8
tick,0x7ffdf681f424,23926431,0,0x0,8
tick,0x7ffdf681f424,23928742,0,0x0,8
tick,0x7ffdf681f424,23941957,0,0x0,8
tick,0x7ffdf681f424,23943450,0,0x0,8
tick,0x7ffdf681f424,23945571,0,0x0,8
tick,0x7ffdf681f424,23947373,0,0x0,8
tick,0x7ffdf681f424,23949457,0,0x0,8
tick,0x7ffdf681f424,23951415,0,0x0,8
tick,0x7ffdf681f424,23953369,0,0x0,8
tick,0x7ffdf681f424,23955439,0,0x0,8
tick,0x7ffdf681f424,23957354,0,0x0,8
tick,0x7ffdf681f424,23959358,0,0x0,8
tick,0x7ffdf681f424,23961341,0,0x0,8
tick,0x7ffdf681f424,23963336,0,0x0,8
tick,0x7ffdf681f424,23965327,0,0x0,8
tick,0x7ffdf681f424,23967334,0,0x0,8
tick,0x7ffdf681f424,23969313,0,0x0,8
tick,0x7ffdf681f424,23971337,0,0x0,8
tick,0x7ffdf681f424,23973306,0,0x0,8
tick,0x7ffdf681f424,23975299,0,0x0,8
tick,0x7ffdf681f424,23977296,0,0x0,8
tick,0x7ffdf681f424,23979286,0,0x0,8
tick,0x7ffdf681f424,23981281,0,0x0,8
tick,0x7ffdf681f424,23983281,0,0x0,8
tick,0x7ffdf681f424,23985284,0,0x0,8
tick,0x7ffdf681f424,23987275,0,0x0,8
tick,0x7ffdf681f424,23989259,0,0x0,8
tick,0x7ffdf681f424,23991253,0,0x0,8
tick,0x7ffdf681f424,23993254,0,0x0,8
tick,0x7ffdf681f424,23995255,0,0x0,8
tick,0x7ffdf681f424,23997240,0,0x0,8
tick,0x7ffdf681f424,23999236,0,0x0,8
tick,0x7ffdf681f424,24001232,0,0x0,8
tick,0x7ffdf681f424,24003226,0,0x0,8
tick,0x7ffdf681f424,24005221,0,0x0,8
tick,0x7ffdf681f424,24009027,0,0x0,8
tick,0x7ffdf681f424,24009631,0,0x0,8
tick,0x7ffdf681f424,24023627,0,0x0,8
tick,0x7ffdf681f424,24025166,0,0x0,8
tick,0x7ffdf681f424,24027162,0,0x0,8
tick,0x7ffdf681f424,24029164,0,0x0,8
tick,0x7ffdf681f424,24031232,0,0x0,8
tick,0x7ffdf681f424,24033147,0,0x0,8
tick,0x7ffdf681f424,24035227,0,0x0,8
tick,0x7ffdf681f424,24037131,0,0x0,8
tick,0x7ffdf681f424,24039124,0,0x0,8
tick,0x7ffdf681f424,24041119,0,0x0,8
tick,0x7ffdf681f424,24043116,0,0x0,8
tick,0x7ffdf681f424,24045127,0,0x0,8
tick,0x7ffdf681f424,24047105,0,0x0,8
tick,0x7ffdf681f424,24049199,0,0x0,8
tick,0x7ffdf681f424,24053149,0,0x0,8
tick,0x7ffdf681f424,24062293,0,0x0,8
tick,0x7ffdf681f424,24064069,0,0x0,8
tick,0x7ffdf681f424,24066080,0,0x0,8
tick,0x7ffdf681f424,24068246,0,0x0,8
tick,0x7ffdf681f424,24070131,0,0x0,8
tick,0x7ffdf681f424,24072045,0,0x0,8
tick,0x7ffdf681f424,24074031,0,0x0,8
tick,0x7ffdf681f424,24076049,0,0x0,8
tick,0x7ffdf681f424,24078029,0,0x0,8
tick,0x7ffdf681f424,24080019,0,0x0,8
tick,0x7ffdf681f424,24082011,0,0x0,8
tick,0x7ffdf681f424,24084072,0,0x0,8
tick,0x7ffdf681f424,24086038,0,0x0,8
tick,0x7ffdf681f424,24088004,0,0x0,8
tick,0x7ffdf681f424,24089994,0,0x0,8
tick,0x7ffdf681f424,24092023,0,0x0,8
tick,0x7ffdf681f424,24094806,0,0x0,8
tick,0x7ffdf681f424,24096115,0,0x0,8
tick,0x7ffdf681f424,24098423,0,0x0,8
tick,0x7ffdf681f424,24100905,0,0x0,8
tick,0x7ffdf681f424,24112382,0,0x0,8
tick,0x7ffdf681f424,24113928,0,0x0,8
tick,0x7ffdf681f424,24115968,0,0x0,8
tick,0x7ffdf681f424,24117946,0,0x0,8
tick,0x7ffdf681f424,24119943,0,0x0,8
tick,0x7ffdf681f424,24122115,0,0x0,8
tick,0x7ffdf681f424,24123976,0,0x0,8
tick,0x7ffdf681f424,24125980,0,0x0,8
tick,0x7ffdf681f424,24127889,0,0x0,8
tick,0x7ffdf681f424,24129887,0,0x0,8
tick,0x7ffdf681f424,24131892,0,0x0,8
tick,0x7ffdf681f424,24133874,0,0x0,8
tick,0x7ffdf681f424,24135874,0,0x0,8
tick,0x7ffdf681f424,24137881,0,0x0,8
tick,0x7ffdf681f424,24139856,0,0x0,8
tick,0x7ffdf681f424,24141850,0,0x0,8
tick,0x7ffdf681f424,24143857,0,0x0,8
tick,0x7ffdf681f424,24145880,0,0x0,8
tick,0x7ffdf681f424,24147837,0,0x0,8
tick,0x7ffdf681f424,24149834,0,0x0,8
tick,0x7ffdf681f424,24151829,0,0x0,8
tick,0x7ffdf681f424,24153851,0,0x0,8
tick,0x7ffdf681f424,24155813,0,0x0,8
tick,0x7ffdf681f424,24158212,0,0x0,8
tick,0x7ffdf681f424,24160086,0,0x0,8
tick,0x7ffdf681f424,24171781,0,0x0,8
tick,0x7ffdf681f424,24173943,0,0x0,8
tick,0x7ffdf681f424,24175769,0,0x0,8
tick,0x7ffdf681f424,24177779,0,0x0,8
tick,0x7ffdf681f424,24180012,0,0x0,8
tick,0x7ffdf681f424,24181762,0,0x0,8
tick,0x7ffdf681f424,24183741,0,0x0,8
tick,0x7ffdf681f424,24185741,0,0x0,8
tick,0x7ffdf681f424,24187733,0,0x0,8
tick,0x7ffdf681f424,24189751,0,0x0,8
tick,0x7ffdf681f424,24191799,0,0x0,8
tick,0x7ffdf681f424,24206086,0,0x0,8
tick,0x7ffdf681f424,24207679,0,0x0,8
tick,0x7ffdf681f424,24209675,0,0x0,8
tick,0x7ffdf681f424,24211769,0,0x0,8
tick,0x7ffdf681f424,24213718,0,0x0,8
tick,0x7ffdf681f424,24215733,0,0x0,8
tick,0x7ffdf681f424,24217657,0,0x0,8
tick,0x7ffdf681f424,24219659,0,0x0,8
tick,0x7ffdf681f424,24221662,0,0x0,8
tick,0x7ffdf681f424,24223636,0,0x0,8
tick,0x7ffdf681f424,24225654,0,0x0,8
tick,0x7ffdf681f424,24227632,0,0x0,8
tick,0x7ffdf681f424,24229619,0,0x0,8
tick,0x7ffdf681f424,24231837,0,0x0,8
tick,0x7ffdf681f424,24233606,0,0x0,8
tick,0x7ffdf681f424,24235601,0,0x0,8
tick,0x7ffdf681f424,24237595,0,0x0,8
tick,0x7ffdf681f424,24239604,0,0x0,8
tick,0x7ffdf681f424,24241587,0,0x0,8
tick,0x7ffdf681f424,24243581,0,0x0,8
tick,0x7ffdf681f424,24245574,0,0x0,8
tick,0x7ffdf681f424,24247568,0,0x0,8
tick,0x7ffdf681f424,24249563,0,0x0,8
tick,0x7ffdf681f424,24251556,0,0x0,8
tick,0x7ffdf681f424,24253556,0,0x0,8
tick,0x7ffdf681f424,24255591,0,0x0,8
tick,0x7ffdf681f424,24257545,0,0x0,8
tick,0x7ffdf681f424,24259542,0,0x0,8
tick,0x7ffdf681f424,24261537,0,0x0,8
tick,0x7ffdf681f424,24263529,0,0x0,8
tick,0x7ffdf681f424,24265738,0,0x0,8
tick,0x7ffdf681f424,24268248,0,0x0,8
tick,0x7ffdf681f424,24278937,0,0x0,8
tick,0x7ffdf681f424,24280489,0,0x0,8
tick,0x7ffdf681f424,24282497,0,0x0,8
tick,0x7ffdf681f424,24284578,0,0x0,8
tick,0x7ffdf681f424,24286796,0,0x0,8
tick,0x7ffdf681f424,24288466,0,0x0,8
tick,0x7ffdf681f424,24290516,0,0x0,8
tick,0x7ffdf681f424,24292817,0,0x0,8
tick,0x7ffdf681f424,24294451,0,0x0,8
tick,0x7ffdf681f424,24296462,0,0x0,8
tick,0x7ffdf681f424,24298436,0,0x0,8
tick,0x7ffdf681f424,24300436,0,0x0,8
tick,0x7ffdf681f424,24302430,0,0x0,8
tick,0x7ffdf681f424,24304506,0,0x0,8
tick,0x7ffdf681f424,24319020,0,0x0,8
tick,0x7ffdf681f424,24320380,0,0x0,8
tick,0x7ffdf681f424,24322371,0,0x0,8
tick,0x7ffdf681f424,24324383,0,0x0,8
tick,0x7ffdf681f424,24326363,0,0x0,8
tick,0x7ffdf681f424,24328361,0,0x0,8
tick,0x7ffdf681f424,24330392,0,0x0,8
tick,0x7ffdf681f424,24332805,0,0x0,8
tick,0x7ffdf681f424,24334724,0,0x0,8
tick,0x7ffdf681f424,24336446,0,0x0,8
tick,0x7ffdf681f424,24338330,0,0x0,8
tick,0x7ffdf681f424,24340318,0,0x0,8
tick,0x7ffdf681f424,24342318,0,0x0,8
tick,0x7ffdf681f424,24344312,0,0x0,8
tick,0x7ffdf681f424,24346324,0,0x0,8
tick,0x7ffdf681f424,24348303,0,0x0,8
tick,0x7ffdf681f424,24351210,0,0x0,8
tick,0x7ffdf681f424,24352310,0,0x0,8
tick,0x7ffdf681f424,24354285,0,0x0,8
tick,0x7ffdf681f424,24356280,0,0x0,8
tick,0x7ffdf681f424,24358285,0,0x0,8
tick,0x7ffdf681f424,24360274,0,0x0,8
tick,0x7ffdf681f424,24362267,0,0x0,8
tick,0x7ffdf681f424,24364257,0,0x0,8
tick,0x7ffdf681f424,24366251,0,0x0,8
tick,0x7ffdf681f424,24368245,0,0x0,8
tick,0x7ffdf681f424,24370240,0,0x0,8
tick,0x7ffdf681f424,24372696,0,0x0,8
tick,0x7ffdf681f424,24374576,0,0x0,8
tick,0x7ffdf681f424,24386607,0,0x0,8
tick,0x7ffdf681f424,24388198,0,0x0,8
tick,0x7ffdf681f424,24390192,0,0x0,8
tick,0x7ffdf681f424,24392466,0,0x0,8
tick,0x7ffdf681f424,24394219,0,0x0,8
tick,0x7ffdf681f424,24396173,0,0x0,8
tick,0x7ffdf681f424,24398178,0,0x0,8
tick,0x7ffdf681f424,24400162,0,0x0,8
tick,0x7ffdf681f424,24402156,0,0x0,8
tick,0x7ffdf681f424,24404157,0,0x0,8
tick,0x7ffdf681f424,24406146,0,0x0,8
tick,0x7ffdf681f424,24408193,0,0x0,8
tick,0x7ffdf681f424,24410138,0,0x0,8
tick,0x7ffdf681f424,24417383,0,0x0,8
tick,0x7ffdf681f424,24420762,0,0x0,8
tick,0x7ffdf681f424,24427268,0,0x0,8
tick,0x7ffdf681f424,24429083,0,0x0,8
tick,0x7ffdf681f424,24431082,0,0x0,8
tick,0x7ffdf681f424,24433157,0,0x0,8
tick,0x7ffdf681f424,24435104,0,0x0,8
tick,0x7ffdf681f424,24437078,0,0x0,8
tick,0x7ffdf681f424,24439061,0,0x0,8
tick,0x7ffdf681f424,24441049,0,0x0,8
tick,0x7ffdf681f424,24443045,0,0x0,8
tick,0x7ffdf681f424,24445051,0,0x0,8
tick,0x7ffdf681f424,24447034,0,0x0,8
tick,0x7ffdf681f424,24449029,0,0x0,8
tick,0x7ffdf681f424,24451025,0,0x0,8
tick,0x7ffdf681f424,24453025,0,0x0,8
tick,0x7ffdf681f424,24455019,0,0x0,8
tick,0x7ffdf681f424,24457016,0,0x0,8
tick,0x7ffdf681f424,24459007,0,0x0,8
tick,0x7ffdf681f424,24461043,0,0x0,8
tick,0x7ffdf681f424,24462996,0,0x0,8
tick,0x7ffdf681f424,24464997,0,0x0,8
tick,0x7ffdf681f424,24466985,0,0x0,8
tick,0x7ffdf681f424,24469345,0,0x0,8
tick,0x7ffdf681f424,24484034,0,0x0,8
tick,0x7ffdf681f424,24485935,0,0x0,8
tick,0x7ffdf681f424,24487930,0,0x0,8
tick,0x7ffdf681f424,24489927,0,0x0,8
tick,0x7ffdf681f424,24492068,0,0x0,8
tick,0x7ffdf681f424,24494026,0,0x0,8
tick,0x7ffdf681f424,24495936,0,0x0,8
tick,0x7ffdf681f424,24497902,0,0x0,8
tick,0x7ffdf681f424,24499897,0,0x0,8
tick,0x7ffdf681f424,24501897,0,0x0,8
tick,0x7ffdf681f424,24503891,0,0x0,8
tick,0x7ffdf681f424,24505887,0,0x0,8
tick,0x7ffdf681f424,24507871,0,0x0,8
tick,0x7ffdf681f424,24509872,0,0x0,8
tick,0x7ffdf681f424,24511863,0,0x0,8
tick,0x7ffdf681f424,24513863,0,0x0,8
tick,0x7ffdf681f424,24515858,0,0x0,8
tick,0x7ffdf681f424,24517844,0,0x0,8
tick,0x7ffdf681f424,24519841,0,0x0,8
tick,0x7ffdf681f424,24521838,0,0x0,8
tick,0x7ffdf681f424,24523831,0,0x0,8
tick,0x7ffdf681f424,24525824,0,0x0,8
tick,0x7ffdf681f424,24527826,0,0x0,8
tick,0x7ffdf681f424,24529814,0,0x0,8
tick,0x7ffdf681f424,24531854,0,0x0,8
tick,0x7ffdf681f424,24547925,0,0x0,8
tick,0x7ffdf681f424,24548074,0,0x0,8
tick,0x7ffdf681f424,24549780,0,0x0,8
tick,0x7ffdf681f424,24552647,0,0x0,8
tick,0x7ffdf681f424,24553877,0,0x0,8
tick,0x7ffdf681f424,24557027,0,0x0,8
tick,0x7ffdf681f424,24558831,0,0x0,8
tick,0x7ffdf681f424,24560749,0,0x0,8
tick,0x7ffdf681f424,24570780,0,0x0,8
tick,0x7ffdf681f424,24572704,0,0x0,8
tick,0x7ffdf681f424,24574712,0,0x0,8
tick,0x7ffdf681f424,24576726,0,0x0,8
tick,0x7ffdf681f424,24579072,0,0x0,8
tick,0x7ffdf681f424,24580695,0,0x0,8
tick,0x7ffdf681f424,24582680,0,0x0,8
tick,0x7ffdf681f424,24584683,0,0x0,8
tick,0x7ffdf681f424,24586662,0,0x0,8
tick,0x7ffdf681f424,24588701,0,0x0,8
tick,0x7ffdf681f424,24590658,0,0x0,8
tick,0x7ffdf681f424,24592735,0,0x0,8
tick,0x7ffdf681f424,24594643,0,0x0,8
tick,0x7ffdf681f424,24596635,0,0x0,8
tick,0x7ffdf681f424,24598635,0,0x0,8
tick,0x7ffdf681f424,24600631,0,0x0,8
tick,0x7ffdf681f424,24602629,0,0x0,8
tick,0x7ffdf681f424,24604617,0,0x0,8
tick,0x7ffdf681f424,24606645,0,0x0,8
tick,0x7ffdf681f424,24608606,0,0x0,8
tick,0x7ffdf681f424,24610598,0,0x0,8
tick,0x7ffdf681f424,24612604,0,0x0,8
tick,0x7ffdf681f424,24614593,0,0x0,8
tick,0x7ffdf681f424,24616649,0,0x0,8
tick,0x7ffdf681f424,24630319,0,0x0,8
tick,0x7ffdf681f424,24631545,0,0x0,8
tick,0x7ffdf681f424,24633548,0,0x0,8
tick,0x7ffdf681f424,24635578,0,0x0,8
tick,0x7ffdf681f424,24637544,0,0x0,8
tick,0x7ffdf681f424,24639575,0,0x0,8
tick,0x7ffdf681f424,24641579,0,0x0,8
tick,0x7ffdf681f424,24643560,0,0x0,8
tick,0x7ffdf681f424,24645559,0,0x0,8
tick,0x7ffdf681f424,24647551,0,0x0,8
tick,0x7ffdf681f424,24649546,0,0x0,8
tick,0x7ffdf681f424,24651555,0,0x0,8
tick,0x7ffdf681f424,24653538,0,0x0,8
tick,0x7ffdf681f424,24655535,0,0x0,8
tick,0x7ffdf681f424,24657526,0,0x0,8
tick,0x7ffdf681f424,24659520,0,0x0,8
tick,0x7ffdf681f424,24661632,0,0x0,8
tick,0x7ffdf681f424,24663514,0,0x0,8
tick,0x7ffdf681f424,24665505,0,0x0,8
tick,0x7ffdf681f424,24667508,0,0x0,8
tick,0x7ffdf681f424,24669501,0,0x0,8
tick,0x7ffdf681f424,24672175,0,0x0,8
tick,0x7ffdf681f424,24676216,0,0x0,8
tick,0x7ffdf681f424,24687461,0,0x0,8
tick,0x7ffdf681f424,24689446,0,0x0,8
tick,0x7ffdf681f424,24692917,0,0x0,8
tick,0x7ffdf681f424,24693490,0,0x0,8
tick,0x7ffdf681f424,24695582,0,0x0,8
tick,0x7ffdf681f424,24697420,0,0x0,8
tick,0x7ffdf681f424,24699417,0,0x0,8
tick,0x7ffdf681f424,24701465,0,0x0,8
tick,0x7ffdf681f424,24703405,0,0x0,8
tick,0x7ffdf681f424,24705417,0,0x0,8
tick,0x7ffdf681f424,24707408,0,0x0,8
tick,0x7ffdf681f424,24709471,0,0x0,8
tick,0x7ffdf681f424,24711419,0,0x0,8
tick,0x7ffdf681f424,24714900,0,0x0,8
tick,0x7ffdf681f424,24716374,0,0x0,8
tick,0x7ffdf681f424,24718404,0,0x0,8
tick,0x7ffdf681f424,24720364,0,0x0,8
tick,0x7ffdf681f424,24722357,0,0x0,8
tick,0x7ffdf681f424,24724347,0,0x0,8
tick,0x7ffdf681f424,24726345,0,0x0,8
tick,0x7ffdf681f424,24728413,0,0x0,8
tick,0x7ffdf681f424,24730329,0,0x0,8
tick,0x7ffdf681f424,24732385,0,0x0,8
tick,0x7ffdf681f424,24734359,0,0x0,8
tick,0x7ffdf681f424,24736319,0,0x0,8
tick,0x7ffdf681f424,24738318,0,0x0,8
tick,0x7ffdf681f424,24739851,0,0x0,8
tick,0x7ffdf681f424,24741862,0,0x0,8
tick,0x7ffdf681f424,24743835,0,0x0,8
tick,0x7ffdf681f424,24745823,0,0x0,8
tick,0x7ffdf681f424,24747819,0,0x0,8
tick,0x7ffdf681f424,24749816,0,0x0,8
tick,0x7ffdf681f424,24751958,0,0x0,8
tick,0x7ffdf681f424,24753854,0,0x0,8
tick,0x7ffdf681f424,24755883,0,0x0,8
tick,0x7ffdf681f424,24757990,0,0x0,8
tick,0x7ffdf681f424,24759890,0,0x0,8
tick,0x7ffdf681f424,24761851,0,0x0,8
tick,0x7ffdf681f424,24763785,0,0x0,8
tick,0x7ffdf681f424,24765800,0,0x0,8
tick,0x7ffdf681f424,24767771,0,0x0,8
tick,0x7ffdf681f424,24769764,0,0x0,8
tick,0x7ffdf681f424,24783452,0,0x0,8
tick,0x7ffdf681f424,24784728,0,0x0,8
tick,0x7ffdf681f424,24786719,0,0x0,8
tick,0x7ffdf681f424,24788846,0,0x0,8
tick,0x7ffdf681f424,24790738,0,0x0,8
tick,0x7ffdf681f424,24792755,0,0x0,8
tick,0x7ffdf681f424,24794695,0,0x0,8
tick,0x7ffdf681f424,24796684,0,0x0,8
tick,0x7ffdf681f424,24798681,0,0x0,8
tick,0x7ffdf681f424,24801086,0,0x0,8
tick,0x7ffdf681f424,24802799,0,0x0,8
tick,0x7ffdf681f424,24815174,0,0x0,8
tick,0x7ffdf681f424,24816640,0,0x0,8
tick,0x7ffdf681f424,24818638,0,0x0,8
tick,0x7ffdf681f424,24820629,0,0x0,8
tick,0x7ffdf681f424,24822622,0,0x0,8
tick,0x7ffdf681f424,24824619,0,0x0,8
tick,0x7ffdf681f424,24826643,0,0x0,8
tick,0x7ffdf681f424,24828647,0,0x0,8
tick,0x7ffdf681f424,24830720,0,0x0,8
tick,0x7ffdf681f424,24832656,0,0x0,8
tick,0x7ffdf681f424,24834597,0,0x0,8
tick,0x7ffdf681f424,24836594,0,0x0,8
tick,0x7ffdf681f424,24838578,0,0x0,8
tick,0x7ffdf681f424,24840591,0,0x0,8
tick,0x7ffdf681f424,24842565,0,0x0,8
tick,0x7ffdf681f424,24844561,0,0x0,8
tick,0x7ffdf681f424,24846560,0,0x0,8
tick,0x7ffdf681f424,24848549,0,0x0,8
tick,0x7ffdf681f424,24850544,0,0x0,8
tick,0x7ffdf681f424,24852563,0,0x0,8
tick,0x7ffdf681f424,24854540,0,0x0,8
tick,0x7ffdf681f424,24856788,0,0x0,8
tick,0x7ffdf681f424,24858701,0,0x0,8
tick,0x7ffdf681f424,24860863,0,0x0,8
tick,0x7ffdf681f424,24862807,0,0x0,8
tick,0x7ffdf681f424,24871338,0,0x0,8
tick,0x7ffdf681f424,24872490,0,0x0,8
tick,0x7ffdf681f424,24874493,0,0x0,8
tick,0x7ffdf681f424,24876544,0,0x0,8
tick,0x7ffdf681f424,24878494,0,0x0,8
tick,0x7ffdf681f424,24880521,0,0x0,8
tick,0x7ffdf681f424,24882460,0,0x0,8
tick,0x7ffdf681f424,24884456,0,0x0,8
tick,0x7ffdf681f424,24886449,0,0x0,8
tick,0x7ffdf681f424,24888444,0,0x0,8
tick,0x7ffdf681f424,24890437,0,0x0,8
tick,0x7ffdf681f424,24892441,0,0x0,8
tick,0x7ffdf681f424,24894484,0,0x0,8
tick,0x7ffdf681f424,24896425,0,0x0,8
tick,0x7ffdf681f424,24898447,0,0x0,8
tick,0x7ffdf681f424,24902721,0,0x0,8
tick,0x7ffdf681f424,24904465,0,0x0,8
tick,0x7ffdf681f424,24906396,0,0x0,8
tick,0x7ffdf681f424,24908399,0,0x0,8
tick,0x7ffdf681f424,24910422,0,0x0,8
tick,0x7ffdf681f424,24912425,0,0x0,8
tick,0x7ffdf681f424,24914379,0,0x0,8
tick,0x7ffdf681f424,24916378,0,0x0,8
tick,0x7ffdf681f424,24918370,0,0x0,8
tick,0x7ffdf681f424,24920366,0,0x0,8
tick,0x7ffdf681f424,24922356,0,0x0,8
tick,0x7ffdf681f424,24924348,0,0x0,8
tick,0x7ffdf681f424,24926349,0,0x0,8
tick,0x7ffdf681f424,24941119,0,0x0,8
tick,0x7ffdf681f424,24942328,0,0x0,8
tick,0x7ffdf681f424,24944298,0,0x0,8
tick,0x7ffdf681f424,24946572,0,0x0,8
tick,0x7ffdf681f424,24948508,0,0x0,8
tick,0x7ffdf681f424,24950353,0,0x0,8
tick,0x7ffdf681f424,24952286,0,0x0,8
tick,0x7ffdf681f424,24955602,0,0x0,8
tick,0x7ffdf681f424,24957912,0,0x0,8
tick,0x7ffdf681f424,24969379,0,0x0,8
tick,0x7ffdf681f424,24971234,0,0x0,8
tick,0x7ffdf681f424,24973248,0,0x0,8
tick,0x7ffdf681f424,24975347,0,0x0,8
tick,0x7ffdf681f424,24977223,0,0x0,8
tick,0x7ffdf681f424,24979226,0,0x0,8
tick,0x7ffdf681f424,24981202,0,0x0,8
tick,0x7ffdf681f424,24983191,0,0x0,8
tick,0x7ffdf681f424,24985187,0,0x0,8
tick,0x7ffdf681f424,24987197,0,0x0,8
tick,0x7ffdf681f424,24989178,0,0x0,8
tick,0x7ffdf681f424,24991172,0,0x0,8
tick,0x7ffdf681f424,24993178,0,0x0,8
tick,0x7ffdf681f424,24995160,0,0x0,8
tick,0x7ffdf681f424,24997156,0,0x0,8
tick,0x7ffdf681f424,24999148,0,0x0,8
tick,0x7ffdf681f424,25001140,0,0x0,8
tick,0x7ffdf681f424,25003140,0,0x0,8
tick,0x7ffdf681f424,25005137,0,0x0,8
tick,0x7ffdf681f424,25007160,0,0x0,8
tick,0x7ffdf681f424,25009120,0,0x0,8
tick,0x7ffdf681f424,25011117,0,0x0,8
tick,0x7ffdf681f424,25013112,0,0x0,8
tick,0x7ffdf681f424,25015136,0,0x0,8
tick,0x7ffdf681f424,25017101,0,0x0,8
tick,0x7ffdf681f424,25019099,0,0x0,8
tick,0x7ffdf681f424,25021087,0,0x0,8
tick,0x7ffdf681f424,25023085,0,0x0,8
tick,0x7ffdf681f424,25025076,0,0x0,8
tick,0x7ffdf681f424,25039039,0,0x0,8
tick,0x7ffdf681f424,25040618,0,0x0,8
tick,0x7ffdf681f424,25045332,0,0x0,8
tick,0x7ffdf681f424,25046623,0,0x0,8
tick,0x7ffdf681f424,25048558,0,0x0,8
tick,0x7ffdf681f424,25050557,0,0x0,8
tick,0x7ffdf681f424,25052561,0,0x0,8
tick,0x7ffdf681f424,25054587,0,0x0,8
tick,0x7ffdf681f424,25056542,0,0x0,8
tick,0x7ffdf681f424,25058536,0,0x0,8
tick,0x7ffdf681f424,25060531,0,0x0,8
tick,0x7ffdf681f424,25062531,0,0x0,8
tick,0x7ffdf681f424,25064613,0,0x0,8
tick,0x7ffdf681f424,25066517,0,0x0,8
tick,0x7ffdf681f424,25068506,0,0x0,8
tick,0x7ffdf681f424,25070506,0,0x0,8
tick,0x7ffdf681f424,25072499,0,0x0,8
tick,0x7ffdf681f424,25074519,0,0x0,8
tick,0x7ffdf681f424,25076506,0,0x0,8
tick,0x7ffdf681f424,25078481,0,0x0,8
tick,0x7ffdf681f424,25080476,0,0x0,8
tick,0x7ffdf681f424,25082488,0,0x0,8
tick,0x7ffdf681f424,25084470,0,0x0,8
tick,0x7ffdf681f424,25086462,0,0x0,8
tick,0x7ffdf681f424,25088454,0,0x0,8
tick,0x7ffdf681f424,25090449,0,0x0,8
tick,0x7ffdf681f424,25096015,0,0x0,8
tick,0x7ffdf681f424,25098456,0,0x0,8
tick,0x7ffdf681f424,25099531,0,0x0,8
tick,0x7ffdf681f424,25109759,0,0x0,8
tick,0x7ffdf681f424,25111412,0,0x0,8
tick,0x7ffdf681f424,25113397,0,0x0,8
tick,0x7ffdf681f424,25115425,0,0x0,8
tick,0x7ffdf681f424,25117419,0,0x0,8
tick,0x7ffdf681f424,25119417,0,0x0,8
tick,0x7ffdf681f424,25121397,0,0x0,8
tick,0x7ffdf681f424,25123405,0,0x0,8
tick,0x7ffdf681f424,25125366,0,0x0,8
tick,0x7ffdf681f424,25127363,0,0x0,8
tick,0x7ffdf681f424,25129347,0,0x0,8
tick,0x7ffdf681f424,25131359,0,0x0,8
tick,0x7ffdf681f424,25133338,0,0x0,8
tick,0x7ffdf681f424,25135367,0,0x0,8
tick,0x7ffdf681f424,25137332,0,0x0,8
tick,0x7ffdf681f424,25139345,0,0x0,8
tick,0x7ffdf681f424,25140876,0,0x0,8
tick,0x7ffdf681f424,25142858,0,0x0,8
tick,0x7ffdf681f424,25144839,0,0x0,8
tick,0x7ffdf681f424,25159816,0,0x0,8
tick,0x7ffdf681f424,25161797,0,0x0,8
tick,0x7ffdf681f424,25163885,0,0x0,8
tick,0x7ffdf681f424,25165900,0,0x0,8
tick,0x7ffdf681f424,25167805,0,0x0,8
tick,0x7ffdf681f424,25169774,0,0x0,8
tick,0x7ffdf681f424,25171772,0,0x0,8
tick,0x7ffdf681f424,25173762,0,0x0,8
tick,0x7ffdf681f424,25175757,0,0x0,8
tick,0x7ffdf681f424,25177753,0,0x0,8
tick,0x7ffdf681f424,25179810,0,0x0,8
tick,0x7ffdf681f424,25181746,0,0x0,8
tick,0x7ffdf681f424,25183742,0,0x0,8
tick,0x7ffdf681f424,25185732,0,0x0,8
tick,0x7ffdf681f424,25187724,0,0x0,8
tick,0x7ffdf681f424,25189713,0,0x0,8
tick,0x7ffdf681f424,25191780,0,0x0,8
tick,0x7ffdf681f424,25193710,0,0x0,8
tick,0x7ffdf681f424,25195698,0,0x0,8
tick,0x7ffdf681f424,25197689,0,0x0,8
tick,0x7ffdf681f424,25199686,0,0x0,8
tick,0x7ffdf681f424,25201683,0,0x0,8
tick,0x7ffdf681f424,25203685,0,0x0,8
tick,0x7ffdf681f424,25205673,0,0x0,8
tick,0x7ffdf681f424,25207666,0,0x0,8
tick,0x7ffdf681f424,25209664,0,0x0,8
tick,0x7ffdf681f424,25211674,0,0x0,8
tick,0x7ffdf681f424,25213654,0,0x0,8
tick,0x7ffdf681f424,25215692,0,0x0,8
tick,0x7ffdf681f424,25217874,0,0x0,8
tick,0x7ffdf681f424,25219927,0,0x0,8
tick,0x7ffdf681f424,25221679,0,0x0,8
tick,0x7ffdf681f424,25223653,0,0x0,8
tick,0x7ffdf681f424,25225626,0,0x0,8
tick,0x7ffdf681f424,25227679,0,0x0,8
tick,0x7ffdf681f424,25235495,0,0x0,8
tick,0x7ffdf681f424,25236590,0,0x0,8
tick,0x7ffdf681f424,25238678,0,0x0,8
tick,0x7ffdf681f424,25240591,0,0x0,8
tick,0x7ffdf681f424,25257334,0,0x0,8
tick,0x7ffdf681f424,25259416,0,0x0,8
tick,0x7ffdf681f424,25261044,0,0x0,8
tick,0x7ffdf681f424,25263186,0,0x0,8
tick,0x7ffdf681f424,25265827,0,0x0,8
tick,0x7ffdf681f424,25267069,0,0x0,8
tick,0x7ffdf681f424,25269016,0,0x0,8
tick,0x7ffdf681f424,25271014,0,0x0,8
tick,0x7ffdf681f424,25273006,0,0x0,8
tick,0x7ffdf681f424,25275007,0,0x0,8
tick,0x7ffdf681f424,25276995,0,0x0,8
tick,0x7ffdf681f424,25278993,0,0x0,8
tick,0x7ffdf681f424,25280980,0,0x0,8
tick,0x7ffdf681f424,25282975,0,0x0,8
tick,0x7ffdf681f424,25284992,0,0x0,8
tick,0x7ffdf681f424,25286965,0,0x0,8
tick,0x7ffdf681f424,25289007,0,0x0,8
tick,0x7ffdf681f424,25290954,0,0x0,8
tick,0x7ffdf681f424,25292974,0,0x0,8
tick,0x7ffdf681f424,25295010,0,0x0,8
tick,0x7ffdf681f424,25296936,0,0x0,8
tick,0x7ffdf681f424,25298936,0,0x0,8
tick,0x7ffdf681f424,25300934,0,0x0,8
tick,0x7ffdf681f424,25303185,0,0x0,8
tick,0x7ffdf681f424,25304919,0,0x0,8
tick,0x7ffdf681f424,25306911,0,0x0,8
tick,0x7ffdf681f424,25308908,0,0x0,8
tick,0x7ffdf681f424,25310904,0,0x0,8
tick,0x7ffdf681f424,25312903,0,0x0,8
tick,0x7ffdf681f424,25314887,0,0x0,8
tick,0x7ffdf681f424,25316892,0,0x0,8
tick,0x7ffdf681f424,25318888,0,0x0,8
tick,0x7ffdf681f424,25320875,0,0x0,8
tick,0x7ffdf681f424,25322872,0,0x0,8
tick,0x7ffdf681f424,25324868,0,0x0,8
tick,0x7ffdf681f424,25326901,0,0x0,8
tick,0x7ffdf681f424,25328865,0,0x0,8
tick,0x7ffdf681f424,25330846,0,0x0,8
tick,0x7ffdf681f424,25332851,0,0x0,8
tick,0x7ffdf681f424,25334886,0,0x0,8
tick,0x7ffdf681f424,25336842,0,0x0,8
tick,0x7ffdf681f424,25338827,0,0x0,8
tick,0x7ffdf681f424,25342566,0,0x0,8
tick,0x7ffdf681f424,25344396,0,0x0,8
tick,0x7ffdf681f424,25347750,0,0x0,8
tick,0x7ffdf681f424,25355898,0,0x0,8
tick,0x7ffdf681f424,25357294,0,0x0,8
tick,0x7ffdf681f424,25361668,0,0x0,8
tick,0x7ffdf681f424,25364080,0,0x0,8
tick,0x7ffdf681f424,25374327,0,0x0,8
tick,0x7ffdf681f424,25376302,0,0x0,8
tick,0x7ffdf681f424,25378273,0,0x0,8
tick,0x7ffdf681f424,25380245,0,0x0,8
tick,0x7ffdf681f424,25382713,0,0x0,8
tick,0x7ffdf681f424,25384217,0,0x0,8
tick,0x7ffdf681f424,25386215,0,0x0,8
tick,0x7ffdf681f424,25388243,0,0x0,8
tick,0x7ffdf681f424,25390199,0,0x0,8
tick,0x7ffdf681f424,25392191,0,0x0,8
tick,0x7ffdf681f424,25394203,0,0x0,8
tick,0x7ffdf681f424,25396182,0,0x0,8
tick,0x7ffdf681f424,25398178,0,0x0,8
tick,0x7ffdf681f424,25400169,0,0x0,8
tick,0x7ffdf681f424,25402175,0,0x0,8
tick,0x7ffdf681f424,25404183,0,0x0,8
tick,0x7ffdf681f424,25406150,0,0x0,8
tick,0x7ffdf681f424,25408150,0,0x0,8
tick,0x7ffdf681f424,25410147,0,0x0,8
tick,0x7ffdf681f424,25412162,0,0x0,8
tick,0x7ffdf681f424,25414134,0,0x0,8
tick,0x7ffdf681f424,25416123,0,0x0,8
tick,0x7ffdf681f424,25418121,0,0x0,8
tick,0x7ffdf681f424,25420121,0,0x0,8
tick,0x7ffdf681f424,25422117,0,0x0,8
tick,0x7ffdf681f424,25424107,0,0x0,8
tick,0x7ffdf681f424,25426123,0,0x0,8
tick,0x7ffdf681f424,25428128,0,0x0,8
tick,0x7ffdf681f424,25430097,0,0x0,8
tick,0x7ffdf681f424,25432088,0,0x0,8
tick,0x7ffdf681f424,25434085,0,0x0,8
tick,0x7ffdf681f424,25436076,0,0x0,8
tick,0x7ffdf681f424,25438073,0,0x0,8
tick,0x7ffdf681f424,25440067,0,0x0,8
tick,0x7ffdf681f424,25441568,0,0x0,8
tick,0x7ffdf681f424,25443558,0,0x0,8
tick,0x7ffdf681f424,25447227,0,0x0,8
tick,0x7ffdf681f424,25449133,0,0x0,8
tick,0x7ffdf681f424,25462015,0,0x0,8
tick,0x7ffdf681f424,25463533,0,0x0,8
tick,0x7ffdf681f424,25465509,0,0x0,8
tick,0x7ffdf681f424,25467524,0,0x0,8
tick,0x7ffdf681f424,25469843,0,0x0,8
tick,0x7ffdf681f424,25472324,0,0x0,8
tick,0x7ffdf681f424,25475356,0,0x0,8
tick,0x7ffdf681f424,25488933,0,0x0,8
tick,0x7ffdf681f424,25490450,0,0x0,8
tick,0x7ffdf681f424,25492460,0,0x0,8
tick,0x7ffdf681f424,25494649,0,0x0,8
tick,0x7ffdf681f424,25497789,0,0x0,8
tick,0x7ffdf681f424,25499487,0,0x0,8
tick,0x7ffdf681f424,25501417,0,0x0,8
tick,0x7ffdf681f424,25503404,0,0x0,8
tick,0x7ffdf681f424,25505399,0,0x0,8
tick,0x7ffdf681f424,25507405,0,0x0,8
tick,0x7ffdf681f424,25509421,0,0x0,8
tick,0x7ffdf681f424,25511381,0,0x0,8
tick,0x7ffdf681f424,25513377,0,0x0,8
tick,0x7ffdf681f424,25515373,0,0x0,8
tick,0x7ffdf681f424,25517364,0,0x0,8
tick,0x7ffdf681f424,25519362,0,0x0,8
tick,0x7ffdf681f424,25521358,0,0x0,8
tick,0x7ffdf681f424,25523351,0,0x0,8
tick,0x7ffdf681f424,25525346,0,0x0,8
tick,0x7ffdf681f424,25527340,0,0x0,8
tick,0x7ffdf681f424,25529330,0,0x0,8
tick,0x7ffdf681f424,25531330,0,0x0,8
tick,0x7ffdf681f424,25533328,0,0x0,8
tick,0x7ffdf681f424,25547335,0,0x0,8
tick,0x7ffdf681f424,25548788,0,0x0,8
tick,0x7ffdf681f424,25550793,0,0x0,8
tick,0x7ffdf681f424,25552909,0,0x0,8
tick,0x7ffdf681f424,25554778,0,0x0,8
tick,0x7ffdf681f424,25557027,0,0x0,8
tick,0x7ffdf681f424,25558771,0,0x0,8
tick,0x7ffdf681f424,25560797,0,0x0,8
tick,0x7ffdf681f424,25562763,0,0x0,8
tick,0x7ffdf681f424,25564796,0,0x0,8
tick,0x7ffdf681f424,25566744,0,0x0,8
tick,0x7ffdf681f424,25568737,0,0x0,8
tick,0x7ffdf681f424,25570726,0,0x0,8
tick,0x7ffdf681f424,25572738,0,0x0,8
tick,0x7ffdf681f424,25574833,0,0x0,8
tick,0x7ffdf681f424,25576713,0,0x0,8
tick,0x7ffdf681f424,25578702,0,0x0,8
tick,0x7ffdf681f424,25580701,0,0x0,8
tick,0x7ffdf681f424,25582701,0,0x0,8
tick,0x7ffdf681f424,25584698,0,0x0,8
tick,0x7ffdf681f424,25586691,0,0x0,8
tick,0x7ffdf681f424,25588697,0,0x0,8
tick,0x7ffdf681f424,25590692,0,0x0,8
tick,0x7ffdf681f424,25592667,0,0x0,8
tick,0x7ffdf681f424,25594724,0,0x0,8
tick,0x7ffdf681f424,25596657,0,0x0,8
tick,0x7ffdf681f424,25598651,0,0x0,8
tick,0x7ffdf681f424,25600650,0,0x0,8
tick,0x7ffdf681f424,25602647,0,0x0,8
tick,0x7ffdf681f424,25604640,0,0x0,8
tick,0x7ffdf681f424,25618349,0,0x0,8
tick,0x7ffdf681f424,25619608,0,0x0,8
tick,0x7ffdf681f424,25621614,0,0x0,8
tick,0x7ffdf681f424,25623588,0,0x0,8
tick,0x7ffdf681f424,25625584,0,0x0,8
tick,0x7ffdf681f424,25628046,0,0x0,8
tick,0x7ffdf681f424,25629665,0,0x0,8
tick,0x7ffdf681f424,25631688,0,0x0,8
tick,0x7ffdf681f424,25633561,0,0x0,8
tick,0x7ffdf681f424,25635561,0,0x0,8
tick,0x7ffdf681f424,25637550,0,0x0,8
tick,0x7ffdf681f424,25639547,0,0x0,8
tick,0x7ffdf681f424,25641547,0,0x0,8
tick,0x7ffdf681f424,25643531,0,0x0,8
tick,0x7ffdf681f424,25645527,0,0x0,8
tick,0x7ffdf681f424,25647544,0,0x0,8
tick,0x7ffdf681f424,25649512,0,0x0,8
tick,0x7ffdf681f424,25651949,0,0x0,8
tick,0x7ffdf681f424,25653510,0,0x0,8
tick,0x7ffdf681f424,25655532,0,0x0,8
tick,0x7ffdf681f424,25657494,0,0x0,8
tick,0x7ffdf681f424,25659530,0,0x0,8
tick,0x7ffdf681f424,25662118,0,0x0,8
tick,0x7ffdf681f424,25663976,0,0x0,8
tick,0x7ffdf681f424,25665496,0,0x0,8
tick,0x7ffdf681f424,25667530,0,0x0,8
tick,0x7ffdf681f424,25669534,0,0x0,8
tick,0x7ffdf681f424,25671472,0,0x0,8
tick,0x7ffdf681f424,25673459,0,0x0,8
tick,0x7ffdf681f424,25675449,0,0x0,8
tick,0x7ffdf681f424,25677453,0,0x0,8
tick,0x7ffdf681f424,25679440,0,0x0,8
tick,0x7ffdf681f424,25681538,0,0x0,8
tick,0x7ffdf681f424,25683503,0,0x0,8
tick,0x7ffdf681f424,25686247,0,0x0,8
tick,0x7ffdf681f424,25687683,0,0x0,8
tick,0x7ffdf681f424,25689429,0,0x0,8
tick,0x7ffdf681f424,25691404,0,0x0,8
tick,0x7ffdf681f424,25693405,0,0x0,8
tick,0x7ffdf681f424,25695432,0,0x0,8
tick,0x7ffdf681f424,25697400,0,0x0,8
tick,0x7ffdf681f424,25699394,0,0x0,8
tick,0x7ffdf681f424,25701398,0,0x0,8
tick,0x7ffdf681f424,25703377,0,0x0,8
tick,0x7ffdf681f424,25705371,0,0x0,8
tick,0x7ffdf681f424,25707377,0,0x0,8
tick,0x7ffdf681f424,25709358,0,0x0,8
tick,0x7ffdf681f424,25711356,0,0x0,8
tick,0x7ffdf681f424,25713349,0,0x0,8
tick,0x7ffdf681f424,25715341,0,0x0,8
tick,0x7ffdf681f424,25717335,0,0x0,8
tick,0x7ffdf681f424,25719359,0,0x0,8
tick,0x7ffdf681f424,25721526,0,0x0,8
tick,0x7ffdf681f424,25735797,0,0x0,8
tick,0x7ffdf681f424,25737299,0,0x0,8
tick,0x7ffdf681f424,25739283,0,0x0,8
tick,0x7ffdf681f424,25741302,0,0x0,8
tick,0x7ffdf681f424,25743374,0,0x0,8
tick,0x7ffdf681f424,25745276,0,0x0,8
tick,0x7ffdf681f424,25747255,0,0x0,8
tick,0x7ffdf681f424,25749254,0,0x0,8
tick,0x7ffdf681f424,25751250,0,0x0,8
tick,0x7ffdf681f424,25755159,0,0x0,8
tick,0x7ffdf681f424,25768358,0,0x0,8
tick,0x7ffdf681f424,25770197,0,0x0,8
tick,0x7ffdf681f424,25772200,0,0x0,8
tick,0x7ffdf681f424,25774189,0,0x0,8
tick,0x7ffdf681f424,25776349,0,0x0,8
tick,0x7ffdf681f424,25778180,0,0x0,8
tick,0x7ffdf681f424,25780186,0,0x0,8
tick,0x7ffdf681f424,25782169,0,0x0,8
tick,0x7ffdf681f424,25784161,0,0x0,8
tick,0x7ffdf681f424,25786158,0,0x0,8
tick,0x7ffdf681f424,25788146,0,0x0,8
tick,0x7ffdf681f424,25790144,0,0x0,8
tick,0x7ffdf681f424,25792135,0,0x0,8
tick,0x7ffdf681f424,25794182,0,0x0,8
tick,0x7ffdf681f424,25796130,0,0x0,8
tick,0x7ffdf681f424,25798119,0,0x0,8
tick,0x7ffdf681f424,25800122,0,0x0,8
tick,0x7ffdf681f424,25802111,0,0x0,8
tick,0x7ffdf681f424,25804114,0,0x0,8
tick,0x7ffdf681f424,25806115,0,0x0,8
tick,0x7ffdf681f424,25808091,0,0x0,8
tick,0x7ffdf681f424,25810091,0,0x0,8
tick,0x7ffdf681f424,25812143,0,0x0,8
tick,0x7ffdf681f424,25814079,0,0x0,8
tick,0x7ffdf681f424,25816076,0,0x0,8
tick,0x7ffdf681f424,25818067,0,0x0,8
tick,0x7ffdf681f424,25820062,0,0x0,8
tick,0x7ffdf681f424,25822073,0,0x0,8
tick,0x7ffdf681f424,25824052,0,0x0,8
tick,0x7ffdf681f424,25826057,0,0x0,8
tick,0x7ffdf681f424,25831774,0,0x0,8
tick,0x7ffdf681f424,25841702,0,0x0,8
tick,0x7ffdf681f424,25843007,0,0x0,8
tick,0x7ffdf681f424,25845002,0,0x0,8
tick,0x7ffdf681f424,25847045,0,0x0,8
tick,0x7ffdf681f424,25849027,0,0x0,8
tick,0x7ffdf681f424,25850983,0,0x0,8
tick,0x7ffdf681f424,25852983,0,0x0,8
tick,0x7ffdf681f424,25854977,0,0x0,8
tick,0x7ffdf681f424,25856962,0,0x0,8
tick,0x7ffdf681f424,25858959,0,0x0,8
tick,0x7ffdf681f424,25860967,0,0x0,8
tick,0x7ffdf681f424,25863079,0,0x0,8
tick,0x7ffdf681f424,25865231,0,0x0,8
tick,0x7ffdf681f424,25867055,0,0x0,8
tick,0x7ffdf681f424,25869144,0,0x0,8
tick,0x7ffdf681f424,25870938,0,0x0,8
tick,0x7ffdf681f424,25878874,0,0x0,8
tick,0x7ffdf681f424,25879904,0,0x0,8
tick,0x7ffdf681f424,25881913,0,0x0,8
tick,0x7ffdf681f424,25883912,0,0x0,8
tick,0x7ffdf681f424,25885957,0,0x0,8
tick,0x7ffdf681f424,25887894,0,0x0,8
tick,0x7ffdf681f424,25889897,0,0x0,8
tick,0x7ffdf681f424,25891889,0,0x0,8
tick,0x7ffdf681f424,25894058,0,0x0,8
tick,0x7ffdf681f424,25895863,0,0x0,8
tick,0x7ffdf681f424,25897859,0,0x0,8
tick,0x7ffdf681f424,25899848,0,0x0,8
tick,0x7ffdf681f424,25901848,0,0x0,8
tick,0x7ffdf681f424,25903837,0,0x0,8
tick,0x7ffdf681f424,25905840,0,0x0,8
tick,0x7ffdf681f424,25907827,0,0x0,8
tick,0x7ffdf681f424,25909866,0,0x0,8
tick,0x7ffdf681f424,25911819,0,0x0,8
tick,0x7ffdf681f424,25913823,0,0x0,8
tick,0x7ffdf681f424,25915808,0,0x0,8
tick,0x7ffdf681f424,25917831,0,0x0,8
tick,0x7ffdf681f424,25919806,0,0x0,8
tick,0x7ffdf681f424,25921792,0,0x0,8
tick,0x7ffdf681f424,25923785,0,0x0,8
tick,0x7ffdf681f424,25925780,0,0x0,8
tick,0x7ffdf681f424,25927772,0,0x0,8
tick,0x7ffdf681f424,25929765,0,0x0,8
tick,0x7ffdf681f424,25931765,0,0x0,8
tick,0x7ffdf681f424,25933759,0,0x0,8
tick,0x7ffdf681f424,25947801,0,0x0,8
tick,0x7ffdf681f424,25949720,0,0x0,8
tick,0x7ffdf681f424,25952179,0,0x0,8
tick,0x7ffdf681f424,25953834,0,0x0,8
tick,0x7ffdf681f424,25955720,0,0x0,8
tick,0x7ffdf681f424,25957703,0,0x0,8
tick,0x7ffdf681f424,25959689,0,0x0,8
tick,0x7ffdf681f424,25961740,0,0x0,8
tick,0x7ffdf681f424,25963680,0,0x0,8
tick,0x7ffdf681f424,25965679,0,0x0,8
tick,0x7ffdf681f424,25967672,0,0x0,8
tick,0x7ffdf681f424,25969673,0,0x0,8
tick,0x7ffdf681f424,25971660,0,0x0,8
tick,0x7ffdf681f424,25973654,0,0x0,8
tick,0x7ffdf681f424,25975655,0,0x0,8
tick,0x7ffdf681f424,25977640,0,0x0,8
tick,0x7ffdf681f424,25979642,0,0x0,8
tick,0x7ffdf681f424,25981632,0,0x0,8
tick,0x7ffdf681f424,25983631,0,0x0,8
tick,0x7ffdf681f424,25985645,0,0x0,8
tick,0x7ffdf681f424,25987621,0,0x0,8
tick,0x7ffdf681f424,25989788,0,0x0,8
tick,0x7ffdf681f424,25992034,0,0x0,8
tick,0x7ffdf681f424,25995713,0,0x0,8
tick,0x7ffdf681f424,26006332,0,0x0,8
tick,0x7ffdf681f424,26007563,0,0x0,8
tick,0x7ffdf681f424,26009562,0,0x0,8
tick,0x7ffdf681f424,26011550,0,0x0,8
tick,0x7ffdf681f424,26013678,0,0x0,8
tick,0x7ffdf681f424,26015673,0,0x0,8
tick,0x7ffdf681f424,26017810,0,0x0,8
tick,0x7ffdf681f424,26019543,0,0x0,8
tick,0x7ffdf681f424,26021575,0,0x0,8
tick,0x7ffdf681f424,26023522,0,0x0,8
tick,0x7ffdf681f424,26025519,0,0x0,8
tick,0x7ffdf681f424,26027512,0,0x0,8
tick,0x7ffdf681f424,26029503,0,0x0,8
tick,0x7ffdf681f424,26031491,0,0x0,8
tick,0x7ffdf681f424,26033492,0,0x0,8
tick,0x7ffdf681f424,26035486,0,0x0,8
tick,0x7ffdf681f424,26037499,0,0x0,8
tick,0x7ffdf681f424,26039475,0,0x0,8
tick,0x7ffdf681f424,26041468,0,0x0,8
tick,0x7ffdf681f424,26043463,0,0x0,8
tick,0x7ffdf681f424,26045461,0,0x0,8
tick,0x7ffdf681f424,26047452,0,0x0,8
tick,0x7ffdf681f424,26060784,0,0x0,8
tick,0x7ffdf681f424,26062428,0,0x0,8
tick,0x7ffdf681f424,26064937,0,0x0,8
tick,0x7ffdf681f424,26066464,0,0x0,8
tick,0x7ffdf681f424,26068461,0,0x0,8
tick,0x7ffdf681f424,26070400,0,0x0,8
tick,0x7ffdf681f424,26072389,0,0x0,8
tick,0x7ffdf681f424,26074380,0,0x0,8
tick,0x7ffdf681f424,26076380,0,0x0,8
tick,0x7ffdf681f424,26078378,0,0x0,8
tick,0x7ffdf681f424,26080374,0,0x0,8
tick,0x7ffdf681f424,26083049,0,0x0,8
tick,0x7ffdf681f424,26084394,0,0x0,8
tick,0x7ffdf681f424,26086366,0,0x0,8
tick,0x7ffdf681f424,26088347,0,0x0,8
tick,0x7ffdf681f424,26090341,0,0x0,8
tick,0x7ffdf681f424,26092336,0,0x0,8
tick,0x7ffdf681f424,26094333,0,0x0,8
tick,0x7ffdf681f424,26096320,0,0x0,8
tick,0x7ffdf681f424,26098321,0,0x0,8
tick,0x7ffdf681f424,26100318,0,0x0,8
tick,0x7ffdf681f424,26102981,0,0x0,8
tick,0x7ffdf681f424,26104434,0,0x0,8
tick,0x7ffdf681f424,26107705,0,0x0,8
tick,0x7ffdf681f424,26109348,0,0x0,8
tick,0x7ffdf681f424,26111354,0,0x0,8
tick,0x7ffdf681f424,26113346,0,0x0,8
tick,0x7ffdf681f424,26119040,0,0x0,8
tick,0x7ffdf681f424,26120261,0,0x0,8
tick,0x7ffdf681f424,26122263,0,0x0,8
tick,0x7ffdf681f424,26124271,0,0x0,8
tick,0x7ffdf681f424,26126287,0,0x0,8
tick,0x7ffdf681f424,26128286,0,0x0,8
tick,0x7ffdf681f424,26130232,0,0x0,8
tick,0x7ffdf681f424,26132227,0,0x0,8
tick,0x7ffdf681f424,26134224,0,0x0,8
tick,0x7ffdf681f424,26136226,0,0x0,8
tick,0x7ffdf681f424,26138218,0,0x0,8
tick,0x7ffdf681f424,26140345,0,0x0,8
tick,0x7ffdf681f424,26142206,0,0x0,8
tick,0x7ffdf681f424,26144197,0,0x0,8
tick,0x7ffdf681f424,26146201,0,0x0,8
tick,0x7ffdf681f424,26148209,0,0x0,8
tick,0x7ffdf681f424,26150505,0,0x0,8
tick,0x7ffdf681f424,26153083,0,0x0,8
tick,0x7ffdf681f424,26154279,0,0x0,8
tick,0x7ffdf681f424,26165667,0,0x0,8
tick,0x7ffdf681f424,26167138,0,0x0,8
tick,0x7ffdf681f424,26169133,0,0x0,8
tick,0x7ffdf681f424,26171125,0,0x0,8
tick,0x7ffdf681f424,26173124,0,0x0,8
tick,0x7ffdf681f424,26175461,0,0x0,8
tick,0x7ffdf681f424,26177115,0,0x0,8
tick,0x7ffdf681f424,26179221,0,0x0,8
tick,0x7ffdf681f424,26181098,0,0x0,8
tick,0x7ffdf681f424,26183108,0,0x0,8
tick,0x7ffdf681f424,26185096,0,0x0,8
tick,0x7ffdf681f424,26187081,0,0x0,8
tick,0x7ffdf681f424,26189074,0,0x0,8
tick,0x7ffdf681f424,26191075,0,0x0,8
tick,0x7ffdf681f424,26193064,0,0x0,8
tick,0x7ffdf681f424,26207541,0,0x0,8
tick,0x7ffdf681f424,26209027,0,0x0,8
tick,0x7ffdf681f424,26211021,0,0x0,8
tick,0x7ffdf681f424,26213118,0,0x0,8
tick,0x7ffdf681f424,26215125,0,0x0,8
tick,0x7ffdf681f424,26217099,0,0x0,8
tick,0x7ffdf681f424,26218996,0,0x0,8
tick,0x7ffdf681f424,26220992,0,0x0,8
tick,0x7ffdf681f424,26223011,0,0x0,8
tick,0x7ffdf681f424,26224981,0,0x0,8
tick,0x7ffdf681f424,26226977,0,0x0,8
tick,0x7ffdf681f424,26228973,0,0x0,8
tick,0x7ffdf681f424,26230962,0,0x0,8
tick,0x7ffdf681f424,26232959,0,0x0,8
tick,0x7ffdf681f424,26234960,0,0x0,8
tick,0x7ffdf681f424,26236944,0,0x0,8
tick,0x7ffdf681f424,26238946,0,0x0,8
tick,0x7ffdf681f424,26240935,0,0x0,8
tick,0x7ffdf681f424,26242932,0,0x0,8
tick,0x7ffdf681f424,26244925,0,0x0,8
tick,0x7ffdf681f424,26246922,0,0x0,8
tick,0x7ffdf681f424,26248920,0,0x0,8
tick,0x7ffdf681f424,26250918,0,0x0,8
tick,0x7ffdf681f424,26252920,0,0x0,8
tick,0x7ffdf681f424,26254933,0,0x0,8
tick,0x7ffdf681f424,26256899,0,0x0,8
tick,0x7ffdf681f424,26258890,0,0x0,8
tick,0x7ffdf681f424,26260886,0,0x0,8
tick,0x7ffdf681f424,26262882,0,0x0,8
tick,0x7ffdf681f424,26264878,0,0x0,8
tick,0x7ffdf681f424,26266869,0,0x0,8
tick,0x7ffdf681f424,26268867,0,0x0,8
tick,0x7ffdf681f424,26270921,0,0x0,8
tick,0x7ffdf681f424,26272855,0,0x0,8
tick,0x7ffdf681f424,26285914,0,0x0,8
tick,0x7ffdf681f424,26287816,0,0x0,8
tick,0x7ffdf681f424,26289877,0,0x0,8
tick,0x7ffdf681f424,26291955,0,0x0,8
tick,0x7ffdf681f424,26293828,0,0x0,8
tick,0x7ffdf681f424,26295797,0,0x0,8
tick,0x7ffdf681f424,26298279,0,0x0,8
tick,0x7ffdf681f424,26300188,0,0x0,8
tick,0x7ffdf681f424,26301998,0,0x0,8
tick,0x7ffdf681f424,26303771,0,0x0,8
tick,0x7ffdf681f424,26305774,0,0x0,8
tick,0x7ffdf681f424,26307765,0,0x0,8
tick,0x7ffdf681f424,26309772,0,0x0,8
tick,0x7ffdf681f424,26317254,0,0x0,8
tick,0x7ffdf681f424,26318731,0,0x0,8
tick,0x7ffdf681f424,26320721,0,0x0,8
tick,0x7ffdf681f424,26322719,0,0x0,8
tick,0x7ffdf681f424,26324713,0,0x0,8
tick,0x7ffdf681f424,26326719,0,0x0,8
tick,0x7ffdf681f424,26328712,0,0x0,8
tick,0x7ffdf681f424,26330715,0,0x0,8
tick,0x7ffdf681f424,26332690,0,0x0,8
tick,0x7ffdf681f424,26334683,0,0x0,8
tick,0x7ffdf681f424,26336675,0,0x0,8
tick,0x7ffdf681f424,26338665,0,0x0,8
tick,0x7ffdf681f424,26340670,0,0x0,8
tick,0x7ffdf681f424,26342668,0,0x0,8
tick,0x7ffdf681f424,26344663,0,0x0,8
tick,0x7ffdf681f424,26346657,0,0x0,8
tick,0x7ffdf681f424,26348651,0,0x0,8
tick,0x7ffdf681f424,26350645,0,0x0,8
tick,0x7ffdf681f424,26352660,0,0x0,8
tick,0x7ffdf681f424,26354639,0,0x0,8
tick,0x7ffdf681f424,26356628,0,0x0,8
tick,0x7ffdf681f424,26358618,0,0x0,8
tick,0x7ffdf681f424,26360623,0,0x0,8
tick,0x7ffdf681f424,26376124,0,0x0,8
tick,0x7ffdf681f424,26376192,0,0x0,8
tick,0x7ffdf681f424,26377573,0,0x0,8
tick,0x7ffdf681f424,26379886,0,0x0,8
tick,0x7ffdf681f424,26381670,0,0x0,8
tick,0x7ffdf681f424,26383643,0,0x0,8
tick,0x7ffdf681f424,26385560,0,0x0,8
tick,0x7ffdf681f424,26387548,0,0x0,8
tick,0x7ffdf681f424,26389544,0,0x0,8
tick,0x7ffdf681f424,26391531,0,0x0,8
tick,0x7ffdf681f424,26393533,0,0x0,8
tick,0x7ffdf681f424,26395523,0,0x0,8
tick,0x7ffdf681f424,26397519,0,0x0,8
tick,0x7ffdf681f424,26399512,0,0x0,8
tick,0x7ffdf681f424,26401522,0,0x0,8
tick,0x7ffdf681f424,26403509,0,0x0,8
tick,0x7ffdf681f424,26405494,0,0x0,8
tick,0x7ffdf681f424,26407500,0,0x0,8
tick,0x7ffdf681f424,26409502,0,0x0,8
tick,0x7ffdf681f424,26411482,0,0x0,8
tick,0x7ffdf681f424,26413481,0,0x0,8
tick,0x7ffdf681f424,26415469,0,0x0,8
tick,0x7ffdf681f424,26417479,0,0x0,8
tick,0x7ffdf681f424,26419471,0,0x0,8
tick,0x7ffdf681f424,26421461,0,0x0,8
tick,0x7ffdf681f424,26423468,0,0x0,8
tick,0x7ffdf681f424,26439436,0,0x0,8
tick,0x7ffdf681f424,26439481,0,0x0,8
tick,0x7ffdf681f424,26441406,0,0x0,8
tick,0x7ffdf681f424,26443400,0,0x0,8
tick,0x7ffdf681f424,26445409,0,0x0,8
tick,0x7ffdf681f424,26447389,0,0x0,8
tick,0x7ffdf681f424,26449386,0,0x0,8
tick,0x7ffdf681f424,26450891,0,0x0,8
tick,0x7ffdf681f424,26452884,0,0x0,8
tick,0x7ffdf681f424,26454905,0,0x0,8
tick,0x7ffdf681f424,26456874,0,0x0,8
tick,0x7ffdf681f424,26458970,0,0x0,8
tick,0x7ffdf681f424,26471487,0,0x0,8
tick,0x7ffdf681f424,26474528,0,0x0,8
tick,0x7ffdf681f424,26475831,0,0x0,8
tick,0x7ffdf681f424,26477814,0,0x0,8
tick,0x7ffdf681f424,26479810,0,0x0,8
tick,0x7ffdf681f424,26481804,0,0x0,8
tick,0x7ffdf681f424,26483837,0,0x0,8
tick,0x7ffdf681f424,26485804,0,0x0,8
tick,0x7ffdf681f424,26487798,0,0x0,8
tick,0x7ffdf681f424,26489796,0,0x0,8
tick,0x7ffdf681f424,26491775,0,0x0,8
tick,0x7ffdf681f424,26493768,0,0x0,8
tick,0x7ffdf681f424,26495766,0,0x0,8
tick,0x7ffdf681f424,26497759,0,0x0,8
tick,0x7ffdf681f424,26499752,0,0x0,8
tick,0x7ffdf681f424,26501841,0,0x0,8
tick,0x7ffdf681f424,26503749,0,0x0,8
tick,0x7ffdf681f424,26505738,0,0x0,8
tick,0x7ffdf681f424,26507738,0,0x0,8
tick,0x7ffdf681f424,26523794,0,0x0,8
tick,0x7ffdf681f424,26525686,0,0x0,8
tick,0x7ffdf681f424,26527749,0,0x0,8
tick,0x7ffdf681f424,26529688,0,0x0,8
tick,0x7ffdf681f424,26531779,0,0x0,8
tick,0x7ffdf681f424,26533664,0,0x0,8
tick,0x7ffdf681f424,26535687,0,0x0,8
tick,0x7ffdf681f424,26537650,0,0x0,8
tick,0x7ffdf681f424,26539645,0,0x0,8
tick,0x7ffdf681f424,26541640,0,0x0,8
tick,0x7ffdf681f424,26543865,0,0x0,8
tick,0x7ffdf681f424,26545631,0,0x0,8
tick,0x7ffdf681f424,26547624,0,0x0,8
tick,0x7ffdf681f424,26549635,0,0x0,8
tick,0x7ffdf681f424,26551659,0,0x0,8
tick,0x7ffdf681f424,26553614,0,0x0,8
tick,0x7ffdf681f424,26555857,0,0x0,8
tick,0x7ffdf681f424,26558742,0,0x0,8
tick,0x7ffdf681f424,26569644,0,0x0,8
tick,0x7ffdf681f424,26571568,0,0x0,8
tick,0x7ffdf681f424,26573557,0,0x0,8
tick,0x7ffdf681f424,26575842,0,0x0,8
tick,0x7ffdf681f424,26577578,0,0x0,8
tick,0x7ffdf681f424,26579551,0,0x0,8
tick,0x7ffdf681f424,26581627,0,0x0,8
tick,0x7ffdf681f424,26583529,0,0x0,8
tick,0x7ffdf681f424,26585528,0,0x0,8
tick,0x7ffdf681f424,26587520,0,0x0,8
tick,0x7ffdf681f424,26589512,0,0x0,8
tick,0x7ffdf681f424,26591511,0,0x0,8
tick,0x7ffdf681f424,26593500,0,0x0,8
tick,0x7ffdf681f424,26602336,0,0x0,8
tick,0x7ffdf681f424,26606556,0,0x0,8
tick,0x7ffdf681f424,26608513,0,0x0,8
tick,0x7ffdf681f424,26610463,0,0x0,8
tick,0x7ffdf681f424,26612459,0,0x0,8
tick,0x7ffdf681f424,26614517,0,0x0,8
tick,0x7ffdf681f424,26616457,0,0x0,8
tick,0x7ffdf681f424,26618465,0,0x0,8
tick,0x7ffdf681f424,26620429,0,0x0,8
tick,0x7ffdf681f424,26622426,0,0x0,8
tick,0x7ffdf681f424,26624421,0,0x0,8
tick,0x7ffdf681f424,26626423,0,0x0,8
tick,0x7ffdf681f424,26628663,0,0x0,8
tick,0x7ffdf681f424,26642657,0,0x0,8
tick,0x7ffdf681f424,26644370,0,0x0,8
tick,0x7ffdf681f424,26646361,0,0x0,8
tick,0x7ffdf681f424,26648364,0,0x0,8
tick,0x7ffdf681f424,26649968,0,0x0,8
tick,0x7ffdf681f424,26651965,0,0x0,8
tick,0x7ffdf681f424,26653976,0,0x0,8
tick,0x7ffdf681f424,26656998,0,0x0,8
tick,0x7ffdf681f424,26659003,0,0x0,8
tick,0x7ffdf681f424,26660981,0,0x0,8
tick,0x7ffdf681f424,26662942,0,0x0,8
tick,0x7ffdf681f424,26664930,0,0x0,8
tick,0x7ffdf681f424,26666937,0,0x0,8
tick,0x7ffdf681f424,26668924,0,0x0,8
tick,0x7ffdf681f424,26670913,0,0x0,8
tick,0x7ffdf681f424,26672913,0,0x0,8
tick,0x7ffdf681f424,26674907,0,0x0,8
tick,0x7ffdf681f424,26676901,0,0x0,8
tick,0x7ffdf681f424,26678892,0,0x0,8
tick,0x7ffdf681f424,26680892,0,0x0,8
tick,0x7ffdf681f424,26685096,0,0x0,8
tick,0x7ffdf681f424,26687194,0,0x0,8
tick,0x7ffdf681f424,26688867,0,0x0,8
tick,0x7ffdf681f424,26690858,0,0x0,8
tick,0x7ffdf681f424,26692862,0,0x0,8
tick,0x7ffdf681f424,26694868,0,0x0,8
tick,0x7ffdf681f424,26709262,0,0x0,8
tick,0x7ffdf681f424,26709341,0,0x0,8
tick,0x7ffdf681f424,26710833,0,0x0,8
tick,0x7ffdf681f424,26712813,0,0x0,8
tick,0x7ffdf681f424,26714886,0,0x0,8
tick,0x7ffdf681f424,26716914,0,0x0,8
tick,0x7ffdf681f424,26720360,0,0x0,8
tick,0x7ffdf681f424,26734935,0,0x0,8
tick,0x7ffdf681f424,26734974,0,0x0,8
tick,0x7ffdf681f424,26736746,0,0x0,8
tick,0x7ffdf681f424,26738736,0,0x0,8
tick,0x7ffdf681f424,26740732,0,0x0,8
tick,0x7ffdf681f424,26743006,0,0x0,8
tick,0x7ffdf681f424,26744742,0,0x0,8
tick,0x7ffdf681f424,26746766,0,0x0,8
tick,0x7ffdf681f424,26748710,0,0x0,8
tick,0x7ffdf681f424,26750720,0,0x0,8
tick,0x7ffdf681f424,26752737,0,0x0,8
tick,0x7ffdf681f424,26754692,0,0x0,8
tick,0x7ffdf681f424,26756701,0,0x0,8
tick,0x7ffdf681f424,26758687,0,0x0,8
tick,0x7ffdf681f424,26760676,0,0x0,8
tick,0x7ffdf681f424,26762670,0,0x0,8
tick,0x7ffdf681f424,26764668,0,0x0,8
tick,0x7ffdf681f424,26766662,0,0x0,8
tick,0x7ffdf681f424,26768654,0,0x0,8
tick,0x7ffdf681f424,26770653,0,0x0,8
tick,0x7ffdf681f424,26772645,0,0x0,8
tick,0x7ffdf681f424,26774640,0,0x0,8
tick,0x7ffdf681f424,26782179,0,0x0,8
tick,0x7ffdf681f424,26789666,0,0x0,8
tick,0x7ffdf681f424,26789696,0,0x0,8
tick,0x7ffdf681f424,26791597,0,0x0,8
tick,0x7ffdf681f424,26793591,0,0x0,8
tick,0x7ffdf681f424,26795608,0,0x0,8
tick,0x7ffdf681f424,26797586,0,0x0,8
tick,0x7ffdf681f424,26799578,0,0x0,8
tick,0x7ffdf681f424,26801574,0,0x0,8
tick,0x7ffdf681f424,26803563,0,0x0,8
tick,0x7ffdf681f424,26805564,0,0x0,8
tick,0x7ffdf681f424,26807550,0,0x0,8
tick,0x7ffdf681f424,26809546,0,0x0,8
tick,0x7ffdf681f424,26811543,0,0x0,8
tick,0x7ffdf681f424,26813534,0,0x0,8
tick,0x7ffdf681f424,26815531,0,0x0,8
tick,0x7ffdf681f424,26817525,0,0x0,8
tick,0x7ffdf681f424,26819520,0,0x0,8
tick,0x7ffdf681f424,26821567,0,0x0,8
tick,0x7ffdf681f424,26823818,0,0x0,8
tick,0x7ffdf681f424,26825681,0,0x0,8
tick,0x7ffdf681f424,26828533,0,0x0,8
tick,0x7ffdf681f424,26830495,0,0x0,8
tick,0x7ffdf681f424,26832485,0,0x0,8
tick,0x7ffdf681f424,26834484,0,0x0,8
tick,0x7ffdf681f424,26836529,0,0x0,8
tick,0x7ffdf681f424,26838530,0,0x0,8
tick,0x7ffdf681f424,26840519,0,0x0,8
tick,0x7ffdf681f424,26856009,0,0x0,8
tick,0x7ffdf681f424,26856084,0,0x0,8
tick,0x7ffdf681f424,26857561,0,0x0,8
tick,0x7ffdf681f424,26859428,0,0x0,8
tick,0x7ffdf681f424,26861413,0,0x0,8
tick,0x7ffdf681f424,26863411,0,0x0,8
tick,0x7ffdf681f424,26865408,0,0x0,8
tick,0x7ffdf681f424,26867527,0,0x0,8
tick,0x7ffdf681f424,26869808,0,0x0,8
tick,0x7ffdf681f424,26871397,0,0x0,8
tick,0x7ffdf681f424,26873401,0,0x0,8
tick,0x7ffdf681f424,26875370,0,0x0,8
tick,0x7ffdf681f424,26877369,0,0x0,8
tick,0x7ffdf681f424,26879358,0,0x0,8
tick,0x7ffdf681f424,26881354,0,0x0,8
tick,0x7ffdf681f424,26883354,0,0x0,8
tick,0x7ffdf681f424,26885345,0,0x0,8
tick,0x7ffdf681f424,26887336,0,0x0,8
tick,0x7ffdf681f424,26889331,0,0x0,8
tick,0x7ffdf681f424,26891325,0,0x0,8
tick,0x7ffdf681f424,26893332,0,0x0,8
tick,0x7ffdf681f424,26895487,0,0x0,8
tick,0x7ffdf681f424,26897382,0,0x0,8
tick,0x7ffdf681f424,26899441,0,0x0,8
tick,0x7ffdf681f424,26901398,0,0x0,8
tick,0x7ffdf681f424,26903297,0,0x0,8
tick,0x7ffdf681f424,26905300,0,0x0,8
tick,0x7ffdf681f424,26907285,0,0x0,8
tick,0x7ffdf681f424,26909284,0,0x0,8
tick,0x7ffdf681f424,26911277,0,0x0,8
tick,0x7ffdf681f424,26913298,0,0x0,8
tick,0x7ffdf681f424,26916518,0,0x0,8
tick,0x7ffdf681f424,26922254,0,0x0,8
tick,0x7ffdf681f424,26924250,0,0x0,8
tick,0x7ffdf681f424,26926370,0,0x0,8
tick,0x7ffdf681f424,26928229,0,0x0,8
tick,0x7ffdf681f424,26930227,0,0x0,8
tick,0x7ffdf681f424,26932232,0,0x0,8
tick,0x7ffdf681f424,26934216,0,0x0,8
tick,0x7ffdf681f424,26936334,0,0x0,8
tick,0x7ffdf681f424,26938222,0,0x0,8
tick,0x7ffdf681f424,26940247,0,0x0,8
tick,0x7ffdf681f424,26942224,0,0x0,8
tick,0x7ffdf681f424,26944198,0,0x0,8
tick,0x7ffdf681f424,26946186,0,0x0,8
tick,0x7ffdf681f424,26948180,0,0x0,8
tick,0x7ffdf681f424,26950169,0,0x0,8
tick,0x7ffdf681f424,26952166,0,0x0,8
tick,0x7ffdf681f424,26954158,0,0x0,8
tick,0x7ffdf681f424,26956154,0,0x0,8
tick,0x7ffdf681f424,26958151,0,0x0,8
tick,0x7ffdf681f424,26960142,0,0x0,8
tick,0x7ffdf681f424,26962148,0,0x0,8
tick,0x7ffdf681f424,26964131,0,0x0,8
tick,0x7ffdf681f424,26966123,0,0x0,8
tick,0x7ffdf681f424,26968124,0,0x0,8
tick,0x7ffdf681f424,26970113,0,0x0,8
tick,0x7ffdf681f424,26972115,0,0x0,8
tick,0x7ffdf681f424,26974103,0,0x0,8
tick,0x7ffdf681f424,26976103,0,0x0,8
tick,0x7ffdf681f424,26991057,0,0x0,8
tick,0x7ffdf681f424,26993061,0,0x0,8
tick,0x7ffdf681f424,26995056,0,0x0,8
tick,0x7ffdf681f424,26997270,0,0x0,8
tick,0x7ffdf681f424,27000540,0,0x0,8
tick,0x7ffdf681f424,27002050,0,0x0,8
tick,0x7ffdf681f424,27004029,0,0x0,8
tick,0x7ffdf681f424,27006023,0,0x0,8
tick,0x7ffdf681f424,27008015,0,0x0,8
tick,0x7ffdf681f424,27010022,0,0x0,8
tick,0x7ffdf681f424,27012008,0,0x0,8
tick,0x7ffdf681f424,27013999,0,0x0,8
tick,0x7ffdf681f424,27015995,0,0x0,8
tick,0x7ffdf681f424,27018176,0,0x0,8
tick,0x7ffdf681f424,27020187,0,0x0,8
tick,0x7ffdf681f424,27022234,0,0x0,8
tick,0x7ffdf681f424,27024016,0,0x0,8
tick,0x7ffdf681f424,27025971,0,0x0,8
tick,0x7ffdf681f424,27027967,0,0x0,8
tick,0x7ffdf681f424,27029957,0,0x0,8
tick,0x7ffdf681f424,27036777,0,0x0,8
tick,0x7ffdf681f424,27037933,0,0x0,8
tick,0x7ffdf681f424,27039922,0,0x0,8
tick,0x7ffdf681f424,27041918,0,0x0,8
tick,0x7ffdf681f424,27043918,0,0x0,8
tick,0x7ffdf681f424,27045909,0,0x0,8
tick,0x7ffdf681f424,27047903,0,0x0,8
tick,0x7ffdf681f424,27049916,0,0x0,8
tick,0x7ffdf681f424,27051503,0,0x0,8
tick,0x7ffdf681f424,27053431,0,0x0,8
tick,0x7ffdf681f424,27055520,0,0x0,8
tick,0x7ffdf681f424,27057399,0,0x0,8
tick,0x7ffdf681f424,27059391,0,0x0,8
tick,0x7ffdf681f424,27061385,0,0x0,8
tick,0x7ffdf681f424,27063378,0,0x0,8
tick,0x7ffdf681f424,27065370,0,0x0,8
tick,0x7ffdf681f424,27067362,0,0x0,8
tick,0x7ffdf681f424,27069362,0,0x0,8
tick,0x7ffdf681f424,27071363,0,0x0,8
tick,0x7ffdf681f424,27073343,0,0x0,8
tick,0x7ffdf681f424,27075347,0,0x0,8
tick,0x7ffdf681f424,27077353,0,0x0,8
tick,0x7ffdf681f424,27079385,0,0x0,8
tick,0x7ffdf681f424,27081335,0,0x0,8
tick,0x7ffdf681f424,27083323,0,0x0,8
tick,0x7ffdf681f424,27085313,0,0x0,8
tick,0x7ffdf681f424,27087311,0,0x0,8
tick,0x7ffdf681f424,27089304,0,0x0,8
tick,0x7ffdf681f424,27091302,0,0x0,8
tick,0x7ffdf681f424,27093299,0,0x0,8
tick,0x7ffdf681f424,27095298,0,0x0,8
tick,0x7ffdf681f424,27097282,0,0x0,8
tick,0x7ffdf681f424,27099286,0,0x0,8
tick,0x7ffdf681f424,27101318,0,0x0,8
tick,0x7ffdf681f424,27103273,0,0x0,8
tick,0x7ffdf681f424,27105273,0,0x0,8
tick,0x7ffdf681f424,27107263,0,0x0,8
tick,0x7ffdf681f424,27109255,0,0x0,8
tick,0x7ffdf681f424,27111251,0,0x0,8
tick,0x7ffdf681f424,27126086,0,0x0,8
tick,0x7ffdf681f424,27139235,0,0x0,8
tick,0x7ffdf681f424,27141171,0,0x0,8
tick,0x7ffdf681f424,27143217,0,0x0,8
tick,0x7ffdf681f424,27145157,0,0x0,8
tick,0x7ffdf681f424,27147164,0,0x0,8
tick,0x7ffdf681f424,27149151,0,0x0,8
tick,0x7ffdf681f424,27151180,0,0x0,8
tick,0x7ffdf681f424,27153221,0,0x0,8
tick,0x7ffdf681f424,27155147,0,0x0,8
tick,0x7ffdf681f424,27157480,0,0x0,8
tick,0x7ffdf681f424,27159134,0,0x0,8
tick,0x7ffdf681f424,27161116,0,0x0,8
tick,0x7ffdf681f424,27163117,0,0x0,8
tick,0x7ffdf681f424,27165247,0,0x0,8
tick,0x7ffdf681f424,27167096,0,0x0,8
tick,0x7ffdf681f424,27169093,0,0x0,8
tick,0x7ffdf681f424,27171084,0,0x0,8
tick,0x7ffdf681f424,27173085,0,0x0,8
tick,0x7ffdf681f424,27175117,0,0x0,8
tick,0x7ffdf681f424,27177076,0,0x0,8
tick,0x7ffdf681f424,27179067,0,0x0,8
tick,0x7ffdf681f424,27181068,0,0x0,8
tick,0x7ffdf681f424,27183056,0,0x0,8
tick,0x7ffdf681f424,27185091,0,0x0,8
tick,0x7ffdf681f424,27187045,0,0x0,8
tick,0x7ffdf681f424,27189036,0,0x0,8
tick,0x7ffdf681f424,27191034,0,0x0,8
tick,0x7ffdf681f424,27193092,0,0x0,8
tick,0x7ffdf681f424,27195029,0,0x0,8
tick,0x7ffdf681f424,27209035,0,0x0,8
tick,0x7ffdf681f424,27211016,0,0x0,8
tick,0x7ffdf681f424,27213018,0,0x0,8
tick,0x7ffdf681f424,27215119,0,0x0,8
tick,0x7ffdf681f424,27217006,0,0x0,8
tick,0x7ffdf681f424,27218984,0,0x0,8
tick,0x7ffdf681f424,27220954,0,0x0,8
tick,0x7ffdf681f424,27222954,0,0x0,8
tick,0x7ffdf681f424,27224947,0,0x0,8
tick,0x7ffdf681f424,27226942,0,0x0,8
tick,0x7ffdf681f424,27228933,0,0x0,8
tick,0x7ffdf681f424,27231022,0,0x0,8
tick,0x7ffdf681f424,27232923,0,0x0,8
tick,0x7ffdf681f424,27234934,0,0x0,8
tick,0x7ffdf681f424,27236913,0,0x0,8
tick,0x7ffdf681f424,27241171,0,0x0,8
tick,0x7ffdf681f424,27242984,0,0x0,8
tick,0x7ffdf681f424,27245245,0,0x0,8
tick,0x7ffdf681f424,27246894,0,0x0,8
tick,0x7ffdf681f424,27248925,0,0x0,8
tick,0x7ffdf681f424,27250885,0,0x0,8
tick,0x7ffdf681f424,27252942,0,0x0,8
tick,0x7ffdf681f424,27255000,0,0x0,8
tick,0x7ffdf681f424,27256910,0,0x0,8
tick,0x7ffdf681f424,27260359,0,0x0,8
tick,0x7ffdf681f424,27261839,0,0x0,8
tick,0x7ffdf681f424,27264105,0,0x0,8
tick,0x7ffdf681f424,27265887,0,0x0,8
tick,0x7ffdf681f424,27267830,0,0x0,8
tick,0x7ffdf681f424,27269829,0,0x0,8
tick,0x7ffdf681f424,27272084,0,0x0,8
tick,0x7ffdf681f424,27273812,0,0x0,8
tick,0x7ffdf681f424,27275820,0,0x0,8
tick,0x7ffdf681f424,27277809,0,0x0,8
tick,0x7ffdf681f424,27279799,0,0x0,8
tick,0x7ffdf681f424,27281797,0,0x0,8
tick,0x7ffdf681f424,27283787,0,0x0,8
tick,0x7ffdf681f424,27285787,0,0x0,8
tick,0x7ffdf681f424,27297230,0,0x0,8
tick,0x7ffdf681f424,27301635,0,0x0,8
tick,0x7ffdf681f424,27302771,0,0x0,8
tick,0x7ffdf681f424,27304730,0,0x0,8
tick,0x7ffdf681f424,27306818,0,0x0,8
tick,0x7ffdf681f424,27308765,0,0x0,8
tick,0x7ffdf681f424,27310741,0,0x0,8
tick,0x7ffdf681f424,27312771,0,0x0,8
tick,0x7ffdf681f424,27314710,0,0x0,8
tick,0x7ffdf681f424,27316699,0,0x0,8
tick,0x7ffdf681f424,27318728,0,0x0,8
tick,0x7ffdf681f424,27320705,0,0x0,8
tick,0x7ffdf681f424,27322718,0,0x0,8
tick,0x7ffdf681f424,27324677,0,0x0,8
tick,0x7ffdf681f424,27326679,0,0x0,8
tick,0x7ffdf681f424,27328665,0,0x0,8
tick,0x7ffdf681f424,27330682,0,0x0,8
tick,0x7ffdf681f424,27332677,0,0x0,8
tick,0x7ffdf681f424,27334745,0,0x0,8
tick,0x7ffdf681f424,27336644,0,0x0,8
tick,0x7ffdf681f424,27338650,0,0x0,8
tick,0x7ffdf681f424,27340633,0,0x0,8
tick,0x7ffdf681f424,27342647,0,0x0,8
tick,0x7ffdf681f424,27344623,0,0x0,8
tick,0x7ffdf681f424,27346626,0,0x0,8
tick,0x7ffdf681f424,27348638,0,0x0,8
tick,0x7ffdf681f424,27350606,0,0x0,8
tick,0x7ffdf681f424,27352608,0,0x0,8
tick,0x7ffdf681f424,27365821,0,0x0,8
tick,0x7ffdf681f424,27366584,0,0x0,8
tick,0x7ffdf681f424,27368571,0,0x0,8
tick,0x7ffdf681f424,27370730,0,0x0,8
tick,0x7ffdf681f424,27372998,0,0x0,8
tick,0x7ffdf681f424,27374591,0,0x0,8
tick,0x7ffdf681f424,27376544,0,0x0,8
tick,0x7ffdf681f424,27378547,0,0x0,8
tick,0x7ffdf681f424,27380526,0,0x0,8
tick,0x7ffdf681f424,27382525,0,0x0,8
tick,0x7ffdf681f424,27384536,0,0x0,8
tick,0x7ffdf681f424,27386511,0,0x0,8
tick,0x7ffdf681f424,27388504,0,0x0,8
tick,0x7ffdf681f424,27390512,0,0x0,8
tick,0x7ffdf681f424,27392497,0,0x0,8
tick,0x7ffdf681f424,27394495,0,0x0,8
tick,0x7ffdf681f424,27396492,0,0x0,8
tick,0x7ffdf681f424,27398489,0,0x0,8
tick,0x7ffdf681f424,27400472,0,0x0,8
tick,0x7ffdf681f424,27402476,0,0x0,8
tick,0x7ffdf681f424,27404466,0,0x0,8
tick,0x7ffdf681f424,27406458,0,0x0,8
tick,0x7ffdf681f424,27408452,0,0x0,8
tick,0x7ffdf681f424,27410447,0,0x0,8
tick,0x7ffdf681f424,27412443,0,0x0,8
tick,0x7ffdf681f424,27414436,0,0x0,8
tick,0x7ffdf681f424,27416433,0,0x0,8
tick,0x7ffdf681f424,27434857,0,0x0,8
tick,0x7ffdf681f424,27434885,0,0x0,8
tick,0x7ffdf681f424,27434891,0,0x0,8
tick,0x7ffdf681f424,27434896,0,0x0,8
tick,0x7ffdf681f424,27434901,0,0x0,8
tick,0x7ffdf681f424,27434906,0,0x0,8
tick,0x7ffdf681f424,27434911,0,0x0,8
tick,0x7ffdf681f424,27435387,0,0x0,8
tick,0x7ffdf681f424,27437376,0,0x0,8
tick,0x7ffdf681f424,27439371,0,0x0,8
tick,0x7ffdf681f424,27441750,0,0x0,8
tick,0x7ffdf681f424,27446760,0,0x0,8
tick,0x7ffdf681f424,27448360,0,0x0,8
tick,0x7ffdf681f424,27450556,0,0x0,8
tick,0x7ffdf681f424,27452516,0,0x0,8
tick,0x7ffdf681f424,27454350,0,0x0,8
tick,0x7ffdf681f424,27456355,0,0x0,8
tick,0x7ffdf681f424,27458398,0,0x0,8
tick,0x7ffdf681f424,27460322,0,0x0,8
tick,0x7ffdf681f424,27462600,0,0x0,8
tick,0x7ffdf681f424,27469501,0,0x0,8
tick,0x7ffdf681f424,27471291,0,0x0,8
tick,0x7ffdf681f424,27473287,0,0x0,8
tick,0x7ffdf681f424,27475385,0,0x0,8
tick,0x7ffdf681f424,27477321,0,0x0,8
tick,0x7ffdf681f424,27479311,0,0x0,8
tick,0x7ffdf681f424,27481290,0,0x0,8
tick,0x7ffdf681f424,27483251,0,0x0,8
tick,0x7ffdf681f424,27485273,0,0x0,8
tick,0x7ffdf681f424,27487252,0,0x0,8
tick,0x7ffdf681f424,27489233,0,0x0,8
tick,0x7ffdf681f424,27491237,0,0x0,8
tick,0x7ffdf681f424,27493225,0,0x0,8
tick,0x7ffdf681f424,27495232,0,0x0,8
tick,0x7ffdf681f424,27497211,0,0x0,8
tick,0x7ffdf681f424,27499205,0,0x0,8
tick,0x7ffdf681f424,27501201,0,0x0,8
tick,0x7ffdf681f424,27514719,0,0x0,8
tick,0x7ffdf681f424,27516170,0,0x0,8
tick,0x7ffdf681f424,27518567,0,0x0,8
tick,0x7ffdf681f424,27520178,0,0x0,8
tick,0x7ffdf681f424,27522149,0,0x0,8
tick,0x7ffdf681f424,27524150,0,0x0,8
tick,0x7ffdf681f424,27526134,0,0x0,8
tick,0x7ffdf681f424,27528136,0,0x0,8
tick,0x7ffdf681f424,27530125,0,0x0,8
tick,0x7ffdf681f424,27532124,0,0x0,8
tick,0x7ffdf681f424,27534124,0,0x0,8
tick,0x7ffdf681f424,27536130,0,0x0,8
tick,0x7ffdf681f424,27538149,0,0x0,8
tick,0x7ffdf681f424,27540099,0,0x0,8
tick,0x7ffdf681f424,27542103,0,0x0,8
tick,0x7ffdf681f424,27544103,0,0x0,8
tick,0x7ffdf681f424,27546084,0,0x0,8
tick,0x7ffdf681f424,27548080,0,0x0,8
tick,0x7ffdf681f424,27550077,0,0x0,8
tick,0x7ffdf681f424,27552067,0,0x0,8
tick,0x7ffdf681f424,27554065,0,0x0,8
tick,0x7ffdf681f424,27556101,0,0x0,8
tick,0x7ffdf681f424,27558053,0,0x0,8
tick,0x7ffdf681f424,27560058,0,0x0,8
tick,0x7ffdf681f424,27562044,0,0x0,8
tick,0x7ffdf681f424,27564040,0,0x0,8
tick,0x7ffdf681f424,27566029,0,0x0,8
tick,0x7ffdf681f424,27568050,0,0x0,8
tick,0x7ffdf681f424,27570035,0,0x0,8
tick,0x7ffdf681f424,27572032,0,0x0,8
tick,0x7ffdf681f424,27574010,0,0x0,8
tick,0x7ffdf681f424,27576003,0,0x0,8
tick,0x7ffdf681f424,27579663,0,0x0,8
tick,0x7ffdf681f424,27595058,0,0x0,8
tick,0x7ffdf681f424,27595089,0,0x0,8
tick,0x7ffdf681f424,27596950,0,0x0,8
tick,0x7ffdf681f424,27598957,0,0x0,8
tick,0x7ffdf681f424,27600993,0,0x0,8
tick,0x7ffdf681f424,27602966,0,0x0,8
tick,0x7ffdf681f424,27604945,0,0x0,8
tick,0x7ffdf681f424,27607093,0,0x0,8
tick,0x7ffdf681f424,27608923,0,0x0,8
tick,0x7ffdf681f424,27610915,0,0x0,8
tick,0x7ffdf681f424,27612908,0,0x0,8
tick,0x7ffdf681f424,27626935,0,0x0,8
tick,0x7ffdf681f424,27628866,0,0x0,8
tick,0x7ffdf681f424,27631056,0,0x0,8
tick,0x7ffdf681f424,27632879,0,0x0,8
tick,0x7ffdf681f424,27634921,0,0x0,8
tick,0x7ffdf681f424,27636883,0,0x0,8
tick,0x7ffdf681f424,27638836,0,0x0,8
tick,0x7ffdf681f424,27640828,0,0x0,8
tick,0x7ffdf681f424,27642822,0,0x0,8
tick,0x7ffdf681f424,27644821,0,0x0,8
tick,0x7ffdf681f424,27646820,0,0x0,8
tick,0x7ffdf681f424,27648812,0,0x0,8
tick,0x7ffdf681f424,27650801,0,0x0,8
tick,0x7ffdf681f424,27652800,0,0x0,8
tick,0x7ffdf681f424,27654822,0,0x0,8
tick,0x7ffdf681f424,27656786,0,0x0,8
tick,0x7ffdf681f424,27658782,0,0x0,8
tick,0x7ffdf681f424,27660779,0,0x0,8
tick,0x7ffdf681f424,27662796,0,0x0,8
tick,0x7ffdf681f424,27664764,0,0x0,8
tick,0x7ffdf681f424,27666762,0,0x0,8
tick,0x7ffdf681f424,27668764,0,0x0,8
tick,0x7ffdf681f424,27683157,0,0x0,8
tick,0x7ffdf681f424,27684737,0,0x0,8
tick,0x7ffdf681f424,27687629,0,0x0,8
tick,0x7ffdf681f424,27688746,0,0x0,8
tick,0x7ffdf681f424,27690723,0,0x0,8
tick,0x7ffdf681f424,27692701,0,0x0,8
tick,0x7ffdf681f424,27694695,0,0x0,8
tick,0x7ffdf681f424,27696680,0,0x0,8
tick,0x7ffdf681f424,27698675,0,0x0,8
tick,0x7ffdf681f424,27700671,0,0x0,8
tick,0x7ffdf681f424,27702676,0,0x0,8
tick,0x7ffdf681f424,27704662,0,0x0,8
tick,0x7ffdf681f424,27706653,0,0x0,8
tick,0x7ffdf681f424,27708650,0,0x0,8
tick,0x7ffdf681f424,27710648,0,0x0,8
tick,0x7ffdf681f424,27712639,0,0x0,8
tick,0x7ffdf681f424,27714637,0,0x0,8
tick,0x7ffdf681f424,27716646,0,0x0,8
tick,0x7ffdf681f424,27718637,0,0x0,8
tick,0x7ffdf681f424,27720630,0,0x0,8
tick,0x7ffdf681f424,27723105,0,0x0,8
tick,0x7ffdf681f424,27724612,0,0x0,8
tick,0x7ffdf681f424,27729811,0,0x0,8
tick,0x7ffdf681f424,27733217,0,0x0,8
tick,0x7ffdf681f424,27741272,0,0x0,8
tick,0x7ffdf681f424,27745645,0,0x0,8
tick,0x7ffdf681f424,27748075,0,0x0,8
tick,0x7ffdf681f424,27752995,0,0x0,8
tick,0x7ffdf681f424,27763466,0,0x0,8
tick,0x7ffdf681f424,27764509,0,0x0,8
tick,0x7ffdf681f424,27766498,0,0x0,8
tick,0x7ffdf681f424,27768513,0,0x0,8
tick,0x7ffdf681f424,27770497,0,0x0,8
tick,0x7ffdf681f424,27773403,0,0x0,8
tick,0x7ffdf681f424,27774518,0,0x0,8
tick,0x7ffdf681f424,27776509,0,0x0,8
tick,0x7ffdf681f424,27778465,0,0x0,8
tick,0x7ffdf681f424,27780459,0,0x0,8
tick,0x7ffdf681f424,27782466,0,0x0,8
tick,0x7ffdf681f424,27784455,0,0x0,8
tick,0x7ffdf681f424,27786445,0,0x0,8
tick,0x7ffdf681f424,27788440,0,0x0,8
tick,0x7ffdf681f424,27790462,0,0x0,8
tick,0x7ffdf681f424,27792433,0,0x0,8
tick,0x7ffdf681f424,27794611,0,0x0,8
tick,0x7ffdf681f424,27796416,0,0x0,8
tick,0x7ffdf681f424,27798412,0,0x0,8
tick,0x7ffdf681f424,27800405,0,0x0,8
tick,0x7ffdf681f424,27802401,0,0x0,8
tick,0x7ffdf681f424,27804393,0,0x0,8
tick,0x7ffdf681f424,27806400,0,0x0,8
tick,0x7ffdf681f424,27808382,0,0x0,8
tick,0x7ffdf681f424,27810378,0,0x0,8
tick,0x7ffdf681f424,27812490,0,0x0,8
tick,0x7ffdf681f424,27814367,0,0x0,8
tick,0x7ffdf681f424,27816364,0,0x0,8
tick,0x7ffdf681f424,27818361,0,0x0,8
tick,0x7ffdf681f424,27820355,0,0x0,8
tick,0x7ffdf681f424,27822344,0,0x0,8
tick,0x7ffdf681f424,27824346,0,0x0,8
tick,0x7ffdf681f424,27826334,0,0x0,8
tick,0x7ffdf681f424,27828334,0,0x0,8
tick,0x7ffdf681f424,27830333,0,0x0,8
tick,0x7ffdf681f424,27832319,0,0x0,8
tick,0x7ffdf681f424,27834316,0,0x0,8
tick,0x7ffdf681f424,27836319,0,0x0,8
tick,0x7ffdf681f424,27838303,0,0x0,8
tick,0x7ffdf681f424,27840297,0,0x0,8
tick,0x7ffdf681f424,27843354,0,0x0,8
tick,0x7ffdf681f424,27844894,0,0x0,8
tick,0x7ffdf681f424,27856197,0,0x0,8
tick,0x7ffdf681f424,27857253,0,0x0,8
tick,0x7ffdf681f424,27859251,0,0x0,8
tick,0x7ffdf681f424,27861277,0,0x0,8
tick,0x7ffdf681f424,27863241,0,0x0,8
tick,0x7ffdf681f424,27865460,0,0x0,8
tick,0x7ffdf681f424,27867243,0,0x0,8
tick,0x7ffdf681f424,27869249,0,0x0,8
tick,0x7ffdf681f424,27871252,0,0x0,8
tick,0x7ffdf681f424,27873467,0,0x0,8
tick,0x7ffdf681f424,27875207,0,0x0,8
tick,0x7ffdf681f424,27877254,0,0x0,8
tick,0x7ffdf681f424,27879215,0,0x0,8
tick,0x7ffdf681f424,27881191,0,0x0,8
tick,0x7ffdf681f424,27883184,0,0x0,8
tick,0x7ffdf681f424,27885186,0,0x0,8
tick,0x7ffdf681f424,27887172,0,0x0,8
tick,0x7ffdf681f424,27889171,0,0x0,8
tick,0x7ffdf681f424,27891231,0,0x0,8
tick,0x7ffdf681f424,27893178,0,0x0,8
tick,0x7ffdf681f424,27895249,0,0x0,8
tick,0x7ffdf681f424,27897163,0,0x0,8
tick,0x7ffdf681f424,27899136,0,0x0,8
tick,0x7ffdf681f424,27901136,0,0x0,8
tick,0x7ffdf681f424,27903131,0,0x0,8
tick,0x7ffdf681f424,27905121,0,0x0,8
tick,0x7ffdf681f424,27907123,0,0x0,8
tick,0x7ffdf681f424,27909110,0,0x0,8
tick,0x7ffdf681f424,27911114,0,0x0,8
tick,0x7ffdf681f424,27913105,0,0x0,8
tick,0x7ffdf681f424,27915119,0,0x0,8
tick,0x7ffdf681f424,27918043,0,0x0,8
tick,0x7ffdf681f424,27919305,0,0x0,8
tick,0x7ffdf681f424,27921085,0,0x0,8
tick,0x7ffdf681f424,27923073,0,0x0,8
tick,0x7ffdf681f424,27925069,0,0x0,8
tick,0x7ffdf681f424,27928012,0,0x0,8
tick,0x7ffdf681f424,27937960,0,0x0,8
tick,0x7ffdf681f424,27942721,0,0x0,8
tick,0x7ffdf681f424,27944023,0,0x0,8
tick,0x7ffdf681f424,27946017,0,0x0,8
tick,0x7ffdf681f424,27948063,0,0x0,8
tick,0x7ffdf681f424,27950006,0,0x0,8
tick,0x7ffdf681f424,27952013,0,0x0,8
tick,0x7ffdf681f424,27953991,0,0x0,8
tick,0x7ffdf681f424,27955985,0,0x0,8
tick,0x7ffdf681f424,27957990,0,0x0,8
tick,0x7ffdf681f424,27959988,0,0x0,8
tick,0x7ffdf681f424,27961972,0,0x0,8
tick,0x7ffdf681f424,27963970,0,0x0,8
tick,0x7ffdf681f424,27965962,0,0x0,8
tick,0x7ffdf681f424,27967958,0,0x0,8
tick,0x7ffdf681f424,27969952,0,0x0,8
tick,0x7ffdf681f424,27971957,0,0x0,8
tick,0x7ffdf681f424,27973947,0,0x0,8
tick,0x7ffdf681f424,27975935,0,0x0,8
tick,0x7ffdf681f424,27977939,0,0x0,8
tick,0x7ffdf681f424,27979925,0,0x0,8
tick,0x7ffdf681f424,27981918,0,0x0,8
tick,0x7ffdf681f424,27983926,0,0x0,8
tick,0x7ffdf681f424,27986008,0,0x0,8
tick,0x7ffdf681f424,27987904,0,0x0,8
tick,0x7ffdf681f424,27989901,0,0x0,8
tick,0x7ffdf681f424,27991890,0,0x0,8
tick,0x7ffdf681f424,27993898,0,0x0,8
tick,0x7ffdf681f424,27995883,0,0x0,8
tick,0x7ffdf681f424,27997874,0,0x0,8
tick,0x7ffdf681f424,27999868,0,0x0,8
tick,0x7ffdf681f424,28001865,0,0x0,8
tick,0x7ffdf681f424,28003880,0,0x0,8
tick,0x7ffdf681f424,28018296,0,0x0,8
tick,0x7ffdf681f424,28019820,0,0x0,8
tick,0x7ffdf681f424,28021813,0,0x0,8
tick,0x7ffdf681f424,28023941,0,0x0,8
tick,0x7ffdf681f424,28026204,0,0x0,8
tick,0x7ffdf681f424,28027853,0,0x0,8
tick,0x7ffdf681f424,28029804,0,0x0,8
tick,0x7ffdf681f424,28031798,0,0x0,8
tick,0x7ffdf681f424,28033781,0,0x0,8
tick,0x7ffdf681f424,28035779,0,0x0,8
tick,0x7ffdf681f424,28037766,0,0x0,8
tick,0x7ffdf681f424,28039764,0,0x0,8
tick,0x7ffdf681f424,28041759,0,0x0,8
tick,0x7ffdf681f424,28044934,0,0x0,8
tick,0x7ffdf681f424,28046840,0,0x0,8
tick,0x7ffdf681f424,28048803,0,0x0,8
tick,0x7ffdf681f424,28060069,0,0x0,8
tick,0x7ffdf681f424,28061707,0,0x0,8
tick,0x7ffdf681f424,28063701,0,0x0,8
tick,0x7ffdf681f424,28065821,0,0x0,8
tick,0x7ffdf681f424,28067959,0,0x0,8
tick,0x7ffdf681f424,28069705,0,0x0,8
tick,0x7ffdf681f424,28071703,0,0x0,8
tick,0x7ffdf681f424,28073672,0,0x0,8
tick,0x7ffdf681f424,28075669,0,0x0,8
tick,0x7ffdf681f424,28077664,0,0x0,8
tick,0x7ffdf681f424,28079659,0,0x0,8
tick,0x7ffdf681f424,28081657,0,0x0,8
tick,0x7ffdf681f424,28083645,0,0x0,8
tick,0x7ffdf681f424,28085642,0,0x0,8
tick,0x7ffdf681f424,28087632,0,0x0,8
tick,0x7ffdf681f424,28089630,0,0x0,8
tick,0x7ffdf681f424,28091624,0,0x0,8
tick,0x7ffdf681f424,28109362,0,0x0,8
tick,0x7ffdf681f424,28110583,0,0x0,8
tick,0x7ffdf681f424,28112575,0,0x0,8
tick,0x7ffdf681f424,28114843,0,0x0,8
tick,0x7ffdf681f424,28116575,0,0x0,8
tick,0x7ffdf681f424,28118606,0,0x0,8
tick,0x7ffdf681f424,28120566,0,0x0,8
tick,0x7ffdf681f424,28122552,0,0x0,8
tick,0x7ffdf681f424,28124536,0,0x0,8
tick,0x7ffdf681f424,28126530,0,0x0,8
tick,0x7ffdf681f424,28128525,0,0x0,8
tick,0x7ffdf681f424,28130554,0,0x0,8
tick,0x7ffdf681f424,28132514,0,0x0,8
tick,0x7ffdf681f424,28134510,0,0x0,8
tick,0x7ffdf681f424,28136502,0,0x0,8
tick,0x7ffdf681f424,28138502,0,0x0,8
tick,0x7ffdf681f424,28140493,0,0x0,8
tick,0x7ffdf681f424,28142504,0,0x0,8
tick,0x7ffdf681f424,28144488,0,0x0,8
tick,0x7ffdf681f424,28146479,0,0x0,8
tick,0x7ffdf681f424,28148484,0,0x0,8
tick,0x7ffdf681f424,28150477,0,0x0,8
tick,0x7ffdf681f424,28152519,0,0x0,8
tick,0x7ffdf681f424,28154459,0,0x0,8
tick,0x7ffdf681f424,28156472,0,0x0,8
tick,0x7ffdf681f424,28158457,0,0x0,8
tick,0x7ffdf681f424,28160441,0,0x0,8
tick,0x7ffdf681f424,28162834,0,0x0,8
tick,0x7ffdf681f424,28164430,0,0x0,8
tick,0x7ffdf681f424,28166423,0,0x0,8
tick,0x7ffdf681f424,28168427,0,0x0,8
tick,0x7ffdf681f424,28170422,0,0x0,8
tick,0x7ffdf681f424,28172424,0,0x0,8
tick,0x7ffdf681f424,28176027,0,0x0,8
tick,0x7ffdf681f424,28178697,0,0x0,8
tick,0x7ffdf681f424,28191546,0,0x0,8
tick,0x7ffdf681f424,28193357,0,0x0,8
tick,0x7ffdf681f424,28195352,0,0x0,8
tick,0x7ffdf681f424,28197355,0,0x0,8
tick,0x7ffdf681f424,28199358,0,0x0,8
tick,0x7ffdf681f424,28201344,0,0x0,8
tick,0x7ffdf681f424,28203350,0,0x0,8
tick,0x7ffdf681f424,28205322,0,0x0,8
tick,0x7ffdf681f424,28207342,0,0x0,8
tick,0x7ffdf681f424,28209313,0,0x0,8
tick,0x7ffdf681f424,28211307,0,0x0,8
tick,0x7ffdf681f424,28215770,0,0x0,8
tick,0x7ffdf681f424,28228698,0,0x0,8
tick,0x7ffdf681f424,28230264,0,0x0,8
tick,0x7ffdf681f424,28232264,0,0x0,8
tick,0x7ffdf681f424,28234539,0,0x0,8
tick,0x7ffdf681f424,28236256,0,0x0,8
tick,0x7ffdf681f424,28238305,0,0x0,8
tick,0x7ffdf681f424,28240227,0,0x0,8
tick,0x7ffdf681f424,28242226,0,0x0,8
tick,0x7ffdf681f424,28244219,0,0x0,8
tick,0x7ffdf681f424,28246209,0,0x0,8
tick,0x7ffdf681f424,28248208,0,0x0,8
tick,0x7ffdf681f424,28250203,0,0x0,8
tick,0x7ffdf681f424,28252234,0,0x0,8
tick,0x7ffdf681f424,28254197,0,0x0,8
tick,0x7ffdf681f424,28256191,0,0x0,8
tick,0x7ffdf681f424,28258188,0,0x0,8
tick,0x7ffdf681f424,28260178,0,0x0,8
tick,0x7ffdf681f424,28262188,0,0x0,8
tick,0x7ffdf681f424,28264163,0,0x0,8
tick,0x7ffdf681f424,28266156,0,0x0,8
tick,0x7ffdf681f424,28268182,0,0x0,8
tick,0x7ffdf681f424,28270172,0,0x0,8
tick,0x7ffdf681f424,28272155,0,0x0,8
tick,0x7ffdf681f424,28274136,0,0x0,8
tick,0x7ffdf681f424,28276132,0,0x0,8
tick,0x7ffdf681f424,28278126,0,0x0,8
tick,0x7ffdf681f424,28280122,0,0x0,8
tick,0x7ffdf681f424,28282117,0,0x0,8
tick,0x7ffdf681f424,28284114,0,0x0,8
tick,0x7ffdf681f424,28286915,0,0x0,8
tick,0x7ffdf681f424,28288162,0,0x0,8
tick,0x7ffdf681f424,28290109,0,0x0,8
tick,0x7ffdf681f424,28292579,0,0x0,8
tick,0x7ffdf681f424,28294086,0,0x0,8
tick,0x7ffdf681f424,28296077,0,0x0,8
tick,0x7ffdf681f424,28298087,0,0x0,8
tick,0x7ffdf681f424,28300069,0,0x0,8
tick,0x7ffdf681f424,28302084,0,0x0,8
tick,0x7ffdf681f424,28304122,0,0x0,8
tick,0x7ffdf681f424,28306095,0,0x0,8
tick,0x7ffdf681f424,28308089,0,0x0,8
tick,0x7ffdf681f424,28310047,0,0x0,8
tick,0x7ffdf681f424,28312043,0,0x0,8
tick,0x7ffdf681f424,28314038,0,0x0,8
tick,0x7ffdf681f424,28316025,0,0x0,8
tick,0x7ffdf681f424,28318019,0,0x0,8
tick,0x7ffdf681f424,28320026,0,0x0,8
tick,0x7ffdf681f424,28322013,0,0x0,8
tick,0x7ffdf681f424,28324008,0,0x0,8
tick,0x7ffdf681f424,28325999,0,0x0,8
tick,0x7ffdf681f424,28328004,0,0x0,8
tick,0x7ffdf681f424,28329990,0,0x0,8
tick,0x7ffdf681f424,28331986,0,0x0,8
tick,0x7ffdf681f424,28333980,0,0x0,8
tick,0x7ffdf681f424,28335975,0,0x0,8
tick,0x7ffdf681f424,28337964,0,0x0,8
tick,0x7ffdf681f424,28339960,0,0x0,8
tick,0x7ffdf681f424,28342736,0,0x0,8
tick,0x7ffdf681f424,28345510,0,0x0,8
tick,0x7ffdf681f424,28357499,0,0x0,8
tick,0x7ffdf681f424,28358923,0,0x0,8
tick,0x7ffdf681f424,28360922,0,0x0,8
tick,0x7ffdf681f424,28364884,0,0x0,8
tick,0x7ffdf681f424,28366901,0,0x0,8
tick,0x7ffdf681f424,28368894,0,0x0,8
tick,0x7ffdf681f424,28371261,0,0x0,8
tick,0x7ffdf681f424,28373334,0,0x0,8
tick,0x7ffdf681f424,28374958,0,0x0,8
tick,0x7ffdf681f424,28376870,0,0x0,8
tick,0x7ffdf681f424,28391415,0,0x0,8
tick,0x7ffdf681f424,28391839,0,0x0,8
tick,0x7ffdf681f424,28393829,0,0x0,8
tick,0x7ffdf681f424,28396125,0,0x0,8
tick,0x7ffdf681f424,28397816,0,0x0,8
tick,0x7ffdf681f424,28399807,0,0x0,8
tick,0x7ffdf681f424,28401843,0,0x0,8
tick,0x7ffdf681f424,28403795,0,0x0,8
tick,0x7ffdf681f424,28405785,0,0x0,8
tick,0x7ffdf681f424,28407782,0,0x0,8
tick,0x7ffdf681f424,28409782,0,0x0,8
tick,0x7ffdf681f424,28411772,0,0x0,8
tick,0x7ffdf681f424,28413766,0,0x0,8
tick,0x7ffdf681f424,28415788,0,0x0,8
tick,0x7ffdf681f424,28417752,0,0x0,8
tick,0x7ffdf681f424,28419756,0,0x0,8
tick,0x7ffdf681f424,28421749,0,0x0,8
tick,0x7ffdf681f424,28423812,0,0x0,8
tick,0x7ffdf681f424,28425733,0,0x0,8
tick,0x7ffdf681f424,28427738,0,0x0,8
tick,0x7ffdf681f424,28429722,0,0x0,8
tick,0x7ffdf681f424,28431714,0,0x0,8
tick,0x7ffdf681f424,28433710,0,0x0,8
tick,0x7ffdf681f424,28435707,0,0x0,8
tick,0x7ffdf681f424,28437713,0,0x0,8
tick,0x7ffdf681f424,28439694,0,0x0,8
tick,0x7ffdf681f424,28441688,0,0x0,8
tick,0x7ffdf681f424,28443680,0,0x0,8
tick,0x7ffdf681f424,28445683,0,0x0,8
tick,0x7ffdf681f424,28447670,0,0x0,8
tick,0x7ffdf681f424,28449666,0,0x0,8
tick,0x7ffdf681f424,28451661,0,0x0,8
tick,0x7ffdf681f424,28453656,0,0x0,8
tick,0x7ffdf681f424,28469169,0,0x0,8
tick,0x7ffdf681f424,28471123,0,0x0,8
tick,0x7ffdf681f424,28473229,0,0x0,8
tick,0x7ffdf681f424,28475114,0,0x0,8
tick,0x7ffdf681f424,28477577,0,0x0,8
tick,0x7ffdf681f424,28479123,0,0x0,8
tick,0x7ffdf681f424,28481132,0,0x0,8
tick,0x7ffdf681f424,28483086,0,0x0,8
tick,0x7ffdf681f424,28485083,0,0x0,8
tick,0x7ffdf681f424,28487078,0,0x0,8
tick,0x7ffdf681f424,28489072,0,0x0,8
tick,0x7ffdf681f424,28491068,0,0x0,8
tick,0x7ffdf681f424,28493062,0,0x0,8
tick,0x7ffdf681f424,28495055,0,0x0,8
tick,0x7ffdf681f424,28497047,0,0x0,8
tick,0x7ffdf681f424,28499042,0,0x0,8
tick,0x7ffdf681f424,28501037,0,0x0,8
tick,0x7ffdf681f424,28503043,0,0x0,8
tick,0x7ffdf681f424,28505044,0,0x0,8
tick,0x7ffdf681f424,28507020,0,0x0,8
tick,0x7ffdf681f424,28509024,0,0x0,8
tick,0x7ffdf681f424,28511017,0,0x0,8
tick,0x7ffdf681f424,28513011,0,0x0,8
tick,0x7ffdf681f424,28515007,0,0x0,8
tick,0x7ffdf681f424,28516996,0,0x0,8
tick,0x7ffdf681f424,28518991,0,0x0,8
tick,0x7ffdf681f424,28521082,0,0x0,8
tick,0x7ffdf681f424,28534455,0,0x0,8
tick,0x7ffdf681f424,28535990,0,0x0,8
tick,0x7ffdf681f424,28537943,0,0x0,8
tick,0x7ffdf681f424,28539996,0,0x0,8
tick,0x7ffdf681f424,28541928,0,0x0,8
tick,0x7ffdf681f424,28543983,0,0x0,8
tick,0x7ffdf681f424,28545977,0,0x0,8
tick,0x7ffdf681f424,28547980,0,0x0,8
tick,0x7ffdf681f424,28549965,0,0x0,8
tick,0x7ffdf681f424,28551909,0,0x0,8
tick,0x7ffdf681f424,28553898,0,0x0,8
tick,0x7ffdf681f424,28555891,0,0x0,8
tick,0x7ffdf681f424,28557904,0,0x0,8
tick,0x7ffdf681f424,28559889,0,0x0,8
tick,0x7ffdf681f424,28561386,0,0x0,8
tick,0x7ffdf681f424,28563383,0,0x0,8
tick,0x7ffdf681f424,28565376,0,0x0,8
tick,0x7ffdf681f424,28567866,0,0x0,8
tick,0x7ffdf681f424,28569947,0,0x0,8
tick,0x7ffdf681f424,28577635,0,0x0,8
tick,0x7ffdf681f424,28579358,0,0x0,8
tick,0x7ffdf681f424,28581387,0,0x0,8
tick,0x7ffdf681f424,28583330,0,0x0,8
tick,0x7ffdf681f424,28585335,0,0x0,8
tick,0x7ffdf681f424,28587325,0,0x0,8
tick,0x7ffdf681f424,28589344,0,0x0,8
tick,0x7ffdf681f424,28591326,0,0x0,8
tick,0x7ffdf681f424,28593348,0,0x0,8
tick,0x7ffdf681f424,28595297,0,0x0,8
tick,0x7ffdf681f424,28597296,0,0x0,8
tick,0x7ffdf681f424,28599283,0,0x0,8
tick,0x7ffdf681f424,28601293,0,0x0,8
tick,0x7ffdf681f424,28603394,0,0x0,8
tick,0x7ffdf681f424,28605268,0,0x0,8
tick,0x7ffdf681f424,28607263,0,0x0,8
tick,0x7ffdf681f424,28609259,0,0x0,8
tick,0x7ffdf681f424,28611254,0,0x0,8
tick,0x7ffdf681f424,28613247,0,0x0,8
tick,0x7ffdf681f424,28615256,0,0x0,8
tick,0x7ffdf681f424,28617239,0,0x0,8
tick,0x7ffdf681f424,28619245,0,0x0,8
tick,0x7ffdf681f424,28621252,0,0x0,8
tick,0x7ffdf681f424,28623222,0,0x0,8
tick,0x7ffdf681f424,28625215,0,0x0,8
tick,0x7ffdf681f424,28627210,0,0x0,8
tick,0x7ffdf681f424,28629205,0,0x0,8
tick,0x7ffdf681f424,28631194,0,0x0,8
tick,0x7ffdf681f424,28633193,0,0x0,8
tick,0x7ffdf681f424,28635190,0,0x0,8
tick,0x7ffdf681f424,28637993,0,0x0,8
tick,0x7ffdf681f424,28643496,0,0x0,8
tick,0x7ffdf681f424,28645588,0,0x0,8
tick,0x7ffdf681f424,28651776,0,0x0,8
tick,0x7ffdf681f424,28653140,0,0x0,8
tick,0x7ffdf681f424,28655136,0,0x0,8
tick,0x7ffdf681f424,28657169,0,0x0,8
tick,0x7ffdf681f424,28659154,0,0x0,8
tick,0x7ffdf681f424,28661125,0,0x0,8
tick,0x7ffdf681f424,28662732,0,0x0,8
tick,0x7ffdf681f424,28664702,0,0x0,8
tick,0x7ffdf681f424,28666639,0,0x0,8
tick,0x7ffdf681f424,28668613,0,0x0,8
tick,0x7ffdf681f424,28670602,0,0x0,8
tick,0x7ffdf681f424,28672596,0,0x0,8
tick,0x7ffdf681f424,28674591,0,0x0,8
tick,0x7ffdf681f424,28689915,0,0x0,8
tick,0x7ffdf681f424,28689948,0,0x0,8
tick,0x7ffdf681f424,28691550,0,0x0,8
tick,0x7ffdf681f424,28693546,0,0x0,8
tick,0x7ffdf681f424,28695996,0,0x0,8
tick,0x7ffdf681f424,28697588,0,0x0,8
tick,0x7ffdf681f424,28699569,0,0x0,8
tick,0x7ffdf681f424,28701572,0,0x0,8
tick,0x7ffdf681f424,28703522,0,0x0,8
tick,0x7ffdf681f424,28705509,0,0x0,8
tick,0x7ffdf681f424,28707503,0,0x0,8
tick,0x7ffdf681f424,28709498,0,0x0,8
tick,0x7ffdf681f424,28711512,0,0x0,8
tick,0x7ffdf681f424,28713486,0,0x0,8
tick,0x7ffdf681f424,28715482,0,0x0,8
tick,0x7ffdf681f424,28717477,0,0x0,8
tick,0x7ffdf681f424,28719474,0,0x0,8
tick,0x7ffdf681f424,28721476,0,0x0,8
tick,0x7ffdf681f424,28723494,0,0x0,8
tick,0x7ffdf681f424,28725466,0,0x0,8
tick,0x7ffdf681f424,28727452,0,0x0,8
tick,0x7ffdf681f424,28729691,0,0x0,8
tick,0x7ffdf681f424,28731645,0,0x0,8
tick,0x7ffdf681f424,28733438,0,0x0,8
tick,0x7ffdf681f424,28735498,0,0x0,8
tick,0x7ffdf681f424,28737476,0,0x0,8
tick,0x7ffdf681f424,28739424,0,0x0,8
tick,0x7ffdf681f424,28741913,0,0x0,8
tick,0x7ffdf681f424,28754184,0,0x0,8
tick,0x7ffdf681f424,28755529,0,0x0,8
tick,0x7ffdf681f424,28757374,0,0x0,8
tick,0x7ffdf681f424,28759376,0,0x0,8
tick,0x7ffdf681f424,28761389,0,0x0,8
tick,0x7ffdf681f424,28762925,0,0x0,8
tick,0x7ffdf681f424,28764916,0,0x0,8
tick,0x7ffdf681f424,28766876,0,0x0,8
tick,0x7ffdf681f424,28768851,0,0x0,8
tick,0x7ffdf681f424,28770858,0,0x0,8
tick,0x7ffdf681f424,28772850,0,0x0,8
tick,0x7ffdf681f424,28774875,0,0x0,8
tick,0x7ffdf681f424,28776830,0,0x0,8
tick,0x7ffdf681f424,28778823,0,0x0,8
tick,0x7ffdf681f424,28780816,0,0x0,8
tick,0x7ffdf681f424,28782814,0,0x0,8
tick,0x7ffdf681f424,28784808,0,0x0,8
tick,0x7ffdf681f424,28786816,0,0x0,8
tick,0x7ffdf681f424,28791513,0,0x0,8
tick,0x7ffdf681f424,28794535,0,0x0,8
tick,0x7ffdf681f424,28795880,0,0x0,8
tick,0x7ffdf681f424,28798087,0,0x0,8
tick,0x7ffdf681f424,28799818,0,0x0,8
tick,0x7ffdf681f424,28802059,0,0x0,8
tick,0x7ffdf681f424,28805346,0,0x0,8
tick,0x7ffdf681f424,28806748,0,0x0,8
tick,0x7ffdf681f424,28809083,0,0x0,8
tick,0x7ffdf681f424,28810815,0,0x0,8
tick,0x7ffdf681f424,28812761,0,0x0,8
tick,0x7ffdf681f424,28814800,0,0x0,8
tick,0x7ffdf681f424,28816720,0,0x0,8
tick,0x7ffdf681f424,28818770,0,0x0,8
tick,0x7ffdf681f424,28820707,0,0x0,8
tick,0x7ffdf681f424,28822712,0,0x0,8
tick,0x7ffdf681f424,28824700,0,0x0,8
tick,0x7ffdf681f424,28826695,0,0x0,8
tick,0x7ffdf681f424,28828690,0,0x0,8
tick,0x7ffdf681f424,28830685,0,0x0,8
tick,0x7ffdf681f424,28833186,0,0x0,8
tick,0x7ffdf681f424,28847772,0,0x0,8
tick,0x7ffdf681f424,28849670,0,0x0,8
tick,0x7ffdf681f424,28851639,0,0x0,8
tick,0x7ffdf681f424,28853636,0,0x0,8
tick,0x7ffdf681f424,28855770,0,0x0,8
tick,0x7ffdf681f424,28857619,0,0x0,8
tick,0x7ffdf681f424,28859612,0,0x0,8
tick,0x7ffdf681f424,28861600,0,0x0,8
tick,0x7ffdf681f424,28863593,0,0x0,8
tick,0x7ffdf681f424,28865585,0,0x0,8
tick,0x7ffdf681f424,28867581,0,0x0,8
tick,0x7ffdf681f424,28869596,0,0x0,8
tick,0x7ffdf681f424,28871574,0,0x0,8
tick,0x7ffdf681f424,28873564,0,0x0,8
tick,0x7ffdf681f424,28875567,0,0x0,8
tick,0x7ffdf681f424,28877554,0,0x0,8
tick,0x7ffdf681f424,28879550,0,0x0,8
tick,0x7ffdf681f424,28881551,0,0x0,8
tick,0x7ffdf681f424,28883541,0,0x0,8
tick,0x7ffdf681f424,28885544,0,0x0,8
tick,0x7ffdf681f424,28887532,0,0x0,8
tick,0x7ffdf681f424,28889525,0,0x0,8
tick,0x7ffdf681f424,28894663,0,0x0,8
tick,0x7ffdf681f424,28905582,0,0x0,8
tick,0x7ffdf681f424,28907516,0,0x0,8
tick,0x7ffdf681f424,28909479,0,0x0,8
tick,0x7ffdf681f424,28911472,0,0x0,8
tick,0x7ffdf681f424,28914498,0,0x0,8
tick,0x7ffdf681f424,28916465,0,0x0,8
tick,0x7ffdf681f424,28918630,0,0x0,8
tick,0x7ffdf681f424,28920447,0,0x0,8
tick,0x7ffdf681f424,28922439,0,0x0,8
tick,0x7ffdf681f424,28924425,0,0x0,8
tick,0x7ffdf681f424,28926444,0,0x0,8
tick,0x7ffdf681f424,28929619,0,0x0,8
tick,0x7ffdf681f424,28931688,0,0x0,8
tick,0x7ffdf681f424,28933482,0,0x0,8
tick,0x7ffdf681f424,28935527,0,0x0,8
tick,0x7ffdf681f424,28937434,0,0x0,8
tick,0x7ffdf681f424,28939588,0,0x0,8
tick,0x7ffdf681f424,28941438,0,0x0,8
tick,0x7ffdf681f424,28943731,0,0x0,8
tick,0x7ffdf681f424,28945380,0,0x0,8
tick,0x7ffdf681f424,28947373,0,0x0,8
tick,0x7ffdf681f424,28949375,0,0x0,8
tick,0x7ffdf681f424,28951375,0,0x0,8
tick,0x7ffdf681f424,28953435,0,0x0,8
tick,0x7ffdf681f424,28955355,0,0x0,8
tick,0x7ffdf681f424,28957480,0,0x0,8
tick,0x7ffdf681f424,28970691,0,0x0,8
tick,0x7ffdf681f424,28972347,0,0x0,8
tick,0x7ffdf681f424,28974301,0,0x0,8
tick,0x7ffdf681f424,28976439,0,0x0,8
tick,0x7ffdf681f424,28978490,0,0x0,8
tick,0x7ffdf681f424,28980551,0,0x0,8
tick,0x7ffdf681f424,28982299,0,0x0,8
tick,0x7ffdf681f424,28984340,0,0x0,8
tick,0x7ffdf681f424,28986271,0,0x0,8
tick,0x7ffdf681f424,28988270,0,0x0,8
tick,0x7ffdf681f424,28990262,0,0x0,8
tick,0x7ffdf681f424,28992252,0,0x0,8
tick,0x7ffdf681f424,28994247,0,0x0,8
tick,0x7ffdf681f424,28996241,0,0x0,8
tick,0x7ffdf681f424,28998237,0,0x0,8
tick,0x7ffdf681f424,29000226,0,0x0,8
tick,0x7ffdf681f424,29002221,0,0x0,8
tick,0x7ffdf681f424,29004226,0,0x0,8
tick,0x7ffdf681f424,29006215,0,0x0,8
tick,0x7ffdf681f424,29008205,0,0x0,8
tick,0x7ffdf681f424,29010211,0,0x0,8
tick,0x7ffdf681f424,29012199,0,0x0,8
tick,0x7ffdf681f424,29014977,0,0x0,8
tick,0x7ffdf681f424,29027591,0,0x0,8
tick,0x7ffdf681f424,29027629,0,0x0,8
tick,0x7ffdf681f424,29029177,0,0x0,8
tick,0x7ffdf681f424,29031147,0,0x0,8
tick,0x7ffdf681f424,29033223,0,0x0,8
tick,0x7ffdf681f424,29035586,0,0x0,8
tick,0x7ffdf681f424,29037139,0,0x0,8
tick,0x7ffdf681f424,29039138,0,0x0,8
tick,0x7ffdf681f424,29044409,0,0x0,8
tick,0x7ffdf681f424,29046175,0,0x0,8
tick,0x7ffdf681f424,29049109,0,0x0,8
tick,0x7ffdf681f424,29058885,0,0x0,8
tick,0x7ffdf681f424,29060068,0,0x0,8
tick,0x7ffdf681f424,29062107,0,0x0,8
tick,0x7ffdf681f424,29064058,0,0x0,8
tick,0x7ffdf681f424,29066053,0,0x0,8
tick,0x7ffdf681f424,29068050,0,0x0,8
tick,0x7ffdf681f424,29070098,0,0x0,8
tick,0x7ffdf681f424,29072512,0,0x0,8
tick,0x7ffdf681f424,29074044,0,0x0,8
tick,0x7ffdf681f424,29076025,0,0x0,8
tick,0x7ffdf681f424,29078017,0,0x0,8
tick,0x7ffdf681f424,29080015,0,0x0,8
tick,0x7ffdf681f424,29082034,0,0x0,8
tick,0x7ffdf681f424,29084009,0,0x0,8
tick,0x7ffdf681f424,29086009,0,0x0,8
tick,0x7ffdf681f424,29087994,0,0x0,8
tick,0x7ffdf681f424,29090002,0,0x0,8
tick,0x7ffdf681f424,29091995,0,0x0,8
tick,0x7ffdf681f424,29093988,0,0x0,8
tick,0x7ffdf681f424,29095975,0,0x0,8
tick,0x7ffdf681f424,29097975,0,0x0,8
tick,0x7ffdf681f424,29099957,0,0x0,8
tick,0x7ffdf681f424,29101950,0,0x0,8
tick,0x7ffdf681f424,29103992,0,0x0,8
tick,0x7ffdf681f424,29105963,0,0x0,8
tick,0x7ffdf681f424,29107945,0,0x0,8
tick,0x7ffdf681f424,29110100,0,0x0,8
tick,0x7ffdf681f424,29111931,0,0x0,8
tick,0x7ffdf681f424,29113925,0,0x0,8
tick,0x7ffdf681f424,29115965,0,0x0,8
tick,0x7ffdf681f424,29117914,0,0x0,8
tick,0x7ffdf681f424,29119909,0,0x0,8
tick,0x7ffdf681f424,29121905,0,0x0,8
tick,0x7ffdf681f424,29123912,0,0x0,8
tick,0x7ffdf681f424,29125933,0,0x0,8
tick,0x7ffdf681f424,29130095,0,0x0,8
tick,0x7ffdf681f424,29132513,0,0x0,8
tick,0x7ffdf681f424,29141415,0,0x0,8
tick,0x7ffdf681f424,29142908,0,0x0,8
tick,0x7ffdf681f424,29144884,0,0x0,8
tick,0x7ffdf681f424,29146945,0,0x0,8
tick,0x7ffdf681f424,29148987,0,0x0,8
tick,0x7ffdf681f424,29150874,0,0x0,8
tick,0x7ffdf681f424,29152824,0,0x0,8
tick,0x7ffdf681f424,29154905,0,0x0,8
tick,0x7ffdf681f424,29157433,0,0x0,8
tick,0x7ffdf681f424,29170343,0,0x0,8
tick,0x7ffdf681f424,29171809,0,0x0,8
tick,0x7ffdf681f424,29173770,0,0x0,8
tick,0x7ffdf681f424,29175831,0,0x0,8
tick,0x7ffdf681f424,29177859,0,0x0,8
tick,0x7ffdf681f424,29179761,0,0x0,8
tick,0x7ffdf681f424,29181956,0,0x0,8
tick,0x7ffdf681f424,29183739,0,0x0,8
tick,0x7ffdf681f424,29185741,0,0x0,8
tick,0x7ffdf681f424,29187729,0,0x0,8
tick,0x7ffdf681f424,29189721,0,0x0,8
tick,0x7ffdf681f424,29191719,0,0x0,8
tick,0x7ffdf681f424,29193712,0,0x0,8
tick,0x7ffdf681f424,29195706,0,0x0,8
tick,0x7ffdf681f424,29197696,0,0x0,8
tick,0x7ffdf681f424,29199693,0,0x0,8
tick,0x7ffdf681f424,29201690,0,0x0,8
tick,0x7ffdf681f424,29203697,0,0x0,8
tick,0x7ffdf681f424,29205678,0,0x0,8
tick,0x7ffdf681f424,29207671,0,0x0,8
tick,0x7ffdf681f424,29209668,0,0x0,8
tick,0x7ffdf681f424,29211665,0,0x0,8
tick,0x7ffdf681f424,29213663,0,0x0,8
tick,0x7ffdf681f424,29215683,0,0x0,8
tick,0x7ffdf681f424,29217648,0,0x0,8
tick,0x7ffdf681f424,29219648,0,0x0,8
tick,0x7ffdf681f424,29232625,0,0x0,8
tick,0x7ffdf681f424,29234609,0,0x0,8
tick,0x7ffdf681f424,29236600,0,0x0,8
tick,0x7ffdf681f424,29238590,0,0x0,8
tick,0x7ffdf681f424,29240589,0,0x0,8
tick,0x7ffdf681f424,29242623,0,0x0,8
tick,0x7ffdf681f424,29244576,0,0x0,8
tick,0x7ffdf681f424,29246577,0,0x0,8
tick,0x7ffdf681f424,29248566,0,0x0,8
tick,0x7ffdf681f424,29254706,0,0x0,8
tick,0x7ffdf681f424,29256555,0,0x0,8
tick,0x7ffdf681f424,29260725,0,0x0,8
tick,0x7ffdf681f424,29265275,0,0x0,8
tick,0x7ffdf681f424,29266523,0,0x0,8
tick,0x7ffdf681f424,29268518,0,0x0,8
tick,0x7ffdf681f424,29270519,0,0x0,8
tick,0x7ffdf681f424,29272504,0,0x0,8
tick,0x7ffdf681f424,29274499,0,0x0,8
tick,0x7ffdf681f424,29276605,0,0x0,8
tick,0x7ffdf681f424,29278512,0,0x0,8
tick,0x7ffdf681f424,29280490,0,0x0,8
tick,0x7ffdf681f424,29282476,0,0x0,8
tick,0x7ffdf681f424,29284472,0,0x0,8
tick,0x7ffdf681f424,29286470,0,0x0,8
tick,0x7ffdf681f424,29288461,0,0x0,8
tick,0x7ffdf681f424,29290455,0,0x0,8
tick,0x7ffdf681f424,29292472,0,0x0,8
tick,0x7ffdf681f424,29294447,0,0x0,8
tick,0x7ffdf681f424,29296438,0,0x0,8
tick,0x7ffdf681f424,29299703,0,0x0,8
tick,0x7ffdf681f424,29301851,0,0x0,8
tick,0x7ffdf681f424,29314656,0,0x0,8
tick,0x7ffdf681f424,29316385,0,0x0,8
tick,0x7ffdf681f424,29318379,0,0x0,8
tick,0x7ffdf681f424,29320374,0,0x0,8
tick,0x7ffdf681f424,29322369,0,0x0,8
tick,0x7ffdf681f424,29324387,0,0x0,8
tick,0x7ffdf681f424,29326379,0,0x0,8
tick,0x7ffdf681f424,29328477,0,0x0,8
tick,0x7ffdf681f424,29330412,0,0x0,8
tick,0x7ffdf681f424,29332377,0,0x0,8
tick,0x7ffdf681f424,29334339,0,0x0,8
tick,0x7ffdf681f424,29336332,0,0x0,8
tick,0x7ffdf681f424,29338359,0,0x0,8
tick,0x7ffdf681f424,29340324,0,0x0,8
tick,0x7ffdf681f424,29342314,0,0x0,8
tick,0x7ffdf681f424,29344315,0,0x0,8
tick,0x7ffdf681f424,29346311,0,0x0,8
tick,0x7ffdf681f424,29348303,0,0x0,8
tick,0x7ffdf681f424,29350296,0,0x0,8
tick,0x7ffdf681f424,29352287,0,0x0,8
tick,0x7ffdf681f424,29354281,0,0x0,8
tick,0x7ffdf681f424,29356279,0,0x0,8
tick,0x7ffdf681f424,29358279,0,0x0,8
tick,0x7ffdf681f424,29360278,0,0x0,8
tick,0x7ffdf681f424,29362263,0,0x0,8
tick,0x7ffdf681f424,29364254,0,0x0,8
tick,0x7ffdf681f424,29366251,0,0x0,8
tick,0x7ffdf681f424,29368289,0,0x0,8
tick,0x7ffdf681f424,29370245,0,0x0,8
tick,0x7ffdf681f424,29374302,0,0x0,8
tick,0x7ffdf681f424,29389008,0,0x0,8
tick,0x7ffdf681f424,29393789,0,0x0,8
tick,0x7ffdf681f424,29402868,0,0x0,8
tick,0x7ffdf681f424,29404151,0,0x0,8
tick,0x7ffdf681f424,29406156,0,0x0,8
tick,0x7ffdf681f424,29408165,0,0x0,8
tick,0x7ffdf681f424,29414177,0,0x0,8
tick,0x7ffdf681f424,29416127,0,0x0,8
tick,0x7ffdf681f424,29418113,0,0x0,8
tick,0x7ffdf681f424,29420108,0,0x0,8
tick,0x7ffdf681f424,29422117,0,0x0,8
tick,0x7ffdf681f424,29424097,0,0x0,8
tick,0x7ffdf681f424,29426123,0,0x0,8
tick,0x7ffdf681f424,29428088,0,0x0,8
tick,0x7ffdf681f424,29430084,0,0x0,8
tick,0x7ffdf681f424,29432071,0,0x0,8
tick,0x7ffdf681f424,29434070,0,0x0,8
tick,0x7ffdf681f424,29436066,0,0x0,8
tick,0x7ffdf681f424,29438060,0,0x0,8
tick,0x7ffdf681f424,29440050,0,0x0,8
tick,0x7ffdf681f424,29442044,0,0x0,8
tick,0x7ffdf681f424,29444043,0,0x0,8
tick,0x7ffdf681f424,29446041,0,0x0,8
tick,0x7ffdf681f424,29448055,0,0x0,8
tick,0x7ffdf681f424,29450052,0,0x0,8
tick,0x7ffdf681f424,29452052,0,0x0,8
tick,0x7ffdf681f424,29454023,0,0x0,8
tick,0x7ffdf681f424,29456013,0,0x0,8
tick,0x7ffdf681f424,29458028,0,0x0,8
tick,0x7ffdf681f424,29460042,0,0x0,8
tick,0x7ffdf681f424,29462003,0,0x0,8
tick,0x7ffdf681f424,29463995,0,0x0,8
tick,0x7ffdf681f424,29465991,0,0x0,8
tick,0x7ffdf681f424,29467983,0,0x0,8
tick,0x7ffdf681f424,29469997,0,0x0,8
tick,0x7ffdf681f424,29472020,0,0x0,8
tick,0x7ffdf681f424,29473986,0,0x0,8
tick,0x7ffdf681f424,29475957,0,0x0,8
tick,0x7ffdf681f424,29477974,0,0x0,8
tick,0x7ffdf681f424,29479969,0,0x0,8
tick,0x7ffdf681f424,29481943,0,0x0,8
tick,0x7ffdf681f424,29483936,0,0x0,8
tick,0x7ffdf681f424,29492573,0,0x0,8
tick,0x7ffdf681f424,29493920,0,0x0,8
tick,0x7ffdf681f424,29495958,0,0x0,8
tick,0x7ffdf681f424,29497915,0,0x0,8
tick,0x7ffdf681f424,29499911,0,0x0,8
tick,0x7ffdf681f424,29501896,0,0x0,8
tick,0x7ffdf681f424,29503884,0,0x0,8
tick,0x7ffdf681f424,29505881,0,0x0,8
tick,0x7ffdf681f424,29507875,0,0x0,8
tick,0x7ffdf681f424,29510677,0,0x0,8
tick,0x7ffdf681f424,29511960,0,0x0,8
tick,0x7ffdf681f424,29513890,0,0x0,8
tick,0x7ffdf681f424,29515874,0,0x0,8
tick,0x7ffdf681f424,29517901,0,0x0,8
tick,0x7ffdf681f424,29519902,0,0x0,8
tick,0x7ffdf681f424,29521892,0,0x0,8
tick,0x7ffdf681f424,29534106,0,0x0,8
tick,0x7ffdf681f424,29535811,0,0x0,8
tick,0x7ffdf681f424,29537808,0,0x0,8
tick,0x7ffdf681f424,29539851,0,0x0,8
tick,0x7ffdf681f424,29541878,0,0x0,8
tick,0x7ffdf681f424,29543913,0,0x0,8
tick,0x7ffdf681f424,29545781,0,0x0,8
tick,0x7ffdf681f424,29548058,0,0x0,8
tick,0x7ffdf681f424,29549760,0,0x0,8
tick,0x7ffdf681f424,29551764,0,0x0,8
tick,0x7ffdf681f424,29553749,0,0x0,8
tick,0x7ffdf681f424,29555743,0,0x0,8
tick,0x7ffdf681f424,29557739,0,0x0,8
tick,0x7ffdf681f424,29559731,0,0x0,8
tick,0x7ffdf681f424,29561727,0,0x0,8
tick,0x7ffdf681f424,29563723,0,0x0,8
tick,0x7ffdf681f424,29565730,0,0x0,8
tick,0x7ffdf681f424,29567714,0,0x0,8
tick,0x7ffdf681f424,29569732,0,0x0,8
tick,0x7ffdf681f424,29571707,0,0x0,8
tick,0x7ffdf681f424,29573696,0,0x0,8
tick,0x7ffdf681f424,29575698,0,0x0,8
tick,0x7ffdf681f424,29577695,0,0x0,8
tick,0x7ffdf681f424,29579680,0,0x0,8
tick,0x7ffdf681f424,29581703,0,0x0,8
tick,0x7ffdf681f424,29583681,0,0x0,8
tick,0x7ffdf681f424,29585669,0,0x0,8
tick,0x7ffdf681f424,29587680,0,0x0,8
tick,0x7ffdf681f424,29589706,0,0x0,8
tick,0x7ffdf681f424,29591674,0,0x0,8
tick,0x7ffdf681f424,29593648,0,0x0,8
tick,0x7ffdf681f424,29595636,0,0x0,8
tick,0x7ffdf681f424,29612449,0,0x0,8
tick,0x7ffdf681f424,29613612,0,0x0,8
tick,0x7ffdf681f424,29615595,0,0x0,8
tick,0x7ffdf681f424,29617580,0,0x0,8
tick,0x7ffdf681f424,29619869,0,0x0,8
tick,0x7ffdf681f424,29621573,0,0x0,8
tick,0x7ffdf681f424,29623594,0,0x0,8
tick,0x7ffdf681f424,29625560,0,0x0,8
tick,0x7ffdf681f424,29627554,0,0x0,8
tick,0x7ffdf681f424,29629548,0,0x0,8
tick,0x7ffdf681f424,29631544,0,0x0,8
tick,0x7ffdf681f424,29633541,0,0x0,8
tick,0x7ffdf681f424,29635531,0,0x0,8
tick,0x7ffdf681f424,29637527,0,0x0,8
tick,0x7ffdf681f424,29639516,0,0x0,8
tick,0x7ffdf681f424,29641513,0,0x0,8
tick,0x7ffdf681f424,29643511,0,0x0,8
tick,0x7ffdf681f424,29645508,0,0x0,8
tick,0x7ffdf681f424,29647513,0,0x0,8
tick,0x7ffdf681f424,29649503,0,0x0,8
tick,0x7ffdf681f424,29653975,0,0x0,8
tick,0x7ffdf681f424,29656304,0,0x0,8
tick,0x7ffdf681f424,29669720,0,0x0,8
tick,0x7ffdf681f424,29671437,0,0x0,8
tick,0x7ffdf681f424,29673473,0,0x0,8
tick,0x7ffdf681f424,29675504,0,0x0,8
tick,0x7ffdf681f424,29677474,0,0x0,8
tick,0x7ffdf681f424,29679423,0,0x0,8
tick,0x7ffdf681f424,29681461,0,0x0,8
tick,0x7ffdf681f424,29683403,0,0x0,8
tick,0x7ffdf681f424,29685509,0,0x0,8
tick,0x7ffdf681f424,29687647,0,0x0,8
tick,0x7ffdf681f424,29689502,0,0x0,8
tick,0x7ffdf681f424,29691430,0,0x0,8
tick,0x7ffdf681f424,29693397,0,0x0,8
tick,0x7ffdf681f424,29695561,0,0x0,8
tick,0x7ffdf681f424,29697419,0,0x0,8
tick,0x7ffdf681f424,29699421,0,0x0,8
tick,0x7ffdf681f424,29701358,0,0x0,8
tick,0x7ffdf681f424,29703365,0,0x0,8
tick,0x7ffdf681f424,29705384,0,0x0,8
tick,0x7ffdf681f424,29707356,0,0x0,8
tick,0x7ffdf681f424,29709356,0,0x0,8
tick,0x7ffdf681f424,29711332,0,0x0,8
tick,0x7ffdf681f424,29713323,0,0x0,8
tick,0x7ffdf681f424,29715325,0,0x0,8
tick,0x7ffdf681f424,29717308,0,0x0,8
tick,0x7ffdf681f424,29719312,0,0x0,8
tick,0x7ffdf681f424,29721312,0,0x0,8
tick,0x7ffdf681f424,29723295,0,0x0,8
tick,0x7ffdf681f424,29725300,0,0x0,8
tick,0x7ffdf681f424,29727355,0,0x0,8
tick,0x7ffdf681f424,29729277,0,0x0,8
tick,0x7ffdf681f424,29731272,0,0x0,8
tick,0x7ffdf681f424,29733268,0,0x0,8
tick,0x7ffdf681f424,29735384,0,0x0,8
tick,0x7ffdf681f424,29737258,0,0x0,8
tick,0x7ffdf681f424,29739253,0,0x0,8
tick,0x7ffdf681f424,29741252,0,0x0,8
tick,0x7ffdf681f424,29743249,0,0x0,8
tick,0x7ffdf681f424,29746497,0,0x0,8
tick,0x7ffdf681f424,29748251,0,0x0,8
tick,0x7ffdf681f424,29750281,0,0x0,8
tick,0x7ffdf681f424,29752243,0,0x0,8
tick,0x7ffdf681f424,29757216,0,0x0,8
tick,0x7ffdf681f424,29759201,0,0x0,8
tick,0x7ffdf681f424,29761291,0,0x0,8
tick,0x7ffdf681f424,29763587,0,0x0,8
tick,0x7ffdf681f424,29765191,0,0x0,8
tick,0x7ffdf681f424,29767182,0,0x0,8
tick,0x7ffdf681f424,29769180,0,0x0,8
tick,0x7ffdf681f424,29770739,0,0x0,8
tick,0x7ffdf681f424,29772737,0,0x0,8
tick,0x7ffdf681f424,29774742,0,0x0,8
tick,0x7ffdf681f424,29776739,0,0x0,8
tick,0x7ffdf681f424,29778720,0,0x0,8
tick,0x7ffdf681f424,29780720,0,0x0,8
tick,0x7ffdf681f424,29782710,0,0x0,8
tick,0x7ffdf681f424,29784712,0,0x0,8
tick,0x7ffdf681f424,29786697,0,0x0,8
tick,0x7ffdf681f424,29788690,0,0x0,8
tick,0x7ffdf681f424,29790696,0,0x0,8
tick,0x7ffdf681f424,29792676,0,0x0,8
tick,0x7ffdf681f424,29794677,0,0x0,8
tick,0x7ffdf681f424,29798601,0,0x0,8
tick,0x7ffdf681f424,29799895,0,0x0,8
tick,0x7ffdf681f424,29801892,0,0x0,8
tick,0x7ffdf681f424,29803903,0,0x0,8
tick,0x7ffdf681f424,29805663,0,0x0,8
tick,0x7ffdf681f424,29807677,0,0x0,8
tick,0x7ffdf681f424,29809637,0,0x0,8
tick,0x7ffdf681f424,29811630,0,0x0,8
tick,0x7ffdf681f424,29813629,0,0x0,8
tick,0x7ffdf681f424,29815621,0,0x0,8
tick,0x7ffdf681f424,29817659,0,0x0,8
tick,0x7ffdf681f424,29819610,0,0x0,8
tick,0x7ffdf681f424,29821641,0,0x0,8
tick,0x7ffdf681f424,29823929,0,0x0,8
tick,0x7ffdf681f424,29825588,0,0x0,8
tick,0x7ffdf681f424,29827590,0,0x0,8
tick,0x7ffdf681f424,29829582,0,0x0,8
tick,0x7ffdf681f424,29831578,0,0x0,8
tick,0x7ffdf681f424,29833569,0,0x0,8
tick,0x7ffdf681f424,29835615,0,0x0,8
tick,0x7ffdf681f424,29837558,0,0x0,8
tick,0x7ffdf681f424,29839554,0,0x0,8
tick,0x7ffdf681f424,29841547,0,0x0,8
tick,0x7ffdf681f424,29843542,0,0x0,8
tick,0x7ffdf681f424,29845538,0,0x0,8
tick,0x7ffdf681f424,29847771,0,0x0,8
tick,0x7ffdf681f424,29849526,0,0x0,8
tick,0x7ffdf681f424,29851536,0,0x0,8
tick,0x7ffdf681f424,29853520,0,0x0,8
tick,0x7ffdf681f424,29855658,0,0x0,8
tick,0x7ffdf681f424,29867876,0,0x0,8
tick,0x7ffdf681f424,29868779,0,0x0,8
tick,0x7ffdf681f424,29870474,0,0x0,8
tick,0x7ffdf681f424,29872490,0,0x0,8
tick,0x7ffdf681f424,29874573,0,0x0,8
tick,0x7ffdf681f424,29876504,0,0x0,8
tick,0x7ffdf681f424,29878456,0,0x0,8
tick,0x7ffdf681f424,29880447,0,0x0,8
tick,0x7ffdf681f424,29882439,0,0x0,8
tick,0x7ffdf681f424,29884434,0,0x0,8
tick,0x7ffdf681f424,29886434,0,0x0,8
tick,0x7ffdf681f424,29888422,0,0x0,8
tick,0x7ffdf681f424,29890422,0,0x0,8
tick,0x7ffdf681f424,29892417,0,0x0,8
tick,0x7ffdf681f424,29894409,0,0x0,8
tick,0x7ffdf681f424,29896400,0,0x0,8
tick,0x7ffdf681f424,29898396,0,0x0,8
tick,0x7ffdf681f424,29900389,0,0x0,8
tick,0x7ffdf681f424,29902389,0,0x0,8
tick,0x7ffdf681f424,29904381,0,0x0,8
tick,0x7ffdf681f424,29906374,0,0x0,8
tick,0x7ffdf681f424,29908369,0,0x0,8
tick,0x7ffdf681f424,29910635,0,0x0,8
tick,0x7ffdf681f424,29912363,0,0x0,8
tick,0x7ffdf681f424,29914356,0,0x0,8
tick,0x7ffdf681f424,29916355,0,0x0,8
tick,0x7ffdf681f424,29918347,0,0x0,8
tick,0x7ffdf681f424,29920348,0,0x0,8
tick,0x7ffdf681f424,29922339,0,0x0,8
tick,0x7ffdf681f424,29924328,0,0x0,8
tick,0x7ffdf681f424,29926324,0,0x0,8
tick,0x7ffdf681f424,29930094,0,0x0,8
tick,0x7ffdf681f424,29931364,0,0x0,8
tick,0x7ffdf681f424,29945649,0,0x0,8
tick,0x7ffdf681f424,29947264,0,0x0,8
tick,0x7ffdf681f424,29949290,0,0x0,8
tick,0x7ffdf681f424,29951258,0,0x0,8
tick,0x7ffdf681f424,29953304,0,0x0,8
tick,0x7ffdf681f424,29955252,0,0x0,8
tick,0x7ffdf681f424,29957263,0,0x0,8
tick,0x7ffdf681f424,29959246,0,0x0,8
tick,0x7ffdf681f424,29961231,0,0x0,8
tick,0x7ffdf681f424,29963227,0,0x0,8
tick,0x7ffdf681f424,29965217,0,0x0,8
tick,0x7ffdf681f424,29979464,0,0x0,8
tick,0x7ffdf681f424,29981178,0,0x0,8
tick,0x7ffdf681f424,29985692,0,0x0,8
tick,0x7ffdf681f424,29985849,0,0x0,8
tick,0x7ffdf681f424,29987244,0,0x0,8
tick,0x7ffdf681f424,29989162,0,0x0,8
tick,0x7ffdf681f424,29991150,0,0x0,8
tick,0x7ffdf681f424,29993151,0,0x0,8
tick,0x7ffdf681f424,29995142,0,0x0,8
tick,0x7ffdf681f424,29997134,0,0x0,8
tick,0x7ffdf681f424,29999126,0,0x0,8
tick,0x7ffdf681f424,30001124,0,0x0,8
tick,0x7ffdf681f424,30003119,0,0x0,8
tick,0x7ffdf681f424,30005110,0,0x0,8
tick,0x7ffdf681f424,30007106,0,0x0,8
tick,0x7ffdf681f424,30009099,0,0x0,8
tick,0x7ffdf681f424,30011103,0,0x0,8
tick,0x7ffdf681f424,30013103,0,0x0,8
tick,0x7ffdf681f424,30015133,0,0x0,8
tick,0x7ffdf681f424,30017083,0,0x0,8
tick,0x7ffdf681f424,30019073,0,0x0,8
tick,0x7ffdf681f424,30021074,0,0x0,8
tick,0x7ffdf681f424,30023071,0,0x0,8
tick,0x7ffdf681f424,30025196,0,0x0,8
tick,0x7ffdf681f424,30027072,0,0x0,8
tick,0x7ffdf681f424,30031050,0,0x0,8
tick,0x7ffdf681f424,30033067,0,0x0,8
tick,0x7ffdf681f424,30035133,0,0x0,8
tick,0x7ffdf681f424,30037051,0,0x0,8
tick,0x7ffdf681f424,30039080,0,0x0,8
tick,0x7ffdf681f424,30041030,0,0x0,8
tick,0x7ffdf681f424,30043064,0,0x0,8
tick,0x7ffdf681f424,30045018,0,0x0,8
tick,0x7ffdf681f424,30047004,0,0x0,8
tick,0x7ffdf681f424,30049074,0,0x0,8
tick,0x7ffdf681f424,30051129,0,0x0,8
tick,0x7ffdf681f424,30052989,0,0x0,8
tick,0x7ffdf681f424,30055040,0,0x0,8
tick,0x7ffdf681f424,30056983,0,0x0,8
tick,0x7ffdf681f424,30059003,0,0x0,8
tick,0x7ffdf681f424,30060966,0,0x0,8
tick,0x7ffdf681f424,30062979,0,0x0,8
tick,0x7ffdf681f424,30064974,0,0x0,8
tick,0x7ffdf681f424,30066943,0,0x0,8
tick,0x7ffdf681f424,30068947,0,0x0,8
tick,0x7ffdf681f424,30070504,0,0x0,8
tick,0x7ffdf681f424,30072495,0,0x0,8
tick,0x7ffdf681f424,30074492,0,0x0,8
tick,0x7ffdf681f424,30076490,0,0x0,8
tick,0x7ffdf681f424,30078484,0,0x0,8
tick,0x7ffdf681f424,30080483,0,0x0,8
tick,0x7ffdf681f424,30082542,0,0x0,8
tick,0x7ffdf681f424,30084465,0,0x0,8
tick,0x7ffdf681f424,30086464,0,0x0,8
tick,0x7ffdf681f424,30088454,0,0x0,8
tick,0x7ffdf681f424,30090449,0,0x0,8
tick,0x7ffdf681f424,30092446,0,0x0,8
tick,0x7ffdf681f424,30094645,0,0x0,8
tick,0x7ffdf681f424,30097267,0,0x0,8
tick,0x7ffdf681f424,30098556,0,0x0,8
tick,0x7ffdf681f424,30110191,0,0x0,8
tick,0x7ffdf681f424,30111397,0,0x0,8
tick,0x7ffdf681f424,30113390,0,0x0,8
tick,0x7ffdf681f424,30115390,0,0x0,8
tick,0x7ffdf681f424,30117394,0,0x0,8
tick,0x7ffdf681f424,30119402,0,0x0,8
tick,0x7ffdf681f424,30121469,0,0x0,8
tick,0x7ffdf681f424,30123364,0,0x0,8
tick,0x7ffdf681f424,30125360,0,0x0,8
tick,0x7ffdf681f424,30127354,0,0x0,8
tick,0x7ffdf681f424,30129354,0,0x0,8
tick,0x7ffdf681f424,30131350,0,0x0,8
tick,0x7ffdf681f424,30133349,0,0x0,8
tick,0x7ffdf681f424,30135529,0,0x0,8
tick,0x7ffdf681f424,30143620,0,0x0,8
tick,0x7ffdf681f424,30145320,0,0x0,8
tick,0x7ffdf681f424,30147299,0,0x0,8
tick,0x7ffdf681f424,30149378,0,0x0,8
tick,0x7ffdf681f424,30151323,0,0x0,8
tick,0x7ffdf681f424,30153329,0,0x0,8
tick,0x7ffdf681f424,30155275,0,0x0,8
tick,0x7ffdf681f424,30157321,0,0x0,8
tick,0x7ffdf681f424,30159267,0,0x0,8
tick,0x7ffdf681f424,30161260,0,0x0,8
tick,0x7ffdf681f424,30163255,0,0x0,8
tick,0x7ffdf681f424,30165267,0,0x0,8
tick,0x7ffdf681f424,30167248,0,0x0,8
tick,0x7ffdf681f424,30169238,0,0x0,8
tick,0x7ffdf681f424,30170851,0,0x0,8
tick,0x7ffdf681f424,30172850,0,0x0,8
tick,0x7ffdf681f424,30174848,0,0x0,8
tick,0x7ffdf681f424,30176841,0,0x0,8
tick,0x7ffdf681f424,30178829,0,0x0,8
tick,0x7ffdf681f424,30180830,0,0x0,8
tick,0x7ffdf681f424,30182818,0,0x0,8
tick,0x7ffdf681f424,30184812,0,0x0,8
tick,0x7ffdf681f424,30186810,0,0x0,8
tick,0x7ffdf681f424,30188801,0,0x0,8
tick,0x7ffdf681f424,30190827,0,0x0,8
tick,0x7ffdf681f424,30192789,0,0x0,8
tick,0x7ffdf681f424,30194785,0,0x0,8
tick,0x7ffdf681f424,30196781,0,0x0,8
tick,0x7ffdf681f424,30211301,0,0x0,8
tick,0x7ffdf681f424,30212746,0,0x0,8
tick,0x7ffdf681f424,30214776,0,0x0,8
tick,0x7ffdf681f424,30217661,0,0x0,8
tick,0x7ffdf681f424,30218772,0,0x0,8
tick,0x7ffdf681f424,30220737,0,0x0,8
tick,0x7ffdf681f424,30222745,0,0x0,8
tick,0x7ffdf681f424,30224805,0,0x0,8
tick,0x7ffdf681f424,30226702,0,0x0,8
tick,0x7ffdf681f424,30228697,0,0x0,8
tick,0x7ffdf681f424,30230687,0,0x0,8
tick,0x7ffdf681f424,30232692,0,0x0,8
tick,0x7ffdf681f424,30234675,0,0x0,8
tick,0x7ffdf681f424,30236733,0,0x0,8
tick,0x7ffdf681f424,30238989,0,0x0,8
tick,0x7ffdf681f424,30251868,0,0x0,8
tick,0x7ffdf681f424,30253630,0,0x0,8
tick,0x7ffdf681f424,30255628,0,0x0,8
tick,0x7ffdf681f424,30257622,0,0x0,8
tick,0x7ffdf681f424,30259744,0,0x0,8
tick,0x7ffdf681f424,30261692,0,0x0,8
tick,0x7ffdf681f424,30263623,0,0x0,8
tick,0x7ffdf681f424,30265830,0,0x0,8
tick,0x7ffdf681f424,30267603,0,0x0,8
tick,0x7ffdf681f424,30269656,0,0x0,8
tick,0x7ffdf681f424,30271622,0,0x0,8
tick,0x7ffdf681f424,30273577,0,0x0,8
tick,0x7ffdf681f424,30275567,0,0x0,8
tick,0x7ffdf681f424,30277571,0,0x0,8
tick,0x7ffdf681f424,30279560,0,0x0,8
tick,0x7ffdf681f424,30293348,0,0x0,8
tick,0x7ffdf681f424,30294519,0,0x0,8
tick,0x7ffdf681f424,30296516,0,0x0,8
tick,0x7ffdf681f424,30298649,0,0x0,8
tick,0x7ffdf681f424,30300509,0,0x0,8
tick,0x7ffdf681f424,30302753,0,0x0,8
tick,0x7ffdf681f424,30304493,0,0x0,8
tick,0x7ffdf681f424,30306490,0,0x0,8
tick,0x7ffdf681f424,30308493,0,0x0,8
tick,0x7ffdf681f424,30310534,0,0x0,8
tick,0x7ffdf681f424,30312472,0,0x0,8
tick,0x7ffdf681f424,30314464,0,0x0,8
tick,0x7ffdf681f424,30316459,0,0x0,8
tick,0x7ffdf681f424,30318458,0,0x0,8
tick,0x7ffdf681f424,30320454,0,0x0,8
tick,0x7ffdf681f424,30322508,0,0x0,8
tick,0x7ffdf681f424,30324439,0,0x0,8
tick,0x7ffdf681f424,30326441,0,0x0,8
tick,0x7ffdf681f424,30328428,0,0x0,8
tick,0x7ffdf681f424,30344913,0,0x0,8
tick,0x7ffdf681f424,30346381,0,0x0,8
tick,0x7ffdf681f424,30348377,0,0x0,8
tick,0x7ffdf681f424,30350549,0,0x0,8
tick,0x7ffdf681f424,30352534,0,0x0,8
tick,0x7ffdf681f424,30354358,0,0x0,8
tick,0x7ffdf681f424,30356356,0,0x0,8
tick,0x7ffdf681f424,30358358,0,0x0,8
tick,0x7ffdf681f424,30360345,0,0x0,8
tick,0x7ffdf681f424,30362358,0,0x0,8
tick,0x7ffdf681f424,30364340,0,0x0,8
tick,0x7ffdf681f424,30366354,0,0x0,8
tick,0x7ffdf681f424,30371177,0,0x0,8
tick,0x7ffdf681f424,30382733,0,0x0,8
tick,0x7ffdf681f424,30383787,0,0x0,8
tick,0x7ffdf681f424,30385782,0,0x0,8
tick,0x7ffdf681f424,30387802,0,0x0,8
tick,0x7ffdf681f424,30389844,0,0x0,8
tick,0x7ffdf681f424,30391768,0,0x0,8
tick,0x7ffdf681f424,30393761,0,0x0,8
tick,0x7ffdf681f424,30395755,0,0x0,8
tick,0x7ffdf681f424,30397755,0,0x0,8
tick,0x7ffdf681f424,30399748,0,0x0,8
tick,0x7ffdf681f424,30401818,0,0x0,8
tick,0x7ffdf681f424,30403737,0,0x0,8
tick,0x7ffdf681f424,30405740,0,0x0,8
tick,0x7ffdf681f424,30407720,0,0x0,8
tick,0x7ffdf681f424,30409721,0,0x0,8
tick,0x7ffdf681f424,30411718,0,0x0,8
tick,0x7ffdf681f424,30413714,0,0x0,8
tick,0x7ffdf681f424,30415703,0,0x0,8
tick,0x7ffdf681f424,30417698,0,0x0,8
tick,0x7ffdf681f424,30419734,0,0x0,8
tick,0x7ffdf681f424,30421686,0,0x0,8
tick,0x7ffdf681f424,30423680,0,0x0,8
tick,0x7ffdf681f424,30425677,0,0x0,8
tick,0x7ffdf681f424,30427676,0,0x0,8
tick,0x7ffdf681f424,30429669,0,0x0,8
tick,0x7ffdf681f424,30431658,0,0x0,8
tick,0x7ffdf681f424,30433654,0,0x0,8
tick,0x7ffdf681f424,30435656,0,0x0,8
tick,0x7ffdf681f424,30437665,0,0x0,8
tick,0x7ffdf681f424,30439649,0,0x0,8
tick,0x7ffdf681f424,30441647,0,0x0,8
tick,0x7ffdf681f424,30443627,0,0x0,8
tick,0x7ffdf681f424,30451811,0,0x0,8
tick,0x7ffdf681f424,30461184,0,0x0,8
tick,0x7ffdf681f424,30461638,0,0x0,8
tick,0x7ffdf681f424,30463617,0,0x0,8
tick,0x7ffdf681f424,30465586,0,0x0,8
tick,0x7ffdf681f424,30467782,0,0x0,8
tick,0x7ffdf681f424,30469623,0,0x0,8
tick,0x7ffdf681f424,30471558,0,0x0,8
tick,0x7ffdf681f424,30473689,0,0x0,8
tick,0x7ffdf681f424,30475563,0,0x0,8
tick,0x7ffdf681f424,30477543,0,0x0,8
tick,0x7ffdf681f424,30479868,0,0x0,8
tick,0x7ffdf681f424,30481657,0,0x0,8
tick,0x7ffdf681f424,30483587,0,0x0,8
tick,0x7ffdf681f424,30485718,0,0x0,8
tick,0x7ffdf681f424,30494562,0,0x0,8
tick,0x7ffdf681f424,30496493,0,0x0,8
tick,0x7ffdf681f424,30498479,0,0x0,8
tick,0x7ffdf681f424,30500481,0,0x0,8
tick,0x7ffdf681f424,30502702,0,0x0,8
tick,0x7ffdf681f424,30504829,0,0x0,8
tick,0x7ffdf681f424,30506481,0,0x0,8
tick,0x7ffdf681f424,30508461,0,0x0,8
tick,0x7ffdf681f424,30510451,0,0x0,8
tick,0x7ffdf681f424,30512439,0,0x0,8
tick,0x7ffdf681f424,30514432,0,0x0,8
tick,0x7ffdf681f424,30516427,0,0x0,8
tick,0x7ffdf681f424,30518510,0,0x0,8
tick,0x7ffdf681f424,30520414,0,0x0,8
tick,0x7ffdf681f424,30522422,0,0x0,8
tick,0x7ffdf681f424,30524415,0,0x0,8
tick,0x7ffdf681f424,30526409,0,0x0,8
tick,0x7ffdf681f424,30528403,0,0x0,8
tick,0x7ffdf681f424,30543303,0,0x0,8
tick,0x7ffdf681f424,30544362,0,0x0,8
tick,0x7ffdf681f424,30546378,0,0x0,8
tick,0x7ffdf681f424,30548399,0,0x0,8
tick,0x7ffdf681f424,30550371,0,0x0,8
tick,0x7ffdf681f424,30552361,0,0x0,8
tick,0x7ffdf681f424,30554351,0,0x0,8
tick,0x7ffdf681f424,30556330,0,0x0,8
tick,0x7ffdf681f424,30558329,0,0x0,8
tick,0x7ffdf681f424,30560335,0,0x0,8
tick,0x7ffdf681f424,30562336,0,0x0,8
tick,0x7ffdf681f424,30564434,0,0x0,8
tick,0x7ffdf681f424,30566298,0,0x0,8
tick,0x7ffdf681f424,30568346,0,0x0,8
tick,0x7ffdf681f424,30570295,0,0x0,8
tick,0x7ffdf681f424,30572320,0,0x0,8
tick,0x7ffdf681f424,30574282,0,0x0,8
tick,0x7ffdf681f424,30578678,0,0x0,8
tick,0x7ffdf681f424,30592377,0,0x0,8
tick,0x7ffdf681f424,30594273,0,0x0,8
tick,0x7ffdf681f424,30596241,0,0x0,8
tick,0x7ffdf681f424,30598253,0,0x0,8
tick,0x7ffdf681f424,30600662,0,0x0,8
tick,0x7ffdf681f424,30602485,0,0x0,8
tick,0x7ffdf681f424,30604292,0,0x0,8
tick,0x7ffdf681f424,30606279,0,0x0,8
tick,0x7ffdf681f424,30608221,0,0x0,8
tick,0x7ffdf681f424,30610251,0,0x0,8
tick,0x7ffdf681f424,30612182,0,0x0,8
tick,0x7ffdf681f424,30614180,0,0x0,8
tick,0x7ffdf681f424,30616165,0,0x0,8
tick,0x7ffdf681f424,30618167,0,0x0,8
tick,0x7ffdf681f424,30620204,0,0x0,8
tick,0x7ffdf681f424,30622184,0,0x0,8
tick,0x7ffdf681f424,30624146,0,0x0,8
tick,0x7ffdf681f424,30626158,0,0x0,8
tick,0x7ffdf681f424,30628208,0,0x0,8
tick,0x7ffdf681f424,30630173,0,0x0,8
tick,0x7ffdf681f424,30632160,0,0x0,8
tick,0x7ffdf681f424,30634133,0,0x0,8
tick,0x7ffdf681f424,30636151,0,0x0,8
tick,0x7ffdf681f424,30638118,0,0x0,8
tick,0x7ffdf681f424,30640105,0,0x0,8
tick,0x7ffdf681f424,30642118,0,0x0,8
tick,0x7ffdf681f424,30644090,0,0x0,8
tick,0x7ffdf681f424,30646103,0,0x0,8
tick,0x7ffdf681f424,30648620,0,0x0,8
tick,0x7ffdf681f424,30660886,0,0x0,8
tick,0x7ffdf681f424,30662050,0,0x0,8
tick,0x7ffdf681f424,30665947,0,0x0,8
tick,0x7ffdf681f424,30667028,0,0x0,8
tick,0x7ffdf681f424,30669261,0,0x0,8
tick,0x7ffdf681f424,30671019,0,0x0,8
tick,0x7ffdf681f424,30673114,0,0x0,8
tick,0x7ffdf681f424,30675794,0,0x0,8
tick,0x7ffdf681f424,30677012,0,0x0,8
tick,0x7ffdf681f424,30679013,0,0x0,8
tick,0x7ffdf681f424,30680996,0,0x0,8
tick,0x7ffdf681f424,30683487,0,0x0,8
tick,0x7ffdf681f424,30685580,0,0x0,8
tick,0x7ffdf681f424,30689299,0,0x0,8
tick,0x7ffdf681f424,30692385,0,0x0,8
tick,0x7ffdf681f424,30693984,0,0x0,8
tick,0x7ffdf681f424,30695958,0,0x0,8
tick,0x7ffdf681f424,30697951,0,0x0,8
tick,0x7ffdf681f424,30699939,0,0x0,8
tick,0x7ffdf681f424,30702205,0,0x0,8
tick,0x7ffdf681f424,30703999,0,0x0,8
tick,0x7ffdf681f424,30705958,0,0x0,8
tick,0x7ffdf681f424,30707982,0,0x0,8
tick,0x7ffdf681f424,30709914,0,0x0,8
tick,0x7ffdf681f424,30711940,0,0x0,8
tick,0x7ffdf681f424,30713902,0,0x0,8
tick,0x7ffdf681f424,30715911,0,0x0,8
tick,0x7ffdf681f424,30717886,0,0x0,8
tick,0x7ffdf681f424,30719948,0,0x0,8
tick,0x7ffdf681f424,30721991,0,0x0,8
tick,0x7ffdf681f424,30723891,0,0x0,8
tick,0x7ffdf681f424,30725866,0,0x0,8
tick,0x7ffdf681f424,30727881,0,0x0,8
tick,0x7ffdf681f424,30729861,0,0x0,8
tick,0x7ffdf681f424,30731853,0,0x0,8
tick,0x7ffdf681f424,30733849,0,0x0,8
tick,0x7ffdf681f424,30735857,0,0x0,8
tick,0x7ffdf681f424,30737836,0,0x0,8
tick,0x7ffdf681f424,30739830,0,0x0,8
tick,0x7ffdf681f424,30741831,0,0x0,8
tick,0x7ffdf681f424,30743842,0,0x0,8
tick,0x7ffdf681f424,30745821,0,0x0,8
tick,0x7ffdf681f424,30747811,0,0x0,8
tick,0x7ffdf681f424,30749821,0,0x0,8
tick,0x7ffdf681f424,30770384,0,0x0,8
tick,0x7ffdf681f424,30771788,0,0x0,8
tick,0x7ffdf681f424,30773757,0,0x0,8
tick,0x7ffdf681f424,30779741,0,0x0,8
tick,0x7ffdf681f424,30781722,0,0x0,8
tick,0x7ffdf681f424,30783720,0,0x0,8
tick,0x7ffdf681f424,30785720,0,0x0,8
tick,0x7ffdf681f424,30787708,0,0x0,8
tick,0x7ffdf681f424,30789699,0,0x0,8
tick,0x7ffdf681f424,30791692,0,0x0,8
tick,0x7ffdf681f424,30793804,0,0x0,8
tick,0x7ffdf681f424,30795714,0,0x0,8
tick,0x7ffdf681f424,30797684,0,0x0,8
tick,0x7ffdf681f424,30799692,0,0x0,8
tick,0x7ffdf681f424,30801666,0,0x0,8
tick,0x7ffdf681f424,30803670,0,0x0,8
tick,0x7ffdf681f424,30805678,0,0x0,8
tick,0x7ffdf681f424,30807656,0,0x0,8
tick,0x7ffdf681f424,30809643,0,0x0,8
tick,0x7ffdf681f424,30811670,0,0x0,8
tick,0x7ffdf681f424,30813642,0,0x0,8
tick,0x7ffdf681f424,30815664,0,0x0,8
tick,0x7ffdf681f424,30817641,0,0x0,8
tick,0x7ffdf681f424,30819647,0,0x0,8
tick,0x7ffdf681f424,30821613,0,0x0,8
tick,0x7ffdf681f424,30823624,0,0x0,8
tick,0x7ffdf681f424,30825602,0,0x0,8
tick,0x7ffdf681f424,30827602,0,0x0,8
tick,0x7ffdf681f424,30829641,0,0x0,8
tick,0x7ffdf681f424,30831586,0,0x0,8
tick,0x7ffdf681f424,30833601,0,0x0,8
tick,0x7ffdf681f424,30835612,0,0x0,8
tick,0x7ffdf681f424,30837934,0,0x0,8
tick,0x7ffdf681f424,30839572,0,0x0,8
tick,0x7ffdf681f424,30841602,0,0x0,8
tick,0x7ffdf681f424,30843740,0,0x0,8
tick,0x7ffdf681f424,30852587,0,0x0,8
tick,0x7ffdf681f424,30854526,0,0x0,8
tick,0x7ffdf681f424,30856527,0,0x0,8
tick,0x7ffdf681f424,30858593,0,0x0,8
tick,0x7ffdf681f424,30862243,0,0x0,8
tick,0x7ffdf681f424,30863753,0,0x0,8
tick,0x7ffdf681f424,30865510,0,0x0,8
tick,0x7ffdf681f424,30867508,0,0x0,8
tick,0x7ffdf681f424,30869503,0,0x0,8
tick,0x7ffdf681f424,30871522,0,0x0,8
tick,0x7ffdf681f424,30873484,0,0x0,8
tick,0x7ffdf681f424,30877044,0,0x0,8
tick,0x7ffdf681f424,30878469,0,0x0,8
tick,0x7ffdf681f424,30880485,0,0x0,8
tick,0x7ffdf681f424,30882668,0,0x0,8
tick,0x7ffdf681f424,30884614,0,0x0,8
tick,0x7ffdf681f424,30886558,0,0x0,8
tick,0x7ffdf681f424,30888544,0,0x0,8
tick,0x7ffdf681f424,30890433,0,0x0,8
tick,0x7ffdf681f424,30892423,0,0x0,8
tick,0x7ffdf681f424,30894420,0,0x0,8
tick,0x7ffdf681f424,30896411,0,0x0,8
tick,0x7ffdf681f424,30898407,0,0x0,8
tick,0x7ffdf681f424,30900402,0,0x0,8
tick,0x7ffdf681f424,30902394,0,0x0,8
tick,0x7ffdf681f424,30904394,0,0x0,8
tick,0x7ffdf681f424,30906387,0,0x0,8
tick,0x7ffdf681f424,30908379,0,0x0,8
tick,0x7ffdf681f424,30910416,0,0x0,8
tick,0x7ffdf681f424,30912373,0,0x0,8
tick,0x7ffdf681f424,30914361,0,0x0,8
tick,0x7ffdf681f424,30916367,0,0x0,8
tick,0x7ffdf681f424,30918353,0,0x0,8
tick,0x7ffdf681f424,30920355,0,0x0,8
tick,0x7ffdf681f424,30922340,0,0x0,8
tick,0x7ffdf681f424,30924341,0,0x0,8
tick,0x7ffdf681f424,30926333,0,0x0,8
tick,0x7ffdf681f424,30928327,0,0x0,8
tick,0x7ffdf681f424,30930320,0,0x0,8
tick,0x7ffdf681f424,30932343,0,0x0,8
tick,0x7ffdf681f424,30935968,0,0x0,8
tick,0x7ffdf681f424,30946626,0,0x0,8
tick,0x7ffdf681f424,30948394,0,0x0,8
tick,0x7ffdf681f424,30950472,0,0x0,8
tick,0x7ffdf681f424,30952375,0,0x0,8
tick,0x7ffdf681f424,30954288,0,0x0,8
tick,0x7ffdf681f424,30963494,0,0x0,8
tick,0x7ffdf681f424,30965277,0,0x0,8
tick,0x7ffdf681f424,30967228,0,0x0,8
tick,0x7ffdf681f424,30969236,0,0x0,8
tick,0x7ffdf681f424,30971213,0,0x0,8
tick,0x7ffdf681f424,30973213,0,0x0,8
tick,0x7ffdf681f424,30975614,0,0x0,8
tick,0x7ffdf681f424,30977385,0,0x0,8
tick,0x7ffdf681f424,30979225,0,0x0,8
tick,0x7ffdf681f424,30981185,0,0x0,8
tick,0x7ffdf681f424,30983180,0,0x0,8
tick,0x7ffdf681f424,30985250,0,0x0,8
tick,0x7ffdf681f424,30987192,0,0x0,8
tick,0x7ffdf681f424,30989161,0,0x0,8
tick,0x7ffdf681f424,30991165,0,0x0,8
tick,0x7ffdf681f424,30993148,0,0x0,8
tick,0x7ffdf681f424,30995148,0,0x0,8
tick,0x7ffdf681f424,30997143,0,0x0,8
tick,0x7ffdf681f424,30999136,0,0x0,8
tick,0x7ffdf681f424,31001133,0,0x0,8
tick,0x7ffdf681f424,31003133,0,0x0,8
tick,0x7ffdf681f424,31005120,0,0x0,8
tick,0x7ffdf681f424,31007116,0,0x0,8
tick,0x7ffdf681f424,31009114,0,0x0,8
tick,0x7ffdf681f424,31011110,0,0x0,8
tick,0x7ffdf681f424,31013098,0,0x0,8
tick,0x7ffdf681f424,31015093,0,0x0,8
tick,0x7ffdf681f424,31017087,0,0x0,8
tick,0x7ffdf681f424,31019083,0,0x0,8
tick,0x7ffdf681f424,31021077,0,0x0,8
tick,0x7ffdf681f424,31023075,0,0x0,8
tick,0x7ffdf681f424,31025065,0,0x0,8
tick,0x7ffdf681f424,31027072,0,0x0,8
tick,0x7ffdf681f424,31034742,0,0x0,8
tick,0x7ffdf681f424,31039618,0,0x0,8
tick,0x7ffdf681f424,31041027,0,0x0,8
tick,0x7ffdf681f424,31043156,0,0x0,8
tick,0x7ffdf681f424,31045018,0,0x0,8
tick,0x7ffdf681f424,31047023,0,0x0,8
tick,0x7ffdf681f424,31049002,0,0x0,8
tick,0x7ffdf681f424,31051005,0,0x0,8
tick,0x7ffdf681f424,31052997,0,0x0,8
tick,0x7ffdf681f424,31055010,0,0x0,8
tick,0x7ffdf681f424,31056996,0,0x0,8
tick,0x7ffdf681f424,31058976,0,0x0,8
tick,0x7ffdf681f424,31060984,0,0x0,8
tick,0x7ffdf681f424,31062967,0,0x0,8
tick,0x7ffdf681f424,31064968,0,0x0,8
tick,0x7ffdf681f424,31066954,0,0x0,8
tick,0x7ffdf681f424,31068983,0,0x0,8
tick,0x7ffdf681f424,31070947,0,0x0,8
tick,0x7ffdf681f424,31072937,0,0x0,8
tick,0x7ffdf681f424,31076814,0,0x0,8
tick,0x7ffdf681f424,31078100,0,0x0,8
tick,0x7ffdf681f424,31088492,0,0x0,8
tick,0x7ffdf681f424,31089898,0,0x0,8
tick,0x7ffdf681f424,31091984,0,0x0,8
tick,0x7ffdf681f424,31093940,0,0x0,8
tick,0x7ffdf681f424,31095954,0,0x0,8
tick,0x7ffdf681f424,31097914,0,0x0,8
tick,0x7ffdf681f424,31099876,0,0x0,8
tick,0x7ffdf681f424,31101991,0,0x0,8
tick,0x7ffdf681f424,31103858,0,0x0,8
tick,0x7ffdf681f424,31105855,0,0x0,8
tick,0x7ffdf681f424,31107844,0,0x0,8
tick,0x7ffdf681f424,31109849,0,0x0,8
tick,0x7ffdf681f424,31111838,0,0x0,8
tick,0x7ffdf681f424,31113831,0,0x0,8
tick,0x7ffdf681f424,31115830,0,0x0,8
tick,0x7ffdf681f424,31117837,0,0x0,8
tick,0x7ffdf681f424,31119816,0,0x0,8
tick,0x7ffdf681f424,31121815,0,0x0,8
tick,0x7ffdf681f424,31127533,0,0x0,8
tick,0x7ffdf681f424,31128835,0,0x0,8
tick,0x7ffdf681f424,31135355,0,0x0,8
tick,0x7ffdf681f424,31136773,0,0x0,8
tick,0x7ffdf681f424,31139024,0,0x0,8
tick,0x7ffdf681f424,31140819,0,0x0,8
tick,0x7ffdf681f424,31142795,0,0x0,8
tick,0x7ffdf681f424,31144753,0,0x0,8
tick,0x7ffdf681f424,31146743,0,0x0,8
tick,0x7ffdf681f424,31148733,0,0x0,8
tick,0x7ffdf681f424,31150733,0,0x0,8
tick,0x7ffdf681f424,31152724,0,0x0,8
tick,0x7ffdf681f424,31154719,0,0x0,8
tick,0x7ffdf681f424,31156719,0,0x0,8
tick,0x7ffdf681f424,31158710,0,0x0,8
tick,0x7ffdf681f424,31160706,0,0x0,8
tick,0x7ffdf681f424,31162699,0,0x0,8
tick,0x7ffdf681f424,31164691,0,0x0,8
tick,0x7ffdf681f424,31166690,0,0x0,8
tick,0x7ffdf681f424,31168684,0,0x0,8
tick,0x7ffdf681f424,31170677,0,0x0,8
tick,0x7ffdf681f424,31172674,0,0x0,8
tick,0x7ffdf681f424,31174690,0,0x0,8
tick,0x7ffdf681f424,31176662,0,0x0,8
tick,0x7ffdf681f424,31178668,0,0x0,8
tick,0x7ffdf681f424,31180655,0,0x0,8
tick,0x7ffdf681f424,31182648,0,0x0,8
tick,0x7ffdf681f424,31195659,0,0x0,8
tick,0x7ffdf681f424,31197614,0,0x0,8
tick,0x7ffdf681f424,31199889,0,0x0,8
tick,0x7ffdf681f424,31201625,0,0x0,8
tick,0x7ffdf681f424,31203675,0,0x0,8
tick,0x7ffdf681f424,31205589,0,0x0,8
tick,0x7ffdf681f424,31207582,0,0x0,8
tick,0x7ffdf681f424,31209576,0,0x0,8
tick,0x7ffdf681f424,31211568,0,0x0,8
tick,0x7ffdf681f424,31213569,0,0x0,8
tick,0x7ffdf681f424,31228408,0,0x0,8
tick,0x7ffdf681f424,31229525,0,0x0,8
tick,0x7ffdf681f424,31231516,0,0x0,8
tick,0x7ffdf681f424,31233571,0,0x0,8
tick,0x7ffdf681f424,31235504,0,0x0,8
tick,0x7ffdf681f424,31237501,0,0x0,8
tick,0x7ffdf681f424,31239544,0,0x0,8
tick,0x7ffdf681f424,31241490,0,0x0,8
tick,0x7ffdf681f424,31243486,0,0x0,8
tick,0x7ffdf681f424,31245484,0,0x0,8
tick,0x7ffdf681f424,31247475,0,0x0,8
tick,0x7ffdf681f424,31249489,0,0x0,8
tick,0x7ffdf681f424,31251463,0,0x0,8
tick,0x7ffdf681f424,31253463,0,0x0,8
tick,0x7ffdf681f424,31255455,0,0x0,8
tick,0x7ffdf681f424,31257445,0,0x0,8
tick,0x7ffdf681f424,31259445,0,0x0,8
tick,0x7ffdf681f424,31261447,0,0x0,8
tick,0x7ffdf681f424,31263434,0,0x0,8
tick,0x7ffdf681f424,31265425,0,0x0,8
tick,0x7ffdf681f424,31267416,0,0x0,8
tick,0x7ffdf681f424,31269415,0,0x0,8
tick,0x7ffdf681f424,31271417,0,0x0,8
tick,0x7ffdf681f424,31273400,0,0x0,8
tick,0x7ffdf681f424,31275402,0,0x0,8
tick,0x7ffdf681f424,31277392,0,0x0,8
tick,0x7ffdf681f424,31279384,0,0x0,8
tick,0x7ffdf681f424,31281383,0,0x0,8
tick,0x7ffdf681f424,31283382,0,0x0,8
tick,0x7ffdf681f424,31285371,0,0x0,8
tick,0x7ffdf681f424,31287379,0,0x0,8
tick,0x7ffdf681f424,31290512,0,0x0,8
tick,0x7ffdf681f424,31293924,0,0x0,8
tick,0x7ffdf681f424,31298258,0,0x0,8
tick,0x7ffdf681f424,31300591,0,0x0,8
tick,0x7ffdf681f424,31309190,0,0x0,8
tick,0x7ffdf681f424,31309248,0,0x0,8
tick,0x7ffdf681f424,31310326,0,0x0,8
tick,0x7ffdf681f424,31312307,0,0x0,8
tick,0x7ffdf681f424,31314348,0,0x0,8
tick,0x7ffdf681f424,31316359,0,0x0,8
tick,0x7ffdf681f424,31318297,0,0x0,8
tick,0x7ffdf681f424,31320278,0,0x0,8
tick,0x7ffdf681f424,31322279,0,0x0,8
tick,0x7ffdf681f424,31324266,0,0x0,8
tick,0x7ffdf681f424,31326264,0,0x0,8
tick,0x7ffdf681f424,31328259,0,0x0,8
tick,0x7ffdf681f424,31330265,0,0x0,8
tick,0x7ffdf681f424,31332259,0,0x0,8
tick,0x7ffdf681f424,31334244,0,0x0,8
tick,0x7ffdf681f424,31336237,0,0x0,8
tick,0x7ffdf681f424,31338257,0,0x0,8
tick,0x7ffdf681f424,31340224,0,0x0,8
tick,0x7ffdf681f424,31342231,0,0x0,8
tick,0x7ffdf681f424,31344224,0,0x0,8
tick,0x7ffdf681f424,31346211,0,0x0,8
tick,0x7ffdf681f424,31348206,0,0x0,8
tick,0x7ffdf681f424,31350200,0,0x0,8
tick,0x7ffdf681f424,31352198,0,0x0,8
tick,0x7ffdf681f424,31354191,0,0x0,8
tick,0x7ffdf681f424,31356180,0,0x0,8
tick,0x7ffdf681f424,31359426,0,0x0,8
tick,0x7ffdf681f424,31363488,0,0x0,8
tick,0x7ffdf681f424,31372317,0,0x0,8
tick,0x7ffdf681f424,31374139,0,0x0,8
tick,0x7ffdf681f424,31376132,0,0x0,8
tick,0x7ffdf681f424,31378314,0,0x0,8
tick,0x7ffdf681f424,31380132,0,0x0,8
tick,0x7ffdf681f424,31382210,0,0x0,8
tick,0x7ffdf681f424,31384141,0,0x0,8
tick,0x7ffdf681f424,31386102,0,0x0,8
tick,0x7ffdf681f424,31388095,0,0x0,8
tick,0x7ffdf681f424,31390089,0,0x0,8
tick,0x7ffdf681f424,31392089,0,0x0,8
tick,0x7ffdf681f424,31394097,0,0x0,8
tick,0x7ffdf681f424,31396074,0,0x0,8
tick,0x7ffdf681f424,31398071,0,0x0,8
tick,0x7ffdf681f424,31400065,0,0x0,8
tick,0x7ffdf681f424,31402055,0,0x0,8
tick,0x7ffdf681f424,31404057,0,0x0,8
tick,0x7ffdf681f424,31407585,0,0x0,8
tick,0x7ffdf681f424,31409106,0,0x0,8
tick,0x7ffdf681f424,31411064,0,0x0,8
tick,0x7ffdf681f424,31413041,0,0x0,8
tick,0x7ffdf681f424,31415184,0,0x0,8
tick,0x7ffdf681f424,31419018,0,0x0,8
tick,0x7ffdf681f424,31421011,0,0x0,8
tick,0x7ffdf681f424,31423004,0,0x0,8
tick,0x7ffdf681f424,31425047,0,0x0,8
tick,0x7ffdf681f424,31427616,0,0x0,8
tick,0x7ffdf681f424,31428994,0,0x0,8
tick,0x7ffdf681f424,31431001,0,0x0,8
tick,0x7ffdf681f424,31432980,0,0x0,8
tick,0x7ffdf681f424,31434976,0,0x0,8
tick,0x7ffdf681f424,31436973,0,0x0,8
tick,0x7ffdf681f424,31438962,0,0x0,8
tick,0x7ffdf681f424,31440975,0,0x0,8
tick,0x7ffdf681f424,31442962,0,0x0,8
tick,0x7ffdf681f424,31444956,0,0x0,8
tick,0x7ffdf681f424,31446974,0,0x0,8
tick,0x7ffdf681f424,31455723,0,0x0,8
tick,0x7ffdf681f424,31456912,0,0x0,8
tick,0x7ffdf681f424,31458985,0,0x0,8
tick,0x7ffdf681f424,31461017,0,0x0,8
tick,0x7ffdf681f424,31462974,0,0x0,8
tick,0x7ffdf681f424,31464938,0,0x0,8
tick,0x7ffdf681f424,31466911,0,0x0,8
tick,0x7ffdf681f424,31468892,0,0x0,8
tick,0x7ffdf681f424,31470878,0,0x0,8
tick,0x7ffdf681f424,31472882,0,0x0,8
tick,0x7ffdf681f424,31474865,0,0x0,8
tick,0x7ffdf681f424,31476864,0,0x0,8
tick,0x7ffdf681f424,31478860,0,0x0,8
tick,0x7ffdf681f424,31480851,0,0x0,8
tick,0x7ffdf681f424,31482843,0,0x0,8
tick,0x7ffdf681f424,31484839,0,0x0,8
tick,0x7ffdf681f424,31486842,0,0x0,8
tick,0x7ffdf681f424,31488833,0,0x0,8
tick,0x7ffdf681f424,31490831,0,0x0,8
tick,0x7ffdf681f424,31492818,0,0x0,8
tick,0x7ffdf681f424,31494811,0,0x0,8
tick,0x7ffdf681f424,31496809,0,0x0,8
tick,0x7ffdf681f424,31510007,0,0x0,8
tick,0x7ffdf681f424,31511776,0,0x0,8
tick,0x7ffdf681f424,31513767,0,0x0,8
tick,0x7ffdf681f424,31515987,0,0x0,8
tick,0x7ffdf681f424,31517783,0,0x0,8
tick,0x7ffdf681f424,31519751,0,0x0,8
tick,0x7ffdf681f424,31521752,0,0x0,8
tick,0x7ffdf681f424,31523731,0,0x0,8
tick,0x7ffdf681f424,31525730,0,0x0,8
tick,0x7ffdf681f424,31527732,0,0x0,8
tick,0x7ffdf681f424,31529721,0,0x0,8
tick,0x7ffdf681f424,31531719,0,0x0,8
tick,0x7ffdf681f424,31533707,0,0x0,8
tick,0x7ffdf681f424,31535709,0,0x0,8
tick,0x7ffdf681f424,31537703,0,0x0,8
tick,0x7ffdf681f424,31539697,0,0x0,8
tick,0x7ffdf681f424,31541701,0,0x0,8
tick,0x7ffdf681f424,31543720,0,0x0,8
tick,0x7ffdf681f424,31545682,0,0x0,8
tick,0x7ffdf681f424,31547671,0,0x0,8
tick,0x7ffdf681f424,31549663,0,0x0,8
tick,0x7ffdf681f424,31551660,0,0x0,8
tick,0x7ffdf681f424,31553657,0,0x0,8
tick,0x7ffdf681f424,31555646,0,0x0,8
tick,0x7ffdf681f424,31557645,0,0x0,8
tick,0x7ffdf681f424,31559638,0,0x0,8
tick,0x7ffdf681f424,31571314,0,0x0,8
tick,0x7ffdf681f424,31572613,0,0x0,8
tick,0x7ffdf681f424,31574601,0,0x0,8
tick,0x7ffdf681f424,31576646,0,0x0,8
tick,0x7ffdf681f424,31578612,0,0x0,8
tick,0x7ffdf681f424,31580387,0,0x0,8
tick,0x7ffdf681f424,31582355,0,0x0,8
tick,0x7ffdf681f424,31584481,0,0x0,8
tick,0x7ffdf681f424,31586584,0,0x0,8
tick,0x7ffdf681f424,31588485,0,0x0,8
tick,0x7ffdf681f424,31590367,0,0x0,8
tick,0x7ffdf681f424,31592341,0,0x0,8
tick,0x7ffdf681f424,31594361,0,0x0,8
tick,0x7ffdf681f424,31596328,0,0x0,8
tick,0x7ffdf681f424,31598443,0,0x0,8
tick,0x7ffdf681f424,31600331,0,0x0,8
tick,0x7ffdf681f424,31602307,0,0x0,8
tick,0x7ffdf681f424,31604297,0,0x0,8
tick,0x7ffdf681f424,31606296,0,0x0,8
tick,0x7ffdf681f424,31608351,0,0x0,8
tick,0x7ffdf681f424,31610390,0,0x0,8
tick,0x7ffdf681f424,31612280,0,0x0,8
tick,0x7ffdf681f424,31614271,0,0x0,8
tick,0x7ffdf681f424,31616268,0,0x0,8
tick,0x7ffdf681f424,31618256,0,0x0,8
tick,0x7ffdf681f424,31620263,0,0x0,8
tick,0x7ffdf681f424,31622254,0,0x0,8
tick,0x7ffdf681f424,31624242,0,0x0,8
tick,0x7ffdf681f424,31626233,0,0x0,8
tick,0x7ffdf681f424,31628231,0,0x0,8
tick,0x7ffdf681f424,31630225,0,0x0,8
tick,0x7ffdf681f424,31632218,0,0x0,8
tick,0x7ffdf681f424,31636037,0,0x0,8
tick,0x7ffdf681f424,31646236,0,0x0,8
tick,0x7ffdf681f424,31648186,0,0x0,8
tick,0x7ffdf681f424,31650320,0,0x0,8
tick,0x7ffdf681f424,31652191,0,0x0,8
tick,0x7ffdf681f424,31654170,0,0x0,8
tick,0x7ffdf681f424,31656159,0,0x0,8
tick,0x7ffdf681f424,31658149,0,0x0,8
tick,0x7ffdf681f424,31660145,0,0x0,8
tick,0x7ffdf681f424,31662140,0,0x0,8
tick,0x7ffdf681f424,31664152,0,0x0,8
tick,0x7ffdf681f424,31666138,0,0x0,8
tick,0x7ffdf681f424,31668127,0,0x0,8
tick,0x7ffdf681f424,31670124,0,0x0,8
tick,0x7ffdf681f424,31672115,0,0x0,8
tick,0x7ffdf681f424,31674114,0,0x0,8
tick,0x7ffdf681f424,31676107,0,0x0,8
tick,0x7ffdf681f424,31678098,0,0x0,8
tick,0x7ffdf681f424,31680091,0,0x0,8
tick,0x7ffdf681f424,31681888,0,0x0,8
tick,0x7ffdf681f424,31683878,0,0x0,8
tick,0x7ffdf681f424,31685895,0,0x0,8
tick,0x7ffdf681f424,31687892,0,0x0,8
tick,0x7ffdf681f424,31689892,0,0x0,8
tick,0x7ffdf681f424,31691883,0,0x0,8
tick,0x7ffdf681f424,31693872,0,0x0,8
tick,0x7ffdf681f424,31695983,0,0x0,8
tick,0x7ffdf681f424,31697863,0,0x0,8
tick,0x7ffdf681f424,31705608,0,0x0,8
tick,0x7ffdf681f424,31714300,0,0x0,8
tick,0x7ffdf681f424,31723298,0,0x0,8
tick,0x7ffdf681f424,31724954,0,0x0,8
tick,0x7ffdf681f424,31733575,0,0x0,8
tick,0x7ffdf681f424,31734756,0,0x0,8
tick,0x7ffdf681f424,31736803,0,0x0,8
tick,0x7ffdf681f424,31738747,0,0x0,8
tick,0x7ffdf681f424,31740741,0,0x0,8
tick,0x7ffdf681f424,31742734,0,0x0,8
tick,0x7ffdf681f424,31744727,0,0x0,8
tick,0x7ffdf681f424,31746719,0,0x0,8
tick,0x7ffdf681f424,31748719,0,0x0,8
tick,0x7ffdf681f424,31750712,0,0x0,8
tick,0x7ffdf681f424,31752752,0,0x0,8
tick,0x7ffdf681f424,31754719,0,0x0,8
tick,0x7ffdf681f424,31756750,0,0x0,8
tick,0x7ffdf681f424,31758691,0,0x0,8
tick,0x7ffdf681f424,31760684,0,0x0,8
tick,0x7ffdf681f424,31762682,0,0x0,8
tick,0x7ffdf681f424,31764671,0,0x0,8
tick,0x7ffdf681f424,31766684,0,0x0,8
tick,0x7ffdf681f424,31768693,0,0x0,8
tick,0x7ffdf681f424,31770656,0,0x0,8
tick,0x7ffdf681f424,31772653,0,0x0,8
tick,0x7ffdf681f424,31774650,0,0x0,8
tick,0x7ffdf681f424,31776646,0,0x0,8
tick,0x7ffdf681f424,31778640,0,0x0,8
tick,0x7ffdf681f424,31780632,0,0x0,8
tick,0x7ffdf681f424,31782625,0,0x0,8
tick,0x7ffdf681f424,31784622,0,0x0,8
tick,0x7ffdf681f424,31786613,0,0x0,8
tick,0x7ffdf681f424,31788609,0,0x0,8
tick,0x7ffdf681f424,31790605,0,0x0,8
tick,0x7ffdf681f424,31792597,0,0x0,8
tick,0x7ffdf681f424,31794591,0,0x0,8
tick,0x7ffdf681f424,31796585,0,0x0,8
tick,0x7ffdf681f424,31798580,0,0x0,8
tick,0x7ffdf681f424,31800576,0,0x0,8
tick,0x7ffdf681f424,31802601,0,0x0,8
tick,0x7ffdf681f424,31804703,0,0x0,8
tick,0x7ffdf681f424,31817414,0,0x0,8
tick,0x7ffdf681f424,31818532,0,0x0,8
tick,0x7ffdf681f424,31820524,0,0x0,8
tick,0x7ffdf681f424,31822721,0,0x0,8
tick,0x7ffdf681f424,31824515,0,0x0,8
tick,0x7ffdf681f424,31826642,0,0x0,8
tick,0x7ffdf681f424,31828503,0,0x0,8
tick,0x7ffdf681f424,31840512,0,0x0,8
tick,0x7ffdf681f424,31842468,0,0x0,8
tick,0x7ffdf681f424,31844463,0,0x0,8
tick,0x7ffdf681f424,31846575,0,0x0,8
tick,0x7ffdf681f424,31848468,0,0x0,8
tick,0x7ffdf681f424,31850452,0,0x0,8
tick,0x7ffdf681f424,31852458,0,0x0,8
tick,0x7ffdf681f424,31854432,0,0x0,8
tick,0x7ffdf681f424,31856427,0,0x0,8
tick,0x7ffdf681f424,31858427,0,0x0,8
tick,0x7ffdf681f424,31860426,0,0x0,8
tick,0x7ffdf681f424,31862410,0,0x0,8
tick,0x7ffdf681f424,31864406,0,0x0,8
tick,0x7ffdf681f424,31866397,0,0x0,8
tick,0x7ffdf681f424,31868391,0,0x0,8
tick,0x7ffdf681f424,31870388,0,0x0,8
tick,0x7ffdf681f424,31872388,0,0x0,8
tick,0x7ffdf681f424,31874391,0,0x0,8
tick,0x7ffdf681f424,31876371,0,0x0,8
tick,0x7ffdf681f424,31878370,0,0x0,8
tick,0x7ffdf681f424,31880382,0,0x0,8
tick,0x7ffdf681f424,31882364,0,0x0,8
tick,0x7ffdf681f424,31884353,0,0x0,8
tick,0x7ffdf681f424,31886349,0,0x0,8
tick,0x7ffdf681f424,31888524,0,0x0,8
tick,0x7ffdf681f424,31901800,0,0x0,8
tick,0x7ffdf681f424,31903324,0,0x0,8
tick,0x7ffdf681f424,31905333,0,0x0,8
tick,0x7ffdf681f424,31907298,0,0x0,8
tick,0x7ffdf681f424,31909374,0,0x0,8
tick,0x7ffdf681f424,31911441,0,0x0,8
tick,0x7ffdf681f424,31913326,0,0x0,8
tick,0x7ffdf681f424,31915333,0,0x0,8
tick,0x7ffdf681f424,31917267,0,0x0,8
tick,0x7ffdf681f424,31919262,0,0x0,8
tick,0x7ffdf681f424,31921254,0,0x0,8
tick,0x7ffdf681f424,31923254,0,0x0,8
tick,0x7ffdf681f424,31925245,0,0x0,8
tick,0x7ffdf681f424,31927245,0,0x0,8
tick,0x7ffdf681f424,31929242,0,0x0,8
tick,0x7ffdf681f424,31931227,0,0x0,8
tick,0x7ffdf681f424,31933220,0,0x0,8
tick,0x7ffdf681f424,31935221,0,0x0,8
tick,0x7ffdf681f424,31937214,0,0x0,8
tick,0x7ffdf681f424,31939204,0,0x0,8
tick,0x7ffdf681f424,31941200,0,0x0,8
tick,0x7ffdf681f424,31954890,0,0x0,8
tick,0x7ffdf681f424,31956161,0,0x0,8
tick,0x7ffdf681f424,31958158,0,0x0,8
tick,0x7ffdf681f424,31960258,0,0x0,8
tick,0x7ffdf681f424,31962162,0,0x0,8
tick,0x7ffdf681f424,31964180,0,0x0,8
tick,0x7ffdf681f424,31966137,0,0x0,8
tick,0x7ffdf681f424,31968127,0,0x0,8
tick,0x7ffdf681f424,31970122,0,0x0,8
tick,0x7ffdf681f424,31972121,0,0x0,8
tick,0x7ffdf681f424,31974114,0,0x0,8
tick,0x7ffdf681f424,31976113,0,0x0,8
tick,0x7ffdf681f424,31978295,0,0x0,8
tick,0x7ffdf681f424,31980301,0,0x0,8
tick,0x7ffdf681f424,31982272,0,0x0,8
tick,0x7ffdf681f424,31984150,0,0x0,8
tick,0x7ffdf681f424,31989873,0,0x0,8
tick,0x7ffdf681f424,31991071,0,0x0,8
tick,0x7ffdf681f424,31993085,0,0x0,8
tick,0x7ffdf681f424,31995113,0,0x0,8
tick,0x7ffdf681f424,31997118,0,0x0,8
tick,0x7ffdf681f424,31999068,0,0x0,8
tick,0x7ffdf681f424,32001047,0,0x0,8
tick,0x7ffdf681f424,32003034,0,0x0,8
tick,0x7ffdf681f424,32005028,0,0x0,8
tick,0x7ffdf681f424,32007022,0,0x0,8
tick,0x7ffdf681f424,32009015,0,0x0,8
tick,0x7ffdf681f424,32011018,0,0x0,8
tick,0x7ffdf681f424,32013004,0,0x0,8
tick,0x7ffdf681f424,32014996,0,0x0,8
tick,0x7ffdf681f424,32016993,0,0x0,8
tick,0x7ffdf681f424,32018989,0,0x0,8
tick,0x7ffdf681f424,32020983,0,0x0,8
tick,0x7ffdf681f424,32022980,0,0x0,8
tick,0x7ffdf681f424,32024976,0,0x0,8
tick,0x7ffdf681f424,32026966,0,0x0,8
tick,0x7ffdf681f424,32028963,0,0x0,8
tick,0x7ffdf681f424,32030958,0,0x0,8
tick,0x7ffdf681f424,32032953,0,0x0,8
tick,0x7ffdf681f424,32034947,0,0x0,8
tick,0x7ffdf681f424,32037251,0,0x0,8
tick,0x7ffdf681f424,32039094,0,0x0,8
tick,0x7ffdf681f424,32040989,0,0x0,8
tick,0x7ffdf681f424,32042936,0,0x0,8
tick,0x7ffdf681f424,32044959,0,0x0,8
tick,0x7ffdf681f424,32046925,0,0x0,8
tick,0x7ffdf681f424,32048922,0,0x0,8
tick,0x7ffdf681f424,32050911,0,0x0,8
tick,0x7ffdf681f424,32052900,0,0x0,8
tick,0x7ffdf681f424,32054897,0,0x0,8
tick,0x7ffdf681f424,32056910,0,0x0,8
tick,0x7ffdf681f424,32058926,0,0x0,8
tick,0x7ffdf681f424,32071106,0,0x0,8
tick,0x7ffdf681f424,32072858,0,0x0,8
tick,0x7ffdf681f424,32074848,0,0x0,8
tick,0x7ffdf681f424,32076843,0,0x0,8
tick,0x7ffdf681f424,32078828,0,0x0,8
tick,0x7ffdf681f424,32080831,0,0x0,8
tick,0x7ffdf681f424,32082887,0,0x0,8
tick,0x7ffdf681f424,32084813,0,0x0,8
tick,0x7ffdf681f424,32086816,0,0x0,8
tick,0x7ffdf681f424,32088806,0,0x0,8
tick,0x7ffdf681f424,32090800,0,0x0,8
tick,0x7ffdf681f424,32092817,0,0x0,8
tick,0x7ffdf681f424,32094799,0,0x0,8
tick,0x7ffdf681f424,32096787,0,0x0,8
tick,0x7ffdf681f424,32098789,0,0x0,8
tick,0x7ffdf681f424,32100774,0,0x0,8
tick,0x7ffdf681f424,32102770,0,0x0,8
tick,0x7ffdf681f424,32104774,0,0x0,8
tick,0x7ffdf681f424,32106758,0,0x0,8
tick,0x7ffdf681f424,32108746,0,0x0,8
tick,0x7ffdf681f424,32110749,0,0x0,8
tick,0x7ffdf681f424,32112752,0,0x0,8
tick,0x7ffdf681f424,32114744,0,0x0,8
tick,0x7ffdf681f424,32116733,0,0x0,8
tick,0x7ffdf681f424,32118794,0,0x0,8
tick,0x7ffdf681f424,32120730,0,0x0,8
tick,0x7ffdf681f424,32122724,0,0x0,8
tick,0x7ffdf681f424,32124710,0,0x0,8
tick,0x7ffdf681f424,32126722,0,0x0,8
tick,0x7ffdf681f424,32128712,0,0x0,8
tick,0x7ffdf681f424,32130707,0,0x0,8
tick,0x7ffdf681f424,32132692,0,0x0,8
tick,0x7ffdf681f424,32134682,0,0x0,8
tick,0x7ffdf681f424,32136700,0,0x0,8
tick,0x7ffdf681f424,32139510,0,0x0,8
tick,0x7ffdf681f424,32141051,0,0x0,8
tick,0x7ffdf681f424,32151496,0,0x0,8
tick,0x7ffdf681f424,32152669,0,0x0,8
tick,0x7ffdf681f424,32154650,0,0x0,8
tick,0x7ffdf681f424,32157008,0,0x0,8
tick,0x7ffdf681f424,32158629,0,0x0,8
tick,0x7ffdf681f424,32160754,0,0x0,8
tick,0x7ffdf681f424,32162618,0,0x0,8
tick,0x7ffdf681f424,32164609,0,0x0,8
tick,0x7ffdf681f424,32166701,0,0x0,8
tick,0x7ffdf681f424,32169928,0,0x0,8
tick,0x7ffdf681f424,32171592,0,0x0,8
tick,0x7ffdf681f424,32173618,0,0x0,8
tick,0x7ffdf681f424,32175589,0,0x0,8
tick,0x7ffdf681f424,32177610,0,0x0,8
tick,0x7ffdf681f424,32179605,0,0x0,8
tick,0x7ffdf681f424,32181593,0,0x0,8
tick,0x7ffdf681f424,32183589,0,0x0,8
tick,0x7ffdf681f424,32185565,0,0x0,8
tick,0x7ffdf681f424,32187545,0,0x0,8
tick,0x7ffdf681f424,32189537,0,0x0,8
tick,0x7ffdf681f424,32191532,0,0x0,8
tick,0x7ffdf681f424,32193534,0,0x0,8
tick,0x7ffdf681f424,32195529,0,0x0,8
tick,0x7ffdf681f424,32197597,0,0x0,8
tick,0x7ffdf681f424,32199514,0,0x0,8
tick,0x7ffdf681f424,32201516,0,0x0,8
tick,0x7ffdf681f424,32203506,0,0x0,8
tick,0x7ffdf681f424,32207263,0,0x0,8
tick,0x7ffdf681f424,32211159,0,0x0,8
tick,0x7ffdf681f424,32218365,0,0x0,8
tick,0x7ffdf681f424,32219566,0,0x0,8
tick,0x7ffdf681f424,32221499,0,0x0,8
tick,0x7ffdf681f424,32223454,0,0x0,8
tick,0x7ffdf681f424,32226025,0,0x0,8
tick,0x7ffdf681f424,32228049,0,0x0,8
tick,0x7ffdf681f424,32229515,0,0x0,8
tick,0x7ffdf681f424,32231429,0,0x0,8
tick,0x7ffdf681f424,32233429,0,0x0,8
tick,0x7ffdf681f424,32235442,0,0x0,8
tick,0x7ffdf681f424,32237416,0,0x0,8
tick,0x7ffdf681f424,32239407,0,0x0,8
tick,0x7ffdf681f424,32241422,0,0x0,8
tick,0x7ffdf681f424,32243440,0,0x0,8
tick,0x7ffdf681f424,32245423,0,0x0,8
tick,0x7ffdf681f424,32247390,0,0x0,8
tick,0x7ffdf681f424,32249389,0,0x0,8
tick,0x7ffdf681f424,32251373,0,0x0,8
tick,0x7ffdf681f424,32253374,0,0x0,8
tick,0x7ffdf681f424,32255367,0,0x0,8
tick,0x7ffdf681f424,32257357,0,0x0,8
tick,0x7ffdf681f424,32259353,0,0x0,8
tick,0x7ffdf681f424,32261444,0,0x0,8
tick,0x7ffdf681f424,32263343,0,0x0,8
tick,0x7ffdf681f424,32265340,0,0x0,8
tick,0x7ffdf681f424,32267339,0,0x0,8
tick,0x7ffdf681f424,32269343,0,0x0,8
tick,0x7ffdf681f424,32271322,0,0x0,8
tick,0x7ffdf681f424,32273575,0,0x0,8
tick,0x7ffdf681f424,32277912,0,0x0,8
tick,0x7ffdf681f424,32286993,0,0x0,8
tick,0x7ffdf681f424,32288417,0,0x0,8
tick,0x7ffdf681f424,32290279,0,0x0,8
tick,0x7ffdf681f424,32293162,0,0x0,8
tick,0x7ffdf681f424,32298109,0,0x0,8
tick,0x7ffdf681f424,32299291,0,0x0,8
tick,0x7ffdf681f424,32301248,0,0x0,8
tick,0x7ffdf681f424,32305165,0,0x0,8
tick,0x7ffdf681f424,32306234,0,0x0,8
tick,0x7ffdf681f424,32308226,0,0x0,8
tick,0x7ffdf681f424,32310221,0,0x0,8
tick,0x7ffdf681f424,32312235,0,0x0,8
tick,0x7ffdf681f424,32314232,0,0x0,8
tick,0x7ffdf681f424,32316228,0,0x0,8
tick,0x7ffdf681f424,32318303,0,0x0,8
tick,0x7ffdf681f424,32320195,0,0x0,8
tick,0x7ffdf681f424,32322189,0,0x0,8
tick,0x7ffdf681f424,32324184,0,0x0,8
tick,0x7ffdf681f424,32326171,0,0x0,8
tick,0x7ffdf681f424,32328170,0,0x0,8
tick,0x7ffdf681f424,32330188,0,0x0,8
tick,0x7ffdf681f424,32332193,0,0x0,8
tick,0x7ffdf681f424,32334166,0,0x0,8
tick,0x7ffdf681f424,32336175,0,0x0,8
tick,0x7ffdf681f424,32338192,0,0x0,8
tick,0x7ffdf681f424,32340159,0,0x0,8
tick,0x7ffdf681f424,32342156,0,0x0,8
tick,0x7ffdf681f424,32356291,0,0x0,8
tick,0x7ffdf681f424,32358148,0,0x0,8
tick,0x7ffdf681f424,32361194,0,0x0,8
tick,0x7ffdf681f424,32362082,0,0x0,8
tick,0x7ffdf681f424,32364115,0,0x0,8
tick,0x7ffdf681f424,32366101,0,0x0,8
tick,0x7ffdf681f424,32368059,0,0x0,8
tick,0x7ffdf681f424,32370051,0,0x0,8
tick,0x7ffdf681f424,32372052,0,0x0,8
tick,0x7ffdf681f424,32374044,0,0x0,8
tick,0x7ffdf681f424,32376042,0,0x0,8
tick,0x7ffdf681f424,32378090,0,0x0,8
tick,0x7ffdf681f424,32380088,0,0x0,8
tick,0x7ffdf681f424,32382026,0,0x0,8
tick,0x7ffdf681f424,32384072,0,0x0,8
tick,0x7ffdf681f424,32386019,0,0x0,8
tick,0x7ffdf681f424,32388009,0,0x0,8
tick,0x7ffdf681f424,32390003,0,0x0,8
tick,0x7ffdf681f424,32391997,0,0x0,8
tick,0x7ffdf681f424,32393999,0,0x0,8
tick,0x7ffdf681f424,32395992,0,0x0,8
tick,0x7ffdf681f424,32397986,0,0x0,8
tick,0x7ffdf681f424,32399974,0,0x0,8
tick,0x7ffdf681f424,32401970,0,0x0,8
tick,0x7ffdf681f424,32403967,0,0x0,8
tick,0x7ffdf681f424,32405960,0,0x0,8
tick,0x7ffdf681f424,32407951,0,0x0,8
tick,0x7ffdf681f424,32416420,0,0x0,8
tick,0x7ffdf681f424,32425936,0,0x0,8
tick,0x7ffdf681f424,32427916,0,0x0,8
tick,0x7ffdf681f424,32429909,0,0x0,8
tick,0x7ffdf681f424,32431902,0,0x0,8
tick,0x7ffdf681f424,32433939,0,0x0,8
tick,0x7ffdf681f424,32435909,0,0x0,8
tick,0x7ffdf681f424,32437884,0,0x0,8
tick,0x7ffdf681f424,32439873,0,0x0,8
tick,0x7ffdf681f424,32441869,0,0x0,8
tick,0x7ffdf681f424,32443871,0,0x0,8
tick,0x7ffdf681f424,32445863,0,0x0,8
tick,0x7ffdf681f424,32447851,0,0x0,8
tick,0x7ffdf681f424,32449841,0,0x0,8
tick,0x7ffdf681f424,32451837,0,0x0,8
tick,0x7ffdf681f424,32453839,0,0x0,8
tick,0x7ffdf681f424,32455831,0,0x0,8
tick,0x7ffdf681f424,32459782,0,0x0,8
tick,0x7ffdf681f424,32461221,0,0x0,8
tick,0x7ffdf681f424,32463500,0,0x0,8
tick,0x7ffdf681f424,32469982,0,0x0,8
tick,0x7ffdf681f424,32475444,0,0x0,8
tick,0x7ffdf681f424,32476772,0,0x0,8
tick,0x7ffdf681f424,32478769,0,0x0,8
tick,0x7ffdf681f424,32480809,0,0x0,8
tick,0x7ffdf681f424,32482786,0,0x0,8
tick,0x7ffdf681f424,32485145,0,0x0,8
tick,0x7ffdf681f424,32486757,0,0x0,8
tick,0x7ffdf681f424,32488749,0,0x0,8
tick,0x7ffdf681f424,32490732,0,0x0,8
tick,0x7ffdf681f424,32492730,0,0x0,8
tick,0x7ffdf681f424,32494731,0,0x0,8
tick,0x7ffdf681f424,32496730,0,0x0,8
tick,0x7ffdf681f424,32499800,0,0x0,8
tick,0x7ffdf681f424,32500829,0,0x0,8
tick,0x7ffdf681f424,32502920,0,0x0,8
tick,0x7ffdf681f424,32504738,0,0x0,8
tick,0x7ffdf681f424,32511901,0,0x0,8
tick,0x7ffdf681f424,32513680,0,0x0,8
tick,0x7ffdf681f424,32515702,0,0x0,8
tick,0x7ffdf681f424,32517669,0,0x0,8
tick,0x7ffdf681f424,32519670,0,0x0,8
tick,0x7ffdf681f424,32521702,0,0x0,8
tick,0x7ffdf681f424,32523648,0,0x0,8
tick,0x7ffdf681f424,32525639,0,0x0,8
tick,0x7ffdf681f424,32527637,0,0x0,8
tick,0x7ffdf681f424,32529633,0,0x0,8
tick,0x7ffdf681f424,32531619,0,0x0,8
tick,0x7ffdf681f424,32533618,0,0x0,8
tick,0x7ffdf681f424,32535618,0,0x0,8
tick,0x7ffdf681f424,32537628,0,0x0,8
tick,0x7ffdf681f424,32539597,0,0x0,8
tick,0x7ffdf681f424,32541593,0,0x0,8
tick,0x7ffdf681f424,32543587,0,0x0,8
tick,0x7ffdf681f424,32545612,0,0x0,8
tick,0x7ffdf681f424,32547582,0,0x0,8
tick,0x7ffdf681f424,32549577,0,0x0,8
tick,0x7ffdf681f424,32551572,0,0x0,8
tick,0x7ffdf681f424,32553572,0,0x0,8
tick,0x7ffdf681f424,32555563,0,0x0,8
tick,0x7ffdf681f424,32571242,0,0x0,8
tick,0x7ffdf681f424,32572516,0,0x0,8
tick,0x7ffdf681f424,32574511,0,0x0,8
tick,0x7ffdf681f424,32576586,0,0x0,8
tick,0x7ffdf681f424,32578518,0,0x0,8
tick,0x7ffdf681f424,32580861,0,0x0,8
tick,0x7ffdf681f424,32582586,0,0x0,8
tick,0x7ffdf681f424,32590405,0,0x0,8
tick,0x7ffdf681f424,32591614,0,0x0,8
tick,0x7ffdf681f424,32597299,0,0x0,8
tick,0x7ffdf681f424,32599935,0,0x0,8
tick,0x7ffdf681f424,32601443,0,0x0,8
tick,0x7ffdf681f424,32603443,0,0x0,8
tick,0x7ffdf681f424,32605440,0,0x0,8
tick,0x7ffdf681f424,32607488,0,0x0,8
tick,0x7ffdf681f424,32609448,0,0x0,8
tick,0x7ffdf681f424,32611637,0,0x0,8
tick,0x7ffdf681f424,32613409,0,0x0,8
tick,0x7ffdf681f424,32615400,0,0x0,8
tick,0x7ffdf681f424,32617404,0,0x0,8
tick,0x7ffdf681f424,32619402,0,0x0,8
tick,0x7ffdf681f424,32621389,0,0x0,8
tick,0x7ffdf681f424,32623385,0,0x0,8
tick,0x7ffdf681f424,32625378,0,0x0,8
tick,0x7ffdf681f424,32627377,0,0x0,8
tick,0x7ffdf681f424,32629409,0,0x0,8
tick,0x7ffdf681f424,32631362,0,0x0,8
tick,0x7ffdf681f424,32633359,0,0x0,8
tick,0x7ffdf681f424,32635349,0,0x0,8
tick,0x7ffdf681f424,32637360,0,0x0,8
tick,0x7ffdf681f424,32639351,0,0x0,8
tick,0x7ffdf681f424,32641338,0,0x0,8
tick,0x7ffdf681f424,32643327,0,0x0,8
tick,0x7ffdf681f424,32645353,0,0x0,8
tick,0x7ffdf681f424,32659990,0,0x0,8
tick,0x7ffdf681f424,32661294,0,0x0,8
tick,0x7ffdf681f424,32663283,0,0x0,8
tick,0x7ffdf681f424,32665288,0,0x0,8
tick,0x7ffdf681f424,32667422,0,0x0,8
tick,0x7ffdf681f424,32669536,0,0x0,8
tick,0x7ffdf681f424,32671256,0,0x0,8
tick,0x7ffdf681f424,32673246,0,0x0,8
tick,0x7ffdf681f424,32675257,0,0x0,8
tick,0x7ffdf681f424,32677245,0,0x0,8
tick,0x7ffdf681f424,32679238,0,0x0,8
tick,0x7ffdf681f424,32681233,0,0x0,8
tick,0x7ffdf681f424,32683217,0,0x0,8
tick,0x7ffdf681f424,32685214,0,0x0,8
tick,0x7ffdf681f424,32687277,0,0x0,8
tick,0x7ffdf681f424,32689203,0,0x0,8
tick,0x7ffdf681f424,32691195,0,0x0,8
tick,0x7ffdf681f424,32693193,0,0x0,8
tick,0x7ffdf681f424,32696989,0,0x0,8
tick,0x7ffdf681f424,32698185,0,0x0,8
tick,0x7ffdf681f424,32700564,0,0x0,8
tick,0x7ffdf681f424,32702198,0,0x0,8
tick,0x7ffdf681f424,32704166,0,0x0,8
tick,0x7ffdf681f424,32713667,0,0x0,8
tick,0x7ffdf681f424,32718386,0,0x0,8
tick,0x7ffdf681f424,32736789,0,0x0,8
tick,0x7ffdf681f424,32738104,0,0x0,8
tick,0x7ffdf681f424,32740093,0,0x0,8
tick,0x7ffdf681f424,32742120,0,0x0,8
tick,0x7ffdf681f424,32748338,0,0x0,8
tick,0x7ffdf681f424,32750049,0,0x0,8
tick,0x7ffdf681f424,32752036,0,0x0,8
tick,0x7ffdf681f424,32754030,0,0x0,8
tick,0x7ffdf681f424,32756015,0,0x0,8
tick,0x7ffdf681f424,32758020,0,0x0,8
tick,0x7ffdf681f424,32760016,0,0x0,8
tick,0x7ffdf681f424,32762020,0,0x0,8
tick,0x7ffdf681f424,32764005,0,0x0,8
tick,0x7ffdf681f424,32765997,0,0x0,8
tick,0x7ffdf681f424,32767994,0,0x0,8
tick,0x7ffdf681f424,32769999,0,0x0,8
tick,0x7ffdf681f424,32771999,0,0x0,8
tick,0x7ffdf681f424,32773986,0,0x0,8
tick,0x7ffdf681f424,32775970,0,0x0,8
tick,0x7ffdf681f424,32777967,0,0x0,8
tick,0x7ffdf681f424,32779984,0,0x0,8
tick,0x7ffdf681f424,32781996,0,0x0,8
tick,0x7ffdf681f424,32783955,0,0x0,8
tick,0x7ffdf681f424,32786033,0,0x0,8
tick,0x7ffdf681f424,32787941,0,0x0,8
tick,0x7ffdf681f424,32789936,0,0x0,8
tick,0x7ffdf681f424,32791934,0,0x0,8
tick,0x7ffdf681f424,32793986,0,0x0,8
tick,0x7ffdf681f424,32795933,0,0x0,8
tick,0x7ffdf681f424,32813387,0,0x0,8
tick,0x7ffdf681f424,32814098,0,0x0,8
tick,0x7ffdf681f424,32815875,0,0x0,8
tick,0x7ffdf681f424,32817867,0,0x0,8
tick,0x7ffdf681f424,32820255,0,0x0,8
tick,0x7ffdf681f424,32821913,0,0x0,8
tick,0x7ffdf681f424,32823891,0,0x0,8
tick,0x7ffdf681f424,32826076,0,0x0,8
tick,0x7ffdf681f424,32829029,0,0x0,8
tick,0x7ffdf681f424,32841866,0,0x0,8
tick,0x7ffdf681f424,32843861,0,0x0,8
tick,0x7ffdf681f424,32845792,0,0x0,8
tick,0x7ffdf681f424,32847948,0,0x0,8
tick,0x7ffdf681f424,32849856,0,0x0,8
tick,0x7ffdf681f424,32851791,0,0x0,8
tick,0x7ffdf681f424,32853820,0,0x0,8
tick,0x7ffdf681f424,32855758,0,0x0,8
tick,0x7ffdf681f424,32857752,0,0x0,8
tick,0x7ffdf681f424,32859742,0,0x0,8
tick,0x7ffdf681f424,32861789,0,0x0,8
tick,0x7ffdf681f424,32863751,0,0x0,8
tick,0x7ffdf681f424,32865733,0,0x0,8
tick,0x7ffdf681f424,32867722,0,0x0,8
tick,0x7ffdf681f424,32869752,0,0x0,8
tick,0x7ffdf681f424,32871713,0,0x0,8
tick,0x7ffdf681f424,32873706,0,0x0,8
tick,0x7ffdf681f424,32875703,0,0x0,8
tick,0x7ffdf681f424,32877732,0,0x0,8
tick,0x7ffdf681f424,32879697,0,0x0,8
tick,0x7ffdf681f424,32881684,0,0x0,8
tick,0x7ffdf681f424,32884400,0,0x0,8
tick,0x7ffdf681f424,32886150,0,0x0,8
tick,0x7ffdf681f424,32887700,0,0x0,8
tick,0x7ffdf681f424,32889671,0,0x0,8
tick,0x7ffdf681f424,32891870,0,0x0,8
tick,0x7ffdf681f424,32894375,0,0x0,8
tick,0x7ffdf681f424,32895684,0,0x0,8
tick,0x7ffdf681f424,32897666,0,0x0,8
tick,0x7ffdf681f424,32899640,0,0x0,8
tick,0x7ffdf681f424,32901637,0,0x0,8
tick,0x7ffdf681f424,32903721,0,0x0,8
tick,0x7ffdf681f424,32905632,0,0x0,8
tick,0x7ffdf681f424,32907622,0,0x0,8
tick,0x7ffdf681f424,32909613,0,0x0,8
tick,0x7ffdf681f424,32911613,0,0x0,8
tick,0x7ffdf681f424,32913647,0,0x0,8
tick,0x7ffdf681f424,32915599,0,0x0,8
tick,0x7ffdf681f424,32917596,0,0x0,8
tick,0x7ffdf681f424,32920864,0,0x0,8
tick,0x7ffdf681f424,32933908,0,0x0,8
tick,0x7ffdf681f424,32935608,0,0x0,8
tick,0x7ffdf681f424,32937562,0,0x0,8
tick,0x7ffdf681f424,32939595,0,0x0,8
tick,0x7ffdf681f424,32941535,0,0x0,8
tick,0x7ffdf681f424,32943527,0,0x0,8
tick,0x7ffdf681f424,32945727,0,0x0,8
tick,0x7ffdf681f424,32947511,0,0x0,8
tick,0x7ffdf681f424,32949508,0,0x0,8
tick,0x7ffdf681f424,32951498,0,0x0,8
tick,0x7ffdf681f424,32953501,0,0x0,8
tick,0x7ffdf681f424,32955494,0,0x0,8
tick,0x7ffdf681f424,32957485,0,0x0,8
tick,0x7ffdf681f424,32959475,0,0x0,8
tick,0x7ffdf681f424,32961483,0,0x0,8
tick,0x7ffdf681f424,32963471,0,0x0,8
tick,0x7ffdf681f424,32965461,0,0x0,8
tick,0x7ffdf681f424,32967457,0,0x0,8
tick,0x7ffdf681f424,32969464,0,0x0,8
tick,0x7ffdf681f424,32971453,0,0x0,8
tick,0x7ffdf681f424,32973441,0,0x0,8
tick,0x7ffdf681f424,32975434,0,0x0,8
tick,0x7ffdf681f424,32977441,0,0x0,8
tick,0x7ffdf681f424,32979436,0,0x0,8
tick,0x7ffdf681f424,32981417,0,0x0,8
tick,0x7ffdf681f424,32983412,0,0x0,8
tick,0x7ffdf681f424,32985407,0,0x0,8
tick,0x7ffdf681f424,32996769,0,0x0,8
tick,0x7ffdf681f424,33001714,0,0x0,8
tick,0x7ffdf681f424,33003369,0,0x0,8
tick,0x7ffdf681f424,33005364,0,0x0,8
tick,0x7ffdf681f424,33007409,0,0x0,8
tick,0x7ffdf681f424,33009402,0,0x0,8
tick,0x7ffdf681f424,33011907,0,0x0,8
tick,0x7ffdf681f424,33024716,0,0x0,8
tick,0x7ffdf681f424,33026309,0,0x0,8
tick,0x7ffdf681f424,33028305,0,0x0,8
tick,0x7ffdf681f424,33030322,0,0x0,8
tick,0x7ffdf681f424,33032328,0,0x0,8
tick,0x7ffdf681f424,33034293,0,0x0,8
tick,0x7ffdf681f424,33036292,0,0x0,8
tick,0x7ffdf681f424,33038275,0,0x0,8
tick,0x7ffdf681f424,33040268,0,0x0,8
tick,0x7ffdf681f424,33042266,0,0x0,8
tick,0x7ffdf681f424,33044278,0,0x0,8
tick,0x7ffdf681f424,33046260,0,0x0,8
tick,0x7ffdf681f424,33048245,0,0x0,8
tick,0x7ffdf681f424,33050234,0,0x0,8
tick,0x7ffdf681f424,33052329,0,0x0,8
tick,0x7ffdf681f424,33054245,0,0x0,8
tick,0x7ffdf681f424,33056221,0,0x0,8
tick,0x7ffdf681f424,33058209,0,0x0,8
tick,0x7ffdf681f424,33060204,0,0x0,8
tick,0x7ffdf681f424,33062214,0,0x0,8
tick,0x7ffdf681f424,33064854,0,0x0,8
tick,0x7ffdf681f424,33066409,0,0x0,8
tick,0x7ffdf681f424,33068348,0,0x0,8
tick,0x7ffdf681f424,33070259,0,0x0,8
tick,0x7ffdf681f424,33072185,0,0x0,8
tick,0x7ffdf681f424,33074216,0,0x0,8
tick,0x7ffdf681f424,33076183,0,0x0,8
tick,0x7ffdf681f424,33078332,0,0x0,8
tick,0x7ffdf681f424,33080159,0,0x0,8
tick,0x7ffdf681f424,33082150,0,0x0,8
tick,0x7ffdf681f424,33084142,0,0x0,8
tick,0x7ffdf681f424,33086160,0,0x0,8
tick,0x7ffdf681f424,33088271,0,0x0,8
tick,0x7ffdf681f424,33090160,0,0x0,8
tick,0x7ffdf681f424,33092158,0,0x0,8
tick,0x7ffdf681f424,33094125,0,0x0,8
tick,0x7ffdf681f424,33096120,0,0x0,8
tick,0x7ffdf681f424,33098104,0,0x0,8
tick,0x7ffdf681f424,33100110,0,0x0,8
tick,0x7ffdf681f424,33102118,0,0x0,8
tick,0x7ffdf681f424,33104119,0,0x0,8
tick,0x7ffdf681f424,33106199,0,0x0,8
tick,0x7ffdf681f424,33108304,0,0x0,8
tick,0x7ffdf681f424,33110263,0,0x0,8
tick,0x7ffdf681f424,33112539,0,0x0,8
tick,0x7ffdf681f424,33114133,0,0x0,8
tick,0x7ffdf681f424,33123470,0,0x0,8
tick,0x7ffdf681f424,33125052,0,0x0,8
tick,0x7ffdf681f424,33127033,0,0x0,8
tick,0x7ffdf681f424,33129155,0,0x0,8
tick,0x7ffdf681f424,33131250,0,0x0,8
tick,0x7ffdf681f424,33133045,0,0x0,8
tick,0x7ffdf681f424,33135050,0,0x0,8
tick,0x7ffdf681f424,33137011,0,0x0,8
tick,0x7ffdf681f424,33139000,0,0x0,8
tick,0x7ffdf681f424,33140994,0,0x0,8
tick,0x7ffdf681f424,33142987,0,0x0,8
tick,0x7ffdf681f424,33144991,0,0x0,8
tick,0x7ffdf681f424,33146979,0,0x0,8
tick,0x7ffdf681f424,33148970,0,0x0,8
tick,0x7ffdf681f424,33150967,0,0x0,8
tick,0x7ffdf681f424,33152977,0,0x0,8
tick,0x7ffdf681f424,33154983,0,0x0,8
tick,0x7ffdf681f424,33156952,0,0x0,8
tick,0x7ffdf681f424,33158940,0,0x0,8
tick,0x7ffdf681f424,33161255,0,0x0,8
tick,0x7ffdf681f424,33163187,0,0x0,8
tick,0x7ffdf681f424,33165189,0,0x0,8
tick,0x7ffdf681f424,33171370,0,0x0,8
tick,0x7ffdf681f424,33182778,0,0x0,8
tick,0x7ffdf681f424,33183889,0,0x0,8
tick,0x7ffdf681f424,33186240,0,0x0,8
tick,0x7ffdf681f424,33188023,0,0x0,8
tick,0x7ffdf681f424,33189941,0,0x0,8
tick,0x7ffdf681f424,33198616,0,0x0,8
tick,0x7ffdf681f424,33211247,0,0x0,8
tick,0x7ffdf681f424,33212887,0,0x0,8
tick,0x7ffdf681f424,33214812,0,0x0,8
tick,0x7ffdf681f424,33216850,0,0x0,8
tick,0x7ffdf681f424,33218824,0,0x0,8
tick,0x7ffdf681f424,33220820,0,0x0,8
tick,0x7ffdf681f424,33222807,0,0x0,8
tick,0x7ffdf681f424,33224773,0,0x0,8
tick,0x7ffdf681f424,33226765,0,0x0,8
tick,0x7ffdf681f424,33228787,0,0x0,8
tick,0x7ffdf681f424,33230763,0,0x0,8
tick,0x7ffdf681f424,33232754,0,0x0,8
tick,0x7ffdf681f424,33234763,0,0x0,8
tick,0x7ffdf681f424,33236766,0,0x0,8
tick,0x7ffdf681f424,33238739,0,0x0,8
tick,0x7ffdf681f424,33240733,0,0x0,8
tick,0x7ffdf681f424,33242723,0,0x0,8
tick,0x7ffdf681f424,33244751,0,0x0,8
tick,0x7ffdf681f424,33246720,0,0x0,8
tick,0x7ffdf681f424,33248705,0,0x0,8
tick,0x7ffdf681f424,33250701,0,0x0,8
tick,0x7ffdf681f424,33252726,0,0x0,8
tick,0x7ffdf681f424,33254695,0,0x0,8
tick,0x7ffdf681f424,33256683,0,0x0,8
tick,0x7ffdf681f424,33258674,0,0x0,8
tick,0x7ffdf681f424,33261766,0,0x0,8
tick,0x7ffdf681f424,33276015,0,0x0,8
tick,0x7ffdf681f424,33277683,0,0x0,8
tick,0x7ffdf681f424,33279625,0,0x0,8
tick,0x7ffdf681f424,33281614,0,0x0,8
tick,0x7ffdf681f424,33283606,0,0x0,8
tick,0x7ffdf681f424,33285660,0,0x0,8
tick,0x7ffdf681f424,33287604,0,0x0,8
tick,0x7ffdf681f424,33289629,0,0x0,8
tick,0x7ffdf681f424,33291597,0,0x0,8
tick,0x7ffdf681f424,33293591,0,0x0,8
tick,0x7ffdf681f424,33295585,0,0x0,8
tick,0x7ffdf681f424,33297578,0,0x0,8
tick,0x7ffdf681f424,33299818,0,0x0,8
tick,0x7ffdf681f424,33301567,0,0x0,8
tick,0x7ffdf681f424,33303566,0,0x0,8
tick,0x7ffdf681f424,33305551,0,0x0,8
tick,0x7ffdf681f424,33307549,0,0x0,8
tick,0x7ffdf681f424,33309541,0,0x0,8
tick,0x7ffdf681f424,33311542,0,0x0,8
tick,0x7ffdf681f424,33313527,0,0x0,8
tick,0x7ffdf681f424,33315532,0,0x0,8
tick,0x7ffdf681f424,33318615,0,0x0,8
tick,0x7ffdf681f424,33322045,0,0x0,8
tick,0x7ffdf681f424,33334120,0,0x0,8
tick,0x7ffdf681f424,33335473,0,0x0,8
tick,0x7ffdf681f424,33337471,0,0x0,8
tick,0x7ffdf681f424,33339452,0,0x0,8
tick,0x7ffdf681f424,33341449,0,0x0,8
tick,0x7ffdf681f424,33343470,0,0x0,8
tick,0x7ffdf681f424,33345458,0,0x0,8
tick,0x7ffdf681f424,33347467,0,0x0,8
tick,0x7ffdf681f424,33349443,0,0x0,8
tick,0x7ffdf681f424,33351438,0,0x0,8
tick,0x7ffdf681f424,33353476,0,0x0,8
tick,0x7ffdf681f424,33355435,0,0x0,8
tick,0x7ffdf681f424,33357420,0,0x0,8
tick,0x7ffdf681f424,33359450,0,0x0,8
tick,0x7ffdf681f424,33361496,0,0x0,8
tick,0x7ffdf681f424,33363422,0,0x0,8
tick,0x7ffdf681f424,33365396,0,0x0,8
tick,0x7ffdf681f424,33367384,0,0x0,8
tick,0x7ffdf681f424,33369386,0,0x0,8
tick,0x7ffdf681f424,33371375,0,0x0,8
tick,0x7ffdf681f424,33373365,0,0x0,8
tick,0x7ffdf681f424,33375361,0,0x0,8
tick,0x7ffdf681f424,33377420,0,0x0,8
tick,0x7ffdf681f424,33379363,0,0x0,8
tick,0x7ffdf681f424,33381352,0,0x0,8
tick,0x7ffdf681f424,33383357,0,0x0,8
tick,0x7ffdf681f424,33385356,0,0x0,8
tick,0x7ffdf681f424,33387345,0,0x0,8
tick,0x7ffdf681f424,33389395,0,0x0,8
tick,0x7ffdf681f424,33391718,0,0x0,8
tick,0x7ffdf681f424,33408552,0,0x0,8
tick,0x7ffdf681f424,33410507,0,0x0,8
tick,0x7ffdf681f424,33412534,0,0x0,8
tick,0x7ffdf681f424,33418423,0,0x0,8
tick,0x7ffdf681f424,33420268,0,0x0,8
tick,0x7ffdf681f424,33422259,0,0x0,8
tick,0x7ffdf681f424,33424262,0,0x0,8
tick,0x7ffdf681f424,33426231,0,0x0,8
tick,0x7ffdf681f424,33428234,0,0x0,8
tick,0x7ffdf681f424,33430232,0,0x0,8
tick,0x7ffdf681f424,33432218,0,0x0,8
tick,0x7ffdf681f424,33434217,0,0x0,8
tick,0x7ffdf681f424,33436271,0,0x0,8
tick,0x7ffdf681f424,33438221,0,0x0,8
tick,0x7ffdf681f424,33440259,0,0x0,8
tick,0x7ffdf681f424,33442214,0,0x0,8
tick,0x7ffdf681f424,33444192,0,0x0,8
tick,0x7ffdf681f424,33446184,0,0x0,8
tick,0x7ffdf681f424,33448170,0,0x0,8
tick,0x7ffdf681f424,33450207,0,0x0,8
tick,0x7ffdf681f424,33452165,0,0x0,8
tick,0x7ffdf681f424,33454161,0,0x0,8
tick,0x7ffdf681f424,33456150,0,0x0,8
tick,0x7ffdf681f424,33458146,0,0x0,8
tick,0x7ffdf681f424,33460139,0,0x0,8
tick,0x7ffdf681f424,33462176,0,0x0,8
tick,0x7ffdf681f424,33473979,0,0x0,8
tick,0x7ffdf681f424,33475101,0,0x0,8
tick,0x7ffdf681f424,33477228,0,0x0,8
tick,0x7ffdf681f424,33479138,0,0x0,8
tick,0x7ffdf681f424,33481085,0,0x0,8
tick,0x7ffdf681f424,33483079,0,0x0,8
tick,0x7ffdf681f424,33485072,0,0x0,8
tick,0x7ffdf681f424,33487081,0,0x0,8
tick,0x7ffdf681f424,33489069,0,0x0,8
tick,0x7ffdf681f424,33491054,0,0x0,8
tick,0x7ffdf681f424,33493047,0,0x0,8
tick,0x7ffdf681f424,33495051,0,0x0,8
tick,0x7ffdf681f424,33497039,0,0x0,8
tick,0x7ffdf681f424,33501882,0,0x0,8
tick,0x7ffdf681f424,33514416,0,0x0,8
tick,0x7ffdf681f424,33516005,0,0x0,8
tick,0x7ffdf681f424,33517987,0,0x0,8
tick,0x7ffdf681f424,33519989,0,0x0,8
tick,0x7ffdf681f424,33522184,0,0x0,8
tick,0x7ffdf681f424,33524023,0,0x0,8
tick,0x7ffdf681f424,33525994,0,0x0,8
tick,0x7ffdf681f424,33527965,0,0x0,8
tick,0x7ffdf681f424,33529959,0,0x0,8
tick,0x7ffdf681f424,33531977,0,0x0,8
tick,0x7ffdf681f424,33533949,0,0x0,8
tick,0x7ffdf681f424,33536024,0,0x0,8
tick,0x7ffdf681f424,33537937,0,0x0,8
tick,0x7ffdf681f424,33539930,0,0x0,8
tick,0x7ffdf681f424,33541927,0,0x0,8
tick,0x7ffdf681f424,33543937,0,0x0,8
tick,0x7ffdf681f424,33557301,0,0x0,8
tick,0x7ffdf681f424,33558889,0,0x0,8
tick,0x7ffdf681f424,33560930,0,0x0,8
tick,0x7ffdf681f424,33562921,0,0x0,8
tick,0x7ffdf681f424,33564896,0,0x0,8
tick,0x7ffdf681f424,33566954,0,0x0,8
tick,0x7ffdf681f424,33568866,0,0x0,8
tick,0x7ffdf681f424,33570896,0,0x0,8
tick,0x7ffdf681f424,33572849,0,0x0,8
tick,0x7ffdf681f424,33574838,0,0x0,8
tick,0x7ffdf681f424,33576831,0,0x0,8
tick,0x7ffdf681f424,33578838,0,0x0,8
tick,0x7ffdf681f424,33580824,0,0x0,8
tick,0x7ffdf681f424,33582818,0,0x0,8
tick,0x7ffdf681f424,33584810,0,0x0,8
tick,0x7ffdf681f424,33586807,0,0x0,8
tick,0x7ffdf681f424,33588805,0,0x0,8
tick,0x7ffdf681f424,33590798,0,0x0,8
tick,0x7ffdf681f424,33592786,0,0x0,8
tick,0x7ffdf681f424,33594786,0,0x0,8
tick,0x7ffdf681f424,33596783,0,0x0,8
tick,0x7ffdf681f424,33598776,0,0x0,8
tick,0x7ffdf681f424,33600769,0,0x0,8
tick,0x7ffdf681f424,33612281,0,0x0,8
tick,0x7ffdf681f424,33615846,0,0x0,8
tick,0x7ffdf681f424,33617734,0,0x0,8
tick,0x7ffdf681f424,33619767,0,0x0,8
tick,0x7ffdf681f424,33621719,0,0x0,8
tick,0x7ffdf681f424,33623713,0,0x0,8
tick,0x7ffdf681f424,33625728,0,0x0,8
tick,0x7ffdf681f424,33627697,0,0x0,8
tick,0x7ffdf681f424,33629690,0,0x0,8
tick,0x7ffdf681f424,33631683,0,0x0,8
tick,0x7ffdf681f424,33633677,0,0x0,8
tick,0x7ffdf681f424,33635677,0,0x0,8
tick,0x7ffdf681f424,33637700,0,0x0,8
tick,0x7ffdf681f424,33639661,0,0x0,8
tick,0x7ffdf681f424,33641654,0,0x0,8
tick,0x7ffdf681f424,33643649,0,0x0,8
tick,0x7ffdf681f424,33645660,0,0x0,8
tick,0x7ffdf681f424,33647645,0,0x0,8
tick,0x7ffdf681f424,33649635,0,0x0,8
tick,0x7ffdf681f424,33651631,0,0x0,8
tick,0x7ffdf681f424,33653901,0,0x0,8
tick,0x7ffdf681f424,33667385,0,0x0,8
tick,0x7ffdf681f424,33668583,0,0x0,8
tick,0x7ffdf681f424,33670587,0,0x0,8
tick,0x7ffdf681f424,33672734,0,0x0,8
tick,0x7ffdf681f424,33674620,0,0x0,8
tick,0x7ffdf681f424,33676616,0,0x0,8
tick,0x7ffdf681f424,33678576,0,0x0,8
tick,0x7ffdf681f424,33680572,0,0x0,8
tick,0x7ffdf681f424,33682584,0,0x0,8
tick,0x7ffdf681f424,33690141,0,0x0,8
tick,0x7ffdf681f424,33697496,0,0x0,8
tick,0x7ffdf681f424,33699508,0,0x0,8
tick,0x7ffdf681f424,33701503,0,0x0,8
tick,0x7ffdf681f424,33703662,0,0x0,8
tick,0x7ffdf681f424,33705676,0,0x0,8
tick,0x7ffdf681f424,33708469,0,0x0,8
tick,0x7ffdf681f424,33709647,0,0x0,8
tick,0x7ffdf681f424,33711475,0,0x0,8
tick,0x7ffdf681f424,33713478,0,0x0,8
tick,0x7ffdf681f424,33715467,0,0x0,8
tick,0x7ffdf681f424,33717528,0,0x0,8
tick,0x7ffdf681f424,33719477,0,0x0,8
tick,0x7ffdf681f424,33721448,0,0x0,8
tick,0x7ffdf681f424,33723442,0,0x0,8
tick,0x7ffdf681f424,33724572,0,0x0,8
tick,0x7ffdf681f424,33726438,0,0x0,8
tick,0x7ffdf681f424,33728556,0,0x0,8
tick,0x7ffdf681f424,33730429,0,0x0,8
tick,0x7ffdf681f424,33732424,0,0x0,8
tick,0x7ffdf681f424,33734412,0,0x0,8
tick,0x7ffdf681f424,33736423,0,0x0,8
tick,0x7ffdf681f424,33738423,0,0x0,8
tick,0x7ffdf681f424,33740394,0,0x0,8
tick,0x7ffdf681f424,33742399,0,0x0,8
tick,0x7ffdf681f424,33744388,0,0x0,8
tick,0x7ffdf681f424,33746381,0,0x0,8
tick,0x7ffdf681f424,33748370,0,0x0,8
tick,0x7ffdf681f424,33750366,0,0x0,8
tick,0x7ffdf681f424,33752364,0,0x0,8
tick,0x7ffdf681f424,33754358,0,0x0,8
tick,0x7ffdf681f424,33756352,0,0x0,8
tick,0x7ffdf681f424,33758344,0,0x0,8
tick,0x7ffdf681f424,33760337,0,0x0,8
tick,0x7ffdf681f424,33762338,0,0x0,8
tick,0x7ffdf681f424,33764343,0,0x0,8
tick,0x7ffdf681f424,33766325,0,0x0,8
tick,0x7ffdf681f424,33769990,0,0x0,8
tick,0x7ffdf681f424,33771417,0,0x0,8
tick,0x7ffdf681f424,33773346,0,0x0,8
tick,0x7ffdf681f424,33775343,0,0x0,8
tick,0x7ffdf681f424,33781399,0,0x0,8
tick,0x7ffdf681f424,33783283,0,0x0,8
tick,0x7ffdf681f424,33785351,0,0x0,8
tick,0x7ffdf681f424,33787422,0,0x0,8
tick,0x7ffdf681f424,33789277,0,0x0,8
tick,0x7ffdf681f424,33791268,0,0x0,8
tick,0x7ffdf681f424,33793261,0,0x0,8
tick,0x7ffdf681f424,33795287,0,0x0,8
tick,0x7ffdf681f424,33797243,0,0x0,8
tick,0x7ffdf681f424,33799234,0,0x0,8
tick,0x7ffdf681f424,33801244,0,0x0,8
tick,0x7ffdf681f424,33803233,0,0x0,8
tick,0x7ffdf681f424,33805225,0,0x0,8
tick,0x7ffdf681f424,33807218,0,0x0,8
tick,0x7ffdf681f424,33809207,0,0x0,8
tick,0x7ffdf681f424,33811226,0,0x0,8
tick,0x7ffdf681f424,33813201,0,0x0,8
tick,0x7ffdf681f424,33815194,0,0x0,8
tick,0x7ffdf681f424,33817184,0,0x0,8
tick,0x7ffdf681f424,33819864,0,0x0,8
tick,0x7ffdf681f424,33821543,0,0x0,8
tick,0x7ffdf681f424,33825938,0,0x0,8
tick,0x7ffdf681f424,33830734,0,0x0,8
tick,0x7ffdf681f424,33834200,0,0x0,8
tick,0x7ffdf681f424,33836155,0,0x0,8
tick,0x7ffdf681f424,33838138,0,0x0,8
tick,0x7ffdf681f424,33840127,0,0x0,8
tick,0x7ffdf681f424,33842290,0,0x0,8
tick,0x7ffdf681f424,33844312,0,0x0,8
tick,0x7ffdf681f424,33846123,0,0x0,8
tick,0x7ffdf681f424,33848141,0,0x0,8
tick,0x7ffdf681f424,33850142,0,0x0,8
tick,0x7ffdf681f424,33852098,0,0x0,8
tick,0x7ffdf681f424,33854104,0,0x0,8
tick,0x7ffdf681f424,33856097,0,0x0,8
tick,0x7ffdf681f424,33858079,0,0x0,8
tick,0x7ffdf681f424,33860075,0,0x0,8
tick,0x7ffdf681f424,33862112,0,0x0,8
tick,0x7ffdf681f424,33864086,0,0x0,8
tick,0x7ffdf681f424,33866073,0,0x0,8
tick,0x7ffdf681f424,33868067,0,0x0,8
tick,0x7ffdf681f424,33870119,0,0x0,8
tick,0x7ffdf681f424,33872049,0,0x0,8
tick,0x7ffdf681f424,33874036,0,0x0,8
tick,0x7ffdf681f424,33876035,0,0x0,8
tick,0x7ffdf681f424,33892401,0,0x0,8
tick,0x7ffdf681f424,33893997,0,0x0,8
tick,0x7ffdf681f424,33896002,0,0x0,8
tick,0x7ffdf681f424,33898108,0,0x0,8
tick,0x7ffdf681f424,33899969,0,0x0,8
tick,0x7ffdf681f424,33901993,0,0x0,8
tick,0x7ffdf681f424,33903966,0,0x0,8
tick,0x7ffdf681f424,33905954,0,0x0,8
tick,0x7ffdf681f424,33907943,0,0x0,8
tick,0x7ffdf681f424,33909939,0,0x0,8
tick,0x7ffdf681f424,33911944,0,0x0,8
tick,0x7ffdf681f424,33913939,0,0x0,8
tick,0x7ffdf681f424,33915926,0,0x0,8
tick,0x7ffdf681f424,33917915,0,0x0,8
tick,0x7ffdf681f424,33919920,0,0x0,8
tick,0x7ffdf681f424,33921911,0,0x0,8
tick,0x7ffdf681f424,33923900,0,0x0,8
tick,0x7ffdf681f424,33925892,0,0x0,8
tick,0x7ffdf681f424,33927905,0,0x0,8
tick,0x7ffdf681f424,33929889,0,0x0,8
tick,0x7ffdf681f424,33931882,0,0x0,8
tick,0x7ffdf681f424,33933876,0,0x0,8
tick,0x7ffdf681f424,33935900,0,0x0,8
tick,0x7ffdf681f424,33937896,0,0x0,8
tick,0x7ffdf681f424,33939864,0,0x0,8
tick,0x7ffdf681f424,33941853,0,0x0,8
tick,0x7ffdf681f424,33943852,0,0x0,8
tick,0x7ffdf681f424,33959310,0,0x0,8
tick,0x7ffdf681f424,33960812,0,0x0,8
tick,0x7ffdf681f424,33962806,0,0x0,8
tick,0x7ffdf681f424,33964856,0,0x0,8
tick,0x7ffdf681f424,33966813,0,0x0,8
tick,0x7ffdf681f424,33968789,0,0x0,8
tick,0x7ffdf681f424,33970782,0,0x0,8
tick,0x7ffdf681f424,33972776,0,0x0,8
tick,0x7ffdf681f424,33974762,0,0x0,8
tick,0x7ffdf681f424,33976766,0,0x0,8
tick,0x7ffdf681f424,33978760,0,0x0,8
tick,0x7ffdf681f424,33980761,0,0x0,8
tick,0x7ffdf681f424,33983469,0,0x0,8
tick,0x7ffdf681f424,33984808,0,0x0,8
tick,0x7ffdf681f424,33987036,0,0x0,8
tick,0x7ffdf681f424,33989033,0,0x0,8
tick,0x7ffdf681f424,33990798,0,0x0,8
tick,0x7ffdf681f424,33999717,0,0x0,8
tick,0x7ffdf681f424,34001710,0,0x0,8
tick,0x7ffdf681f424,34003693,0,0x0,8
tick,0x7ffdf681f424,34005962,0,0x0,8
tick,0x7ffdf681f424,34007675,0,0x0,8
tick,0x7ffdf681f424,34009756,0,0x0,8
tick,0x7ffdf681f424,34011672,0,0x0,8
tick,0x7ffdf681f424,34013671,0,0x0,8
tick,0x7ffdf681f424,34015660,0,0x0,8
tick,0x7ffdf681f424,34017652,0,0x0,8
tick,0x7ffdf681f424,34019655,0,0x0,8
tick,0x7ffdf681f424,34021645,0,0x0,8
tick,0x7ffdf681f424,34023635,0,0x0,8
tick,0x7ffdf681f424,34025625,0,0x0,8
tick,0x7ffdf681f424,34027620,0,0x0,8
tick,0x7ffdf681f424,34029623,0,0x0,8
tick,0x7ffdf681f424,34031613,0,0x0,8
tick,0x7ffdf681f424,34033604,0,0x0,8
tick,0x7ffdf681f424,34035693,0,0x0,8
tick,0x7ffdf681f424,34037600,0,0x0,8
tick,0x7ffdf681f424,34040416,0,0x0,8
tick,0x7ffdf681f424,34042806,0,0x0,8
tick,0x7ffdf681f424,34052657,0,0x0,8
tick,0x7ffdf681f424,34054569,0,0x0,8
tick,0x7ffdf681f424,34056553,0,0x0,8
tick,0x7ffdf681f424,34058851,0,0x0,8
tick,0x7ffdf681f424,34060538,0,0x0,8
tick,0x7ffdf681f424,34062548,0,0x0,8
tick,0x7ffdf681f424,34064528,0,0x0,8
tick,0x7ffdf681f424,34066519,0,0x0,8
tick,0x7ffdf681f424,34068518,0,0x0,8
tick,0x7ffdf681f424,34070515,0,0x0,8
tick,0x7ffdf681f424,34072504,0,0x0,8
tick,0x7ffdf681f424,34074499,0,0x0,8
tick,0x7ffdf681f424,34076489,0,0x0,8
tick,0x7ffdf681f424,34078544,0,0x0,8
tick,0x7ffdf681f424,34080481,0,0x0,8
tick,0x7ffdf681f424,34082498,0,0x0,8
tick,0x7ffdf681f424,34084471,0,0x0,8
tick,0x7ffdf681f424,34086517,0,0x0,8
tick,0x7ffdf681f424,34088470,0,0x0,8
tick,0x7ffdf681f424,34090461,0,0x0,8
tick,0x7ffdf681f424,34092455,0,0x0,8
tick,0x7ffdf681f424,34094635,0,0x0,8
tick,0x7ffdf681f424,34096624,0,0x0,8
tick,0x7ffdf681f424,34098444,0,0x0,8
tick,0x7ffdf681f424,34100467,0,0x0,8
tick,0x7ffdf681f424,34102431,0,0x0,8
tick,0x7ffdf681f424,34105749,0,0x0,8
tick,0x7ffdf681f424,34106624,0,0x0,8
tick,0x7ffdf681f424,34108465,0,0x0,8
tick,0x7ffdf681f424,34110409,0,0x0,8
tick,0x7ffdf681f424,34112451,0,0x0,8
tick,0x7ffdf681f424,34114678,0,0x0,8
tick,0x7ffdf681f424,34116423,0,0x0,8
tick,0x7ffdf681f424,34118418,0,0x0,8
tick,0x7ffdf681f424,34120383,0,0x0,8
tick,0x7ffdf681f424,34122382,0,0x0,8
tick,0x7ffdf681f424,34124366,0,0x0,8
tick,0x7ffdf681f424,34126404,0,0x0,8
tick,0x7ffdf681f424,34128363,0,0x0,8
tick,0x7ffdf681f424,34130386,0,0x0,8
tick,0x7ffdf681f424,34132375,0,0x0,8
tick,0x7ffdf681f424,34134346,0,0x0,8
tick,0x7ffdf681f424,34136338,0,0x0,8
tick,0x7ffdf681f424,34138357,0,0x0,8
tick,0x7ffdf681f424,34140335,0,0x0,8
tick,0x7ffdf681f424,34142328,0,0x0,8
tick,0x7ffdf681f424,34144353,0,0x0,8
tick,0x7ffdf681f424,34162958,0,0x0,8
tick,0x7ffdf681f424,34164263,0,0x0,8
tick,0x7ffdf681f424,34166266,0,0x0,8
tick,0x7ffdf681f424,34168593,0,0x0,8
tick,0x7ffdf681f424,34170290,0,0x0,8
tick,0x7ffdf681f424,34172274,0,0x0,8
tick,0x7ffdf681f424,34174235,0,0x0,8
tick,0x7ffdf681f424,34176232,0,0x0,8
tick,0x7ffdf681f424,34178338,0,0x0,8
tick,0x7ffdf681f424,34180218,0,0x0,8
tick,0x7ffdf681f424,34182214,0,0x0,8
tick,0x7ffdf681f424,34184212,0,0x0,8
tick,0x7ffdf681f424,34186201,0,0x0,8
tick,0x7ffdf681f424,34188203,0,0x0,8
tick,0x7ffdf681f424,34190189,0,0x0,8
tick,0x7ffdf681f424,34192184,0,0x0,8
tick,0x7ffdf681f424,34194178,0,0x0,8
tick,0x7ffdf681f424,34196176,0,0x0,8
tick,0x7ffdf681f424,34198167,0,0x0,8
tick,0x7ffdf681f424,34200157,0,0x0,8
tick,0x7ffdf681f424,34202154,0,0x0,8
tick,0x7ffdf681f424,34204161,0,0x0,8
tick,0x7ffdf681f424,34206535,0,0x0,8
tick,0x7ffdf681f424,34210869,0,0x0,8
tick,0x7ffdf681f424,34219193,0,0x0,8
tick,0x7ffdf681f424,34221116,0,0x0,8
tick,0x7ffdf681f424,34223103,0,0x0,8
tick,0x7ffdf681f424,34233506,0,0x0,8
tick,0x7ffdf681f424,34235244,0,0x0,8
tick,0x7ffdf681f424,34237225,0,0x0,8
tick,0x7ffdf681f424,34239297,0,0x0,8
tick,0x7ffdf681f424,34241227,0,0x0,8
tick,0x7ffdf681f424,34243067,0,0x0,8
tick,0x7ffdf681f424,34245537,0,0x0,8
tick,0x7ffdf681f424,34247049,0,0x0,8
tick,0x7ffdf681f424,34249211,0,0x0,8
tick,0x7ffdf681f424,34251569,0,0x0,8
tick,0x7ffdf681f424,34253085,0,0x0,8
tick,0x7ffdf681f424,34255161,0,0x0,8
tick,0x7ffdf681f424,34257014,0,0x0,8
tick,0x7ffdf681f424,34259017,0,0x0,8
tick,0x7ffdf681f424,34261052,0,0x0,8
tick,0x7ffdf681f424,34263013,0,0x0,8
tick,0x7ffdf681f424,34265030,0,0x0,8
tick,0x7ffdf681f424,34266983,0,0x0,8
tick,0x7ffdf681f424,34268989,0,0x0,8
tick,0x7ffdf681f424,34270986,0,0x0,8
tick,0x7ffdf681f424,34272971,0,0x0,8
tick,0x7ffdf681f424,34274971,0,0x0,8
tick,0x7ffdf681f424,34276968,0,0x0,8
tick,0x7ffdf681f424,34278959,0,0x0,8
tick,0x7ffdf681f424,34280963,0,0x0,8
tick,0x7ffdf681f424,34282938,0,0x0,8
tick,0x7ffdf681f424,34284932,0,0x0,8
tick,0x7ffdf681f424,34286995,0,0x0,8
tick,0x7ffdf681f424,34288926,0,0x0,8
tick,0x7ffdf681f424,34290915,0,0x0,8
tick,0x7ffdf681f424,34292917,0,0x0,8
tick,0x7ffdf681f424,34294918,0,0x0,8
tick,0x7ffdf681f424,34296907,0,0x0,8
tick,0x7ffdf681f424,34298895,0,0x0,8
tick,0x7ffdf681f424,34303182,0,0x0,8
tick,0x7ffdf681f424,34313157,0,0x0,8
tick,0x7ffdf681f424,34314868,0,0x0,8
tick,0x7ffdf681f424,34316857,0,0x0,8
tick,0x7ffdf681f424,34318856,0,0x0,8
tick,0x7ffdf681f424,34320893,0,0x0,8
tick,0x7ffdf681f424,34322858,0,0x0,8
tick,0x7ffdf681f424,34325410,0,0x0,8
tick,0x7ffdf681f424,34327019,0,0x0,8
tick,0x7ffdf681f424,34329180,0,0x0,8
tick,0x7ffdf681f424,34330820,0,0x0,8
tick,0x7ffdf681f424,34332839,0,0x0,8
tick,0x7ffdf681f424,34334809,0,0x0,8
tick,0x7ffdf681f424,34336858,0,0x0,8
tick,0x7ffdf681f424,34338828,0,0x0,8
tick,0x7ffdf681f424,34340788,0,0x0,8
tick,0x7ffdf681f424,34342785,0,0x0,8
tick,0x7ffdf681f424,34345257,0,0x0,8
tick,0x7ffdf681f424,34346773,0,0x0,8
tick,0x7ffdf681f424,34348809,0,0x0,8
tick,0x7ffdf681f424,34350759,0,0x0,8
tick,0x7ffdf681f424,34352766,0,0x0,8
tick,0x7ffdf681f424,34354752,0,0x0,8
tick,0x7ffdf681f424,34356742,0,0x0,8
tick,0x7ffdf681f424,34358733,0,0x0,8
tick,0x7ffdf681f424,34360800,0,0x0,8
tick,0x7ffdf681f424,34362732,0,0x0,8
tick,0x7ffdf681f424,34364717,0,0x0,8
tick,0x7ffdf681f424,34366711,0,0x0,8
tick,0x7ffdf681f424,34368707,0,0x0,8
tick,0x7ffdf681f424,34370712,0,0x0,8
tick,0x7ffdf681f424,34372696,0,0x0,8
tick,0x7ffdf681f424,34374690,0,0x0,8
tick,0x7ffdf681f424,34386807,0,0x0,8
tick,0x7ffdf681f424,34388661,0,0x0,8
tick,0x7ffdf681f424,34390676,0,0x0,8
tick,0x7ffdf681f424,34392677,0,0x0,8
tick,0x7ffdf681f424,34394713,0,0x0,8
tick,0x7ffdf681f424,34396638,0,0x0,8
tick,0x7ffdf681f424,34398629,0,0x0,8
tick,0x7ffdf681f424,34400629,0,0x0,8
tick,0x7ffdf681f424,34402623,0,0x0,8
tick,0x7ffdf681f424,34404620,0,0x0,8
tick,0x7ffdf681f424,34406607,0,0x0,8
tick,0x7ffdf681f424,34408610,0,0x0,8
tick,0x7ffdf681f424,34410598,0,0x0,8
tick,0x7ffdf681f424,34412600,0,0x0,8
tick,0x7ffdf681f424,34414592,0,0x0,8
tick,0x7ffdf681f424,34416579,0,0x0,8
tick,0x7ffdf681f424,34418578,0,0x0,8
tick,0x7ffdf681f424,34420580,0,0x0,8
tick,0x7ffdf681f424,34422566,0,0x0,8
tick,0x7ffdf681f424,34424561,0,0x0,8
tick,0x7ffdf681f424,34426560,0,0x0,8
tick,0x7ffdf681f424,34428557,0,0x0,8
tick,0x7ffdf681f424,34430569,0,0x0,8
tick,0x7ffdf681f424,34432539,0,0x0,8
tick,0x7ffdf681f424,34434532,0,0x0,8
tick,0x7ffdf681f424,34436560,0,0x0,8
tick,0x7ffdf681f424,34438526,0,0x0,8
tick,0x7ffdf681f424,34440520,0,0x0,8
tick,0x7ffdf681f424,34442515,0,0x0,8
tick,0x7ffdf681f424,34446340,0,0x0,8
tick,0x7ffdf681f424,34447499,0,0x0,8
tick,0x7ffdf681f424,34449498,0,0x0,8
tick,0x7ffdf681f424,34452549,0,0x0,8
tick,0x7ffdf681f424,34465470,0,0x0,8
tick,0x7ffdf681f424,34471810,0,0x0,8
tick,0x7ffdf681f424,34473499,0,0x0,8
tick,0x7ffdf681f424,34481039,0,0x0,8
tick,0x7ffdf681f424,34482469,0,0x0,8
tick,0x7ffdf681f424,34484415,0,0x0,8
tick,0x7ffdf681f424,34486531,0,0x0,8
tick,0x7ffdf681f424,34488522,0,0x0,8
tick,0x7ffdf681f424,34490562,0,0x0,8
tick,0x7ffdf681f424,34492539,0,0x0,8
tick,0x7ffdf681f424,34494958,0,0x0,8
tick,0x7ffdf681f424,34496371,0,0x0,8
tick,0x7ffdf681f424,34498375,0,0x0,8
tick,0x7ffdf681f424,34500363,0,0x0,8
tick,0x7ffdf681f424,34502519,0,0x0,8
tick,0x7ffdf681f424,34504383,0,0x0,8
tick,0x7ffdf681f424,34506350,0,0x0,8
tick,0x7ffdf681f424,34508340,0,0x0,8
tick,0x7ffdf681f424,34510337,0,0x0,8
tick,0x7ffdf681f424,34512362,0,0x0,8
tick,0x7ffdf681f424,34514320,0,0x0,8
tick,0x7ffdf681f424,34516312,0,0x0,8
tick,0x7ffdf681f424,34518310,0,0x0,8
tick,0x7ffdf681f424,34520318,0,0x0,8
tick,0x7ffdf681f424,34522303,0,0x0,8
tick,0x7ffdf681f424,34524291,0,0x0,8
tick,0x7ffdf681f424,34526286,0,0x0,8
tick,0x7ffdf681f424,34528308,0,0x0,8
tick,0x7ffdf681f424,34530278,0,0x0,8
tick,0x7ffdf681f424,34533518,0,0x0,8
tick,0x7ffdf681f424,34543796,0,0x0,8
tick,0x7ffdf681f424,34545246,0,0x0,8
tick,0x7ffdf681f424,34547251,0,0x0,8
tick,0x7ffdf681f424,34549239,0,0x0,8
tick,0x7ffdf681f424,34551225,0,0x0,8
tick,0x7ffdf681f424,34553220,0,0x0,8
tick,0x7ffdf681f424,34555207,0,0x0,8
tick,0x7ffdf681f424,34557207,0,0x0,8
tick,0x7ffdf681f424,34559200,0,0x0,8
tick,0x7ffdf681f424,34561197,0,0x0,8
tick,0x7ffdf681f424,34563190,0,0x0,8
tick,0x7ffdf681f424,34565185,0,0x0,8
tick,0x7ffdf681f424,34567174,0,0x0,8
tick,0x7ffdf681f424,34569171,0,0x0,8
tick,0x7ffdf681f424,34571169,0,0x0,8
tick,0x7ffdf681f424,34573159,0,0x0,8
tick,0x7ffdf681f424,34575267,0,0x0,8
tick,0x7ffdf681f424,34577315,0,0x0,8
tick,0x7ffdf681f424,34589995,0,0x0,8
tick,0x7ffdf681f424,34591124,0,0x0,8
tick,0x7ffdf681f424,34593109,0,0x0,8
tick,0x7ffdf681f424,34595155,0,0x0,8
tick,0x7ffdf681f424,34597103,0,0x0,8
tick,0x7ffdf681f424,34599098,0,0x0,8
tick,0x7ffdf681f424,34601089,0,0x0,8
tick,0x7ffdf681f424,34603083,0,0x0,8
tick,0x7ffdf681f424,34605095,0,0x0,8
tick,0x7ffdf681f424,34607070,0,0x0,8
tick,0x7ffdf681f424,34609063,0,0x0,8
tick,0x7ffdf681f424,34621351,0,0x0,8
tick,0x7ffdf681f424,34621384,0,0x0,8
tick,0x7ffdf681f424,34623028,0,0x0,8
tick,0x7ffdf681f424,34625123,0,0x0,8
tick,0x7ffdf681f424,34627021,0,0x0,8
tick,0x7ffdf681f424,34629057,0,0x0,8
tick,0x7ffdf681f424,34631010,0,0x0,8
tick,0x7ffdf681f424,34633003,0,0x0,8
tick,0x7ffdf681f424,34635001,0,0x0,8
tick,0x7ffdf681f424,34636991,0,0x0,8
tick,0x7ffdf681f424,34638986,0,0x0,8
tick,0x7ffdf681f424,34640981,0,0x0,8
tick,0x7ffdf681f424,34642977,0,0x0,8
tick,0x7ffdf681f424,34644978,0,0x0,8
tick,0x7ffdf681f424,34646968,0,0x0,8
tick,0x7ffdf681f424,34648959,0,0x0,8
tick,0x7ffdf681f424,34650953,0,0x0,8
tick,0x7ffdf681f424,34652946,0,0x0,8
tick,0x7ffdf681f424,34654944,0,0x0,8
tick,0x7ffdf681f424,34656936,0,0x0,8
tick,0x7ffdf681f424,34658930,0,0x0,8
tick,0x7ffdf681f424,34660928,0,0x0,8
tick,0x7ffdf681f424,34674354,0,0x0,8
tick,0x7ffdf681f424,34675894,0,0x0,8
tick,0x7ffdf681f424,34677950,0,0x0,8
tick,0x7ffdf681f424,34679884,0,0x0,8
tick,0x7ffdf681f424,34681933,0,0x0,8
tick,0x7ffdf681f424,34683872,0,0x0,8
tick,0x7ffdf681f424,34685859,0,0x0,8
tick,0x7ffdf681f424,34687854,0,0x0,8
tick,0x7ffdf681f424,34689849,0,0x0,8
tick,0x7ffdf681f424,34691843,0,0x0,8
tick,0x7ffdf681f424,34693835,0,0x0,8
tick,0x7ffdf681f424,34695839,0,0x0,8
tick,0x7ffdf681f424,34697828,0,0x0,8
tick,0x7ffdf681f424,34699824,0,0x0,8
tick,0x7ffdf681f424,34701815,0,0x0,8
tick,0x7ffdf681f424,34715543,0,0x0,8
tick,0x7ffdf681f424,34716785,0,0x0,8
tick,0x7ffdf681f424,34718775,0,0x0,8
tick,0x7ffdf681f424,34721092,0,0x0,8
tick,0x7ffdf681f424,34722770,0,0x0,8
tick,0x7ffdf681f424,34724761,0,0x0,8
tick,0x7ffdf681f424,34726758,0,0x0,8
tick,0x7ffdf681f424,34728754,0,0x0,8
tick,0x7ffdf681f424,34730742,0,0x0,8
tick,0x7ffdf681f424,34732736,0,0x0,8
tick,0x7ffdf681f424,34734731,0,0x0,8
tick,0x7ffdf681f424,34736730,0,0x0,8
tick,0x7ffdf681f424,34738718,0,0x0,8
tick,0x7ffdf681f424,34740713,0,0x0,8
tick,0x7ffdf681f424,34742706,0,0x0,8
tick,0x7ffdf681f424,34744704,0,0x0,8
tick,0x7ffdf681f424,34746694,0,0x0,8
tick,0x7ffdf681f424,34748692,0,0x0,8
tick,0x7ffdf681f424,34750688,0,0x0,8
tick,0x7ffdf681f424,34752681,0,0x0,8
tick,0x7ffdf681f424,34755757,0,0x0,8
tick,0x7ffdf681f424,34765156,0,0x0,8
tick,0x7ffdf681f424,34766650,0,0x0,8
tick,0x7ffdf681f424,34768716,0,0x0,8
tick,0x7ffdf681f424,34770640,0,0x0,8
tick,0x7ffdf681f424,34772631,0,0x0,8
tick,0x7ffdf681f424,34774623,0,0x0,8
tick,0x7ffdf681f424,34776622,0,0x0,8
tick,0x7ffdf681f424,34779804,0,0x0,8
tick,0x7ffdf681f424,34793254,0,0x0,8
tick,0x7ffdf681f424,34794577,0,0x0,8
tick,0x7ffdf681f424,34796568,0,0x0,8
tick,0x7ffdf681f424,34798559,0,0x0,8
tick,0x7ffdf681f424,34800554,0,0x0,8
tick,0x7ffdf681f424,34802621,0,0x0,8
tick,0x7ffdf681f424,34804589,0,0x0,8
tick,0x7ffdf681f424,34806564,0,0x0,8
tick,0x7ffdf681f424,34808553,0,0x0,8
tick,0x7ffdf681f424,34810528,0,0x0,8
tick,0x7ffdf681f424,34812532,0,0x0,8
tick,0x7ffdf681f424,34814519,0,0x0,8
tick,0x7ffdf681f424,34816513,0,0x0,8
tick,0x7ffdf681f424,34818503,0,0x0,8
tick,0x7ffdf681f424,34820505,0,0x0,8
tick,0x7ffdf681f424,34822491,0,0x0,8
tick,0x7ffdf681f424,34824488,0,0x0,8
tick,0x7ffdf681f424,34826485,0,0x0,8
tick,0x7ffdf681f424,34828480,0,0x0,8
tick,0x7ffdf681f424,34830483,0,0x0,8
tick,0x7ffdf681f424,34832467,0,0x0,8
tick,0x7ffdf681f424,34834460,0,0x0,8
tick,0x7ffdf681f424,34836468,0,0x0,8
tick,0x7ffdf681f424,34838465,0,0x0,8
tick,0x7ffdf681f424,34841156,0,0x0,8
tick,0x7ffdf681f424,34849314,0,0x0,8
tick,0x7ffdf681f424,34850479,0,0x0,8
tick,0x7ffdf681f424,34852766,0,0x0,8
tick,0x7ffdf681f424,34854413,0,0x0,8
tick,0x7ffdf681f424,34856418,0,0x0,8
tick,0x7ffdf681f424,34858561,0,0x0,8
tick,0x7ffdf681f424,34864079,0,0x0,8
tick,0x7ffdf681f424,34873894,0,0x0,8
tick,0x7ffdf681f424,34875371,0,0x0,8
tick,0x7ffdf681f424,34877363,0,0x0,8
tick,0x7ffdf681f424,34879546,0,0x0,8
tick,0x7ffdf681f424,34881403,0,0x0,8
tick,0x7ffdf681f424,34883353,0,0x0,8
tick,0x7ffdf681f424,34885331,0,0x0,8
tick,0x7ffdf681f424,34887326,0,0x0,8
tick,0x7ffdf681f424,34889320,0,0x0,8
tick,0x7ffdf681f424,34891309,0,0x0,8
tick,0x7ffdf681f424,34893305,0,0x0,8
tick,0x7ffdf681f424,34895308,0,0x0,8
tick,0x7ffdf681f424,34897298,0,0x0,8
tick,0x7ffdf681f424,34899288,0,0x0,8
tick,0x7ffdf681f424,34901284,0,0x0,8
tick,0x7ffdf681f424,34903277,0,0x0,8
tick,0x7ffdf681f424,34905274,0,0x0,8
tick,0x7ffdf681f424,34907268,0,0x0,8
tick,0x7ffdf681f424,34909260,0,0x0,8
tick,0x7ffdf681f424,34911253,0,0x0,8
tick,0x7ffdf681f424,34913250,0,0x0,8
tick,0x7ffdf681f424,34915253,0,0x0,8
tick,0x7ffdf681f424,34918052,0,0x0,8
tick,0x7ffdf681f424,34931686,0,0x0,8
tick,0x7ffdf681f424,34933203,0,0x0,8
tick,0x7ffdf681f424,34935206,0,0x0,8
tick,0x7ffdf681f424,34937209,0,0x0,8
tick,0x7ffdf681f424,34939235,0,0x0,8
tick,0x7ffdf681f424,34941198,0,0x0,8
tick,0x7ffdf681f424,34943171,0,0x0,8
tick,0x7ffdf681f424,34945168,0,0x0,8
tick,0x7ffdf681f424,34947165,0,0x0,8
tick,0x7ffdf681f424,34949153,0,0x0,8
tick,0x7ffdf681f424,34951942,0,0x0,8
tick,0x7ffdf681f424,34964113,0,0x0,8
tick,0x7ffdf681f424,34965176,0,0x0,8
tick,0x7ffdf681f424,34967117,0,0x0,8
tick,0x7ffdf681f424,34969302,0,0x0,8
tick,0x7ffdf681f424,34971106,0,0x0,8
tick,0x7ffdf681f424,34973163,0,0x0,8
tick,0x7ffdf681f424,34975092,0,0x0,8
tick,0x7ffdf681f424,34977084,0,0x0,8
tick,0x7ffdf681f424,34979085,0,0x0,8
tick,0x7ffdf681f424,34981069,0,0x0,8
tick,0x7ffdf681f424,34983066,0,0x0,8
tick,0x7ffdf681f424,34985065,0,0x0,8
tick,0x7ffdf681f424,34987054,0,0x0,8
tick,0x7ffdf681f424,34989049,0,0x0,8
tick,0x7ffdf681f424,34991043,0,0x0,8
tick,0x7ffdf681f424,34993036,0,0x0,8
tick,0x7ffdf681f424,34995039,0,0x0,8
tick,0x7ffdf681f424,34997028,0,0x0,8
tick,0x7ffdf681f424,34999022,0,0x0,8
tick,0x7ffdf681f424,35001013,0,0x0,8
tick,0x7ffdf681f424,35003015,0,0x0,8
tick,0x7ffdf681f424,35006014,0,0x0,8
tick,0x7ffdf681f424,35007665,0,0x0,8
tick,0x7ffdf681f424,35011091,0,0x0,8
tick,0x7ffdf681f424,35012016,0,0x0,8
tick,0x7ffdf681f424,35020449,0,0x0,8
tick,0x7ffdf681f424,35021971,0,0x0,8
tick,0x7ffdf681f424,35023960,0,0x0,8
tick,0x7ffdf681f424,35026018,0,0x0,8
tick,0x7ffdf681f424,35027947,0,0x0,8
tick,0x7ffdf681f424,35029990,0,0x0,8
tick,0x7ffdf681f424,35031936,0,0x0,8
tick,0x7ffdf681f424,35033930,0,0x0,8
tick,0x7ffdf681f424,35035933,0,0x0,8
tick,0x7ffdf681f424,35037920,0,0x0,8
tick,0x7ffdf681f424,35039916,0,0x0,8
tick,0x7ffdf681f424,35041913,0,0x0,8
tick,0x7ffdf681f424,35043907,0,0x0,8
tick,0x7ffdf681f424,35045906,0,0x0,8
tick,0x7ffdf681f424,35047893,0,0x0,8
tick,0x7ffdf681f424,35049887,0,0x0,8
tick,0x7ffdf681f424,35051880,0,0x0,8
tick,0x7ffdf681f424,35053880,0,0x0,8
tick,0x7ffdf681f424,35067609,0,0x0,8
tick,0x7ffdf681f424,35068838,0,0x0,8
tick,0x7ffdf681f424,35070839,0,0x0,8
tick,0x7ffdf681f424,35072882,0,0x0,8
tick,0x7ffdf681f424,35074863,0,0x0,8
tick,0x7ffdf681f424,35076841,0,0x0,8
tick,0x7ffdf681f424,35078816,0,0x0,8
tick,0x7ffdf681f424,35080814,0,0x0,8
tick,0x7ffdf681f424,35082800,0,0x0,8
tick,0x7ffdf681f424,35084792,0,0x0,8
tick,0x7ffdf681f424,35086793,0,0x0,8
tick,0x7ffdf681f424,35088795,0,0x0,8
tick,0x7ffdf681f424,35090776,0,0x0,8
tick,0x7ffdf681f424,35092768,0,0x0,8
tick,0x7ffdf681f424,35094775,0,0x0,8
tick,0x7ffdf681f424,35109632,0,0x0,8
tick,0x7ffdf681f424,35110730,0,0x0,8
tick,0x7ffdf681f424,35112724,0,0x0,8
tick,0x7ffdf681f424,35114708,0,0x0,8
tick,0x7ffdf681f424,35116729,0,0x0,8
tick,0x7ffdf681f424,35118843,0,0x0,8
tick,0x7ffdf681f424,35120874,0,0x0,8
tick,0x7ffdf681f424,35122741,0,0x0,8
tick,0x7ffdf681f424,35124688,0,0x0,8
tick,0x7ffdf681f424,35126680,0,0x0,8
tick,0x7ffdf681f424,35128687,0,0x0,8
tick,0x7ffdf681f424,35130674,0,0x0,8
tick,0x7ffdf681f424,35132666,0,0x0,8
tick,0x7ffdf681f424,35134658,0,0x0,8
tick,0x7ffdf681f424,35136704,0,0x0,8
tick,0x7ffdf681f424,35138654,0,0x0,8
tick,0x7ffdf681f424,35140646,0,0x0,8
tick,0x7ffdf681f424,35142656,0,0x0,8
tick,0x7ffdf681f424,35157267,0,0x0,8
tick,0x7ffdf681f424,35158616,0,0x0,8
tick,0x7ffdf681f424,35160601,0,0x0,8
tick,0x7ffdf681f424,35162664,0,0x0,8
tick,0x7ffdf681f424,35164669,0,0x0,8
tick,0x7ffdf681f424,35166756,0,0x0,8
tick,0x7ffdf681f424,35168575,0,0x0,8
tick,0x7ffdf681f424,35170576,0,0x0,8
tick,0x7ffdf681f424,35172567,0,0x0,8
tick,0x7ffdf681f424,35174558,0,0x0,8
tick,0x7ffdf681f424,35179200,0,0x0,8
tick,0x7ffdf681f424,35185174,0,0x0,8
tick,0x7ffdf681f424,35194833,0,0x0,8
tick,0x7ffdf681f424,35196503,0,0x0,8
tick,0x7ffdf681f424,35198492,0,0x0,8
tick,0x7ffdf681f424,35200769,0,0x0,8
tick,0x7ffdf681f424,35203145,0,0x0,8
tick,0x7ffdf681f424,35204653,0,0x0,8
tick,0x7ffdf681f424,35206633,0,0x0,8
tick,0x7ffdf681f424,35208468,0,0x0,8
tick,0x7ffdf681f424,35210462,0,0x0,8
tick,0x7ffdf681f424,35212457,0,0x0,8
tick,0x7ffdf681f424,35214452,0,0x0,8
tick,0x7ffdf681f424,35216448,0,0x0,8
tick,0x7ffdf681f424,35218434,0,0x0,8
tick,0x7ffdf681f424,35220444,0,0x0,8
tick,0x7ffdf681f424,35222428,0,0x0,8
tick,0x7ffdf681f424,35230591,0,0x0,8
tick,0x7ffdf681f424,35231470,0,0x0,8
tick,0x7ffdf681f424,35233637,0,0x0,8
tick,0x7ffdf681f424,35235399,0,0x0,8
tick,0x7ffdf681f424,35237457,0,0x0,8
tick,0x7ffdf681f424,35239390,0,0x0,8
tick,0x7ffdf681f424,35241386,0,0x0,8
tick,0x7ffdf681f424,35243422,0,0x0,8
tick,0x7ffdf681f424,35245378,0,0x0,8
tick,0x7ffdf681f424,35247440,0,0x0,8
tick,0x7ffdf681f424,35249360,0,0x0,8
tick,0x7ffdf681f424,35251348,0,0x0,8
tick,0x7ffdf681f424,35253344,0,0x0,8
tick,0x7ffdf681f424,35255338,0,0x0,8
tick,0x7ffdf681f424,35257330,0,0x0,8
tick,0x7ffdf681f424,35259333,0,0x0,8
tick,0x7ffdf681f424,35261321,0,0x0,8
tick,0x7ffdf681f424,35263620,0,0x0,8
tick,0x7ffdf681f424,35267222,0,0x0,8
tick,0x7ffdf681f424,35276918,0,0x0,8
tick,0x7ffdf681f424,35278283,0,0x0,8
tick,0x7ffdf681f424,35280277,0,0x0,8
tick,0x7ffdf681f424,35282461,0,0x0,8
tick,0x7ffdf681f424,35284310,0,0x0,8
tick,0x7ffdf681f424,35286283,0,0x0,8
tick,0x7ffdf681f424,35288255,0,0x0,8
tick,0x7ffdf681f424,35290241,0,0x0,8
tick,0x7ffdf681f424,35292251,0,0x0,8
tick,0x7ffdf681f424,35294262,0,0x0,8
tick,0x7ffdf681f424,35296239,0,0x0,8
tick,0x7ffdf681f424,35298237,0,0x0,8
tick,0x7ffdf681f424,35300221,0,0x0,8
tick,0x7ffdf681f424,35302210,0,0x0,8
tick,0x7ffdf681f424,35304211,0,0x0,8
tick,0x7ffdf681f424,35306201,0,0x0,8
tick,0x7ffdf681f424,35308197,0,0x0,8
tick,0x7ffdf681f424,35310188,0,0x0,8
tick,0x7ffdf681f424,35312188,0,0x0,8
tick,0x7ffdf681f424,35314180,0,0x0,8
tick,0x7ffdf681f424,35316172,0,0x0,8
tick,0x7ffdf681f424,35318166,0,0x0,8
tick,0x7ffdf681f424,35319185,0,0x0,8
tick,0x7ffdf681f424,35326332,0,0x0,8
tick,0x7ffdf681f424,35329868,0,0x0,8
tick,0x7ffdf681f424,35333166,0,0x0,8
tick,0x7ffdf681f424,35335127,0,0x0,8
tick,0x7ffdf681f424,35337286,0,0x0,8
tick,0x7ffdf681f424,35339128,0,0x0,8
tick,0x7ffdf681f424,35341117,0,0x0,8
tick,0x7ffdf681f424,35343104,0,0x0,8
tick,0x7ffdf681f424,35345099,0,0x0,8
tick,0x7ffdf681f424,35347090,0,0x0,8
tick,0x7ffdf681f424,35349083,0,0x0,8
tick,0x7ffdf681f424,35351075,0,0x0,8
tick,0x7ffdf681f424,35353078,0,0x0,8
tick,0x7ffdf681f424,35355088,0,0x0,8
tick,0x7ffdf681f424,35357065,0,0x0,8
tick,0x7ffdf681f424,35359064,0,0x0,8
tick,0x7ffdf681f424,35361065,0,0x0,8
tick,0x7ffdf681f424,35363056,0,0x0,8
tick,0x7ffdf681f424,35365044,0,0x0,8
tick,0x7ffdf681f424,35367039,0,0x0,8
tick,0x7ffdf681f424,35381061,0,0x0,8
tick,0x7ffdf681f424,35383000,0,0x0,8
tick,0x7ffdf681f424,35385007,0,0x0,8
tick,0x7ffdf681f424,35387017,0,0x0,8
tick,0x7ffdf681f424,35389000,0,0x0,8
tick,0x7ffdf681f424,35390978,0,0x0,8
tick,0x7ffdf681f424,35392969,0,0x0,8
tick,0x7ffdf681f424,35394969,0,0x0,8
tick,0x7ffdf681f424,35396959,0,0x0,8
tick,0x7ffdf681f424,35398957,0,0x0,8
tick,0x7ffdf681f424,35400949,0,0x0,8
tick,0x7ffdf681f424,35402948,0,0x0,8
tick,0x7ffdf681f424,35404938,0,0x0,8
tick,0x7ffdf681f424,35420308,0,0x0,8
tick,0x7ffdf681f424,35421912,0,0x0,8
tick,0x7ffdf681f424,35423949,0,0x0,8
tick,0x7ffdf681f424,35426403,0,0x0,8
tick,0x7ffdf681f424,35427929,0,0x0,8
tick,0x7ffdf681f424,35429990,0,0x0,8
tick,0x7ffdf681f424,35431873,0,0x0,8
tick,0x7ffdf681f424,35433863,0,0x0,8
tick,0x7ffdf681f424,35435876,0,0x0,8
tick,0x7ffdf681f424,35437860,0,0x0,8
tick,0x7ffdf681f424,35439852,0,0x0,8
tick,0x7ffdf681f424,35441853,0,0x0,8
tick,0x7ffdf681f424,35443841,0,0x0,8
tick,0x7ffdf681f424,35445845,0,0x0,8
tick,0x7ffdf681f424,35447838,0,0x0,8
tick,0x7ffdf681f424,35449833,0,0x0,8
tick,0x7ffdf681f424,35451821,0,0x0,8
tick,0x7ffdf681f424,35453816,0,0x0,8
tick,0x7ffdf681f424,35455906,0,0x0,8
tick,0x7ffdf681f424,35457821,0,0x0,8
tick,0x7ffdf681f424,35459801,0,0x0,8
tick,0x7ffdf681f424,35461798,0,0x0,8
tick,0x7ffdf681f424,35463805,0,0x0,8
tick,0x7ffdf681f424,35465821,0,0x0,8
tick,0x7ffdf681f424,35467810,0,0x0,8
tick,0x7ffdf681f424,35469981,0,0x0,8
tick,0x7ffdf681f424,35471947,0,0x0,8
tick,0x7ffdf681f424,35473929,0,0x0,8
tick,0x7ffdf681f424,35475764,0,0x0,8
tick,0x7ffdf681f424,35478167,0,0x0,8
tick,0x7ffdf681f424,35480147,0,0x0,8
tick,0x7ffdf681f424,35481783,0,0x0,8
tick,0x7ffdf681f424,35483743,0,0x0,8
tick,0x7ffdf681f424,35485735,0,0x0,8
tick,0x7ffdf681f424,35487737,0,0x0,8
tick,0x7ffdf681f424,35489810,0,0x0,8
tick,0x7ffdf681f424,35491798,0,0x0,8
tick,0x7ffdf681f424,35493713,0,0x0,8
tick,0x7ffdf681f424,35495712,0,0x0,8
tick,0x7ffdf681f424,35497702,0,0x0,8
tick,0x7ffdf681f424,35499696,0,0x0,8
tick,0x7ffdf681f424,35501687,0,0x0,8
tick,0x7ffdf681f424,35503701,0,0x0,8
tick,0x7ffdf681f424,35505682,0,0x0,8
tick,0x7ffdf681f424,35507674,0,0x0,8
tick,0x7ffdf681f424,35509663,0,0x0,8
tick,0x7ffdf681f424,35511667,0,0x0,8
tick,0x7ffdf681f424,35513662,0,0x0,8
tick,0x7ffdf681f424,35515657,0,0x0,8
tick,0x7ffdf681f424,35517643,0,0x0,8
tick,0x7ffdf681f424,35519644,0,0x0,8
tick,0x7ffdf681f424,35521659,0,0x0,8
tick,0x7ffdf681f424,35523677,0,0x0,8
tick,0x7ffdf681f424,35525626,0,0x0,8
tick,0x7ffdf681f424,35527644,0,0x0,8
tick,0x7ffdf681f424,35529613,0,0x0,8
tick,0x7ffdf681f424,35531648,0,0x0,8
tick,0x7ffdf681f424,35533626,0,0x0,8
tick,0x7ffdf681f424,35535670,0,0x0,8
tick,0x7ffdf681f424,35537595,0,0x0,8
tick,0x7ffdf681f424,35539625,0,0x0,8
tick,0x7ffdf681f424,35541789,0,0x0,8
tick,0x7ffdf681f424,35543606,0,0x0,8
tick,0x7ffdf681f424,35545733,0,0x0,8
tick,0x7ffdf681f424,35547562,0,0x0,8
tick,0x7ffdf681f424,35549597,0,0x0,8
tick,0x7ffdf681f424,35551555,0,0x0,8
tick,0x7ffdf681f424,35552673,0,0x0,8
tick,0x7ffdf681f424,35554541,0,0x0,8
tick,0x7ffdf681f424,35556532,0,0x0,8
tick,0x7ffdf681f424,35558524,0,0x0,8
tick,0x7ffdf681f424,35560518,0,0x0,8
tick,0x7ffdf681f424,35562514,0,0x0,8
tick,0x7ffdf681f424,35564510,0,0x0,8
tick,0x7ffdf681f424,35566501,0,0x0,8
tick,0x7ffdf681f424,35568495,0,0x0,8
tick,0x7ffdf681f424,35570494,0,0x0,8
tick,0x7ffdf681f424,35572482,0,0x0,8
tick,0x7ffdf681f424,35574475,0,0x0,8
tick,0x7ffdf681f424,35577134,0,0x0,8
tick,0x7ffdf681f424,35590657,0,0x0,8
tick,0x7ffdf681f424,35592536,0,0x0,8
tick,0x7ffdf681f424,35594440,0,0x0,8
tick,0x7ffdf681f424,35596419,0,0x0,8
tick,0x7ffdf681f424,35598413,0,0x0,8
tick,0x7ffdf681f424,35600407,0,0x0,8
tick,0x7ffdf681f424,35602412,0,0x0,8
tick,0x7ffdf681f424,35604472,0,0x0,8
tick,0x7ffdf681f424,35606401,0,0x0,8
tick,0x7ffdf681f424,35608391,0,0x0,8
tick,0x7ffdf681f424,35610451,0,0x0,8
tick,0x7ffdf681f424,35612395,0,0x0,8
tick,0x7ffdf681f424,35614385,0,0x0,8
tick,0x7ffdf681f424,35616394,0,0x0,8
tick,0x7ffdf681f424,35618392,0,0x0,8
tick,0x7ffdf681f424,35620431,0,0x0,8
tick,0x7ffdf681f424,35622371,0,0x0,8
tick,0x7ffdf681f424,35624362,0,0x0,8
tick,0x7ffdf681f424,35626353,0,0x0,8
tick,0x7ffdf681f424,35628346,0,0x0,8
tick,0x7ffdf681f424,35630330,0,0x0,8
tick,0x7ffdf681f424,35632334,0,0x0,8
tick,0x7ffdf681f424,35634327,0,0x0,8
tick,0x7ffdf681f424,35636324,0,0x0,8
tick,0x7ffdf681f424,35638327,0,0x0,8
tick,0x7ffdf681f424,35640310,0,0x0,8
tick,0x7ffdf681f424,35642296,0,0x0,8
tick,0x7ffdf681f424,35644294,0,0x0,8
tick,0x7ffdf681f424,35646314,0,0x0,8
tick,0x7ffdf681f424,35648300,0,0x0,8
tick,0x7ffdf681f424,35650287,0,0x0,8
tick,0x7ffdf681f424,35652302,0,0x0,8
tick,0x7ffdf681f424,35654423,0,0x0,8
tick,0x7ffdf681f424,35656310,0,0x0,8
tick,0x7ffdf681f424,35658277,0,0x0,8
tick,0x7ffdf681f424,35660283,0,0x0,8
tick,0x7ffdf681f424,35662261,0,0x0,8
tick,0x7ffdf681f424,35664252,0,0x0,8
tick,0x7ffdf681f424,35666243,0,0x0,8
tick,0x7ffdf681f424,35668239,0,0x0,8
tick,0x7ffdf681f424,35670236,0,0x0,8
tick,0x7ffdf681f424,35672236,0,0x0,8
tick,0x7ffdf681f424,35674230,0,0x0,8
tick,0x7ffdf681f424,35676222,0,0x0,8
tick,0x7ffdf681f424,35678240,0,0x0,8
tick,0x7ffdf681f424,35680211,0,0x0,8
tick,0x7ffdf681f424,35682219,0,0x0,8
tick,0x7ffdf681f424,35696924,0,0x0,8
tick,0x7ffdf681f424,35698359,0,0x0,8
tick,0x7ffdf681f424,35700158,0,0x0,8
tick,0x7ffdf681f424,35702194,0,0x0,8
tick,0x7ffdf681f424,35704182,0,0x0,8
tick,0x7ffdf681f424,35706139,0,0x0,8
tick,0x7ffdf681f424,35708135,0,0x0,8
tick,0x7ffdf681f424,35710130,0,0x0,8
tick,0x7ffdf681f424,35712124,0,0x0,8
tick,0x7ffdf681f424,35714114,0,0x0,8
tick,0x7ffdf681f424,35716176,0,0x0,8
tick,0x7ffdf681f424,35718127,0,0x0,8
tick,0x7ffdf681f424,35720115,0,0x0,8
tick,0x7ffdf681f424,35722137,0,0x0,8
tick,0x7ffdf681f424,35724162,0,0x0,8
tick,0x7ffdf681f424,35726123,0,0x0,8
tick,0x7ffdf681f424,35728110,0,0x0,8
tick,0x7ffdf681f424,35730094,0,0x0,8
tick,0x7ffdf681f424,35732088,0,0x0,8
tick,0x7ffdf681f424,35734070,0,0x0,8
tick,0x7ffdf681f424,35736072,0,0x0,8
tick,0x7ffdf681f424,35738062,0,0x0,8
tick,0x7ffdf681f424,35740054,0,0x0,8
tick,0x7ffdf681f424,35742047,0,0x0,8
tick,0x7ffdf681f424,35744041,0,0x0,8
tick,0x7ffdf681f424,35746038,0,0x0,8
tick,0x7ffdf681f424,35748060,0,0x0,8
tick,0x7ffdf681f424,35750046,0,0x0,8
tick,0x7ffdf681f424,35752039,0,0x0,8
tick,0x7ffdf681f424,35754017,0,0x0,8
tick,0x7ffdf681f424,35756006,0,0x0,8
tick,0x7ffdf681f424,35758003,0,0x0,8
tick,0x7ffdf681f424,35759997,0,0x0,8
tick,0x7ffdf681f424,35761994,0,0x0,8
tick,0x7ffdf681f424,35763990,0,0x0,8
tick,0x7ffdf681f424,35773179,0,0x0,8
tick,0x7ffdf681f424,35777874,0,0x0,8
tick,0x7ffdf681f424,35778945,0,0x0,8
tick,0x7ffdf681f424,35780940,0,0x0,8
tick,0x7ffdf681f424,35782938,0,0x0,8
tick,0x7ffdf681f424,35784937,0,0x0,8
tick,0x7ffdf681f424,35786920,0,0x0,8
tick,0x7ffdf681f424,35788909,0,0x0,8
tick,0x7ffdf681f424,35790907,0,0x0,8
tick,0x7ffdf681f424,35792904,0,0x0,8
tick,0x7ffdf681f424,35794902,0,0x0,8
tick,0x7ffdf681f424,35796915,0,0x0,8
tick,0x7ffdf681f424,35798884,0,0x0,8
tick,0x7ffdf681f424,35809963,0,0x0,8
tick,0x7ffdf681f424,35818512,0,0x0,8
tick,0x7ffdf681f424,35819840,0,0x0,8
tick,0x7ffdf681f424,35821891,0,0x0,8
tick,0x7ffdf681f424,35823831,0,0x0,8
tick,0x7ffdf681f424,35825822,0,0x0,8
tick,0x7ffdf681f424,35827826,0,0x0,8
tick,0x7ffdf681f424,35829834,0,0x0,8
tick,0x7ffdf681f424,35831844,0,0x0,8
tick,0x7ffdf681f424,35833798,0,0x0,8
tick,0x7ffdf681f424,35835826,0,0x0,8
tick,0x7ffdf681f424,35837943,0,0x0,8
tick,0x7ffdf681f424,35839793,0,0x0,8
tick,0x7ffdf681f424,35841778,0,0x0,8
tick,0x7ffdf681f424,35843772,0,0x0,8
tick,0x7ffdf681f424,35845765,0,0x0,8
tick,0x7ffdf681f424,35847813,0,0x0,8
tick,0x7ffdf681f424,35849758,0,0x0,8
tick,0x7ffdf681f424,35851745,0,0x0,8
tick,0x7ffdf681f424,35853747,0,0x0,8
tick,0x7ffdf681f424,35855731,0,0x0,8
tick,0x7ffdf681f424,35857728,0,0x0,8
tick,0x7ffdf681f424,35859724,0,0x0,8
tick,0x7ffdf681f424,35861727,0,0x0,8
tick,0x7ffdf681f424,35863716,0,0x0,8
tick,0x7ffdf681f424,35865713,0,0x0,8
tick,0x7ffdf681f424,35867700,0,0x0,8
tick,0x7ffdf681f424,35869692,0,0x0,8
tick,0x7ffdf681f424,35871682,0,0x0,8
tick,0x7ffdf681f424,35873680,0,0x0,8
tick,0x7ffdf681f424,35875674,0,0x0,8
tick,0x7ffdf681f424,35877687,0,0x0,8
tick,0x7ffdf681f424,35879669,0,0x0,8
tick,0x7ffdf681f424,35881675,0,0x0,8
tick,0x7ffdf681f424,35883663,0,0x0,8
tick,0x7ffdf681f424,35885656,0,0x0,8
tick,0x7ffdf681f424,35887659,0,0x0,8
tick,0x7ffdf681f424,35889652,0,0x0,8
tick,0x7ffdf681f424,35896034,0,0x0,8
tick,0x7ffdf681f424,35897796,0,0x0,8
tick,0x7ffdf681f424,35905445,0,0x0,8
tick,0x7ffdf681f424,35906858,0,0x0,8
tick,0x7ffdf681f424,35908602,0,0x0,8
tick,0x7ffdf681f424,35910608,0,0x0,8
tick,0x7ffdf681f424,35912595,0,0x0,8
tick,0x7ffdf681f424,35914616,0,0x0,8
tick,0x7ffdf681f424,35916574,0,0x0,8
tick,0x7ffdf681f424,35918608,0,0x0,8
tick,0x7ffdf681f424,35920571,0,0x0,8
tick,0x7ffdf681f424,35922558,0,0x0,8
tick,0x7ffdf681f424,35924551,0,0x0,8
tick,0x7ffdf681f424,35926554,0,0x0,8
tick,0x7ffdf681f424,35928552,0,0x0,8
tick,0x7ffdf681f424,35930533,0,0x0,8
tick,0x7ffdf681f424,35932537,0,0x0,8
tick,0x7ffdf681f424,35934529,0,0x0,8
tick,0x7ffdf681f424,35936531,0,0x0,8
tick,0x7ffdf681f424,35938514,0,0x0,8
tick,0x7ffdf681f424,35940507,0,0x0,8
tick,0x7ffdf681f424,35942501,0,0x0,8
tick,0x7ffdf681f424,35944503,0,0x0,8
tick,0x7ffdf681f424,35946499,0,0x0,8
tick,0x7ffdf681f424,35948485,0,0x0,8
tick,0x7ffdf681f424,35950504,0,0x0,8
tick,0x7ffdf681f424,35952471,0,0x0,8
tick,0x7ffdf681f424,35954471,0,0x0,8
tick,0x7ffdf681f424,35956463,0,0x0,8
tick,0x7ffdf681f424,35958457,0,0x0,8
tick,0x7ffdf681f424,35960459,0,0x0,8
tick,0x7ffdf681f424,35975138,0,0x0,8
tick,0x7ffdf681f424,35976452,0,0x0,8
tick,0x7ffdf681f424,35978467,0,0x0,8
tick,0x7ffdf681f424,35980635,0,0x0,8
tick,0x7ffdf681f424,35982511,0,0x0,8
tick,0x7ffdf681f424,35986634,0,0x0,8
tick,0x7ffdf681f424,35988473,0,0x0,8
tick,0x7ffdf681f424,35990417,0,0x0,8
tick,0x7ffdf681f424,35994963,0,0x0,8
tick,0x7ffdf681f424,36001649,0,0x0,8
tick,0x7ffdf681f424,36003348,0,0x0,8
tick,0x7ffdf681f424,36005336,0,0x0,8
tick,0x7ffdf681f424,36007380,0,0x0,8
tick,0x7ffdf681f424,36009358,0,0x0,8
tick,0x7ffdf681f424,36011332,0,0x0,8
tick,0x7ffdf681f424,36013323,0,0x0,8
tick,0x7ffdf681f424,36015312,0,0x0,8
tick,0x7ffdf681f424,36017301,0,0x0,8
tick,0x7ffdf681f424,36019311,0,0x0,8
tick,0x7ffdf681f424,36021291,0,0x0,8
tick,0x7ffdf681f424,36023290,0,0x0,8
tick,0x7ffdf681f424,36025324,0,0x0,8
tick,0x7ffdf681f424,36027281,0,0x0,8
tick,0x7ffdf681f424,36029273,0,0x0,8
tick,0x7ffdf681f424,36031264,0,0x0,8
tick,0x7ffdf681f424,36033257,0,0x0,8
tick,0x7ffdf681f424,36035250,0,0x0,8
tick,0x7ffdf681f424,36037246,0,0x0,8
tick,0x7ffdf681f424,36050728,0,0x0,8
tick,0x7ffdf681f424,36050768,0,0x0,8
tick,0x7ffdf681f424,36052209,0,0x0,8
tick,0x7ffdf681f424,36054316,0,0x0,8
tick,0x7ffdf681f424,36056259,0,0x0,8
tick,0x7ffdf681f424,36058219,0,0x0,8
tick,0x7ffdf681f424,36060194,0,0x0,8
tick,0x7ffdf681f424,36062183,0,0x0,8
tick,0x7ffdf681f424,36064178,0,0x0,8
tick,0x7ffdf681f424,36066170,0,0x0,8
tick,0x7ffdf681f424,36068168,0,0x0,8
tick,0x7ffdf681f424,36070167,0,0x0,8
tick,0x7ffdf681f424,36072164,0,0x0,8
tick,0x7ffdf681f424,36074146,0,0x0,8
tick,0x7ffdf681f424,36076141,0,0x0,8
tick,0x7ffdf681f424,36078138,0,0x0,8
tick,0x7ffdf681f424,36080129,0,0x0,8
tick,0x7ffdf681f424,36082122,0,0x0,8
tick,0x7ffdf681f424,36084117,0,0x0,8
tick,0x7ffdf681f424,36086114,0,0x0,8
tick,0x7ffdf681f424,36088107,0,0x0,8
tick,0x7ffdf681f424,36090102,0,0x0,8
tick,0x7ffdf681f424,36092099,0,0x0,8
tick,0x7ffdf681f424,36094759,0,0x0,8
tick,0x7ffdf681f424,36108682,0,0x0,8
tick,0x7ffdf681f424,36110057,0,0x0,8
tick,0x7ffdf681f424,36112073,0,0x0,8
tick,0x7ffdf681f424,36114053,0,0x0,8
tick,0x7ffdf681f424,36116037,0,0x0,8
tick,0x7ffdf681f424,36118034,0,0x0,8
tick,0x7ffdf681f424,36120032,0,0x0,8
tick,0x7ffdf681f424,36122022,0,0x0,8
tick,0x7ffdf681f424,36124013,0,0x0,8
tick,0x7ffdf681f424,36126005,0,0x0,8
tick,0x7ffdf681f424,36141491,0,0x0,8
tick,0x7ffdf681f424,36143322,0,0x0,8
tick,0x7ffdf681f424,36143967,0,0x0,8
tick,0x7ffdf681f424,36145961,0,0x0,8
tick,0x7ffdf681f424,36147951,0,0x0,8
tick,0x7ffdf681f424,36150026,0,0x0,8
tick,0x7ffdf681f424,36151942,0,0x0,8
tick,0x7ffdf681f424,36153954,0,0x0,8
tick,0x7ffdf681f424,36155958,0,0x0,8
tick,0x7ffdf681f424,36157927,0,0x0,8
tick,0x7ffdf681f424,36159917,0,0x0,8
tick,0x7ffdf681f424,36161913,0,0x0,8
tick,0x7ffdf681f424,36163911,0,0x0,8
tick,0x7ffdf681f424,36165904,0,0x0,8
tick,0x7ffdf681f424,36167903,0,0x0,8
tick,0x7ffdf681f424,36169892,0,0x0,8
tick,0x7ffdf681f424,36171884,0,0x0,8
tick,0x7ffdf681f424,36173881,0,0x0,8
tick,0x7ffdf681f424,36175875,0,0x0,8
tick,0x7ffdf681f424,36187913,0,0x0,8
tick,0x7ffdf681f424,36189850,0,0x0,8
tick,0x7ffdf681f424,36191863,0,0x0,8
tick,0x7ffdf681f424,36193887,0,0x0,8
tick,0x7ffdf681f424,36195845,0,0x0,8
tick,0x7ffdf681f424,36197821,0,0x0,8
tick,0x7ffdf681f424,36199811,0,0x0,8
tick,0x7ffdf681f424,36201806,0,0x0,8
tick,0x7ffdf681f424,36203808,0,0x0,8
tick,0x7ffdf681f424,36205793,0,0x0,8
tick,0x7ffdf681f424,36207786,0,0x0,8
tick,0x7ffdf681f424,36209785,0,0x0,8
tick,0x7ffdf681f424,36211784,0,0x0,8
tick,0x7ffdf681f424,36213777,0,0x0,8
tick,0x7ffdf681f424,36215771,0,0x0,8
tick,0x7ffdf681f424,36217775,0,0x0,8
tick,0x7ffdf681f424,36219765,0,0x0,8
tick,0x7ffdf681f424,36221754,0,0x0,8
tick,0x7ffdf681f424,36223748,0,0x0,8
tick,0x7ffdf681f424,36225746,0,0x0,8
tick,0x7ffdf681f424,36229220,0,0x0,8
tick,0x7ffdf681f424,36239522,0,0x0,8
tick,0x7ffdf681f424,36240710,0,0x0,8
tick,0x7ffdf681f424,36242799,0,0x0,8
tick,0x7ffdf681f424,36244909,0,0x0,8
tick,0x7ffdf681f424,36264729,0,0x0,8
tick,0x7ffdf681f424,36266645,0,0x0,8
tick,0x7ffdf681f424,36268633,0,0x0,8
tick,0x7ffdf681f424,36270674,0,0x0,8
tick,0x7ffdf681f424,36272657,0,0x0,8
tick,0x7ffdf681f424,36274750,0,0x0,8
tick,0x7ffdf681f424,36276665,0,0x0,8
tick,0x7ffdf681f424,36278604,0,0x0,8
tick,0x7ffdf681f424,36280598,0,0x0,8
tick,0x7ffdf681f424,36282589,0,0x0,8
tick,0x7ffdf681f424,36284584,0,0x0,8
tick,0x7ffdf681f424,36286597,0,0x0,8
tick,0x7ffdf681f424,36288578,0,0x0,8
tick,0x7ffdf681f424,36290570,0,0x0,8
tick,0x7ffdf681f424,36292563,0,0x0,8
tick,0x7ffdf681f424,36294602,0,0x0,8
tick,0x7ffdf681f424,36296561,0,0x0,8
tick,0x7ffdf681f424,36298552,0,0x0,8
tick,0x7ffdf681f424,36300553,0,0x0,8
tick,0x7ffdf681f424,36308956,0,0x0,8
tick,0x7ffdf681f424,36310797,0,0x0,8
tick,0x7ffdf681f424,36312734,0,0x0,8
tick,0x7ffdf681f424,36314511,0,0x0,8
tick,0x7ffdf681f424,36316507,0,0x0,8
tick,0x7ffdf681f424,36318497,0,0x0,8
tick,0x7ffdf681f424,36320500,0,0x0,8
tick,0x7ffdf681f424,36322498,0,0x0,8
tick,0x7ffdf681f424,36324493,0,0x0,8
tick,0x7ffdf681f424,36326501,0,0x0,8
tick,0x7ffdf681f424,36328479,0,0x0,8
tick,0x7ffdf681f424,36330467,0,0x0,8
tick,0x7ffdf681f424,36332457,0,0x0,8
tick,0x7ffdf681f424,36334459,0,0x0,8
tick,0x7ffdf681f424,36336450,0,0x0,8
tick,0x7ffdf681f424,36338438,0,0x0,8
tick,0x7ffdf681f424,36340434,0,0x0,8
tick,0x7ffdf681f424,36342444,0,0x0,8
tick,0x7ffdf681f424,36344426,0,0x0,8
tick,0x7ffdf681f424,36346424,0,0x0,8
tick,0x7ffdf681f424,36348417,0,0x0,8
tick,0x7ffdf681f424,36350408,0,0x0,8
tick,0x7ffdf681f424,36352402,0,0x0,8
tick,0x7ffdf681f424,36354401,0,0x0,8
tick,0x7ffdf681f424,36356392,0,0x0,8
tick,0x7ffdf681f424,36358387,0,0x0,8
tick,0x7ffdf681f424,36360382,0,0x0,8
tick,0x7ffdf681f424,36362377,0,0x0,8
tick,0x7ffdf681f424,36364370,0,0x0,8
tick,0x7ffdf681f424,36366366,0,0x0,8
tick,0x7ffdf681f424,36368362,0,0x0,8
tick,0x7ffdf681f424,36370636,0,0x0,8
tick,0x7ffdf681f424,36383657,0,0x0,8
tick,0x7ffdf681f424,36383703,0,0x0,8
tick,0x7ffdf681f424,36385323,0,0x0,8
tick,0x7ffdf681f424,36387348,0,0x0,8
tick,0x7ffdf681f424,36389361,0,0x0,8
tick,0x7ffdf681f424,36391302,0,0x0,8
tick,0x7ffdf681f424,36393324,0,0x0,8
tick,0x7ffdf681f424,36395299,0,0x0,8
tick,0x7ffdf681f424,36408831,0,0x0,8
tick,0x7ffdf681f424,36410255,0,0x0,8
tick,0x7ffdf681f424,36412295,0,0x0,8
tick,0x7ffdf681f424,36414256,0,0x0,8
tick,0x7ffdf681f424,36416271,0,0x0,8
tick,0x7ffdf681f424,36418251,0,0x0,8
tick,0x7ffdf681f424,36420255,0,0x0,8
tick,0x7ffdf681f424,36422239,0,0x0,8
tick,0x7ffdf681f424,36424215,0,0x0,8
tick,0x7ffdf681f424,36426208,0,0x0,8
tick,0x7ffdf681f424,36428286,0,0x0,8
tick,0x7ffdf681f424,36430212,0,0x0,8
tick,0x7ffdf681f424,36432202,0,0x0,8
tick,0x7ffdf681f424,36434200,0,0x0,8
tick,0x7ffdf681f424,36436225,0,0x0,8
tick,0x7ffdf681f424,36438248,0,0x0,8
tick,0x7ffdf681f424,36440182,0,0x0,8
tick,0x7ffdf681f424,36442182,0,0x0,8
tick,0x7ffdf681f424,36444159,0,0x0,8
tick,0x7ffdf681f424,36446167,0,0x0,8
tick,0x7ffdf681f424,36448181,0,0x0,8
tick,0x7ffdf681f424,36450149,0,0x0,8
tick,0x7ffdf681f424,36452173,0,0x0,8
tick,0x7ffdf681f424,36454142,0,0x0,8
tick,0x7ffdf681f424,36456190,0,0x0,8
tick,0x7ffdf681f424,36458127,0,0x0,8
tick,0x7ffdf681f424,36460158,0,0x0,8
tick,0x7ffdf681f424,36476370,0,0x0,8
tick,0x7ffdf681f424,36478377,0,0x0,8
tick,0x7ffdf681f424,36480093,0,0x0,8
tick,0x7ffdf681f424,36482103,0,0x0,8
tick,0x7ffdf681f424,36484087,0,0x0,8
tick,0x7ffdf681f424,36486078,0,0x0,8
tick,0x7ffdf681f424,36488152,0,0x0,8
tick,0x7ffdf681f424,36490131,0,0x0,8
tick,0x7ffdf681f424,36492039,0,0x0,8
tick,0x7ffdf681f424,36494029,0,0x0,8
tick,0x7ffdf681f424,36496032,0,0x0,8
tick,0x7ffdf681f424,36498028,0,0x0,8
tick,0x7ffdf681f424,36500017,0,0x0,8
tick,0x7ffdf681f424,36502010,0,0x0,8
tick,0x7ffdf681f424,36504019,0,0x0,8
tick,0x7ffdf681f424,36505998,0,0x0,8
tick,0x7ffdf681f424,36507996,0,0x0,8
tick,0x7ffdf681f424,36509986,0,0x0,8
tick,0x7ffdf681f424,36512127,0,0x0,8
tick,0x7ffdf681f424,36524977,0,0x0,8
tick,0x7ffdf681f424,36526954,0,0x0,8
tick,0x7ffdf681f424,36528941,0,0x0,8
tick,0x7ffdf681f424,36530938,0,0x0,8
tick,0x7ffdf681f424,36532939,0,0x0,8
tick,0x7ffdf681f424,36534969,0,0x0,8
tick,0x7ffdf681f424,36536938,0,0x0,8
tick,0x7ffdf681f424,36538927,0,0x0,8
tick,0x7ffdf681f424,36540911,0,0x0,8
tick,0x7ffdf681f424,36542902,0,0x0,8
tick,0x7ffdf681f424,36544907,0,0x0,8
tick,0x7ffdf681f424,36546894,0,0x0,8
tick,0x7ffdf681f424,36548887,0,0x0,8
tick,0x7ffdf681f424,36550881,0,0x0,8
tick,0x7ffdf681f424,36565738,0,0x0,8
tick,0x7ffdf681f424,36566844,0,0x0,8
tick,0x7ffdf681f424,36568835,0,0x0,8
tick,0x7ffdf681f424,36571134,0,0x0,8
tick,0x7ffdf681f424,36572828,0,0x0,8
tick,0x7ffdf681f424,36574825,0,0x0,8
tick,0x7ffdf681f424,36576822,0,0x0,8
tick,0x7ffdf681f424,36578808,0,0x0,8
tick,0x7ffdf681f424,36580796,0,0x0,8
tick,0x7ffdf681f424,36582789,0,0x0,8
tick,0x7ffdf681f424,36584785,0,0x0,8
tick,0x7ffdf681f424,36586831,0,0x0,8
tick,0x7ffdf681f424,36588780,0,0x0,8
tick,0x7ffdf681f424,36590767,0,0x0,8
tick,0x7ffdf681f424,36592759,0,0x0,8
tick,0x7ffdf681f424,36594772,0,0x0,8
tick,0x7ffdf681f424,36596758,0,0x0,8
tick,0x7ffdf681f424,36598749,0,0x0,8
tick,0x7ffdf681f424,36600740,0,0x0,8
tick,0x7ffdf681f424,36602769,0,0x0,8
tick,0x7ffdf681f424,36604735,0,0x0,8
tick,0x7ffdf681f424,36606729,0,0x0,8
tick,0x7ffdf681f424,36609317,0,0x0,8
tick,0x7ffdf681f424,36610882,0,0x0,8
tick,0x7ffdf681f424,36616513,0,0x0,8
tick,0x7ffdf681f424,36622202,0,0x0,8
tick,0x7ffdf681f424,36623694,0,0x0,8
tick,0x7ffdf681f424,36625730,0,0x0,8
tick,0x7ffdf681f424,36628738,0,0x0,8
tick,0x7ffdf681f424,36630681,0,0x0,8
tick,0x7ffdf681f424,36632685,0,0x0,8
tick,0x7ffdf681f424,36634656,0,0x0,8
tick,0x7ffdf681f424,36636727,0,0x0,8
tick,0x7ffdf681f424,36638649,0,0x0,8
tick,0x7ffdf681f424,36640641,0,0x0,8
tick,0x7ffdf681f424,36642634,0,0x0,8
tick,0x7ffdf681f424,36645956,0,0x0,8
tick,0x7ffdf681f424,36646626,0,0x0,8
tick,0x7ffdf681f424,36659252,0,0x0,8
tick,0x7ffdf681f424,36660587,0,0x0,8
tick,0x7ffdf681f424,36662587,0,0x0,8
tick,0x7ffdf681f424,36664610,0,0x0,8
tick,0x7ffdf681f424,36666941,0,0x0,8
tick,0x7ffdf681f424,36668666,0,0x0,8
tick,0x7ffdf681f424,36670669,0,0x0,8
tick,0x7ffdf681f424,36672559,0,0x0,8
tick,0x7ffdf681f424,36674546,0,0x0,8
tick,0x7ffdf681f424,36676538,0,0x0,8
tick,0x7ffdf681f424,36678540,0,0x0,8
tick,0x7ffdf681f424,36680536,0,0x0,8
tick,0x7ffdf681f424,36682537,0,0x0,8
tick,0x7ffdf681f424,36684521,0,0x0,8
tick,0x7ffdf681f424,36686685,0,0x0,8
tick,0x7ffdf681f424,36688529,0,0x0,8
tick,0x7ffdf681f424,36695575,0,0x0,8
tick,0x7ffdf681f424,36703135,0,0x0,8
tick,0x7ffdf681f424,36704475,0,0x0,8
tick,0x7ffdf681f424,36706464,0,0x0,8
tick,0x7ffdf681f424,36709005,0,0x0,8
tick,0x7ffdf681f424,36710675,0,0x0,8
tick,0x7ffdf681f424,36712455,0,0x0,8
tick,0x7ffdf681f424,36714459,0,0x0,8
tick,0x7ffdf681f424,36716443,0,0x0,8
tick,0x7ffdf681f424,36718430,0,0x0,8
tick,0x7ffdf681f424,36720435,0,0x0,8
tick,0x7ffdf681f424,36722421,0,0x0,8
tick,0x7ffdf681f424,36724414,0,0x0,8
tick,0x7ffdf681f424,36726405,0,0x0,8
tick,0x7ffdf681f424,36728469,0,0x0,8
tick,0x7ffdf681f424,36730401,0,0x0,8
tick,0x7ffdf681f424,36732390,0,0x0,8
tick,0x7ffdf681f424,36734385,0,0x0,8
tick,0x7ffdf681f424,36736424,0,0x0,8
tick,0x7ffdf681f424,36738392,0,0x0,8
tick,0x7ffdf681f424,36740369,0,0x0,8
tick,0x7ffdf681f424,36742365,0,0x0,8
tick,0x7ffdf681f424,36744441,0,0x0,8
tick,0x7ffdf681f424,36746386,0,0x0,8
tick,0x7ffdf681f424,36748347,0,0x0,8
tick,0x7ffdf681f424,36751541,0,0x0,8
tick,0x7ffdf681f424,36766436,0,0x0,8
tick,0x7ffdf681f424,36778572,0,0x0,8
tick,0x7ffdf681f424,36779274,0,0x0,8
tick,0x7ffdf681f424,36781300,0,0x0,8
tick,0x7ffdf681f424,36783292,0,0x0,8
tick,0x7ffdf681f424,36785261,0,0x0,8
tick,0x7ffdf681f424,36787290,0,0x0,8
tick,0x7ffdf681f424,36789300,0,0x0,8
tick,0x7ffdf681f424,36791237,0,0x0,8
tick,0x7ffdf681f424,36793238,0,0x0,8
tick,0x7ffdf681f424,36795232,0,0x0,8
tick,0x7ffdf681f424,36797229,0,0x0,8
tick,0x7ffdf681f424,36799214,0,0x0,8
tick,0x7ffdf681f424,36801206,0,0x0,8
tick,0x7ffdf681f424,36803216,0,0x0,8
tick,0x7ffdf681f424,36805198,0,0x0,8
tick,0x7ffdf681f424,36807192,0,0x0,8
tick,0x7ffdf681f424,36809186,0,0x0,8
tick,0x7ffdf681f424,36811250,0,0x0,8
tick,0x7ffdf681f424,36813180,0,0x0,8
tick,0x7ffdf681f424,36815167,0,0x0,8
tick,0x7ffdf681f424,36817164,0,0x0,8
tick,0x7ffdf681f424,36819156,0,0x0,8
tick,0x7ffdf681f424,36821159,0,0x0,8
tick,0x7ffdf681f424,36823146,0,0x0,8
tick,0x7ffdf681f424,36825141,0,0x0,8
tick,0x7ffdf681f424,36827133,0,0x0,8
tick,0x7ffdf681f424,36829137,0,0x0,8
tick,0x7ffdf681f424,36831361,0,0x0,8
tick,0x7ffdf681f424,36838156,0,0x0,8
tick,0x7ffdf681f424,36840149,0,0x0,8
tick,0x7ffdf681f424,36842127,0,0x0,8
tick,0x7ffdf681f424,36844145,0,0x0,8
tick,0x7ffdf681f424,36846103,0,0x0,8
tick,0x7ffdf681f424,36848219,0,0x0,8
tick,0x7ffdf681f424,36858724,0,0x0,8
tick,0x7ffdf681f424,36860054,0,0x0,8
tick,0x7ffdf681f424,36862055,0,0x0,8
tick,0x7ffdf681f424,36864528,0,0x0,8
tick,0x7ffdf681f424,36866052,0,0x0,8
tick,0x7ffdf681f424,36868033,0,0x0,8
tick,0x7ffdf681f424,36871762,0,0x0,8
tick,0x7ffdf681f424,36873017,0,0x0,8
tick,0x7ffdf681f424,36875017,0,0x0,8
tick,0x7ffdf681f424,36877013,0,0x0,8
tick,0x7ffdf681f424,36879023,0,0x0,8
tick,0x7ffdf681f424,36881003,0,0x0,8
tick,0x7ffdf681f424,36882996,0,0x0,8
tick,0x7ffdf681f424,36884990,0,0x0,8
tick,0x7ffdf681f424,36886988,0,0x0,8
tick,0x7ffdf681f424,36888974,0,0x0,8
tick,0x7ffdf681f424,36890967,0,0x0,8
tick,0x7ffdf681f424,36892974,0,0x0,8
tick,0x7ffdf681f424,36894995,0,0x0,8
tick,0x7ffdf681f424,36896965,0,0x0,8
tick,0x7ffdf681f424,36898942,0,0x0,8
tick,0x7ffdf681f424,36900936,0,0x0,8
tick,0x7ffdf681f424,36902966,0,0x0,8
tick,0x7ffdf681f424,36904934,0,0x0,8
tick,0x7ffdf681f424,36906923,0,0x0,8
tick,0x7ffdf681f424,36910245,0,0x0,8
tick,0x7ffdf681f424,36912572,0,0x0,8
tick,0x7ffdf681f424,36914005,0,0x0,8
tick,0x7ffdf681f424,36915910,0,0x0,8
tick,0x7ffdf681f424,36917929,0,0x0,8
tick,0x7ffdf681f424,36921796,0,0x0,8
tick,0x7ffdf681f424,36922902,0,0x0,8
tick,0x7ffdf681f424,36924932,0,0x0,8
tick,0x7ffdf681f424,36927177,0,0x0,8
tick,0x7ffdf681f424,36928878,0,0x0,8
tick,0x7ffdf681f424,36930866,0,0x0,8
tick,0x7ffdf681f424,36932864,0,0x0,8
tick,0x7ffdf681f424,36934856,0,0x0,8
tick,0x7ffdf681f424,36936977,0,0x0,8
tick,0x7ffdf681f424,36938849,0,0x0,8
tick,0x7ffdf681f424,36940835,0,0x0,8
tick,0x7ffdf681f424,36942827,0,0x0,8
tick,0x7ffdf681f424,36944830,0,0x0,8
tick,0x7ffdf681f424,36946826,0,0x0,8
tick,0x7ffdf681f424,36948827,0,0x0,8
tick,0x7ffdf681f424,36950802,0,0x0,8
tick,0x7ffdf681f424,36952813,0,0x0,8
tick,0x7ffdf681f424,36954801,0,0x0,8
tick,0x7ffdf681f424,36957020,0,0x0,8
tick,0x7ffdf681f424,36967495,0,0x0,8
tick,0x7ffdf681f424,36968759,0,0x0,8
tick,0x7ffdf681f424,36970767,0,0x0,8
tick,0x7ffdf681f424,36972753,0,0x0,8
tick,0x7ffdf681f424,36974743,0,0x0,8
tick,0x7ffdf681f424,36976766,0,0x0,8
tick,0x7ffdf681f424,36978739,0,0x0,8
tick,0x7ffdf681f424,36980730,0,0x0,8
tick,0x7ffdf681f424,36982717,0,0x0,8
tick,0x7ffdf681f424,36984720,0,0x0,8
tick,0x7ffdf681f424,36986743,0,0x0,8
tick,0x7ffdf681f424,36988716,0,0x0,8
tick,0x7ffdf681f424,36991185,0,0x0,8
tick,0x7ffdf681f424,36993749,0,0x0,8
tick,0x7ffdf681f424,36995732,0,0x0,8
tick,0x7ffdf681f424,36997723,0,0x0,8
tick,0x7ffdf681f424,36999684,0,0x0,8
tick,0x7ffdf681f424,37001712,0,0x0,8
tick,0x7ffdf681f424,37003676,0,0x0,8
tick,0x7ffdf681f424,37005680,0,0x0,8
tick,0x7ffdf681f424,37007655,0,0x0,8
tick,0x7ffdf681f424,37010083,0,0x0,8
tick,0x7ffdf681f424,37011850,0,0x0,8
tick,0x7ffdf681f424,37013682,0,0x0,8
tick,0x7ffdf681f424,37015640,0,0x0,8
tick,0x7ffdf681f424,37017633,0,0x0,8
tick,0x7ffdf681f424,37019688,0,0x0,8
tick,0x7ffdf681f424,37021621,0,0x0,8
tick,0x7ffdf681f424,37023612,0,0x0,8
tick,0x7ffdf681f424,37025606,0,0x0,8
tick,0x7ffdf681f424,37027599,0,0x0,8
tick,0x7ffdf681f424,37029602,0,0x0,8
tick,0x7ffdf681f424,37031589,0,0x0,8
tick,0x7ffdf681f424,37033580,0,0x0,8
tick,0x7ffdf681f424,37035579,0,0x0,8
tick,0x7ffdf681f424,37037581,0,0x0,8
tick,0x7ffdf681f424,37039570,0,0x0,8
tick,0x7ffdf681f424,37041560,0,0x0,8
tick,0x7ffdf681f424,37043678,0,0x0,8
tick,0x7ffdf681f424,37058053,0,0x0,8
tick,0x7ffdf681f424,37059517,0,0x0,8
tick,0x7ffdf681f424,37061946,0,0x0,8
tick,0x7ffdf681f424,37064011,0,0x0,8
tick,0x7ffdf681f424,37065534,0,0x0,8
tick,0x7ffdf681f424,37067524,0,0x0,8
tick,0x7ffdf681f424,37069510,0,0x0,8
tick,0x7ffdf681f424,37071509,0,0x0,8
tick,0x7ffdf681f424,37073480,0,0x0,8
tick,0x7ffdf681f424,37075472,0,0x0,8
tick,0x7ffdf681f424,37077473,0,0x0,8
tick,0x7ffdf681f424,37079496,0,0x0,8
tick,0x7ffdf681f424,37081468,0,0x0,8
tick,0x7ffdf681f424,37083451,0,0x0,8
tick,0x7ffdf681f424,37085448,0,0x0,8
tick,0x7ffdf681f424,37087449,0,0x0,8
tick,0x7ffdf681f424,37089439,0,0x0,8
tick,0x7ffdf681f424,37091434,0,0x0,8
tick,0x7ffdf681f424,37093420,0,0x0,8
tick,0x7ffdf681f424,37095436,0,0x0,8
tick,0x7ffdf681f424,37097413,0,0x0,8
tick,0x7ffdf681f424,37099407,0,0x0,8
tick,0x7ffdf681f424,37101403,0,0x0,8
tick,0x7ffdf681f424,37103438,0,0x0,8
tick,0x7ffdf681f424,37105394,0,0x0,8
tick,0x7ffdf681f424,37107384,0,0x0,8
tick,0x7ffdf681f424,37109525,0,0x0,8
tick,0x7ffdf681f424,37112236,0,0x0,8
tick,0x7ffdf681f424,37115911,0,0x0,8
tick,0x7ffdf681f424,37118404,0,0x0,8
tick,0x7ffdf681f424,37120366,0,0x0,8
tick,0x7ffdf681f424,37122382,0,0x0,8
tick,0x7ffdf681f424,37124349,0,0x0,8
tick,0x7ffdf681f424,37126341,0,0x0,8
tick,0x7ffdf681f424,37129599,0,0x0,8
tick,0x7ffdf681f424,37140559,0,0x0,8
tick,0x7ffdf681f424,37142491,0,0x0,8
tick,0x7ffdf681f424,37144297,0,0x0,8
tick,0x7ffdf681f424,37146336,0,0x0,8
tick,0x7ffdf681f424,37148293,0,0x0,8
tick,0x7ffdf681f424,37150309,0,0x0,8
tick,0x7ffdf681f424,37152274,0,0x0,8
tick,0x7ffdf681f424,37154272,0,0x0,8
tick,0x7ffdf681f424,37156265,0,0x0,8
tick,0x7ffdf681f424,37158246,0,0x0,8
tick,0x7ffdf681f424,37160244,0,0x0,8
tick,0x7ffdf681f424,37162249,0,0x0,8
tick,0x7ffdf681f424,37164243,0,0x0,8
tick,0x7ffdf681f424,37166228,0,0x0,8
tick,0x7ffdf681f424,37168221,0,0x0,8
tick,0x7ffdf681f424,37170225,0,0x0,8
tick,0x7ffdf681f424,37172216,0,0x0,8
tick,0x7ffdf681f424,37174203,0,0x0,8
tick,0x7ffdf681f424,37176202,0,0x0,8
tick,0x7ffdf681f424,37178218,0,0x0,8
tick,0x7ffdf681f424,37180194,0,0x0,8
tick,0x7ffdf681f424,37182185,0,0x0,8
tick,0x7ffdf681f424,37184183,0,0x0,8
tick,0x7ffdf681f424,37186264,0,0x0,8
tick,0x7ffdf681f424,37188184,0,0x0,8
tick,0x7ffdf681f424,37190165,0,0x0,8
tick,0x7ffdf681f424,37192157,0,0x0,8
tick,0x7ffdf681f424,37194158,0,0x0,8
tick,0x7ffdf681f424,37202260,0,0x0,8
tick,0x7ffdf681f424,37208450,0,0x0,8
tick,0x7ffdf681f424,37210135,0,0x0,8
tick,0x7ffdf681f424,37212531,0,0x0,8
tick,0x7ffdf681f424,37214191,0,0x0,8
tick,0x7ffdf681f424,37216117,0,0x0,8
tick,0x7ffdf681f424,37218095,0,0x0,8
tick,0x7ffdf681f424,37220099,0,0x0,8
tick,0x7ffdf681f424,37222092,0,0x0,8
tick,0x7ffdf681f424,37224202,0,0x0,8
tick,0x7ffdf681f424,37226354,0,0x0,8
tick,0x7ffdf681f424,37228677,0,0x0,8
tick,0x7ffdf681f424,37230229,0,0x0,8
tick,0x7ffdf681f424,37232108,0,0x0,8
tick,0x7ffdf681f424,37234059,0,0x0,8
tick,0x7ffdf681f424,37237399,0,0x0,8
tick,0x7ffdf681f424,37242263,0,0x0,8
tick,0x7ffdf681f424,37244053,0,0x0,8
tick,0x7ffdf681f424,37246025,0,0x0,8
tick,0x7ffdf681f424,37248031,0,0x0,8
tick,0x7ffdf681f424,37250389,0,0x0,8
tick,0x7ffdf681f424,37252004,0,0x0,8
tick,0x7ffdf681f424,37254109,0,0x0,8
tick,0x7ffdf681f424,37256089,0,0x0,8
tick,0x7ffdf681f424,37257987,0,0x0,8
tick,0x7ffdf681f424,37259976,0,0x0,8
tick,0x7ffdf681f424,37261975,0,0x0,8
tick,0x7ffdf681f424,37263971,0,0x0,8
tick,0x7ffdf681f424,37265969,0,0x0,8
tick,0x7ffdf681f424,37267955,0,0x0,8
tick,0x7ffdf681f424,37269958,0,0x0,8
tick,0x7ffdf681f424,37271944,0,0x0,8
tick,0x7ffdf681f424,37273944,0,0x0,8
tick,0x7ffdf681f424,37275942,0,0x0,8
tick,0x7ffdf681f424,37277932,0,0x0,8
tick,0x7ffdf681f424,37279921,0,0x0,8
tick,0x7ffdf681f424,37281919,0,0x0,8
tick,0x7ffdf681f424,37283913,0,0x0,8
tick,0x7ffdf681f424,37286751,0,0x0,8
tick,0x7ffdf681f424,37291339,0,0x0,8
tick,0x7ffdf681f424,37300562,0,0x0,8
tick,0x7ffdf681f424,37300603,0,0x0,8
tick,0x7ffdf681f424,37301867,0,0x0,8
tick,0x7ffdf681f424,37303866,0,0x0,8
tick,0x7ffdf681f424,37305858,0,0x0,8
tick,0x7ffdf681f424,37307854,0,0x0,8
tick,0x7ffdf681f424,37309853,0,0x0,8
tick,0x7ffdf681f424,37311957,0,0x0,8
tick,0x7ffdf681f424,37313858,0,0x0,8
tick,0x7ffdf681f424,37315837,0,0x0,8
tick,0x7ffdf681f424,37318088,0,0x0,8
tick,0x7ffdf681f424,37320465,0,0x0,8
tick,0x7ffdf681f424,37332081,0,0x0,8
tick,0x7ffdf681f424,37333787,0,0x0,8
tick,0x7ffdf681f424,37335793,0,0x0,8
tick,0x7ffdf681f424,37337911,0,0x0,8
tick,0x7ffdf681f424,37339774,0,0x0,8
tick,0x7ffdf681f424,37341800,0,0x0,8
tick,0x7ffdf681f424,37343757,0,0x0,8
tick,0x7ffdf681f424,37345751,0,0x0,8
tick,0x7ffdf681f424,37347743,0,0x0,8
tick,0x7ffdf681f424,37349736,0,0x0,8
tick,0x7ffdf681f424,37351731,0,0x0,8
tick,0x7ffdf681f424,37353737,0,0x0,8
tick,0x7ffdf681f424,37355727,0,0x0,8
tick,0x7ffdf681f424,37357715,0,0x0,8
tick,0x7ffdf681f424,37359711,0,0x0,8
tick,0x7ffdf681f424,37361708,0,0x0,8
tick,0x7ffdf681f424,37363703,0,0x0,8
tick,0x7ffdf681f424,37365695,0,0x0,8
tick,0x7ffdf681f424,37367691,0,0x0,8
tick,0x7ffdf681f424,37369686,0,0x0,8
tick,0x7ffdf681f424,37371676,0,0x0,8
tick,0x7ffdf681f424,37373672,0,0x0,8
tick,0x7ffdf681f424,37375670,0,0x0,8
tick,0x7ffdf681f424,37377662,0,0x0,8
tick,0x7ffdf681f424,37379658,0,0x0,8
tick,0x7ffdf681f424,37381648,0,0x0,8
tick,0x7ffdf681f424,37383645,0,0x0,8
tick,0x7ffdf681f424,37388073,0,0x0,8
tick,0x7ffdf681f424,37398044,0,0x0,8
tick,0x7ffdf681f424,37399602,0,0x0,8
tick,0x7ffdf681f424,37413762,0,0x0,8
tick,0x7ffdf681f424,37415577,0,0x0,8
tick,0x7ffdf681f424,37417564,0,0x0,8
tick,0x7ffdf681f424,37419605,0,0x0,8
tick,0x7ffdf681f424,37421614,0,0x0,8
tick,0x7ffdf681f424,37423581,0,0x0,8
tick,0x7ffdf681f424,37425538,0,0x0,8
tick,0x7ffdf681f424,37427529,0,0x0,8
tick,0x7ffdf681f424,37429531,0,0x0,8
tick,0x7ffdf681f424,37431519,0,0x0,8
tick,0x7ffdf681f424,37433512,0,0x0,8
tick,0x7ffdf681f424,37435509,0,0x0,8
tick,0x7ffdf681f424,37437509,0,0x0,8
tick,0x7ffdf681f424,37439504,0,0x0,8
tick,0x7ffdf681f424,37441491,0,0x0,8
tick,0x7ffdf681f424,37443484,0,0x0,8
tick,0x7ffdf681f424,37445493,0,0x0,8
tick,0x7ffdf681f424,37447478,0,0x0,8
tick,0x7ffdf681f424,37449470,0,0x0,8
tick,0x7ffdf681f424,37451467,0,0x0,8
tick,0x7ffdf681f424,37453462,0,0x0,8
tick,0x7ffdf681f424,37455464,0,0x0,8
tick,0x7ffdf681f424,37457449,0,0x0,8
tick,0x7ffdf681f424,37459445,0,0x0,8
tick,0x7ffdf681f424,37471756,0,0x0,8
tick,0x7ffdf681f424,37473411,0,0x0,8
tick,0x7ffdf681f424,37475615,0,0x0,8
tick,0x7ffdf681f424,37477559,0,0x0,8
tick,0x7ffdf681f424,37479470,0,0x0,8
tick,0x7ffdf681f424,37481549,0,0x0,8
tick,0x7ffdf681f424,37483468,0,0x0,8
tick,0x7ffdf681f424,37485390,0,0x0,8
tick,0x7ffdf681f424,37487411,0,0x0,8
tick,0x7ffdf681f424,37489793,0,0x0,8
tick,0x7ffdf681f424,37491391,0,0x0,8
tick,0x7ffdf681f424,37496401,0,0x0,8
tick,0x7ffdf681f424,37499937,0,0x0,8
tick,0x7ffdf681f424,37501331,0,0x0,8
tick,0x7ffdf681f424,37503335,0,0x0,8
tick,0x7ffdf681f424,37505325,0,0x0,8
tick,0x7ffdf681f424,37507327,0,0x0,8
tick,0x7ffdf681f424,37509314,0,0x0,8
tick,0x7ffdf681f424,37511449,0,0x0,8
tick,0x7ffdf681f424,37513410,0,0x0,8
tick,0x7ffdf681f424,37515306,0,0x0,8
tick,0x7ffdf681f424,37517291,0,0x0,8
tick,0x7ffdf681f424,37519288,0,0x0,8
tick,0x7ffdf681f424,37521290,0,0x0,8
tick,0x7ffdf681f424,37523276,0,0x0,8
tick,0x7ffdf681f424,37525267,0,0x0,8
tick,0x7ffdf681f424,37527264,0,0x0,8
tick,0x7ffdf681f424,37529256,0,0x0,8
tick,0x7ffdf681f424,37531251,0,0x0,8
tick,0x7ffdf681f424,37533251,0,0x0,8
tick,0x7ffdf681f424,37535240,0,0x0,8
tick,0x7ffdf681f424,37537239,0,0x0,8
tick,0x7ffdf681f424,37545233,0,0x0,8
tick,0x7ffdf681f424,37547246,0,0x0,8
tick,0x7ffdf681f424,37549212,0,0x0,8
tick,0x7ffdf681f424,37551209,0,0x0,8
tick,0x7ffdf681f424,37553210,0,0x0,8
tick,0x7ffdf681f424,37555274,0,0x0,8
tick,0x7ffdf681f424,37557185,0,0x0,8
tick,0x7ffdf681f424,37559184,0,0x0,8
tick,0x7ffdf681f424,37561198,0,0x0,8
tick,0x7ffdf681f424,37563168,0,0x0,8
tick,0x7ffdf681f424,37565164,0,0x0,8
tick,0x7ffdf681f424,37567162,0,0x0,8
tick,0x7ffdf681f424,37569184,0,0x0,8
tick,0x7ffdf681f424,37571156,0,0x0,8
tick,0x7ffdf681f424,37573148,0,0x0,8
tick,0x7ffdf681f424,37575139,0,0x0,8
tick,0x7ffdf681f424,37577132,0,0x0,8
tick,0x7ffdf681f424,37579130,0,0x0,8
tick,0x7ffdf681f424,37581118,0,0x0,8
tick,0x7ffdf681f424,37583122,0,0x0,8
tick,0x7ffdf681f424,37585193,0,0x0,8
tick,0x7ffdf681f424,37594510,0,0x0,8
tick,0x7ffdf681f424,37596114,0,0x0,8
tick,0x7ffdf681f424,37598133,0,0x0,8
tick,0x7ffdf681f424,37600099,0,0x0,8
tick,0x7ffdf681f424,37602069,0,0x0,8
tick,0x7ffdf681f424,37604117,0,0x0,8
tick,0x7ffdf681f424,37606115,0,0x0,8
tick,0x7ffdf681f424,37608094,0,0x0,8
tick,0x7ffdf681f424,37610096,0,0x0,8
tick,0x7ffdf681f424,37612039,0,0x0,8
tick,0x7ffdf681f424,37614036,0,0x0,8
tick,0x7ffdf681f424,37616028,0,0x0,8
tick,0x7ffdf681f424,37618019,0,0x0,8
tick,0x7ffdf681f424,37620015,0,0x0,8
tick,0x7ffdf681f424,37622011,0,0x0,8
tick,0x7ffdf681f424,37624062,0,0x0,8
tick,0x7ffdf681f424,37636240,0,0x0,8
tick,0x7ffdf681f424,37637986,0,0x0,8
tick,0x7ffdf681f424,37640010,0,0x0,8
tick,0x7ffdf681f424,37642046,0,0x0,8
tick,0x7ffdf681f424,37643959,0,0x0,8
tick,0x7ffdf681f424,37645952,0,0x0,8
tick,0x7ffdf681f424,37647941,0,0x0,8
tick,0x7ffdf681f424,37649937,0,0x0,8
tick,0x7ffdf681f424,37651926,0,0x0,8
tick,0x7ffdf681f424,37653930,0,0x0,8
tick,0x7ffdf681f424,37655919,0,0x0,8
tick,0x7ffdf681f424,37657914,0,0x0,8
tick,0x7ffdf681f424,37663516,0,0x0,8
tick,0x7ffdf681f424,37673628,0,0x0,8
tick,0x7ffdf681f424,37674874,0,0x0,8
tick,0x7ffdf681f424,37676864,0,0x0,8
tick,0x7ffdf681f424,37678993,0,0x0,8
tick,0x7ffdf681f424,37680871,0,0x0,8
tick,0x7ffdf681f424,37682886,0,0x0,8
tick,0x7ffdf681f424,37684869,0,0x0,8
tick,0x7ffdf681f424,37686844,0,0x0,8
tick,0x7ffdf681f424,37688830,0,0x0,8
tick,0x7ffdf681f424,37690826,0,0x0,8
tick,0x7ffdf681f424,37692821,0,0x0,8
tick,0x7ffdf681f424,37694822,0,0x0,8
tick,0x7ffdf681f424,37696812,0,0x0,8
tick,0x7ffdf681f424,37698809,0,0x0,8
tick,0x7ffdf681f424,37700797,0,0x0,8
tick,0x7ffdf681f424,37702792,0,0x0,8
tick,0x7ffdf681f424,37704790,0,0x0,8
tick,0x7ffdf681f424,37706779,0,0x0,8
tick,0x7ffdf681f424,37708775,0,0x0,8
tick,0x7ffdf681f424,37710768,0,0x0,8
tick,0x7ffdf681f424,37712772,0,0x0,8
tick,0x7ffdf681f424,37716129,0,0x0,8
tick,0x7ffdf681f424,37720960,0,0x0,8
tick,0x7ffdf681f424,37724266,0,0x0,8
tick,0x7ffdf681f424,37734123,0,0x0,8
tick,0x7ffdf681f424,37735715,0,0x0,8
tick,0x7ffdf681f424,37737764,0,0x0,8
tick,0x7ffdf681f424,37739786,0,0x0,8
tick,0x7ffdf681f424,37741755,0,0x0,8
tick,0x7ffdf681f424,37743718,0,0x0,8
tick,0x7ffdf681f424,37745686,0,0x0,8
tick,0x7ffdf681f424,37747678,0,0x0,8
tick,0x7ffdf681f424,37749667,0,0x0,8
tick,0x7ffdf681f424,37751884,0,0x0,8
tick,0x7ffdf681f424,37753886,0,0x0,8
tick,0x7ffdf681f424,37755818,0,0x0,8
tick,0x7ffdf681f424,37757655,0,0x0,8
tick,0x7ffdf681f424,37759684,0,0x0,8
tick,0x7ffdf681f424,37761647,0,0x0,8
tick,0x7ffdf681f424,37763644,0,0x0,8
tick,0x7ffdf681f424,37767400,0,0x0,8
tick,0x7ffdf681f424,37768621,0,0x0,8
tick,0x7ffdf681f424,37770622,0,0x0,8
tick,0x7ffdf681f424,37772626,0,0x0,8
tick,0x7ffdf681f424,37774614,0,0x0,8
tick,0x7ffdf681f424,37776600,0,0x0,8
tick,0x7ffdf681f424,37778598,0,0x0,8
tick,0x7ffdf681f424,37780595,0,0x0,8
tick,0x7ffdf681f424,37782579,0,0x0,8
tick,0x7ffdf681f424,37784573,0,0x0,8
tick,0x7ffdf681f424,37786571,0,0x0,8
tick,0x7ffdf681f424,37788561,0,0x0,8
tick,0x7ffdf681f424,37790554,0,0x0,8
tick,0x7ffdf681f424,37792554,0,0x0,8
tick,0x7ffdf681f424,37794562,0,0x0,8
tick,0x7ffdf681f424,37796546,0,0x0,8
tick,0x7ffdf681f424,37798534,0,0x0,8
tick,0x7ffdf681f424,37800531,0,0x0,8
tick,0x7ffdf681f424,37802547,0,0x0,8
tick,0x7ffdf681f424,37804522,0,0x0,8
tick,0x7ffdf681f424,37806516,0,0x0,8
tick,0x7ffdf681f424,37808508,0,0x0,8
tick,0x7ffdf681f424,37810501,0,0x0,8
tick,0x7ffdf681f424,37812502,0,0x0,8
tick,0x7ffdf681f424,37814494,0,0x0,8
tick,0x7ffdf681f424,37816491,0,0x0,8
tick,0x7ffdf681f424,37832953,0,0x0,8
tick,0x7ffdf681f424,37833000,0,0x0,8
tick,0x7ffdf681f424,37836880,0,0x0,8
tick,0x7ffdf681f424,37847432,0,0x0,8
tick,0x7ffdf681f424,37849410,0,0x0,8
tick,0x7ffdf681f424,37851455,0,0x0,8
tick,0x7ffdf681f424,37853466,0,0x0,8
tick,0x7ffdf681f424,37855436,0,0x0,8
tick,0x7ffdf681f424,37857423,0,0x0,8
tick,0x7ffdf681f424,37859416,0,0x0,8
tick,0x7ffdf681f424,37861513,0,0x0,8
tick,0x7ffdf681f424,37863401,0,0x0,8
tick,0x7ffdf681f424,37865362,0,0x0,8
tick,0x7ffdf681f424,37867356,0,0x0,8
tick,0x7ffdf681f424,37869352,0,0x0,8
tick,0x7ffdf681f424,37871420,0,0x0,8
tick,0x7ffdf681f424,37873347,0,0x0,8
tick,0x7ffdf681f424,37875337,0,0x0,8
tick,0x7ffdf681f424,37877327,0,0x0,8
tick,0x7ffdf681f424,37879333,0,0x0,8
tick,0x7ffdf681f424,37881315,0,0x0,8
tick,0x7ffdf681f424,37883308,0,0x0,8
tick,0x7ffdf681f424,37885301,0,0x0,8
tick,0x7ffdf681f424,37887304,0,0x0,8
tick,0x7ffdf681f424,37889294,0,0x0,8
tick,0x7ffdf681f424,37891292,0,0x0,8
tick,0x7ffdf681f424,37893283,0,0x0,8
tick,0x7ffdf681f424,37895285,0,0x0,8
tick,0x7ffdf681f424,37897275,0,0x0,8
tick,0x7ffdf681f424,37899272,0,0x0,8
tick,0x7ffdf681f424,37901276,0,0x0,8
tick,0x7ffdf681f424,37903262,0,0x0,8
tick,0x7ffdf681f424,37905258,0,0x0,8
tick,0x7ffdf681f424,37907244,0,0x0,8
tick,0x7ffdf681f424,37909242,0,0x0,8
tick,0x7ffdf681f424,37911264,0,0x0,8
tick,0x7ffdf681f424,37939050,0,0x0,8
tick,0x7ffdf681f424,37939092,0,0x0,8
tick,0x7ffdf681f424,37940179,0,0x0,8
tick,0x7ffdf681f424,37942163,0,0x0,8
tick,0x7ffdf681f424,37944303,0,0x0,8
tick,0x7ffdf681f424,37946368,0,0x0,8
tick,0x7ffdf681f424,37948170,0,0x0,8
tick,0x7ffdf681f424,37950151,0,0x0,8
tick,0x7ffdf681f424,37952163,0,0x0,8
tick,0x7ffdf681f424,37954237,0,0x0,8
tick,0x7ffdf681f424,37956122,0,0x0,8
tick,0x7ffdf681f424,37958112,0,0x0,8
tick,0x7ffdf681f424,37960106,0,0x0,8
tick,0x7ffdf681f424,37962103,0,0x0,8
tick,0x7ffdf681f424,37964092,0,0x0,8
tick,0x7ffdf681f424,37966089,0,0x0,8
tick,0x7ffdf681f424,37968083,0,0x0,8
tick,0x7ffdf681f424,37970080,0,0x0,8
tick,0x7ffdf681f424,37972082,0,0x0,8
tick,0x7ffdf681f424,37974069,0,0x0,8
tick,0x7ffdf681f424,37976061,0,0x0,8
tick,0x7ffdf681f424,37978062,0,0x0,8
tick,0x7ffdf681f424,37980055,0,0x0,8
tick,0x7ffdf681f424,37982041,0,0x0,8
tick,0x7ffdf681f424,37984040,0,0x0,8
tick,0x7ffdf681f424,37986033,0,0x0,8
tick,0x7ffdf681f424,37988028,0,0x0,8
tick,0x7ffdf681f424,38002413,0,0x0,8
tick,0x7ffdf681f424,38004023,0,0x0,8
tick,0x7ffdf681f424,38006025,0,0x0,8
tick,0x7ffdf681f424,38016807,0,0x0,8
tick,0x7ffdf681f424,38018036,0,0x0,8
tick,0x7ffdf681f424,38019950,0,0x0,8
tick,0x7ffdf681f424,38021950,0,0x0,8
tick,0x7ffdf681f424,38024015,0,0x0,8
tick,0x7ffdf681f424,38025939,0,0x0,8
tick,0x7ffdf681f424,38028009,0,0x0,8
tick,0x7ffdf681f424,38029919,0,0x0,8
tick,0x7ffdf681f424,38031914,0,0x0,8
tick,0x7ffdf681f424,38033908,0,0x0,8
tick,0x7ffdf681f424,38035899,0,0x0,8
tick,0x7ffdf681f424,38037912,0,0x0,8
tick,0x7ffdf681f424,38039889,0,0x0,8
tick,0x7ffdf681f424,38041879,0,0x0,8
tick,0x7ffdf681f424,38043880,0,0x0,8
tick,0x7ffdf681f424,38045878,0,0x0,8
tick,0x7ffdf681f424,38047869,0,0x0,8
tick,0x7ffdf681f424,38049871,0,0x0,8
tick,0x7ffdf681f424,38051860,0,0x0,8
tick,0x7ffdf681f424,38053860,0,0x0,8
tick,0x7ffdf681f424,38055851,0,0x0,8
tick,0x7ffdf681f424,38057845,0,0x0,8
tick,0x7ffdf681f424,38059875,0,0x0,8
tick,0x7ffdf681f424,38061839,0,0x0,8
tick,0x7ffdf681f424,38063833,0,0x0,8
tick,0x7ffdf681f424,38065843,0,0x0,8
tick,0x7ffdf681f424,38067814,0,0x0,8
tick,0x7ffdf681f424,38069815,0,0x0,8
tick,0x7ffdf681f424,38071806,0,0x0,8
tick,0x7ffdf681f424,38073799,0,0x0,8
tick,0x7ffdf681f424,38075820,0,0x0,8
tick,0x7ffdf681f424,38077833,0,0x0,8
tick,0x7ffdf681f424,38079801,0,0x0,8
tick,0x7ffdf681f424,38081863,0,0x0,8
tick,0x7ffdf681f424,38083787,0,0x0,8
tick,0x7ffdf681f424,38102157,0,0x0,8
tick,0x7ffdf681f424,38102195,0,0x0,8
tick,0x7ffdf681f424,38103758,0,0x0,8
tick,0x7ffdf681f424,38105799,0,0x0,8
tick,0x7ffdf681f424,38107725,0,0x0,8
tick,0x7ffdf681f424,38109738,0,0x0,8
tick,0x7ffdf681f424,38111735,0,0x0,8
tick,0x7ffdf681f424,38113737,0,0x0,8
tick,0x7ffdf681f424,38115695,0,0x0,8
tick,0x7ffdf681f424,38117686,0,0x0,8
tick,0x7ffdf681f424,38119714,0,0x0,8
tick,0x7ffdf681f424,38121675,0,0x0,8
tick,0x7ffdf681f424,38123669,0,0x0,8
tick,0x7ffdf681f424,38125666,0,0x0,8
tick,0x7ffdf681f424,38127654,0,0x0,8
tick,0x7ffdf681f424,38129652,0,0x0,8
tick,0x7ffdf681f424,38131644,0,0x0,8
tick,0x7ffdf681f424,38133643,0,0x0,8
tick,0x7ffdf681f424,38135635,0,0x0,8
tick,0x7ffdf681f424,38137629,0,0x0,8
tick,0x7ffdf681f424,38139625,0,0x0,8
tick,0x7ffdf681f424,38141616,0,0x0,8
tick,0x7ffdf681f424,38143616,0,0x0,8
tick,0x7ffdf681f424,38145628,0,0x0,8
tick,0x7ffdf681f424,38147604,0,0x0,8
tick,0x7ffdf681f424,38149601,0,0x0,8
tick,0x7ffdf681f424,38151592,0,0x0,8
tick,0x7ffdf681f424,38153590,0,0x0,8
tick,0x7ffdf681f424,38155583,0,0x0,8
tick,0x7ffdf681f424,38157577,0,0x0,8
tick,0x7ffdf681f424,38159571,0,0x0,8
tick,0x7ffdf681f424,38161574,0,0x0,8
tick,0x7ffdf681f424,38163561,0,0x0,8
tick,0x7ffdf681f424,38165555,0,0x0,8
tick,0x7ffdf681f424,38167553,0,0x0,8
tick,0x7ffdf681f424,38169545,0,0x0,8
tick,0x7ffdf681f424,38184337,0,0x0,8
tick,0x7ffdf681f424,38185506,0,0x0,8
tick,0x7ffdf681f424,38187508,0,0x0,8
tick,0x7ffdf681f424,38190104,0,0x0,8
tick,0x7ffdf681f424,38191502,0,0x0,8
tick,0x7ffdf681f424,38193483,0,0x0,8
tick,0x7ffdf681f424,38195481,0,0x0,8
tick,0x7ffdf681f424,38197472,0,0x0,8
tick,0x7ffdf681f424,38211662,0,0x0,8
tick,0x7ffdf681f424,38213429,0,0x0,8
tick,0x7ffdf681f424,38215427,0,0x0,8
tick,0x7ffdf681f424,38217433,0,0x0,8
tick,0x7ffdf681f424,38219418,0,0x0,8
tick,0x7ffdf681f424,38221437,0,0x0,8
tick,0x7ffdf681f424,38223404,0,0x0,8
tick,0x7ffdf681f424,38225395,0,0x0,8
tick,0x7ffdf681f424,38227390,0,0x0,8
tick,0x7ffdf681f424,38229386,0,0x0,8
tick,0x7ffdf681f424,38231382,0,0x0,8
tick,0x7ffdf681f424,38233378,0,0x0,8
tick,0x7ffdf681f424,38235375,0,0x0,8
tick,0x7ffdf681f424,38237367,0,0x0,8
tick,0x7ffdf681f424,38239357,0,0x0,8
tick,0x7ffdf681f424,38241354,0,0x0,8
tick,0x7ffdf681f424,38243349,0,0x0,8
tick,0x7ffdf681f424,38245342,0,0x0,8
tick,0x7ffdf681f424,38247338,0,0x0,8
tick,0x7ffdf681f424,38249330,0,0x0,8
tick,0x7ffdf681f424,38251326,0,0x0,8
tick,0x7ffdf681f424,38253325,0,0x0,8
tick,0x7ffdf681f424,38255316,0,0x0,8
tick,0x7ffdf681f424,38257316,0,0x0,8
tick,0x7ffdf681f424,38272466,0,0x0,8
tick,0x7ffdf681f424,38274276,0,0x0,8
tick,0x7ffdf681f424,38276291,0,0x0,8
tick,0x7ffdf681f424,38278567,0,0x0,8
tick,0x7ffdf681f424,38280280,0,0x0,8
tick,0x7ffdf681f424,38282245,0,0x0,8
tick,0x7ffdf681f424,38284246,0,0x0,8
tick,0x7ffdf681f424,38286234,0,0x0,8
tick,0x7ffdf681f424,38288280,0,0x0,8
tick,0x7ffdf681f424,38290227,0,0x0,8
tick,0x7ffdf681f424,38292219,0,0x0,8
tick,0x7ffdf681f424,38294227,0,0x0,8
tick,0x7ffdf681f424,38296210,0,0x0,8
tick,0x7ffdf681f424,38298197,0,0x0,8
tick,0x7ffdf681f424,38300195,0,0x0,8
tick,0x7ffdf681f424,38302189,0,0x0,8
tick,0x7ffdf681f424,38304185,0,0x0,8
tick,0x7ffdf681f424,38306181,0,0x0,8
tick,0x7ffdf681f424,38308172,0,0x0,8
tick,0x7ffdf681f424,38313400,0,0x0,8
tick,0x7ffdf681f424,38315355,0,0x0,8
tick,0x7ffdf681f424,38317645,0,0x0,8
tick,0x7ffdf681f424,38319279,0,0x0,8
tick,0x7ffdf681f424,38321440,0,0x0,8
tick,0x7ffdf681f424,38325645,0,0x0,8
tick,0x7ffdf681f424,38327125,0,0x0,8
tick,0x7ffdf681f424,38329122,0,0x0,8
tick,0x7ffdf681f424,38331278,0,0x0,8
tick,0x7ffdf681f424,38333244,0,0x0,8
tick,0x7ffdf681f424,38335143,0,0x0,8
tick,0x7ffdf681f424,38337100,0,0x0,8
tick,0x7ffdf681f424,38339093,0,0x0,8
tick,0x7ffdf681f424,38341087,0,0x0,8
tick,0x7ffdf681f424,38343078,0,0x0,8
tick,0x7ffdf681f424,38345078,0,0x0,8
tick,0x7ffdf681f424,38347070,0,0x0,8
tick,0x7ffdf681f424,38349068,0,0x0,8
tick,0x7ffdf681f424,38351066,0,0x0,8
tick,0x7ffdf681f424,38353054,0,0x0,8
tick,0x7ffdf681f424,38355058,0,0x0,8
tick,0x7ffdf681f424,38357043,0,0x0,8
tick,0x7ffdf681f424,38361254,0,0x0,8
tick,0x7ffdf681f424,38370736,0,0x0,8
tick,0x7ffdf681f424,38373879,0,0x0,8
tick,0x7ffdf681f424,38375001,0,0x0,8
tick,0x7ffdf681f424,38377038,0,0x0,8
tick,0x7ffdf681f424,38378994,0,0x0,8
tick,0x7ffdf681f424,38381000,0,0x0,8
tick,0x7ffdf681f424,38382980,0,0x0,8
tick,0x7ffdf681f424,38384979,0,0x0,8
tick,0x7ffdf681f424,38386969,0,0x0,8
tick,0x7ffdf681f424,38388959,0,0x0,8
tick,0x7ffdf681f424,38390952,0,0x0,8
tick,0x7ffdf681f424,38392946,0,0x0,8
tick,0x7ffdf681f424,38394956,0,0x0,8
tick,0x7ffdf681f424,38396936,0,0x0,8
tick,0x7ffdf681f424,38398927,0,0x0,8
tick,0x7ffdf681f424,38400926,0,0x0,8
tick,0x7ffdf681f424,38402917,0,0x0,8
tick,0x7ffdf681f424,38404917,0,0x0,8
tick,0x7ffdf681f424,38406922,0,0x0,8
tick,0x7ffdf681f424,38408909,0,0x0,8
tick,0x7ffdf681f424,38410915,0,0x0,8
tick,0x7ffdf681f424,38412900,0,0x0,8
tick,0x7ffdf681f424,38414890,0,0x0,8
tick,0x7ffdf681f424,38417016,0,0x0,8
tick,0x7ffdf681f424,38427101,0,0x0,8
tick,0x7ffdf681f424,38429313,0,0x0,8
tick,0x7ffdf681f424,38430853,0,0x0,8
tick,0x7ffdf681f424,38432852,0,0x0,8
tick,0x7ffdf681f424,38435002,0,0x0,8
tick,0x7ffdf681f424,38436843,0,0x0,8
tick,0x7ffdf681f424,38438829,0,0x0,8
tick,0x7ffdf681f424,38440844,0,0x0,8
tick,0x7ffdf681f424,38442813,0,0x0,8
tick,0x7ffdf681f424,38452506,0,0x0,8
tick,0x7ffdf681f424,38453975,0,0x0,8
tick,0x7ffdf681f424,38457934,0,0x0,8
tick,0x7ffdf681f424,38459776,0,0x0,8
tick,0x7ffdf681f424,38461769,0,0x0,8
tick,0x7ffdf681f424,38463759,0,0x0,8
tick,0x7ffdf681f424,38465866,0,0x0,8
tick,0x7ffdf681f424,38467760,0,0x0,8
tick,0x7ffdf681f424,38469756,0,0x0,8
tick,0x7ffdf681f424,38471741,0,0x0,8
tick,0x7ffdf681f424,38473733,0,0x0,8
tick,0x7ffdf681f424,38475723,0,0x0,8
tick,0x7ffdf681f424,38477727,0,0x0,8
tick,0x7ffdf681f424,38479720,0,0x0,8
tick,0x7ffdf681f424,38481714,0,0x0,8
tick,0x7ffdf681f424,38483701,0,0x0,8
tick,0x7ffdf681f424,38485696,0,0x0,8
tick,0x7ffdf681f424,38487702,0,0x0,8
tick,0x7ffdf681f424,38489687,0,0x0,8
tick,0x7ffdf681f424,38491682,0,0x0,8
tick,0x7ffdf681f424,38493678,0,0x0,8
tick,0x7ffdf681f424,38495672,0,0x0,8
tick,0x7ffdf681f424,38497668,0,0x0,8
tick,0x7ffdf681f424,38499661,0,0x0,8
tick,0x7ffdf681f424,38501659,0,0x0,8
tick,0x7ffdf681f424,38503653,0,0x0,8
tick,0x7ffdf681f424,38505658,0,0x0,8
tick,0x7ffdf681f424,38507646,0,0x0,8
tick,0x7ffdf681f424,38509636,0,0x0,8
tick,0x7ffdf681f424,38512729,0,0x0,8
tick,0x7ffdf681f424,38524903,0,0x0,8
tick,0x7ffdf681f424,38527245,0,0x0,8
tick,0x7ffdf681f424,38531370,0,0x0,8
tick,0x7ffdf681f424,38543074,0,0x0,8
tick,0x7ffdf681f424,38545925,0,0x0,8
tick,0x7ffdf681f424,38550676,0,0x0,8
tick,0x7ffdf681f424,38552520,0,0x0,8
tick,0x7ffdf681f424,38554512,0,0x0,8
tick,0x7ffdf681f424,38556512,0,0x0,8
tick,0x7ffdf681f424,38558507,0,0x0,8
tick,0x7ffdf681f424,38560503,0,0x0,8
tick,0x7ffdf681f424,38562553,0,0x0,8
tick,0x7ffdf681f424,38564951,0,0x0,8
tick,0x7ffdf681f424,38566511,0,0x0,8
tick,0x7ffdf681f424,38568513,0,0x0,8
tick,0x7ffdf681f424,38570480,0,0x0,8
tick,0x7ffdf681f424,38572466,0,0x0,8
tick,0x7ffdf681f424,38574464,0,0x0,8
tick,0x7ffdf681f424,38576459,0,0x0,8
tick,0x7ffdf681f424,38578489,0,0x0,8
tick,0x7ffdf681f424,38580449,0,0x0,8
tick,0x7ffdf681f424,38582441,0,0x0,8
tick,0x7ffdf681f424,38584438,0,0x0,8
tick,0x7ffdf681f424,38586439,0,0x0,8
tick,0x7ffdf681f424,38588427,0,0x0,8
tick,0x7ffdf681f424,38590418,0,0x0,8
tick,0x7ffdf681f424,38592414,0,0x0,8
tick,0x7ffdf681f424,38594405,0,0x0,8
tick,0x7ffdf681f424,38596404,0,0x0,8
tick,0x7ffdf681f424,38598397,0,0x0,8
tick,0x7ffdf681f424,38600400,0,0x0,8
tick,0x7ffdf681f424,38602389,0,0x0,8
tick,0x7ffdf681f424,38604382,0,0x0,8
tick,0x7ffdf681f424,38616869,0,0x0,8
tick,0x7ffdf681f424,38619106,0,0x0,8
tick,0x7ffdf681f424,38620343,0,0x0,8
tick,0x7ffdf681f424,38622466,0,0x0,8
tick,0x7ffdf681f424,38624459,0,0x0,8
tick,0x7ffdf681f424,38626362,0,0x0,8
tick,0x7ffdf681f424,38628324,0,0x0,8
tick,0x7ffdf681f424,38630315,0,0x0,8
tick,0x7ffdf681f424,38632307,0,0x0,8
tick,0x7ffdf681f424,38634301,0,0x0,8
tick,0x7ffdf681f424,38637343,0,0x0,8
tick,0x7ffdf681f424,38639932,0,0x0,8
tick,0x7ffdf681f424,38645414,0,0x0,8
tick,0x7ffdf681f424,38647615,0,0x0,8
tick,0x7ffdf681f424,38651275,0,0x0,8
tick,0x7ffdf681f424,38653257,0,0x0,8
tick,0x7ffdf681f424,38655258,0,0x0,8
tick,0x7ffdf681f424,38657317,0,0x0,8
tick,0x7ffdf681f424,38659310,0,0x0,8
tick,0x7ffdf681f424,38661281,0,0x0,8
tick,0x7ffdf681f424,38663234,0,0x0,8
tick,0x7ffdf681f424,38665235,0,0x0,8
tick,0x7ffdf681f424,38667217,0,0x0,8
tick,0x7ffdf681f424,38669206,0,0x0,8
tick,0x7ffdf681f424,38671205,0,0x0,8
tick,0x7ffdf681f424,38673198,0,0x0,8
tick,0x7ffdf681f424,38675193,0,0x0,8
tick,0x7ffdf681f424,38677188,0,0x0,8
tick,0x7ffdf681f424,38686409,0,0x0,8
tick,0x7ffdf681f424,38689390,0,0x0,8
tick,0x7ffdf681f424,38691158,0,0x0,8
tick,0x7ffdf681f424,38693377,0,0x0,8
tick,0x7ffdf681f424,38695142,0,0x0,8
tick,0x7ffdf681f424,38697140,0,0x0,8
tick,0x7ffdf681f424,38699129,0,0x0,8
tick,0x7ffdf681f424,38701123,0,0x0,8
tick,0x7ffdf681f424,38703117,0,0x0,8
tick,0x7ffdf681f424,38705109,0,0x0,8
tick,0x7ffdf681f424,38707107,0,0x0,8
tick,0x7ffdf681f424,38709100,0,0x0,8
tick,0x7ffdf681f424,38711093,0,0x0,8
tick,0x7ffdf681f424,38713095,0,0x0,8
tick,0x7ffdf681f424,38715083,0,0x0,8
tick,0x7ffdf681f424,38717079,0,0x0,8
tick,0x7ffdf681f424,38719075,0,0x0,8
tick,0x7ffdf681f424,38721072,0,0x0,8
tick,0x7ffdf681f424,38723061,0,0x0,8
tick,0x7ffdf681f424,38725065,0,0x0,8
tick,0x7ffdf681f424,38727052,0,0x0,8
tick,0x7ffdf681f424,38729053,0,0x0,8
tick,0x7ffdf681f424,38731044,0,0x0,8
tick,0x7ffdf681f424,38733148,0,0x0,8
tick,0x7ffdf681f424,38737115,0,0x0,8
tick,0x7ffdf681f424,38760243,0,0x0,8
tick,0x7ffdf681f424,38761975,0,0x0,8
tick,0x7ffdf681f424,38764155,0,0x0,8
tick,0x7ffdf681f424,38768350,0,0x0,8
tick,0x7ffdf681f424,38769995,0,0x0,8
tick,0x7ffdf681f424,38771939,0,0x0,8
tick,0x7ffdf681f424,38773930,0,0x0,8
tick,0x7ffdf681f424,38775928,0,0x0,8
tick,0x7ffdf681f424,38777922,0,0x0,8
tick,0x7ffdf681f424,38779916,0,0x0,8
tick,0x7ffdf681f424,38781910,0,0x0,8
tick,0x7ffdf681f424,38783901,0,0x0,8
tick,0x7ffdf681f424,38785898,0,0x0,8
tick,0x7ffdf681f424,38787892,0,0x0,8
tick,0x7ffdf681f424,38789884,0,0x0,8
tick,0x7ffdf681f424,38791880,0,0x0,8
tick,0x7ffdf681f424,38793876,0,0x0,8
tick,0x7ffdf681f424,38795875,0,0x0,8
tick,0x7ffdf681f424,38797863,0,0x0,8
tick,0x7ffdf681f424,38799858,0,0x0,8
tick,0x7ffdf681f424,38801851,0,0x0,8
tick,0x7ffdf681f424,38803861,0,0x0,8
tick,0x7ffdf681f424,38815850,0,0x0,8
tick,0x7ffdf681f424,38816826,0,0x0,8
tick,0x7ffdf681f424,38818924,0,0x0,8
tick,0x7ffdf681f424,38820843,0,0x0,8
tick,0x7ffdf681f424,38822866,0,0x0,8
tick,0x7ffdf681f424,38824812,0,0x0,8
tick,0x7ffdf681f424,38826789,0,0x0,8
tick,0x7ffdf681f424,38828806,0,0x0,8
tick,0x7ffdf681f424,38830776,0,0x0,8
tick,0x7ffdf681f424,38832774,0,0x0,8
tick,0x7ffdf681f424,38834767,0,0x0,8
tick,0x7ffdf681f424,38836763,0,0x0,8
tick,0x7ffdf681f424,38838771,0,0x0,8
tick,0x7ffdf681f424,38840758,0,0x0,8
tick,0x7ffdf681f424,38842741,0,0x0,8
tick,0x7ffdf681f424,38844756,0,0x0,8
tick,0x7ffdf681f424,38846746,0,0x0,8
tick,0x7ffdf681f424,38848742,0,0x0,8
tick,0x7ffdf681f424,38850722,0,0x0,8
tick,0x7ffdf681f424,38852715,0,0x0,8
tick,0x7ffdf681f424,38854748,0,0x0,8
tick,0x7ffdf681f424,38856708,0,0x0,8
tick,0x7ffdf681f424,38859431,0,0x0,8
tick,0x7ffdf681f424,38869250,0,0x0,8
tick,0x7ffdf681f424,38870677,0,0x0,8
tick,0x7ffdf681f424,38872718,0,0x0,8
tick,0x7ffdf681f424,38874667,0,0x0,8
tick,0x7ffdf681f424,38876658,0,0x0,8
tick,0x7ffdf681f424,38878652,0,0x0,8
tick,0x7ffdf681f424,38880644,0,0x0,8
tick,0x7ffdf681f424,38882642,0,0x0,8
tick,0x7ffdf681f424,38884631,0,0x0,8
tick,0x7ffdf681f424,38886790,0,0x0,8
tick,0x7ffdf681f424,38899023,0,0x0,8
tick,0x7ffdf681f424,38900597,0,0x0,8
tick,0x7ffdf681f424,38902588,0,0x0,8
tick,0x7ffdf681f424,38904599,0,0x0,8
tick,0x7ffdf681f424,38907193,0,0x0,8
tick,0x7ffdf681f424,38908638,0,0x0,8
tick,0x7ffdf681f424,38910632,0,0x0,8
tick,0x7ffdf681f424,38912632,0,0x0,8
tick,0x7ffdf681f424,38914560,0,0x0,8
tick,0x7ffdf681f424,38916544,0,0x0,8
tick,0x7ffdf681f424,38918538,0,0x0,8
tick,0x7ffdf681f424,38920537,0,0x0,8
tick,0x7ffdf681f424,38934239,0,0x0,8
tick,0x7ffdf681f424,38935506,0,0x0,8
tick,0x7ffdf681f424,38937534,0,0x0,8
tick,0x7ffdf681f424,38939526,0,0x0,8
tick,0x7ffdf681f424,38941757,0,0x0,8
tick,0x7ffdf681f424,38943668,0,0x0,8
tick,0x7ffdf681f424,38945473,0,0x0,8
tick,0x7ffdf681f424,38947466,0,0x0,8
tick,0x7ffdf681f424,38949462,0,0x0,8
tick,0x7ffdf681f424,38951454,0,0x0,8
tick,0x7ffdf681f424,38953453,0,0x0,8
tick,0x7ffdf681f424,38955453,0,0x0,8
tick,0x7ffdf681f424,38957437,0,0x0,8
tick,0x7ffdf681f424,38959432,0,0x0,8
tick,0x7ffdf681f424,38961432,0,0x0,8
tick,0x7ffdf681f424,38963421,0,0x0,8
tick,0x7ffdf681f424,38965415,0,0x0,8
tick,0x7ffdf681f424,38967408,0,0x0,8
tick,0x7ffdf681f424,38969405,0,0x0,8
tick,0x7ffdf681f424,38971401,0,0x0,8
tick,0x7ffdf681f424,38973396,0,0x0,8
tick,0x7ffdf681f424,38975396,0,0x0,8
tick,0x7ffdf681f424,38977416,0,0x0,8
tick,0x7ffdf681f424,38979391,0,0x0,8
tick,0x7ffdf681f424,39001550,0,0x0,8
tick,0x7ffdf681f424,39003395,0,0x0,8
tick,0x7ffdf681f424,39005329,0,0x0,8
tick,0x7ffdf681f424,39007354,0,0x0,8
tick,0x7ffdf681f424,39010756,0,0x0,8
tick,0x7ffdf681f424,39012313,0,0x0,8
tick,0x7ffdf681f424,39014334,0,0x0,8
tick,0x7ffdf681f424,39016302,0,0x0,8
tick,0x7ffdf681f424,39018277,0,0x0,8
tick,0x7ffdf681f424,39020273,0,0x0,8
tick,0x7ffdf681f424,39022272,0,0x0,8
tick,0x7ffdf681f424,39024499,0,0x0,8
tick,0x7ffdf681f424,39026260,0,0x0,8
tick,0x7ffdf681f424,39028254,0,0x0,8
tick,0x7ffdf681f424,39030247,0,0x0,8
tick,0x7ffdf681f424,39032247,0,0x0,8
tick,0x7ffdf681f424,39034233,0,0x0,8
tick,0x7ffdf681f424,39036232,0,0x0,8
tick,0x7ffdf681f424,39038222,0,0x0,8
tick,0x7ffdf681f424,39040218,0,0x0,8
tick,0x7ffdf681f424,39042210,0,0x0,8
tick,0x7ffdf681f424,39044207,0,0x0,8
tick,0x7ffdf681f424,39046199,0,0x0,8
tick,0x7ffdf681f424,39050137,0,0x0,8
tick,0x7ffdf681f424,39060015,0,0x0,8
tick,0x7ffdf681f424,39061168,0,0x0,8
tick,0x7ffdf681f424,39063169,0,0x0,8
tick,0x7ffdf681f424,39065214,0,0x0,8
tick,0x7ffdf681f424,39067161,0,0x0,8
tick,0x7ffdf681f424,39069147,0,0x0,8
tick,0x7ffdf681f424,39071153,0,0x0,8
tick,0x7ffdf681f424,39073135,0,0x0,8
tick,0x7ffdf681f424,39075128,0,0x0,8
tick,0x7ffdf681f424,39077115,0,0x0,8
tick,0x7ffdf681f424,39079115,0,0x0,8
tick,0x7ffdf681f424,39081109,0,0x0,8
tick,0x7ffdf681f424,39083100,0,0x0,8
tick,0x7ffdf681f424,39085094,0,0x0,8
tick,0x7ffdf681f424,39087091,0,0x0,8
tick,0x7ffdf681f424,39089082,0,0x0,8
tick,0x7ffdf681f424,39091082,0,0x0,8
tick,0x7ffdf681f424,39093078,0,0x0,8
tick,0x7ffdf681f424,39095071,0,0x0,8
tick,0x7ffdf681f424,39097067,0,0x0,8
tick,0x7ffdf681f424,39099059,0,0x0,8
tick,0x7ffdf681f424,39101062,0,0x0,8
tick,0x7ffdf681f424,39103088,0,0x0,8
tick,0x7ffdf681f424,39105046,0,0x0,8
tick,0x7ffdf681f424,39107035,0,0x0,8
tick,0x7ffdf681f424,39109309,0,0x0,8
tick,0x7ffdf681f424,39111111,0,0x0,8
tick,0x7ffdf681f424,39113051,0,0x0,8
tick,0x7ffdf681f424,39115502,0,0x0,8
tick,0x7ffdf681f424,39117267,0,0x0,8
tick,0x7ffdf681f424,39119201,0,0x0,8
tick,0x7ffdf681f424,39121196,0,0x0,8
tick,0x7ffdf681f424,39122998,0,0x0,8
tick,0x7ffdf681f424,39125018,0,0x0,8
tick,0x7ffdf681f424,39127005,0,0x0,8
tick,0x7ffdf681f424,39129002,0,0x0,8
tick,0x7ffdf681f424,39130977,0,0x0,8
tick,0x7ffdf681f424,39133107,0,0x0,8
tick,0x7ffdf681f424,39135151,0,0x0,8
tick,0x7ffdf681f424,39136971,0,0x0,8
tick,0x7ffdf681f424,39138968,0,0x0,8
tick,0x7ffdf681f424,39140999,0,0x0,8
tick,0x7ffdf681f424,39148119,0,0x0,8
tick,0x7ffdf681f424,39149927,0,0x0,8
tick,0x7ffdf681f424,39151920,0,0x0,8
tick,0x7ffdf681f424,39153917,0,0x0,8
tick,0x7ffdf681f424,39155946,0,0x0,8
tick,0x7ffdf681f424,39157907,0,0x0,8
tick,0x7ffdf681f424,39159904,0,0x0,8
tick,0x7ffdf681f424,39161893,0,0x0,8
tick,0x7ffdf681f424,39163897,0,0x0,8
tick,0x7ffdf681f424,39165882,0,0x0,8
tick,0x7ffdf681f424,39167873,0,0x0,8
tick,0x7ffdf681f424,39169877,0,0x0,8
tick,0x7ffdf681f424,39171865,0,0x0,8
tick,0x7ffdf681f424,39173905,0,0x0,8
tick,0x7ffdf681f424,39175851,0,0x0,8
tick,0x7ffdf681f424,39192457,0,0x0,8
tick,0x7ffdf681f424,39192502,0,0x0,8
tick,0x7ffdf681f424,39193809,0,0x0,8
tick,0x7ffdf681f424,39195932,0,0x0,8
tick,0x7ffdf681f424,39197817,0,0x0,8
tick,0x7ffdf681f424,39199794,0,0x0,8
tick,0x7ffdf681f424,39201786,0,0x0,8
tick,0x7ffdf681f424,39203782,0,0x0,8
tick,0x7ffdf681f424,39205770,0,0x0,8
tick,0x7ffdf681f424,39207770,0,0x0,8
tick,0x7ffdf681f424,39209769,0,0x0,8
tick,0x7ffdf681f424,39211763,0,0x0,8
tick,0x7ffdf681f424,39213769,0,0x0,8
tick,0x7ffdf681f424,39215756,0,0x0,8
tick,0x7ffdf681f424,39217753,0,0x0,8
tick,0x7ffdf681f424,39219763,0,0x0,8
tick,0x7ffdf681f424,39221746,0,0x0,8
tick,0x7ffdf681f424,39223733,0,0x0,8
tick,0x7ffdf681f424,39225750,0,0x0,8
tick,0x7ffdf681f424,39227718,0,0x0,8
tick,0x7ffdf681f424,39229718,0,0x0,8
tick,0x7ffdf681f424,39231707,0,0x0,8
tick,0x7ffdf681f424,39233700,0,0x0,8
tick,0x7ffdf681f424,39235696,0,0x0,8
tick,0x7ffdf681f424,39246977,0,0x0,8
tick,0x7ffdf681f424,39248666,0,0x0,8
tick,0x7ffdf681f424,39250690,0,0x0,8
tick,0x7ffdf681f424,39252666,0,0x0,8
tick,0x7ffdf681f424,39254650,0,0x0,8
tick,0x7ffdf681f424,39256649,0,0x0,8
tick,0x7ffdf681f424,39258642,0,0x0,8
tick,0x7ffdf681f424,39260633,0,0x0,8
tick,0x7ffdf681f424,39262655,0,0x0,8
tick,0x7ffdf681f424,39264622,0,0x0,8
tick,0x7ffdf681f424,39266615,0,0x0,8
tick,0x7ffdf681f424,39268758,0,0x0,8
tick,0x7ffdf681f424,39278376,0,0x0,8
tick,0x7ffdf681f424,39279609,0,0x0,8
tick,0x7ffdf681f424,39281583,0,0x0,8
tick,0x7ffdf681f424,39283576,0,0x0,8
tick,0x7ffdf681f424,39285634,0,0x0,8
tick,0x7ffdf681f424,39287982,0,0x0,8
tick,0x7ffdf681f424,39289974,0,0x0,8
tick,0x7ffdf681f424,39291563,0,0x0,8
tick,0x7ffdf681f424,39293541,0,0x0,8
tick,0x7ffdf681f424,39295559,0,0x0,8
tick,0x7ffdf681f424,39297531,0,0x0,8
tick,0x7ffdf681f424,39299528,0,0x0,8
tick,0x7ffdf681f424,39301519,0,0x0,8
tick,0x7ffdf681f424,39303519,0,0x0,8
tick,0x7ffdf681f424,39305513,0,0x0,8
tick,0x7ffdf681f424,39307511,0,0x0,8
tick,0x7ffdf681f424,39309495,0,0x0,8
tick,0x7ffdf681f424,39311490,0,0x0,8
tick,0x7ffdf681f424,39315377,0,0x0,8
tick,0x7ffdf681f424,39316814,0,0x0,8
tick,0x7ffdf681f424,39318481,0,0x0,8
tick,0x7ffdf681f424,39320511,0,0x0,8
tick,0x7ffdf681f424,39322477,0,0x0,8
tick,0x7ffdf681f424,39324501,0,0x0,8
tick,0x7ffdf681f424,39326461,0,0x0,8
tick,0x7ffdf681f424,39328455,0,0x0,8
tick,0x7ffdf681f424,39330601,0,0x0,8
tick,0x7ffdf681f424,39332488,0,0x0,8
tick,0x7ffdf681f424,39334452,0,0x0,8
tick,0x7ffdf681f424,39336460,0,0x0,8
tick,0x7ffdf681f424,39338421,0,0x0,8
tick,0x7ffdf681f424,39340412,0,0x0,8
tick,0x7ffdf681f424,39342408,0,0x0,8
tick,0x7ffdf681f424,39344398,0,0x0,8
tick,0x7ffdf681f424,39346396,0,0x0,8
tick,0x7ffdf681f424,39348403,0,0x0,8
tick,0x7ffdf681f424,39350391,0,0x0,8
tick,0x7ffdf681f424,39352382,0,0x0,8
tick,0x7ffdf681f424,39354377,0,0x0,8
tick,0x7ffdf681f424,39356369,0,0x0,8
tick,0x7ffdf681f424,39358374,0,0x0,8
tick,0x7ffdf681f424,39360366,0,0x0,8
tick,0x7ffdf681f424,39362363,0,0x0,8
tick,0x7ffdf681f424,39364350,0,0x0,8
tick,0x7ffdf681f424,39379157,0,0x0,8
tick,0x7ffdf681f424,39380317,0,0x0,8
tick,0x7ffdf681f424,39393674,0,0x0,8
tick,0x7ffdf681f424,39395303,0,0x0,8
tick,0x7ffdf681f424,39397277,0,0x0,8
tick,0x7ffdf681f424,39400087,0,0x0,8
tick,0x7ffdf681f424,39401263,0,0x0,8
tick,0x7ffdf681f424,39403257,0,0x0,8
tick,0x7ffdf681f424,39405251,0,0x0,8
tick,0x7ffdf681f424,39407230,0,0x0,8
tick,0x7ffdf681f424,39409221,0,0x0,8
tick,0x7ffdf681f424,39411219,0,0x0,8
tick,0x7ffdf681f424,39413225,0,0x0,8
tick,0x7ffdf681f424,39415282,0,0x0,8
tick,0x7ffdf681f424,39417299,0,0x0,8
tick,0x7ffdf681f424,39419218,0,0x0,8
tick,0x7ffdf681f424,39421207,0,0x0,8
tick,0x7ffdf681f424,39423196,0,0x0,8
tick,0x7ffdf681f424,39425187,0,0x0,8
tick,0x7ffdf681f424,39427183,0,0x0,8
tick,0x7ffdf681f424,39429180,0,0x0,8
tick,0x7ffdf681f424,39431171,0,0x0,8
tick,0x7ffdf681f424,39433169,0,0x0,8
tick,0x7ffdf681f424,39435170,0,0x0,8
tick,0x7ffdf681f424,39437165,0,0x0,8
tick,0x7ffdf681f424,39439148,0,0x0,8
tick,0x7ffdf681f424,39441147,0,0x0,8
tick,0x7ffdf681f424,39443138,0,0x0,8
tick,0x7ffdf681f424,39445140,0,0x0,8
tick,0x7ffdf681f424,39447131,0,0x0,8
tick,0x7ffdf681f424,39449123,0,0x0,8
tick,0x7ffdf681f424,39451120,0,0x0,8
tick,0x7ffdf681f424,39462940,0,0x0,8
tick,0x7ffdf681f424,39464086,0,0x0,8
tick,0x7ffdf681f424,39466083,0,0x0,8
tick,0x7ffdf681f424,39468139,0,0x0,8
tick,0x7ffdf681f424,39470097,0,0x0,8
tick,0x7ffdf681f424,39472068,0,0x0,8
tick,0x7ffdf681f424,39474063,0,0x0,8
tick,0x7ffdf681f424,39477062,0,0x0,8
tick,0x7ffdf681f424,39488682,0,0x0,8
tick,0x7ffdf681f424,39490016,0,0x0,8
tick,0x7ffdf681f424,39492016,0,0x0,8
tick,0x7ffdf681f424,39494041,0,0x0,8
tick,0x7ffdf681f424,39496006,0,0x0,8
tick,0x7ffdf681f424,39498003,0,0x0,8
tick,0x7ffdf681f424,39499989,0,0x0,8
tick,0x7ffdf681f424,39501986,0,0x0,8
tick,0x7ffdf681f424,39503983,0,0x0,8
tick,0x7ffdf681f424,39505976,0,0x0,8
tick,0x7ffdf681f424,39507964,0,0x0,8
tick,0x7ffdf681f424,39509964,0,0x0,8
tick,0x7ffdf681f424,39511960,0,0x0,8
tick,0x7ffdf681f424,39513953,0,0x0,8
tick,0x7ffdf681f424,39515944,0,0x0,8
tick,0x7ffdf681f424,39517950,0,0x0,8
tick,0x7ffdf681f424,39522986,0,0x0,8
tick,0x7ffdf681f424,39524982,0,0x0,8
tick,0x7ffdf681f424,39526947,0,0x0,8
tick,0x7ffdf681f424,39528921,0,0x0,8
tick,0x7ffdf681f424,39530913,0,0x0,8
tick,0x7ffdf681f424,39532900,0,0x0,8
tick,0x7ffdf681f424,39534896,0,0x0,8
tick,0x7ffdf681f424,39536896,0,0x0,8
tick,0x7ffdf681f424,39538967,0,0x0,8
tick,0x7ffdf681f424,39540934,0,0x0,8
tick,0x7ffdf681f424,39542875,0,0x0,8
tick,0x7ffdf681f424,39544876,0,0x0,8
tick,0x7ffdf681f424,39546863,0,0x0,8
tick,0x7ffdf681f424,39548858,0,0x0,8
tick,0x7ffdf681f424,39550850,0,0x0,8
tick,0x7ffdf681f424,39552845,0,0x0,8
tick,0x7ffdf681f424,39554841,0,0x0,8
tick,0x7ffdf681f424,39556848,0,0x0,8
tick,0x7ffdf681f424,39558828,0,0x0,8
tick,0x7ffdf681f424,39560826,0,0x0,8
tick,0x7ffdf681f424,39562823,0,0x0,8
tick,0x7ffdf681f424,39564815,0,0x0,8
tick,0x7ffdf681f424,39566822,0,0x0,8
tick,0x7ffdf681f424,39568812,0,0x0,8
tick,0x7ffdf681f424,39570805,0,0x0,8
tick,0x7ffdf681f424,39584475,0,0x0,8
tick,0x7ffdf681f424,39585768,0,0x0,8
tick,0x7ffdf681f424,39587761,0,0x0,8
tick,0x7ffdf681f424,39590094,0,0x0,8
tick,0x7ffdf681f424,39591748,0,0x0,8
tick,0x7ffdf681f424,39593743,0,0x0,8
tick,0x7ffdf681f424,39595745,0,0x0,8
tick,0x7ffdf681f424,39597733,0,0x0,8
tick,0x7ffdf681f424,39599720,0,0x0,8
tick,0x7ffdf681f424,39601718,0,0x0,8
tick,0x7ffdf681f424,39603716,0,0x0,8
tick,0x7ffdf681f424,39605714,0,0x0,8
tick,0x7ffdf681f424,39607701,0,0x0,8
tick,0x7ffdf681f424,39609688,0,0x0,8
tick,0x7ffdf681f424,39617075,0,0x0,8
tick,0x7ffdf681f424,39622941,0,0x0,8
tick,0x7ffdf681f424,39624659,0,0x0,8
tick,0x7ffdf681f424,39627083,0,0x0,8
tick,0x7ffdf681f424,39628744,0,0x0,8
tick,0x7ffdf681f424,39630681,0,0x0,8
tick,0x7ffdf681f424,39632635,0,0x0,8
tick,0x7ffdf681f424,39634640,0,0x0,8
tick,0x7ffdf681f424,39636656,0,0x0,8
tick,0x7ffdf681f424,39638637,0,0x0,8
tick,0x7ffdf681f424,39640620,0,0x0,8
tick,0x7ffdf681f424,39642610,0,0x0,8
tick,0x7ffdf681f424,39644606,0,0x0,8
tick,0x7ffdf681f424,39646648,0,0x0,8
tick,0x7ffdf681f424,39648595,0,0x0,8
tick,0x7ffdf681f424,39650588,0,0x0,8
tick,0x7ffdf681f424,39652980,0,0x0,8
tick,0x7ffdf681f424,39657434,0,0x0,8
tick,0x7ffdf681f424,39664987,0,0x0,8
tick,0x7ffdf681f424,39667779,0,0x0,8
tick,0x7ffdf681f424,39669543,0,0x0,8
tick,0x7ffdf681f424,39671539,0,0x0,8
tick,0x7ffdf681f424,39673589,0,0x0,8
tick,0x7ffdf681f424,39675540,0,0x0,8
tick,0x7ffdf681f424,39677521,0,0x0,8
tick,0x7ffdf681f424,39679541,0,0x0,8
tick,0x7ffdf681f424,39681507,0,0x0,8
tick,0x7ffdf681f424,39683498,0,0x0,8
tick,0x7ffdf681f424,39685492,0,0x0,8
tick,0x7ffdf681f424,39687493,0,0x0,8
tick,0x7ffdf681f424,39689500,0,0x0,8
tick,0x7ffdf681f424,39691485,0,0x0,8
tick,0x7ffdf681f424,39693471,0,0x0,8
tick,0x7ffdf681f424,39695471,0,0x0,8
tick,0x7ffdf681f424,39697468,0,0x0,8
tick,0x7ffdf681f424,39699453,0,0x0,8
tick,0x7ffdf681f424,39701454,0,0x0,8
tick,0x7ffdf681f424,39708355,0,0x0,8
tick,0x7ffdf681f424,39711761,0,0x0,8
tick,0x7ffdf681f424,39714029,0,0x0,8
tick,0x7ffdf681f424,39715415,0,0x0,8
tick,0x7ffdf681f424,39717440,0,0x0,8
tick,0x7ffdf681f424,39719418,0,0x0,8
tick,0x7ffdf681f424,39721409,0,0x0,8
tick,0x7ffdf681f424,39723396,0,0x0,8
tick,0x7ffdf681f424,39725386,0,0x0,8
tick,0x7ffdf681f424,39727379,0,0x0,8
tick,0x7ffdf681f424,39729380,0,0x0,8
tick,0x7ffdf681f424,39731368,0,0x0,8
tick,0x7ffdf681f424,39733367,0,0x0,8
tick,0x7ffdf681f424,39735364,0,0x0,8
tick,0x7ffdf681f424,39737356,0,0x0,8
tick,0x7ffdf681f424,39739350,0,0x0,8
tick,0x7ffdf681f424,39741346,0,0x0,8
tick,0x7ffdf681f424,39744431,0,0x0,8
tick,0x7ffdf681f424,39755037,0,0x0,8
tick,0x7ffdf681f424,39756310,0,0x0,8
tick,0x7ffdf681f424,39758301,0,0x0,8
tick,0x7ffdf681f424,39760300,0,0x0,8
tick,0x7ffdf681f424,39762326,0,0x0,8
tick,0x7ffdf681f424,39764349,0,0x0,8
tick,0x7ffdf681f424,39766287,0,0x0,8
tick,0x7ffdf681f424,39768270,0,0x0,8
tick,0x7ffdf681f424,39770271,0,0x0,8
tick,0x7ffdf681f424,39772261,0,0x0,8
tick,0x7ffdf681f424,39774261,0,0x0,8
tick,0x7ffdf681f424,39785939,0,0x0,8
tick,0x7ffdf681f424,39785975,0,0x0,8
tick,0x7ffdf681f424,39787223,0,0x0,8
tick,0x7ffdf681f424,39789232,0,0x0,8
tick,0x7ffdf681f424,39791218,0,0x0,8
tick,0x7ffdf681f424,39793206,0,0x0,8
tick,0x7ffdf681f424,39795208,0,0x0,8
tick,0x7ffdf681f424,39797195,0,0x0,8
tick,0x7ffdf681f424,39799190,0,0x0,8
tick,0x7ffdf681f424,39801180,0,0x0,8
tick,0x7ffdf681f424,39803190,0,0x0,8
tick,0x7ffdf681f424,39805169,0,0x0,8
tick,0x7ffdf681f424,39807168,0,0x0,8
tick,0x7ffdf681f424,39809160,0,0x0,8
tick,0x7ffdf681f424,39811154,0,0x0,8
tick,0x7ffdf681f424,39813151,0,0x0,8
tick,0x7ffdf681f424,39815143,0,0x0,8
tick,0x7ffdf681f424,39817138,0,0x0,8
tick,0x7ffdf681f424,39819134,0,0x0,8
tick,0x7ffdf681f424,39821131,0,0x0,8
tick,0x7ffdf681f424,39823123,0,0x0,8
tick,0x7ffdf681f424,39825123,0,0x0,8
tick,0x7ffdf681f424,39827133,0,0x0,8
tick,0x7ffdf681f424,39840244,0,0x0,8
tick,0x7ffdf681f424,39842076,0,0x0,8
tick,0x7ffdf681f424,39844069,0,0x0,8
tick,0x7ffdf681f424,39846134,0,0x0,8
tick,0x7ffdf681f424,39848111,0,0x0,8
tick,0x7ffdf681f424,39850174,0,0x0,8
tick,0x7ffdf681f424,39856341,0,0x0,8
tick,0x7ffdf681f424,39867031,0,0x0,8
tick,0x7ffdf681f424,39869009,0,0x0,8
tick,0x7ffdf681f424,39870993,0,0x0,8
tick,0x7ffdf681f424,39872990,0,0x0,8
tick,0x7ffdf681f424,39874983,0,0x0,8
tick,0x7ffdf681f424,39877062,0,0x0,8
tick,0x7ffdf681f424,39878978,0,0x0,8
tick,0x7ffdf681f424,39880970,0,0x0,8
tick,0x7ffdf681f424,39882976,0,0x0,8
tick,0x7ffdf681f424,39884959,0,0x0,8
tick,0x7ffdf681f424,39886961,0,0x0,8
tick,0x7ffdf681f424,39888952,0,0x0,8
tick,0x7ffdf681f424,39890942,0,0x0,8
tick,0x7ffdf681f424,39892941,0,0x0,8
tick,0x7ffdf681f424,39894939,0,0x0,8
tick,0x7ffdf681f424,39896932,0,0x0,8
tick,0x7ffdf681f424,39898929,0,0x0,8
tick,0x7ffdf681f424,39900925,0,0x0,8
tick,0x7ffdf681f424,39913892,0,0x0,8
tick,0x7ffdf681f424,39915888,0,0x0,8
tick,0x7ffdf681f424,39917937,0,0x0,8
tick,0x7ffdf681f424,39920052,0,0x0,8
tick,0x7ffdf681f424,39921893,0,0x0,8
tick,0x7ffdf681f424,39923855,0,0x0,8
tick,0x7ffdf681f424,39925848,0,0x0,8
tick,0x7ffdf681f424,39927842,0,0x0,8
tick,0x7ffdf681f424,39929860,0,0x0,8
tick,0x7ffdf681f424,39931842,0,0x0,8
tick,0x7ffdf681f424,39935391,0,0x0,8
tick,0x7ffdf681f424,39947173,0,0x0,8
tick,0x7ffdf681f424,39948795,0,0x0,8
tick,0x7ffdf681f424,39950789,0,0x0,8
tick,0x7ffdf681f424,39952932,0,0x0,8
tick,0x7ffdf681f424,39954808,0,0x0,8
tick,0x7ffdf681f424,39956772,0,0x0,8
tick,0x7ffdf681f424,39958761,0,0x0,8
tick,0x7ffdf681f424,39960765,0,0x0,8
tick,0x7ffdf681f424,39962758,0,0x0,8
tick,0x7ffdf681f424,39964750,0,0x0,8
tick,0x7ffdf681f424,39966742,0,0x0,8
tick,0x7ffdf681f424,39968754,0,0x0,8
tick,0x7ffdf681f424,39970735,0,0x0,8
tick,0x7ffdf681f424,39972726,0,0x0,8
tick,0x7ffdf681f424,39974732,0,0x0,8
tick,0x7ffdf681f424,39987815,0,0x0,8
tick,0x7ffdf681f424,39989690,0,0x0,8
tick,0x7ffdf681f424,39991768,0,0x0,8
tick,0x7ffdf681f424,39993672,0,0x0,8
tick,0x7ffdf681f424,39995724,0,0x0,8
tick,0x7ffdf681f424,39997662,0,0x0,8
tick,0x7ffdf681f424,39999661,0,0x0,8
tick,0x7ffdf681f424,40001647,0,0x0,8
tick,0x7ffdf681f424,40003646,0,0x0,8
tick,0x7ffdf681f424,40005641,0,0x0,8
tick,0x7ffdf681f424,40007631,0,0x0,8
tick,0x7ffdf681f424,40009630,0,0x0,8
tick,0x7ffdf681f424,40011634,0,0x0,8
tick,0x7ffdf681f424,40013616,0,0x0,8
tick,0x7ffdf681f424,40015604,0,0x0,8
tick,0x7ffdf681f424,40017598,0,0x0,8
tick,0x7ffdf681f424,40019592,0,0x0,8
tick,0x7ffdf681f424,40021596,0,0x0,8
tick,0x7ffdf681f424,40023587,0,0x0,8
tick,0x7ffdf681f424,40025579,0,0x0,8
tick,0x7ffdf681f424,40027572,0,0x0,8
tick,0x7ffdf681f424,40029572,0,0x0,8
tick,0x7ffdf681f424,40031768,0,0x0,8
tick,0x7ffdf681f424,40043512,0,0x0,8
tick,0x7ffdf681f424,40044532,0,0x0,8
tick,0x7ffdf681f424,40046533,0,0x0,8
tick,0x7ffdf681f424,40048571,0,0x0,8
tick,0x7ffdf681f424,40050562,0,0x0,8
tick,0x7ffdf681f424,40052550,0,0x0,8
tick,0x7ffdf681f424,40054900,0,0x0,8
tick,0x7ffdf681f424,40057514,0,0x0,8
tick,0x7ffdf681f424,40059528,0,0x0,8
tick,0x7ffdf681f424,40061493,0,0x0,8
tick,0x7ffdf681f424,40063518,0,0x0,8
tick,0x7ffdf681f424,40065829,0,0x0,8
tick,0x7ffdf681f424,40067478,0,0x0,8
tick,0x7ffdf681f424,40069471,0,0x0,8
tick,0x7ffdf681f424,40071797,0,0x0,8
tick,0x7ffdf681f424,40073470,0,0x0,8
tick,0x7ffdf681f424,40075467,0,0x0,8
tick,0x7ffdf681f424,40077450,0,0x0,8
tick,0x7ffdf681f424,40079452,0,0x0,8
tick,0x7ffdf681f424,40081440,0,0x0,8
tick,0x7ffdf681f424,40083432,0,0x0,8
tick,0x7ffdf681f424,40085433,0,0x0,8
tick,0x7ffdf681f424,40087438,0,0x0,8
tick,0x7ffdf681f424,40089414,0,0x0,8
tick,0x7ffdf681f424,40091408,0,0x0,8
tick,0x7ffdf681f424,40093399,0,0x0,8
tick,0x7ffdf681f424,40095398,0,0x0,8
tick,0x7ffdf681f424,40097390,0,0x0,8
tick,0x7ffdf681f424,40099383,0,0x0,8
tick,0x7ffdf681f424,40101374,0,0x0,8
tick,0x7ffdf681f424,40103373,0,0x0,8
tick,0x7ffdf681f424,40105364,0,0x0,8
tick,0x7ffdf681f424,40107360,0,0x0,8
tick,0x7ffdf681f424,40109358,0,0x0,8
tick,0x7ffdf681f424,40111350,0,0x0,8
tick,0x7ffdf681f424,40113348,0,0x0,8
tick,0x7ffdf681f424,40115342,0,0x0,8
tick,0x7ffdf681f424,40117354,0,0x0,8
tick,0x7ffdf681f424,40119439,0,0x0,8
tick,0x7ffdf681f424,40130243,0,0x0,8
tick,0x7ffdf681f424,40131308,0,0x0,8
tick,0x7ffdf681f424,40133357,0,0x0,8
tick,0x7ffdf681f424,40135295,0,0x0,8
tick,0x7ffdf681f424,40137292,0,0x0,8
tick,0x7ffdf681f424,40139285,0,0x0,8
tick,0x7ffdf681f424,40141281,0,0x0,8
tick,0x7ffdf681f424,40143271,0,0x0,8
tick,0x7ffdf681f424,40145430,0,0x0,8
tick,0x7ffdf681f424,40147513,0,0x0,8
tick,0x7ffdf681f424,40149291,0,0x0,8
tick,0x7ffdf681f424,40151259,0,0x0,8
tick,0x7ffdf681f424,40153740,0,0x0,8
tick,0x7ffdf681f424,40155246,0,0x0,8
tick,0x7ffdf681f424,40157260,0,0x0,8
tick,0x7ffdf681f424,40159253,0,0x0,8
tick,0x7ffdf681f424,40161270,0,0x0,8
tick,0x7ffdf681f424,40163244,0,0x0,8
tick,0x7ffdf681f424,40165213,0,0x0,8
tick,0x7ffdf681f424,40167205,0,0x0,8
tick,0x7ffdf681f424,40169205,0,0x0,8
tick,0x7ffdf681f424,40171199,0,0x0,8
tick,0x7ffdf681f424,40184529,0,0x0,8
tick,0x7ffdf681f424,40186163,0,0x0,8
tick,0x7ffdf681f424,40188162,0,0x0,8
tick,0x7ffdf681f424,40190155,0,0x0,8
tick,0x7ffdf681f424,40192164,0,0x0,8
tick,0x7ffdf681f424,40194151,0,0x0,8
tick,0x7ffdf681f424,40196392,0,0x0,8
tick,0x7ffdf681f424,40198208,0,0x0,8
tick,0x7ffdf681f424,40200121,0,0x0,8
tick,0x7ffdf681f424,40202118,0,0x0,8
tick,0x7ffdf681f424,40204115,0,0x0,8
tick,0x7ffdf681f424,40206100,0,0x0,8
tick,0x7ffdf681f424,40208088,0,0x0,8
tick,0x7ffdf681f424,40210084,0,0x0,8
tick,0x7ffdf681f424,40212092,0,0x0,8
tick,0x7ffdf681f424,40214080,0,0x0,8
tick,0x7ffdf681f424,40216077,0,0x0,8
tick,0x7ffdf681f424,40218090,0,0x0,8
tick,0x7ffdf681f424,40220162,0,0x0,8
tick,0x7ffdf681f424,40222071,0,0x0,8
tick,0x7ffdf681f424,40224054,0,0x0,8
tick,0x7ffdf681f424,40226049,0,0x0,8
tick,0x7ffdf681f424,40228044,0,0x0,8
tick,0x7ffdf681f424,40230047,0,0x0,8
tick,0x7ffdf681f424,40232037,0,0x0,8
tick,0x7ffdf681f424,40234027,0,0x0,8
tick,0x7ffdf681f424,40236017,0,0x0,8
tick,0x7ffdf681f424,40238024,0,0x0,8
tick,0x7ffdf681f424,40242524,0,0x0,8
tick,0x7ffdf681f424,40252575,0,0x0,8
tick,0x7ffdf681f424,40252616,0,0x0,8
tick,0x7ffdf681f424,40253978,0,0x0,8
tick,0x7ffdf681f424,40255989,0,0x0,8
tick,0x7ffdf681f424,40258048,0,0x0,8
tick,0x7ffdf681f424,40259966,0,0x0,8
tick,0x7ffdf681f424,40261959,0,0x0,8
tick,0x7ffdf681f424,40263945,0,0x0,8
tick,0x7ffdf681f424,40265943,0,0x0,8
tick,0x7ffdf681f424,40269201,0,0x0,8
tick,0x7ffdf681f424,40271192,0,0x0,8
tick,0x7ffdf681f424,40273127,0,0x0,8
tick,0x7ffdf681f424,40274944,0,0x0,8
tick,0x7ffdf681f424,40276921,0,0x0,8
tick,0x7ffdf681f424,40279381,0,0x0,8
tick,0x7ffdf681f424,40280905,0,0x0,8
tick,0x7ffdf681f424,40282903,0,0x0,8
tick,0x7ffdf681f424,40284894,0,0x0,8
tick,0x7ffdf681f424,40286884,0,0x0,8
tick,0x7ffdf681f424,40288880,0,0x0,8
tick,0x7ffdf681f424,40290896,0,0x0,8
tick,0x7ffdf681f424,40293198,0,0x0,8
tick,0x7ffdf681f424,40294865,0,0x0,8
tick,0x7ffdf681f424,40296890,0,0x0,8
tick,0x7ffdf681f424,40298854,0,0x0,8
tick,0x7ffdf681f424,40300847,0,0x0,8
tick,0x7ffdf681f424,40302843,0,0x0,8
tick,0x7ffdf681f424,40304841,0,0x0,8
tick,0x7ffdf681f424,40306831,0,0x0,8
tick,0x7ffdf681f424,40308824,0,0x0,8
tick,0x7ffdf681f424,40323102,0,0x0,8
tick,0x7ffdf681f424,40323136,0,0x0,8
tick,0x7ffdf681f424,40324787,0,0x0,8
tick,0x7ffdf681f424,40326811,0,0x0,8
tick,0x7ffdf681f424,40329052,0,0x0,8
tick,0x7ffdf681f424,40330833,0,0x0,8
tick,0x7ffdf681f424,40332765,0,0x0,8
tick,0x7ffdf681f424,40334759,0,0x0,8
tick,0x7ffdf681f424,40336759,0,0x0,8
tick,0x7ffdf681f424,40338747,0,0x0,8
tick,0x7ffdf681f424,40340740,0,0x0,8
tick,0x7ffdf681f424,40342733,0,0x0,8
tick,0x7ffdf681f424,40344732,0,0x0,8
tick,0x7ffdf681f424,40346722,0,0x0,8
tick,0x7ffdf681f424,40348716,0,0x0,8
tick,0x7ffdf681f424,40350708,0,0x0,8
tick,0x7ffdf681f424,40352706,0,0x0,8
tick,0x7ffdf681f424,40354701,0,0x0,8
tick,0x7ffdf681f424,40356695,0,0x0,8
tick,0x7ffdf681f424,40358727,0,0x0,8
tick,0x7ffdf681f424,40360687,0,0x0,8
tick,0x7ffdf681f424,40363362,0,0x0,8
tick,0x7ffdf681f424,40364920,0,0x0,8
tick,0x7ffdf681f424,40376556,0,0x0,8
tick,0x7ffdf681f424,40377646,0,0x0,8
tick,0x7ffdf681f424,40379638,0,0x0,8
tick,0x7ffdf681f424,40381917,0,0x0,8
tick,0x7ffdf681f424,40383675,0,0x0,8
tick,0x7ffdf681f424,40385625,0,0x0,8
tick,0x7ffdf681f424,40390224,0,0x0,8
tick,0x7ffdf681f424,40390691,0,0x0,8
tick,0x7ffdf681f424,40399512,0,0x0,8
tick,0x7ffdf681f424,40400585,0,0x0,8
tick,0x7ffdf681f424,40402605,0,0x0,8
tick,0x7ffdf681f424,40404594,0,0x0,8
tick,0x7ffdf681f424,40406576,0,0x0,8
tick,0x7ffdf681f424,40408566,0,0x0,8
tick,0x7ffdf681f424,40410553,0,0x0,8
tick,0x7ffdf681f424,40412551,0,0x0,8
tick,0x7ffdf681f424,40414540,0,0x0,8
tick,0x7ffdf681f424,40416537,0,0x0,8
tick,0x7ffdf681f424,40418531,0,0x0,8
tick,0x7ffdf681f424,40420531,0,0x0,8
tick,0x7ffdf681f424,40422521,0,0x0,8
tick,0x7ffdf681f424,40424512,0,0x0,8
tick,0x7ffdf681f424,40426510,0,0x0,8
tick,0x7ffdf681f424,40428505,0,0x0,8
tick,0x7ffdf681f424,40430497,0,0x0,8
tick,0x7ffdf681f424,40432495,0,0x0,8
tick,0x7ffdf681f424,40434487,0,0x0,8
tick,0x7ffdf681f424,40436482,0,0x0,8
tick,0x7ffdf681f424,40451637,0,0x0,8
tick,0x7ffdf681f424,40451675,0,0x0,8
tick,0x7ffdf681f424,40453445,0,0x0,8
tick,0x7ffdf681f424,40455441,0,0x0,8
tick,0x7ffdf681f424,40458314,0,0x0,8
tick,0x7ffdf681f424,40459426,0,0x0,8
tick,0x7ffdf681f424,40461439,0,0x0,8
tick,0x7ffdf681f424,40463416,0,0x0,8
tick,0x7ffdf681f424,40465404,0,0x0,8
tick,0x7ffdf681f424,40467399,0,0x0,8
tick,0x7ffdf681f424,40469392,0,0x0,8
tick,0x7ffdf681f424,40483955,0,0x0,8
tick,0x7ffdf681f424,40485364,0,0x0,8
tick,0x7ffdf681f424,40487354,0,0x0,8
tick,0x7ffdf681f424,40489471,0,0x0,8
tick,0x7ffdf681f424,40491391,0,0x0,8
tick,0x7ffdf681f424,40493370,0,0x0,8
tick,0x7ffdf681f424,40495329,0,0x0,8
tick,0x7ffdf681f424,40497320,0,0x0,8
tick,0x7ffdf681f424,40499315,0,0x0,8
tick,0x7ffdf681f424,40501316,0,0x0,8
tick,0x7ffdf681f424,40503315,0,0x0,8
tick,0x7ffdf681f424,40505304,0,0x0,8
tick,0x7ffdf681f424,40507293,0,0x0,8
tick,0x7ffdf681f424,40509286,0,0x0,8
tick,0x7ffdf681f424,40511284,0,0x0,8
tick,0x7ffdf681f424,40513283,0,0x0,8
tick,0x7ffdf681f424,40515278,0,0x0,8
tick,0x7ffdf681f424,40517265,0,0x0,8
tick,0x7ffdf681f424,40519263,0,0x0,8
tick,0x7ffdf681f424,40521255,0,0x0,8
tick,0x7ffdf681f424,40523255,0,0x0,8
tick,0x7ffdf681f424,40525246,0,0x0,8
tick,0x7ffdf681f424,40527244,0,0x0,8
tick,0x7ffdf681f424,40529238,0,0x0,8
tick,0x7ffdf681f424,40531229,0,0x0,8
tick,0x7ffdf681f424,40533222,0,0x0,8
tick,0x7ffdf681f424,40535460,0,0x0,8
tick,0x7ffdf681f424,40548454,0,0x0,8
tick,0x7ffdf681f424,40550183,0,0x0,8
tick,0x7ffdf681f424,40552187,0,0x0,8
tick,0x7ffdf681f424,40554180,0,0x0,8
tick,0x7ffdf681f424,40556253,0,0x0,8
tick,0x7ffdf681f424,40558161,0,0x0,8
tick,0x7ffdf681f424,40560155,0,0x0,8
tick,0x7ffdf681f424,40562151,0,0x0,8
tick,0x7ffdf681f424,40564140,0,0x0,8
tick,0x7ffdf681f424,40566136,0,0x0,8
tick,0x7ffdf681f424,40568131,0,0x0,8
tick,0x7ffdf681f424,40570137,0,0x0,8
tick,0x7ffdf681f424,40572122,0,0x0,8
tick,0x7ffdf681f424,40574114,0,0x0,8
tick,0x7ffdf681f424,40576628,0,0x0,8
tick,0x7ffdf681f424,40590286,0,0x0,8
tick,0x7ffdf681f424,40590327,0,0x0,8
tick,0x7ffdf681f424,40592068,0,0x0,8
tick,0x7ffdf681f424,40594062,0,0x0,8
tick,0x7ffdf681f424,40596062,0,0x0,8
tick,0x7ffdf681f424,40598055,0,0x0,8
tick,0x7ffdf681f424,40600090,0,0x0,8
tick,0x7ffdf681f424,40602066,0,0x0,8
tick,0x7ffdf681f424,40604039,0,0x0,8
tick,0x7ffdf681f424,40606034,0,0x0,8
tick,0x7ffdf681f424,40608020,0,0x0,8
tick,0x7ffdf681f424,40610019,0,0x0,8
tick,0x7ffdf681f424,40612031,0,0x0,8
tick,0x7ffdf681f424,40614005,0,0x0,8
tick,0x7ffdf681f424,40615999,0,0x0,8
tick,0x7ffdf681f424,40617993,0,0x0,8
tick,0x7ffdf681f424,40620008,0,0x0,8
tick,0x7ffdf681f424,40621987,0,0x0,8
tick,0x7ffdf681f424,40623978,0,0x0,8
tick,0x7ffdf681f424,40625970,0,0x0,8
tick,0x7ffdf681f424,40640385,0,0x0,8
tick,0x7ffdf681f424,40640409,0,0x0,8
tick,0x7ffdf681f424,40641949,0,0x0,8
tick,0x7ffdf681f424,40644827,0,0x0,8
tick,0x7ffdf681f424,40645943,0,0x0,8
tick,0x7ffdf681f424,40647927,0,0x0,8
tick,0x7ffdf681f424,40649921,0,0x0,8
tick,0x7ffdf681f424,40651910,0,0x0,8
tick,0x7ffdf681f424,40653905,0,0x0,8
tick,0x7ffdf681f424,40655900,0,0x0,8
tick,0x7ffdf681f424,40657890,0,0x0,8
tick,0x7ffdf681f424,40659887,0,0x0,8
tick,0x7ffdf681f424,40661885,0,0x0,8
tick,0x7ffdf681f424,40663873,0,0x0,8
tick,0x7ffdf681f424,40665872,0,0x0,8
tick,0x7ffdf681f424,40667865,0,0x0,8
tick,0x7ffdf681f424,40669947,0,0x0,8
tick,0x7ffdf681f424,40677894,0,0x0,8
tick,0x7ffdf681f424,40680719,0,0x0,8
tick,0x7ffdf681f424,40683961,0,0x0,8
tick,0x7ffdf681f424,40687837,0,0x0,8
tick,0x7ffdf681f424,40689847,0,0x0,8
tick,0x7ffdf681f424,40691806,0,0x0,8
tick,0x7ffdf681f424,40693798,0,0x0,8
tick,0x7ffdf681f424,40695803,0,0x0,8
tick,0x7ffdf681f424,40697786,0,0x0,8
tick,0x7ffdf681f424,40699782,0,0x0,8
tick,0x7ffdf681f424,40701935,0,0x0,8
tick,0x7ffdf681f424,40703864,0,0x0,8
tick,0x7ffdf681f424,40705775,0,0x0,8
tick,0x7ffdf681f424,40707795,0,0x0,8
tick,0x7ffdf681f424,40709757,0,0x0,8
tick,0x7ffdf681f424,40720959,0,0x0,8
tick,0x7ffdf681f424,40722731,0,0x0,8
tick,0x7ffdf681f424,40724731,0,0x0,8
tick,0x7ffdf681f424,40726716,0,0x0,8
tick,0x7ffdf681f424,40728740,0,0x0,8
tick,0x7ffdf681f424,40730736,0,0x0,8
tick,0x7ffdf681f424,40732696,0,0x0,8
tick,0x7ffdf681f424,40734692,0,0x0,8
tick,0x7ffdf681f424,40736708,0,0x0,8
tick,0x7ffdf681f424,40738678,0,0x0,8
tick,0x7ffdf681f424,40740671,0,0x0,8
tick,0x7ffdf681f424,40742690,0,0x0,8
tick,0x7ffdf681f424,40744661,0,0x0,8
tick,0x7ffdf681f424,40746656,0,0x0,8
tick,0x7ffdf681f424,40748652,0,0x0,8
tick,0x7ffdf681f424,40750643,0,0x0,8
tick,0x7ffdf681f424,40752635,0,0x0,8
tick,0x7ffdf681f424,40754632,0,0x0,8
tick,0x7ffdf681f424,40756634,0,0x0,8
tick,0x7ffdf681f424,40758624,0,0x0,8
tick,0x7ffdf681f424,40760620,0,0x0,8
tick,0x7ffdf681f424,40762614,0,0x0,8
tick,0x7ffdf681f424,40764617,0,0x0,8
tick,0x7ffdf681f424,40766603,0,0x0,8
tick,0x7ffdf681f424,40768595,0,0x0,8
tick,0x7ffdf681f424,40770597,0,0x0,8
tick,0x7ffdf681f424,40772584,0,0x0,8
tick,0x7ffdf681f424,40774576,0,0x0,8
tick,0x7ffdf681f424,40776574,0,0x0,8
tick,0x7ffdf681f424,40778575,0,0x0,8
tick,0x7ffdf681f424,40780563,0,0x0,8
tick,0x7ffdf681f424,40782558,0,0x0,8
tick,0x7ffdf681f424,40784551,0,0x0,8
tick,0x7ffdf681f424,40786550,0,0x0,8
tick,0x7ffdf681f424,40789057,0,0x0,8
tick,0x7ffdf681f424,40798654,0,0x0,8
tick,0x7ffdf681f424,40800516,0,0x0,8
tick,0x7ffdf681f424,40802605,0,0x0,8
tick,0x7ffdf681f424,40804536,0,0x0,8
tick,0x7ffdf681f424,40806543,0,0x0,8
tick,0x7ffdf681f424,40808494,0,0x0,8
tick,0x7ffdf681f424,40810484,0,0x0,8
tick,0x7ffdf681f424,40821221,0,0x0,8
tick,0x7ffdf681f424,40825293,0,0x0,8
tick,0x7ffdf681f424,40826447,0,0x0,8
tick,0x7ffdf681f424,40828447,0,0x0,8
tick,0x7ffdf681f424,40830589,0,0x0,8
tick,0x7ffdf681f424,40832499,0,0x0,8
tick,0x7ffdf681f424,40834429,0,0x0,8
tick,0x7ffdf681f424,40836437,0,0x0,8
tick,0x7ffdf681f424,40838410,0,0x0,8
tick,0x7ffdf681f424,40840407,0,0x0,8
tick,0x7ffdf681f424,40842402,0,0x0,8
tick,0x7ffdf681f424,40844389,0,0x0,8
tick,0x7ffdf681f424,40846400,0,0x0,8
tick,0x7ffdf681f424,40848381,0,0x0,8
tick,0x7ffdf681f424,40850379,0,0x0,8
tick,0x7ffdf681f424,40852376,0,0x0,8
tick,0x7ffdf681f424,40854367,0,0x0,8
tick,0x7ffdf681f424,40856359,0,0x0,8
tick,0x7ffdf681f424,40858356,0,0x0,8
tick,0x7ffdf681f424,40860346,0,0x0,8
tick,0x7ffdf681f424,40862344,0,0x0,8
tick,0x7ffdf681f424,40864339,0,0x0,8
tick,0x7ffdf681f424,40866333,0,0x0,8
tick,0x7ffdf681f424,40868330,0,0x0,8
tick,0x7ffdf681f424,40870319,0,0x0,8
tick,0x7ffdf681f424,40873323,0,0x0,8
tick,0x7ffdf681f424,40884762,0,0x0,8
tick,0x7ffdf681f424,40886283,0,0x0,8
tick,0x7ffdf681f424,40888280,0,0x0,8
tick,0x7ffdf681f424,40890298,0,0x0,8
tick,0x7ffdf681f424,40892267,0,0x0,8
tick,0x7ffdf681f424,40894262,0,0x0,8
tick,0x7ffdf681f424,40896265,0,0x0,8
tick,0x7ffdf681f424,40898246,0,0x0,8
tick,0x7ffdf681f424,40900243,0,0x0,8
tick,0x7ffdf681f424,40902239,0,0x0,8
tick,0x7ffdf681f424,40904245,0,0x0,8
tick,0x7ffdf681f424,40906232,0,0x0,8
tick,0x7ffdf681f424,40908226,0,0x0,8
tick,0x7ffdf681f424,40910226,0,0x0,8
tick,0x7ffdf681f424,40912218,0,0x0,8
tick,0x7ffdf681f424,40914220,0,0x0,8
tick,0x7ffdf681f424,40916206,0,0x0,8
tick,0x7ffdf681f424,40918198,0,0x0,8
tick,0x7ffdf681f424,40920193,0,0x0,8
tick,0x7ffdf681f424,40922189,0,0x0,8
tick,0x7ffdf681f424,40924180,0,0x0,8
tick,0x7ffdf681f424,40926173,0,0x0,8
tick,0x7ffdf681f424,40928629,0,0x0,8
tick,0x7ffdf681f424,40936758,0,0x0,8
tick,0x7ffdf681f424,40938523,0,0x0,8
tick,0x7ffdf681f424,40940323,0,0x0,8
tick,0x7ffdf681f424,40942293,0,0x0,8
tick,0x7ffdf681f424,40944131,0,0x0,8
tick,0x7ffdf681f424,40946123,0,0x0,8
tick,0x7ffdf681f424,40948118,0,0x0,8
tick,0x7ffdf681f424,40950361,0,0x0,8
tick,0x7ffdf681f424,40952114,0,0x0,8
tick,0x7ffdf681f424,40954105,0,0x0,8
tick,0x7ffdf681f424,40956095,0,0x0,8
tick,0x7ffdf681f424,40959835,0,0x0,8
tick,0x7ffdf681f424,40961080,0,0x0,8
tick,0x7ffdf681f424,40963080,0,0x0,8
tick,0x7ffdf681f424,40965072,0,0x0,8
tick,0x7ffdf681f424,40967064,0,0x0,8
tick,0x7ffdf681f424,40969062,0,0x0,8
tick,0x7ffdf681f424,40982098,0,0x0,8
tick,0x7ffdf681f424,40984027,0,0x0,8
tick,0x7ffdf681f424,40986057,0,0x0,8
tick,0x7ffdf681f424,40988036,0,0x0,8
tick,0x7ffdf681f424,40990229,0,0x0,8
tick,0x7ffdf681f424,40992003,0,0x0,8
tick,0x7ffdf681f424,40993995,0,0x0,8
tick,0x7ffdf681f424,40995990,0,0x0,8
tick,0x7ffdf681f424,40997987,0,0x0,8
tick,0x7ffdf681f424,40999982,0,0x0,8
tick,0x7ffdf681f424,41001968,0,0x0,8
tick,0x7ffdf681f424,41003975,0,0x0,8
tick,0x7ffdf681f424,41005959,0,0x0,8
tick,0x7ffdf681f424,41007955,0,0x0,8
tick,0x7ffdf681f424,41009954,0,0x0,8
tick,0x7ffdf681f424,41011944,0,0x0,8
tick,0x7ffdf681f424,41013936,0,0x0,8
tick,0x7ffdf681f424,41015932,0,0x0,8
tick,0x7ffdf681f424,41017928,0,0x0,8
tick,0x7ffdf681f424,41019919,0,0x0,8
tick,0x7ffdf681f424,41021916,0,0x0,8
tick,0x7ffdf681f424,41023910,0,0x0,8
tick,0x7ffdf681f424,41025911,0,0x0,8
tick,0x7ffdf681f424,41027899,0,0x0,8
tick,0x7ffdf681f424,41030064,0,0x0,8
tick,0x7ffdf681f424,41033943,0,0x0,8
tick,0x7ffdf681f424,41035890,0,0x0,8
tick,0x7ffdf681f424,41037909,0,0x0,8
tick,0x7ffdf681f424,41039880,0,0x0,8
tick,0x7ffdf681f424,41041904,0,0x0,8
tick,0x7ffdf681f424,41043878,0,0x0,8
tick,0x7ffdf681f424,41045860,0,0x0,8
tick,0x7ffdf681f424,41047841,0,0x0,8
tick,0x7ffdf681f424,41049836,0,0x0,8
tick,0x7ffdf681f424,41051831,0,0x0,8
tick,0x7ffdf681f424,41053831,0,0x0,8
tick,0x7ffdf681f424,41055928,0,0x0,8
tick,0x7ffdf681f424,41057879,0,0x0,8
tick,0x7ffdf681f424,41060248,0,0x0,8
tick,0x7ffdf681f424,41072624,0,0x0,8
tick,0x7ffdf681f424,41077260,0,0x0,8
tick,0x7ffdf681f424,41078785,0,0x0,8
tick,0x7ffdf681f424,41080768,0,0x0,8
tick,0x7ffdf681f424,41083022,0,0x0,8
tick,0x7ffdf681f424,41084755,0,0x0,8
tick,0x7ffdf681f424,41086889,0,0x0,8
tick,0x7ffdf681f424,41088743,0,0x0,8
tick,0x7ffdf681f424,41090732,0,0x0,8
tick,0x7ffdf681f424,41092728,0,0x0,8
tick,0x7ffdf681f424,41094724,0,0x0,8
tick,0x7ffdf681f424,41096717,0,0x0,8
tick,0x7ffdf681f424,41098714,0,0x0,8
tick,0x7ffdf681f424,41100704,0,0x0,8
tick,0x7ffdf681f424,41102702,0,0x0,8
tick,0x7ffdf681f424,41104699,0,0x0,8
tick,0x7ffdf681f424,41106690,0,0x0,8
tick,0x7ffdf681f424,41108684,0,0x0,8
tick,0x7ffdf681f424,41110680,0,0x0,8
tick,0x7ffdf681f424,41112672,0,0x0,8
tick,0x7ffdf681f424,41126225,0,0x0,8
tick,0x7ffdf681f424,41127640,0,0x0,8
tick,0x7ffdf681f424,41129754,0,0x0,8
tick,0x7ffdf681f424,41131665,0,0x0,8
tick,0x7ffdf681f424,41133630,0,0x0,8
tick,0x7ffdf681f424,41135616,0,0x0,8
tick,0x7ffdf681f424,41137623,0,0x0,8
tick,0x7ffdf681f424,41139605,0,0x0,8
tick,0x7ffdf681f424,41141600,0,0x0,8
tick,0x7ffdf681f424,41143593,0,0x0,8
tick,0x7ffdf681f424,41145596,0,0x0,8
tick,0x7ffdf681f424,41147589,0,0x0,8
tick,0x7ffdf681f424,41149602,0,0x0,8
tick,0x7ffdf681f424,41151571,0,0x0,8
tick,0x7ffdf681f424,41153573,0,0x0,8
tick,0x7ffdf681f424,41155565,0,0x0,8
tick,0x7ffdf681f424,41157554,0,0x0,8
tick,0x7ffdf681f424,41159553,0,0x0,8
tick,0x7ffdf681f424,41173833,0,0x0,8
tick,0x7ffdf681f424,41175519,0,0x0,8
tick,0x7ffdf681f424,41177508,0,0x0,8
tick,0x7ffdf681f424,41179564,0,0x0,8
tick,0x7ffdf681f424,41181519,0,0x0,8
tick,0x7ffdf681f424,41183489,0,0x0,8
tick,0x7ffdf681f424,41185490,0,0x0,8
tick,0x7ffdf681f424,41187474,0,0x0,8
tick,0x7ffdf681f424,41189475,0,0x0,8
tick,0x7ffdf681f424,41191463,0,0x0,8
tick,0x7ffdf681f424,41193459,0,0x0,8
tick,0x7ffdf681f424,41195455,0,0x0,8
tick,0x7ffdf681f424,41197714,0,0x0,8
tick,0x7ffdf681f424,41201562,0,0x0,8
tick,0x7ffdf681f424,41209780,0,0x0,8
tick,0x7ffdf681f424,41211419,0,0x0,8
tick,0x7ffdf681f424,41213443,0,0x0,8
tick,0x7ffdf681f424,41215429,0,0x0,8
tick,0x7ffdf681f424,41217459,0,0x0,8
tick,0x7ffdf681f424,41219392,0,0x0,8
tick,0x7ffdf681f424,41221391,0,0x0,8
tick,0x7ffdf681f424,41223381,0,0x0,8
tick,0x7ffdf681f424,41225402,0,0x0,8
tick,0x7ffdf681f424,41227368,0,0x0,8
tick,0x7ffdf681f424,41229364,0,0x0,8
tick,0x7ffdf681f424,41231366,0,0x0,8
tick,0x7ffdf681f424,41233351,0,0x0,8
tick,0x7ffdf681f424,41235344,0,0x0,8
tick,0x7ffdf681f424,41237343,0,0x0,8
tick,0x7ffdf681f424,41239334,0,0x0,8
tick,0x7ffdf681f424,41241330,0,0x0,8
tick,0x7ffdf681f424,41243325,0,0x0,8
tick,0x7ffdf681f424,41245321,0,0x0,8
tick,0x7ffdf681f424,41247316,0,0x0,8
tick,0x7ffdf681f424,41249307,0,0x0,8
tick,0x7ffdf681f424,41251301,0,0x0,8
tick,0x7ffdf681f424,41253300,0,0x0,8
tick,0x7ffdf681f424,41255297,0,0x0,8
tick,0x7ffdf681f424,41257286,0,0x0,8
tick,0x7ffdf681f424,41259282,0,0x0,8
tick,0x7ffdf681f424,41261277,0,0x0,8
tick,0x7ffdf681f424,41263274,0,0x0,8
tick,0x7ffdf681f424,41265737,0,0x0,8
tick,0x7ffdf681f424,41277718,0,0x0,8
tick,0x7ffdf681f424,41279234,0,0x0,8
tick,0x7ffdf681f424,41281237,0,0x0,8
tick,0x7ffdf681f424,41299345,0,0x0,8
tick,0x7ffdf681f424,41301214,0,0x0,8
tick,0x7ffdf681f424,41303178,0,0x0,8
tick,0x7ffdf681f424,41305170,0,0x0,8
tick,0x7ffdf681f424,41307162,0,0x0,8
tick,0x7ffdf681f424,41309232,0,0x0,8
tick,0x7ffdf681f424,41311151,0,0x0,8
tick,0x7ffdf681f424,41313151,0,0x0,8
tick,0x7ffdf681f424,41315145,0,0x0,8
tick,0x7ffdf681f424,41317128,0,0x0,8
tick,0x7ffdf681f424,41319125,0,0x0,8
tick,0x7ffdf681f424,41321139,0,0x0,8
tick,0x7ffdf681f424,41323113,0,0x0,8
tick,0x7ffdf681f424,41325115,0,0x0,8
tick,0x7ffdf681f424,41327102,0,0x0,8
tick,0x7ffdf681f424,41329097,0,0x0,8
tick,0x7ffdf681f424,41331090,0,0x0,8
tick,0x7ffdf681f424,41333086,0,0x0,8
tick,0x7ffdf681f424,41335082,0,0x0,8
tick,0x7ffdf681f424,41337076,0,0x0,8
tick,0x7ffdf681f424,41339071,0,0x0,8
tick,0x7ffdf681f424,41341064,0,0x0,8
tick,0x7ffdf681f424,41343065,0,0x0,8
tick,0x7ffdf681f424,41345086,0,0x0,8
tick,0x7ffdf681f424,41347049,0,0x0,8
tick,0x7ffdf681f424,41349042,0,0x0,8
tick,0x7ffdf681f424,41351035,0,0x0,8
tick,0x7ffdf681f424,41353063,0,0x0,8
tick,0x7ffdf681f424,41355039,0,0x0,8
tick,0x7ffdf681f424,41357022,0,0x0,8
tick,0x7ffdf681f424,41359017,0,0x0,8
tick,0x7ffdf681f424,41361007,0,0x0,8
tick,0x7ffdf681f424,41363006,0,0x0,8
tick,0x7ffdf681f424,41365003,0,0x0,8
tick,0x7ffdf681f424,41366995,0,0x0,8
tick,0x7ffdf681f424,41379126,0,0x0,8
tick,0x7ffdf681f424,41380970,0,0x0,8
tick,0x7ffdf681f424,41383037,0,0x0,8
tick,0x7ffdf681f424,41385135,0,0x0,8
tick,0x7ffdf681f424,41387021,0,0x0,8
tick,0x7ffdf681f424,41388943,0,0x0,8
tick,0x7ffdf681f424,41395943,0,0x0,8
tick,0x7ffdf681f424,41398074,0,0x0,8
tick,0x7ffdf681f424,41399915,0,0x0,8
tick,0x7ffdf681f424,41401935,0,0x0,8
tick,0x7ffdf681f424,41403905,0,0x0,8
tick,0x7ffdf681f424,41405895,0,0x0,8
tick,0x7ffdf681f424,41407898,0,0x0,8
tick,0x7ffdf681f424,41409907,0,0x0,8
tick,0x7ffdf681f424,41411913,0,0x0,8
tick,0x7ffdf681f424,41413892,0,0x0,8
tick,0x7ffdf681f424,41415869,0,0x0,8
tick,0x7ffdf681f424,41417859,0,0x0,8
tick,0x7ffdf681f424,41419854,0,0x0,8
tick,0x7ffdf681f424,41421854,0,0x0,8
tick,0x7ffdf681f424,41423840,0,0x0,8
tick,0x7ffdf681f424,41425838,0,0x0,8
tick,0x7ffdf681f424,41427830,0,0x0,8
tick,0x7ffdf681f424,41429828,0,0x0,8
tick,0x7ffdf681f424,41431820,0,0x0,8
tick,0x7ffdf681f424,41433820,0,0x0,8
tick,0x7ffdf681f424,41435809,0,0x0,8
tick,0x7ffdf681f424,41437807,0,0x0,8
tick,0x7ffdf681f424,41439799,0,0x0,8
tick,0x7ffdf681f424,41441792,0,0x0,8
tick,0x7ffdf681f424,41443785,0,0x0,8
tick,0x7ffdf681f424,41445786,0,0x0,8
tick,0x7ffdf681f424,41447777,0,0x0,8
tick,0x7ffdf681f424,41449773,0,0x0,8
tick,0x7ffdf681f424,41451764,0,0x0,8
tick,0x7ffdf681f424,41453768,0,0x0,8
tick,0x7ffdf681f424,41455768,0,0x0,8
tick,0x7ffdf681f424,41457788,0,0x0,8
tick,0x7ffdf681f424,41465375,0,0x0,8
tick,0x7ffdf681f424,41474087,0,0x0,8
tick,0x7ffdf681f424,41475718,0,0x0,8
tick,0x7ffdf681f424,41477811,0,0x0,8
tick,0x7ffdf681f424,41479717,0,0x0,8
tick,0x7ffdf681f424,41481718,0,0x0,8
tick,0x7ffdf681f424,41483686,0,0x0,8
tick,0x7ffdf681f424,41485680,0,0x0,8
tick,0x7ffdf681f424,41487674,0,0x0,8
tick,0x7ffdf681f424,41489670,0,0x0,8
tick,0x7ffdf681f424,41491918,0,0x0,8
tick,0x7ffdf681f424,41493787,0,0x0,8
tick,0x7ffdf681f424,41495840,0,0x0,8
tick,0x7ffdf681f424,41497659,0,0x0,8
tick,0x7ffdf681f424,41499653,0,0x0,8
tick,0x7ffdf681f424,41501643,0,0x0,8
tick,0x7ffdf681f424,41503642,0,0x0,8
tick,0x7ffdf681f424,41505636,0,0x0,8
tick,0x7ffdf681f424,41507630,0,0x0,8
tick,0x7ffdf681f424,41509622,0,0x0,8
tick,0x7ffdf681f424,41511619,0,0x0,8
tick,0x7ffdf681f424,41513840,0,0x0,8
tick,0x7ffdf681f424,41515637,0,0x0,8
tick,0x7ffdf681f424,41517604,0,0x0,8
tick,0x7ffdf681f424,41519626,0,0x0,8
tick,0x7ffdf681f424,41521588,0,0x0,8
tick,0x7ffdf681f424,41523581,0,0x0,8
tick,0x7ffdf681f424,41525573,0,0x0,8
tick,0x7ffdf681f424,41527566,0,0x0,8
tick,0x7ffdf681f424,41529564,0,0x0,8
tick,0x7ffdf681f424,41531558,0,0x0,8
tick,0x7ffdf681f424,41533591,0,0x0,8
tick,0x7ffdf681f424,41535549,0,0x0,8
tick,0x7ffdf681f424,41537540,0,0x0,8
tick,0x7ffdf681f424,41540035,0,0x0,8
tick,0x7ffdf681f424,41541681,0,0x0,8
tick,0x7ffdf681f424,41543815,0,0x0,8
tick,0x7ffdf681f424,41545592,0,0x0,8
tick,0x7ffdf681f424,41561915,0,0x0,8
tick,0x7ffdf681f424,41570648,0,0x0,8
tick,0x7ffdf681f424,41572453,0,0x0,8
tick,0x7ffdf681f424,41574740,0,0x0,8
tick,0x7ffdf681f424,41576632,0,0x0,8
tick,0x7ffdf681f424,41578483,0,0x0,8
tick,0x7ffdf681f424,41580429,0,0x0,8
tick,0x7ffdf681f424,41582425,0,0x0,8
tick,0x7ffdf681f424,41584420,0,0x0,8
tick,0x7ffdf681f424,41586411,0,0x0,8
tick,0x7ffdf681f424,41588406,0,0x0,8
tick,0x7ffdf681f424,41590396,0,0x0,8
tick,0x7ffdf681f424,41592399,0,0x0,8
tick,0x7ffdf681f424,41594385,0,0x0,8
tick,0x7ffdf681f424,41596384,0,0x0,8
tick,0x7ffdf681f424,41598374,0,0x0,8
tick,0x7ffdf681f424,41600369,0,0x0,8
tick,0x7ffdf681f424,41602367,0,0x0,8
tick,0x7ffdf681f424,41604363,0,0x0,8
tick,0x7ffdf681f424,41606358,0,0x0,8
tick,0x7ffdf681f424,41608350,0,0x0,8
tick,0x7ffdf681f424,41610346,0,0x0,8
tick,0x7ffdf681f424,41612376,0,0x0,8
tick,0x7ffdf681f424,41614334,0,0x0,8
tick,0x7ffdf681f424,41626707,0,0x0,8
tick,0x7ffdf681f424,41627944,0,0x0,8
tick,0x7ffdf681f424,41629303,0,0x0,8
tick,0x7ffdf681f424,41631296,0,0x0,8
tick,0x7ffdf681f424,41633329,0,0x0,8
tick,0x7ffdf681f424,41635300,0,0x0,8
tick,0x7ffdf681f424,41637284,0,0x0,8
tick,0x7ffdf681f424,41639388,0,0x0,8
tick,0x7ffdf681f424,41641278,0,0x0,8
tick,0x7ffdf681f424,41643300,0,0x0,8
tick,0x7ffdf681f424,41652950,0,0x0,8
tick,0x7ffdf681f424,41654234,0,0x0,8
tick,0x7ffdf681f424,41656225,0,0x0,8
tick,0x7ffdf681f424,41658270,0,0x0,8
tick,0x7ffdf681f424,41660224,0,0x0,8
tick,0x7ffdf681f424,41662231,0,0x0,8
tick,0x7ffdf681f424,41664205,0,0x0,8
tick,0x7ffdf681f424,41666194,0,0x0,8
tick,0x7ffdf681f424,41668193,0,0x0,8
tick,0x7ffdf681f424,41670183,0,0x0,8
tick,0x7ffdf681f424,41672179,0,0x0,8
tick,0x7ffdf681f424,41674184,0,0x0,8
tick,0x7ffdf681f424,41676171,0,0x0,8
tick,0x7ffdf681f424,41678162,0,0x0,8
tick,0x7ffdf681f424,41680159,0,0x0,8
tick,0x7ffdf681f424,41682150,0,0x0,8
tick,0x7ffdf681f424,41684145,0,0x0,8
tick,0x7ffdf681f424,41696835,0,0x0,8
tick,0x7ffdf681f424,41698113,0,0x0,8
tick,0x7ffdf681f424,41700109,0,0x0,8
tick,0x7ffdf681f424,41702131,0,0x0,8
tick,0x7ffdf681f424,41704142,0,0x0,8
tick,0x7ffdf681f424,41706130,0,0x0,8
tick,0x7ffdf681f424,41708088,0,0x0,8
tick,0x7ffdf681f424,41710077,0,0x0,8
tick,0x7ffdf681f424,41712072,0,0x0,8
tick,0x7ffdf681f424,41714064,0,0x0,8
tick,0x7ffdf681f424,41716058,0,0x0,8
tick,0x7ffdf681f424,41718066,0,0x0,8
tick,0x7ffdf681f424,41720048,0,0x0,8
tick,0x7ffdf681f424,41722042,0,0x0,8
tick,0x7ffdf681f424,41724035,0,0x0,8
tick,0x7ffdf681f424,41726036,0,0x0,8
tick,0x7ffdf681f424,41728028,0,0x0,8
tick,0x7ffdf681f424,41730041,0,0x0,8
tick,0x7ffdf681f424,41732020,0,0x0,8
tick,0x7ffdf681f424,41734017,0,0x0,8
tick,0x7ffdf681f424,41736005,0,0x0,8
tick,0x7ffdf681f424,41738018,0,0x0,8
tick,0x7ffdf681f424,41740012,0,0x0,8
tick,0x7ffdf681f424,41741995,0,0x0,8
tick,0x7ffdf681f424,41743993,0,0x0,8
tick,0x7ffdf681f424,41745991,0,0x0,8
tick,0x7ffdf681f424,41747977,0,0x0,8
tick,0x7ffdf681f424,41749968,0,0x0,8
tick,0x7ffdf681f424,41751967,0,0x0,8
tick,0x7ffdf681f424,41753962,0,0x0,8
tick,0x7ffdf681f424,41755972,0,0x0,8
tick,0x7ffdf681f424,41758734,0,0x0,8
tick,0x7ffdf681f424,41760395,0,0x0,8
tick,0x7ffdf681f424,41770101,0,0x0,8
tick,0x7ffdf681f424,41784214,0,0x0,8
tick,0x7ffdf681f424,41785542,0,0x0,8
tick,0x7ffdf681f424,41786942,0,0x0,8
tick,0x7ffdf681f424,41788911,0,0x0,8
tick,0x7ffdf681f424,41790877,0,0x0,8
tick,0x7ffdf681f424,41792871,0,0x0,8
tick,0x7ffdf681f424,41794856,0,0x0,8
tick,0x7ffdf681f424,41796868,0,0x0,8
tick,0x7ffdf681f424,41798845,0,0x0,8
tick,0x7ffdf681f424,41800838,0,0x0,8
tick,0x7ffdf681f424,41802831,0,0x0,8
tick,0x7ffdf681f424,41804826,0,0x0,8
tick,0x7ffdf681f424,41806844,0,0x0,8
tick,0x7ffdf681f424,41808813,0,0x0,8
tick,0x7ffdf681f424,41810807,0,0x0,8
tick,0x7ffdf681f424,41812806,0,0x0,8
tick,0x7ffdf681f424,41814797,0,0x0,8
tick,0x7ffdf681f424,41816797,0,0x0,8
tick,0x7ffdf681f424,41818786,0,0x0,8
tick,0x7ffdf681f424,41820781,0,0x0,8
tick,0x7ffdf681f424,41822775,0,0x0,8
tick,0x7ffdf681f424,41824769,0,0x0,8
tick,0x7ffdf681f424,41826764,0,0x0,8
tick,0x7ffdf681f424,41828780,0,0x0,8
tick,0x7ffdf681f424,41830755,0,0x0,8
tick,0x7ffdf681f424,41832747,0,0x0,8
tick,0x7ffdf681f424,41834739,0,0x0,8
tick,0x7ffdf681f424,41836737,0,0x0,8
tick,0x7ffdf681f424,41838732,0,0x0,8
tick,0x7ffdf681f424,41840726,0,0x0,8
tick,0x7ffdf681f424,41842719,0,0x0,8
tick,0x7ffdf681f424,41844716,0,0x0,8
tick,0x7ffdf681f424,41846711,0,0x0,8
tick,0x7ffdf681f424,41848872,0,0x0,8
tick,0x7ffdf681f424,41850780,0,0x0,8
tick,0x7ffdf681f424,41858977,0,0x0,8
tick,0x7ffdf681f424,41860682,0,0x0,8
tick,0x7ffdf681f424,41869740,0,0x0,8
tick,0x7ffdf681f424,41870789,0,0x0,8
tick,0x7ffdf681f424,41872710,0,0x0,8
tick,0x7ffdf681f424,41878431,0,0x0,8
tick,0x7ffdf681f424,41879630,0,0x0,8
tick,0x7ffdf681f424,41881621,0,0x0,8
tick,0x7ffdf681f424,41883706,0,0x0,8
tick,0x7ffdf681f424,41885611,0,0x0,8
tick,0x7ffdf681f424,41887618,0,0x0,8
tick,0x7ffdf681f424,41889600,0,0x0,8
tick,0x7ffdf681f424,41891595,0,0x0,8
tick,0x7ffdf681f424,41893588,0,0x0,8
tick,0x7ffdf681f424,41895588,0,0x0,8
tick,0x7ffdf681f424,41897580,0,0x0,8
tick,0x7ffdf681f424,41899595,0,0x0,8
tick,0x7ffdf681f424,41901565,0,0x0,8
tick,0x7ffdf681f424,41903566,0,0x0,8
tick,0x7ffdf681f424,41905557,0,0x0,8
tick,0x7ffdf681f424,41907541,0,0x0,8
tick,0x7ffdf681f424,41909553,0,0x0,8
tick,0x7ffdf681f424,41911539,0,0x0,8
tick,0x7ffdf681f424,41913554,0,0x0,8
tick,0x7ffdf681f424,41915533,0,0x0,8
tick,0x7ffdf681f424,41917523,0,0x0,8
tick,0x7ffdf681f424,41919528,0,0x0,8
tick,0x7ffdf681f424,41921540,0,0x0,8
tick,0x7ffdf681f424,41923511,0,0x0,8
tick,0x7ffdf681f424,41925503,0,0x0,8
tick,0x7ffdf681f424,41927504,0,0x0,8
tick,0x7ffdf681f424,41929493,0,0x0,8
tick,0x7ffdf681f424,41931487,0,0x0,8
tick,0x7ffdf681f424,41933479,0,0x0,8
tick,0x7ffdf681f424,41935472,0,0x0,8
tick,0x7ffdf681f424,41937477,0,0x0,8
tick,0x7ffdf681f424,41941345,0,0x0,8
tick,0x7ffdf681f424,41952310,0,0x0,8
tick,0x7ffdf681f424,41965061,0,0x0,8
tick,0x7ffdf681f424,41966500,0,0x0,8
tick,0x7ffdf681f424,41968416,0,0x0,8
tick,0x7ffdf681f424,41970449,0,0x0,8
tick,0x7ffdf681f424,41972384,0,0x0,8
tick,0x7ffdf681f424,41974382,0,0x0,8
tick,0x7ffdf681f424,41976376,0,0x0,8
tick,0x7ffdf681f424,41978362,0,0x0,8
tick,0x7ffdf681f424,41980358,0,0x0,8
tick,0x7ffdf681f424,41982349,0,0x0,8
tick,0x7ffdf681f424,41984343,0,0x0,8
tick,0x7ffdf681f424,41986339,0,0x0,8
tick,0x7ffdf681f424,41988341,0,0x0,8
tick,0x7ffdf681f424,41990330,0,0x0,8
tick,0x7ffdf681f424,41992325,0,0x0,8
tick,0x7ffdf681f424,41994314,0,0x0,8
tick,0x7ffdf681f424,41996314,0,0x0,8
tick,0x7ffdf681f424,41998313,0,0x0,8
tick,0x7ffdf681f424,42000301,0,0x0,8
tick,0x7ffdf681f424,42002296,0,0x0,8
tick,0x7ffdf681f424,42004292,0,0x0,8
tick,0x7ffdf681f424,42006284,0,0x0,8
tick,0x7ffdf681f424,42008279,0,0x0,8
tick,0x7ffdf681f424,42010274,0,0x0,8
tick,0x7ffdf681f424,42012268,0,0x0,8
tick,0x7ffdf681f424,42014261,0,0x0,8
tick,0x7ffdf681f424,42016259,0,0x0,8
tick,0x7ffdf681f424,42018430,0,0x0,8
tick,0x7ffdf681f424,42029990,0,0x0,8
tick,0x7ffdf681f424,42031222,0,0x0,8
tick,0x7ffdf681f424,42033217,0,0x0,8
tick,0x7ffdf681f424,42035495,0,0x0,8
tick,0x7ffdf681f424,42037289,0,0x0,8
tick,0x7ffdf681f424,42040046,0,0x0,8
tick,0x7ffdf681f424,42041201,0,0x0,8
tick,0x7ffdf681f424,42043230,0,0x0,8
tick,0x7ffdf681f424,42045396,0,0x0,8
tick,0x7ffdf681f424,42047187,0,0x0,8
tick,0x7ffdf681f424,42049180,0,0x0,8
tick,0x7ffdf681f424,42054980,0,0x0,8
tick,0x7ffdf681f424,42056156,0,0x0,8
tick,0x7ffdf681f424,42058154,0,0x0,8
tick,0x7ffdf681f424,42061009,0,0x0,8
tick,0x7ffdf681f424,42063247,0,0x0,8
tick,0x7ffdf681f424,42065278,0,0x0,8
tick,0x7ffdf681f424,42067127,0,0x0,8
tick,0x7ffdf681f424,42069117,0,0x0,8
tick,0x7ffdf681f424,42071116,0,0x0,8
tick,0x7ffdf681f424,42073109,0,0x0,8
tick,0x7ffdf681f424,42075108,0,0x0,8
tick,0x7ffdf681f424,42077099,0,0x0,8
tick,0x7ffdf681f424,42079091,0,0x0,8
tick,0x7ffdf681f424,42081088,0,0x0,8
tick,0x7ffdf681f424,42083080,0,0x0,8
tick,0x7ffdf681f424,42085075,0,0x0,8
tick,0x7ffdf681f424,42087075,0,0x0,8
tick,0x7ffdf681f424,42089063,0,0x0,8
tick,0x7ffdf681f424,42091057,0,0x0,8
tick,0x7ffdf681f424,42093053,0,0x0,8
tick,0x7ffdf681f424,42095045,0,0x0,8
tick,0x7ffdf681f424,42097045,0,0x0,8
tick,0x7ffdf681f424,42099035,0,0x0,8
tick,0x7ffdf681f424,42101029,0,0x0,8
tick,0x7ffdf681f424,42103025,0,0x0,8
tick,0x7ffdf681f424,42105027,0,0x0,8
tick,0x7ffdf681f424,42107032,0,0x0,8
tick,0x7ffdf681f424,42120334,0,0x0,8
tick,0x7ffdf681f424,42121986,0,0x0,8
tick,0x7ffdf681f424,42124000,0,0x0,8
tick,0x7ffdf681f424,42125974,0,0x0,8
tick,0x7ffdf681f424,42127980,0,0x0,8
tick,0x7ffdf681f424,42129961,0,0x0,8
tick,0x7ffdf681f424,42132173,0,0x0,8
tick,0x7ffdf681f424,42145059,0,0x0,8
tick,0x7ffdf681f424,42146919,0,0x0,8
tick,0x7ffdf681f424,42148913,0,0x0,8
tick,0x7ffdf681f424,42150951,0,0x0,8
tick,0x7ffdf681f424,42152924,0,0x0,8
tick,0x7ffdf681f424,42154894,0,0x0,8
tick,0x7ffdf681f424,42156891,0,0x0,8
tick,0x7ffdf681f424,42158877,0,0x0,8
tick,0x7ffdf681f424,42160878,0,0x0,8
tick,0x7ffdf681f424,42162869,0,0x0,8
tick,0x7ffdf681f424,42164867,0,0x0,8
tick,0x7ffdf681f424,42166863,0,0x0,8
tick,0x7ffdf681f424,42168857,0,0x0,8
tick,0x7ffdf681f424,42170846,0,0x0,8
tick,0x7ffdf681f424,42172842,0,0x0,8
tick,0x7ffdf681f424,42174835,0,0x0,8
tick,0x7ffdf681f424,42176829,0,0x0,8
tick,0x7ffdf681f424,42178822,0,0x0,8
tick,0x7ffdf681f424,42180815,0,0x0,8
tick,0x7ffdf681f424,42182814,0,0x0,8
tick,0x7ffdf681f424,42184807,0,0x0,8
tick,0x7ffdf681f424,42186798,0,0x0,8
tick,0x7ffdf681f424,42188798,0,0x0,8
tick,0x7ffdf681f424,42190795,0,0x0,8
tick,0x7ffdf681f424,42192786,0,0x0,8
tick,0x7ffdf681f424,42194779,0,0x0,8
tick,0x7ffdf681f424,42196780,0,0x0,8
tick,0x7ffdf681f424,42209919,0,0x0,8
tick,0x7ffdf681f424,42211743,0,0x0,8
tick,0x7ffdf681f424,42213874,0,0x0,8
tick,0x7ffdf681f424,42215847,0,0x0,8
tick,0x7ffdf681f424,42217755,0,0x0,8
tick,0x7ffdf681f424,42219726,0,0x0,8
tick,0x7ffdf681f424,42221755,0,0x0,8
tick,0x7ffdf681f424,42223713,0,0x0,8
tick,0x7ffdf681f424,42225707,0,0x0,8
tick,0x7ffdf681f424,42227693,0,0x0,8
tick,0x7ffdf681f424,42229691,0,0x0,8
tick,0x7ffdf681f424,42231707,0,0x0,8
tick,0x7ffdf681f424,42234875,0,0x0,8
tick,0x7ffdf681f424,42246984,0,0x0,8
tick,0x7ffdf681f424,42248641,0,0x0,8
tick,0x7ffdf681f424,42250639,0,0x0,8
tick,0x7ffdf681f424,42252655,0,0x0,8
tick,0x7ffdf681f424,42254642,0,0x0,8
tick,0x7ffdf681f424,42256656,0,0x0,8
tick,0x7ffdf681f424,42258615,0,0x0,8
tick,0x7ffdf681f424,42260601,0,0x0,8
tick,0x7ffdf681f424,42262597,0,0x0,8
tick,0x7ffdf681f424,42264597,0,0x0,8
tick,0x7ffdf681f424,42266593,0,0x0,8
tick,0x7ffdf681f424,42268599,0,0x0,8
tick,0x7ffdf681f424,42270611,0,0x0,8
tick,0x7ffdf681f424,42272584,0,0x0,8
tick,0x7ffdf681f424,42274631,0,0x0,8
tick,0x7ffdf681f424,42276562,0,0x0,8
tick,0x7ffdf681f424,42278571,0,0x0,8
tick,0x7ffdf681f424,42280555,0,0x0,8
tick,0x7ffdf681f424,42282545,0,0x0,8
tick,0x7ffdf681f424,42284541,0,0x0,8
tick,0x7ffdf681f424,42286536,0,0x0,8
tick,0x7ffdf681f424,42288534,0,0x0,8
tick,0x7ffdf681f424,42290536,0,0x0,8
tick,0x7ffdf681f424,42304564,0,0x0,8
tick,0x7ffdf681f424,42306488,0,0x0,8
tick,0x7ffdf681f424,42308501,0,0x0,8
tick,0x7ffdf681f424,42310478,0,0x0,8
tick,0x7ffdf681f424,42312596,0,0x0,8
tick,0x7ffdf681f424,42314466,0,0x0,8
tick,0x7ffdf681f424,42316462,0,0x0,8
tick,0x7ffdf681f424,42318450,0,0x0,8
tick,0x7ffdf681f424,42320453,0,0x0,8
tick,0x7ffdf681f424,42322442,0,0x0,8
tick,0x7ffdf681f424,42324434,0,0x0,8
tick,0x7ffdf681f424,42326440,0,0x0,8
tick,0x7ffdf681f424,42328428,0,0x0,8
tick,0x7ffdf681f424,42330426,0,0x0,8
tick,0x7ffdf681f424,42332686,0,0x0,8
tick,0x7ffdf681f424,42344346,0,0x0,8
tick,0x7ffdf681f424,42345389,0,0x0,8
tick,0x7ffdf681f424,42347381,0,0x0,8
tick,0x7ffdf681f424,42349452,0,0x0,8
tick,0x7ffdf681f424,42351396,0,0x0,8
tick,0x7ffdf681f424,42353386,0,0x0,8
tick,0x7ffdf681f424,42355402,0,0x0,8
tick,0x7ffdf681f424,42357348,0,0x0,8
tick,0x7ffdf681f424,42359343,0,0x0,8
tick,0x7ffdf681f424,42361338,0,0x0,8
tick,0x7ffdf681f424,42363334,0,0x0,8
tick,0x7ffdf681f424,42365327,0,0x0,8
tick,0x7ffdf681f424,42367322,0,0x0,8
tick,0x7ffdf681f424,42369314,0,0x0,8
tick,0x7ffdf681f424,42371311,0,0x0,8
tick,0x7ffdf681f424,42373306,0,0x0,8
tick,0x7ffdf681f424,42375309,0,0x0,8
tick,0x7ffdf681f424,42377305,0,0x0,8
tick,0x7ffdf681f424,42379286,0,0x0,8
tick,0x7ffdf681f424,42381283,0,0x0,8
tick,0x7ffdf681f424,42383273,0,0x0,8
tick,0x7ffdf681f424,42390274,0,0x0,8
tick,0x7ffdf681f424,42392292,0,0x0,8
tick,0x7ffdf681f424,42394257,0,0x0,8
tick,0x7ffdf681f424,42396252,0,0x0,8
tick,0x7ffdf681f424,42398241,0,0x0,8
tick,0x7ffdf681f424,42400255,0,0x0,8
tick,0x7ffdf681f424,42402246,0,0x0,8
tick,0x7ffdf681f424,42404258,0,0x0,8
tick,0x7ffdf681f424,42406220,0,0x0,8
tick,0x7ffdf681f424,42408212,0,0x0,8
tick,0x7ffdf681f424,42422355,0,0x0,8
tick,0x7ffdf681f424,42424175,0,0x0,8
tick,0x7ffdf681f424,42426168,0,0x0,8
tick,0x7ffdf681f424,42428187,0,0x0,8
tick,0x7ffdf681f424,42430160,0,0x0,8
tick,0x7ffdf681f424,42432405,0,0x0,8
tick,0x7ffdf681f424,42434142,0,0x0,8
tick,0x7ffdf681f424,42436135,0,0x0,8
tick,0x7ffdf681f424,42438145,0,0x0,8
tick,0x7ffdf681f424,42440135,0,0x0,8
tick,0x7ffdf681f424,42442130,0,0x0,8
tick,0x7ffdf681f424,42444126,0,0x0,8
tick,0x7ffdf681f424,42446112,0,0x0,8
tick,0x7ffdf681f424,42448105,0,0x0,8
tick,0x7ffdf681f424,42450099,0,0x0,8
tick,0x7ffdf681f424,42452093,0,0x0,8
tick,0x7ffdf681f424,42454090,0,0x0,8
tick,0x7ffdf681f424,42456084,0,0x0,8
tick,0x7ffdf681f424,42458084,0,0x0,8
tick,0x7ffdf681f424,42460070,0,0x0,8
tick,0x7ffdf681f424,42462067,0,0x0,8
tick,0x7ffdf681f424,42464065,0,0x0,8
tick,0x7ffdf681f424,42466065,0,0x0,8
tick,0x7ffdf681f424,42468051,0,0x0,8
tick,0x7ffdf681f424,42470044,0,0x0,8
tick,0x7ffdf681f424,42476102,0,0x0,8
tick,0x7ffdf681f424,42478059,0,0x0,8
tick,0x7ffdf681f424,42480035,0,0x0,8
tick,0x7ffdf681f424,42482047,0,0x0,8
tick,0x7ffdf681f424,42484020,0,0x0,8
tick,0x7ffdf681f424,42486006,0,0x0,8
tick,0x7ffdf681f424,42488042,0,0x0,8
tick,0x7ffdf681f424,42490043,0,0x0,8
tick,0x7ffdf681f424,42492029,0,0x0,8
tick,0x7ffdf681f424,42493994,0,0x0,8
tick,0x7ffdf681f424,42496115,0,0x0,8
tick,0x7ffdf681f424,42506863,0,0x0,8
tick,0x7ffdf681f424,42507947,0,0x0,8
tick,0x7ffdf681f424,42509950,0,0x0,8
tick,0x7ffdf681f424,42512365,0,0x0,8
tick,0x7ffdf681f424,42513936,0,0x0,8
tick,0x7ffdf681f424,42515924,0,0x0,8
tick,0x7ffdf681f424,42519985,0,0x0,8
tick,0x7ffdf681f424,42521918,0,0x0,8
tick,0x7ffdf681f424,42523909,0,0x0,8
tick,0x7ffdf681f424,42525900,0,0x0,8
tick,0x7ffdf681f424,42527891,0,0x0,8
tick,0x7ffdf681f424,42529887,0,0x0,8
tick,0x7ffdf681f424,42531886,0,0x0,8
tick,0x7ffdf681f424,42533871,0,0x0,8
tick,0x7ffdf681f424,42535869,0,0x0,8
tick,0x7ffdf681f424,42537866,0,0x0,8
tick,0x7ffdf681f424,42539859,0,0x0,8
tick,0x7ffdf681f424,42541863,0,0x0,8
tick,0x7ffdf681f424,42543847,0,0x0,8
tick,0x7ffdf681f424,42545843,0,0x0,8
tick,0x7ffdf681f424,42547837,0,0x0,8
tick,0x7ffdf681f424,42549827,0,0x0,8
tick,0x7ffdf681f424,42551822,0,0x0,8
tick,0x7ffdf681f424,42553825,0,0x0,8
tick,0x7ffdf681f424,42555816,0,0x0,8
tick,0x7ffdf681f424,42565561,0,0x0,8
tick,0x7ffdf681f424,42566795,0,0x0,8
tick,0x7ffdf681f424,42569910,0,0x0,8
tick,0x7ffdf681f424,42571786,0,0x0,8
tick,0x7ffdf681f424,42573776,0,0x0,8
tick,0x7ffdf681f424,42575881,0,0x0,8
tick,0x7ffdf681f424,42577806,0,0x0,8
tick,0x7ffdf681f424,42584751,0,0x0,8
tick,0x7ffdf681f424,42596300,0,0x0,8
tick,0x7ffdf681f424,42596333,0,0x0,8
tick,0x7ffdf681f424,42597710,0,0x0,8
tick,0x7ffdf681f424,42599705,0,0x0,8
tick,0x7ffdf681f424,42601719,0,0x0,8
tick,0x7ffdf681f424,42603700,0,0x0,8
tick,0x7ffdf681f424,42605682,0,0x0,8
tick,0x7ffdf681f424,42607674,0,0x0,8
tick,0x7ffdf681f424,42609669,0,0x0,8
tick,0x7ffdf681f424,42611668,0,0x0,8
tick,0x7ffdf681f424,42613661,0,0x0,8
tick,0x7ffdf681f424,42615660,0,0x0,8
tick,0x7ffdf681f424,42617702,0,0x0,8
tick,0x7ffdf681f424,42619658,0,0x0,8
tick,0x7ffdf681f424,42622147,0,0x0,8
tick,0x7ffdf681f424,42623775,0,0x0,8
tick,0x7ffdf681f424,42625694,0,0x0,8
tick,0x7ffdf681f424,42627640,0,0x0,8
tick,0x7ffdf681f424,42629715,0,0x0,8
tick,0x7ffdf681f424,42631623,0,0x0,8
tick,0x7ffdf681f424,42633614,0,0x0,8
tick,0x7ffdf681f424,42635604,0,0x0,8
tick,0x7ffdf681f424,42637774,0,0x0,8
tick,0x7ffdf681f424,42639610,0,0x0,8
tick,0x7ffdf681f424,42641621,0,0x0,8
tick,0x7ffdf681f424,42643587,0,0x0,8
tick,0x7ffdf681f424,42645583,0,0x0,8
tick,0x7ffdf681f424,42647572,0,0x0,8
tick,0x7ffdf681f424,42649567,0,0x0,8
tick,0x7ffdf681f424,42651563,0,0x0,8
tick,0x7ffdf681f424,42653553,0,0x0,8
tick,0x7ffdf681f424,42655572,0,0x0,8
tick,0x7ffdf681f424,42657554,0,0x0,8
tick,0x7ffdf681f424,42659539,0,0x0,8
tick,0x7ffdf681f424,42661536,0,0x0,8
tick,0x7ffdf681f424,42663532,0,0x0,8
tick,0x7ffdf681f424,42665525,0,0x0,8
tick,0x7ffdf681f424,42667519,0,0x0,8
tick,0x7ffdf681f424,42669514,0,0x0,8
tick,0x7ffdf681f424,42671507,0,0x0,8
tick,0x7ffdf681f424,42673505,0,0x0,8
tick,0x7ffdf681f424,42675498,0,0x0,8
tick,0x7ffdf681f424,42677495,0,0x0,8
tick,0x7ffdf681f424,42679492,0,0x0,8
tick,0x7ffdf681f424,42681480,0,0x0,8
tick,0x7ffdf681f424,42683474,0,0x0,8
tick,0x7ffdf681f424,42686182,0,0x0,8
tick,0x7ffdf681f424,42696146,0,0x0,8
tick,0x7ffdf681f424,42697447,0,0x0,8
tick,0x7ffdf681f424,42699502,0,0x0,8
tick,0x7ffdf681f424,42701449,0,0x0,8
tick,0x7ffdf681f424,42703451,0,0x0,8
tick,0x7ffdf681f424,42705428,0,0x0,8
tick,0x7ffdf681f424,42707416,0,0x0,8
tick,0x7ffdf681f424,42709404,0,0x0,8
tick,0x7ffdf681f424,42711788,0,0x0,8
tick,0x7ffdf681f424,42725971,0,0x0,8
tick,0x7ffdf681f424,42727364,0,0x0,8
tick,0x7ffdf681f424,42729356,0,0x0,8
tick,0x7ffdf681f424,42731356,0,0x0,8
tick,0x7ffdf681f424,42733357,0,0x0,8
tick,0x7ffdf681f424,42735394,0,0x0,8
tick,0x7ffdf681f424,42737347,0,0x0,8
tick,0x7ffdf681f424,42739375,0,0x0,8
tick,0x7ffdf681f424,42741324,0,0x0,8
tick,0x7ffdf681f424,42743315,0,0x0,8
tick,0x7ffdf681f424,42745350,0,0x0,8
tick,0x7ffdf681f424,42747309,0,0x0,8
tick,0x7ffdf681f424,42749302,0,0x0,8
tick,0x7ffdf681f424,42751293,0,0x0,8
tick,0x7ffdf681f424,42753288,0,0x0,8
tick,0x7ffdf681f424,42755281,0,0x0,8
tick,0x7ffdf681f424,42757274,0,0x0,8
tick,0x7ffdf681f424,42759274,0,0x0,8
tick,0x7ffdf681f424,42761267,0,0x0,8
tick,0x7ffdf681f424,42763259,0,0x0,8
tick,0x7ffdf681f424,42765263,0,0x0,8
tick,0x7ffdf681f424,42767250,0,0x0,8
tick,0x7ffdf681f424,42769246,0,0x0,8
tick,0x7ffdf681f424,42771240,0,0x0,8
tick,0x7ffdf681f424,42773234,0,0x0,8
tick,0x7ffdf681f424,42776155,0,0x0,8
tick,0x7ffdf681f424,42786710,0,0x0,8
tick,0x7ffdf681f424,42788199,0,0x0,8
tick,0x7ffdf681f424,42790187,0,0x0,8
tick,0x7ffdf681f424,42792207,0,0x0,8
tick,0x7ffdf681f424,42794195,0,0x0,8
tick,0x7ffdf681f424,42796191,0,0x0,8
tick,0x7ffdf681f424,42798404,0,0x0,8
tick,0x7ffdf681f424,42800327,0,0x0,8
tick,0x7ffdf681f424,42802241,0,0x0,8
tick,0x7ffdf681f424,42804169,0,0x0,8
tick,0x7ffdf681f424,42806243,0,0x0,8
tick,0x7ffdf681f424,42813337,0,0x0,8
tick,0x7ffdf681f424,42815130,0,0x0,8
tick,0x7ffdf681f424,42817121,0,0x0,8
tick,0x7ffdf681f424,42819910,0,0x0,8
tick,0x7ffdf681f424,42821149,0,0x0,8
tick,0x7ffdf681f424,42823106,0,0x0,8
tick,0x7ffdf681f424,42825099,0,0x0,8
tick,0x7ffdf681f424,42827088,0,0x0,8
tick,0x7ffdf681f424,42829081,0,0x0,8
tick,0x7ffdf681f424,42831071,0,0x0,8
tick,0x7ffdf681f424,42833065,0,0x0,8
tick,0x7ffdf681f424,42835134,0,0x0,8
tick,0x7ffdf681f424,42837060,0,0x0,8
tick,0x7ffdf681f424,42839111,0,0x0,8
tick,0x7ffdf681f424,42841097,0,0x0,8
tick,0x7ffdf681f424,42843087,0,0x0,8
tick,0x7ffdf681f424,42845078,0,0x0,8
tick,0x7ffdf681f424,42847087,0,0x0,8
tick,0x7ffdf681f424,42849083,0,0x0,8
tick,0x7ffdf681f424,42851086,0,0x0,8
tick,0x7ffdf681f424,42853061,0,0x0,8
tick,0x7ffdf681f424,42855102,0,0x0,8
tick,0x7ffdf681f424,42857058,0,0x0,8
tick,0x7ffdf681f424,42859050,0,0x0,8
tick,0x7ffdf681f424,42861042,0,0x0,8
tick,0x7ffdf681f424,42863033,0,0x0,8
tick,0x7ffdf681f424,42865025,0,0x0,8
tick,0x7ffdf681f424,42867121,0,0x0,8
tick,0x7ffdf681f424,42869112,0,0x0,8
tick,0x7ffdf681f424,42871091,0,0x0,8
tick,0x7ffdf681f424,42873112,0,0x0,8
tick,0x7ffdf681f424,42875062,0,0x0,8
tick,0x7ffdf681f424,42877072,0,0x0,8
tick,0x7ffdf681f424,42879037,0,0x0,8
tick,0x7ffdf681f424,42881084,0,0x0,8
tick,0x7ffdf681f424,42883068,0,0x0,8
tick,0x7ffdf681f424,42885068,0,0x0,8
tick,0x7ffdf681f424,42887052,0,0x0,8
tick,0x7ffdf681f424,42889110,0,0x0,8
tick,0x7ffdf681f424,42891023,0,0x0,8
tick,0x7ffdf681f424,42893018,0,0x0,8
tick,0x7ffdf681f424,42895013,0,0x0,8
tick,0x7ffdf681f424,42897013,0,0x0,8
tick,0x7ffdf681f424,42899131,0,0x0,8
tick,0x7ffdf681f424,42901116,0,0x0,8
tick,0x7ffdf681f424,42903134,0,0x0,8
tick,0x7ffdf681f424,42905118,0,0x0,8
tick,0x7ffdf681f424,42907193,0,0x0,8
tick,0x7ffdf681f424,42909188,0,0x0,8
tick,0x7ffdf681f424,42911193,0,0x0,8
tick,0x7ffdf681f424,42913201,0,0x0,8
tick,0x7ffdf681f424,42915134,0,0x0,8
tick,0x7ffdf681f424,42917169,0,0x0,8
tick,0x7ffdf681f424,42919153,0,0x0,8
tick,0x7ffdf681f424,42921191,0,0x0,8
tick,0x7ffdf681f424,42923147,0,0x0,8
tick,0x7ffdf681f424,42925144,0,0x0,8
tick,0x7ffdf681f424,42927134,0,0x0,8
tick,0x7ffdf681f424,42929163,0,0x0,8
tick,0x7ffdf681f424,42931133,0,0x0,8
tick,0x7ffdf681f424,42933199,0,0x0,8
tick,0x7ffdf681f424,42935209,0,0x0,8
tick,0x7ffdf681f424,42937176,0,0x0,8
tick,0x7ffdf681f424,42939084,0,0x0,8
tick,0x7ffdf681f424,42941174,0,0x0,8
tick,0x7ffdf681f424,42943093,0,0x0,8
tick,0x7ffdf681f424,42945140,0,0x0,8
tick,0x7ffdf681f424,42947128,0,0x0,8
tick,0x7ffdf681f424,42949124,0,0x0,8
tick,0x7ffdf681f424,42951112,0,0x0,8
tick,0x7ffdf681f424,42953112,0,0x0,8
tick,0x7ffdf681f424,42955110,0,0x0,8
tick,0x7ffdf681f424,42957114,0,0x0,8
tick,0x7ffdf681f424,42958984,0,0x0,8
tick,0x7ffdf681f424,42960985,0,0x0,8
tick,0x7ffdf681f424,42963098,0,0x0,8
tick,0x7ffdf681f424,42965038,0,0x0,8
tick,0x7ffdf681f424,42967079,0,0x0,8
tick,0x7ffdf681f424,42969064,0,0x0,8
tick,0x7ffdf681f424,42970964,0,0x0,8
tick,0x7ffdf681f424,42973055,0,0x0,8
tick,0x7ffdf681f424,42975048,0,0x0,8
tick,0x7ffdf681f424,42977057,0,0x0,8
tick,0x7ffdf681f424,42978934,0,0x0,8
tick,0x7ffdf681f424,42981036,0,0x0,8
tick,0x7ffdf681f424,42983026,0,0x0,8
tick,0x7ffdf681f424,42985029,0,0x0,8
tick,0x7ffdf681f424,42986973,0,0x0,8
tick,0x7ffdf681f424,42989016,0,0x0,8
tick,0x7ffdf681f424,42991017,0,0x0,8
tick,0x7ffdf681f424,42993003,0,0x0,8
tick,0x7ffdf681f424,42994996,0,0x0,8
tick,0x7ffdf681f424,42996990,0,0x0,8
tick,0x7ffdf681f424,42999013,0,0x0,8
tick,0x7ffdf681f424,43000987,0,0x0,8
tick,0x7ffdf681f424,43002981,0,0x0,8
tick,0x7ffdf681f424,43004976,0,0x0,8
tick,0x7ffdf681f424,43006964,0,0x0,8
tick,0x7ffdf681f424,43008906,0,0x0,8
tick,0x7ffdf681f424,43010978,0,0x0,8
tick,0x7ffdf681f424,43012951,0,0x0,8
tick,0x7ffdf681f424,43014945,0,0x0,8
tick,0x7ffdf681f424,43016935,0,0x0,8
tick,0x7ffdf681f424,43018932,0,0x0,8
tick,0x7ffdf681f424,43020929,0,0x0,8
tick,0x7ffdf681f424,43022926,0,0x0,8
tick,0x7ffdf681f424,43024923,0,0x0,8
tick,0x7ffdf681f424,43026915,0,0x0,8
tick,0x7ffdf681f424,43028868,0,0x0,8
tick,0x7ffdf681f424,43030943,0,0x0,8
tick,0x7ffdf681f424,43032892,0,0x0,8
tick,0x7ffdf681f424,43034758,0,0x0,8
tick,0x7ffdf681f424,43036885,0,0x0,8
tick,0x7ffdf681f424,43038886,0,0x0,8
tick,0x7ffdf681f424,43040875,0,0x0,8
tick,0x7ffdf681f424,43042873,0,0x0,8
tick,0x7ffdf681f424,43044875,0,0x0,8
tick,0x7ffdf681f424,43046877,0,0x0,8
tick,0x7ffdf681f424,43048875,0,0x0,8
tick,0x7ffdf681f424,43050857,0,0x0,8
tick,0x7ffdf681f424,43052883,0,0x0,8
tick,0x7ffdf681f424,43054841,0,0x0,8
tick,0x7ffdf681f424,43056838,0,0x0,8
tick,0x7ffdf681f424,43058832,0,0x0,8
tick,0x7ffdf681f424,43060829,0,0x0,8
tick,0x7ffdf681f424,43062839,0,0x0,8
tick,0x7ffdf681f424,43064827,0,0x0,8
tick,0x7ffdf681f424,43066822,0,0x0,8
tick,0x7ffdf681f424,43068807,0,0x0,8
tick,0x7ffdf681f424,43070696,0,0x0,8
tick,0x7ffdf681f424,43072799,0,0x0,8
tick,0x7ffdf681f424,43074806,0,0x0,8
tick,0x7ffdf681f424,43076798,0,0x0,8
tick,0x7ffdf681f424,43078803,0,0x0,8
tick,0x7ffdf681f424,43080776,0,0x0,8
tick,0x7ffdf681f424,43082767,0,0x0,8
tick,0x7ffdf681f424,43084765,0,0x0,8
tick,0x7ffdf681f424,43086766,0,0x0,8
tick,0x7ffdf681f424,43088762,0,0x0,8
tick,0x7ffdf681f424,43090757,0,0x0,8
tick,0x7ffdf681f424,43092730,0,0x0,8
tick,0x7ffdf681f424,43094735,0,0x0,8
tick,0x7ffdf681f424,43096746,0,0x0,8
tick,0x7ffdf681f424,43098724,0,0x0,8
tick,0x7ffdf681f424,43100724,0,0x0,8
tick,0x7ffdf681f424,43102711,0,0x0,8
tick,0x7ffdf681f424,43104711,0,0x0,8
tick,0x7ffdf681f424,43106703,0,0x0,8
tick,0x7ffdf681f424,43108702,0,0x0,8
tick,0x7ffdf681f424,43110582,0,0x0,8
tick,0x7ffdf681f424,43112700,0,0x0,8
tick,0x7ffdf681f424,43114686,0,0x0,8
tick,0x7ffdf681f424,43116675,0,0x0,8
tick,0x7ffdf681f424,43118703,0,0x0,8
tick,0x7ffdf681f424,43120571,0,0x0,8
tick,0x7ffdf681f424,43122666,0,0x0,8
tick,0x7ffdf681f424,43124660,0,0x0,8
tick,0x7ffdf681f424,43126658,0,0x0,8
tick,0x7ffdf681f424,43128669,0,0x0,8
tick,0x7ffdf681f424,43130664,0,0x0,8
tick,0x7ffdf681f424,43132646,0,0x0,8
tick,0x7ffdf681f424,43134635,0,0x0,8
tick,0x7ffdf681f424,43136668,0,0x0,8
tick,0x7ffdf681f424,43138623,0,0x0,8
tick,0x7ffdf681f424,43140644,0,0x0,8
tick,0x7ffdf681f424,43142611,0,0x0,8
tick,0x7ffdf681f424,43144496,0,0x0,8
tick,0x7ffdf681f424,43146599,0,0x0,8
tick,0x7ffdf681f424,43148589,0,0x0,8
tick,0x7ffdf681f424,43150585,0,0x0,8
tick,0x7ffdf681f424,43152583,0,0x0,8
tick,0x7ffdf681f424,43154582,0,0x0,8
tick,0x7ffdf681f424,43156575,0,0x0,8
tick,0x7ffdf681f424,43158570,0,0x0,8
tick,0x7ffdf681f424,43160560,0,0x0,8
tick,0x7ffdf681f424,43162465,0,0x0,8
tick,0x7ffdf681f424,43164554,0,0x0,8
tick,0x7ffdf681f424,43166548,0,0x0,8
tick,0x7ffdf681f424,43168554,0,0x0,8
tick,0x7ffdf681f424,43170540,0,0x0,8
tick,0x7ffdf681f424,43172526,0,0x0,8
tick,0x7ffdf681f424,43174574,0,0x0,8
tick,0x7ffdf681f424,43176527,0,0x0,8
tick,0x7ffdf681f424,43178522,0,0x0,8
tick,0x7ffdf681f424,43180503,0,0x0,8
tick,0x7ffdf681f424,43182504,0,0x0,8
tick,0x7ffdf681f424,43184347,0,0x0,8
tick,0x7ffdf681f424,43186495,0,0x0,8
tick,0x7ffdf681f424,43188492,0,0x0,8
tick,0x7ffdf681f424,43190373,0,0x0,8
tick,0x7ffdf681f424,43192475,0,0x0,8
tick,0x7ffdf681f424,43194484,0,0x0,8
tick,0x7ffdf681f424,43196459,0,0x0,8
tick,0x7ffdf681f424,43198460,0,0x0,8
tick,0x7ffdf681f424,43200456,0,0x0,8
tick,0x7ffdf681f424,43202450,0,0x0,8
tick,0x7ffdf681f424,43204454,0,0x0,8
tick,0x7ffdf681f424,43206454,0,0x0,8
tick,0x7ffdf681f424,43208436,0,0x0,8
tick,0x7ffdf681f424,43210427,0,0x0,8
tick,0x7ffdf681f424,43212318,0,0x0,8
tick,0x7ffdf681f424,43214418,0,0x0,8
tick,0x7ffdf681f424,43216415,0,0x0,8
tick,0x7ffdf681f424,43218420,0,0x0,8
tick,0x7ffdf681f424,43220407,0,0x0,8
tick,0x7ffdf681f424,43222399,0,0x0,8
tick,0x7ffdf681f424,43224389,0,0x0,8
tick,0x7ffdf681f424,43226385,0,0x0,8
tick,0x7ffdf681f424,43228423,0,0x0,8
tick,0x7ffdf681f424,43230376,0,0x0,8
tick,0x7ffdf681f424,43232381,0,0x0,8
tick,0x7ffdf681f424,43234337,0,0x0,8
tick,0x7ffdf681f424,43236362,0,0x0,8
tick,0x7ffdf681f424,43238356,0,0x0,8
tick,0x7ffdf681f424,43240352,0,0x0,8
tick,0x7ffdf681f424,43242349,0,0x0,8
tick,0x7ffdf681f424,43244334,0,0x0,8
tick,0x7ffdf681f424,43246335,0,0x0,8
tick,0x7ffdf681f424,43248326,0,0x0,8
tick,0x7ffdf681f424,43250336,0,0x0,8
tick,0x7ffdf681f424,43252299,0,0x0,8
tick,0x7ffdf681f424,43254214,0,0x0,8
tick,0x7ffdf681f424,43256344,0,0x0,8
tick,0x7ffdf681f424,43258191,0,0x0,8
tick,0x7ffdf681f424,43260137,0,0x0,8
tick,0x7ffdf681f424,43262235,0,0x0,8
tick,0x7ffdf681f424,43264297,0,0x0,8
tick,0x7ffdf681f424,43266278,0,0x0,8
tick,0x7ffdf681f424,43268273,0,0x0,8
tick,0x7ffdf681f424,43270274,0,0x0,8
tick,0x7ffdf681f424,43272256,0,0x0,8
tick,0x7ffdf681f424,43274255,0,0x0,8
tick,0x7ffdf681f424,43276254,0,0x0,8
tick,0x7ffdf681f424,43278243,0,0x0,8
tick,0x7ffdf681f424,43280245,0,0x0,8
tick,0x7ffdf681f424,43282214,0,0x0,8
tick,0x7ffdf681f424,43284235,0,0x0,8
tick,0x7ffdf681f424,43286226,0,0x0,8
tick,0x7ffdf681f424,43288103,0,0x0,8
tick,0x7ffdf681f424,43290209,0,0x0,8
tick,0x7ffdf681f424,43292204,0,0x0,8
tick,0x7ffdf681f424,43294240,0,0x0,8
tick,0x7ffdf681f424,43296159,0,0x0,8
tick,0x7ffdf681f424,43298196,0,0x0,8
tick,0x7ffdf681f424,43300188,0,0x0,8
tick,0x7ffdf681f424,43302181,0,0x0,8
tick,0x7ffdf681f424,43304071,0,0x0,8
tick,0x7ffdf681f424,43306177,0,0x0,8
tick,0x7ffdf681f424,43308169,0,0x0,8
tick,0x7ffdf681f424,43310160,0,0x0,8
tick,0x7ffdf681f424,43312161,0,0x0,8
tick,0x7ffdf681f424,43314147,0,0x0,8
tick,0x7ffdf681f424,43316175,0,0x0,8
tick,0x7ffdf681f424,43318137,0,0x0,8
tick,0x7ffdf681f424,43320138,0,0x0,8
tick,0x7ffdf681f424,43322134,0,0x0,8
tick,0x7ffdf681f424,43324129,0,0x0,8
tick,0x7ffdf681f424,43326119,0,0x0,8
tick,0x7ffdf681f424,43328129,0,0x0,8
tick,0x7ffdf681f424,43330143,0,0x0,8
tick,0x7ffdf681f424,43332100,0,0x0,8
tick,0x7ffdf681f424,43333960,0,0x0,8
tick,0x7ffdf681f424,43336091,0,0x0,8
tick,0x7ffdf681f424,43338042,0,0x0,8
tick,0x7ffdf681f424,43340077,0,0x0,8
tick,0x7ffdf681f424,43342076,0,0x0,8
tick,0x7ffdf681f424,43344076,0,0x0,8
tick,0x7ffdf681f424,43345951,0,0x0,8
tick,0x7ffdf681f424,43348051,0,0x0,8
tick,0x7ffdf681f424,43350052,0,0x0,8
tick,0x7ffdf681f424,43352045,0,0x0,8
tick,0x7ffdf681f424,43353938,0,0x0,8
tick,0x7ffdf681f424,43355900,0,0x0,8
tick,0x7ffdf681f424,43358032,0,0x0,8
tick,0x7ffdf681f424,43360069,0,0x0,8
tick,0x7ffdf681f424,43362033,0,0x0,8
tick,0x7ffdf681f424,43364009,0,0x0,8
tick,0x7ffdf681f424,43366001,0,0x0,8
tick,0x7ffdf681f424,43367998,0,0x0,8
tick,0x7ffdf681f424,43369990,0,0x0,8
tick,0x7ffdf681f424,43371998,0,0x0,8
tick,0x7ffdf681f424,43373994,0,0x0,8
tick,0x7ffdf681f424,43375974,0,0x0,8
tick,0x7ffdf681f424,43377978,0,0x0,8
tick,0x7ffdf681f424,43379963,0,0x0,8
tick,0x7ffdf681f424,43382007,0,0x0,8
tick,0x7ffdf681f424,43383951,0,0x0,8
tick,0x7ffdf681f424,43385951,0,0x0,8
tick,0x7ffdf681f424,43387955,0,0x0,8
tick,0x7ffdf681f424,43389942,0,0x0,8
tick,0x7ffdf681f424,43391926,0,0x0,8
tick,0x7ffdf681f424,43393943,0,0x0,8
tick,0x7ffdf681f424,43395814,0,0x0,8
tick,0x7ffdf681f424,43397941,0,0x0,8
tick,0x7ffdf681f424,43399921,0,0x0,8
tick,0x7ffdf681f424,43401906,0,0x0,8
tick,0x7ffdf681f424,43403831,0,0x0,8
tick,0x7ffdf681f424,43405901,0,0x0,8
tick,0x7ffdf681f424,43407789,0,0x0,8
tick,0x7ffdf681f424,43409780,0,0x0,8
tick,0x7ffdf681f424,43411863,0,0x0,8
tick,0x7ffdf681f424,43413878,0,0x0,8
tick,0x7ffdf681f424,43415876,0,0x0,8
tick,0x7ffdf681f424,43417872,0,0x0,8
tick,0x7ffdf681f424,43419889,0,0x0,8
tick,0x7ffdf681f424,43421856,0,0x0,8
tick,0x7ffdf681f424,43423847,0,0x0,8
tick,0x7ffdf681f424,43425894,0,0x0,8
tick,0x7ffdf681f424,43427843,0,0x0,8
tick,0x7ffdf681f424,43429831,0,0x0,8
tick,0x7ffdf681f424,43431829,0,0x0,8
tick,0x7ffdf681f424,43433828,0,0x0,8
tick,0x7ffdf681f424,43435819,0,0x0,8
tick,0x7ffdf681f424,43437786,0,0x0,8
tick,0x7ffdf681f424,43439825,0,0x0,8
tick,0x7ffdf681f424,43441796,0,0x0,8
tick,0x7ffdf681f424,43443806,0,0x0,8
tick,0x7ffdf681f424,43445688,0,0x0,8
tick,0x7ffdf681f424,43447821,0,0x0,8
tick,0x7ffdf681f424,43449793,0,0x0,8
tick,0x7ffdf681f424,43451786,0,0x0,8
tick,0x7ffdf681f424,43453776,0,0x0,8
tick,0x7ffdf681f424,43455768,0,0x0,8
tick,0x7ffdf681f424,43457771,0,0x0,8
tick,0x7ffdf681f424,43459744,0,0x0,8
tick,0x7ffdf681f424,43461760,0,0x0,8
tick,0x7ffdf681f424,43463755,0,0x0,8
tick,0x7ffdf681f424,43465769,0,0x0,8
tick,0x7ffdf681f424,43467742,0,0x0,8
tick,0x7ffdf681f424,43469765,0,0x0,8
tick,0x7ffdf681f424,43471730,0,0x0,8
tick,0x7ffdf681f424,43473721,0,0x0,8
tick,0x7ffdf681f424,43475729,0,0x0,8
tick,0x7ffdf681f424,43477714,0,0x0,8
tick,0x7ffdf681f424,43479703,0,0x0,8
tick,0x7ffdf681f424,43481623,0,0x0,8
tick,0x7ffdf681f424,43483614,0,0x0,8
tick,0x7ffdf681f424,43485692,0,0x0,8
tick,0x7ffdf681f424,43487572,0,0x0,8
tick,0x7ffdf681f424,43489690,0,0x0,8
tick,0x7ffdf681f424,43491695,0,0x0,8
tick,0x7ffdf681f424,43493673,0,0x0,8
tick,0x7ffdf681f424,43495611,0,0x0,8
tick,0x7ffdf681f424,43497665,0,0x0,8
tick,0x7ffdf681f424,43499663,0,0x0,8
tick,0x7ffdf681f424,43501674,0,0x0,8
tick,0x7ffdf681f424,43503583,0,0x0,8
tick,0x7ffdf681f424,43505642,0,0x0,8
tick,0x7ffdf681f424,43507633,0,0x0,8
tick,0x7ffdf681f424,43509636,0,0x0,8
tick,0x7ffdf681f424,43511627,0,0x0,8
tick,0x7ffdf681f424,43513645,0,0x0,8
tick,0x7ffdf681f424,43515610,0,0x0,8
tick,0x7ffdf681f424,43517607,0,0x0,8
tick,0x7ffdf681f424,43519602,0,0x0,8
tick,0x7ffdf681f424,43521596,0,0x0,8
tick,0x7ffdf681f424,43523599,0,0x0,8
tick,0x7ffdf681f424,43525590,0,0x0,8
tick,0x7ffdf681f424,43527583,0,0x0,8
tick,0x7ffdf681f424,43529574,0,0x0,8
tick,0x7ffdf681f424,43531605,0,0x0,8
tick,0x7ffdf681f424,43533571,0,0x0,8
tick,0x7ffdf681f424,43535588,0,0x0,8
tick,0x7ffdf681f424,43537444,0,0x0,8
tick,0x7ffdf681f424,43539578,0,0x0,8
tick,0x7ffdf681f424,43541542,0,0x0,8
tick,0x7ffdf681f424,43543537,0,0x0,8
tick,0x7ffdf681f424,43545527,0,0x0,8
tick,0x7ffdf681f424,43547525,0,0x0,8
tick,0x7ffdf681f424,43549524,0,0x0,8
tick,0x7ffdf681f424,43551502,0,0x0,8
tick,0x7ffdf681f424,43553505,0,0x0,8
tick,0x7ffdf681f424,43555487,0,0x0,8
tick,0x7ffdf681f424,43557366,0,0x0,8
tick,0x7ffdf681f424,43559425,0,0x0,8
tick,0x7ffdf681f424,43561462,0,0x0,8
tick,0x7ffdf681f424,43563477,0,0x0,8
tick,0x7ffdf681f424,43565478,0,0x0,8
tick,0x7ffdf681f424,43567355,0,0x0,8
tick,0x7ffdf681f424,43569467,0,0x0,8
tick,0x7ffdf681f424,43571365,0,0x0,8
tick,0x7ffdf681f424,43573453,0,0x0,8
tick,0x7ffdf681f424,43575453,0,0x0,8
tick,0x7ffdf681f424,43577438,0,0x0,8
tick,0x7ffdf681f424,43579482,0,0x0,8
tick,0x7ffdf681f424,43581427,0,0x0,8
tick,0x7ffdf681f424,43583447,0,0x0,8
tick,0x7ffdf681f424,43585417,0,0x0,8
tick,0x7ffdf681f424,43587305,0,0x0,8
tick,0x7ffdf681f424,43589418,0,0x0,8
tick,0x7ffdf681f424,43591399,0,0x0,8
tick,0x7ffdf681f424,43593401,0,0x0,8
tick,0x7ffdf681f424,43595397,0,0x0,8
tick,0x7ffdf681f424,43597396,0,0x0,8
tick,0x7ffdf681f424,43599382,0,0x0,8
tick,0x7ffdf681f424,43601389,0,0x0,8
tick,0x7ffdf681f424,43603374,0,0x0,8
tick,0x7ffdf681f424,43605373,0,0x0,8
tick,0x7ffdf681f424,43607360,0,0x0,8
tick,0x7ffdf681f424,43609358,0,0x0,8
tick,0x7ffdf681f424,43611348,0,0x0,8
tick,0x7ffdf681f424,43613353,0,0x0,8
tick,0x7ffdf681f424,43615339,0,0x0,8
tick,0x7ffdf681f424,43617340,0,0x0,8
tick,0x7ffdf681f424,43619225,0,0x0,8
tick,0x7ffdf681f424,43621227,0,0x0,8
tick,0x7ffdf681f424,43622376,0,0x0,8
tick,0x7ffdf681f424,43624332,0,0x0,8
tick,0x7ffdf681f424,43626311,0,0x0,8
tick,0x7ffdf681f424,43627537,0,0x0,8
tick,0x7ffdf681f424,43628638,0,0x0,8
tick,0x7ffdf681f424,43630712,0,0x0,8
tick,0x7ffdf681f424,43632701,0,0x0,8
tick,0x7ffdf681f424,43634857,0,0x0,8
tick,0x7ffdf681f424,43636857,0,0x0,8
tick,0x7ffdf681f424,43638021,0,0x0,8
tick,0x7ffdf681f424,43639225,0,0x0,8
tick,0x7ffdf681f424,43641201,0,0x0,8
tick,0x7ffdf681f424,43642395,0,0x0,8
tick,0x7ffdf681f424,43644342,0,0x0,8
tick,0x7ffdf681f424,43646328,0,0x0,8
tick,0x7ffdf681f424,43648362,0,0x0,8
tick,0x7ffdf681f424,43649453,0,0x0,8
tick,0x7ffdf681f424,43651455,0,0x0,8
tick,0x7ffdf681f424,43653480,0,0x0,8
tick,0x7ffdf681f424,43655440,0,0x0,8
tick,0x7ffdf681f424,43657423,0,0x0,8
tick,0x7ffdf681f424,43659444,0,0x0,8
tick,0x7ffdf681f424,43661407,0,0x0,8
tick,0x7ffdf681f424,43663430,0,0x0,8
tick,0x7ffdf681f424,43665460,0,0x0,8
tick,0x7ffdf681f424,43667443,0,0x0,8
tick,0x7ffdf681f424,43669428,0,0x0,8
tick,0x7ffdf681f424,43671437,0,0x0,8
tick,0x7ffdf681f424,43673436,0,0x0,8
tick,0x7ffdf681f424,43675432,0,0x0,8
tick,0x7ffdf681f424,43677426,0,0x0,8
tick,0x7ffdf681f424,43679417,0,0x0,8
tick,0x7ffdf681f424,43681410,0,0x0,8
tick,0x7ffdf681f424,43683405,0,0x0,8
tick,0x7ffdf681f424,43685408,0,0x0,8
tick,0x7ffdf681f424,43687287,0,0x0,8
tick,0x7ffdf681f424,43689399,0,0x0,8
tick,0x7ffdf681f424,43691388,0,0x0,8
tick,0x7ffdf681f424,43693376,0,0x0,8
tick,0x7ffdf681f424,43695377,0,0x0,8
tick,0x7ffdf681f424,43697320,0,0x0,8
tick,0x7ffdf681f424,43699373,0,0x0,8
tick,0x7ffdf681f424,43701357,0,0x0,8
tick,0x7ffdf681f424,43703367,0,0x0,8
tick,0x7ffdf681f424,43705273,0,0x0,8
tick,0x7ffdf681f424,43707271,0,0x0,8
tick,0x7ffdf681f424,43709349,0,0x0,8
tick,0x7ffdf681f424,43711332,0,0x0,8
tick,0x7ffdf681f424,43713226,0,0x0,8
tick,0x7ffdf681f424,43715318,0,0x0,8
tick,0x7ffdf681f424,43717318,0,0x0,8
tick,0x7ffdf681f424,43719262,0,0x0,8
tick,0x7ffdf681f424,43721313,0,0x0,8
tick,0x7ffdf681f424,43723304,0,0x0,8
tick,0x7ffdf681f424,43725295,0,0x0,8
tick,0x7ffdf681f424,43727297,0,0x0,8
tick,0x7ffdf681f424,43729184,0,0x0,8
tick,0x7ffdf681f424,43731281,0,0x0,8
tick,0x7ffdf681f424,43733277,0,0x0,8
tick,0x7ffdf681f424,43735267,0,0x0,8
tick,0x7ffdf681f424,43737263,0,0x0,8
tick,0x7ffdf681f424,43739154,0,0x0,8
tick,0x7ffdf681f424,43741283,0,0x0,8
tick,0x7ffdf681f424,43743254,0,0x0,8
tick,0x7ffdf681f424,43745107,0,0x0,8
tick,0x7ffdf681f424,43747133,0,0x0,8
tick,0x7ffdf681f424,43749179,0,0x0,8
tick,0x7ffdf681f424,43751217,0,0x0,8
tick,0x7ffdf681f424,43753215,0,0x0,8
tick,0x7ffdf681f424,43755216,0,0x0,8
tick,0x7ffdf681f424,43757200,0,0x0,8
tick,0x7ffdf681f424,43759193,0,0x0,8
tick,0x7ffdf681f424,43761189,0,0x0,8
tick,0x7ffdf681f424,43763158,0,0x0,8
tick,0x7ffdf681f424,43765187,0,0x0,8
tick,0x7ffdf681f424,43767187,0,0x0,8
tick,0x7ffdf681f424,43769208,0,0x0,8
tick,0x7ffdf681f424,43771168,0,0x0,8
tick,0x7ffdf681f424,43773156,0,0x0,8
tick,0x7ffdf681f424,43775161,0,0x0,8
tick,0x7ffdf681f424,43777174,0,0x0,8
tick,0x7ffdf681f424,43779043,0,0x0,8
tick,0x7ffdf681f424,43781084,0,0x0,8
tick,0x7ffdf681f424,43783151,0,0x0,8
tick,0x7ffdf681f424,43785002,0,0x0,8
tick,0x7ffdf681f424,43787128,0,0x0,8
tick,0x7ffdf681f424,43789127,0,0x0,8
tick,0x7ffdf681f424,43791120,0,0x0,8
tick,0x7ffdf681f424,43793115,0,0x0,8
tick,0x7ffdf681f424,43795115,0,0x0,8
tick,0x7ffdf681f424,43797107,0,0x0,8
tick,0x7ffdf681f424,43799101,0,0x0,8
tick,0x7ffdf681f424,43801089,0,0x0,8
tick,0x7ffdf681f424,43803090,0,0x0,8
tick,0x7ffdf681f424,43805084,0,0x0,8
tick,0x7ffdf681f424,43807024,0,0x0,8
tick,0x7ffdf681f424,43809070,0,0x0,8
tick,0x7ffdf681f424,43810961,0,0x0,8
tick,0x7ffdf681f424,43813058,0,0x0,8
tick,0x7ffdf681f424,43815054,0,0x0,8
tick,0x7ffdf681f424,43817050,0,0x0,8
tick,0x7ffdf681f424,43819043,0,0x0,8
tick,0x7ffdf681f424,43821016,0,0x0,8
tick,0x7ffdf681f424,43823039,0,0x0,8
tick,0x7ffdf681f424,43825055,0,0x0,8
tick,0x7ffdf681f424,43827047,0,0x0,8
tick,0x7ffdf681f424,43828866,0,0x0,8
tick,0x7ffdf681f424,43831011,0,0x0,8
tick,0x7ffdf681f424,43833017,0,0x0,8
tick,0x7ffdf681f424,43835008,0,0x0,8
tick,0x7ffdf681f424,43836994,0,0x0,8
tick,0x7ffdf681f424,43838998,0,0x0,8
tick,0x7ffdf681f424,43840986,0,0x0,8
tick,0x7ffdf681f424,43842977,0,0x0,8
tick,0x7ffdf681f424,43844975,0,0x0,8
tick,0x7ffdf681f424,43846969,0,0x0,8
tick,0x7ffdf681f424,43848971,0,0x0,8
tick,0x7ffdf681f424,43851005,0,0x0,8
tick,0x7ffdf681f424,43852959,0,0x0,8
tick,0x7ffdf681f424,43854860,0,0x0,8
tick,0x7ffdf681f424,43856831,0,0x0,8
tick,0x7ffdf681f424,43858965,0,0x0,8
tick,0x7ffdf681f424,43860926,0,0x0,8
tick,0x7ffdf681f424,43862853,0,0x0,8
tick,0x7ffdf681f424,43864925,0,0x0,8
tick,0x7ffdf681f424,43866918,0,0x0,8
tick,0x7ffdf681f424,43868911,0,0x0,8
tick,0x7ffdf681f424,43870802,0,0x0,8
tick,0x7ffdf681f424,43872844,0,0x0,8
tick,0x7ffdf681f424,43874900,0,0x0,8
tick,0x7ffdf681f424,43876897,0,0x0,8
tick,0x7ffdf681f424,43878883,0,0x0,8
tick,0x7ffdf681f424,43880883,0,0x0,8
tick,0x7ffdf681f424,43882874,0,0x0,8
tick,0x7ffdf681f424,43884870,0,0x0,8
tick,0x7ffdf681f424,43886868,0,0x0,8
tick,0x7ffdf681f424,43888860,0,0x0,8
tick,0x7ffdf681f424,43890853,0,0x0,8
tick,0x7ffdf681f424,43892846,0,0x0,8
tick,0x7ffdf681f424,43894784,0,0x0,8
tick,0x7ffdf681f424,43896834,0,0x0,8
tick,0x7ffdf681f424,43898832,0,0x0,8
tick,0x7ffdf681f424,43900826,0,0x0,8
tick,0x7ffdf681f424,43902837,0,0x0,8
tick,0x7ffdf681f424,43904815,0,0x0,8
tick,0x7ffdf681f424,43906710,0,0x0,8
tick,0x7ffdf681f424,43908841,0,0x0,8
tick,0x7ffdf681f424,43910796,0,0x0,8
tick,0x7ffdf681f424,43912694,0,0x0,8
tick,0x7ffdf681f424,43914679,0,0x0,8
tick,0x7ffdf681f424,43916789,0,0x0,8
tick,0x7ffdf681f424,43918777,0,0x0,8
tick,0x7ffdf681f424,43920668,0,0x0,8
tick,0x7ffdf681f424,43922768,0,0x0,8
tick,0x7ffdf681f424,43924763,0,0x0,8
tick,0x7ffdf681f424,43926758,0,0x0,8
tick,0x7ffdf681f424,43928755,0,0x0,8
tick,0x7ffdf681f424,43930663,0,0x0,8
tick,0x7ffdf681f424,43932744,0,0x0,8
tick,0x7ffdf681f424,43934740,0,0x0,8
tick,0x7ffdf681f424,43936729,0,0x0,8
tick,0x7ffdf681f424,43938631,0,0x0,8
tick,0x7ffdf681f424,43940719,0,0x0,8
tick,0x7ffdf681f424,43942646,0,0x0,8
tick,0x7ffdf681f424,43944632,0,0x0,8
tick,0x7ffdf681f424,43946597,0,0x0,8
tick,0x7ffdf681f424,43948599,0,0x0,8
tick,0x7ffdf681f424,43950574,0,0x0,8
tick,0x7ffdf681f424,43952548,0,0x0,8
tick,0x7ffdf681f424,43954553,0,0x0,8
tick,0x7ffdf681f424,43956545,0,0x0,8
tick,0x7ffdf681f424,43958541,0,0x0,8
tick,0x7ffdf681f424,43960502,0,0x0,8
tick,0x7ffdf681f424,43962548,0,0x0,8
tick,0x7ffdf681f424,43964528,0,0x0,8
tick,0x7ffdf681f424,43966487,0,0x0,8
tick,0x7ffdf681f424,43968521,0,0x0,8
tick,0x7ffdf681f424,43970624,0,0x0,8
tick,0x7ffdf681f424,43972513,0,0x0,8
tick,0x7ffdf681f424,43974436,0,0x0,8
tick,0x7ffdf681f424,43976530,0,0x0,8
tick,0x7ffdf681f424,43978539,0,0x0,8
tick,0x7ffdf681f424,43980440,0,0x0,8
tick,0x7ffdf681f424,43982441,0,0x0,8
tick,0x7ffdf681f424,43984502,0,0x0,8
tick,0x7ffdf681f424,43986479,0,0x0,8
tick,0x7ffdf681f424,43988464,0,0x0,8
tick,0x7ffdf681f424,43990511,0,0x0,8
tick,0x7ffdf681f424,43992434,0,0x0,8
tick,0x7ffdf681f424,43994429,0,0x0,8
tick,0x7ffdf681f424,43996421,0,0x0,8
tick,0x7ffdf681f424,43998452,0,0x0,8
tick,0x7ffdf681f424,44000413,0,0x0,8
tick,0x7ffdf681f424,44002418,0,0x0,8
tick,0x7ffdf681f424,44004356,0,0x0,8
tick,0x7ffdf681f424,44006433,0,0x0,8
tick,0x7ffdf681f424,44008359,0,0x0,8
tick,0x7ffdf681f424,44010358,0,0x0,8
tick,0x7ffdf681f424,44012387,0,0x0,8
tick,0x7ffdf681f424,44014436,0,0x0,8
tick,0x7ffdf681f424,44016430,0,0x0,8
tick,0x7ffdf681f424,44018345,0,0x0,8
tick,0x7ffdf681f424,44020428,0,0x0,8
tick,0x7ffdf681f424,44022340,0,0x0,8
tick,0x7ffdf681f424,44024338,0,0x0,8
tick,0x7ffdf681f424,44026410,0,0x0,8
tick,0x7ffdf681f424,44028396,0,0x0,8
tick,0x7ffdf681f424,44030333,0,0x0,8
tick,0x7ffdf681f424,44032311,0,0x0,8
tick,0x7ffdf681f424,44034348,0,0x0,8
tick,0x7ffdf681f424,44036300,0,0x0,8
tick,0x7ffdf681f424,44038308,0,0x0,8
tick,0x7ffdf681f424,44040307,0,0x0,8
tick,0x7ffdf681f424,44042314,0,0x0,8
tick,0x7ffdf681f424,44044350,0,0x0,8
tick,0x7ffdf681f424,44046273,0,0x0,8
tick,0x7ffdf681f424,44048311,0,0x0,8
tick,0x7ffdf681f424,44050310,0,0x0,8
tick,0x7ffdf681f424,44052266,0,0x0,8
tick,0x7ffdf681f424,44054289,0,0x0,8
tick,0x7ffdf681f424,44056245,0,0x0,8
tick,0x7ffdf681f424,44058250,0,0x0,8
tick,0x7ffdf681f424,44060297,0,0x0,8
tick,0x7ffdf681f424,44062309,0,0x0,8
tick,0x7ffdf681f424,44064260,0,0x0,8
tick,0x7ffdf681f424,44066238,0,0x0,8
tick,0x7ffdf681f424,44068229,0,0x0,8
tick,0x7ffdf681f424,44070237,0,0x0,8
tick,0x7ffdf681f424,44072268,0,0x0,8
tick,0x7ffdf681f424,44074233,0,0x0,8
tick,0x7ffdf681f424,44076232,0,0x0,8
tick,0x7ffdf681f424,44078272,0,0x0,8
tick,0x7ffdf681f424,44080209,0,0x0,8
tick,0x7ffdf681f424,44082196,0,0x0,8
tick,0x7ffdf681f424,44084166,0,0x0,8
tick,0x7ffdf681f424,44086214,0,0x0,8
tick,0x7ffdf681f424,44088193,0,0x0,8
tick,0x7ffdf681f424,44090180,0,0x0,8
tick,0x7ffdf681f424,44092155,0,0x0,8
tick,0x7ffdf681f424,44094234,0,0x0,8
tick,0x7ffdf681f424,44096210,0,0x0,8
tick,0x7ffdf681f424,44098240,0,0x0,8
tick,0x7ffdf681f424,44100236,0,0x0,8
tick,0x7ffdf681f424,44102236,0,0x0,8
tick,0x7ffdf681f424,44104186,0,0x0,8
tick,0x7ffdf681f424,44106280,0,0x0,8
tick,0x7ffdf681f424,44108252,0,0x0,8
tick,0x7ffdf681f424,44110216,0,0x0,8
tick,0x7ffdf681f424,44112185,0,0x0,8
tick,0x7ffdf681f424,44114207,0,0x0,8
tick,0x7ffdf681f424,44116264,0,0x0,8
tick,0x7ffdf681f424,44118090,0,0x0,8
tick,0x7ffdf681f424,44120191,0,0x0,8
tick,0x7ffdf681f424,44122079,0,0x0,8
tick,0x7ffdf681f424,44124180,0,0x0,8
tick,0x7ffdf681f424,44126173,0,0x0,8
tick,0x7ffdf681f424,44128209,0,0x0,8
tick,0x7ffdf681f424,44130214,0,0x0,8
tick,0x7ffdf681f424,44132195,0,0x0,8
tick,0x7ffdf681f424,44134193,0,0x0,8
tick,0x7ffdf681f424,44136173,0,0x0,8
tick,0x7ffdf681f424,44138139,0,0x0,8
tick,0x7ffdf681f424,44140192,0,0x0,8
tick,0x7ffdf681f424,44142176,0,0x0,8
tick,0x7ffdf681f424,44144208,0,0x0,8
tick,0x7ffdf681f424,44146066,0,0x0,8
tick,0x7ffdf681f424,44148162,0,0x0,8
tick,0x7ffdf681f424,44150174,0,0x0,8
tick,0x7ffdf681f424,44152102,0,0x0,8
tick,0x7ffdf681f424,44154043,0,0x0,8
tick,0x7ffdf681f424,44156028,0,0x0,8
tick,0x7ffdf681f424,44158081,0,0x0,8
tick,0x7ffdf681f424,44160149,0,0x0,8
tick,0x7ffdf681f424,44162121,0,0x0,8
tick,0x7ffdf681f424,44164106,0,0x0,8
tick,0x7ffdf681f424,44166111,0,0x0,8
tick,0x7ffdf681f424,44168105,0,0x0,8
tick,0x7ffdf681f424,44170108,0,0x0,8
tick,0x7ffdf681f424,44172099,0,0x0,8
tick,0x7ffdf681f424,44174080,0,0x0,8
tick,0x7ffdf681f424,44176079,0,0x0,8
tick,0x7ffdf681f424,44178073,0,0x0,8
tick,0x7ffdf681f424,44180004,0,0x0,8
tick,0x7ffdf681f424,44182072,0,0x0,8
tick,0x7ffdf681f424,44184050,0,0x0,8
tick,0x7ffdf681f424,44186050,0,0x0,8
tick,0x7ffdf681f424,44187945,0,0x0,8
tick,0x7ffdf681f424,44189977,0,0x0,8
tick,0x7ffdf681f424,44191995,0,0x0,8
tick,0x7ffdf681f424,44193995,0,0x0,8
tick,0x7ffdf681f424,44195944,0,0x0,8
tick,0x7ffdf681f424,44197973,0,0x0,8
tick,0x7ffdf681f424,44199967,0,0x0,8
tick,0x7ffdf681f424,44201967,0,0x0,8
tick,0x7ffdf681f424,44204016,0,0x0,8
tick,0x7ffdf681f424,44205955,0,0x0,8
tick,0x7ffdf681f424,44207960,0,0x0,8
tick,0x7ffdf681f424,44209950,0,0x0,8
tick,0x7ffdf681f424,44211942,0,0x0,8
tick,0x7ffdf681f424,44213940,0,0x0,8
tick,0x7ffdf681f424,44215935,0,0x0,8
tick,0x7ffdf681f424,44217896,0,0x0,8
tick,0x7ffdf681f424,44219919,0,0x0,8
tick,0x7ffdf681f424,44221916,0,0x0,8
tick,0x7ffdf681f424,44223910,0,0x0,8
tick,0x7ffdf681f424,44225929,0,0x0,8
tick,0x7ffdf681f424,44227902,0,0x0,8
tick,0x7ffdf681f424,44229908,0,0x0,8
tick,0x7ffdf681f424,44231919,0,0x0,8
tick,0x7ffdf681f424,44233881,0,0x0,8
tick,0x7ffdf681f424,44235883,0,0x0,8
tick,0x7ffdf681f424,44237763,0,0x0,8
tick,0x7ffdf681f424,44239870,0,0x0,8
tick,0x7ffdf681f424,44241865,0,0x0,8
tick,0x7ffdf681f424,44243855,0,0x0,8
tick,0x7ffdf681f424,44245718,0,0x0,8
tick,0x7ffdf681f424,44247879,0,0x0,8
tick,0x7ffdf681f424,44249842,0,0x0,8
tick,0x7ffdf681f424,44251840,0,0x0,8
tick,0x7ffdf681f424,44253900,0,0x0,8
tick,0x7ffdf681f424,44255876,0,0x0,8
tick,0x7ffdf681f424,44257872,0,0x0,8
tick,0x7ffdf681f424,44259869,0,0x0,8
tick,0x7ffdf681f424,44261871,0,0x0,8
tick,0x7ffdf681f424,44263857,0,0x0,8
tick,0x7ffdf681f424,44265768,0,0x0,8
tick,0x7ffdf681f424,44267782,0,0x0,8
tick,0x7ffdf681f424,44269839,0,0x0,8
tick,0x7ffdf681f424,44271824,0,0x0,8
tick,0x7ffdf681f424,44273834,0,0x0,8
tick,0x7ffdf681f424,44275811,0,0x0,8
tick,0x7ffdf681f424,44277794,0,0x0,8
tick,0x7ffdf681f424,44279706,0,0x0,8
tick,0x7ffdf681f424,44281798,0,0x0,8
tick,0x7ffdf681f424,44283790,0,0x0,8
tick,0x7ffdf681f424,44285688,0,0x0,8
tick,0x7ffdf681f424,44287673,0,0x0,8
tick,0x7ffdf681f424,44289750,0,0x0,8
tick,0x7ffdf681f424,44291780,0,0x0,8
tick,0x7ffdf681f424,44293767,0,0x0,8
tick,0x7ffdf681f424,44295720,0,0x0,8
tick,0x7ffdf681f424,44297759,0,0x0,8
tick,0x7ffdf681f424,44299732,0,0x0,8
tick,0x7ffdf681f424,44301661,0,0x0,8
tick,0x7ffdf681f424,44303724,0,0x0,8
tick,0x7ffdf681f424,44305648,0,0x0,8
tick,0x7ffdf681f424,44307582,0,0x0,8
tick,0x7ffdf681f424,44309680,0,0x0,8
tick,0x7ffdf681f424,44311706,0,0x0,8
tick,0x7ffdf681f424,44313714,0,0x0,8
tick,0x7ffdf681f424,44315627,0,0x0,8
tick,0x7ffdf681f424,44317604,0,0x0,8
tick,0x7ffdf681f424,44319587,0,0x0,8
tick,0x7ffdf681f424,44321594,0,0x0,8
tick,0x7ffdf681f424,44323592,0,0x0,8
tick,0x7ffdf681f424,44325608,0,0x0,8
tick,0x7ffdf681f424,44327593,0,0x0,8
tick,0x7ffdf681f424,44329498,0,0x0,8
tick,0x7ffdf681f424,44331508,0,0x0,8
tick,0x7ffdf681f424,44333496,0,0x0,8
tick,0x7ffdf681f424,44335479,0,0x0,8
tick,0x7ffdf681f424,44337498,0,0x0,8
tick,0x7ffdf681f424,44339432,0,0x0,8
tick,0x7ffdf681f424,44341429,0,0x0,8
tick,0x7ffdf681f424,44343451,0,0x0,8
tick,0x7ffdf681f424,44345455,0,0x0,8
tick,0x7ffdf681f424,44347449,0,0x0,8
tick,0x7ffdf681f424,44349524,0,0x0,8
tick,0x7ffdf681f424,44351519,0,0x0,8
tick,0x7ffdf681f424,44353488,0,0x0,8
tick,0x7ffdf681f424,44355478,0,0x0,8
tick,0x7ffdf681f424,44357524,0,0x0,8
tick,0x7ffdf681f424,44359468,0,0x0,8
tick,0x7ffdf681f424,44361482,0,0x0,8
tick,0x7ffdf681f424,44363497,0,0x0,8
tick,0x7ffdf681f424,44364644,0,0x0,8
tick,0x7ffdf681f424,44366606,0,0x0,8
tick,0x7ffdf681f424,44368601,0,0x0,8
tick,0x7ffdf681f424,44369837,0,0x0,8
tick,0x7ffdf681f424,44372030,0,0x0,8
tick,0x7ffdf681f424,44373255,0,0x0,8
tick,0x7ffdf681f424,44374464,0,0x0,8
tick,0x7ffdf681f424,44376455,0,0x0,8
tick,0x7ffdf681f424,44377610,0,0x0,8
tick,0x7ffdf681f424,44379607,0,0x0,8
tick,0x7ffdf681f424,44381817,0,0x0,8
tick,0x7ffdf681f424,44382961,0,0x0,8
tick,0x7ffdf681f424,44384172,0,0x0,8
tick,0x7ffdf681f424,44385346,0,0x0,8
tick,0x7ffdf681f424,44387377,0,0x0,8
tick,0x7ffdf681f424,44389368,0,0x0,8
tick,0x7ffdf681f424,44390552,0,0x0,8
tick,0x7ffdf681f424,44391765,0,0x0,8
tick,0x7ffdf681f424,44392993,0,0x0,8
tick,0x7ffdf681f424,44394181,0,0x0,8
tick,0x7ffdf681f424,44395405,0,0x0,8
tick,0x7ffdf681f424,44397395,0,0x0,8
tick,0x7ffdf681f424,44399417,0,0x0,8
tick,0x7ffdf681f424,44400520,0,0x0,8
tick,0x7ffdf681f424,44401716,0,0x0,8
tick,0x7ffdf681f424,44402886,0,0x0,8
tick,0x7ffdf681f424,44404897,0,0x0,8
tick,0x7ffdf681f424,44406060,0,0x0,8
tick,0x7ffdf681f424,44408082,0,0x0,8
tick,0x7ffdf681f424,44410065,0,0x0,8
tick,0x7ffdf681f424,44411173,0,0x0,8
tick,0x7ffdf681f424,44412356,0,0x0,8
tick,0x7ffdf681f424,44413525,0,0x0,8
tick,0x7ffdf681f424,44414661,0,0x0,8
tick,0x7ffdf681f424,44415831,0,0x0,8
tick,0x7ffdf681f424,44416975,0,0x0,8
tick,0x7ffdf681f424,44418988,0,0x0,8
tick,0x7ffdf681f424,44420893,0,0x0,8
tick,0x7ffdf681f424,44422003,0,0x0,8
tick,0x7ffdf681f424,44423197,0,0x0,8
tick,0x7ffdf681f424,44424357,0,0x0,8
tick,0x7ffdf681f424,44426486,0,0x0,8
tick,0x7ffdf681f424,44427585,0,0x0,8
tick,0x7ffdf681f424,44429578,0,0x0,8
tick,0x7ffdf681f424,44431570,0,0x0,8
tick,0x7ffdf681f424,44433549,0,0x0,8
tick,0x7ffdf681f424,44435554,0,0x0,8
tick,0x7ffdf681f424,44437484,0,0x0,8
tick,0x7ffdf681f424,44439544,0,0x0,8
tick,0x7ffdf681f424,44441534,0,0x0,8
tick,0x7ffdf681f424,44443572,0,0x0,8
tick,0x7ffdf681f424,44445585,0,0x0,8
tick,0x7ffdf681f424,44447581,0,0x0,8
tick,0x7ffdf681f424,44449567,0,0x0,8
tick,0x7ffdf681f424,44451555,0,0x0,8
tick,0x7ffdf681f424,44453472,0,0x0,8
tick,0x7ffdf681f424,44455504,0,0x0,8
tick,0x7ffdf681f424,44457516,0,0x0,8
tick,0x7ffdf681f424,44459535,0,0x0,8
tick,0x7ffdf681f424,44461566,0,0x0,8
tick,0x7ffdf681f424,44463474,0,0x0,8
tick,0x7ffdf681f424,44465520,0,0x0,8
tick,0x7ffdf681f424,44467524,0,0x0,8
tick,0x7ffdf681f424,44469523,0,0x0,8
tick,0x7ffdf681f424,44471510,0,0x0,8
tick,0x7ffdf681f424,44473507,0,0x0,8
tick,0x7ffdf681f424,44475498,0,0x0,8
tick,0x7ffdf681f424,44477487,0,0x0,8
tick,0x7ffdf681f424,44479417,0,0x0,8
tick,0x7ffdf681f424,44481480,0,0x0,8
tick,0x7ffdf681f424,44483499,0,0x0,8
tick,0x7ffdf681f424,44485475,0,0x0,8
tick,0x7ffdf681f424,44487410,0,0x0,8
tick,0x7ffdf681f424,44489463,0,0x0,8
tick,0x7ffdf681f424,44491452,0,0x0,8
tick,0x7ffdf681f424,44493444,0,0x0,8
tick,0x7ffdf681f424,44495436,0,0x0,8
tick,0x7ffdf681f424,44497399,0,0x0,8
tick,0x7ffdf681f424,44499432,0,0x0,8
tick,0x7ffdf681f424,44501424,0,0x0,8
tick,0x7ffdf681f424,44503427,0,0x0,8
tick,0x7ffdf681f424,44505444,0,0x0,8
tick,0x7ffdf681f424,44507418,0,0x0,8
tick,0x7ffdf681f424,44509403,0,0x0,8
tick,0x7ffdf681f424,44511400,0,0x0,8
tick,0x7ffdf681f424,44513317,0,0x0,8
tick,0x7ffdf681f424,44515394,0,0x0,8
tick,0x7ffdf681f424,44517385,0,0x0,8
tick,0x7ffdf681f424,44519385,0,0x0,8
tick,0x7ffdf681f424,44521277,0,0x0,8
tick,0x7ffdf681f424,44523318,0,0x0,8
tick,0x7ffdf681f424,44525365,0,0x0,8
tick,0x7ffdf681f424,44527167,0,0x0,8
tick,0x7ffdf681f424,44529257,0,0x0,8
tick,0x7ffdf681f424,44531237,0,0x0,8
tick,0x7ffdf681f424,44533328,0,0x0,8
tick,0x7ffdf681f424,44535334,0,0x0,8
tick,0x7ffdf681f424,44537342,0,0x0,8
tick,0x7ffdf681f424,44539324,0,0x0,8
tick,0x7ffdf681f424,44541322,0,0x0,8
tick,0x7ffdf681f424,44543312,0,0x0,8
tick,0x7ffdf681f424,44545306,0,0x0,8
tick,0x7ffdf681f424,44547314,0,0x0,8
tick,0x7ffdf681f424,44549241,0,0x0,8
tick,0x7ffdf681f424,44551286,0,0x0,8
tick,0x7ffdf681f424,44553176,0,0x0,8
tick,0x7ffdf681f424,44555283,0,0x0,8
tick,0x7ffdf681f424,44557286,0,0x0,8
tick,0x7ffdf681f424,44559266,0,0x0,8
tick,0x7ffdf681f424,44561267,0,0x0,8
tick,0x7ffdf681f424,44563269,0,0x0,8
tick,0x7ffdf681f424,44565282,0,0x0,8
tick,0x7ffdf681f424,44567252,0,0x0,8
tick,0x7ffdf681f424,44569238,0,0x0,8
tick,0x7ffdf681f424,44571031,0,0x0,8
tick,0x7ffdf681f424,44573243,0,0x0,8
tick,0x7ffdf681f424,44575226,0,0x0,8
tick,0x7ffdf681f424,44577222,0,0x0,8
tick,0x7ffdf681f424,44579134,0,0x0,8
tick,0x7ffdf681f424,44581209,0,0x0,8
tick,0x7ffdf681f424,44583205,0,0x0,8
tick,0x7ffdf681f424,44585214,0,0x0,8
tick,0x7ffdf681f424,44587207,0,0x0,8
tick,0x7ffdf681f424,44589183,0,0x0,8
tick,0x7ffdf681f424,44591179,0,0x0,8
tick,0x7ffdf681f424,44593216,0,0x0,8
tick,0x7ffdf681f424,44595183,0,0x0,8
tick,0x7ffdf681f424,44597165,0,0x0,8
tick,0x7ffdf681f424,44599161,0,0x0,8
tick,0x7ffdf681f424,44601152,0,0x0,8
tick,0x7ffdf681f424,44603121,0,0x0,8
tick,0x7ffdf681f424,44605092,0,0x0,8
tick,0x7ffdf681f424,44607041,0,0x0,8
tick,0x7ffdf681f424,44609133,0,0x0,8
tick,0x7ffdf681f424,44611127,0,0x0,8
tick,0x7ffdf681f424,44613072,0,0x0,8
tick,0x7ffdf681f424,44615155,0,0x0,8
tick,0x7ffdf681f424,44617137,0,0x0,8
tick,0x7ffdf681f424,44619111,0,0x0,8
tick,0x7ffdf681f424,44621002,0,0x0,8
tick,0x7ffdf681f424,44623105,0,0x0,8
tick,0x7ffdf681f424,44625090,0,0x0,8
tick,0x7ffdf681f424,44627082,0,0x0,8
tick,0x7ffdf681f424,44628994,0,0x0,8
tick,0x7ffdf681f424,44631079,0,0x0,8
tick,0x7ffdf681f424,44633086,0,0x0,8
tick,0x7ffdf681f424,44635062,0,0x0,8
tick,0x7ffdf681f424,44637058,0,0x0,8
tick,0x7ffdf681f424,44639082,0,0x0,8
tick,0x7ffdf681f424,44641057,0,0x0,8
tick,0x7ffdf681f424,44643046,0,0x0,8
tick,0x7ffdf681f424,44645039,0,0x0,8
tick,0x7ffdf681f424,44647042,0,0x0,8
tick,0x7ffdf681f424,44649030,0,0x0,8
tick,0x7ffdf681f424,44651038,0,0x0,8
tick,0x7ffdf681f424,44653016,0,0x0,8
tick,0x7ffdf681f424,44655011,0,0x0,8
tick,0x7ffdf681f424,44657010,0,0x0,8
tick,0x7ffdf681f424,44659036,0,0x0,8
tick,0x7ffdf681f424,44660919,0,0x0,8
tick,0x7ffdf681f424,44662993,0,0x0,8
tick,0x7ffdf681f424,44664980,0,0x0,8
tick,0x7ffdf681f424,44666978,0,0x0,8
tick,0x7ffdf681f424,44668973,0,0x0,8
tick,0x7ffdf681f424,44670865,0,0x0,8
tick,0x7ffdf681f424,44672978,0,0x0,8
tick,0x7ffdf681f424,44674966,0,0x0,8
tick,0x7ffdf681f424,44676957,0,0x0,8
tick,0x7ffdf681f424,44678940,0,0x0,8
tick,0x7ffdf681f424,44680877,0,0x0,8
tick,0x7ffdf681f424,44682848,0,0x0,8
tick,0x7ffdf681f424,44684972,0,0x0,8
tick,0x7ffdf681f424,44686929,0,0x0,8
tick,0x7ffdf681f424,44688927,0,0x0,8
tick,0x7ffdf681f424,44690915,0,0x0,8
tick,0x7ffdf681f424,44692913,0,0x0,8
tick,0x7ffdf681f424,44694910,0,0x0,8
tick,0x7ffdf681f424,44696901,0,0x0,8
tick,0x7ffdf681f424,44698893,0,0x0,8
tick,0x7ffdf681f424,44700891,0,0x0,8
tick,0x7ffdf681f424,44702847,0,0x0,8
tick,0x7ffdf681f424,44704866,0,0x0,8
tick,0x7ffdf681f424,44706872,0,0x0,8
tick,0x7ffdf681f424,44708874,0,0x0,8
tick,0x7ffdf681f424,44710860,0,0x0,8
tick,0x7ffdf681f424,44712800,0,0x0,8
tick,0x7ffdf681f424,44714851,0,0x0,8
tick,0x7ffdf681f424,44716850,0,0x0,8
tick,0x7ffdf681f424,44718850,0,0x0,8
tick,0x7ffdf681f424,44720782,0,0x0,8
tick,0x7ffdf681f424,44722830,0,0x0,8
tick,0x7ffdf681f424,44724862,0,0x0,8
tick,0x7ffdf681f424,44726791,0,0x0,8
tick,0x7ffdf681f424,44728834,0,0x0,8
tick,0x7ffdf681f424,44730808,0,0x0,8
tick,0x7ffdf681f424,44732697,0,0x0,8
tick,0x7ffdf681f424,44734803,0,0x0,8
tick,0x7ffdf681f424,44736792,0,0x0,8
tick,0x7ffdf681f424,44738675,0,0x0,8
tick,0x7ffdf681f424,44740800,0,0x0,8
tick,0x7ffdf681f424,44742796,0,0x0,8
tick,0x7ffdf681f424,44744791,0,0x0,8
tick,0x7ffdf681f424,44746802,0,0x0,8
tick,0x7ffdf681f424,44748729,0,0x0,8
tick,0x7ffdf681f424,44750765,0,0x0,8
tick,0x7ffdf681f424,44752764,0,0x0,8
tick,0x7ffdf681f424,44754745,0,0x0,8
tick,0x7ffdf681f424,44756751,0,0x0,8
tick,0x7ffdf681f424,44758633,0,0x0,8
tick,0x7ffdf681f424,44760716,0,0x0,8
tick,0x7ffdf681f424,44762635,0,0x0,8
tick,0x7ffdf681f424,44764726,0,0x0,8
tick,0x7ffdf681f424,44766753,0,0x0,8
tick,0x7ffdf681f424,44768750,0,0x0,8
tick,0x7ffdf681f424,44770660,0,0x0,8
tick,0x7ffdf681f424,44772710,0,0x0,8
tick,0x7ffdf681f424,44774701,0,0x0,8
tick,0x7ffdf681f424,44776697,0,0x0,8
tick,0x7ffdf681f424,44778700,0,0x0,8
tick,0x7ffdf681f424,44780688,0,0x0,8
tick,0x7ffdf681f424,44782685,0,0x0,8
tick,0x7ffdf681f424,44784684,0,0x0,8
tick,0x7ffdf681f424,44786673,0,0x0,8
tick,0x7ffdf681f424,44788658,0,0x0,8
tick,0x7ffdf681f424,44790689,0,0x0,8
tick,0x7ffdf681f424,44792603,0,0x0,8
tick,0x7ffdf681f424,44794646,0,0x0,8
tick,0x7ffdf681f424,44796647,0,0x0,8
tick,0x7ffdf681f424,44798647,0,0x0,8
tick,0x7ffdf681f424,44800638,0,0x0,8
tick,0x7ffdf681f424,44802616,0,0x0,8
tick,0x7ffdf681f424,44804634,0,0x0,8
tick,0x7ffdf681f424,44806617,0,0x0,8
tick,0x7ffdf681f424,44808611,0,0x0,8
tick,0x7ffdf681f424,44810605,0,0x0,8
tick,0x7ffdf681f424,44812520,0,0x0,8
tick,0x7ffdf681f424,44814556,0,0x0,8
tick,0x7ffdf681f424,44816587,0,0x0,8
tick,0x7ffdf681f424,44818584,0,0x0,8
tick,0x7ffdf681f424,44820584,0,0x0,8
tick,0x7ffdf681f424,44822578,0,0x0,8
tick,0x7ffdf681f424,44824569,0,0x0,8
tick,0x7ffdf681f424,44826567,0,0x0,8
tick,0x7ffdf681f424,44828490,0,0x0,8
tick,0x7ffdf681f424,44830525,0,0x0,8
tick,0x7ffdf681f424,44832443,0,0x0,8
tick,0x7ffdf681f424,44834455,0,0x0,8
tick,0x7ffdf681f424,44836494,0,0x0,8
tick,0x7ffdf681f424,44838432,0,0x0,8
tick,0x7ffdf681f424,44840542,0,0x0,8
tick,0x7ffdf681f424,44842490,0,0x0,8
tick,0x7ffdf681f424,44844517,0,0x0,8
tick,0x7ffdf681f424,44846504,0,0x0,8
tick,0x7ffdf681f424,44848469,0,0x0,8
tick,0x7ffdf681f424,44850493,0,0x0,8
tick,0x7ffdf681f424,44852485,0,0x0,8
tick,0x7ffdf681f424,44854383,0,0x0,8
tick,0x7ffdf681f424,44856515,0,0x0,8
tick,0x7ffdf681f424,44858424,0,0x0,8
tick,0x7ffdf681f424,44860465,0,0x0,8
tick,0x7ffdf681f424,44862458,0,0x0,8
tick,0x7ffdf681f424,44864449,0,0x0,8
tick,0x7ffdf681f424,44866445,0,0x0,8
tick,0x7ffdf681f424,44868448,0,0x0,8
tick,0x7ffdf681f424,44870443,0,0x0,8
tick,0x7ffdf681f424,44872351,0,0x0,8
tick,0x7ffdf681f424,44874390,0,0x0,8
tick,0x7ffdf681f424,44876417,0,0x0,8
tick,0x7ffdf681f424,44878463,0,0x0,8
tick,0x7ffdf681f424,44880270,0,0x0,8
tick,0x7ffdf681f424,44882331,0,0x0,8
tick,0x7ffdf681f424,44884386,0,0x0,8
tick,0x7ffdf681f424,44886376,0,0x0,8
tick,0x7ffdf681f424,44888383,0,0x0,8
tick,0x7ffdf681f424,44890372,0,0x0,8
tick,0x7ffdf681f424,44892375,0,0x0,8
tick,0x7ffdf681f424,44894365,0,0x0,8
tick,0x7ffdf681f424,44896253,0,0x0,8
tick,0x7ffdf681f424,44898352,0,0x0,8
tick,0x7ffdf681f424,44900356,0,0x0,8
tick,0x7ffdf681f424,44902359,0,0x0,8
tick,0x7ffdf681f424,44904234,0,0x0,8
tick,0x7ffdf681f424,44906291,0,0x0,8
tick,0x7ffdf681f424,44908232,0,0x0,8
tick,0x7ffdf681f424,44910222,0,0x0,8
tick,0x7ffdf681f424,44912301,0,0x0,8
tick,0x7ffdf681f424,44914215,0,0x0,8
tick,0x7ffdf681f424,44916207,0,0x0,8
tick,0x7ffdf681f424,44918246,0,0x0,8
tick,0x7ffdf681f424,44920322,0,0x0,8
tick,0x7ffdf681f424,44922347,0,0x0,8
tick,0x7ffdf681f424,44924315,0,0x0,8
tick,0x7ffdf681f424,44925542,0,0x0,8
tick,0x7ffdf681f424,44926717,0,0x0,8
tick,0x7ffdf681f424,44927944,0,0x0,8
tick,0x7ffdf681f424,44929092,0,0x0,8
tick,0x7ffdf681f424,44931097,0,0x0,8
tick,0x7ffdf681f424,44932306,0,0x0,8
tick,0x7ffdf681f424,44934312,0,0x0,8
tick,0x7ffdf681f424,44936294,0,0x0,8
tick,0x7ffdf681f424,44938441,0,0x0,8
tick,0x7ffdf681f424,44940560,0,0x0,8
tick,0x7ffdf681f424,44942450,0,0x0,8
tick,0x7ffdf681f424,44944399,0,0x0,8
tick,0x7ffdf681f424,44946463,0,0x0,8
tick,0x7ffdf681f424,44948423,0,0x0,8
tick,0x7ffdf681f424,44950380,0,0x0,8
tick,0x7ffdf681f424,44952417,0,0x0,8
tick,0x7ffdf681f424,44954356,0,0x0,8
tick,0x7ffdf681f424,44956348,0,0x0,8
tick,0x7ffdf681f424,44958337,0,0x0,8
tick,0x7ffdf681f424,44960334,0,0x0,8
tick,0x7ffdf681f424,44961445,0,0x0,8
tick,0x7ffdf681f424,44963323,0,0x0,8
tick,0x7ffdf681f424,44965556,0,0x0,8
tick,0x7ffdf681f424,44967570,0,0x0,8
tick,0x7ffdf681f424,44969559,0,0x0,8
tick,0x7ffdf681f424,44971547,0,0x0,8
tick,0x7ffdf681f424,44973533,0,0x0,8
tick,0x7ffdf681f424,44975559,0,0x0,8
tick,0x7ffdf681f424,44976720,0,0x0,8
tick,0x7ffdf681f424,44977945,0,0x0,8
tick,0x7ffdf681f424,44979172,0,0x0,8
tick,0x7ffdf681f424,44981147,0,0x0,8
tick,0x7ffdf681f424,44983171,0,0x0,8
tick,0x7ffdf681f424,44984324,0,0x0,8
tick,0x7ffdf681f424,44986242,0,0x0,8
tick,0x7ffdf681f424,44988344,0,0x0,8
tick,0x7ffdf681f424,44989486,0,0x0,8
tick,0x7ffdf681f424,44991512,0,0x0,8
tick,0x7ffdf681f424,44992610,0,0x0,8
tick,0x7ffdf681f424,44993827,0,0x0,8
tick,0x7ffdf681f424,44994976,0,0x0,8
tick,0x7ffdf681f424,44996983,0,0x0,8
tick,0x7ffdf681f424,44998977,0,0x0,8
tick,0x7ffdf681f424,45000114,0,0x0,8
tick,0x7ffdf681f424,45001288,0,0x0,8
tick,0x7ffdf681f424,45002435,0,0x0,8
tick,0x7ffdf681f424,45003610,0,0x0,8
tick,0x7ffdf681f424,45004766,0,0x0,8
tick,0x7ffdf681f424,45005971,0,0x0,8
tick,0x7ffdf681f424,45007081,0,0x0,8
tick,0x7ffdf681f424,45009039,0,0x0,8
tick,0x7ffdf681f424,45011070,0,0x0,8
tick,0x7ffdf681f424,45013076,0,0x0,8
tick,0x7ffdf681f424,45014156,0,0x0,8
tick,0x7ffdf681f424,45015400,0,0x0,8
tick,0x7ffdf681f424,45017347,0,0x0,8
tick,0x7ffdf681f424,45019311,0,0x0,8
tick,0x7ffdf681f424,45020429,0,0x0,8
tick,0x7ffdf681f424,45021548,0,0x0,8
tick,0x7ffdf681f424,45023575,0,0x0,8
tick,0x7ffdf681f424,45024704,0,0x0,8
tick,0x7ffdf681f424,45025858,0,0x0,8
tick,0x7ffdf681f424,45027842,0,0x0,8
tick,0x7ffdf681f424,45029843,0,0x0,8
tick,0x7ffdf681f424,45030929,0,0x0,8
tick,0x7ffdf681f424,45032919,0,0x0,8
tick,0x7ffdf681f424,45034912,0,0x0,8
tick,0x7ffdf681f424,45036894,0,0x0,8
tick,0x7ffdf681f424,45038889,0,0x0,8
tick,0x7ffdf681f424,45040899,0,0x0,8
tick,0x7ffdf681f424,45042882,0,0x0,8
tick,0x7ffdf681f424,45044932,0,0x0,8
tick,0x7ffdf681f424,45046866,0,0x0,8
tick,0x7ffdf681f424,45048882,0,0x0,8
tick,0x7ffdf681f424,45050870,0,0x0,8
tick,0x7ffdf681f424,45052861,0,0x0,8
tick,0x7ffdf681f424,45054869,0,0x0,8
tick,0x7ffdf681f424,45056860,0,0x0,8
tick,0x7ffdf681f424,45058744,0,0x0,8
tick,0x7ffdf681f424,45060765,0,0x0,8
tick,0x7ffdf681f424,45062752,0,0x0,8
tick,0x7ffdf681f424,45064852,0,0x0,8
tick,0x7ffdf681f424,45066824,0,0x0,8
tick,0x7ffdf681f424,45068819,0,0x0,8
tick,0x7ffdf681f424,45070789,0,0x0,8
tick,0x7ffdf681f424,45072809,0,0x0,8
tick,0x7ffdf681f424,45074802,0,0x0,8
tick,0x7ffdf681f424,45076791,0,0x0,8
tick,0x7ffdf681f424,45078814,0,0x0,8
tick,0x7ffdf681f424,45080772,0,0x0,8
tick,0x7ffdf681f424,45082799,0,0x0,8
tick,0x7ffdf681f424,45084776,0,0x0,8
tick,0x7ffdf681f424,45086771,0,0x0,8
tick,0x7ffdf681f424,45088770,0,0x0,8
tick,0x7ffdf681f424,45090763,0,0x0,8
tick,0x7ffdf681f424,45092777,0,0x0,8
tick,0x7ffdf681f424,45094755,0,0x0,8
tick,0x7ffdf681f424,45096743,0,0x0,8
tick,0x7ffdf681f424,45098739,0,0x0,8
tick,0x7ffdf681f424,45100735,0,0x0,8
tick,0x7ffdf681f424,45102713,0,0x0,8
tick,0x7ffdf681f424,45104737,0,0x0,8
tick,0x7ffdf681f424,45106717,0,0x0,8
tick,0x7ffdf681f424,45108712,0,0x0,8
tick,0x7ffdf681f424,45110709,0,0x0,8
tick,0x7ffdf681f424,45112597,0,0x0,8
tick,0x7ffdf681f424,45114704,0,0x0,8
tick,0x7ffdf681f424,45116692,0,0x0,8
tick,0x7ffdf681f424,45118685,0,0x0,8
tick,0x7ffdf681f424,45120689,0,0x0,8
tick,0x7ffdf681f424,45122677,0,0x0,8
tick,0x7ffdf681f424,45124746,0,0x0,8
tick,0x7ffdf681f424,45126693,0,0x0,8
tick,0x7ffdf681f424,45128656,0,0x0,8
tick,0x7ffdf681f424,45130659,0,0x0,8
tick,0x7ffdf681f424,45132655,0,0x0,8
tick,0x7ffdf681f424,45134563,0,0x0,8
tick,0x7ffdf681f424,45136535,0,0x0,8
tick,0x7ffdf681f424,45138638,0,0x0,8
tick,0x7ffdf681f424,45140627,0,0x0,8
tick,0x7ffdf681f424,45142641,0,0x0,8
tick,0x7ffdf681f424,45144628,0,0x0,8
tick,0x7ffdf681f424,45146517,0,0x0,8
tick,0x7ffdf681f424,45148630,0,0x0,8
tick,0x7ffdf681f424,45150627,0,0x0,8
tick,0x7ffdf681f424,45152608,0,0x0,8
tick,0x7ffdf681f424,45154519,0,0x0,8
tick,0x7ffdf681f424,45156591,0,0x0,8
tick,0x7ffdf681f424,45158596,0,0x0,8
tick,0x7ffdf681f424,45160582,0,0x0,8
tick,0x7ffdf681f424,45162483,0,0x0,8
tick,0x7ffdf681f424,45164568,0,0x0,8
tick,0x7ffdf681f424,45166564,0,0x0,8
tick,0x7ffdf681f424,45168564,0,0x0,8
tick,0x7ffdf681f424,45170568,0,0x0,8
tick,0x7ffdf681f424,45172548,0,0x0,8
tick,0x7ffdf681f424,45174588,0,0x0,8
tick,0x7ffdf681f424,45176538,0,0x0,8
tick,0x7ffdf681f424,45178540,0,0x0,8
tick,0x7ffdf681f424,45180532,0,0x0,8
tick,0x7ffdf681f424,45182524,0,0x0,8
tick,0x7ffdf681f424,45184518,0,0x0,8
tick,0x7ffdf681f424,45186524,0,0x0,8
tick,0x7ffdf681f424,45188506,0,0x0,8
tick,0x7ffdf681f424,45190582,0,0x0,8
tick,0x7ffdf681f424,45192523,0,0x0,8
tick,0x7ffdf681f424,45194490,0,0x0,8
tick,0x7ffdf681f424,45196479,0,0x0,8
tick,0x7ffdf681f424,45198480,0,0x0,8
tick,0x7ffdf681f424,45200475,0,0x0,8
tick,0x7ffdf681f424,45202536,0,0x0,8
tick,0x7ffdf681f424,45204355,0,0x0,8
tick,0x7ffdf681f424,45206457,0,0x0,8
tick,0x7ffdf681f424,45208458,0,0x0,8
tick,0x7ffdf681f424,45210336,0,0x0,8
tick,0x7ffdf681f424,45212393,0,0x0,8
tick,0x7ffdf681f424,45214471,0,0x0,8
tick,0x7ffdf681f424,45216433,0,0x0,8
tick,0x7ffdf681f424,45218426,0,0x0,8
tick,0x7ffdf681f424,45220420,0,0x0,8
tick,0x7ffdf681f424,45222432,0,0x0,8
tick,0x7ffdf681f424,45224405,0,0x0,8
tick,0x7ffdf681f424,45226429,0,0x0,8
tick,0x7ffdf681f424,45228409,0,0x0,8
tick,0x7ffdf681f424,45230393,0,0x0,8
tick,0x7ffdf681f424,45232434,0,0x0,8
tick,0x7ffdf681f424,45234453,0,0x0,8
tick,0x7ffdf681f424,45236403,0,0x0,8
tick,0x7ffdf681f424,45238266,0,0x0,8
tick,0x7ffdf681f424,45240368,0,0x0,8
tick,0x7ffdf681f424,45242277,0,0x0,8
tick,0x7ffdf681f424,45244359,0,0x0,8
tick,0x7ffdf681f424,45246358,0,0x0,8
tick,0x7ffdf681f424,45248348,0,0x0,8
tick,0x7ffdf681f424,45250342,0,0x0,8
tick,0x7ffdf681f424,45252335,0,0x0,8
tick,0x7ffdf681f424,45254221,0,0x0,8
tick,0x7ffdf681f424,45256333,0,0x0,8
tick,0x7ffdf681f424,45258348,0,0x0,8
tick,0x7ffdf681f424,45260315,0,0x0,8
tick,0x7ffdf681f424,45262306,0,0x0,8
tick,0x7ffdf681f424,45264303,0,0x0,8
tick,0x7ffdf681f424,45266300,0,0x0,8
tick,0x7ffdf681f424,45268299,0,0x0,8
tick,0x7ffdf681f424,45270287,0,0x0,8
tick,0x7ffdf681f424,45272281,0,0x0,8
tick,0x7ffdf681f424,45274316,0,0x0,8
tick,0x7ffdf681f424,45276272,0,0x0,8
tick,0x7ffdf681f424,45278332,0,0x0,8
tick,0x7ffdf681f424,45280297,0,0x0,8
tick,0x7ffdf681f424,45282256,0,0x0,8
tick,0x7ffdf681f424,45284255,0,0x0,8
tick,0x7ffdf681f424,45286169,0,0x0,8
tick,0x7ffdf681f424,45288176,0,0x0,8
tick,0x7ffdf681f424,45290245,0,0x0,8
tick,0x7ffdf681f424,45292236,0,0x0,8
tick,0x7ffdf681f424,45294233,0,0x0,8
tick,0x7ffdf681f424,45296106,0,0x0,8
tick,0x7ffdf681f424,45298215,0,0x0,8
tick,0x7ffdf681f424,45300291,0,0x0,8
tick,0x7ffdf681f424,45302231,0,0x0,8
tick,0x7ffdf681f424,45304166,0,0x0,8
tick,0x7ffdf681f424,45306199,0,0x0,8
tick,0x7ffdf681f424,45308186,0,0x0,8
tick,0x7ffdf681f424,45310182,0,0x0,8
tick,0x7ffdf681f424,45312164,0,0x0,8
tick,0x7ffdf681f424,45314177,0,0x0,8
tick,0x7ffdf681f424,45316165,0,0x0,8
tick,0x7ffdf681f424,45318161,0,0x0,8
tick,0x7ffdf681f424,45320156,0,0x0,8
tick,0x7ffdf681f424,45322190,0,0x0,8
tick,0x7ffdf681f424,45324168,0,0x0,8
tick,0x7ffdf681f424,45326137,0,0x0,8
tick,0x7ffdf681f424,45328123,0,0x0,8
tick,0x7ffdf681f424,45330129,0,0x0,8
tick,0x7ffdf681f424,45332123,0,0x0,8
tick,0x7ffdf681f424,45334121,0,0x0,8
tick,0x7ffdf681f424,45336112,0,0x0,8
tick,0x7ffdf681f424,45338138,0,0x0,8
tick,0x7ffdf681f424,45340106,0,0x0,8
tick,0x7ffdf681f424,45342099,0,0x0,8
tick,0x7ffdf681f424,45344097,0,0x0,8
tick,0x7ffdf681f424,45346018,0,0x0,8
tick,0x7ffdf681f424,45348078,0,0x0,8
tick,0x7ffdf681f424,45350077,0,0x0,8
tick,0x7ffdf681f424,45352090,0,0x0,8
tick,0x7ffdf681f424,45354076,0,0x0,8
tick,0x7ffdf681f424,45356060,0,0x0,8
tick,0x7ffdf681f424,45358083,0,0x0,8
tick,0x7ffdf681f424,45360052,0,0x0,8
tick,0x7ffdf681f424,45361969,0,0x0,8
tick,0x7ffdf681f424,45363937,0,0x0,8
tick,0x7ffdf681f424,45366090,0,0x0,8
tick,0x7ffdf681f424,45368054,0,0x0,8
tick,0x7ffdf681f424,45370025,0,0x0,8
tick,0x7ffdf681f424,45371963,0,0x0,8
tick,0x7ffdf681f424,45374012,0,0x0,8
tick,0x7ffdf681f424,45376002,0,0x0,8
tick,0x7ffdf681f424,45377992,0,0x0,8
tick,0x7ffdf681f424,45379988,0,0x0,8
tick,0x7ffdf681f424,45381991,0,0x0,8
tick,0x7ffdf681f424,45383985,0,0x0,8
tick,0x7ffdf681f424,45385978,0,0x0,8
tick,0x7ffdf681f424,45387888,0,0x0,8
tick,0x7ffdf681f424,45389982,0,0x0,8
tick,0x7ffdf681f424,45391961,0,0x0,8
tick,0x7ffdf681f424,45393958,0,0x0,8
tick,0x7ffdf681f424,45395854,0,0x0,8
tick,0x7ffdf681f424,45397959,0,0x0,8
tick,0x7ffdf681f424,45399944,0,0x0,8
tick,0x7ffdf681f424,45401943,0,0x0,8
tick,0x7ffdf681f424,45403929,0,0x0,8
tick,0x7ffdf681f424,45405926,0,0x0,8
tick,0x7ffdf681f424,45407921,0,0x0,8
tick,0x7ffdf681f424,45409979,0,0x0,8
tick,0x7ffdf681f424,45411935,0,0x0,8
tick,0x7ffdf681f424,45413904,0,0x0,8
tick,0x7ffdf681f424,45415900,0,0x0,8
tick,0x7ffdf681f424,45417892,0,0x0,8
tick,0x7ffdf681f424,45419900,0,0x0,8
tick,0x7ffdf681f424,45421885,0,0x0,8
tick,0x7ffdf681f424,45423875,0,0x0,8
tick,0x7ffdf681f424,45425873,0,0x0,8
tick,0x7ffdf681f424,45427865,0,0x0,8
tick,0x7ffdf681f424,45429859,0,0x0,8
tick,0x7ffdf681f424,45431893,0,0x0,8
tick,0x7ffdf681f424,45433887,0,0x0,8
tick,0x7ffdf681f424,45435850,0,0x0,8
tick,0x7ffdf681f424,45437731,0,0x0,8
tick,0x7ffdf681f424,45439825,0,0x0,8
tick,0x7ffdf681f424,45441836,0,0x0,8
tick,0x7ffdf681f424,45443828,0,0x0,8
tick,0x7ffdf681f424,45445834,0,0x0,8
tick,0x7ffdf681f424,45447814,0,0x0,8
tick,0x7ffdf681f424,45449808,0,0x0,8
tick,0x7ffdf681f424,45451802,0,0x0,8
tick,0x7ffdf681f424,45453791,0,0x0,8
tick,0x7ffdf681f424,45455816,0,0x0,8
tick,0x7ffdf681f424,45457788,0,0x0,8
tick,0x7ffdf681f424,45459781,0,0x0,8
tick,0x7ffdf681f424,45461775,0,0x0,8
tick,0x7ffdf681f424,45463770,0,0x0,8
tick,0x7ffdf681f424,45465785,0,0x0,8
tick,0x7ffdf681f424,45467776,0,0x0,8
tick,0x7ffdf681f424,45469750,0,0x0,8
tick,0x7ffdf681f424,45471750,0,0x0,8
tick,0x7ffdf681f424,45473743,0,0x0,8
tick,0x7ffdf681f424,45475823,0,0x0,8
tick,0x7ffdf681f424,45477787,0,0x0,8
tick,0x7ffdf681f424,45479729,0,0x0,8
tick,0x7ffdf681f424,45481721,0,0x0,8
tick,0x7ffdf681f424,45483716,0,0x0,8
tick,0x7ffdf681f424,45485710,0,0x0,8
tick,0x7ffdf681f424,45487646,0,0x0,8
tick,0x7ffdf681f424,45489703,0,0x0,8
tick,0x7ffdf681f424,45491695,0,0x0,8
tick,0x7ffdf681f424,45493689,0,0x0,8
tick,0x7ffdf681f424,45495680,0,0x0,8
tick,0x7ffdf681f424,45497687,0,0x0,8
tick,0x7ffdf681f424,45499685,0,0x0,8
tick,0x7ffdf681f424,45501700,0,0x0,8
tick,0x7ffdf681f424,45503665,0,0x0,8
tick,0x7ffdf681f424,45505657,0,0x0,8
tick,0x7ffdf681f424,45507652,0,0x0,8
tick,0x7ffdf681f424,45509653,0,0x0,8
tick,0x7ffdf681f424,45511647,0,0x0,8
tick,0x7ffdf681f424,45513575,0,0x0,8
tick,0x7ffdf681f424,45515522,0,0x0,8
tick,0x7ffdf681f424,45517636,0,0x0,8
tick,0x7ffdf681f424,45519686,0,0x0,8
tick,0x7ffdf681f424,45521533,0,0x0,8
tick,0x7ffdf681f424,45523609,0,0x0,8
tick,0x7ffdf681f424,45525599,0,0x0,8
tick,0x7ffdf681f424,45527599,0,0x0,8
tick,0x7ffdf681f424,45529486,0,0x0,8
tick,0x7ffdf681f424,45531591,0,0x0,8
tick,0x7ffdf681f424,45533584,0,0x0,8
tick,0x7ffdf681f424,45535580,0,0x0,8
tick,0x7ffdf681f424,45537525,0,0x0,8
tick,0x7ffdf681f424,45539566,0,0x0,8
tick,0x7ffdf681f424,45541606,0,0x0,8
tick,0x7ffdf681f424,45543584,0,0x0,8
tick,0x7ffdf681f424,45545526,0,0x0,8
tick,0x7ffdf681f424,45547584,0,0x0,8
tick,0x7ffdf681f424,45549540,0,0x0,8
tick,0x7ffdf681f424,45551541,0,0x0,8
tick,0x7ffdf681f424,45553567,0,0x0,8
tick,0x7ffdf681f424,45555532,0,0x0,8
tick,0x7ffdf681f424,45557519,0,0x0,8
tick,0x7ffdf681f424,45559447,0,0x0,8
tick,0x7ffdf681f424,45561461,0,0x0,8
tick,0x7ffdf681f424,45563459,0,0x0,8
tick,0x7ffdf681f424,45565445,0,0x0,8
tick,0x7ffdf681f424,45567449,0,0x0,8
tick,0x7ffdf681f424,45568576,0,0x0,8
tick,0x7ffdf681f424,45569833,0,0x0,8
tick,0x7ffdf681f424,45570950,0,0x0,8
tick,0x7ffdf681f424,45573036,0,0x0,8
tick,0x7ffdf681f424,45575022,0,0x0,8
tick,0x7ffdf681f424,45576967,0,0x0,8
tick,0x7ffdf681f424,45578951,0,0x0,8
tick,0x7ffdf681f424,45580960,0,0x0,8
tick,0x7ffdf681f424,45582996,0,0x0,8
tick,0x7ffdf681f424,45584980,0,0x0,8
tick,0x7ffdf681f424,45586963,0,0x0,8
tick,0x7ffdf681f424,45588922,0,0x0,8
tick,0x7ffdf681f424,45590922,0,0x0,8
tick,0x7ffdf681f424,45592925,0,0x0,8
tick,0x7ffdf681f424,45594880,0,0x0,8
tick,0x7ffdf681f424,45596792,0,0x0,8
tick,0x7ffdf681f424,45597934,0,0x0,8
tick,0x7ffdf681f424,45599047,0,0x0,8
tick,0x7ffdf681f424,45600205,0,0x0,8
tick,0x7ffdf681f424,45601310,0,0x0,8
tick,0x7ffdf681f424,45602427,0,0x0,8
tick,0x7ffdf681f424,45603555,0,0x0,8
tick,0x7ffdf681f424,45604668,0,0x0,8
tick,0x7ffdf681f424,45606673,0,0x0,8
tick,0x7ffdf681f424,45608665,0,0x0,8
tick,0x7ffdf681f424,45610633,0,0x0,8
tick,0x7ffdf681f424,45612599,0,0x0,8
tick,0x7ffdf681f424,45614638,0,0x0,8
tick,0x7ffdf681f424,45616617,0,0x0,8
tick,0x7ffdf681f424,45618613,0,0x0,8
tick,0x7ffdf681f424,45620617,0,0x0,8
tick,0x7ffdf681f424,45622610,0,0x0,8
tick,0x7ffdf681f424,45624609,0,0x0,8
tick,0x7ffdf681f424,45626606,0,0x0,8
tick,0x7ffdf681f424,45628603,0,0x0,8
tick,0x7ffdf681f424,45630646,0,0x0,8
tick,0x7ffdf681f424,45632629,0,0x0,8
tick,0x7ffdf681f424,45634635,0,0x0,8
tick,0x7ffdf681f424,45636624,0,0x0,8
tick,0x7ffdf681f424,45638618,0,0x0,8
tick,0x7ffdf681f424,45640616,0,0x0,8
tick,0x7ffdf681f424,45642605,0,0x0,8
tick,0x7ffdf681f424,45644591,0,0x0,8
tick,0x7ffdf681f424,45646600,0,0x0,8
tick,0x7ffdf681f424,45648606,0,0x0,8
tick,0x7ffdf681f424,45650614,0,0x0,8
tick,0x7ffdf681f424,45652588,0,0x0,8
tick,0x7ffdf681f424,45654508,0,0x0,8
tick,0x7ffdf681f424,45656584,0,0x0,8
tick,0x7ffdf681f424,45658558,0,0x0,8
tick,0x7ffdf681f424,45660553,0,0x0,8
tick,0x7ffdf681f424,45662558,0,0x0,8
tick,0x7ffdf681f424,45664466,0,0x0,8
tick,0x7ffdf681f424,45666427,0,0x0,8
tick,0x7ffdf681f424,45668512,0,0x0,8
tick,0x7ffdf681f424,45670530,0,0x0,8
tick,0x7ffdf681f424,45672559,0,0x0,8
tick,0x7ffdf681f424,45674526,0,0x0,8
tick,0x7ffdf681f424,45676507,0,0x0,8
tick,0x7ffdf681f424,45678507,0,0x0,8
tick,0x7ffdf681f424,45680496,0,0x0,8
tick,0x7ffdf681f424,45682493,0,0x0,8
tick,0x7ffdf681f424,45684502,0,0x0,8
tick,0x7ffdf681f424,45686486,0,0x0,8
tick,0x7ffdf681f424,45688473,0,0x0,8
tick,0x7ffdf681f424,45690474,0,0x0,8
tick,0x7ffdf681f424,45692471,0,0x0,8
tick,0x7ffdf681f424,45694492,0,0x0,8
tick,0x7ffdf681f424,45696464,0,0x0,8
tick,0x7ffdf681f424,45698482,0,0x0,8
tick,0x7ffdf681f424,45700448,0,0x0,8
tick,0x7ffdf681f424,45702440,0,0x0,8
tick,0x7ffdf681f424,45704329,0,0x0,8
tick,0x7ffdf681f424,45706434,0,0x0,8
tick,0x7ffdf681f424,45708420,0,0x0,8
tick,0x7ffdf681f424,45710419,0,0x0,8
tick,0x7ffdf681f424,45712414,0,0x0,8
tick,0x7ffdf681f424,45714412,0,0x0,8
tick,0x7ffdf681f424,45716438,0,0x0,8
tick,0x7ffdf681f424,45718409,0,0x0,8
tick,0x7ffdf681f424,45720402,0,0x0,8
tick,0x7ffdf681f424,45722385,0,0x0,8
tick,0x7ffdf681f424,45724384,0,0x0,8
tick,0x7ffdf681f424,45726410,0,0x0,8
tick,0x7ffdf681f424,45728217,0,0x0,8
tick,0x7ffdf681f424,45730204,0,0x0,8
tick,0x7ffdf681f424,45732195,0,0x0,8
tick,0x7ffdf681f424,45734167,0,0x0,8
tick,0x7ffdf681f424,45736179,0,0x0,8
tick,0x7ffdf681f424,45738276,0,0x0,8
tick,0x7ffdf681f424,45740219,0,0x0,8
tick,0x7ffdf681f424,45742330,0,0x0,8
tick,0x7ffdf681f424,45744178,0,0x0,8
tick,0x7ffdf681f424,45746181,0,0x0,8
tick,0x7ffdf681f424,45748330,0,0x0,8
tick,0x7ffdf681f424,45750228,0,0x0,8
tick,0x7ffdf681f424,45752310,0,0x0,8
tick,0x7ffdf681f424,45754271,0,0x0,8
tick,0x7ffdf681f424,45756318,0,0x0,8
tick,0x7ffdf681f424,45758295,0,0x0,8
tick,0x7ffdf681f424,45760316,0,0x0,8
tick,0x7ffdf681f424,45762296,0,0x0,8
tick,0x7ffdf681f424,45764287,0,0x0,8
tick,0x7ffdf681f424,45766279,0,0x0,8
tick,0x7ffdf681f424,45768274,0,0x0,8
tick,0x7ffdf681f424,45770271,0,0x0,8
tick,0x7ffdf681f424,45772260,0,0x0,8
tick,0x7ffdf681f424,45774258,0,0x0,8
tick,0x7ffdf681f424,45776252,0,0x0,8
tick,0x7ffdf681f424,45778247,0,0x0,8
tick,0x7ffdf681f424,45780242,0,0x0,8
tick,0x7ffdf681f424,45782260,0,0x0,8
tick,0x7ffdf681f424,45784241,0,0x0,8
tick,0x7ffdf681f424,45786225,0,0x0,8
tick,0x7ffdf681f424,45788218,0,0x0,8
tick,0x7ffdf681f424,45790221,0,0x0,8
tick,0x7ffdf681f424,45792206,0,0x0,8
tick,0x7ffdf681f424,45794206,0,0x0,8
tick,0x7ffdf681f424,45796087,0,0x0,8
tick,0x7ffdf681f424,45798193,0,0x0,8
tick,0x7ffdf681f424,45800191,0,0x0,8
tick,0x7ffdf681f424,45802185,0,0x0,8
tick,0x7ffdf681f424,45804200,0,0x0,8
tick,0x7ffdf681f424,45806184,0,0x0,8
tick,0x7ffdf681f424,45808161,0,0x0,8
tick,0x7ffdf681f424,45810162,0,0x0,8
tick,0x7ffdf681f424,45812155,0,0x0,8
tick,0x7ffdf681f424,45814145,0,0x0,8
tick,0x7ffdf681f424,45816151,0,0x0,8
tick,0x7ffdf681f424,45818038,0,0x0,8
tick,0x7ffdf681f424,45820152,0,0x0,8
tick,0x7ffdf681f424,45822061,0,0x0,8
tick,0x7ffdf681f424,45824129,0,0x0,8
tick,0x7ffdf681f424,45826143,0,0x0,8
tick,0x7ffdf681f424,45828103,0,0x0,8
tick,0x7ffdf681f424,45830106,0,0x0,8
tick,0x7ffdf681f424,45832106,0,0x0,8
tick,0x7ffdf681f424,45834102,0,0x0,8
tick,0x7ffdf681f424,45836107,0,0x0,8
tick,0x7ffdf681f424,45838089,0,0x0,8
tick,0x7ffdf681f424,45840089,0,0x0,8
tick,0x7ffdf681f424,45842079,0,0x0,8
tick,0x7ffdf681f424,45844073,0,0x0,8
tick,0x7ffdf681f424,45845968,0,0x0,8
tick,0x7ffdf681f424,45848066,0,0x0,8
tick,0x7ffdf681f424,45850066,0,0x0,8
tick,0x7ffdf681f424,45852082,0,0x0,8
tick,0x7ffdf681f424,45854056,0,0x0,8
tick,0x7ffdf681f424,45856057,0,0x0,8
tick,0x7ffdf681f424,45858050,0,0x0,8
tick,0x7ffdf681f424,45860042,0,0x0,8
tick,0x7ffdf681f424,45862028,0,0x0,8
tick,0x7ffdf681f424,45864020,0,0x0,8
tick,0x7ffdf681f424,45866018,0,0x0,8
tick,0x7ffdf681f424,45868010,0,0x0,8
tick,0x7ffdf681f424,45870032,0,0x0,8
tick,0x7ffdf681f424,45872006,0,0x0,8
tick,0x7ffdf681f424,45873997,0,0x0,8
tick,0x7ffdf681f424,45875974,0,0x0,8
tick,0x7ffdf681f424,45877986,0,0x0,8
tick,0x7ffdf681f424,45879983,0,0x0,8
tick,0x7ffdf681f424,45881880,0,0x0,8
tick,0x7ffdf681f424,45883953,0,0x0,8
tick,0x7ffdf681f424,45885967,0,0x0,8
tick,0x7ffdf681f424,45887848,0,0x0,8
tick,0x7ffdf681f424,45889941,0,0x0,8
tick,0x7ffdf681f424,45891907,0,0x0,8
tick,0x7ffdf681f424,45893860,0,0x0,8
tick,0x7ffdf681f424,45895972,0,0x0,8
tick,0x7ffdf681f424,45897933,0,0x0,8
tick,0x7ffdf681f424,45899913,0,0x0,8
tick,0x7ffdf681f424,45901888,0,0x0,8
tick,0x7ffdf681f424,45903872,0,0x0,8
tick,0x7ffdf681f424,45905899,0,0x0,8
tick,0x7ffdf681f424,45907891,0,0x0,8
tick,0x7ffdf681f424,45909915,0,0x0,8
tick,0x7ffdf681f424,45911882,0,0x0,8
tick,0x7ffdf681f424,45913717,0,0x0,8
tick,0x7ffdf681f424,45915786,0,0x0,8
tick,0x7ffdf681f424,45917761,0,0x0,8
tick,0x7ffdf681f424,45919776,0,0x0,8
tick,0x7ffdf681f424,45921781,0,0x0,8
tick,0x7ffdf681f424,45923922,0,0x0,8
tick,0x7ffdf681f424,45925858,0,0x0,8
tick,0x7ffdf681f424,45927824,0,0x0,8
tick,0x7ffdf681f424,45929805,0,0x0,8
tick,0x7ffdf681f424,45931800,0,0x0,8
tick,0x7ffdf681f424,45933813,0,0x0,8
tick,0x7ffdf681f424,45935793,0,0x0,8
tick,0x7ffdf681f424,45937723,0,0x0,8
tick,0x7ffdf681f424,45939796,0,0x0,8
tick,0x7ffdf681f424,45941788,0,0x0,8
tick,0x7ffdf681f424,45943792,0,0x0,8
tick,0x7ffdf681f424,45945858,0,0x0,8
tick,0x7ffdf681f424,45947794,0,0x0,8
tick,0x7ffdf681f424,45949778,0,0x0,8
tick,0x7ffdf681f424,45951781,0,0x0,8
tick,0x7ffdf681f424,45953768,0,0x0,8
tick,0x7ffdf681f424,45955760,0,0x0,8
tick,0x7ffdf681f424,45957757,0,0x0,8
tick,0x7ffdf681f424,45959750,0,0x0,8
tick,0x7ffdf681f424,45961755,0,0x0,8
tick,0x7ffdf681f424,45963742,0,0x0,8
tick,0x7ffdf681f424,45965733,0,0x0,8
tick,0x7ffdf681f424,45967593,0,0x0,8
tick,0x7ffdf681f424,45969667,0,0x0,8
tick,0x7ffdf681f424,45971729,0,0x0,8
tick,0x7ffdf681f424,45973718,0,0x0,8
tick,0x7ffdf681f424,45975716,0,0x0,8
tick,0x7ffdf681f424,45977707,0,0x0,8
tick,0x7ffdf681f424,45979591,0,0x0,8
tick,0x7ffdf681f424,45981692,0,0x0,8
tick,0x7ffdf681f424,45983695,0,0x0,8
tick,0x7ffdf681f424,45985681,0,0x0,8
tick,0x7ffdf681f424,45987637,0,0x0,8
tick,0x7ffdf681f424,45989667,0,0x0,8
tick,0x7ffdf681f424,45991649,0,0x0,8
tick,0x7ffdf681f424,45993656,0,0x0,8
tick,0x7ffdf681f424,45995657,0,0x0,8
tick,0x7ffdf681f424,45997651,0,0x0,8
tick,0x7ffdf681f424,45999652,0,0x0,8
tick,0x7ffdf681f424,46001644,0,0x0,8
tick,0x7ffdf681f424,46003633,0,0x0,8
tick,0x7ffdf681f424,46005632,0,0x0,8
tick,0x7ffdf681f424,46007634,0,0x0,8
tick,0x7ffdf681f424,46009616,0,0x0,8
tick,0x7ffdf681f424,46011620,0,0x0,8
tick,0x7ffdf681f424,46013574,0,0x0,8
tick,0x7ffdf681f424,46015602,0,0x0,8
tick,0x7ffdf681f424,46017595,0,0x0,8
tick,0x7ffdf681f424,46019588,0,0x0,8
tick,0x7ffdf681f424,46021585,0,0x0,8
tick,0x7ffdf681f424,46023579,0,0x0,8
tick,0x7ffdf681f424,46025587,0,0x0,8
tick,0x7ffdf681f424,46027573,0,0x0,8
tick,0x7ffdf681f424,46029458,0,0x0,8
tick,0x7ffdf681f424,46031557,0,0x0,8
tick,0x7ffdf681f424,46033552,0,0x0,8
tick,0x7ffdf681f424,46035555,0,0x0,8
tick,0x7ffdf681f424,46037551,0,0x0,8
tick,0x7ffdf681f424,46039537,0,0x0,8
tick,0x7ffdf681f424,46041536,0,0x0,8
tick,0x7ffdf681f424,46043486,0,0x0,8
tick,0x7ffdf681f424,46045434,0,0x0,8
tick,0x7ffdf681f424,46047532,0,0x0,8
tick,0x7ffdf681f424,46049562,0,0x0,8
tick,0x7ffdf681f424,46051513,0,0x0,8
tick,0x7ffdf681f424,46053506,0,0x0,8
tick,0x7ffdf681f424,46055429,0,0x0,8
tick,0x7ffdf681f424,46057407,0,0x0,8
tick,0x7ffdf681f424,46059496,0,0x0,8
tick,0x7ffdf681f424,46061487,0,0x0,8
tick,0x7ffdf681f424,46063494,0,0x0,8
tick,0x7ffdf681f424,46065477,0,0x0,8
tick,0x7ffdf681f424,46067469,0,0x0,8
tick,0x7ffdf681f424,46069470,0,0x0,8
tick,0x7ffdf681f424,46071471,0,0x0,8
tick,0x7ffdf681f424,46073486,0,0x0,8
tick,0x7ffdf681f424,46075450,0,0x0,8
tick,0x7ffdf681f424,46077460,0,0x0,8
tick,0x7ffdf681f424,46079377,0,0x0,8
tick,0x7ffdf681f424,46081449,0,0x0,8
tick,0x7ffdf681f424,46083435,0,0x0,8
tick,0x7ffdf681f424,46085420,0,0x0,8
tick,0x7ffdf681f424,46087435,0,0x0,8
tick,0x7ffdf681f424,46089422,0,0x0,8
tick,0x7ffdf681f424,46091406,0,0x0,8
tick,0x7ffdf681f424,46093400,0,0x0,8
tick,0x7ffdf681f424,46095405,0,0x0,8
tick,0x7ffdf681f424,46097398,0,0x0,8
tick,0x7ffdf681f424,46099432,0,0x0,8
tick,0x7ffdf681f424,46101395,0,0x0,8
tick,0x7ffdf681f424,46103325,0,0x0,8
tick,0x7ffdf681f424,46105280,0,0x0,8
tick,0x7ffdf681f424,46107346,0,0x0,8
tick,0x7ffdf681f424,46109351,0,0x0,8
tick,0x7ffdf681f424,46111256,0,0x0,8
tick,0x7ffdf681f424,46113275,0,0x0,8
tick,0x7ffdf681f424,46115212,0,0x0,8
tick,0x7ffdf681f424,46117142,0,0x0,8
tick,0x7ffdf681f424,46119132,0,0x0,8
tick,0x7ffdf681f424,46121244,0,0x0,8
tick,0x7ffdf681f424,46123167,0,0x0,8
tick,0x7ffdf681f424,46125187,0,0x0,8
tick,0x7ffdf681f424,46127147,0,0x0,8
tick,0x7ffdf681f424,46129360,0,0x0,8
tick,0x7ffdf681f424,46131106,0,0x0,8
tick,0x7ffdf681f424,46133242,0,0x0,8
tick,0x7ffdf681f424,46135240,0,0x0,8
tick,0x7ffdf681f424,46137211,0,0x0,8
tick,0x7ffdf681f424,46139235,0,0x0,8
tick,0x7ffdf681f424,46141228,0,0x0,8
tick,0x7ffdf681f424,46143209,0,0x0,8
tick,0x7ffdf681f424,46145218,0,0x0,8
tick,0x7ffdf681f424,46147198,0,0x0,8
tick,0x7ffdf681f424,46149179,0,0x0,8
tick,0x7ffdf681f424,46151190,0,0x0,8
tick,0x7ffdf681f424,46153215,0,0x0,8
tick,0x7ffdf681f424,46155211,0,0x0,8
tick,0x7ffdf681f424,46157161,0,0x0,8
tick,0x7ffdf681f424,46159194,0,0x0,8
tick,0x7ffdf681f424,46161142,0,0x0,8
tick,0x7ffdf681f424,46163165,0,0x0,8
tick,0x7ffdf681f424,46165215,0,0x0,8
tick,0x7ffdf681f424,46167173,0,0x0,8
tick,0x7ffdf681f424,46169118,0,0x0,8
tick,0x7ffdf681f424,46171032,0,0x0,8
tick,0x7ffdf681f424,46173111,0,0x0,8
tick,0x7ffdf681f424,46175128,0,0x0,8
tick,0x7ffdf681f424,46177151,0,0x0,8
tick,0x7ffdf681f424,46179116,0,0x0,8
tick,0x7ffdf681f424,46181084,0,0x0,8
tick,0x7ffdf681f424,46183106,0,0x0,8
tick,0x7ffdf681f424,46185150,0,0x0,8
tick,0x7ffdf681f424,46187151,0,0x0,8
tick,0x7ffdf681f424,46189150,0,0x0,8
tick,0x7ffdf681f424,46191146,0,0x0,8
tick,0x7ffdf681f424,46193129,0,0x0,8
tick,0x7ffdf681f424,46195128,0,0x0,8
tick,0x7ffdf681f424,46197118,0,0x0,8
tick,0x7ffdf681f424,46199118,0,0x0,8
tick,0x7ffdf681f424,46201011,0,0x0,8
tick,0x7ffdf681f424,46203006,0,0x0,8
tick,0x7ffdf681f424,46205077,0,0x0,8
tick,0x7ffdf681f424,46207097,0,0x0,8
tick,0x7ffdf681f424,46209112,0,0x0,8
tick,0x7ffdf681f424,46211015,0,0x0,8
tick,0x7ffdf681f424,46212967,0,0x0,8
tick,0x7ffdf681f424,46215068,0,0x0,8
tick,0x7ffdf681f424,46217062,0,0x0,8
tick,0x7ffdf681f424,46219054,0,0x0,8
tick,0x7ffdf681f424,46221005,0,0x0,8
tick,0x7ffdf681f424,46223046,0,0x0,8
tick,0x7ffdf681f424,46225011,0,0x0,8
tick,0x7ffdf681f424,46227037,0,0x0,8
tick,0x7ffdf681f424,46229025,0,0x0,8
tick,0x7ffdf681f424,46231014,0,0x0,8
tick,0x7ffdf681f424,46233010,0,0x0,8
tick,0x7ffdf681f424,46235017,0,0x0,8
tick,0x7ffdf681f424,46237031,0,0x0,8
tick,0x7ffdf681f424,46239011,0,0x0,8
tick,0x7ffdf681f424,46241001,0,0x0,8
tick,0x7ffdf681f424,46242991,0,0x0,8
tick,0x7ffdf681f424,46245017,0,0x0,8
tick,0x7ffdf681f424,46246994,0,0x0,8
tick,0x7ffdf681f424,46248987,0,0x0,8
tick,0x7ffdf681f424,46251011,0,0x0,8
tick,0x7ffdf681f424,46252964,0,0x0,8
tick,0x7ffdf681f424,46254980,0,0x0,8
tick,0x7ffdf681f424,46256990,0,0x0,8
tick,0x7ffdf681f424,46258996,0,0x0,8
tick,0x7ffdf681f424,46260957,0,0x0,8
tick,0x7ffdf681f424,46262859,0,0x0,8
tick,0x7ffdf681f424,46264939,0,0x0,8
tick,0x7ffdf681f424,46266945,0,0x0,8
tick,0x7ffdf681f424,46268942,0,0x0,8
tick,0x7ffdf681f424,46270972,0,0x0,8
tick,0x7ffdf681f424,46272919,0,0x0,8
tick,0x7ffdf681f424,46274880,0,0x0,8
tick,0x7ffdf681f424,46276801,0,0x0,8
tick,0x7ffdf681f424,46278795,0,0x0,8
tick,0x7ffdf681f424,46280892,0,0x0,8
tick,0x7ffdf681f424,46282923,0,0x0,8
tick,0x7ffdf681f424,46284885,0,0x0,8
tick,0x7ffdf681f424,46286880,0,0x0,8
tick,0x7ffdf681f424,46288823,0,0x0,8
tick,0x7ffdf681f424,46290874,0,0x0,8
tick,0x7ffdf681f424,46292870,0,0x0,8
tick,0x7ffdf681f424,46294858,0,0x0,8
tick,0x7ffdf681f424,46296894,0,0x0,8
tick,0x7ffdf681f424,46298870,0,0x0,8
tick,0x7ffdf681f424,46300837,0,0x0,8
tick,0x7ffdf681f424,46302839,0,0x0,8
tick,0x7ffdf681f424,46304838,0,0x0,8
tick,0x7ffdf681f424,46306827,0,0x0,8
tick,0x7ffdf681f424,46308818,0,0x0,8
tick,0x7ffdf681f424,46310825,0,0x0,8
tick,0x7ffdf681f424,46312710,0,0x0,8
tick,0x7ffdf681f424,46314806,0,0x0,8
tick,0x7ffdf681f424,46316802,0,0x0,8
tick,0x7ffdf681f424,46318753,0,0x0,8
tick,0x7ffdf681f424,46320805,0,0x0,8
tick,0x7ffdf681f424,46322783,0,0x0,8
tick,0x7ffdf681f424,46324798,0,0x0,8
tick,0x7ffdf681f424,46326773,0,0x0,8
tick,0x7ffdf681f424,46328783,0,0x0,8
tick,0x7ffdf681f424,46330764,0,0x0,8
tick,0x7ffdf681f424,46332766,0,0x0,8
tick,0x7ffdf681f424,46334760,0,0x0,8
tick,0x7ffdf681f424,46336749,0,0x0,8
tick,0x7ffdf681f424,46338744,0,0x0,8
tick,0x7ffdf681f424,46340752,0,0x0,8
tick,0x7ffdf681f424,46342737,0,0x0,8
tick,0x7ffdf681f424,46344734,0,0x0,8
tick,0x7ffdf681f424,46346726,0,0x0,8
tick,0x7ffdf681f424,46348726,0,0x0,8
tick,0x7ffdf681f424,46350690,0,0x0,8
tick,0x7ffdf681f424,46352633,0,0x0,8
tick,0x7ffdf681f424,46354592,0,0x0,8
tick,0x7ffdf681f424,46356716,0,0x0,8
tick,0x7ffdf681f424,46358694,0,0x0,8
tick,0x7ffdf681f424,46360682,0,0x0,8
tick,0x7ffdf681f424,46362711,0,0x0,8
tick,0x7ffdf681f424,46364714,0,0x0,8
tick,0x7ffdf681f424,46366666,0,0x0,8
tick,0x7ffdf681f424,46368657,0,0x0,8
tick,0x7ffdf681f424,46370652,0,0x0,8
tick,0x7ffdf681f424,46372661,0,0x0,8
tick,0x7ffdf681f424,46374646,0,0x0,8
tick,0x7ffdf681f424,46376646,0,0x0,8
tick,0x7ffdf681f424,46378641,0,0x0,8
tick,0x7ffdf681f424,46380635,0,0x0,8
tick,0x7ffdf681f424,46382621,0,0x0,8
tick,0x7ffdf681f424,46384605,0,0x0,8
tick,0x7ffdf681f424,46386626,0,0x0,8
tick,0x7ffdf681f424,46388626,0,0x0,8
tick,0x7ffdf681f424,46390600,0,0x0,8
tick,0x7ffdf681f424,46392597,0,0x0,8
tick,0x7ffdf681f424,46394593,0,0x0,8
tick,0x7ffdf681f424,46396583,0,0x0,8
tick,0x7ffdf681f424,46398581,0,0x0,8
tick,0x7ffdf681f424,46400564,0,0x0,8
tick,0x7ffdf681f424,46402574,0,0x0,8
tick,0x7ffdf681f424,46404457,0,0x0,8
tick,0x7ffdf681f424,46406619,0,0x0,8
tick,0x7ffdf681f424,46408564,0,0x0,8
tick,0x7ffdf681f424,46410556,0,0x0,8
tick,0x7ffdf681f424,46412543,0,0x0,8
tick,0x7ffdf681f424,46414542,0,0x0,8
tick,0x7ffdf681f424,46416532,0,0x0,8
tick,0x7ffdf681f424,46418528,0,0x0,8
tick,0x7ffdf681f424,46420531,0,0x0,8
tick,0x7ffdf681f424,46422522,0,0x0,8
tick,0x7ffdf681f424,46424538,0,0x0,8
tick,0x7ffdf681f424,46426510,0,0x0,8
tick,0x7ffdf681f424,46428368,0,0x0,8
tick,0x7ffdf681f424,46430441,0,0x0,8
tick,0x7ffdf681f424,46432581,0,0x0,8
tick,0x7ffdf681f424,46434488,0,0x0,8
tick,0x7ffdf681f424,46436482,0,0x0,8
tick,0x7ffdf681f424,46438332,0,0x0,8
tick,0x7ffdf681f424,46440474,0,0x0,8
tick,0x7ffdf681f424,46442494,0,0x0,8
tick,0x7ffdf681f424,46444465,0,0x0,8
tick,0x7ffdf681f424,46446337,0,0x0,8
tick,0x7ffdf681f424,46448447,0,0x0,8
tick,0x7ffdf681f424,46450461,0,0x0,8
tick,0x7ffdf681f424,46452471,0,0x0,8
tick,0x7ffdf681f424,46454388,0,0x0,8
tick,0x7ffdf681f424,46456426,0,0x0,8
tick,0x7ffdf681f424,46458423,0,0x0,8
tick,0x7ffdf681f424,46460438,0,0x0,8
tick,0x7ffdf681f424,46462416,0,0x0,8
tick,0x7ffdf681f424,46464409,0,0x0,8
tick,0x7ffdf681f424,46466295,0,0x0,8
tick,0x7ffdf681f424,46468314,0,0x0,8
tick,0x7ffdf681f424,46470269,0,0x0,8
tick,0x7ffdf681f424,46472329,0,0x0,8
tick,0x7ffdf681f424,46474326,0,0x0,8
tick,0x7ffdf681f424,46476378,0,0x0,8
tick,0x7ffdf681f424,46478378,0,0x0,8
tick,0x7ffdf681f424,46480381,0,0x0,8
tick,0x7ffdf681f424,46482400,0,0x0,8
tick,0x7ffdf681f424,46484366,0,0x0,8
tick,0x7ffdf681f424,46486354,0,0x0,8
tick,0x7ffdf681f424,46488362,0,0x0,8
tick,0x7ffdf681f424,46490361,0,0x0,8
tick,0x7ffdf681f424,46492342,0,0x0,8
tick,0x7ffdf681f424,46494318,0,0x0,8
tick,0x7ffdf681f424,46496234,0,0x0,8
tick,0x7ffdf681f424,46498320,0,0x0,8
tick,0x7ffdf681f424,46500323,0,0x0,8
tick,0x7ffdf681f424,46502319,0,0x0,8
tick,0x7ffdf681f424,46504225,0,0x0,8
tick,0x7ffdf681f424,46506189,0,0x0,8
tick,0x7ffdf681f424,46508303,0,0x0,8
tick,0x7ffdf681f424,46510308,0,0x0,8
tick,0x7ffdf681f424,46512287,0,0x0,8
tick,0x7ffdf681f424,46514286,0,0x0,8
tick,0x7ffdf681f424,46516328,0,0x0,8
tick,0x7ffdf681f424,46518294,0,0x0,8
tick,0x7ffdf681f424,46520275,0,0x0,8
tick,0x7ffdf681f424,46522270,0,0x0,8
tick,0x7ffdf681f424,46524264,0,0x0,8
tick,0x7ffdf681f424,46526264,0,0x0,8
tick,0x7ffdf681f424,46528245,0,0x0,8
tick,0x7ffdf681f424,46530265,0,0x0,8
tick,0x7ffdf681f424,46532235,0,0x0,8
tick,0x7ffdf681f424,46534221,0,0x0,8
tick,0x7ffdf681f424,46536220,0,0x0,8
tick,0x7ffdf681f424,46538238,0,0x0,8
tick,0x7ffdf681f424,46540264,0,0x0,8
tick,0x7ffdf681f424,46542202,0,0x0,8
tick,0x7ffdf681f424,46544196,0,0x0,8
tick,0x7ffdf681f424,46546074,0,0x0,8
tick,0x7ffdf681f424,46548191,0,0x0,8
tick,0x7ffdf681f424,46550183,0,0x0,8
tick,0x7ffdf681f424,46552180,0,0x0,8
tick,0x7ffdf681f424,46554184,0,0x0,8
tick,0x7ffdf681f424,46556164,0,0x0,8
tick,0x7ffdf681f424,46558159,0,0x0,8
tick,0x7ffdf681f424,46560180,0,0x0,8
tick,0x7ffdf681f424,46562210,0,0x0,8
tick,0x7ffdf681f424,46564178,0,0x0,8
tick,0x7ffdf681f424,46566135,0,0x0,8
tick,0x7ffdf681f424,46568136,0,0x0,8
tick,0x7ffdf681f424,46570126,0,0x0,8
tick,0x7ffdf681f424,46572128,0,0x0,8
tick,0x7ffdf681f424,46574123,0,0x0,8
tick,0x7ffdf681f424,46576115,0,0x0,8
tick,0x7ffdf681f424,46578109,0,0x0,8
tick,0x7ffdf681f424,46580097,0,0x0,8
tick,0x7ffdf681f424,46582065,0,0x0,8
tick,0x7ffdf681f424,46584094,0,0x0,8
tick,0x7ffdf681f424,46586086,0,0x0,8
tick,0x7ffdf681f424,46587977,0,0x0,8
tick,0x7ffdf681f424,46590084,0,0x0,8
tick,0x7ffdf681f424,46592075,0,0x0,8
tick,0x7ffdf681f424,46594063,0,0x0,8
tick,0x7ffdf681f424,46596064,0,0x0,8
tick,0x7ffdf681f424,46598056,0,0x0,8
tick,0x7ffdf681f424,46600056,0,0x0,8
tick,0x7ffdf681f424,46602040,0,0x0,8
tick,0x7ffdf681f424,46603993,0,0x0,8
tick,0x7ffdf681f424,46606024,0,0x0,8
tick,0x7ffdf681f424,46608024,0,0x0,8
tick,0x7ffdf681f424,46610021,0,0x0,8
tick,0x7ffdf681f424,46612009,0,0x0,8
tick,0x7ffdf681f424,46614021,0,0x0,8
tick,0x7ffdf681f424,46616003,0,0x0,8
tick,0x7ffdf681f424,46618003,0,0x0,8
tick,0x7ffdf681f424,46620008,0,0x0,8
tick,0x7ffdf681f424,46621985,0,0x0,8
tick,0x7ffdf681f424,46623990,0,0x0,8
tick,0x7ffdf681f424,46626011,0,0x0,8
tick,0x7ffdf681f424,46627997,0,0x0,8
tick,0x7ffdf681f424,46629883,0,0x0,8
tick,0x7ffdf681f424,46631970,0,0x0,8
tick,0x7ffdf681f424,46633958,0,0x0,8
tick,0x7ffdf681f424,46635959,0,0x0,8
tick,0x7ffdf681f424,46637835,0,0x0,8
tick,0x7ffdf681f424,46639940,0,0x0,8
tick,0x7ffdf681f424,46641938,0,0x0,8
tick,0x7ffdf681f424,46643934,0,0x0,8
tick,0x7ffdf681f424,46645949,0,0x0,8
tick,0x7ffdf681f424,46647939,0,0x0,8
tick,0x7ffdf681f424,46649949,0,0x0,8
tick,0x7ffdf681f424,46651908,0,0x0,8
tick,0x7ffdf681f424,46653950,0,0x0,8
tick,0x7ffdf681f424,46655818,0,0x0,8
tick,0x7ffdf681f424,46657881,0,0x0,8
tick,0x7ffdf681f424,46659903,0,0x0,8
tick,0x7ffdf681f424,46661889,0,0x0,8
tick,0x7ffdf681f424,46663831,0,0x0,8
tick,0x7ffdf681f424,46665879,0,0x0,8
tick,0x7ffdf681f424,46667865,0,0x0,8
tick,0x7ffdf681f424,46669880,0,0x0,8
tick,0x7ffdf681f424,46671770,0,0x0,8
tick,0x7ffdf681f424,46673852,0,0x0,8
tick,0x7ffdf681f424,46675854,0,0x0,8
tick,0x7ffdf681f424,46677856,0,0x0,8
tick,0x7ffdf681f424,46679799,0,0x0,8
tick,0x7ffdf681f424,46681830,0,0x0,8
tick,0x7ffdf681f424,46683818,0,0x0,8
tick,0x7ffdf681f424,46685828,0,0x0,8
tick,0x7ffdf681f424,46687747,0,0x0,8
tick,0x7ffdf681f424,46689810,0,0x0,8
tick,0x7ffdf681f424,46691829,0,0x0,8
tick,0x7ffdf681f424,46693852,0,0x0,8
tick,0x7ffdf681f424,46695796,0,0x0,8
tick,0x7ffdf681f424,46697780,0,0x0,8
tick,0x7ffdf681f424,46699780,0,0x0,8
tick,0x7ffdf681f424,46701780,0,0x0,8
tick,0x7ffdf681f424,46703773,0,0x0,8
tick,0x7ffdf681f424,46705778,0,0x0,8
tick,0x7ffdf681f424,46707765,0,0x0,8
tick,0x7ffdf681f424,46709749,0,0x0,8
tick,0x7ffdf681f424,46711747,0,0x0,8
tick,0x7ffdf681f424,46713776,0,0x0,8
tick,0x7ffdf681f424,46715796,0,0x0,8
tick,0x7ffdf681f424,46717736,0,0x0,8
tick,0x7ffdf681f424,46719728,0,0x0,8
tick,0x7ffdf681f424,46721726,0,0x0,8
tick,0x7ffdf681f424,46723713,0,0x0,8
tick,0x7ffdf681f424,46725712,0,0x0,8
tick,0x7ffdf681f424,46727734,0,0x0,8
tick,0x7ffdf681f424,46729594,0,0x0,8
tick,0x7ffdf681f424,46731703,0,0x0,8
tick,0x7ffdf681f424,46733587,0,0x0,8
tick,0x7ffdf681f424,46735683,0,0x0,8
tick,0x7ffdf681f424,46737796,0,0x0,8
tick,0x7ffdf681f424,46739566,0,0x0,8
tick,0x7ffdf681f424,46741664,0,0x0,8
tick,0x7ffdf681f424,46743668,0,0x0,8
tick,0x7ffdf681f424,46745652,0,0x0,8
tick,0x7ffdf681f424,46747646,0,0x0,8
tick,0x7ffdf681f424,46749642,0,0x0,8
tick,0x7ffdf681f424,46751642,0,0x0,8
tick,0x7ffdf681f424,46753631,0,0x0,8
tick,0x7ffdf681f424,46755622,0,0x0,8
tick,0x7ffdf681f424,46757646,0,0x0,8
tick,0x7ffdf681f424,46759551,0,0x0,8
tick,0x7ffdf681f424,46761614,0,0x0,8
tick,0x7ffdf681f424,46763601,0,0x0,8
tick,0x7ffdf681f424,46765595,0,0x0,8
tick,0x7ffdf681f424,46767614,0,0x0,8
tick,0x7ffdf681f424,46769589,0,0x0,8
tick,0x7ffdf681f424,46771591,0,0x0,8
tick,0x7ffdf681f424,46773585,0,0x0,8
tick,0x7ffdf681f424,46775583,0,0x0,8
tick,0x7ffdf681f424,46777573,0,0x0,8
tick,0x7ffdf681f424,46779478,0,0x0,8
tick,0x7ffdf681f424,46781559,0,0x0,8
tick,0x7ffdf681f424,46783549,0,0x0,8
tick,0x7ffdf681f424,46785547,0,0x0,8
tick,0x7ffdf681f424,46787545,0,0x0,8
tick,0x7ffdf681f424,46789531,0,0x0,8
tick,0x7ffdf681f424,46791528,0,0x0,8
tick,0x7ffdf681f424,46793524,0,0x0,8
tick,0x7ffdf681f424,46795525,0,0x0,8
tick,0x7ffdf681f424,46797509,0,0x0,8
tick,0x7ffdf681f424,46799502,0,0x0,8
tick,0x7ffdf681f424,46801529,0,0x0,8
tick,0x7ffdf681f424,46803433,0,0x0,8
tick,0x7ffdf681f424,46805498,0,0x0,8
tick,0x7ffdf681f424,46807458,0,0x0,8
tick,0x7ffdf681f424,46809396,0,0x0,8
tick,0x7ffdf681f424,46811484,0,0x0,8
tick,0x7ffdf681f424,46813378,0,0x0,8
tick,0x7ffdf681f424,46815479,0,0x0,8
tick,0x7ffdf681f424,46817464,0,0x0,8
tick,0x7ffdf681f424,46819453,0,0x0,8
tick,0x7ffdf681f424,46821347,0,0x0,8
tick,0x7ffdf681f424,46823472,0,0x0,8
tick,0x7ffdf681f424,46825382,0,0x0,8
tick,0x7ffdf681f424,46827430,0,0x0,8
tick,0x7ffdf681f424,46829435,0,0x0,8
tick,0x7ffdf681f424,46831420,0,0x0,8
tick,0x7ffdf681f424,46833424,0,0x0,8
tick,0x7ffdf681f424,46835414,0,0x0,8
tick,0x7ffdf681f424,46837402,0,0x0,8
tick,0x7ffdf681f424,46839402,0,0x0,8
tick,0x7ffdf681f424,46841395,0,0x0,8
tick,0x7ffdf681f424,46843390,0,0x0,8
tick,0x7ffdf681f424,46845420,0,0x0,8
tick,0x7ffdf681f424,46847384,0,0x0,8
tick,0x7ffdf681f424,46849388,0,0x0,8
tick,0x7ffdf681f424,46851374,0,0x0,8
tick,0x7ffdf681f424,46853368,0,0x0,8
tick,0x7ffdf681f424,46855368,0,0x0,8
tick,0x7ffdf681f424,46857358,0,0x0,8
tick,0x7ffdf681f424,46859351,0,0x0,8
tick,0x7ffdf681f424,46861353,0,0x0,8
tick,0x7ffdf681f424,46863356,0,0x0,8
tick,0x7ffdf681f424,46865341,0,0x0,8
tick,0x7ffdf681f424,46867356,0,0x0,8
tick,0x7ffdf681f424,46869280,0,0x0,8
tick,0x7ffdf681f424,46871214,0,0x0,8
tick,0x7ffdf681f424,46873316,0,0x0,8
tick,0x7ffdf681f424,46875310,0,0x0,8
tick,0x7ffdf681f424,46877307,0,0x0,8
tick,0x7ffdf681f424,46879310,0,0x0,8
tick,0x7ffdf681f424,46881306,0,0x0,8
tick,0x7ffdf681f424,46883256,0,0x0,8
tick,0x7ffdf681f424,46885179,0,0x0,8
tick,0x7ffdf681f424,46887312,0,0x0,8
tick,0x7ffdf681f424,46889295,0,0x0,8
tick,0x7ffdf681f424,46891244,0,0x0,8
tick,0x7ffdf681f424,46893260,0,0x0,8
tick,0x7ffdf681f424,46895255,0,0x0,8
tick,0x7ffdf681f424,46897252,0,0x0,8
tick,0x7ffdf681f424,46899260,0,0x0,8
tick,0x7ffdf681f424,46901243,0,0x0,8
tick,0x7ffdf681f424,46903233,0,0x0,8
tick,0x7ffdf681f424,46905235,0,0x0,8
tick,0x7ffdf681f424,46907226,0,0x0,8
tick,0x7ffdf681f424,46909217,0,0x0,8
tick,0x7ffdf681f424,46911244,0,0x0,8
tick,0x7ffdf681f424,46913089,0,0x0,8
tick,0x7ffdf681f424,46915095,0,0x0,8
tick,0x7ffdf681f424,46917174,0,0x0,8
tick,0x7ffdf681f424,46919194,0,0x0,8
tick,0x7ffdf681f424,46921118,0,0x0,8
tick,0x7ffdf681f424,46923188,0,0x0,8
tick,0x7ffdf681f424,46925178,0,0x0,8
tick,0x7ffdf681f424,46927173,0,0x0,8
tick,0x7ffdf681f424,46929164,0,0x0,8
tick,0x7ffdf681f424,46931165,0,0x0,8
tick,0x7ffdf681f424,46933187,0,0x0,8
tick,0x7ffdf681f424,46935094,0,0x0,8
tick,0x7ffdf681f424,46937146,0,0x0,8
tick,0x7ffdf681f424,46939031,0,0x0,8
tick,0x7ffdf681f424,46941138,0,0x0,8
tick,0x7ffdf681f424,46943131,0,0x0,8
tick,0x7ffdf681f424,46945123,0,0x0,8
tick,0x7ffdf681f424,46947112,0,0x0,8
tick,0x7ffdf681f424,46949115,0,0x0,8
tick,0x7ffdf681f424,46951114,0,0x0,8
tick,0x7ffdf681f424,46953115,0,0x0,8
tick,0x7ffdf681f424,46955124,0,0x0,8
tick,0x7ffdf681f424,46957035,0,0x0,8
tick,0x7ffdf681f424,46958978,0,0x0,8
tick,0x7ffdf681f424,46960970,0,0x0,8
tick,0x7ffdf681f424,46962969,0,0x0,8
tick,0x7ffdf681f424,46965068,0,0x0,8
tick,0x7ffdf681f424,46967061,0,0x0,8
tick,0x7ffdf681f424,46969048,0,0x0,8
tick,0x7ffdf681f424,46971090,0,0x0,8
tick,0x7ffdf681f424,46973032,0,0x0,8
tick,0x7ffdf681f424,46975045,0,0x0,8
tick,0x7ffdf681f424,46977042,0,0x0,8
tick,0x7ffdf681f424,46978901,0,0x0,8
tick,0x7ffdf681f424,46981034,0,0x0,8
tick,0x7ffdf681f424,46983022,0,0x0,8
tick,0x7ffdf681f424,46985026,0,0x0,8
tick,0x7ffdf681f424,46987010,0,0x0,8
tick,0x7ffdf681f424,46989002,0,0x0,8
tick,0x7ffdf681f424,46991050,0,0x0,8
tick,0x7ffdf681f424,46993007,0,0x0,8
tick,0x7ffdf681f424,46994996,0,0x0,8
tick,0x7ffdf681f424,46996985,0,0x0,8
tick,0x7ffdf681f424,46999009,0,0x0,8
tick,0x7ffdf681f424,47000913,0,0x0,8
tick,0x7ffdf681f424,47002970,0,0x0,8
tick,0x7ffdf681f424,47004951,0,0x0,8
tick,0x7ffdf681f424,47006960,0,0x0,8
tick,0x7ffdf681f424,47008953,0,0x0,8
tick,0x7ffdf681f424,47010954,0,0x0,8
tick,0x7ffdf681f424,47012827,0,0x0,8
tick,0x7ffdf681f424,47014949,0,0x0,8
tick,0x7ffdf681f424,47016931,0,0x0,8
tick,0x7ffdf681f424,47018927,0,0x0,8
tick,0x7ffdf681f424,47020985,0,0x0,8
tick,0x7ffdf681f424,47022879,0,0x0,8
tick,0x7ffdf681f424,47024915,0,0x0,8
tick,0x7ffdf681f424,47026911,0,0x0,8
tick,0x7ffdf681f424,47028894,0,0x0,8
tick,0x7ffdf681f424,47030893,0,0x0,8
tick,0x7ffdf681f424,47032895,0,0x0,8
tick,0x7ffdf681f424,47034901,0,0x0,8
tick,0x7ffdf681f424,47036769,0,0x0,8
tick,0x7ffdf681f424,47038885,0,0x0,8
tick,0x7ffdf681f424,47040876,0,0x0,8
tick,0x7ffdf681f424,47042894,0,0x0,8
tick,0x7ffdf681f424,47044799,0,0x0,8
tick,0x7ffdf681f424,47046763,0,0x0,8
tick,0x7ffdf681f424,47048852,0,0x0,8
tick,0x7ffdf681f424,47050848,0,0x0,8
tick,0x7ffdf681f424,47052847,0,0x0,8
tick,0x7ffdf681f424,47054778,0,0x0,8
tick,0x7ffdf681f424,47056831,0,0x0,8
tick,0x7ffdf681f424,47058826,0,0x0,8
tick,0x7ffdf681f424,47060817,0,0x0,8
tick,0x7ffdf681f424,47062808,0,0x0,8
tick,0x7ffdf681f424,47064842,0,0x0,8
tick,0x7ffdf681f424,47066743,0,0x0,8
tick,0x7ffdf681f424,47068798,0,0x0,8
tick,0x7ffdf681f424,47070793,0,0x0,8
tick,0x7ffdf681f424,47072798,0,0x0,8
tick,0x7ffdf681f424,47074782,0,0x0,8
tick,0x7ffdf681f424,47076770,0,0x0,8
tick,0x7ffdf681f424,47078769,0,0x0,8
tick,0x7ffdf681f424,47080798,0,0x0,8
tick,0x7ffdf681f424,47082752,0,0x0,8
tick,0x7ffdf681f424,47084761,0,0x0,8
tick,0x7ffdf681f424,47086770,0,0x0,8
tick,0x7ffdf681f424,47088790,0,0x0,8
tick,0x7ffdf681f424,47090742,0,0x0,8
tick,0x7ffdf681f424,47092734,0,0x0,8
tick,0x7ffdf681f424,47094724,0,0x0,8
tick,0x7ffdf681f424,47096719,0,0x0,8
tick,0x7ffdf681f424,47098713,0,0x0,8
tick,0x7ffdf681f424,47100710,0,0x0,8
tick,0x7ffdf681f424,47102708,0,0x0,8
tick,0x7ffdf681f424,47104588,0,0x0,8
tick,0x7ffdf681f424,47106711,0,0x0,8
tick,0x7ffdf681f424,47108767,0,0x0,8
tick,0x7ffdf681f424,47110537,0,0x0,8
tick,0x7ffdf681f424,47112540,0,0x0,8
tick,0x7ffdf681f424,47114548,0,0x0,8
tick,0x7ffdf681f424,47116521,0,0x0,8
tick,0x7ffdf681f424,47118609,0,0x0,8
tick,0x7ffdf681f424,47120570,0,0x0,8
tick,0x7ffdf681f424,47122653,0,0x0,8
tick,0x7ffdf681f424,47124652,0,0x0,8
tick,0x7ffdf681f424,47126639,0,0x0,8
tick,0x7ffdf681f424,47128644,0,0x0,8
tick,0x7ffdf681f424,47130647,0,0x0,8
tick,0x7ffdf681f424,47132649,0,0x0,8
tick,0x7ffdf681f424,47134621,0,0x0,8
tick,0x7ffdf681f424,47136637,0,0x0,8
tick,0x7ffdf681f424,47138607,0,0x0,8
tick,0x7ffdf681f424,47140598,0,0x0,8
tick,0x7ffdf681f424,47142601,0,0x0,8
tick,0x7ffdf681f424,47144474,0,0x0,8
tick,0x7ffdf681f424,47146570,0,0x0,8
tick,0x7ffdf681f424,47148580,0,0x0,8
tick,0x7ffdf681f424,47150579,0,0x0,8
tick,0x7ffdf681f424,47152593,0,0x0,8
tick,0x7ffdf681f424,47154440,0,0x0,8
tick,0x7ffdf681f424,47156561,0,0x0,8
tick,0x7ffdf681f424,47158561,0,0x0,8
tick,0x7ffdf681f424,47160555,0,0x0,8
tick,0x7ffdf681f424,47162542,0,0x0,8
tick,0x7ffdf681f424,47164541,0,0x0,8
tick,0x7ffdf681f424,47166535,0,0x0,8
tick,0x7ffdf681f424,47168534,0,0x0,8
tick,0x7ffdf681f424,47170520,0,0x0,8
tick,0x7ffdf681f424,47172516,0,0x0,8
tick,0x7ffdf681f424,47174541,0,0x0,8
tick,0x7ffdf681f424,47176443,0,0x0,8
tick,0x7ffdf681f424,47178506,0,0x0,8
tick,0x7ffdf681f424,47180504,0,0x0,8
tick,0x7ffdf681f424,47182494,0,0x0,8
tick,0x7ffdf681f424,47184473,0,0x0,8
tick,0x7ffdf681f424,47186368,0,0x0,8
tick,0x7ffdf681f424,47188492,0,0x0,8
tick,0x7ffdf681f424,47190361,0,0x0,8
tick,0x7ffdf681f424,47192465,0,0x0,8
tick,0x7ffdf681f424,47194457,0,0x0,8
tick,0x7ffdf681f424,47196351,0,0x0,8
tick,0x7ffdf681f424,47198339,0,0x0,8
tick,0x7ffdf681f424,47200453,0,0x0,8
tick,0x7ffdf681f424,47202322,0,0x0,8
tick,0x7ffdf681f424,47204332,0,0x0,8
tick,0x7ffdf681f424,47206426,0,0x0,8
tick,0x7ffdf681f424,47208314,0,0x0,8
tick,0x7ffdf681f424,47210312,0,0x0,8
tick,0x7ffdf681f424,47212304,0,0x0,8
tick,0x7ffdf681f424,47214281,0,0x0,8
tick,0x7ffdf681f424,47216295,0,0x0,8
tick,0x7ffdf681f424,47218264,0,0x0,8
tick,0x7ffdf681f424,47220290,0,0x0,8
tick,0x7ffdf681f424,47222315,0,0x0,8
tick,0x7ffdf681f424,47224295,0,0x0,8
tick,0x7ffdf681f424,47226305,0,0x0,8
tick,0x7ffdf681f424,47228283,0,0x0,8
tick,0x7ffdf681f424,47230272,0,0x0,8
tick,0x7ffdf681f424,47232282,0,0x0,8
tick,0x7ffdf681f424,47234301,0,0x0,8
tick,0x7ffdf681f424,47236307,0,0x0,8
tick,0x7ffdf681f424,47238224,0,0x0,8
tick,0x7ffdf681f424,47240332,0,0x0,8
tick,0x7ffdf681f424,47242325,0,0x0,8
tick,0x7ffdf681f424,47244304,0,0x0,8
tick,0x7ffdf681f424,47246214,0,0x0,8
tick,0x7ffdf681f424,47248280,0,0x0,8
tick,0x7ffdf681f424,47250294,0,0x0,8
tick,0x7ffdf681f424,47252283,0,0x0,8
tick,0x7ffdf681f424,47254283,0,0x0,8
tick,0x7ffdf681f424,47256262,0,0x0,8
tick,0x7ffdf681f424,47258278,0,0x0,8
tick,0x7ffdf681f424,47260274,0,0x0,8
tick,0x7ffdf681f424,47262161,0,0x0,8
tick,0x7ffdf681f424,47264254,0,0x0,8
tick,0x7ffdf681f424,47266244,0,0x0,8
tick,0x7ffdf681f424,47268255,0,0x0,8
tick,0x7ffdf681f424,47270237,0,0x0,8
tick,0x7ffdf681f424,47272133,0,0x0,8
tick,0x7ffdf681f424,47274223,0,0x0,8
tick,0x7ffdf681f424,47276232,0,0x0,8
tick,0x7ffdf681f424,47278229,0,0x0,8
tick,0x7ffdf681f424,47280230,0,0x0,8
tick,0x7ffdf681f424,47282217,0,0x0,8
tick,0x7ffdf681f424,47284207,0,0x0,8
tick,0x7ffdf681f424,47286196,0,0x0,8
tick,0x7ffdf681f424,47288097,0,0x0,8
tick,0x7ffdf681f424,47290185,0,0x0,8
tick,0x7ffdf681f424,47292175,0,0x0,8
tick,0x7ffdf681f424,47294180,0,0x0,8
tick,0x7ffdf681f424,47296158,0,0x0,8
tick,0x7ffdf681f424,47298171,0,0x0,8
tick,0x7ffdf681f424,47300205,0,0x0,8
tick,0x7ffdf681f424,47302158,0,0x0,8
tick,0x7ffdf681f424,47304152,0,0x0,8
tick,0x7ffdf681f424,47306142,0,0x0,8
tick,0x7ffdf681f424,47308173,0,0x0,8
tick,0x7ffdf681f424,47310140,0,0x0,8
tick,0x7ffdf681f424,47312134,0,0x0,8
tick,0x7ffdf681f424,47314124,0,0x0,8
tick,0x7ffdf681f424,47316122,0,0x0,8
tick,0x7ffdf681f424,47318118,0,0x0,8
tick,0x7ffdf681f424,47320114,0,0x0,8
tick,0x7ffdf681f424,47322108,0,0x0,8
tick,0x7ffdf681f424,47324100,0,0x0,8
tick,0x7ffdf681f424,47326094,0,0x0,8
tick,0x7ffdf681f424,47328078,0,0x0,8
tick,0x7ffdf681f424,47330059,0,0x0,8
tick,0x7ffdf681f424,47332080,0,0x0,8
tick,0x7ffdf681f424,47334081,0,0x0,8
tick,0x7ffdf681f424,47336054,0,0x0,8
tick,0x7ffdf681f424,47337959,0,0x0,8
tick,0x7ffdf681f424,47340067,0,0x0,8
tick,0x7ffdf681f424,47342036,0,0x0,8
tick,0x7ffdf681f424,47344053,0,0x0,8
tick,0x7ffdf681f424,47346067,0,0x0,8
tick,0x7ffdf681f424,47348039,0,0x0,8
tick,0x7ffdf681f424,47350033,0,0x0,8
tick,0x7ffdf681f424,47352032,0,0x0,8
tick,0x7ffdf681f424,47354033,0,0x0,8
tick,0x7ffdf681f424,47356022,0,0x0,8
tick,0x7ffdf681f424,47358020,0,0x0,8
tick,0x7ffdf681f424,47360014,0,0x0,8
tick,0x7ffdf681f424,47362003,0,0x0,8
tick,0x7ffdf681f424,47364000,0,0x0,8
tick,0x7ffdf681f424,47366002,0,0x0,8
tick,0x7ffdf681f424,47367992,0,0x0,8
tick,0x7ffdf681f424,47369984,0,0x0,8
tick,0x7ffdf681f424,47372008,0,0x0,8
tick,0x7ffdf681f424,47373914,0,0x0,8
tick,0x7ffdf681f424,47375971,0,0x0,8
tick,0x7ffdf681f424,47377981,0,0x0,8
tick,0x7ffdf681f424,47379944,0,0x0,8
tick,0x7ffdf681f424,47381978,0,0x0,8
tick,0x7ffdf681f424,47383950,0,0x0,8
tick,0x7ffdf681f424,47385956,0,0x0,8
tick,0x7ffdf681f424,47387860,0,0x0,8
tick,0x7ffdf681f424,47389934,0,0x0,8
tick,0x7ffdf681f424,47391930,0,0x0,8
tick,0x7ffdf681f424,47393894,0,0x0,8
tick,0x7ffdf681f424,47395907,0,0x0,8
tick,0x7ffdf681f424,47397915,0,0x0,8
tick,0x7ffdf681f424,47399902,0,0x0,8
tick,0x7ffdf681f424,47401904,0,0x0,8
tick,0x7ffdf681f424,47403890,0,0x0,8
tick,0x7ffdf681f424,47405897,0,0x0,8
tick,0x7ffdf681f424,47407882,0,0x0,8
tick,0x7ffdf681f424,47409885,0,0x0,8
tick,0x7ffdf681f424,47411860,0,0x0,8
tick,0x7ffdf681f424,47413770,0,0x0,8
tick,0x7ffdf681f424,47415778,0,0x0,8
tick,0x7ffdf681f424,47417922,0,0x0,8
tick,0x7ffdf681f424,47419849,0,0x0,8
tick,0x7ffdf681f424,47421821,0,0x0,8
tick,0x7ffdf681f424,47423846,0,0x0,8
tick,0x7ffdf681f424,47425840,0,0x0,8
tick,0x7ffdf681f424,47427832,0,0x0,8
tick,0x7ffdf681f424,47429713,0,0x0,8
tick,0x7ffdf681f424,47431827,0,0x0,8
tick,0x7ffdf681f424,47433816,0,0x0,8
tick,0x7ffdf681f424,47435807,0,0x0,8
tick,0x7ffdf681f424,47437849,0,0x0,8
tick,0x7ffdf681f424,47439824,0,0x0,8
tick,0x7ffdf681f424,47441801,0,0x0,8
tick,0x7ffdf681f424,47443791,0,0x0,8
tick,0x7ffdf681f424,47445785,0,0x0,8
tick,0x7ffdf681f424,47447781,0,0x0,8
tick,0x7ffdf681f424,47449774,0,0x0,8
tick,0x7ffdf681f424,47451770,0,0x0,8
tick,0x7ffdf681f424,47453768,0,0x0,8
tick,0x7ffdf681f424,47455766,0,0x0,8
tick,0x7ffdf681f424,47457751,0,0x0,8
tick,0x7ffdf681f424,47459786,0,0x0,8
tick,0x7ffdf681f424,47461800,0,0x0,8
tick,0x7ffdf681f424,47463762,0,0x0,8
tick,0x7ffdf681f424,47465731,0,0x0,8
tick,0x7ffdf681f424,47467737,0,0x0,8
tick,0x7ffdf681f424,47469734,0,0x0,8
tick,0x7ffdf681f424,47471715,0,0x0,8
tick,0x7ffdf681f424,47473719,0,0x0,8
tick,0x7ffdf681f424,47475639,0,0x0,8
tick,0x7ffdf681f424,47477700,0,0x0,8
tick,0x7ffdf681f424,47479602,0,0x0,8
tick,0x7ffdf681f424,47481723,0,0x0,8
tick,0x7ffdf681f424,47483623,0,0x0,8
tick,0x7ffdf681f424,47485682,0,0x0,8
tick,0x7ffdf681f424,47487705,0,0x0,8
tick,0x7ffdf681f424,47489554,0,0x0,8
tick,0x7ffdf681f424,47491565,0,0x0,8
tick,0x7ffdf681f424,47493642,0,0x0,8
tick,0x7ffdf681f424,47495651,0,0x0,8
tick,0x7ffdf681f424,47497580,0,0x0,8
tick,0x7ffdf681f424,47499652,0,0x0,8
tick,0x7ffdf681f424,47501638,0,0x0,8
tick,0x7ffdf681f424,47503655,0,0x0,8
tick,0x7ffdf681f424,47505566,0,0x0,8
tick,0x7ffdf681f424,47507621,0,0x0,8
tick,0x7ffdf681f424,47509614,0,0x0,8
tick,0x7ffdf681f424,47511611,0,0x0,8
tick,0x7ffdf681f424,47513506,0,0x0,8
tick,0x7ffdf681f424,47515600,0,0x0,8
tick,0x7ffdf681f424,47517592,0,0x0,8
tick,0x7ffdf681f424,47519595,0,0x0,8
tick,0x7ffdf681f424,47521477,0,0x0,8
tick,0x7ffdf681f424,47523577,0,0x0,8
tick,0x7ffdf681f424,47525550,0,0x0,8
tick,0x7ffdf681f424,47527561,0,0x0,8
tick,0x7ffdf681f424,47529539,0,0x0,8
tick,0x7ffdf681f424,47531558,0,0x0,8
tick,0x7ffdf681f424,47533552,0,0x0,8
tick,0x7ffdf681f424,47535543,0,0x0,8
tick,0x7ffdf681f424,47537543,0,0x0,8
tick,0x7ffdf681f424,47539537,0,0x0,8
tick,0x7ffdf681f424,47541544,0,0x0,8
tick,0x7ffdf681f424,47543524,0,0x0,8
tick,0x7ffdf681f424,47545513,0,0x0,8
tick,0x7ffdf681f424,47547551,0,0x0,8
tick,0x7ffdf681f424,47549447,0,0x0,8
tick,0x7ffdf681f424,47551502,0,0x0,8
tick,0x7ffdf681f424,47553505,0,0x0,8
tick,0x7ffdf681f424,47555492,0,0x0,8
tick,0x7ffdf681f424,47557488,0,0x0,8
tick,0x7ffdf681f424,47559484,0,0x0,8
tick,0x7ffdf681f424,47561481,0,0x0,8
tick,0x7ffdf681f424,47563455,0,0x0,8
tick,0x7ffdf681f424,47565455,0,0x0,8
tick,0x7ffdf681f424,47567356,0,0x0,8
tick,0x7ffdf681f424,47569455,0,0x0,8
tick,0x7ffdf681f424,47571375,0,0x0,8
tick,0x7ffdf681f424,47573444,0,0x0,8
tick,0x7ffdf681f424,47575449,0,0x0,8
tick,0x7ffdf681f424,47577438,0,0x0,8
tick,0x7ffdf681f424,47579429,0,0x0,8
tick,0x7ffdf681f424,47581435,0,0x0,8
tick,0x7ffdf681f424,47583420,0,0x0,8
tick,0x7ffdf681f424,47585418,0,0x0,8
tick,0x7ffdf681f424,47587404,0,0x0,8
tick,0x7ffdf681f424,47589407,0,0x0,8
tick,0x7ffdf681f424,47591430,0,0x0,8
tick,0x7ffdf681f424,47593262,0,0x0,8
tick,0x7ffdf681f424,47595386,0,0x0,8
tick,0x7ffdf681f424,47597384,0,0x0,8
tick,0x7ffdf681f424,47599374,0,0x0,8
tick,0x7ffdf681f424,47601259,0,0x0,8
tick,0x7ffdf681f424,47603364,0,0x0,8
tick,0x7ffdf681f424,47605360,0,0x0,8
tick,0x7ffdf681f424,47607359,0,0x0,8
tick,0x7ffdf681f424,47609344,0,0x0,8
tick,0x7ffdf681f424,47611351,0,0x0,8
tick,0x7ffdf681f424,47613350,0,0x0,8
tick,0x7ffdf681f424,47615272,0,0x0,8
tick,0x7ffdf681f424,47617324,0,0x0,8
tick,0x7ffdf681f424,47619328,0,0x0,8
tick,0x7ffdf681f424,47621219,0,0x0,8
tick,0x7ffdf681f424,47623309,0,0x0,8
tick,0x7ffdf681f424,47625306,0,0x0,8
tick,0x7ffdf681f424,47627325,0,0x0,8
tick,0x7ffdf681f424,47629295,0,0x0,8
tick,0x7ffdf681f424,47631291,0,0x0,8
tick,0x7ffdf681f424,47633287,0,0x0,8
tick,0x7ffdf681f424,47635303,0,0x0,8
tick,0x7ffdf681f424,47637212,0,0x0,8
tick,0x7ffdf681f424,47639267,0,0x0,8
tick,0x7ffdf681f424,47641154,0,0x0,8
tick,0x7ffdf681f424,47643145,0,0x0,8
tick,0x7ffdf681f424,47645235,0,0x0,8
tick,0x7ffdf681f424,47647142,0,0x0,8
tick,0x7ffdf681f424,47649239,0,0x0,8
tick,0x7ffdf681f424,47651248,0,0x0,8
tick,0x7ffdf681f424,47653231,0,0x0,8
tick,0x7ffdf681f424,47655224,0,0x0,8
tick,0x7ffdf681f424,47657283,0,0x0,8
tick,0x7ffdf681f424,47659275,0,0x0,8
tick,0x7ffdf681f424,47661220,0,0x0,8
tick,0x7ffdf681f424,47663091,0,0x0,8
tick,0x7ffdf681f424,47665202,0,0x0,8
tick,0x7ffdf681f424,47667188,0,0x0,8
tick,0x7ffdf681f424,47669200,0,0x0,8
tick,0x7ffdf681f424,47671197,0,0x0,8
tick,0x7ffdf681f424,47673182,0,0x0,8
tick,0x7ffdf681f424,47675168,0,0x0,8
tick,0x7ffdf681f424,47677166,0,0x0,8
tick,0x7ffdf681f424,47679193,0,0x0,8
tick,0x7ffdf681f424,47681095,0,0x0,8
tick,0x7ffdf681f424,47683163,0,0x0,8
tick,0x7ffdf681f424,47685146,0,0x0,8
tick,0x7ffdf681f424,47687139,0,0x0,8
tick,0x7ffdf681f424,47689132,0,0x0,8
tick,0x7ffdf681f424,47691152,0,0x0,8
tick,0x7ffdf681f424,47693127,0,0x0,8
tick,0x7ffdf681f424,47695128,0,0x0,8
tick,0x7ffdf681f424,47697113,0,0x0,8
tick,0x7ffdf681f424,47699110,0,0x0,8
tick,0x7ffdf681f424,47701151,0,0x0,8
tick,0x7ffdf681f424,47703038,0,0x0,8
tick,0x7ffdf681f424,47705094,0,0x0,8
tick,0x7ffdf681f424,47707082,0,0x0,8
tick,0x7ffdf681f424,47709117,0,0x0,8
tick,0x7ffdf681f424,47711077,0,0x0,8
tick,0x7ffdf681f424,47712959,0,0x0,8
tick,0x7ffdf681f424,47715054,0,0x0,8
tick,0x7ffdf681f424,47716960,0,0x0,8
tick,0x7ffdf681f424,47718968,0,0x0,8
tick,0x7ffdf681f424,47721012,0,0x0,8
tick,0x7ffdf681f424,47723093,0,0x0,8
tick,0x7ffdf681f424,47725034,0,0x0,8
tick,0x7ffdf681f424,47727033,0,0x0,8
tick,0x7ffdf681f424,47729028,0,0x0,8
tick,0x7ffdf681f424,47731058,0,0x0,8
tick,0x7ffdf681f424,47733014,0,0x0,8
tick,0x7ffdf681f424,47735012,0,0x0,8
tick,0x7ffdf681f424,47737007,0,0x0,8
tick,0x7ffdf681f424,47738894,0,0x0,8
tick,0x7ffdf681f424,47741002,0,0x0,8
tick,0x7ffdf681f424,47742996,0,0x0,8
tick,0x7ffdf681f424,47744934,0,0x0,8
tick,0x7ffdf681f424,47746873,0,0x0,8
tick,0x7ffdf681f424,47748810,0,0x0,8
tick,0x7ffdf681f424,47750901,0,0x0,8
tick,0x7ffdf681f424,47752921,0,0x0,8
tick,0x7ffdf681f424,47754886,0,0x0,8
tick,0x7ffdf681f424,47756955,0,0x0,8
tick,0x7ffdf681f424,47758945,0,0x0,8
tick,0x7ffdf681f424,47760957,0,0x0,8
tick,0x7ffdf681f424,47762896,0,0x0,8
tick,0x7ffdf681f424,47764934,0,0x0,8
tick,0x7ffdf681f424,47766950,0,0x0,8
tick,0x7ffdf681f424,47768860,0,0x0,8
tick,0x7ffdf681f424,47770917,0,0x0,8
tick,0x7ffdf681f424,47772920,0,0x0,8
tick,0x7ffdf681f424,47774902,0,0x0,8
tick,0x7ffdf681f424,47776901,0,0x0,8
tick,0x7ffdf681f424,47778894,0,0x0,8
tick,0x7ffdf681f424,47780898,0,0x0,8
tick,0x7ffdf681f424,47782886,0,0x0,8
tick,0x7ffdf681f424,47784899,0,0x0,8
tick,0x7ffdf681f424,47786869,0,0x0,8
tick,0x7ffdf681f424,47788896,0,0x0,8
tick,0x7ffdf681f424,47790821,0,0x0,8
tick,0x7ffdf681f424,47792747,0,0x0,8
tick,0x7ffdf681f424,47794738,0,0x0,8
tick,0x7ffdf681f424,47796830,0,0x0,8
tick,0x7ffdf681f424,47798844,0,0x0,8
tick,0x7ffdf681f424,47800841,0,0x0,8
tick,0x7ffdf681f424,47802827,0,0x0,8
tick,0x7ffdf681f424,47804730,0,0x0,8
tick,0x7ffdf681f424,47806824,0,0x0,8
tick,0x7ffdf681f424,47808809,0,0x0,8
tick,0x7ffdf681f424,47810837,0,0x0,8
tick,0x7ffdf681f424,47812817,0,0x0,8
tick,0x7ffdf681f424,47814803,0,0x0,8
tick,0x7ffdf681f424,47816795,0,0x0,8
tick,0x7ffdf681f424,47818784,0,0x0,8
tick,0x7ffdf681f424,47820785,0,0x0,8
tick,0x7ffdf681f424,47822672,0,0x0,8
tick,0x7ffdf681f424,47824774,0,0x0,8
tick,0x7ffdf681f424,47826770,0,0x0,8
tick,0x7ffdf681f424,47828768,0,0x0,8
tick,0x7ffdf681f424,47830645,0,0x0,8
tick,0x7ffdf681f424,47832783,0,0x0,8
tick,0x7ffdf681f424,47834777,0,0x0,8
tick,0x7ffdf681f424,47836740,0,0x0,8
tick,0x7ffdf681f424,47838731,0,0x0,8
tick,0x7ffdf681f424,47840732,0,0x0,8
tick,0x7ffdf681f424,47842724,0,0x0,8
tick,0x7ffdf681f424,47844728,0,0x0,8
tick,0x7ffdf681f424,47846712,0,0x0,8
tick,0x7ffdf681f424,47848708,0,0x0,8
tick,0x7ffdf681f424,47850709,0,0x0,8
tick,0x7ffdf681f424,47852697,0,0x0,8
tick,0x7ffdf681f424,47854569,0,0x0,8
tick,0x7ffdf681f424,47856681,0,0x0,8
tick,0x7ffdf681f424,47858691,0,0x0,8
tick,0x7ffdf681f424,47860676,0,0x0,8
tick,0x7ffdf681f424,47862678,0,0x0,8
tick,0x7ffdf681f424,47864660,0,0x0,8
tick,0x7ffdf681f424,47866646,0,0x0,8
tick,0x7ffdf681f424,47868598,0,0x0,8
tick,0x7ffdf681f424,47870525,0,0x0,8
tick,0x7ffdf681f424,47872658,0,0x0,8
tick,0x7ffdf681f424,47874640,0,0x0,8
tick,0x7ffdf681f424,47876661,0,0x0,8
tick,0x7ffdf681f424,47878561,0,0x0,8
tick,0x7ffdf681f424,47880510,0,0x0,8
tick,0x7ffdf681f424,47882617,0,0x0,8
tick,0x7ffdf681f424,47884608,0,0x0,8
tick,0x7ffdf681f424,47886620,0,0x0,8
tick,0x7ffdf681f424,47888607,0,0x0,8
tick,0x7ffdf681f424,47890608,0,0x0,8
tick,0x7ffdf681f424,47892604,0,0x0,8
tick,0x7ffdf681f424,47894592,0,0x0,8
tick,0x7ffdf681f424,47896468,0,0x0,8
tick,0x7ffdf681f424,47898592,0,0x0,8
tick,0x7ffdf681f424,47900459,0,0x0,8
tick,0x7ffdf681f424,47902561,0,0x0,8
tick,0x7ffdf681f424,47904594,0,0x0,8
tick,0x7ffdf681f424,47906565,0,0x0,8
tick,0x7ffdf681f424,47908549,0,0x0,8
tick,0x7ffdf681f424,47910539,0,0x0,8
tick,0x7ffdf681f424,47912538,0,0x0,8
tick,0x7ffdf681f424,47914456,0,0x0,8
tick,0x7ffdf681f424,47916528,0,0x0,8
tick,0x7ffdf681f424,47918517,0,0x0,8
tick,0x7ffdf681f424,47920582,0,0x0,8
tick,0x7ffdf681f424,47922449,0,0x0,8
tick,0x7ffdf681f424,47924502,0,0x0,8
tick,0x7ffdf681f424,47926498,0,0x0,8
tick,0x7ffdf681f424,47928489,0,0x0,8
tick,0x7ffdf681f424,47930493,0,0x0,8
tick,0x7ffdf681f424,47932485,0,0x0,8
tick,0x7ffdf681f424,47934475,0,0x0,8
tick,0x7ffdf681f424,47936482,0,0x0,8
tick,0x7ffdf681f424,47938493,0,0x0,8
tick,0x7ffdf681f424,47940470,0,0x0,8
tick,0x7ffdf681f424,47942458,0,0x0,8
tick,0x7ffdf681f424,47944372,0,0x0,8
tick,0x7ffdf681f424,47946343,0,0x0,8
tick,0x7ffdf681f424,47948424,0,0x0,8
tick,0x7ffdf681f424,47950441,0,0x0,8
tick,0x7ffdf681f424,47952435,0,0x0,8
tick,0x7ffdf681f424,47954454,0,0x0,8
tick,0x7ffdf681f424,47956417,0,0x0,8
tick,0x7ffdf681f424,47958423,0,0x0,8
tick,0x7ffdf681f424,47960404,0,0x0,8
tick,0x7ffdf681f424,47962401,0,0x0,8
tick,0x7ffdf681f424,47964419,0,0x0,8
tick,0x7ffdf681f424,47966348,0,0x0,8
tick,0x7ffdf681f424,47968383,0,0x0,8
tick,0x7ffdf681f424,47970374,0,0x0,8
tick,0x7ffdf681f424,47972379,0,0x0,8
tick,0x7ffdf681f424,47974376,0,0x0,8
tick,0x7ffdf681f424,47976368,0,0x0,8
tick,0x7ffdf681f424,47978360,0,0x0,8
tick,0x7ffdf681f424,47980401,0,0x0,8
tick,0x7ffdf681f424,47982345,0,0x0,8
tick,0x7ffdf681f424,47984348,0,0x0,8
tick,0x7ffdf681f424,47986362,0,0x0,8
tick,0x7ffdf681f424,47988198,0,0x0,8
tick,0x7ffdf681f424,47990333,0,0x0,8
tick,0x7ffdf681f424,47992318,0,0x0,8
tick,0x7ffdf681f424,47994322,0,0x0,8
tick,0x7ffdf681f424,47996285,0,0x0,8
tick,0x7ffdf681f424,47998304,0,0x0,8
tick,0x7ffdf681f424,48000296,0,0x0,8
tick,0x7ffdf681f424,48002301,0,0x0,8
tick,0x7ffdf681f424,48004293,0,0x0,8
tick,0x7ffdf681f424,48006283,0,0x0,8
tick,0x7ffdf681f424,48008302,0,0x0,8
tick,0x7ffdf681f424,48010233,0,0x0,8
tick,0x7ffdf681f424,48012272,0,0x0,8
tick,0x7ffdf681f424,48014262,0,0x0,8
tick,0x7ffdf681f424,48016265,0,0x0,8
tick,0x7ffdf681f424,48018240,0,0x0,8
tick,0x7ffdf681f424,48020214,0,0x0,8
tick,0x7ffdf681f424,48022231,0,0x0,8
tick,0x7ffdf681f424,48024259,0,0x0,8
tick,0x7ffdf681f424,48026236,0,0x0,8
tick,0x7ffdf681f424,48028232,0,0x0,8
tick,0x7ffdf681f424,48030189,0,0x0,8
tick,0x7ffdf681f424,48032275,0,0x0,8
tick,0x7ffdf681f424,48034209,0,0x0,8
tick,0x7ffdf681f424,48036234,0,0x0,8
tick,0x7ffdf681f424,48038091,0,0x0,8
tick,0x7ffdf681f424,48040201,0,0x0,8
tick,0x7ffdf681f424,48042184,0,0x0,8
tick,0x7ffdf681f424,48044183,0,0x0,8
tick,0x7ffdf681f424,48046190,0,0x0,8
tick,0x7ffdf681f424,48048184,0,0x0,8
tick,0x7ffdf681f424,48050172,0,0x0,8
tick,0x7ffdf681f424,48052193,0,0x0,8
tick,0x7ffdf681f424,48054213,0,0x0,8
tick,0x7ffdf681f424,48056162,0,0x0,8
tick,0x7ffdf681f424,48058143,0,0x0,8
tick,0x7ffdf681f424,48060143,0,0x0,8
tick,0x7ffdf681f424,48062143,0,0x0,8
tick,0x7ffdf681f424,48064142,0,0x0,8
tick,0x7ffdf681f424,48066125,0,0x0,8
tick,0x7ffdf681f424,48068128,0,0x0,8
tick,0x7ffdf681f424,48070115,0,0x0,8
tick,0x7ffdf681f424,48072065,0,0x0,8
tick,0x7ffdf681f424,48074106,0,0x0,8
tick,0x7ffdf681f424,48076133,0,0x0,8
tick,0x7ffdf681f424,48078095,0,0x0,8
tick,0x7ffdf681f424,48080106,0,0x0,8
tick,0x7ffdf681f424,48082094,0,0x0,8
tick,0x7ffdf681f424,48084078,0,0x0,8
tick,0x7ffdf681f424,48086077,0,0x0,8
tick,0x7ffdf681f424,48087974,0,0x0,8
tick,0x7ffdf681f424,48090078,0,0x0,8
tick,0x7ffdf681f424,48092056,0,0x0,8
tick,0x7ffdf681f424,48094047,0,0x0,8
tick,0x7ffdf681f424,48095997,0,0x0,8
tick,0x7ffdf681f424,48097981,0,0x0,8
tick,0x7ffdf681f424,48100023,0,0x0,8
tick,0x7ffdf681f424,48102030,0,0x0,8
tick,0x7ffdf681f424,48104024,0,0x0,8
tick,0x7ffdf681f424,48106020,0,0x0,8
tick,0x7ffdf681f424,48108026,0,0x0,8
tick,0x7ffdf681f424,48110015,0,0x0,8
tick,0x7ffdf681f424,48111900,0,0x0,8
tick,0x7ffdf681f424,48114001,0,0x0,8
tick,0x7ffdf681f424,48115991,0,0x0,8
tick,0x7ffdf681f424,48117995,0,0x0,8
tick,0x7ffdf681f424,48120036,0,0x0,8
tick,0x7ffdf681f424,48121981,0,0x0,8
tick,0x7ffdf681f424,48123972,0,0x0,8
tick,0x7ffdf681f424,48125969,0,0x0,8
tick,0x7ffdf681f424,48127964,0,0x0,8
tick,0x7ffdf681f424,48129843,0,0x0,8
tick,0x7ffdf681f424,48131949,0,0x0,8
tick,0x7ffdf681f424,48133949,0,0x0,8
tick,0x7ffdf681f424,48135945,0,0x0,8
tick,0x7ffdf681f424,48137936,0,0x0,8
tick,0x7ffdf681f424,48139959,0,0x0,8
tick,0x7ffdf681f424,48141863,0,0x0,8
tick,0x7ffdf681f424,48143919,0,0x0,8
tick,0x7ffdf681f424,48145910,0,0x0,8
tick,0x7ffdf681f424,48147908,0,0x0,8
tick,0x7ffdf681f424,48149904,0,0x0,8
tick,0x7ffdf681f424,48151902,0,0x0,8
tick,0x7ffdf681f424,48153892,0,0x0,8
tick,0x7ffdf681f424,48155891,0,0x0,8
tick,0x7ffdf681f424,48157885,0,0x0,8
tick,0x7ffdf681f424,48159873,0,0x0,8
tick,0x7ffdf681f424,48161900,0,0x0,8
tick,0x7ffdf681f424,48163804,0,0x0,8
tick,0x7ffdf681f424,48165859,0,0x0,8
tick,0x7ffdf681f424,48167852,0,0x0,8
tick,0x7ffdf681f424,48169853,0,0x0,8
tick,0x7ffdf681f424,48171763,0,0x0,8
tick,0x7ffdf681f424,48173848,0,0x0,8
tick,0x7ffdf681f424,48175823,0,0x0,8
tick,0x7ffdf681f424,48177846,0,0x0,8
tick,0x7ffdf681f424,48179723,0,0x0,8
tick,0x7ffdf681f424,48181820,0,0x0,8
tick,0x7ffdf681f424,48183847,0,0x0,8
tick,0x7ffdf681f424,48185865,0,0x0,8
tick,0x7ffdf681f424,48187807,0,0x0,8
tick,0x7ffdf681f424,48189795,0,0x0,8
tick,0x7ffdf681f424,48191800,0,0x0,8
tick,0x7ffdf681f424,48193785,0,0x0,8
tick,0x7ffdf681f424,48195781,0,0x0,8
tick,0x7ffdf681f424,48197779,0,0x0,8
tick,0x7ffdf681f424,48199725,0,0x0,8
tick,0x7ffdf681f424,48201763,0,0x0,8
tick,0x7ffdf681f424,48203761,0,0x0,8
tick,0x7ffdf681f424,48205788,0,0x0,8
tick,0x7ffdf681f424,48207748,0,0x0,8
tick,0x7ffdf681f424,48209743,0,0x0,8
tick,0x7ffdf681f424,48211738,0,0x0,8
tick,0x7ffdf681f424,48213735,0,0x0,8
tick,0x7ffdf681f424,48215726,0,0x0,8
tick,0x7ffdf681f424,48217722,0,0x0,8
tick,0x7ffdf681f424,48219719,0,0x0,8
tick,0x7ffdf681f424,48221634,0,0x0,8
tick,0x7ffdf681f424,48223702,0,0x0,8
tick,0x7ffdf681f424,48225732,0,0x0,8
tick,0x7ffdf681f424,48227721,0,0x0,8
tick,0x7ffdf681f424,48229710,0,0x0,8
tick,0x7ffdf681f424,48231721,0,0x0,8
tick,0x7ffdf681f424,48233686,0,0x0,8
tick,0x7ffdf681f424,48235677,0,0x0,8
tick,0x7ffdf681f424,48237667,0,0x0,8
tick,0x7ffdf681f424,48239668,0,0x0,8
tick,0x7ffdf681f424,48241652,0,0x0,8
tick,0x7ffdf681f424,48243663,0,0x0,8
tick,0x7ffdf681f424,48245636,0,0x0,8
tick,0x7ffdf681f424,48247631,0,0x0,8
tick,0x7ffdf681f424,48249687,0,0x0,8
tick,0x7ffdf681f424,48251640,0,0x0,8
tick,0x7ffdf681f424,48253628,0,0x0,8
tick,0x7ffdf681f424,48255511,0,0x0,8
tick,0x7ffdf681f424,48257612,0,0x0,8
tick,0x7ffdf681f424,48259613,0,0x0,8
tick,0x7ffdf681f424,48261603,0,0x0,8
tick,0x7ffdf681f424,48263604,0,0x0,8
tick,0x7ffdf681f424,48265632,0,0x0,8
tick,0x7ffdf681f424,48267590,0,0x0,8
tick,0x7ffdf681f424,48269589,0,0x0,8
tick,0x7ffdf681f424,48271470,0,0x0,8
tick,0x7ffdf681f424,48273592,0,0x0,8
tick,0x7ffdf681f424,48275569,0,0x0,8
tick,0x7ffdf681f424,48277559,0,0x0,8
tick,0x7ffdf681f424,48279561,0,0x0,8
tick,0x7ffdf681f424,48281471,0,0x0,8
tick,0x7ffdf681f424,48283547,0,0x0,8
tick,0x7ffdf681f424,48285539,0,0x0,8
tick,0x7ffdf681f424,48287489,0,0x0,8
tick,0x7ffdf681f424,48289417,0,0x0,8
tick,0x7ffdf681f424,48291525,0,0x0,8
tick,0x7ffdf681f424,48293481,0,0x0,8
tick,0x7ffdf681f424,48295494,0,0x0,8
tick,0x7ffdf681f424,48297510,0,0x0,8
tick,0x7ffdf681f424,48299518,0,0x0,8
tick,0x7ffdf681f424,48301501,0,0x0,8
tick,0x7ffdf681f424,48303496,0,0x0,8
tick,0x7ffdf681f424,48305419,0,0x0,8
tick,0x7ffdf681f424,48307367,0,0x0,8
tick,0x7ffdf681f424,48309388,0,0x0,8
tick,0x7ffdf681f424,48311398,0,0x0,8
tick,0x7ffdf681f424,48313391,0,0x0,8
tick,0x7ffdf681f424,48315416,0,0x0,8
tick,0x7ffdf681f424,48317375,0,0x0,8
tick,0x7ffdf681f424,48319367,0,0x0,8
tick,0x7ffdf681f424,48321374,0,0x0,8
tick,0x7ffdf681f424,48323387,0,0x0,8
tick,0x7ffdf681f424,48325378,0,0x0,8
tick,0x7ffdf681f424,48327300,0,0x0,8
tick,0x7ffdf681f424,48329295,0,0x0,8
tick,0x7ffdf681f424,48331212,0,0x0,8
tick,0x7ffdf681f424,48333198,0,0x0,8
tick,0x7ffdf681f424,48335220,0,0x0,8
tick,0x7ffdf681f424,48337225,0,0x0,8
tick,0x7ffdf681f424,48339207,0,0x0,8
tick,0x7ffdf681f424,48341169,0,0x0,8
tick,0x7ffdf681f424,48343181,0,0x0,8
tick,0x7ffdf681f424,48345178,0,0x0,8
tick,0x7ffdf681f424,48347187,0,0x0,8
tick,0x7ffdf681f424,48349169,0,0x0,8
tick,0x7ffdf681f424,48351162,0,0x0,8
tick,0x7ffdf681f424,48353153,0,0x0,8
tick,0x7ffdf681f424,48355196,0,0x0,8
tick,0x7ffdf681f424,48357226,0,0x0,8
tick,0x7ffdf681f424,48359199,0,0x0,8
tick,0x7ffdf681f424,48361145,0,0x0,8
tick,0x7ffdf681f424,48363151,0,0x0,8
tick,0x7ffdf681f424,48365332,0,0x0,8
tick,0x7ffdf681f424,48367334,0,0x0,8
tick,0x7ffdf681f424,48369287,0,0x0,8
tick,0x7ffdf681f424,48371281,0,0x0,8
tick,0x7ffdf681f424,48373212,0,0x0,8
tick,0x7ffdf681f424,48375160,0,0x0,8
tick,0x7ffdf681f424,48377146,0,0x0,8
tick,0x7ffdf681f424,48379136,0,0x0,8
tick,0x7ffdf681f424,48381199,0,0x0,8
tick,0x7ffdf681f424,48383097,0,0x0,8
tick,0x7ffdf681f424,48385241,0,0x0,8
tick,0x7ffdf681f424,48387277,0,0x0,8
tick,0x7ffdf681f424,48389315,0,0x0,8
tick,0x7ffdf681f424,48391314,0,0x0,8
tick,0x7ffdf681f424,48393469,0,0x0,8
tick,0x7ffdf681f424,48395251,0,0x0,8
tick,0x7ffdf681f424,48397269,0,0x0,8
tick,0x7ffdf681f424,48399226,0,0x0,8
tick,0x7ffdf681f424,48401205,0,0x0,8
tick,0x7ffdf681f424,48403233,0,0x0,8
tick,0x7ffdf681f424,48405208,0,0x0,8
tick,0x7ffdf681f424,48407211,0,0x0,8
tick,0x7ffdf681f424,48409168,0,0x0,8
tick,0x7ffdf681f424,48411247,0,0x0,8
tick,0x7ffdf681f424,48413287,0,0x0,8
tick,0x7ffdf681f424,48415396,0,0x0,8
tick,0x7ffdf681f424,48417500,0,0x0,8
tick,0x7ffdf681f424,48419501,0,0x0,8
tick,0x7ffdf681f424,48420677,0,0x0,8
tick,0x7ffdf681f424,48421864,0,0x0,8
tick,0x7ffdf681f424,48423078,0,0x0,8
tick,0x7ffdf681f424,48425094,0,0x0,8
tick,0x7ffdf681f424,48426966,0,0x0,8
tick,0x7ffdf681f424,48428970,0,0x0,8
tick,0x7ffdf681f424,48430876,0,0x0,8
tick,0x7ffdf681f424,48432907,0,0x0,8
tick,0x7ffdf681f424,48434845,0,0x0,8
tick,0x7ffdf681f424,48436882,0,0x0,8
tick,0x7ffdf681f424,48438841,0,0x0,8
tick,0x7ffdf681f424,48440841,0,0x0,8
tick,0x7ffdf681f424,48442875,0,0x0,8
tick,0x7ffdf681f424,48444857,0,0x0,8
tick,0x7ffdf681f424,48446835,0,0x0,8
tick,0x7ffdf681f424,48448840,0,0x0,8
tick,0x7ffdf681f424,48450828,0,0x0,8
tick,0x7ffdf681f424,48452957,0,0x0,8
tick,0x7ffdf681f424,48454801,0,0x0,8
tick,0x7ffdf681f424,48456889,0,0x0,8
tick,0x7ffdf681f424,48458922,0,0x0,8
tick,0x7ffdf681f424,48460924,0,0x0,8
tick,0x7ffdf681f424,48462904,0,0x0,8
tick,0x7ffdf681f424,48464883,0,0x0,8
tick,0x7ffdf681f424,48466963,0,0x0,8
tick,0x7ffdf681f424,48468755,0,0x0,8
tick,0x7ffdf681f424,48470864,0,0x0,8
tick,0x7ffdf681f424,48472942,0,0x0,8
tick,0x7ffdf681f424,48475101,0,0x0,8
tick,0x7ffdf681f424,48477081,0,0x0,8
tick,0x7ffdf681f424,48479133,0,0x0,8
tick,0x7ffdf681f424,48480921,0,0x0,8
tick,0x7ffdf681f424,48482973,0,0x0,8
tick,0x7ffdf681f424,48484842,0,0x0,8
tick,0x7ffdf681f424,48486867,0,0x0,8
tick,0x7ffdf681f424,48488896,0,0x0,8
tick,0x7ffdf681f424,48490934,0,0x0,8
tick,0x7ffdf681f424,48492826,0,0x0,8
tick,0x7ffdf681f424,48494857,0,0x0,8
tick,0x7ffdf681f424,48496854,0,0x0,8
tick,0x7ffdf681f424,48498889,0,0x0,8
tick,0x7ffdf681f424,48500831,0,0x0,8
tick,0x7ffdf681f424,48502865,0,0x0,8
tick,0x7ffdf681f424,48504918,0,0x0,8
tick,0x7ffdf681f424,48506888,0,0x0,8
tick,0x7ffdf681f424,48508886,0,0x0,8
tick,0x7ffdf681f424,48510903,0,0x0,8
tick,0x7ffdf681f424,48512955,0,0x0,8
tick,0x7ffdf681f424,48514925,0,0x0,8
tick,0x7ffdf681f424,48516893,0,0x0,8
tick,0x7ffdf681f424,48518901,0,0x0,8
tick,0x7ffdf681f424,48520915,0,0x0,8
tick,0x7ffdf681f424,48522861,0,0x0,8
tick,0x7ffdf681f424,48524949,0,0x0,8
tick,0x7ffdf681f424,48526803,0,0x0,8
tick,0x7ffdf681f424,48528896,0,0x0,8
tick,0x7ffdf681f424,48530873,0,0x0,8
tick,0x7ffdf681f424,48532862,0,0x0,8
tick,0x7ffdf681f424,48534870,0,0x0,8
tick,0x7ffdf681f424,48536812,0,0x0,8
tick,0x7ffdf681f424,48538807,0,0x0,8
tick,0x7ffdf681f424,48540781,0,0x0,8
tick,0x7ffdf681f424,48542796,0,0x0,8
tick,0x7ffdf681f424,48544770,0,0x0,8
tick,0x7ffdf681f424,48546794,0,0x0,8
tick,0x7ffdf681f424,48548823,0,0x0,8
tick,0x7ffdf681f424,48550754,0,0x0,8
tick,0x7ffdf681f424,48552729,0,0x0,8
tick,0x7ffdf681f424,48554738,0,0x0,8
tick,0x7ffdf681f424,48556712,0,0x0,8
tick,0x7ffdf681f424,48558795,0,0x0,8
tick,0x7ffdf681f424,48560815,0,0x0,8
tick,0x7ffdf681f424,48562798,0,0x0,8
tick,0x7ffdf681f424,48564778,0,0x0,8
tick,0x7ffdf681f424,48566782,0,0x0,8
tick,0x7ffdf681f424,48568771,0,0x0,8
tick,0x7ffdf681f424,48570761,0,0x0,8
tick,0x7ffdf681f424,48572785,0,0x0,8
tick,0x7ffdf681f424,48574771,0,0x0,8
tick,0x7ffdf681f424,48576778,0,0x0,8
tick,0x7ffdf681f424,48578747,0,0x0,8
tick,0x7ffdf681f424,48580767,0,0x0,8
tick,0x7ffdf681f424,48582784,0,0x0,8
tick,0x7ffdf681f424,48584703,0,0x0,8
tick,0x7ffdf681f424,48586730,0,0x0,8
tick,0x7ffdf681f424,48588782,0,0x0,8
tick,0x7ffdf681f424,48590729,0,0x0,8
tick,0x7ffdf681f424,48592730,0,0x0,8
tick,0x7ffdf681f424,48594690,0,0x0,8
tick,0x7ffdf681f424,48596615,0,0x0,8
tick,0x7ffdf681f424,48598677,0,0x0,8
tick,0x7ffdf681f424,48600619,0,0x0,8
tick,0x7ffdf681f424,48602667,0,0x0,8
tick,0x7ffdf681f424,48604630,0,0x0,8
tick,0x7ffdf681f424,48606699,0,0x0,8
tick,0x7ffdf681f424,48608657,0,0x0,8
tick,0x7ffdf681f424,48610642,0,0x0,8
tick,0x7ffdf681f424,48612589,0,0x0,8
tick,0x7ffdf681f424,48614650,0,0x0,8
tick,0x7ffdf681f424,48616571,0,0x0,8
tick,0x7ffdf681f424,48618615,0,0x0,8
tick,0x7ffdf681f424,48620587,0,0x0,8
tick,0x7ffdf681f424,48622639,0,0x0,8
tick,0x7ffdf681f424,48624662,0,0x0,8
tick,0x7ffdf681f424,48626589,0,0x0,8
tick,0x7ffdf681f424,48628580,0,0x0,8
tick,0x7ffdf681f424,48630599,0,0x0,8
tick,0x7ffdf681f424,48632601,0,0x0,8
tick,0x7ffdf681f424,48634612,0,0x0,8
tick,0x7ffdf681f424,48636557,0,0x0,8
tick,0x7ffdf681f424,48638645,0,0x0,8
tick,0x7ffdf681f424,48640601,0,0x0,8
tick,0x7ffdf681f424,48642541,0,0x0,8
tick,0x7ffdf681f424,48644553,0,0x0,8
tick,0x7ffdf681f424,48646599,0,0x0,8
tick,0x7ffdf681f424,48648525,0,0x0,8
tick,0x7ffdf681f424,48650560,0,0x0,8
tick,0x7ffdf681f424,48652528,0,0x0,8
tick,0x7ffdf681f424,48654568,0,0x0,8
tick,0x7ffdf681f424,48656518,0,0x0,8
tick,0x7ffdf681f424,48658560,0,0x0,8
tick,0x7ffdf681f424,48660494,0,0x0,8
tick,0x7ffdf681f424,48662508,0,0x0,8
tick,0x7ffdf681f424,48664506,0,0x0,8
tick,0x7ffdf681f424,48666534,0,0x0,8
tick,0x7ffdf681f424,48668554,0,0x0,8
tick,0x7ffdf681f424,48670558,0,0x0,8
tick,0x7ffdf681f424,48672589,0,0x0,8
tick,0x7ffdf681f424,48674521,0,0x0,8
tick,0x7ffdf681f424,48676556,0,0x0,8
tick,0x7ffdf681f424,48678555,0,0x0,8
tick,0x7ffdf681f424,48680504,0,0x0,8
tick,0x7ffdf681f424,48682521,0,0x0,8
tick,0x7ffdf681f424,48684520,0,0x0,8
tick,0x7ffdf681f424,48686506,0,0x0,8
tick,0x7ffdf681f424,48688417,0,0x0,8
tick,0x7ffdf681f424,48690488,0,0x0,8
tick,0x7ffdf681f424,48692473,0,0x0,8
tick,0x7ffdf681f424,48694502,0,0x0,8
tick,0x7ffdf681f424,48696487,0,0x0,8
tick,0x7ffdf681f424,48698478,0,0x0,8
tick,0x7ffdf681f424,48700387,0,0x0,8
tick,0x7ffdf681f424,48702484,0,0x0,8
tick,0x7ffdf681f424,48704520,0,0x0,8
tick,0x7ffdf681f424,48706491,0,0x0,8
tick,0x7ffdf681f424,48708459,0,0x0,8
tick,0x7ffdf681f424,48710476,0,0x0,8
tick,0x7ffdf681f424,48712462,0,0x0,8
tick,0x7ffdf681f424,48714438,0,0x0,8
tick,0x7ffdf681f424,48716430,0,0x0,8
tick,0x7ffdf681f424,48718439,0,0x0,8
tick,0x7ffdf681f424,48720437,0,0x0,8
tick,0x7ffdf681f424,48722360,0,0x0,8
tick,0x7ffdf681f424,48724419,0,0x0,8
tick,0x7ffdf681f424,48726395,0,0x0,8
tick,0x7ffdf681f424,48728394,0,0x0,8
tick,0x7ffdf681f424,48730383,0,0x0,8
tick,0x7ffdf681f424,48732361,0,0x0,8
tick,0x7ffdf681f424,48734355,0,0x0,8
tick,0x7ffdf681f424,48736364,0,0x0,8
tick,0x7ffdf681f424,48738357,0,0x0,8
tick,0x7ffdf681f424,48740345,0,0x0,8
tick,0x7ffdf681f424,48742356,0,0x0,8
tick,0x7ffdf681f424,48744336,0,0x0,8
tick,0x7ffdf681f424,48746350,0,0x0,8
tick,0x7ffdf681f424,48748333,0,0x0,8
tick,0x7ffdf681f424,48750333,0,0x0,8
tick,0x7ffdf681f424,48752302,0,0x0,8
tick,0x7ffdf681f424,48754331,0,0x0,8
tick,0x7ffdf681f424,48756331,0,0x0,8
tick,0x7ffdf681f424,48758312,0,0x0,8
tick,0x7ffdf681f424,48760290,0,0x0,8
tick,0x7ffdf681f424,48762319,0,0x0,8
tick,0x7ffdf681f424,48764309,0,0x0,8
tick,0x7ffdf681f424,48766306,0,0x0,8
tick,0x7ffdf681f424,48768258,0,0x0,8
tick,0x7ffdf681f424,48770269,0,0x0,8
tick,0x7ffdf681f424,48772283,0,0x0,8
tick,0x7ffdf681f424,48774242,0,0x0,8
tick,0x7ffdf681f424,48776288,0,0x0,8
tick,0x7ffdf681f424,48778253,0,0x0,8
tick,0x7ffdf681f424,48780277,0,0x0,8
tick,0x7ffdf681f424,48782219,0,0x0,8
tick,0x7ffdf681f424,48784264,0,0x0,8
tick,0x7ffdf681f424,48786228,0,0x0,8
tick,0x7ffdf681f424,48788141,0,0x0,8
tick,0x7ffdf681f424,48790230,0,0x0,8
tick,0x7ffdf681f424,48792208,0,0x0,8
tick,0x7ffdf681f424,48794204,0,0x0,8
tick,0x7ffdf681f424,48796137,0,0x0,8
tick,0x7ffdf681f424,48798211,0,0x0,8
tick,0x7ffdf681f424,48800176,0,0x0,8
tick,0x7ffdf681f424,48802194,0,0x0,8
tick,0x7ffdf681f424,48804161,0,0x0,8
tick,0x7ffdf681f424,48806186,0,0x0,8
tick,0x7ffdf681f424,48808151,0,0x0,8
tick,0x7ffdf681f424,48810063,0,0x0,8
tick,0x7ffdf681f424,48812129,0,0x0,8
tick,0x7ffdf681f424,48814077,0,0x0,8
tick,0x7ffdf681f424,48816265,0,0x0,8
tick,0x7ffdf681f424,48818463,0,0x0,8
tick,0x7ffdf681f424,48820345,0,0x0,8
tick,0x7ffdf681f424,48822404,0,0x0,8
tick,0x7ffdf681f424,48824522,0,0x0,8
tick,0x7ffdf681f424,48826373,0,0x0,8
tick,0x7ffdf681f424,48828406,0,0x0,8
tick,0x7ffdf681f424,48830368,0,0x0,8
tick,0x7ffdf681f424,48832426,0,0x0,8
tick,0x7ffdf681f424,48834459,0,0x0,8
tick,0x7ffdf681f424,48836407,0,0x0,8
tick,0x7ffdf681f424,48838429,0,0x0,8
tick,0x7ffdf681f424,48840395,0,0x0,8
tick,0x7ffdf681f424,48842378,0,0x0,8
tick,0x7ffdf681f424,48844331,0,0x0,8
tick,0x7ffdf681f424,48846405,0,0x0,8
tick,0x7ffdf681f424,48848314,0,0x0,8
tick,0x7ffdf681f424,48850372,0,0x0,8
tick,0x7ffdf681f424,48852353,0,0x0,8
tick,0x7ffdf681f424,48853398,0,0x0,8
tick,0x7ffdf681f424,48855420,0,0x0,8
tick,0x7ffdf681f424,48857408,0,0x0,8
tick,0x7ffdf681f424,48859384,0,0x0,8
tick,0x7ffdf681f424,48861394,0,0x0,8
tick,0x7ffdf681f424,48863392,0,0x0,8
tick,0x7ffdf681f424,48865323,0,0x0,8
tick,0x7ffdf681f424,48867277,0,0x0,8
tick,0x7ffdf681f424,48869281,0,0x0,8
tick,0x7ffdf681f424,48871270,0,0x0,8
tick,0x7ffdf681f424,48873358,0,0x0,8
tick,0x7ffdf681f424,48875316,0,0x0,8
tick,0x7ffdf681f424,48877318,0,0x0,8
tick,0x7ffdf681f424,48879339,0,0x0,8
tick,0x7ffdf681f424,48881403,0,0x0,8
tick,0x7ffdf681f424,48883401,0,0x0,8
tick,0x7ffdf681f424,48885364,0,0x0,8
tick,0x7ffdf681f424,48887362,0,0x0,8
tick,0x7ffdf681f424,48889373,0,0x0,8
tick,0x7ffdf681f424,48891425,0,0x0,8
tick,0x7ffdf681f424,48893346,0,0x0,8
tick,0x7ffdf681f424,48895365,0,0x0,8
tick,0x7ffdf681f424,48897354,0,0x0,8
tick,0x7ffdf681f424,48899271,0,0x0,8
tick,0x7ffdf681f424,48901296,0,0x0,8
tick,0x7ffdf681f424,48903329,0,0x0,8
tick,0x7ffdf681f424,48905224,0,0x0,8
tick,0x7ffdf681f424,48907291,0,0x0,8
tick,0x7ffdf681f424,48909283,0,0x0,8
tick,0x7ffdf681f424,48911340,0,0x0,8
tick,0x7ffdf681f424,48913329,0,0x0,8
tick,0x7ffdf681f424,48915246,0,0x0,8
tick,0x7ffdf681f424,48917233,0,0x0,8
tick,0x7ffdf681f424,48919208,0,0x0,8
tick,0x7ffdf681f424,48921196,0,0x0,8
tick,0x7ffdf681f424,48923225,0,0x0,8
tick,0x7ffdf681f424,48925173,0,0x0,8
tick,0x7ffdf681f424,48927186,0,0x0,8
tick,0x7ffdf681f424,48929196,0,0x0,8
tick,0x7ffdf681f424,48931169,0,0x0,8
tick,0x7ffdf681f424,48933181,0,0x0,8
tick,0x7ffdf681f424,48935254,0,0x0,8
tick,0x7ffdf681f424,48937223,0,0x0,8
tick,0x7ffdf681f424,48939270,0,0x0,8
tick,0x7ffdf681f424,48941219,0,0x0,8
tick,0x7ffdf681f424,48943236,0,0x0,8
tick,0x7ffdf681f424,48945230,0,0x0,8
tick,0x7ffdf681f424,48947231,0,0x0,8
tick,0x7ffdf681f424,48949221,0,0x0,8
tick,0x7ffdf681f424,48951104,0,0x0,8
tick,0x7ffdf681f424,48953189,0,0x0,8
tick,0x7ffdf681f424,48955085,0,0x0,8
tick,0x7ffdf681f424,48957181,0,0x0,8
tick,0x7ffdf681f424,48959211,0,0x0,8
tick,0x7ffdf681f424,48961165,0,0x0,8
tick,0x7ffdf681f424,48963139,0,0x0,8
tick,0x7ffdf681f424,48965222,0,0x0,8
tick,0x7ffdf681f424,48967167,0,0x0,8
tick,0x7ffdf681f424,48969170,0,0x0,8
tick,0x7ffdf681f424,48971158,0,0x0,8
tick,0x7ffdf681f424,48973126,0,0x0,8
tick,0x7ffdf681f424,48975095,0,0x0,8
tick,0x7ffdf681f424,48977102,0,0x0,8
tick,0x7ffdf681f424,48979088,0,0x0,8
tick,0x7ffdf681f424,48981079,0,0x0,8
tick,0x7ffdf681f424,48983068,0,0x0,8
tick,0x7ffdf681f424,48985067,0,0x0,8
tick,0x7ffdf681f424,48987023,0,0x0,8
tick,0x7ffdf681f424,48989054,0,0x0,8
tick,0x7ffdf681f424,48991049,0,0x0,8
tick,0x7ffdf681f424,48993006,0,0x0,8
tick,0x7ffdf681f424,48995051,0,0x0,8
tick,0x7ffdf681f424,48997037,0,0x0,8
tick,0x7ffdf681f424,48999061,0,0x0,8
tick,0x7ffdf681f424,49001058,0,0x0,8
tick,0x7ffdf681f424,49003016,0,0x0,8
tick,0x7ffdf681f424,49005013,0,0x0,8
tick,0x7ffdf681f424,49007008,0,0x0,8
tick,0x7ffdf681f424,49009053,0,0x0,8
tick,0x7ffdf681f424,49011024,0,0x0,8
tick,0x7ffdf681f424,49012973,0,0x0,8
tick,0x7ffdf681f424,49015010,0,0x0,8
tick,0x7ffdf681f424,49016977,0,0x0,8
tick,0x7ffdf681f424,49019029,0,0x0,8
tick,0x7ffdf681f424,49020966,0,0x0,8
tick,0x7ffdf681f424,49022948,0,0x0,8
tick,0x7ffdf681f424,49024971,0,0x0,8
tick,0x7ffdf681f424,49026970,0,0x0,8
tick,0x7ffdf681f424,49028928,0,0x0,8
tick,0x7ffdf681f424,49030969,0,0x0,8
tick,0x7ffdf681f424,49032985,0,0x0,8
tick,0x7ffdf681f424,49034999,0,0x0,8
tick,0x7ffdf681f424,49036988,0,0x0,8
tick,0x7ffdf681f424,49038995,0,0x0,8
tick,0x7ffdf681f424,49040994,0,0x0,8
tick,0x7ffdf681f424,49042952,0,0x0,8
tick,0x7ffdf681f424,49044960,0,0x0,8
tick,0x7ffdf681f424,49046936,0,0x0,8
tick,0x7ffdf681f424,49048960,0,0x0,8
tick,0x7ffdf681f424,49050973,0,0x0,8
tick,0x7ffdf681f424,49052931,0,0x0,8
tick,0x7ffdf681f424,49054948,0,0x0,8
tick,0x7ffdf681f424,49056942,0,0x0,8
tick,0x7ffdf681f424,49058931,0,0x0,8
tick,0x7ffdf681f424,49060899,0,0x0,8
tick,0x7ffdf681f424,49062946,0,0x0,8
tick,0x7ffdf681f424,49064867,0,0x0,8
tick,0x7ffdf681f424,49066851,0,0x0,8
tick,0x7ffdf681f424,49068924,0,0x0,8
tick,0x7ffdf681f424,49070921,0,0x0,8
tick,0x7ffdf681f424,49072888,0,0x0,8
tick,0x7ffdf681f424,49074855,0,0x0,8
tick,0x7ffdf681f424,49076871,0,0x0,8
tick,0x7ffdf681f424,49078891,0,0x0,8
tick,0x7ffdf681f424,49080895,0,0x0,8
tick,0x7ffdf681f424,49082832,0,0x0,8
tick,0x7ffdf681f424,49084765,0,0x0,8
tick,0x7ffdf681f424,49086806,0,0x0,8
tick,0x7ffdf681f424,49088825,0,0x0,8
tick,0x7ffdf681f424,49090819,0,0x0,8
tick,0x7ffdf681f424,49092779,0,0x0,8
tick,0x7ffdf681f424,49094752,0,0x0,8
tick,0x7ffdf681f424,49096752,0,0x0,8
tick,0x7ffdf681f424,49098741,0,0x0,8
tick,0x7ffdf681f424,49100738,0,0x0,8
tick,0x7ffdf681f424,49102779,0,0x0,8
tick,0x7ffdf681f424,49104736,0,0x0,8
tick,0x7ffdf681f424,49106719,0,0x0,8
tick,0x7ffdf681f424,49108747,0,0x0,8
tick,0x7ffdf681f424,49110768,0,0x0,8
tick,0x7ffdf681f424,49112723,0,0x0,8
tick,0x7ffdf681f424,49114721,0,0x0,8
tick,0x7ffdf681f424,49116698,0,0x0,8
tick,0x7ffdf681f424,49118689,0,0x0,8
tick,0x7ffdf681f424,49120681,0,0x0,8
tick,0x7ffdf681f424,49122756,0,0x0,8
tick,0x7ffdf681f424,49124747,0,0x0,8
tick,0x7ffdf681f424,49126719,0,0x0,8
tick,0x7ffdf681f424,49128752,0,0x0,8
tick,0x7ffdf681f424,49130737,0,0x0,8
tick,0x7ffdf681f424,49132697,0,0x0,8
tick,0x7ffdf681f424,49134730,0,0x0,8
tick,0x7ffdf681f424,49136734,0,0x0,8
tick,0x7ffdf681f424,49138696,0,0x0,8
tick,0x7ffdf681f424,49140695,0,0x0,8
tick,0x7ffdf681f424,49142710,0,0x0,8
tick,0x7ffdf681f424,49144676,0,0x0,8
tick,0x7ffdf681f424,49146667,0,0x0,8
tick,0x7ffdf681f424,49148683,0,0x0,8
tick,0x7ffdf681f424,49150702,0,0x0,8
tick,0x7ffdf681f424,49152663,0,0x0,8
tick,0x7ffdf681f424,49154684,0,0x0,8
tick,0x7ffdf681f424,49156666,0,0x0,8
tick,0x7ffdf681f424,49158657,0,0x0,8
tick,0x7ffdf681f424,49160641,0,0x0,8
tick,0x7ffdf681f424,49162646,0,0x0,8
tick,0x7ffdf681f424,49164629,0,0x0,8
tick,0x7ffdf681f424,49166611,0,0x0,8
tick,0x7ffdf681f424,49168602,0,0x0,8
tick,0x7ffdf681f424,49170620,0,0x0,8
tick,0x7ffdf681f424,49172627,0,0x0,8
tick,0x7ffdf681f424,49174627,0,0x0,8
tick,0x7ffdf681f424,49176564,0,0x0,8
tick,0x7ffdf681f424,49178582,0,0x0,8
tick,0x7ffdf681f424,49180590,0,0x0,8
tick,0x7ffdf681f424,49182586,0,0x0,8
tick,0x7ffdf681f424,49184574,0,0x0,8
tick,0x7ffdf681f424,49186509,0,0x0,8
tick,0x7ffdf681f424,49188606,0,0x0,8
tick,0x7ffdf681f424,49190555,0,0x0,8
tick,0x7ffdf681f424,49192558,0,0x0,8
tick,0x7ffdf681f424,49194553,0,0x0,8
tick,0x7ffdf681f424,49196531,0,0x0,8
tick,0x7ffdf681f424,49198533,0,0x0,8
tick,0x7ffdf681f424,49200560,0,0x0,8
tick,0x7ffdf681f424,49202443,0,0x0,8
tick,0x7ffdf681f424,49204376,0,0x0,8
tick,0x7ffdf681f424,49206370,0,0x0,8
tick,0x7ffdf681f424,49208413,0,0x0,8
tick,0x7ffdf681f424,49210469,0,0x0,8
tick,0x7ffdf681f424,49212355,0,0x0,8
tick,0x7ffdf681f424,49214464,0,0x0,8
tick,0x7ffdf681f424,49216433,0,0x0,8
tick,0x7ffdf681f424,49218379,0,0x0,8
tick,0x7ffdf681f424,49220379,0,0x0,8
tick,0x7ffdf681f424,49222334,0,0x0,8
tick,0x7ffdf681f424,49224463,0,0x0,8
tick,0x7ffdf681f424,49226430,0,0x0,8
tick,0x7ffdf681f424,49228394,0,0x0,8
tick,0x7ffdf681f424,49230410,0,0x0,8
tick,0x7ffdf681f424,49232379,0,0x0,8
tick,0x7ffdf681f424,49234374,0,0x0,8
tick,0x7ffdf681f424,49236404,0,0x0,8
tick,0x7ffdf681f424,49238369,0,0x0,8
tick,0x7ffdf681f424,49240474,0,0x0,8
tick,0x7ffdf681f424,49242434,0,0x0,8
tick,0x7ffdf681f424,49244410,0,0x0,8
tick,0x7ffdf681f424,49246341,0,0x0,8
tick,0x7ffdf681f424,49248287,0,0x0,8
tick,0x7ffdf681f424,49250363,0,0x0,8
tick,0x7ffdf681f424,49252391,0,0x0,8
tick,0x7ffdf681f424,49254385,0,0x0,8
tick,0x7ffdf681f424,49256393,0,0x0,8
tick,0x7ffdf681f424,49258288,0,0x0,8
tick,0x7ffdf681f424,49260334,0,0x0,8
tick,0x7ffdf681f424,49262381,0,0x0,8
tick,0x7ffdf681f424,49264356,0,0x0,8
tick,0x7ffdf681f424,49266343,0,0x0,8
tick,0x7ffdf681f424,49268339,0,0x0,8
tick,0x7ffdf681f424,49270385,0,0x0,8
tick,0x7ffdf681f424,49272316,0,0x0,8
tick,0x7ffdf681f424,49274296,0,0x0,8
tick,0x7ffdf681f424,49276268,0,0x0,8
tick,0x7ffdf681f424,49278276,0,0x0,8
tick,0x7ffdf681f424,49280324,0,0x0,8
tick,0x7ffdf681f424,49282236,0,0x0,8
tick,0x7ffdf681f424,49284249,0,0x0,8
tick,0x7ffdf681f424,49286306,0,0x0,8
tick,0x7ffdf681f424,49288231,0,0x0,8
tick,0x7ffdf681f424,49290321,0,0x0,8
tick,0x7ffdf681f424,49292351,0,0x0,8
tick,0x7ffdf681f424,49294297,0,0x0,8
tick,0x7ffdf681f424,49296282,0,0x0,8
tick,0x7ffdf681f424,49298269,0,0x0,8
tick,0x7ffdf681f424,49300310,0,0x0,8
tick,0x7ffdf681f424,49302255,0,0x0,8
tick,0x7ffdf681f424,49304289,0,0x0,8
tick,0x7ffdf681f424,49306230,0,0x0,8
tick,0x7ffdf681f424,49308246,0,0x0,8
tick,0x7ffdf681f424,49310257,0,0x0,8
tick,0x7ffdf681f424,49312265,0,0x0,8
tick,0x7ffdf681f424,49314246,0,0x0,8
tick,0x7ffdf681f424,49316160,0,0x0,8
tick,0x7ffdf681f424,49318187,0,0x0,8
tick,0x7ffdf681f424,49320224,0,0x0,8
tick,0x7ffdf681f424,49322180,0,0x0,8
tick,0x7ffdf681f424,49324188,0,0x0,8
tick,0x7ffdf681f424,49326154,0,0x0,8
tick,0x7ffdf681f424,49328192,0,0x0,8
tick,0x7ffdf681f424,49330110,0,0x0,8
tick,0x7ffdf681f424,49332121,0,0x0,8
tick,0x7ffdf681f424,49334114,0,0x0,8
tick,0x7ffdf681f424,49336114,0,0x0,8
tick,0x7ffdf681f424,49338101,0,0x0,8
tick,0x7ffdf681f424,49340114,0,0x0,8
tick,0x7ffdf681f424,49342157,0,0x0,8
tick,0x7ffdf681f424,49344147,0,0x0,8
tick,0x7ffdf681f424,49346053,0,0x0,8
tick,0x7ffdf681f424,49348027,0,0x0,8
tick,0x7ffdf681f424,49350120,0,0x0,8
tick,0x7ffdf681f424,49352040,0,0x0,8
tick,0x7ffdf681f424,49354041,0,0x0,8
tick,0x7ffdf681f424,49356141,0,0x0,8
tick,0x7ffdf681f424,49357997,0,0x0,8
tick,0x7ffdf681f424,49359994,0,0x0,8
tick,0x7ffdf681f424,49362085,0,0x0,8
tick,0x7ffdf681f424,49364130,0,0x0,8
tick,0x7ffdf681f424,49365999,0,0x0,8
tick,0x7ffdf681f424,49367991,0,0x0,8
tick,0x7ffdf681f424,49370049,0,0x0,8
tick,0x7ffdf681f424,49371988,0,0x0,8
tick,0x7ffdf681f424,49373956,0,0x0,8
tick,0x7ffdf681f424,49375976,0,0x0,8
tick,0x7ffdf681f424,49378087,0,0x0,8
tick,0x7ffdf681f424,49379958,0,0x0,8
tick,0x7ffdf681f424,49381958,0,0x0,8
tick,0x7ffdf681f424,49383983,0,0x0,8
tick,0x7ffdf681f424,49386020,0,0x0,8
tick,0x7ffdf681f424,49388043,0,0x0,8
tick,0x7ffdf681f424,49389928,0,0x0,8
tick,0x7ffdf681f424,49392010,0,0x0,8
tick,0x7ffdf681f424,49393898,0,0x0,8
tick,0x7ffdf681f424,49395952,0,0x0,8
tick,0x7ffdf681f424,49397967,0,0x0,8
tick,0x7ffdf681f424,49399971,0,0x0,8
tick,0x7ffdf681f424,49401956,0,0x0,8
tick,0x7ffdf681f424,49403974,0,0x0,8
tick,0x7ffdf681f424,49405973,0,0x0,8
tick,0x7ffdf681f424,49407971,0,0x0,8
tick,0x7ffdf681f424,49409965,0,0x0,8
tick,0x7ffdf681f424,49412006,0,0x0,8
tick,0x7ffdf681f424,49413946,0,0x0,8
tick,0x7ffdf681f424,49415942,0,0x0,8
tick,0x7ffdf681f424,49417919,0,0x0,8
tick,0x7ffdf681f424,49419798,0,0x0,8
tick,0x7ffdf681f424,49421913,0,0x0,8
tick,0x7ffdf681f424,49423890,0,0x0,8
tick,0x7ffdf681f424,49425894,0,0x0,8
tick,0x7ffdf681f424,49427878,0,0x0,8
tick,0x7ffdf681f424,49429870,0,0x0,8
tick,0x7ffdf681f424,49431870,0,0x0,8
tick,0x7ffdf681f424,49433814,0,0x0,8
tick,0x7ffdf681f424,49435884,0,0x0,8
tick,0x7ffdf681f424,49437897,0,0x0,8
tick,0x7ffdf681f424,49439826,0,0x0,8
tick,0x7ffdf681f424,49441757,0,0x0,8
tick,0x7ffdf681f424,49443750,0,0x0,8
tick,0x7ffdf681f424,49445820,0,0x0,8
tick,0x7ffdf681f424,49447789,0,0x0,8
tick,0x7ffdf681f424,49449762,0,0x0,8
tick,0x7ffdf681f424,49451732,0,0x0,8
tick,0x7ffdf681f424,49453746,0,0x0,8
tick,0x7ffdf681f424,49455698,0,0x0,8
tick,0x7ffdf681f424,49457728,0,0x0,8
tick,0x7ffdf681f424,49459713,0,0x0,8
tick,0x7ffdf681f424,49461719,0,0x0,8
tick,0x7ffdf681f424,49463698,0,0x0,8
tick,0x7ffdf681f424,49465695,0,0x0,8
tick,0x7ffdf681f424,49467710,0,0x0,8
tick,0x7ffdf681f424,49469674,0,0x0,8
tick,0x7ffdf681f424,49471682,0,0x0,8
tick,0x7ffdf681f424,49473664,0,0x0,8
tick,0x7ffdf681f424,49475647,0,0x0,8
tick,0x7ffdf681f424,49477769,0,0x0,8
tick,0x7ffdf681f424,49479661,0,0x0,8
tick,0x7ffdf681f424,49481779,0,0x0,8
tick,0x7ffdf681f424,49483750,0,0x0,8
tick,0x7ffdf681f424,49485758,0,0x0,8
tick,0x7ffdf681f424,49487760,0,0x0,8
tick,0x7ffdf681f424,49489756,0,0x0,8
tick,0x7ffdf681f424,49491741,0,0x0,8
tick,0x7ffdf681f424,49493743,0,0x0,8
tick,0x7ffdf681f424,49495700,0,0x0,8
tick,0x7ffdf681f424,49497706,0,0x0,8
tick,0x7ffdf681f424,49499734,0,0x0,8
tick,0x7ffdf681f424,49501726,0,0x0,8
tick,0x7ffdf681f424,49503711,0,0x0,8
tick,0x7ffdf681f424,49505713,0,0x0,8
tick,0x7ffdf681f424,49507698,0,0x0,8
tick,0x7ffdf681f424,49509693,0,0x0,8
tick,0x7ffdf681f424,49511706,0,0x0,8
tick,0x7ffdf681f424,49513692,0,0x0,8
tick,0x7ffdf681f424,49515557,0,0x0,8
tick,0x7ffdf681f424,49517583,0,0x0,8
tick,0x7ffdf681f424,49519560,0,0x0,8
tick,0x7ffdf681f424,49521536,0,0x0,8
tick,0x7ffdf681f424,49523552,0,0x0,8
tick,0x7ffdf681f424,49525522,0,0x0,8
tick,0x7ffdf681f424,49527524,0,0x0,8
tick,0x7ffdf681f424,49529507,0,0x0,8
tick,0x7ffdf681f424,49531506,0,0x0,8
tick,0x7ffdf681f424,49533495,0,0x0,8
tick,0x7ffdf681f424,49535493,0,0x0,8
tick,0x7ffdf681f424,49537487,0,0x0,8
tick,0x7ffdf681f424,49539487,0,0x0,8
tick,0x7ffdf681f424,49541475,0,0x0,8
tick,0x7ffdf681f424,49545880,0,0x0,8
tick,0x7ffdf681f424,49552297,0,0x0,8
tick,0x7ffdf681f424,49562637,0,0x0,8
tick,0x7ffdf681f424,49564446,0,0x0,8
tick,0x7ffdf681f424,49568443,0,0x0,8
tick,0x7ffdf681f424,49572129,0,0x0,8
tick,0x7ffdf681f424,49582662,0,0x0,8
tick,0x7ffdf681f424,49584370,0,0x0,8
tick,0x7ffdf681f424,49586446,0,0x0,8
tick,0x7ffdf681f424,49588453,0,0x0,8
tick,0x7ffdf681f424,49590374,0,0x0,8
tick,0x7ffdf681f424,49592344,0,0x0,8
tick,0x7ffdf681f424,49594347,0,0x0,8
tick,0x7ffdf681f424,49596426,0,0x0,8
tick,0x7ffdf681f424,49598375,0,0x0,8
tick,0x7ffdf681f424,49600339,0,0x0,8
tick,0x7ffdf681f424,49602383,0,0x0,8
tick,0x7ffdf681f424,49604331,0,0x0,8
tick,0x7ffdf681f424,49606309,0,0x0,8
tick,0x7ffdf681f424,49608302,0,0x0,8
tick,0x7ffdf681f424,49610295,0,0x0,8
tick,0x7ffdf681f424,49612297,0,0x0,8
tick,0x7ffdf681f424,49614289,0,0x0,8
tick,0x7ffdf681f424,49616281,0,0x0,8
tick,0x7ffdf681f424,49618270,0,0x0,8
tick,0x7ffdf681f424,49620266,0,0x0,8
tick,0x7ffdf681f424,49622273,0,0x0,8
tick,0x7ffdf681f424,49624260,0,0x0,8
tick,0x7ffdf681f424,49626267,0,0x0,8
tick,0x7ffdf681f424,49628246,0,0x0,8
tick,0x7ffdf681f424,49630238,0,0x0,8
tick,0x7ffdf681f424,49632239,0,0x0,8
tick,0x7ffdf681f424,49634261,0,0x0,8
tick,0x7ffdf681f424,49636256,0,0x0,8
tick,0x7ffdf681f424,49638230,0,0x0,8
tick,0x7ffdf681f424,49640235,0,0x0,8
tick,0x7ffdf681f424,49642210,0,0x0,8
tick,0x7ffdf681f424,49646163,0,0x0,8
tick,0x7ffdf681f424,49647351,0,0x0,8
tick,0x7ffdf681f424,49650340,0,0x0,8
tick,0x7ffdf681f424,49655317,0,0x0,8
tick,0x7ffdf681f424,49657265,0,0x0,8
tick,0x7ffdf681f424,49659759,0,0x0,8
tick,0x7ffdf681f424,49663453,0,0x0,8
tick,0x7ffdf681f424,49665216,0,0x0,8
tick,0x7ffdf681f424,49667143,0,0x0,8
tick,0x7ffdf681f424,49669268,0,0x0,8
tick,0x7ffdf681f424,49671137,0,0x0,8
tick,0x7ffdf681f424,49673131,0,0x0,8
tick,0x7ffdf681f424,49675121,0,0x0,8
tick,0x7ffdf681f424,49677114,0,0x0,8
tick,0x7ffdf681f424,49679107,0,0x0,8
tick,0x7ffdf681f424,49681122,0,0x0,8
tick,0x7ffdf681f424,49683105,0,0x0,8
tick,0x7ffdf681f424,49685138,0,0x0,8
tick,0x7ffdf681f424,49695579,0,0x0,8
tick,0x7ffdf681f424,49697318,0,0x0,8
tick,0x7ffdf681f424,49706426,0,0x0,8
tick,0x7ffdf681f424,49708034,0,0x0,8
tick,0x7ffdf681f424,49710038,0,0x0,8
tick,0x7ffdf681f424,49712029,0,0x0,8
tick,0x7ffdf681f424,49714074,0,0x0,8
tick,0x7ffdf681f424,49716490,0,0x0,8
tick,0x7ffdf681f424,49722025,0,0x0,8
tick,0x7ffdf681f424,49723841,0,0x0,8
tick,0x7ffdf681f424,49725943,0,0x0,8
tick,0x7ffdf681f424,49728316,0,0x0,8
tick,0x7ffdf681f424,49730364,0,0x0,8
tick,0x7ffdf681f424,49732087,0,0x0,8
tick,0x7ffdf681f424,49737117,0,0x0,8
tick,0x7ffdf681f424,49738962,0,0x0,8
tick,0x7ffdf681f424,49741127,0,0x0,8
tick,0x7ffdf681f424,49743277,0,0x0,8
tick,0x7ffdf681f424,49745073,0,0x0,8
tick,0x7ffdf681f424,49747273,0,0x0,8
tick,0x7ffdf681f424,49749095,0,0x0,8
tick,0x7ffdf681f424,49750993,0,0x0,8
tick,0x7ffdf681f424,49752912,0,0x0,8
tick,0x7ffdf681f424,49754917,0,0x0,8
tick,0x7ffdf681f424,49756900,0,0x0,8
tick,0x7ffdf681f424,49758899,0,0x0,8
tick,0x7ffdf681f424,49760903,0,0x0,8
tick,0x7ffdf681f424,49762880,0,0x0,8
tick,0x7ffdf681f424,49764882,0,0x0,8
tick,0x7ffdf681f424,49766880,0,0x0,8
tick,0x7ffdf681f424,49768875,0,0x0,8
tick,0x7ffdf681f424,49770870,0,0x0,8
tick,0x7ffdf681f424,49772861,0,0x0,8
tick,0x7ffdf681f424,49774856,0,0x0,8
tick,0x7ffdf681f424,49776845,0,0x0,8
tick,0x7ffdf681f424,49778839,0,0x0,8
tick,0x7ffdf681f424,49780843,0,0x0,8
tick,0x7ffdf681f424,49782840,0,0x0,8
tick,0x7ffdf681f424,49784826,0,0x0,8
tick,0x7ffdf681f424,49787291,0,0x0,8
tick,0x7ffdf681f424,49797696,0,0x0,8
tick,0x7ffdf681f424,49798913,0,0x0,8
tick,0x7ffdf681f424,49803111,0,0x0,8
tick,0x7ffdf681f424,49821714,0,0x0,8
tick,0x7ffdf681f424,49822727,0,0x0,8
tick,0x7ffdf681f424,49824879,0,0x0,8
tick,0x7ffdf681f424,49826728,0,0x0,8
tick,0x7ffdf681f424,49828721,0,0x0,8
tick,0x7ffdf681f424,49830907,0,0x0,8
tick,0x7ffdf681f424,49832706,0,0x0,8
tick,0x7ffdf681f424,49834732,0,0x0,8
tick,0x7ffdf681f424,49836688,0,0x0,8
tick,0x7ffdf681f424,49838695,0,0x0,8
tick,0x7ffdf681f424,49840707,0,0x0,8
tick,0x7ffdf681f424,49842678,0,0x0,8
tick,0x7ffdf681f424,49844671,0,0x0,8
tick,0x7ffdf681f424,49846697,0,0x0,8
tick,0x7ffdf681f424,49848673,0,0x0,8
tick,0x7ffdf681f424,49850668,0,0x0,8
tick,0x7ffdf681f424,49852664,0,0x0,8
tick,0x7ffdf681f424,49854645,0,0x0,8
tick,0x7ffdf681f424,49856675,0,0x0,8
tick,0x7ffdf681f424,49858627,0,0x0,8
tick,0x7ffdf681f424,49860667,0,0x0,8
tick,0x7ffdf681f424,49862646,0,0x0,8
tick,0x7ffdf681f424,49864618,0,0x0,8
tick,0x7ffdf681f424,49866615,0,0x0,8
tick,0x7ffdf681f424,49868643,0,0x0,8
tick,0x7ffdf681f424,49870595,0,0x0,8
tick,0x7ffdf681f424,49872597,0,0x0,8
tick,0x7ffdf681f424,49874590,0,0x0,8
tick,0x7ffdf681f424,49876584,0,0x0,8
tick,0x7ffdf681f424,49878585,0,0x0,8
tick,0x7ffdf681f424,49880570,0,0x0,8
tick,0x7ffdf681f424,49897170,0,0x0,8
tick,0x7ffdf681f424,49898527,0,0x0,8
tick,0x7ffdf681f424,49900557,0,0x0,8
tick,0x7ffdf681f424,49902585,0,0x0,8
tick,0x7ffdf681f424,49904522,0,0x0,8
tick,0x7ffdf681f424,49906510,0,0x0,8
tick,0x7ffdf681f424,49908723,0,0x0,8
tick,0x7ffdf681f424,49910489,0,0x0,8
tick,0x7ffdf681f424,49929941,0,0x0,8
tick,0x7ffdf681f424,49932028,0,0x0,8
tick,0x7ffdf681f424,49933460,0,0x0,8
tick,0x7ffdf681f424,49935433,0,0x0,8
tick,0x7ffdf681f424,49937874,0,0x0,8
tick,0x7ffdf681f424,49939456,0,0x0,8
tick,0x7ffdf681f424,49941424,0,0x0,8
tick,0x7ffdf681f424,49943403,0,0x0,8
tick,0x7ffdf681f424,49945395,0,0x0,8
tick,0x7ffdf681f424,49947389,0,0x0,8
tick,0x7ffdf681f424,49949385,0,0x0,8
tick,0x7ffdf681f424,49951379,0,0x0,8
tick,0x7ffdf681f424,49953371,0,0x0,8
tick,0x7ffdf681f424,49955370,0,0x0,8
tick,0x7ffdf681f424,49957362,0,0x0,8
tick,0x7ffdf681f424,49959355,0,0x0,8
tick,0x7ffdf681f424,49961356,0,0x0,8
tick,0x7ffdf681f424,49963374,0,0x0,8
tick,0x7ffdf681f424,49965361,0,0x0,8
tick,0x7ffdf681f424,49967336,0,0x0,8
tick,0x7ffdf681f424,49969339,0,0x0,8
tick,0x7ffdf681f424,49983522,0,0x0,8
tick,0x7ffdf681f424,49985290,0,0x0,8
tick,0x7ffdf681f424,49987334,0,0x0,8
tick,0x7ffdf681f424,49989329,0,0x0,8
tick,0x7ffdf681f424,49991327,0,0x0,8
tick,0x7ffdf681f424,49993549,0,0x0,8
tick,0x7ffdf681f424,49995309,0,0x0,8
tick,0x7ffdf681f424,49997592,0,0x0,8
tick,0x7ffdf681f424,49999283,0,0x0,8
tick,0x7ffdf681f424,50009972,0,0x0,8
tick,0x7ffdf681f424,50011227,0,0x0,8
tick,0x7ffdf681f424,50013219,0,0x0,8
tick,0x7ffdf681f424,50015211,0,0x0,8
tick,0x7ffdf681f424,50017204,0,0x0,8
tick,0x7ffdf681f424,50019203,0,0x0,8
tick,0x7ffdf681f424,50021218,0,0x0,8
tick,0x7ffdf681f424,50023194,0,0x0,8
tick,0x7ffdf681f424,50025191,0,0x0,8
tick,0x7ffdf681f424,50027176,0,0x0,8
tick,0x7ffdf681f424,50029204,0,0x0,8
tick,0x7ffdf681f424,50031182,0,0x0,8
tick,0x7ffdf681f424,50033251,0,0x0,8
tick,0x7ffdf681f424,50035166,0,0x0,8
tick,0x7ffdf681f424,50037152,0,0x0,8
tick,0x7ffdf681f424,50039149,0,0x0,8
tick,0x7ffdf681f424,50041141,0,0x0,8
tick,0x7ffdf681f424,50043138,0,0x0,8
tick,0x7ffdf681f424,50045129,0,0x0,8
tick,0x7ffdf681f424,50047122,0,0x0,8
tick,0x7ffdf681f424,50049111,0,0x0,8
tick,0x7ffdf681f424,50051114,0,0x0,8
tick,0x7ffdf681f424,50053123,0,0x0,8
tick,0x7ffdf681f424,50055108,0,0x0,8
tick,0x7ffdf681f424,50057131,0,0x0,8
tick,0x7ffdf681f424,50059092,0,0x0,8
tick,0x7ffdf681f424,50061086,0,0x0,8
tick,0x7ffdf681f424,50063142,0,0x0,8
tick,0x7ffdf681f424,50065087,0,0x0,8
tick,0x7ffdf681f424,50084079,0,0x0,8
tick,0x7ffdf681f424,50086054,0,0x0,8
tick,0x7ffdf681f424,50088041,0,0x0,8
tick,0x7ffdf681f424,50090038,0,0x0,8
tick,0x7ffdf681f424,50092051,0,0x0,8
tick,0x7ffdf681f424,50094051,0,0x0,8
tick,0x7ffdf681f424,50095996,0,0x0,8
tick,0x7ffdf681f424,50098020,0,0x0,8
tick,0x7ffdf681f424,50099998,0,0x0,8
tick,0x7ffdf681f424,50102006,0,0x0,8
tick,0x7ffdf681f424,50103974,0,0x0,8
tick,0x7ffdf681f424,50105980,0,0x0,8
tick,0x7ffdf681f424,50108120,0,0x0,8
tick,0x7ffdf681f424,50114070,0,0x0,8
tick,0x7ffdf681f424,50115029,0,0x0,8
tick,0x7ffdf681f424,50116993,0,0x0,8
tick,0x7ffdf681f424,50118986,0,0x0,8
tick,0x7ffdf681f424,50121182,0,0x0,8
tick,0x7ffdf681f424,50123067,0,0x0,8
tick,0x7ffdf681f424,50125211,0,0x0,8
tick,0x7ffdf681f424,50126917,0,0x0,8
tick,0x7ffdf681f424,50128943,0,0x0,8
tick,0x7ffdf681f424,50130908,0,0x0,8
tick,0x7ffdf681f424,50132901,0,0x0,8
tick,0x7ffdf681f424,50134898,0,0x0,8
tick,0x7ffdf681f424,50136902,0,0x0,8
tick,0x7ffdf681f424,50138886,0,0x0,8
tick,0x7ffdf681f424,50140874,0,0x0,8
tick,0x7ffdf681f424,50142881,0,0x0,8
tick,0x7ffdf681f424,50144868,0,0x0,8
tick,0x7ffdf681f424,50146865,0,0x0,8
tick,0x7ffdf681f424,50148853,0,0x0,8
tick,0x7ffdf681f424,50150874,0,0x0,8
tick,0x7ffdf681f424,50152853,0,0x0,8
tick,0x7ffdf681f424,50154836,0,0x0,8
tick,0x7ffdf681f424,50156832,0,0x0,8
tick,0x7ffdf681f424,50158825,0,0x0,8
tick,0x7ffdf681f424,50160823,0,0x0,8
tick,0x7ffdf681f424,50162816,0,0x0,8
tick,0x7ffdf681f424,50166251,0,0x0,8
tick,0x7ffdf681f424,50175253,0,0x0,8
tick,0x7ffdf681f424,50179339,0,0x0,8
tick,0x7ffdf681f424,50180766,0,0x0,8
tick,0x7ffdf681f424,50182767,0,0x0,8
tick,0x7ffdf681f424,50185132,0,0x0,8
tick,0x7ffdf681f424,50186770,0,0x0,8
tick,0x7ffdf681f424,50188831,0,0x0,8
tick,0x7ffdf681f424,50190748,0,0x0,8
tick,0x7ffdf681f424,50192738,0,0x0,8
tick,0x7ffdf681f424,50194731,0,0x0,8
tick,0x7ffdf681f424,50196776,0,0x0,8
tick,0x7ffdf681f424,50198725,0,0x0,8
tick,0x7ffdf681f424,50202541,0,0x0,8
tick,0x7ffdf681f424,50203787,0,0x0,8
tick,0x7ffdf681f424,50205725,0,0x0,8
tick,0x7ffdf681f424,50207811,0,0x0,8
tick,0x7ffdf681f424,50209707,0,0x0,8
tick,0x7ffdf681f424,50213757,0,0x0,8
tick,0x7ffdf681f424,50215688,0,0x0,8
tick,0x7ffdf681f424,50220546,0,0x0,8
tick,0x7ffdf681f424,50221663,0,0x0,8
tick,0x7ffdf681f424,50223659,0,0x0,8
tick,0x7ffdf681f424,50225646,0,0x0,8
tick,0x7ffdf681f424,50227703,0,0x0,8
tick,0x7ffdf681f424,50229945,0,0x0,8
tick,0x7ffdf681f424,50231750,0,0x0,8
tick,0x7ffdf681f424,50233874,0,0x0,8
tick,0x7ffdf681f424,50235624,0,0x0,8
tick,0x7ffdf681f424,50237696,0,0x0,8
tick,0x7ffdf681f424,50239618,0,0x0,8
tick,0x7ffdf681f424,50241605,0,0x0,8
tick,0x7ffdf681f424,50243603,0,0x0,8
tick,0x7ffdf681f424,50245596,0,0x0,8
tick,0x7ffdf681f424,50247595,0,0x0,8
tick,0x7ffdf681f424,50249588,0,0x0,8
tick,0x7ffdf681f424,50251581,0,0x0,8
tick,0x7ffdf681f424,50253572,0,0x0,8
tick,0x7ffdf681f424,50255585,0,0x0,8
tick,0x7ffdf681f424,50257565,0,0x0,8
tick,0x7ffdf681f424,50259573,0,0x0,8
tick,0x7ffdf681f424,50263916,0,0x0,8
tick,0x7ffdf681f424,50274770,0,0x0,8
tick,0x7ffdf681f424,50276513,0,0x0,8
tick,0x7ffdf681f424,50278606,0,0x0,8
tick,0x7ffdf681f424,50280591,0,0x0,8
tick,0x7ffdf681f424,50282507,0,0x0,8
tick,0x7ffdf681f424,50284493,0,0x0,8
tick,0x7ffdf681f424,50286488,0,0x0,8
tick,0x7ffdf681f424,50288499,0,0x0,8
tick,0x7ffdf681f424,50290485,0,0x0,8
tick,0x7ffdf681f424,50292469,0,0x0,8
tick,0x7ffdf681f424,50294463,0,0x0,8
tick,0x7ffdf681f424,50296465,0,0x0,8
tick,0x7ffdf681f424,50298452,0,0x0,8
tick,0x7ffdf681f424,50300449,0,0x0,8
tick,0x7ffdf681f424,50302441,0,0x0,8
tick,0x7ffdf681f424,50304435,0,0x0,8
tick,0x7ffdf681f424,50306434,0,0x0,8
tick,0x7ffdf681f424,50308427,0,0x0,8
tick,0x7ffdf681f424,50310470,0,0x0,8
tick,0x7ffdf681f424,50312420,0,0x0,8
tick,0x7ffdf681f424,50314411,0,0x0,8
tick,0x7ffdf681f424,50316403,0,0x0,8
tick,0x7ffdf681f424,50318528,0,0x0,8
tick,0x7ffdf681f424,50321588,0,0x0,8
tick,0x7ffdf681f424,50324540,0,0x0,8
tick,0x7ffdf681f424,50328653,0,0x0,8
tick,0x7ffdf681f424,50333040,0,0x0,8
tick,0x7ffdf681f424,50339460,0,0x0,8
tick,0x7ffdf681f424,50341343,0,0x0,8
tick,0x7ffdf681f424,50343333,0,0x0,8
tick,0x7ffdf681f424,50345415,0,0x0,8
tick,0x7ffdf681f424,50348429,0,0x0,8
tick,0x7ffdf681f424,50350399,0,0x0,8
tick,0x7ffdf681f424,50352312,0,0x0,8
tick,0x7ffdf681f424,50354304,0,0x0,8
tick,0x7ffdf681f424,50356431,0,0x0,8
tick,0x7ffdf681f424,50358312,0,0x0,8
tick,0x7ffdf681f424,50360290,0,0x0,8
tick,0x7ffdf681f424,50362285,0,0x0,8
tick,0x7ffdf681f424,50364321,0,0x0,8
tick,0x7ffdf681f424,50366272,0,0x0,8
tick,0x7ffdf681f424,50368541,0,0x0,8
tick,0x7ffdf681f424,50370430,0,0x0,8
tick,0x7ffdf681f424,50384056,0,0x0,8
tick,0x7ffdf681f424,50384121,0,0x0,8
tick,0x7ffdf681f424,50385223,0,0x0,8
tick,0x7ffdf681f424,50387224,0,0x0,8
tick,0x7ffdf681f424,50389211,0,0x0,8
tick,0x7ffdf681f424,50391210,0,0x0,8
tick,0x7ffdf681f424,50393201,0,0x0,8
tick,0x7ffdf681f424,50395529,0,0x0,8
tick,0x7ffdf681f424,50397199,0,0x0,8
tick,0x7ffdf681f424,50399193,0,0x0,8
tick,0x7ffdf681f424,50401187,0,0x0,8
tick,0x7ffdf681f424,50403173,0,0x0,8
tick,0x7ffdf681f424,50405177,0,0x0,8
tick,0x7ffdf681f424,50407167,0,0x0,8
tick,0x7ffdf681f424,50409175,0,0x0,8
tick,0x7ffdf681f424,50411206,0,0x0,8
tick,0x7ffdf681f424,50413206,0,0x0,8
tick,0x7ffdf681f424,50415269,0,0x0,8
tick,0x7ffdf681f424,50417140,0,0x0,8
tick,0x7ffdf681f424,50419186,0,0x0,8
tick,0x7ffdf681f424,50424753,0,0x0,8
tick,0x7ffdf681f424,50426530,0,0x0,8
tick,0x7ffdf681f424,50428104,0,0x0,8
tick,0x7ffdf681f424,50430124,0,0x0,8
tick,0x7ffdf681f424,50432204,0,0x0,8
tick,0x7ffdf681f424,50434092,0,0x0,8
tick,0x7ffdf681f424,50436090,0,0x0,8
tick,0x7ffdf681f424,50438114,0,0x0,8
tick,0x7ffdf681f424,50440102,0,0x0,8
tick,0x7ffdf681f424,50442103,0,0x0,8
tick,0x7ffdf681f424,50444364,0,0x0,8
tick,0x7ffdf681f424,50446183,0,0x0,8
tick,0x7ffdf681f424,50448093,0,0x0,8
tick,0x7ffdf681f424,50450052,0,0x0,8
tick,0x7ffdf681f424,50452042,0,0x0,8
tick,0x7ffdf681f424,50454038,0,0x0,8
tick,0x7ffdf681f424,50456034,0,0x0,8
tick,0x7ffdf681f424,50458026,0,0x0,8
tick,0x7ffdf681f424,50460025,0,0x0,8
tick,0x7ffdf681f424,50462021,0,0x0,8
tick,0x7ffdf681f424,50464014,0,0x0,8
tick,0x7ffdf681f424,50466008,0,0x0,8
tick,0x7ffdf681f424,50468006,0,0x0,8
tick,0x7ffdf681f424,50469997,0,0x0,8
tick,0x7ffdf681f424,50471993,0,0x0,8
tick,0x7ffdf681f424,50484396,0,0x0,8
tick,0x7ffdf681f424,50484433,0,0x0,8
tick,0x7ffdf681f424,50486000,0,0x0,8
tick,0x7ffdf681f424,50487953,0,0x0,8
tick,0x7ffdf681f424,50489995,0,0x0,8
tick,0x7ffdf681f424,50491965,0,0x0,8
tick,0x7ffdf681f424,50494359,0,0x0,8
tick,0x7ffdf681f424,50495975,0,0x0,8
tick,0x7ffdf681f424,50497931,0,0x0,8
tick,0x7ffdf681f424,50499923,0,0x0,8
tick,0x7ffdf681f424,50501910,0,0x0,8
tick,0x7ffdf681f424,50503910,0,0x0,8
tick,0x7ffdf681f424,50505905,0,0x0,8
tick,0x7ffdf681f424,50507904,0,0x0,8
tick,0x7ffdf681f424,50509888,0,0x0,8
tick,0x7ffdf681f424,50511883,0,0x0,8
tick,0x7ffdf681f424,50513879,0,0x0,8
tick,0x7ffdf681f424,50515878,0,0x0,8
tick,0x7ffdf681f424,50517869,0,0x0,8
tick,0x7ffdf681f424,50520141,0,0x0,8
tick,0x7ffdf681f424,50522007,0,0x0,8
tick,0x7ffdf681f424,50524149,0,0x0,8
tick,0x7ffdf681f424,50531574,0,0x0,8
tick,0x7ffdf681f424,50532829,0,0x0,8
tick,0x7ffdf681f424,50534823,0,0x0,8
tick,0x7ffdf681f424,50536816,0,0x0,8
tick,0x7ffdf681f424,50538812,0,0x0,8
tick,0x7ffdf681f424,50541148,0,0x0,8
tick,0x7ffdf681f424,50542811,0,0x0,8
tick,0x7ffdf681f424,50544824,0,0x0,8
tick,0x7ffdf681f424,50546803,0,0x0,8
tick,0x7ffdf681f424,50548782,0,0x0,8
tick,0x7ffdf681f424,50550779,0,0x0,8
tick,0x7ffdf681f424,50556733,0,0x0,8
tick,0x7ffdf681f424,50563030,0,0x0,8
tick,0x7ffdf681f424,50568753,0,0x0,8
tick,0x7ffdf681f424,50570738,0,0x0,8
tick,0x7ffdf681f424,50572722,0,0x0,8
tick,0x7ffdf681f424,50574788,0,0x0,8
tick,0x7ffdf681f424,50576866,0,0x0,8
tick,0x7ffdf681f424,50578958,0,0x0,8
tick,0x7ffdf681f424,50580708,0,0x0,8
tick,0x7ffdf681f424,50582691,0,0x0,8
tick,0x7ffdf681f424,50584700,0,0x0,8
tick,0x7ffdf681f424,50586683,0,0x0,8
tick,0x7ffdf681f424,50588682,0,0x0,8
tick,0x7ffdf681f424,50590682,0,0x0,8
tick,0x7ffdf681f424,50592662,0,0x0,8
tick,0x7ffdf681f424,50594656,0,0x0,8
tick,0x7ffdf681f424,50596658,0,0x0,8
tick,0x7ffdf681f424,50598688,0,0x0,8
tick,0x7ffdf681f424,50600647,0,0x0,8
tick,0x7ffdf681f424,50602656,0,0x0,8
tick,0x7ffdf681f424,50604632,0,0x0,8
tick,0x7ffdf681f424,50606635,0,0x0,8
tick,0x7ffdf681f424,50608637,0,0x0,8
tick,0x7ffdf681f424,50610690,0,0x0,8
tick,0x7ffdf681f424,50613362,0,0x0,8
tick,0x7ffdf681f424,50614818,0,0x0,8
tick,0x7ffdf681f424,50618410,0,0x0,8
tick,0x7ffdf681f424,50622177,0,0x0,8
tick,0x7ffdf681f424,50626265,0,0x0,8
tick,0x7ffdf681f424,50629363,0,0x0,8
tick,0x7ffdf681f424,50630579,0,0x0,8
tick,0x7ffdf681f424,50632622,0,0x0,8
tick,0x7ffdf681f424,50634564,0,0x0,8
tick,0x7ffdf681f424,50636616,0,0x0,8
tick,0x7ffdf681f424,50638546,0,0x0,8
tick,0x7ffdf681f424,50640539,0,0x0,8
tick,0x7ffdf681f424,50642572,0,0x0,8
tick,0x7ffdf681f424,50644958,0,0x0,8
tick,0x7ffdf681f424,50646606,0,0x0,8
tick,0x7ffdf681f424,50648543,0,0x0,8
tick,0x7ffdf681f424,50650595,0,0x0,8
tick,0x7ffdf681f424,50652513,0,0x0,8
tick,0x7ffdf681f424,50654513,0,0x0,8
tick,0x7ffdf681f424,50657113,0,0x0,8
tick,0x7ffdf681f424,50659590,0,0x0,8
tick,0x7ffdf681f424,50670142,0,0x0,8
tick,0x7ffdf681f424,50675134,0,0x0,8
tick,0x7ffdf681f424,50676507,0,0x0,8
tick,0x7ffdf681f424,50678508,0,0x0,8
tick,0x7ffdf681f424,50680451,0,0x0,8
tick,0x7ffdf681f424,50682440,0,0x0,8
tick,0x7ffdf681f424,50684427,0,0x0,8
tick,0x7ffdf681f424,50686485,0,0x0,8
tick,0x7ffdf681f424,50688414,0,0x0,8
tick,0x7ffdf681f424,50690411,0,0x0,8
tick,0x7ffdf681f424,50692407,0,0x0,8
tick,0x7ffdf681f424,50694402,0,0x0,8
tick,0x7ffdf681f424,50696385,0,0x0,8
tick,0x7ffdf681f424,50698393,0,0x0,8
tick,0x7ffdf681f424,50700381,0,0x0,8
tick,0x7ffdf681f424,50702379,0,0x0,8
tick,0x7ffdf681f424,50704363,0,0x0,8
tick,0x7ffdf681f424,50706371,0,0x0,8
tick,0x7ffdf681f424,50708359,0,0x0,8
tick,0x7ffdf681f424,50710348,0,0x0,8
tick,0x7ffdf681f424,50712344,0,0x0,8
tick,0x7ffdf681f424,50714338,0,0x0,8
tick,0x7ffdf681f424,50716353,0,0x0,8
tick,0x7ffdf681f424,50718336,0,0x0,8
tick,0x7ffdf681f424,50720327,0,0x0,8
tick,0x7ffdf681f424,50722320,0,0x0,8
tick,0x7ffdf681f424,50731283,0,0x0,8
tick,0x7ffdf681f424,50731353,0,0x0,8
tick,0x7ffdf681f424,50739462,0,0x0,8
tick,0x7ffdf681f424,50741270,0,0x0,8
tick,0x7ffdf681f424,50743444,0,0x0,8
tick,0x7ffdf681f424,50745349,0,0x0,8
tick,0x7ffdf681f424,50747288,0,0x0,8
tick,0x7ffdf681f424,50749257,0,0x0,8
tick,0x7ffdf681f424,50751249,0,0x0,8
tick,0x7ffdf681f424,50753243,0,0x0,8
tick,0x7ffdf681f424,50755234,0,0x0,8
tick,0x7ffdf681f424,50757223,0,0x0,8
tick,0x7ffdf681f424,50759219,0,0x0,8
tick,0x7ffdf681f424,50774752,0,0x0,8
tick,0x7ffdf681f424,50776178,0,0x0,8
tick,0x7ffdf681f424,50778173,0,0x0,8
tick,0x7ffdf681f424,50780311,0,0x0,8
tick,0x7ffdf681f424,50782191,0,0x0,8
tick,0x7ffdf681f424,50784183,0,0x0,8
tick,0x7ffdf681f424,50786148,0,0x0,8
tick,0x7ffdf681f424,50788146,0,0x0,8
tick,0x7ffdf681f424,50790138,0,0x0,8
tick,0x7ffdf681f424,50792133,0,0x0,8
tick,0x7ffdf681f424,50794130,0,0x0,8
tick,0x7ffdf681f424,50796124,0,0x0,8
tick,0x7ffdf681f424,50798119,0,0x0,8
tick,0x7ffdf681f424,50800121,0,0x0,8
tick,0x7ffdf681f424,50802110,0,0x0,8
tick,0x7ffdf681f424,50804119,0,0x0,8
tick,0x7ffdf681f424,50806098,0,0x0,8
tick,0x7ffdf681f424,50808110,0,0x0,8
tick,0x7ffdf681f424,50810087,0,0x0,8
tick,0x7ffdf681f424,50812083,0,0x0,8
tick,0x7ffdf681f424,50814078,0,0x0,8
tick,0x7ffdf681f424,50828146,0,0x0,8
tick,0x7ffdf681f424,50830090,0,0x0,8
tick,0x7ffdf681f424,50832151,0,0x0,8
tick,0x7ffdf681f424,50834216,0,0x0,8
tick,0x7ffdf681f424,50836041,0,0x0,8
tick,0x7ffdf681f424,50838053,0,0x0,8
tick,0x7ffdf681f424,50840025,0,0x0,8
tick,0x7ffdf681f424,50842003,0,0x0,8
tick,0x7ffdf681f424,50844003,0,0x0,8
tick,0x7ffdf681f424,50845994,0,0x0,8
tick,0x7ffdf681f424,50847985,0,0x0,8
tick,0x7ffdf681f424,50849979,0,0x0,8
tick,0x7ffdf681f424,50851977,0,0x0,8
tick,0x7ffdf681f424,50853971,0,0x0,8
tick,0x7ffdf681f424,50855965,0,0x0,8
tick,0x7ffdf681f424,50857963,0,0x0,8
tick,0x7ffdf681f424,50859952,0,0x0,8
tick,0x7ffdf681f424,50861951,0,0x0,8
tick,0x7ffdf681f424,50863942,0,0x0,8
tick,0x7ffdf681f424,50865937,0,0x0,8
tick,0x7ffdf681f424,50867927,0,0x0,8
tick,0x7ffdf681f424,50869930,0,0x0,8
tick,0x7ffdf681f424,50871924,0,0x0,8
tick,0x7ffdf681f424,50873915,0,0x0,8
tick,0x7ffdf681f424,50875908,0,0x0,8
tick,0x7ffdf681f424,50877907,0,0x0,8
tick,0x7ffdf681f424,50880175,0,0x0,8
tick,0x7ffdf681f424,50891312,0,0x0,8
tick,0x7ffdf681f424,50892865,0,0x0,8
tick,0x7ffdf681f424,50895032,0,0x0,8
tick,0x7ffdf681f424,50897077,0,0x0,8
tick,0x7ffdf681f424,50898923,0,0x0,8
tick,0x7ffdf681f424,50900867,0,0x0,8
tick,0x7ffdf681f424,50902834,0,0x0,8
tick,0x7ffdf681f424,50904831,0,0x0,8
tick,0x7ffdf681f424,50906828,0,0x0,8
tick,0x7ffdf681f424,50908821,0,0x0,8
tick,0x7ffdf681f424,50910815,0,0x0,8
tick,0x7ffdf681f424,50913064,0,0x0,8
tick,0x7ffdf681f424,50914811,0,0x0,8
tick,0x7ffdf681f424,50916803,0,0x0,8
tick,0x7ffdf681f424,50923571,0,0x0,8
tick,0x7ffdf681f424,50924837,0,0x0,8
tick,0x7ffdf681f424,50926778,0,0x0,8
tick,0x7ffdf681f424,50928820,0,0x0,8
tick,0x7ffdf681f424,50930768,0,0x0,8
tick,0x7ffdf681f424,50932759,0,0x0,8
tick,0x7ffdf681f424,50934755,0,0x0,8
tick,0x7ffdf681f424,50936833,0,0x0,8
tick,0x7ffdf681f424,50938792,0,0x0,8
tick,0x7ffdf681f424,50940788,0,0x0,8
tick,0x7ffdf681f424,50943017,0,0x0,8
tick,0x7ffdf681f424,50944746,0,0x0,8
tick,0x7ffdf681f424,50946724,0,0x0,8
tick,0x7ffdf681f424,50948770,0,0x0,8
tick,0x7ffdf681f424,50950714,0,0x0,8
tick,0x7ffdf681f424,50952740,0,0x0,8
tick,0x7ffdf681f424,50954696,0,0x0,8
tick,0x7ffdf681f424,50956692,0,0x0,8
tick,0x7ffdf681f424,50958680,0,0x0,8
tick,0x7ffdf681f424,50962992,0,0x0,8
tick,0x7ffdf681f424,50964854,0,0x0,8
tick,0x7ffdf681f424,50966664,0,0x0,8
tick,0x7ffdf681f424,50968664,0,0x0,8
tick,0x7ffdf681f424,50970653,0,0x0,8
tick,0x7ffdf681f424,50972656,0,0x0,8
tick,0x7ffdf681f424,50976484,0,0x0,8
tick,0x7ffdf681f424,50989800,0,0x0,8
tick,0x7ffdf681f424,50991608,0,0x0,8
tick,0x7ffdf681f424,50993892,0,0x0,8
tick,0x7ffdf681f424,50995622,0,0x0,8
tick,0x7ffdf681f424,50997602,0,0x0,8
tick,0x7ffdf681f424,50999631,0,0x0,8
tick,0x7ffdf681f424,51001578,0,0x0,8
tick,0x7ffdf681f424,51003566,0,0x0,8
tick,0x7ffdf681f424,51005563,0,0x0,8
tick,0x7ffdf681f424,51007563,0,0x0,8
tick,0x7ffdf681f424,51009553,0,0x0,8
tick,0x7ffdf681f424,51011549,0,0x0,8
tick,0x7ffdf681f424,51013714,0,0x0,8
tick,0x7ffdf681f424,51015574,0,0x0,8
tick,0x7ffdf681f424,51017567,0,0x0,8
tick,0x7ffdf681f424,51019531,0,0x0,8
tick,0x7ffdf681f424,51021518,0,0x0,8
tick,0x7ffdf681f424,51023522,0,0x0,8
tick,0x7ffdf681f424,51025513,0,0x0,8
tick,0x7ffdf681f424,51027502,0,0x0,8
tick,0x7ffdf681f424,51029495,0,0x0,8
tick,0x7ffdf681f424,51031497,0,0x0,8
tick,0x7ffdf681f424,51033491,0,0x0,8
tick,0x7ffdf681f424,51035479,0,0x0,8
tick,0x7ffdf681f424,51037481,0,0x0,8
tick,0x7ffdf681f424,51039473,0,0x0,8
tick,0x7ffdf681f424,51053355,0,0x0,8
tick,0x7ffdf681f424,51054435,0,0x0,8
tick,0x7ffdf681f424,51056432,0,0x0,8
tick,0x7ffdf681f424,51058476,0,0x0,8
tick,0x7ffdf681f424,51061235,0,0x0,8
tick,0x7ffdf681f424,51062429,0,0x0,8
tick,0x7ffdf681f424,51064409,0,0x0,8
tick,0x7ffdf681f424,51066398,0,0x0,8
tick,0x7ffdf681f424,51068398,0,0x0,8
tick,0x7ffdf681f424,51070448,0,0x0,8
tick,0x7ffdf681f424,51072446,0,0x0,8
tick,0x7ffdf681f424,51074590,0,0x0,8
tick,0x7ffdf681f424,51085933,0,0x0,8
tick,0x7ffdf681f424,51087347,0,0x0,8
tick,0x7ffdf681f424,51089340,0,0x0,8
tick,0x7ffdf681f424,51091591,0,0x0,8
tick,0x7ffdf681f424,51094002,0,0x0,8
tick,0x7ffdf681f424,51095338,0,0x0,8
tick,0x7ffdf681f424,51097335,0,0x0,8
tick,0x7ffdf681f424,51099320,0,0x0,8
tick,0x7ffdf681f424,51101315,0,0x0,8
tick,0x7ffdf681f424,51103335,0,0x0,8
tick,0x7ffdf681f424,51105314,0,0x0,8
tick,0x7ffdf681f424,51107298,0,0x0,8
tick,0x7ffdf681f424,51109287,0,0x0,8
tick,0x7ffdf681f424,51111282,0,0x0,8
tick,0x7ffdf681f424,51113277,0,0x0,8
tick,0x7ffdf681f424,51115266,0,0x0,8
tick,0x7ffdf681f424,51117258,0,0x0,8
tick,0x7ffdf681f424,51119254,0,0x0,8
tick,0x7ffdf681f424,51121258,0,0x0,8
tick,0x7ffdf681f424,51123251,0,0x0,8
tick,0x7ffdf681f424,51125257,0,0x0,8
tick,0x7ffdf681f424,51127238,0,0x0,8
tick,0x7ffdf681f424,51129240,0,0x0,8
tick,0x7ffdf681f424,51131235,0,0x0,8
tick,0x7ffdf681f424,51133224,0,0x0,8
tick,0x7ffdf681f424,51138632,0,0x0,8
tick,0x7ffdf681f424,51140238,0,0x0,8
tick,0x7ffdf681f424,51142207,0,0x0,8
tick,0x7ffdf681f424,51149921,0,0x0,8
tick,0x7ffdf681f424,51151193,0,0x0,8
tick,0x7ffdf681f424,51153188,0,0x0,8
tick,0x7ffdf681f424,51155624,0,0x0,8
tick,0x7ffdf681f424,51157207,0,0x0,8
tick,0x7ffdf681f424,51159173,0,0x0,8
tick,0x7ffdf681f424,51161192,0,0x0,8
tick,0x7ffdf681f424,51163150,0,0x0,8
tick,0x7ffdf681f424,51165144,0,0x0,8
tick,0x7ffdf681f424,51167134,0,0x0,8
tick,0x7ffdf681f424,51169123,0,0x0,8
tick,0x7ffdf681f424,51171127,0,0x0,8
tick,0x7ffdf681f424,51173116,0,0x0,8
tick,0x7ffdf681f424,51175123,0,0x0,8
tick,0x7ffdf681f424,51177123,0,0x0,8
tick,0x7ffdf681f424,51179101,0,0x0,8
tick,0x7ffdf681f424,51181093,0,0x0,8
tick,0x7ffdf681f424,51183090,0,0x0,8
tick,0x7ffdf681f424,51185081,0,0x0,8
tick,0x7ffdf681f424,51187080,0,0x0,8
tick,0x7ffdf681f424,51189072,0,0x0,8
tick,0x7ffdf681f424,51191069,0,0x0,8
tick,0x7ffdf681f424,51193092,0,0x0,8
tick,0x7ffdf681f424,51195130,0,0x0,8
tick,0x7ffdf681f424,51197114,0,0x0,8
tick,0x7ffdf681f424,51199056,0,0x0,8
tick,0x7ffdf681f424,51201177,0,0x0,8
tick,0x7ffdf681f424,51204867,0,0x0,8
tick,0x7ffdf681f424,51207590,0,0x0,8
tick,0x7ffdf681f424,51232638,0,0x0,8
tick,0x7ffdf681f424,51233954,0,0x0,8
tick,0x7ffdf681f424,51235948,0,0x0,8
tick,0x7ffdf681f424,51237976,0,0x0,8
tick,0x7ffdf681f424,51240055,0,0x0,8
tick,0x7ffdf681f424,51241940,0,0x0,8
tick,0x7ffdf681f424,51243992,0,0x0,8
tick,0x7ffdf681f424,51245924,0,0x0,8
tick,0x7ffdf681f424,51247915,0,0x0,8
tick,0x7ffdf681f424,51249922,0,0x0,8
tick,0x7ffdf681f424,51251908,0,0x0,8
tick,0x7ffdf681f424,51253920,0,0x0,8
tick,0x7ffdf681f424,51255898,0,0x0,8
tick,0x7ffdf681f424,51258143,0,0x0,8
tick,0x7ffdf681f424,51259880,0,0x0,8
tick,0x7ffdf681f424,51261878,0,0x0,8
tick,0x7ffdf681f424,51263871,0,0x0,8
tick,0x7ffdf681f424,51265861,0,0x0,8
tick,0x7ffdf681f424,51267860,0,0x0,8
tick,0x7ffdf681f424,51269849,0,0x0,8
tick,0x7ffdf681f424,51271889,0,0x0,8
tick,0x7ffdf681f424,51273845,0,0x0,8
tick,0x7ffdf681f424,51275841,0,0x0,8
tick,0x7ffdf681f424,51277842,0,0x0,8
tick,0x7ffdf681f424,51279833,0,0x0,8
tick,0x7ffdf681f424,51281839,0,0x0,8
tick,0x7ffdf681f424,51283847,0,0x0,8
tick,0x7ffdf681f424,51302182,0,0x0,8
tick,0x7ffdf681f424,51303774,0,0x0,8
tick,0x7ffdf681f424,51305762,0,0x0,8
tick,0x7ffdf681f424,51308501,0,0x0,8
tick,0x7ffdf681f424,51309778,0,0x0,8
tick,0x7ffdf681f424,51311781,0,0x0,8
tick,0x7ffdf681f424,51313745,0,0x0,8
tick,0x7ffdf681f424,51315766,0,0x0,8
tick,0x7ffdf681f424,51317730,0,0x0,8
tick,0x7ffdf681f424,51319726,0,0x0,8
tick,0x7ffdf681f424,51321716,0,0x0,8
tick,0x7ffdf681f424,51323713,0,0x0,8
tick,0x7ffdf681f424,51325708,0,0x0,8
tick,0x7ffdf681f424,51327706,0,0x0,8
tick,0x7ffdf681f424,51329697,0,0x0,8
tick,0x7ffdf681f424,51331768,0,0x0,8
tick,0x7ffdf681f424,51345965,0,0x0,8
tick,0x7ffdf681f424,51347649,0,0x0,8
tick,0x7ffdf681f424,51349647,0,0x0,8
tick,0x7ffdf681f424,51351643,0,0x0,8
tick,0x7ffdf681f424,51353641,0,0x0,8
tick,0x7ffdf681f424,51356281,0,0x0,8
tick,0x7ffdf681f424,51357766,0,0x0,8
tick,0x7ffdf681f424,51359635,0,0x0,8
tick,0x7ffdf681f424,51361609,0,0x0,8
tick,0x7ffdf681f424,51363626,0,0x0,8
tick,0x7ffdf681f424,51365602,0,0x0,8
tick,0x7ffdf681f424,51367601,0,0x0,8
tick,0x7ffdf681f424,51369587,0,0x0,8
tick,0x7ffdf681f424,51371618,0,0x0,8
tick,0x7ffdf681f424,51373670,0,0x0,8
tick,0x7ffdf681f424,51386290,0,0x0,8
tick,0x7ffdf681f424,51387542,0,0x0,8
tick,0x7ffdf681f424,51389539,0,0x0,8
tick,0x7ffdf681f424,51391600,0,0x0,8
tick,0x7ffdf681f424,51393565,0,0x0,8
tick,0x7ffdf681f424,51395744,0,0x0,8
tick,0x7ffdf681f424,51397522,0,0x0,8
tick,0x7ffdf681f424,51399510,0,0x0,8
tick,0x7ffdf681f424,51401507,0,0x0,8
tick,0x7ffdf681f424,51403526,0,0x0,8
tick,0x7ffdf681f424,51405505,0,0x0,8
tick,0x7ffdf681f424,51407491,0,0x0,8
tick,0x7ffdf681f424,51409483,0,0x0,8
tick,0x7ffdf681f424,51411571,0,0x0,8
tick,0x7ffdf681f424,51413479,0,0x0,8
tick,0x7ffdf681f424,51415466,0,0x0,8
tick,0x7ffdf681f424,51417458,0,0x0,8
tick,0x7ffdf681f424,51419456,0,0x0,8
tick,0x7ffdf681f424,51421451,0,0x0,8
tick,0x7ffdf681f424,51423447,0,0x0,8
tick,0x7ffdf681f424,51425493,0,0x0,8
tick,0x7ffdf681f424,51427434,0,0x0,8
tick,0x7ffdf681f424,51429434,0,0x0,8
tick,0x7ffdf681f424,51431447,0,0x0,8
tick,0x7ffdf681f424,51433417,0,0x0,8
tick,0x7ffdf681f424,51452504,0,0x0,8
tick,0x7ffdf681f424,51456512,0,0x0,8
tick,0x7ffdf681f424,51469633,0,0x0,8
tick,0x7ffdf681f424,51471327,0,0x0,8
tick,0x7ffdf681f424,51473333,0,0x0,8
tick,0x7ffdf681f424,51475310,0,0x0,8
tick,0x7ffdf681f424,51477313,0,0x0,8
tick,0x7ffdf681f424,51479297,0,0x0,8
tick,0x7ffdf681f424,51481292,0,0x0,8
tick,0x7ffdf681f424,51483287,0,0x0,8
tick,0x7ffdf681f424,51485288,0,0x0,8
tick,0x7ffdf681f424,51487276,0,0x0,8
tick,0x7ffdf681f424,51489350,0,0x0,8
tick,0x7ffdf681f424,51491405,0,0x0,8
tick,0x7ffdf681f424,51493333,0,0x0,8
tick,0x7ffdf681f424,51495334,0,0x0,8
tick,0x7ffdf681f424,51497300,0,0x0,8
tick,0x7ffdf681f424,51499287,0,0x0,8
tick,0x7ffdf681f424,51501234,0,0x0,8
tick,0x7ffdf681f424,51503226,0,0x0,8
tick,0x7ffdf681f424,51505230,0,0x0,8
tick,0x7ffdf681f424,51507218,0,0x0,8
tick,0x7ffdf681f424,51509205,0,0x0,8
tick,0x7ffdf681f424,51511207,0,0x0,8
tick,0x7ffdf681f424,51513256,0,0x0,8
tick,0x7ffdf681f424,51515200,0,0x0,8
tick,0x7ffdf681f424,51517193,0,0x0,8
tick,0x7ffdf681f424,51519190,0,0x0,8
tick,0x7ffdf681f424,51521184,0,0x0,8
tick,0x7ffdf681f424,51523177,0,0x0,8
tick,0x7ffdf681f424,51525217,0,0x0,8
tick,0x7ffdf681f424,51527170,0,0x0,8
tick,0x7ffdf681f424,51529165,0,0x0,8
tick,0x7ffdf681f424,51539832,0,0x0,8
tick,0x7ffdf681f424,51541132,0,0x0,8
tick,0x7ffdf681f424,51544922,0,0x0,8
tick,0x7ffdf681f424,51555864,0,0x0,8
tick,0x7ffdf681f424,51557101,0,0x0,8
tick,0x7ffdf681f424,51559162,0,0x0,8
tick,0x7ffdf681f424,51561236,0,0x0,8
tick,0x7ffdf681f424,51566586,0,0x0,8
tick,0x7ffdf681f424,51568126,0,0x0,8
tick,0x7ffdf681f424,51570058,0,0x0,8
tick,0x7ffdf681f424,51572054,0,0x0,8
tick,0x7ffdf681f424,51574040,0,0x0,8
tick,0x7ffdf681f424,51576037,0,0x0,8
tick,0x7ffdf681f424,51578036,0,0x0,8
tick,0x7ffdf681f424,51580237,0,0x0,8
tick,0x7ffdf681f424,51582020,0,0x0,8
tick,0x7ffdf681f424,51584018,0,0x0,8
tick,0x7ffdf681f424,51586007,0,0x0,8
tick,0x7ffdf681f424,51588010,0,0x0,8
tick,0x7ffdf681f424,51590001,0,0x0,8
tick,0x7ffdf681f424,51591992,0,0x0,8
tick,0x7ffdf681f424,51593986,0,0x0,8
tick,0x7ffdf681f424,51595981,0,0x0,8
tick,0x7ffdf681f424,51597977,0,0x0,8
tick,0x7ffdf681f424,51599982,0,0x0,8
tick,0x7ffdf681f424,51601973,0,0x0,8
tick,0x7ffdf681f424,51603974,0,0x0,8
tick,0x7ffdf681f424,51605957,0,0x0,8
tick,0x7ffdf681f424,51620336,0,0x0,8
tick,0x7ffdf681f424,51622047,0,0x0,8
tick,0x7ffdf681f424,51626367,0,0x0,8
tick,0x7ffdf681f424,51627935,0,0x0,8
tick,0x7ffdf681f424,51629898,0,0x0,8
tick,0x7ffdf681f424,51631957,0,0x0,8
tick,0x7ffdf681f424,51633944,0,0x0,8
tick,0x7ffdf681f424,51635880,0,0x0,8
tick,0x7ffdf681f424,51637917,0,0x0,8
tick,0x7ffdf681f424,51641786,0,0x0,8
tick,0x7ffdf681f424,51642856,0,0x0,8
tick,0x7ffdf681f424,51644868,0,0x0,8
tick,0x7ffdf681f424,51646877,0,0x0,8
tick,0x7ffdf681f424,51648971,0,0x0,8
tick,0x7ffdf681f424,51650853,0,0x0,8
tick,0x7ffdf681f424,51653471,0,0x0,8
tick,0x7ffdf681f424,51654881,0,0x0,8
tick,0x7ffdf681f424,51656828,0,0x0,8
tick,0x7ffdf681f424,51658824,0,0x0,8
tick,0x7ffdf681f424,51660815,0,0x0,8
tick,0x7ffdf681f424,51662806,0,0x0,8
tick,0x7ffdf681f424,51664801,0,0x0,8
tick,0x7ffdf681f424,51666799,0,0x0,8
tick,0x7ffdf681f424,51668788,0,0x0,8
tick,0x7ffdf681f424,51670785,0,0x0,8
tick,0x7ffdf681f424,51672791,0,0x0,8
tick,0x7ffdf681f424,51674792,0,0x0,8
tick,0x7ffdf681f424,51676772,0,0x0,8
tick,0x7ffdf681f424,51678771,0,0x0,8
tick,0x7ffdf681f424,51680777,0,0x0,8
tick,0x7ffdf681f424,51682749,0,0x0,8
tick,0x7ffdf681f424,51684746,0,0x0,8
tick,0x7ffdf681f424,51686740,0,0x0,8
tick,0x7ffdf681f424,51688735,0,0x0,8
tick,0x7ffdf681f424,51690736,0,0x0,8
tick,0x7ffdf681f424,51692724,0,0x0,8
tick,0x7ffdf681f424,51694718,0,0x0,8
tick,0x7ffdf681f424,51709957,0,0x0,8
tick,0x7ffdf681f424,51709999,0,0x0,8
tick,0x7ffdf681f424,51711675,0,0x0,8
tick,0x7ffdf681f424,51713673,0,0x0,8
tick,0x7ffdf681f424,51715751,0,0x0,8
tick,0x7ffdf681f424,51717671,0,0x0,8
tick,0x7ffdf681f424,51719849,0,0x0,8
tick,0x7ffdf681f424,51721658,0,0x0,8
tick,0x7ffdf681f424,51723641,0,0x0,8
tick,0x7ffdf681f424,51725639,0,0x0,8
tick,0x7ffdf681f424,51727644,0,0x0,8
tick,0x7ffdf681f424,51729635,0,0x0,8
tick,0x7ffdf681f424,51731649,0,0x0,8
tick,0x7ffdf681f424,51733620,0,0x0,8
tick,0x7ffdf681f424,51735619,0,0x0,8
tick,0x7ffdf681f424,51737828,0,0x0,8
tick,0x7ffdf681f424,51739832,0,0x0,8
tick,0x7ffdf681f424,51754132,0,0x0,8
tick,0x7ffdf681f424,51754201,0,0x0,8
tick,0x7ffdf681f424,51755569,0,0x0,8
tick,0x7ffdf681f424,51757644,0,0x0,8
tick,0x7ffdf681f424,51759629,0,0x0,8
tick,0x7ffdf681f424,51761611,0,0x0,8
tick,0x7ffdf681f424,51763550,0,0x0,8
tick,0x7ffdf681f424,51765574,0,0x0,8
tick,0x7ffdf681f424,51767546,0,0x0,8
tick,0x7ffdf681f424,51769522,0,0x0,8
tick,0x7ffdf681f424,51771516,0,0x0,8
tick,0x7ffdf681f424,51773522,0,0x0,8
tick,0x7ffdf681f424,51775519,0,0x0,8
tick,0x7ffdf681f424,51777509,0,0x0,8
tick,0x7ffdf681f424,51779501,0,0x0,8
tick,0x7ffdf681f424,51781491,0,0x0,8
tick,0x7ffdf681f424,51783481,0,0x0,8
tick,0x7ffdf681f424,51785473,0,0x0,8
tick,0x7ffdf681f424,51787475,0,0x0,8
tick,0x7ffdf681f424,51789469,0,0x0,8
tick,0x7ffdf681f424,51791462,0,0x0,8
tick,0x7ffdf681f424,51793451,0,0x0,8
tick,0x7ffdf681f424,51795451,0,0x0,8
tick,0x7ffdf681f424,51797450,0,0x0,8
tick,0x7ffdf681f424,51799440,0,0x0,8
tick,0x7ffdf681f424,51801448,0,0x0,8
tick,0x7ffdf681f424,51803433,0,0x0,8
tick,0x7ffdf681f424,51805428,0,0x0,8
tick,0x7ffdf681f424,51807743,0,0x0,8
tick,0x7ffdf681f424,51809588,0,0x0,8
tick,0x7ffdf681f424,51811421,0,0x0,8
tick,0x7ffdf681f424,51813839,0,0x0,8
tick,0x7ffdf681f424,51821385,0,0x0,8
tick,0x7ffdf681f424,51823379,0,0x0,8
tick,0x7ffdf681f424,51825400,0,0x0,8
tick,0x7ffdf681f424,51827465,0,0x0,8
tick,0x7ffdf681f424,51829365,0,0x0,8
tick,0x7ffdf681f424,51831378,0,0x0,8
tick,0x7ffdf681f424,51833351,0,0x0,8
tick,0x7ffdf681f424,51835345,0,0x0,8
tick,0x7ffdf681f424,51837351,0,0x0,8
tick,0x7ffdf681f424,51839335,0,0x0,8
tick,0x7ffdf681f424,51841329,0,0x0,8
tick,0x7ffdf681f424,51843325,0,0x0,8
tick,0x7ffdf681f424,51845325,0,0x0,8
tick,0x7ffdf681f424,51847313,0,0x0,8
tick,0x7ffdf681f424,51849301,0,0x0,8
tick,0x7ffdf681f424,51851338,0,0x0,8
tick,0x7ffdf681f424,51853411,0,0x0,8
tick,0x7ffdf681f424,51855966,0,0x0,8
tick,0x7ffdf681f424,51857342,0,0x0,8
tick,0x7ffdf681f424,51867132,0,0x0,8
tick,0x7ffdf681f424,51868256,0,0x0,8
tick,0x7ffdf681f424,51870251,0,0x0,8
tick,0x7ffdf681f424,51872309,0,0x0,8
tick,0x7ffdf681f424,51874390,0,0x0,8
tick,0x7ffdf681f424,51876253,0,0x0,8
tick,0x7ffdf681f424,51878248,0,0x0,8
tick,0x7ffdf681f424,51880286,0,0x0,8
tick,0x7ffdf681f424,51882218,0,0x0,8
tick,0x7ffdf681f424,51884229,0,0x0,8
tick,0x7ffdf681f424,51886209,0,0x0,8
tick,0x7ffdf681f424,51888211,0,0x0,8
tick,0x7ffdf681f424,51890202,0,0x0,8
tick,0x7ffdf681f424,51892193,0,0x0,8
tick,0x7ffdf681f424,51894185,0,0x0,8
tick,0x7ffdf681f424,51897574,0,0x0,8
tick,0x7ffdf681f424,51909621,0,0x0,8
tick,0x7ffdf681f424,51911145,0,0x0,8
tick,0x7ffdf681f424,51913158,0,0x0,8
tick,0x7ffdf681f424,51915169,0,0x0,8
tick,0x7ffdf681f424,51917132,0,0x0,8
tick,0x7ffdf681f424,51919140,0,0x0,8
tick,0x7ffdf681f424,51921120,0,0x0,8
tick,0x7ffdf681f424,51923110,0,0x0,8
tick,0x7ffdf681f424,51925101,0,0x0,8
tick,0x7ffdf681f424,51927098,0,0x0,8
tick,0x7ffdf681f424,51929090,0,0x0,8
tick,0x7ffdf681f424,51931106,0,0x0,8
tick,0x7ffdf681f424,51933080,0,0x0,8
tick,0x7ffdf681f424,51935078,0,0x0,8
tick,0x7ffdf681f424,51937071,0,0x0,8
tick,0x7ffdf681f424,51939065,0,0x0,8
tick,0x7ffdf681f424,51941061,0,0x0,8
tick,0x7ffdf681f424,51943053,0,0x0,8
tick,0x7ffdf681f424,51945051,0,0x0,8
tick,0x7ffdf681f424,51947959,0,0x0,8
tick,0x7ffdf681f424,51949036,0,0x0,8
tick,0x7ffdf681f424,51951033,0,0x0,8
tick,0x7ffdf681f424,51953030,0,0x0,8
tick,0x7ffdf681f424,51955031,0,0x0,8
tick,0x7ffdf681f424,51957033,0,0x0,8
tick,0x7ffdf681f424,51959045,0,0x0,8
tick,0x7ffdf681f424,51961011,0,0x0,8
tick,0x7ffdf681f424,51964040,0,0x0,8
tick,0x7ffdf681f424,51965515,0,0x0,8
tick,0x7ffdf681f424,51968482,0,0x0,8
tick,0x7ffdf681f424,51971154,0,0x0,8
tick,0x7ffdf681f424,51977026,0,0x0,8
tick,0x7ffdf681f424,51980399,0,0x0,8
tick,0x7ffdf681f424,51981950,0,0x0,8
tick,0x7ffdf681f424,51983941,0,0x0,8
tick,0x7ffdf681f424,51985968,0,0x0,8
tick,0x7ffdf681f424,51988025,0,0x0,8
tick,0x7ffdf681f424,51990027,0,0x0,8
tick,0x7ffdf681f424,51991927,0,0x0,8
tick,0x7ffdf681f424,51993922,0,0x0,8
tick,0x7ffdf681f424,51995915,0,0x0,8
tick,0x7ffdf681f424,51997920,0,0x0,8
tick,0x7ffdf681f424,52009985,0,0x0,8
tick,0x7ffdf681f424,52010032,0,0x0,8
tick,0x7ffdf681f424,52011873,0,0x0,8
tick,0x7ffdf681f424,52013997,0,0x0,8
tick,0x7ffdf681f424,52015917,0,0x0,8
tick,0x7ffdf681f424,52017898,0,0x0,8
tick,0x7ffdf681f424,52019854,0,0x0,8
tick,0x7ffdf681f424,52021858,0,0x0,8
tick,0x7ffdf681f424,52023842,0,0x0,8
tick,0x7ffdf681f424,52025831,0,0x0,8
tick,0x7ffdf681f424,52027822,0,0x0,8
tick,0x7ffdf681f424,52029821,0,0x0,8
tick,0x7ffdf681f424,52031872,0,0x0,8
tick,0x7ffdf681f424,52033826,0,0x0,8
tick,0x7ffdf681f424,52035815,0,0x0,8
tick,0x7ffdf681f424,52037802,0,0x0,8
tick,0x7ffdf681f424,52039806,0,0x0,8
tick,0x7ffdf681f424,52041791,0,0x0,8
tick,0x7ffdf681f424,52043794,0,0x0,8
tick,0x7ffdf681f424,52045782,0,0x0,8
tick,0x7ffdf681f424,52047774,0,0x0,8
tick,0x7ffdf681f424,52049767,0,0x0,8
tick,0x7ffdf681f424,52051763,0,0x0,8
tick,0x7ffdf681f424,52053790,0,0x0,8
tick,0x7ffdf681f424,52055775,0,0x0,8
tick,0x7ffdf681f424,52057761,0,0x0,8
tick,0x7ffdf681f424,52064849,0,0x0,8
tick,0x7ffdf681f424,52071483,0,0x0,8
tick,0x7ffdf681f424,52073485,0,0x0,8
tick,0x7ffdf681f424,52074987,0,0x0,8
tick,0x7ffdf681f424,52081204,0,0x0,8
tick,0x7ffdf681f424,52082687,0,0x0,8
tick,0x7ffdf681f424,52088134,0,0x0,8
tick,0x7ffdf681f424,52100436,0,0x0,8
tick,0x7ffdf681f424,52101632,0,0x0,8
tick,0x7ffdf681f424,52103630,0,0x0,8
tick,0x7ffdf681f424,52105635,0,0x0,8
tick,0x7ffdf681f424,52107676,0,0x0,8
tick,0x7ffdf681f424,52109637,0,0x0,8
tick,0x7ffdf681f424,52116393,0,0x0,8
tick,0x7ffdf681f424,52117616,0,0x0,8
tick,0x7ffdf681f424,52119593,0,0x0,8
tick,0x7ffdf681f424,52121623,0,0x0,8
tick,0x7ffdf681f424,52123584,0,0x0,8
tick,0x7ffdf681f424,52125574,0,0x0,8
tick,0x7ffdf681f424,52127569,0,0x0,8
tick,0x7ffdf681f424,52129558,0,0x0,8
tick,0x7ffdf681f424,52131555,0,0x0,8
tick,0x7ffdf681f424,52133545,0,0x0,8
tick,0x7ffdf681f424,52135540,0,0x0,8
tick,0x7ffdf681f424,52137536,0,0x0,8
tick,0x7ffdf681f424,52139529,0,0x0,8
tick,0x7ffdf681f424,52141522,0,0x0,8
tick,0x7ffdf681f424,52143518,0,0x0,8
tick,0x7ffdf681f424,52145511,0,0x0,8
tick,0x7ffdf681f424,52147509,0,0x0,8
tick,0x7ffdf681f424,52149504,0,0x0,8
tick,0x7ffdf681f424,52151494,0,0x0,8
tick,0x7ffdf681f424,52153490,0,0x0,8
tick,0x7ffdf681f424,52155494,0,0x0,8
tick,0x7ffdf681f424,52157520,0,0x0,8
tick,0x7ffdf681f424,52159478,0,0x0,8
tick,0x7ffdf681f424,52161467,0,0x0,8
tick,0x7ffdf681f424,52163465,0,0x0,8
tick,0x7ffdf681f424,52165464,0,0x0,8
tick,0x7ffdf681f424,52167457,0,0x0,8
tick,0x7ffdf681f424,52169457,0,0x0,8
tick,0x7ffdf681f424,52173281,0,0x0,8
tick,0x7ffdf681f424,52175735,0,0x0,8
tick,0x7ffdf681f424,52177746,0,0x0,8
tick,0x7ffdf681f424,52198549,0,0x0,8
tick,0x7ffdf681f424,52200372,0,0x0,8
tick,0x7ffdf681f424,52202595,0,0x0,8
tick,0x7ffdf681f424,52204360,0,0x0,8
tick,0x7ffdf681f424,52206374,0,0x0,8
tick,0x7ffdf681f424,52208377,0,0x0,8
tick,0x7ffdf681f424,52210339,0,0x0,8
tick,0x7ffdf681f424,52212373,0,0x0,8
tick,0x7ffdf681f424,52214380,0,0x0,8
tick,0x7ffdf681f424,52217726,0,0x0,8
tick,0x7ffdf681f424,52218319,0,0x0,8
tick,0x7ffdf681f424,52220322,0,0x0,8
tick,0x7ffdf681f424,52222307,0,0x0,8
tick,0x7ffdf681f424,52224303,0,0x0,8
tick,0x7ffdf681f424,52226299,0,0x0,8
tick,0x7ffdf681f424,52228292,0,0x0,8
tick,0x7ffdf681f424,52230288,0,0x0,8
tick,0x7ffdf681f424,52232279,0,0x0,8
tick,0x7ffdf681f424,52234268,0,0x0,8
tick,0x7ffdf681f424,52236303,0,0x0,8
tick,0x7ffdf681f424,52238263,0,0x0,8
tick,0x7ffdf681f424,52240287,0,0x0,8
tick,0x7ffdf681f424,52242263,0,0x0,8
tick,0x7ffdf681f424,52244259,0,0x0,8
tick,0x7ffdf681f424,52246264,0,0x0,8
tick,0x7ffdf681f424,52248259,0,0x0,8
tick,0x7ffdf681f424,52250245,0,0x0,8
tick,0x7ffdf681f424,52252231,0,0x0,8
tick,0x7ffdf681f424,52254241,0,0x0,8
tick,0x7ffdf681f424,52256219,0,0x0,8
tick,0x7ffdf681f424,52258214,0,0x0,8
tick,0x7ffdf681f424,52260287,0,0x0,8
tick,0x7ffdf681f424,52262219,0,0x0,8
tick,0x7ffdf681f424,52264202,0,0x0,8
tick,0x7ffdf681f424,52279259,0,0x0,8
tick,0x7ffdf681f424,52281162,0,0x0,8
tick,0x7ffdf681f424,52283180,0,0x0,8
tick,0x7ffdf681f424,52285240,0,0x0,8
tick,0x7ffdf681f424,52287141,0,0x0,8
tick,0x7ffdf681f424,52289161,0,0x0,8
tick,0x7ffdf681f424,52291126,0,0x0,8
tick,0x7ffdf681f424,52293124,0,0x0,8
tick,0x7ffdf681f424,52295117,0,0x0,8
tick,0x7ffdf681f424,52297111,0,0x0,8
tick,0x7ffdf681f424,52299443,0,0x0,8
tick,0x7ffdf681f424,52301103,0,0x0,8
tick,0x7ffdf681f424,52303091,0,0x0,8
tick,0x7ffdf681f424,52305097,0,0x0,8
tick,0x7ffdf681f424,52307086,0,0x0,8
tick,0x7ffdf681f424,52309082,0,0x0,8
tick,0x7ffdf681f424,52311068,0,0x0,8
tick,0x7ffdf681f424,52313070,0,0x0,8
tick,0x7ffdf681f424,52315071,0,0x0,8
tick,0x7ffdf681f424,52317061,0,0x0,8
tick,0x7ffdf681f424,52319350,0,0x0,8
tick,0x7ffdf681f424,52333038,0,0x0,8
tick,0x7ffdf681f424,52335024,0,0x0,8
tick,0x7ffdf681f424,52337008,0,0x0,8
tick,0x7ffdf681f424,52339413,0,0x0,8
tick,0x7ffdf681f424,52341074,0,0x0,8
tick,0x7ffdf681f424,52343023,0,0x0,8
tick,0x7ffdf681f424,52345035,0,0x0,8
tick,0x7ffdf681f424,52346980,0,0x0,8
tick,0x7ffdf681f424,52348975,0,0x0,8
tick,0x7ffdf681f424,52350970,0,0x0,8
tick,0x7ffdf681f424,52352963,0,0x0,8
tick,0x7ffdf681f424,52354970,0,0x0,8
tick,0x7ffdf681f424,52356953,0,0x0,8
tick,0x7ffdf681f424,52358949,0,0x0,8
tick,0x7ffdf681f424,52360940,0,0x0,8
tick,0x7ffdf681f424,52362935,0,0x0,8
tick,0x7ffdf681f424,52364931,0,0x0,8
tick,0x7ffdf681f424,52366958,0,0x0,8
tick,0x7ffdf681f424,52369002,0,0x0,8
tick,0x7ffdf681f424,52378973,0,0x0,8
tick,0x7ffdf681f424,52379911,0,0x0,8
tick,0x7ffdf681f424,52392378,0,0x0,8
tick,0x7ffdf681f424,52393851,0,0x0,8
tick,0x7ffdf681f424,52395859,0,0x0,8
tick,0x7ffdf681f424,52397873,0,0x0,8
tick,0x7ffdf681f424,52399888,0,0x0,8
tick,0x7ffdf681f424,52401947,0,0x0,8
tick,0x7ffdf681f424,52403842,0,0x0,8
tick,0x7ffdf681f424,52405819,0,0x0,8
tick,0x7ffdf681f424,52407826,0,0x0,8
tick,0x7ffdf681f424,52409814,0,0x0,8
tick,0x7ffdf681f424,52411808,0,0x0,8
tick,0x7ffdf681f424,52413806,0,0x0,8
tick,0x7ffdf681f424,52415790,0,0x0,8
tick,0x7ffdf681f424,52417792,0,0x0,8
tick,0x7ffdf681f424,52419781,0,0x0,8
tick,0x7ffdf681f424,52422598,0,0x0,8
tick,0x7ffdf681f424,52423878,0,0x0,8
tick,0x7ffdf681f424,52427021,0,0x0,8
tick,0x7ffdf681f424,52430195,0,0x0,8
tick,0x7ffdf681f424,52438060,0,0x0,8
tick,0x7ffdf681f424,52439728,0,0x0,8
tick,0x7ffdf681f424,52441729,0,0x0,8
tick,0x7ffdf681f424,52443726,0,0x0,8
tick,0x7ffdf681f424,52445758,0,0x0,8
tick,0x7ffdf681f424,52447808,0,0x0,8
tick,0x7ffdf681f424,52449781,0,0x0,8
tick,0x7ffdf681f424,52451696,0,0x0,8
tick,0x7ffdf681f424,52453688,0,0x0,8
tick,0x7ffdf681f424,52455690,0,0x0,8
tick,0x7ffdf681f424,52457682,0,0x0,8
tick,0x7ffdf681f424,52471374,0,0x0,8
tick,0x7ffdf681f424,52471410,0,0x0,8
tick,0x7ffdf681f424,52472648,0,0x0,8
tick,0x7ffdf681f424,52474636,0,0x0,8
tick,0x7ffdf681f424,52476659,0,0x0,8
tick,0x7ffdf681f424,52478642,0,0x0,8
tick,0x7ffdf681f424,52480861,0,0x0,8
tick,0x7ffdf681f424,52482641,0,0x0,8
tick,0x7ffdf681f424,52484606,0,0x0,8
tick,0x7ffdf681f424,52486612,0,0x0,8
tick,0x7ffdf681f424,52488598,0,0x0,8
tick,0x7ffdf681f424,52490591,0,0x0,8
tick,0x7ffdf681f424,52492595,0,0x0,8
tick,0x7ffdf681f424,52494583,0,0x0,8
tick,0x7ffdf681f424,52496578,0,0x0,8
tick,0x7ffdf681f424,52498570,0,0x0,8
tick,0x7ffdf681f424,52500570,0,0x0,8
tick,0x7ffdf681f424,52502558,0,0x0,8
tick,0x7ffdf681f424,52504560,0,0x0,8
tick,0x7ffdf681f424,52506611,0,0x0,8
tick,0x7ffdf681f424,52508546,0,0x0,8
tick,0x7ffdf681f424,52510542,0,0x0,8
tick,0x7ffdf681f424,52512530,0,0x0,8
tick,0x7ffdf681f424,52514539,0,0x0,8
tick,0x7ffdf681f424,52518284,0,0x0,8
tick,0x7ffdf681f424,52529587,0,0x0,8
tick,0x7ffdf681f424,52531490,0,0x0,8
tick,0x7ffdf681f424,52533636,0,0x0,8
tick,0x7ffdf681f424,52535478,0,0x0,8
tick,0x7ffdf681f424,52537473,0,0x0,8
tick,0x7ffdf681f424,52539464,0,0x0,8
tick,0x7ffdf681f424,52541456,0,0x0,8
tick,0x7ffdf681f424,52543451,0,0x0,8
tick,0x7ffdf681f424,52545447,0,0x0,8
tick,0x7ffdf681f424,52547442,0,0x0,8
tick,0x7ffdf681f424,52549502,0,0x0,8
tick,0x7ffdf681f424,52551424,0,0x0,8
tick,0x7ffdf681f424,52553424,0,0x0,8
tick,0x7ffdf681f424,52555426,0,0x0,8
tick,0x7ffdf681f424,52557434,0,0x0,8
tick,0x7ffdf681f424,52567410,0,0x0,8
tick,0x7ffdf681f424,52569380,0,0x0,8
tick,0x7ffdf681f424,52571368,0,0x0,8
tick,0x7ffdf681f424,52573365,0,0x0,8
tick,0x7ffdf681f424,52575378,0,0x0,8
tick,0x7ffdf681f424,52578375,0,0x0,8
tick,0x7ffdf681f424,52580452,0,0x0,8
tick,0x7ffdf681f424,52582366,0,0x0,8
tick,0x7ffdf681f424,52584343,0,0x0,8
tick,0x7ffdf681f424,52586335,0,0x0,8
tick,0x7ffdf681f424,52588329,0,0x0,8
tick,0x7ffdf681f424,52590324,0,0x0,8
tick,0x7ffdf681f424,52592316,0,0x0,8
tick,0x7ffdf681f424,52594314,0,0x0,8
tick,0x7ffdf681f424,52596341,0,0x0,8
tick,0x7ffdf681f424,52598315,0,0x0,8
tick,0x7ffdf681f424,52612110,0,0x0,8
tick,0x7ffdf681f424,52612212,0,0x0,8
tick,0x7ffdf681f424,52613281,0,0x0,8
tick,0x7ffdf681f424,52615270,0,0x0,8
tick,0x7ffdf681f424,52617311,0,0x0,8
tick,0x7ffdf681f424,52619581,0,0x0,8
tick,0x7ffdf681f424,52621261,0,0x0,8
tick,0x7ffdf681f424,52623241,0,0x0,8
tick,0x7ffdf681f424,52625229,0,0x0,8
tick,0x7ffdf681f424,52627230,0,0x0,8
tick,0x7ffdf681f424,52629222,0,0x0,8
tick,0x7ffdf681f424,52631217,0,0x0,8
tick,0x7ffdf681f424,52633207,0,0x0,8
tick,0x7ffdf681f424,52635204,0,0x0,8
tick,0x7ffdf681f424,52637215,0,0x0,8
tick,0x7ffdf681f424,52639192,0,0x0,8
tick,0x7ffdf681f424,52641184,0,0x0,8
tick,0x7ffdf681f424,52643182,0,0x0,8
tick,0x7ffdf681f424,52645177,0,0x0,8
tick,0x7ffdf681f424,52647173,0,0x0,8
tick,0x7ffdf681f424,52649180,0,0x0,8
tick,0x7ffdf681f424,52663638,0,0x0,8
tick,0x7ffdf681f424,52666224,0,0x0,8
tick,0x7ffdf681f424,52668122,0,0x0,8
tick,0x7ffdf681f424,52670187,0,0x0,8
tick,0x7ffdf681f424,52672243,0,0x0,8
tick,0x7ffdf681f424,52674135,0,0x0,8
tick,0x7ffdf681f424,52676153,0,0x0,8
tick,0x7ffdf681f424,52678138,0,0x0,8
tick,0x7ffdf681f424,52680089,0,0x0,8
tick,0x7ffdf681f424,52690914,0,0x0,8
tick,0x7ffdf681f424,52697541,0,0x0,8
tick,0x7ffdf681f424,52699040,0,0x0,8
tick,0x7ffdf681f424,52701038,0,0x0,8
tick,0x7ffdf681f424,52703091,0,0x0,8
tick,0x7ffdf681f424,52705261,0,0x0,8
tick,0x7ffdf681f424,52707022,0,0x0,8
tick,0x7ffdf681f424,52709007,0,0x0,8
tick,0x7ffdf681f424,52711012,0,0x0,8
tick,0x7ffdf681f424,52713002,0,0x0,8
tick,0x7ffdf681f424,52714992,0,0x0,8
tick,0x7ffdf681f424,52716990,0,0x0,8
tick,0x7ffdf681f424,52718993,0,0x0,8
tick,0x7ffdf681f424,52720976,0,0x0,8
tick,0x7ffdf681f424,52722971,0,0x0,8
tick,0x7ffdf681f424,52725004,0,0x0,8
tick,0x7ffdf681f424,52726958,0,0x0,8
tick,0x7ffdf681f424,52728953,0,0x0,8
tick,0x7ffdf681f424,52730946,0,0x0,8
tick,0x7ffdf681f424,52732941,0,0x0,8
tick,0x7ffdf681f424,52743216,0,0x0,8
tick,0x7ffdf681f424,52745216,0,0x0,8
tick,0x7ffdf681f424,52750548,0,0x0,8
tick,0x7ffdf681f424,52751891,0,0x0,8
tick,0x7ffdf681f424,52753891,0,0x0,8
tick,0x7ffdf681f424,52755909,0,0x0,8
tick,0x7ffdf681f424,52758019,0,0x0,8
tick,0x7ffdf681f424,52759909,0,0x0,8
tick,0x7ffdf681f424,52761985,0,0x0,8
tick,0x7ffdf681f424,52763865,0,0x0,8
tick,0x7ffdf681f424,52778868,0,0x0,8
tick,0x7ffdf681f424,52780826,0,0x0,8
tick,0x7ffdf681f424,52782998,0,0x0,8
tick,0x7ffdf681f424,52784867,0,0x0,8
tick,0x7ffdf681f424,52786812,0,0x0,8
tick,0x7ffdf681f424,52788809,0,0x0,8
tick,0x7ffdf681f424,52790794,0,0x0,8
tick,0x7ffdf681f424,52792780,0,0x0,8
tick,0x7ffdf681f424,52794780,0,0x0,8
tick,0x7ffdf681f424,52796818,0,0x0,8
tick,0x7ffdf681f424,52798768,0,0x0,8
tick,0x7ffdf681f424,52800765,0,0x0,8
tick,0x7ffdf681f424,52802756,0,0x0,8
tick,0x7ffdf681f424,52804749,0,0x0,8
tick,0x7ffdf681f424,52806747,0,0x0,8
tick,0x7ffdf681f424,52810011,0,0x0,8
tick,0x7ffdf681f424,52811848,0,0x0,8
tick,0x7ffdf681f424,52813730,0,0x0,8
tick,0x7ffdf681f424,52815737,0,0x0,8
tick,0x7ffdf681f424,52817718,0,0x0,8
tick,0x7ffdf681f424,52819715,0,0x0,8
tick,0x7ffdf681f424,52821706,0,0x0,8
tick,0x7ffdf681f424,52823726,0,0x0,8
tick,0x7ffdf681f424,52826251,0,0x0,8
tick,0x7ffdf681f424,52829367,0,0x0,8
tick,0x7ffdf681f424,52832658,0,0x0,8
tick,0x7ffdf681f424,52833735,0,0x0,8
tick,0x7ffdf681f424,52846296,0,0x0,8
tick,0x7ffdf681f424,52856282,0,0x0,8
tick,0x7ffdf681f424,52857636,0,0x0,8
tick,0x7ffdf681f424,52859704,0,0x0,8
tick,0x7ffdf681f424,52862122,0,0x0,8
tick,0x7ffdf681f424,52863983,0,0x0,8
tick,0x7ffdf681f424,52865632,0,0x0,8
tick,0x7ffdf681f424,52867634,0,0x0,8
tick,0x7ffdf681f424,52869918,0,0x0,8
tick,0x7ffdf681f424,52871579,0,0x0,8
tick,0x7ffdf681f424,52873603,0,0x0,8
tick,0x7ffdf681f424,52875572,0,0x0,8
tick,0x7ffdf681f424,52877556,0,0x0,8
tick,0x7ffdf681f424,52879552,0,0x0,8
tick,0x7ffdf681f424,52881554,0,0x0,8
tick,0x7ffdf681f424,52884118,0,0x0,8
tick,0x7ffdf681f424,52885551,0,0x0,8
tick,0x7ffdf681f424,52887530,0,0x0,8
tick,0x7ffdf681f424,52889538,0,0x0,8
tick,0x7ffdf681f424,52891520,0,0x0,8
tick,0x7ffdf681f424,52893514,0,0x0,8
tick,0x7ffdf681f424,52895506,0,0x0,8
tick,0x7ffdf681f424,52897506,0,0x0,8
tick,0x7ffdf681f424,52899496,0,0x0,8
tick,0x7ffdf681f424,52901492,0,0x0,8
tick,0x7ffdf681f424,52903493,0,0x0,8
tick,0x7ffdf681f424,52905486,0,0x0,8
tick,0x7ffdf681f424,52907476,0,0x0,8
tick,0x7ffdf681f424,52909471,0,0x0,8
tick,0x7ffdf681f424,52911469,0,0x0,8
tick,0x7ffdf681f424,52913473,0,0x0,8
tick,0x7ffdf681f424,52915714,0,0x0,8
tick,0x7ffdf681f424,52928485,0,0x0,8
tick,0x7ffdf681f424,52928523,0,0x0,8
tick,0x7ffdf681f424,52930430,0,0x0,8
tick,0x7ffdf681f424,52932448,0,0x0,8
tick,0x7ffdf681f424,52934838,0,0x0,8
tick,0x7ffdf681f424,52936407,0,0x0,8
tick,0x7ffdf681f424,52938405,0,0x0,8
tick,0x7ffdf681f424,52940396,0,0x0,8
tick,0x7ffdf681f424,52942385,0,0x0,8
tick,0x7ffdf681f424,52944407,0,0x0,8
tick,0x7ffdf681f424,52946372,0,0x0,8
tick,0x7ffdf681f424,52948374,0,0x0,8
tick,0x7ffdf681f424,52950364,0,0x0,8
tick,0x7ffdf681f424,52952356,0,0x0,8
tick,0x7ffdf681f424,52959393,0,0x0,8
tick,0x7ffdf681f424,52968791,0,0x0,8
tick,0x7ffdf681f424,52971833,0,0x0,8
tick,0x7ffdf681f424,52973305,0,0x0,8
tick,0x7ffdf681f424,52975300,0,0x0,8
tick,0x7ffdf681f424,52977376,0,0x0,8
tick,0x7ffdf681f424,52979289,0,0x0,8
tick,0x7ffdf681f424,52981326,0,0x0,8
tick,0x7ffdf681f424,52983303,0,0x0,8
tick,0x7ffdf681f424,52985272,0,0x0,8
tick,0x7ffdf681f424,52987260,0,0x0,8
tick,0x7ffdf681f424,52989259,0,0x0,8
tick,0x7ffdf681f424,52991251,0,0x0,8
tick,0x7ffdf681f424,52993252,0,0x0,8
tick,0x7ffdf681f424,52995244,0,0x0,8
tick,0x7ffdf681f424,52997235,0,0x0,8
tick,0x7ffdf681f424,52999386,0,0x0,8
tick,0x7ffdf681f424,53001492,0,0x0,8
tick,0x7ffdf681f424,53003231,0,0x0,8
tick,0x7ffdf681f424,53008922,0,0x0,8
tick,0x7ffdf681f424,53010392,0,0x0,8
tick,0x7ffdf681f424,53012470,0,0x0,8
tick,0x7ffdf681f424,53014214,0,0x0,8
tick,0x7ffdf681f424,53016188,0,0x0,8
tick,0x7ffdf681f424,53018260,0,0x0,8
tick,0x7ffdf681f424,53020206,0,0x0,8
tick,0x7ffdf681f424,53022184,0,0x0,8
tick,0x7ffdf681f424,53024173,0,0x0,8
tick,0x7ffdf681f424,53026161,0,0x0,8
tick,0x7ffdf681f424,53028154,0,0x0,8
tick,0x7ffdf681f424,53030605,0,0x0,8
tick,0x7ffdf681f424,53032144,0,0x0,8
tick,0x7ffdf681f424,53034137,0,0x0,8
tick,0x7ffdf681f424,53036129,0,0x0,8
tick,0x7ffdf681f424,53038123,0,0x0,8
tick,0x7ffdf681f424,53040132,0,0x0,8
tick,0x7ffdf681f424,53042115,0,0x0,8
tick,0x7ffdf681f424,53044112,0,0x0,8
tick,0x7ffdf681f424,53046113,0,0x0,8
tick,0x7ffdf681f424,53048109,0,0x0,8
tick,0x7ffdf681f424,53050098,0,0x0,8
tick,0x7ffdf681f424,53052095,0,0x0,8
tick,0x7ffdf681f424,53054095,0,0x0,8
tick,0x7ffdf681f424,53056092,0,0x0,8
tick,0x7ffdf681f424,53058080,0,0x0,8
tick,0x7ffdf681f424,53060074,0,0x0,8
tick,0x7ffdf681f424,53062061,0,0x0,8
tick,0x7ffdf681f424,53064053,0,0x0,8
tick,0x7ffdf681f424,53066050,0,0x0,8
tick,0x7ffdf681f424,53068659,0,0x0,8
tick,0x7ffdf681f424,53081610,0,0x0,8
tick,0x7ffdf681f424,53083014,0,0x0,8
tick,0x7ffdf681f424,53102218,0,0x0,8
tick,0x7ffdf681f424,53103971,0,0x0,8
tick,0x7ffdf681f424,53105960,0,0x0,8
tick,0x7ffdf681f424,53107969,0,0x0,8
tick,0x7ffdf681f424,53110149,0,0x0,8
tick,0x7ffdf681f424,53111940,0,0x0,8
tick,0x7ffdf681f424,53114037,0,0x0,8
tick,0x7ffdf681f424,53115927,0,0x0,8
tick,0x7ffdf681f424,53117916,0,0x0,8
tick,0x7ffdf681f424,53119910,0,0x0,8
tick,0x7ffdf681f424,53121906,0,0x0,8
tick,0x7ffdf681f424,53123913,0,0x0,8
tick,0x7ffdf681f424,53125891,0,0x0,8
tick,0x7ffdf681f424,53127885,0,0x0,8
tick,0x7ffdf681f424,53129883,0,0x0,8
tick,0x7ffdf681f424,53131880,0,0x0,8
tick,0x7ffdf681f424,53133872,0,0x0,8
tick,0x7ffdf681f424,53135863,0,0x0,8
tick,0x7ffdf681f424,53137862,0,0x0,8
tick,0x7ffdf681f424,53139854,0,0x0,8
tick,0x7ffdf681f424,53141849,0,0x0,8
tick,0x7ffdf681f424,53143841,0,0x0,8
tick,0x7ffdf681f424,53145845,0,0x0,8
tick,0x7ffdf681f424,53147833,0,0x0,8
tick,0x7ffdf681f424,53149831,0,0x0,8
tick,0x7ffdf681f424,53152052,0,0x0,8
tick,0x7ffdf681f424,53162828,0,0x0,8
tick,0x7ffdf681f424,53164790,0,0x0,8
tick,0x7ffdf681f424,53166845,0,0x0,8
tick,0x7ffdf681f424,53168813,0,0x0,8
tick,0x7ffdf681f424,53171131,0,0x0,8
tick,0x7ffdf681f424,53172771,0,0x0,8
tick,0x7ffdf681f424,53174821,0,0x0,8
tick,0x7ffdf681f424,53176775,0,0x0,8
tick,0x7ffdf681f424,53178814,0,0x0,8
tick,0x7ffdf681f424,53180746,0,0x0,8
tick,0x7ffdf681f424,53182744,0,0x0,8
tick,0x7ffdf681f424,53184746,0,0x0,8
tick,0x7ffdf681f424,53186728,0,0x0,8
tick,0x7ffdf681f424,53188723,0,0x0,8
tick,0x7ffdf681f424,53190729,0,0x0,8
tick,0x7ffdf681f424,53192719,0,0x0,8
tick,0x7ffdf681f424,53197185,0,0x0,8
tick,0x7ffdf681f424,53197250,0,0x0,8
tick,0x7ffdf681f424,53199111,0,0x0,8
tick,0x7ffdf681f424,53211990,0,0x0,8
tick,0x7ffdf681f424,53213661,0,0x0,8
tick,0x7ffdf681f424,53215654,0,0x0,8
tick,0x7ffdf681f424,53217967,0,0x0,8
tick,0x7ffdf681f424,53219757,0,0x0,8
tick,0x7ffdf681f424,53221686,0,0x0,8
tick,0x7ffdf681f424,53223669,0,0x0,8
tick,0x7ffdf681f424,53225627,0,0x0,8
tick,0x7ffdf681f424,53227621,0,0x0,8
tick,0x7ffdf681f424,53243411,0,0x0,8
tick,0x7ffdf681f424,53243531,0,0x0,8
tick,0x7ffdf681f424,53244578,0,0x0,8
tick,0x7ffdf681f424,53246572,0,0x0,8
tick,0x7ffdf681f424,53248831,0,0x0,8
tick,0x7ffdf681f424,53250561,0,0x0,8
tick,0x7ffdf681f424,53252629,0,0x0,8
tick,0x7ffdf681f424,53254550,0,0x0,8
tick,0x7ffdf681f424,53256542,0,0x0,8
tick,0x7ffdf681f424,53258539,0,0x0,8
tick,0x7ffdf681f424,53260529,0,0x0,8
tick,0x7ffdf681f424,53262531,0,0x0,8
tick,0x7ffdf681f424,53264527,0,0x0,8
tick,0x7ffdf681f424,53266513,0,0x0,8
tick,0x7ffdf681f424,53268508,0,0x0,8
tick,0x7ffdf681f424,53270507,0,0x0,8
tick,0x7ffdf681f424,53272497,0,0x0,8
tick,0x7ffdf681f424,53274491,0,0x0,8
tick,0x7ffdf681f424,53276501,0,0x0,8
tick,0x7ffdf681f424,53278486,0,0x0,8
tick,0x7ffdf681f424,53280482,0,0x0,8
tick,0x7ffdf681f424,53282485,0,0x0,8
tick,0x7ffdf681f424,53284499,0,0x0,8
tick,0x7ffdf681f424,53286465,0,0x0,8
tick,0x7ffdf681f424,53288474,0,0x0,8
tick,0x7ffdf681f424,53302823,0,0x0,8
tick,0x7ffdf681f424,53304431,0,0x0,8
tick,0x7ffdf681f424,53306519,0,0x0,8
tick,0x7ffdf681f424,53308575,0,0x0,8
tick,0x7ffdf681f424,53310422,0,0x0,8
tick,0x7ffdf681f424,53312662,0,0x0,8
tick,0x7ffdf681f424,53314394,0,0x0,8
tick,0x7ffdf681f424,53316382,0,0x0,8
tick,0x7ffdf681f424,53318494,0,0x0,8
tick,0x7ffdf681f424,53320875,0,0x0,8
tick,0x7ffdf681f424,53322379,0,0x0,8
tick,0x7ffdf681f424,53333703,0,0x0,8
tick,0x7ffdf681f424,53335337,0,0x0,8
tick,0x7ffdf681f424,53337333,0,0x0,8
tick,0x7ffdf681f424,53339331,0,0x0,8
tick,0x7ffdf681f424,53341391,0,0x0,8
tick,0x7ffdf681f424,53343528,0,0x0,8
tick,0x7ffdf681f424,53345337,0,0x0,8
tick,0x7ffdf681f424,53347305,0,0x0,8
tick,0x7ffdf681f424,53349295,0,0x0,8
tick,0x7ffdf681f424,53351289,0,0x0,8
tick,0x7ffdf681f424,53353288,0,0x0,8
tick,0x7ffdf681f424,53355296,0,0x0,8
tick,0x7ffdf681f424,53357273,0,0x0,8
tick,0x7ffdf681f424,53359268,0,0x0,8
tick,0x7ffdf681f424,53361287,0,0x0,8
tick,0x7ffdf681f424,53363256,0,0x0,8
tick,0x7ffdf681f424,53365256,0,0x0,8
tick,0x7ffdf681f424,53368916,0,0x0,8
tick,0x7ffdf681f424,53374693,0,0x0,8
tick,0x7ffdf681f424,53384551,0,0x0,8
tick,0x7ffdf681f424,53386210,0,0x0,8
tick,0x7ffdf681f424,53389725,0,0x0,8
tick,0x7ffdf681f424,53390218,0,0x0,8
tick,0x7ffdf681f424,53392203,0,0x0,8
tick,0x7ffdf681f424,53394175,0,0x0,8
tick,0x7ffdf681f424,53396168,0,0x0,8
tick,0x7ffdf681f424,53398167,0,0x0,8
tick,0x7ffdf681f424,53400157,0,0x0,8
tick,0x7ffdf681f424,53402152,0,0x0,8
tick,0x7ffdf681f424,53404149,0,0x0,8
tick,0x7ffdf681f424,53406163,0,0x0,8
tick,0x7ffdf681f424,53408155,0,0x0,8
tick,0x7ffdf681f424,53410140,0,0x0,8
tick,0x7ffdf681f424,53412133,0,0x0,8
tick,0x7ffdf681f424,53414192,0,0x0,8
tick,0x7ffdf681f424,53416120,0,0x0,8
tick,0x7ffdf681f424,53418112,0,0x0,8
tick,0x7ffdf681f424,53420107,0,0x0,8
tick,0x7ffdf681f424,53422113,0,0x0,8
tick,0x7ffdf681f424,53438571,0,0x0,8
tick,0x7ffdf681f424,53440055,0,0x0,8
tick,0x7ffdf681f424,53442047,0,0x0,8
tick,0x7ffdf681f424,53444043,0,0x0,8
tick,0x7ffdf681f424,53446182,0,0x0,8
tick,0x7ffdf681f424,53463377,0,0x0,8
tick,0x7ffdf681f424,53464998,0,0x0,8
tick,0x7ffdf681f424,53466988,0,0x0,8
tick,0x7ffdf681f424,53469036,0,0x0,8
tick,0x7ffdf681f424,53470985,0,0x0,8
tick,0x7ffdf681f424,53472970,0,0x0,8
tick,0x7ffdf681f424,53474966,0,0x0,8
tick,0x7ffdf681f424,53476976,0,0x0,8
tick,0x7ffdf681f424,53478955,0,0x0,8
tick,0x7ffdf681f424,53480944,0,0x0,8
tick,0x7ffdf681f424,53482964,0,0x0,8
tick,0x7ffdf681f424,53484934,0,0x0,8
tick,0x7ffdf681f424,53486925,0,0x0,8
tick,0x7ffdf681f424,53488984,0,0x0,8
tick,0x7ffdf681f424,53490916,0,0x0,8
tick,0x7ffdf681f424,53492923,0,0x0,8
tick,0x7ffdf681f424,53494904,0,0x0,8
tick,0x7ffdf681f424,53496936,0,0x0,8
tick,0x7ffdf681f424,53498901,0,0x0,8
tick,0x7ffdf681f424,53500897,0,0x0,8
tick,0x7ffdf681f424,53502926,0,0x0,8
tick,0x7ffdf681f424,53504879,0,0x0,8
tick,0x7ffdf681f424,53506911,0,0x0,8
tick,0x7ffdf681f424,53508869,0,0x0,8
tick,0x7ffdf681f424,53510866,0,0x0,8
tick,0x7ffdf681f424,53513469,0,0x0,8
tick,0x7ffdf681f424,53516540,0,0x0,8
tick,0x7ffdf681f424,53526803,0,0x0,8
tick,0x7ffdf681f424,53528822,0,0x0,8
tick,0x7ffdf681f424,53530854,0,0x0,8
tick,0x7ffdf681f424,53534358,0,0x0,8
tick,0x7ffdf681f424,53535828,0,0x0,8
tick,0x7ffdf681f424,53537860,0,0x0,8
tick,0x7ffdf681f424,53542773,0,0x0,8
tick,0x7ffdf681f424,53544829,0,0x0,8
tick,0x7ffdf681f424,53553301,0,0x0,8
tick,0x7ffdf681f424,53554746,0,0x0,8
tick,0x7ffdf681f424,53556786,0,0x0,8
tick,0x7ffdf681f424,53559382,0,0x0,8
tick,0x7ffdf681f424,53560964,0,0x0,8
tick,0x7ffdf681f424,53562775,0,0x0,8
tick,0x7ffdf681f424,53564745,0,0x0,8
tick,0x7ffdf681f424,53566762,0,0x0,8
tick,0x7ffdf681f424,53568705,0,0x0,8
tick,0x7ffdf681f424,53570703,0,0x0,8
tick,0x7ffdf681f424,53572697,0,0x0,8
tick,0x7ffdf681f424,53574697,0,0x0,8
tick,0x7ffdf681f424,53576700,0,0x0,8
tick,0x7ffdf681f424,53578684,0,0x0,8
tick,0x7ffdf681f424,53580694,0,0x0,8
tick,0x7ffdf681f424,53582707,0,0x0,8
tick,0x7ffdf681f424,53584668,0,0x0,8
tick,0x7ffdf681f424,53586662,0,0x0,8
tick,0x7ffdf681f424,53588659,0,0x0,8
tick,0x7ffdf681f424,53590651,0,0x0,8
tick,0x7ffdf681f424,53592647,0,0x0,8
tick,0x7ffdf681f424,53594639,0,0x0,8
tick,0x7ffdf681f424,53608735,0,0x0,8
tick,0x7ffdf681f424,53610597,0,0x0,8
tick,0x7ffdf681f424,53612662,0,0x0,8
tick,0x7ffdf681f424,53614640,0,0x0,8
tick,0x7ffdf681f424,53616587,0,0x0,8
tick,0x7ffdf681f424,53618575,0,0x0,8
tick,0x7ffdf681f424,53620567,0,0x0,8
tick,0x7ffdf681f424,53622712,0,0x0,8
tick,0x7ffdf681f424,53624561,0,0x0,8
tick,0x7ffdf681f424,53626563,0,0x0,8
tick,0x7ffdf681f424,53628550,0,0x0,8
tick,0x7ffdf681f424,53630556,0,0x0,8
tick,0x7ffdf681f424,53632539,0,0x0,8
tick,0x7ffdf681f424,53634532,0,0x0,8
tick,0x7ffdf681f424,53636525,0,0x0,8
tick,0x7ffdf681f424,53638518,0,0x0,8
tick,0x7ffdf681f424,53640521,0,0x0,8
tick,0x7ffdf681f424,53642513,0,0x0,8
tick,0x7ffdf681f424,53644507,0,0x0,8
tick,0x7ffdf681f424,53646508,0,0x0,8
tick,0x7ffdf681f424,53648502,0,0x0,8
tick,0x7ffdf681f424,53650491,0,0x0,8
tick,0x7ffdf681f424,53652484,0,0x0,8
tick,0x7ffdf681f424,53654477,0,0x0,8
tick,0x7ffdf681f424,53656476,0,0x0,8
tick,0x7ffdf681f424,53658465,0,0x0,8
tick,0x7ffdf681f424,53660484,0,0x0,8
tick,0x7ffdf681f424,53667605,0,0x0,8
tick,0x7ffdf681f424,53680129,0,0x0,8
tick,0x7ffdf681f424,53681422,0,0x0,8
tick,0x7ffdf681f424,53683402,0,0x0,8
tick,0x7ffdf681f424,53685429,0,0x0,8
tick,0x7ffdf681f424,53698376,0,0x0,8
tick,0x7ffdf681f424,53698414,0,0x0,8
tick,0x7ffdf681f424,53700381,0,0x0,8
tick,0x7ffdf681f424,53708289,0,0x0,8
tick,0x7ffdf681f424,53709785,0,0x0,8
tick,0x7ffdf681f424,53711353,0,0x0,8
tick,0x7ffdf681f424,53713333,0,0x0,8
tick,0x7ffdf681f424,53715327,0,0x0,8
tick,0x7ffdf681f424,53717311,0,0x0,8
tick,0x7ffdf681f424,53719312,0,0x0,8
tick,0x7ffdf681f424,53721303,0,0x0,8
tick,0x7ffdf681f424,53723298,0,0x0,8
tick,0x7ffdf681f424,53725296,0,0x0,8
tick,0x7ffdf681f424,53727293,0,0x0,8
tick,0x7ffdf681f424,53729276,0,0x0,8
tick,0x7ffdf681f424,53731295,0,0x0,8
tick,0x7ffdf681f424,53733265,0,0x0,8
tick,0x7ffdf681f424,53735260,0,0x0,8
tick,0x7ffdf681f424,53737254,0,0x0,8
tick,0x7ffdf681f424,53739252,0,0x0,8
tick,0x7ffdf681f424,53741262,0,0x0,8
tick,0x7ffdf681f424,53743247,0,0x0,8
tick,0x7ffdf681f424,53745269,0,0x0,8
tick,0x7ffdf681f424,53747261,0,0x0,8
tick,0x7ffdf681f424,53749305,0,0x0,8
tick,0x7ffdf681f424,53751225,0,0x0,8
tick,0x7ffdf681f424,53753236,0,0x0,8
tick,0x7ffdf681f424,53755215,0,0x0,8
tick,0x7ffdf681f424,53759774,0,0x0,8
tick,0x7ffdf681f424,53768238,0,0x0,8
tick,0x7ffdf681f424,53770183,0,0x0,8
tick,0x7ffdf681f424,53772175,0,0x0,8
tick,0x7ffdf681f424,53774167,0,0x0,8
tick,0x7ffdf681f424,53776236,0,0x0,8
tick,0x7ffdf681f424,53778291,0,0x0,8
tick,0x7ffdf681f424,53780148,0,0x0,8
tick,0x7ffdf681f424,53782156,0,0x0,8
tick,0x7ffdf681f424,53784132,0,0x0,8
tick,0x7ffdf681f424,53786142,0,0x0,8
tick,0x7ffdf681f424,53788124,0,0x0,8
tick,0x7ffdf681f424,53790123,0,0x0,8
tick,0x7ffdf681f424,53792113,0,0x0,8
tick,0x7ffdf681f424,53794107,0,0x0,8
tick,0x7ffdf681f424,53808834,0,0x0,8
tick,0x7ffdf681f424,53810064,0,0x0,8
tick,0x7ffdf681f424,53812065,0,0x0,8
tick,0x7ffdf681f424,53814133,0,0x0,8
tick,0x7ffdf681f424,53816110,0,0x0,8
tick,0x7ffdf681f424,53818103,0,0x0,8
tick,0x7ffdf681f424,53820084,0,0x0,8
tick,0x7ffdf681f424,53822047,0,0x0,8
tick,0x7ffdf681f424,53824025,0,0x0,8
tick,0x7ffdf681f424,53826034,0,0x0,8
tick,0x7ffdf681f424,53828015,0,0x0,8
tick,0x7ffdf681f424,53830010,0,0x0,8
tick,0x7ffdf681f424,53832004,0,0x0,8
tick,0x7ffdf681f424,53833998,0,0x0,8
tick,0x7ffdf681f424,53835991,0,0x0,8
tick,0x7ffdf681f424,53849181,0,0x0,8
tick,0x7ffdf681f424,53850954,0,0x0,8
tick,0x7ffdf681f424,53852967,0,0x0,8
tick,0x7ffdf681f424,53854977,0,0x0,8
tick,0x7ffdf681f424,53857046,0,0x0,8
tick,0x7ffdf681f424,53858932,0,0x0,8
tick,0x7ffdf681f424,53860926,0,0x0,8
tick,0x7ffdf681f424,53862919,0,0x0,8
tick,0x7ffdf681f424,53864916,0,0x0,8
tick,0x7ffdf681f424,53866925,0,0x0,8
tick,0x7ffdf681f424,53868922,0,0x0,8
tick,0x7ffdf681f424,53870927,0,0x0,8
tick,0x7ffdf681f424,53872898,0,0x0,8
tick,0x7ffdf681f424,53874891,0,0x0,8
tick,0x7ffdf681f424,53876906,0,0x0,8
tick,0x7ffdf681f424,53878883,0,0x0,8
tick,0x7ffdf681f424,53880873,0,0x0,8
tick,0x7ffdf681f424,53882877,0,0x0,8
tick,0x7ffdf681f424,53884862,0,0x0,8
tick,0x7ffdf681f424,53886856,0,0x0,8
tick,0x7ffdf681f424,53888855,0,0x0,8
tick,0x7ffdf681f424,53890853,0,0x0,8
tick,0x7ffdf681f424,53894464,0,0x0,8
tick,0x7ffdf681f424,53906462,0,0x0,8
tick,0x7ffdf681f424,53907802,0,0x0,8
tick,0x7ffdf681f424,53909808,0,0x0,8
tick,0x7ffdf681f424,53911824,0,0x0,8
tick,0x7ffdf681f424,53913793,0,0x0,8
tick,0x7ffdf681f424,53915788,0,0x0,8
tick,0x7ffdf681f424,53917776,0,0x0,8
tick,0x7ffdf681f424,53919770,0,0x0,8
tick,0x7ffdf681f424,53921766,0,0x0,8
tick,0x7ffdf681f424,53923760,0,0x0,8
tick,0x7ffdf681f424,53925759,0,0x0,8
tick,0x7ffdf681f424,53927753,0,0x0,8
tick,0x7ffdf681f424,53929751,0,0x0,8
tick,0x7ffdf681f424,53932014,0,0x0,8
tick,0x7ffdf681f424,53933737,0,0x0,8
tick,0x7ffdf681f424,53935730,0,0x0,8
tick,0x7ffdf681f424,53937728,0,0x0,8
tick,0x7ffdf681f424,53941632,0,0x0,8
tick,0x7ffdf681f424,53946138,0,0x0,8
tick,0x7ffdf681f424,53956449,0,0x0,8
tick,0x7ffdf681f424,53957675,0,0x0,8
tick,0x7ffdf681f424,53959675,0,0x0,8
tick,0x7ffdf681f424,53961690,0,0x0,8
tick,0x7ffdf681f424,53963761,0,0x0,8
tick,0x7ffdf681f424,53965651,0,0x0,8
tick,0x7ffdf681f424,53967715,0,0x0,8
tick,0x7ffdf681f424,53969636,0,0x0,8
tick,0x7ffdf681f424,53971632,0,0x0,8
tick,0x7ffdf681f424,53981499,0,0x0,8
tick,0x7ffdf681f424,53989209,0,0x0,8
tick,0x7ffdf681f424,53990581,0,0x0,8
tick,0x7ffdf681f424,53992578,0,0x0,8
tick,0x7ffdf681f424,53994576,0,0x0,8
tick,0x7ffdf681f424,53996565,0,0x0,8
tick,0x7ffdf681f424,53998770,0,0x0,8
tick,0x7ffdf681f424,54000603,0,0x0,8
tick,0x7ffdf681f424,54002865,0,0x0,8
tick,0x7ffdf681f424,54004552,0,0x0,8
tick,0x7ffdf681f424,54006555,0,0x0,8
tick,0x7ffdf681f424,54008534,0,0x0,8
tick,0x7ffdf681f424,54010533,0,0x0,8
tick,0x7ffdf681f424,54012519,0,0x0,8
tick,0x7ffdf681f424,54014518,0,0x0,8
tick,0x7ffdf681f424,54016511,0,0x0,8
tick,0x7ffdf681f424,54018504,0,0x0,8
tick,0x7ffdf681f424,54020523,0,0x0,8
tick,0x7ffdf681f424,54022589,0,0x0,8
tick,0x7ffdf681f424,54024645,0,0x0,8
tick,0x7ffdf681f424,54036997,0,0x0,8
tick,0x7ffdf681f424,54038454,0,0x0,8
tick,0x7ffdf681f424,54040448,0,0x0,8
tick,0x7ffdf681f424,54042470,0,0x0,8
tick,0x7ffdf681f424,54044509,0,0x0,8
tick,0x7ffdf681f424,54047444,0,0x0,8
tick,0x7ffdf681f424,54048810,0,0x0,8
tick,0x7ffdf681f424,54050420,0,0x0,8
tick,0x7ffdf681f424,54052455,0,0x0,8
tick,0x7ffdf681f424,54054411,0,0x0,8
tick,0x7ffdf681f424,54056405,0,0x0,8
tick,0x7ffdf681f424,54058410,0,0x0,8
tick,0x7ffdf681f424,54060397,0,0x0,8
tick,0x7ffdf681f424,54062388,0,0x0,8
tick,0x7ffdf681f424,54064382,0,0x0,8
tick,0x7ffdf681f424,54066379,0,0x0,8
tick,0x7ffdf681f424,54068369,0,0x0,8
tick,0x7ffdf681f424,54070366,0,0x0,8
tick,0x7ffdf681f424,54072363,0,0x0,8
tick,0x7ffdf681f424,54080401,0,0x0,8
tick,0x7ffdf681f424,54088139,0,0x0,8
tick,0x7ffdf681f424,54089316,0,0x0,8
tick,0x7ffdf681f424,54091314,0,0x0,8
tick,0x7ffdf681f424,54093365,0,0x0,8
tick,0x7ffdf681f424,54095343,0,0x0,8
tick,0x7ffdf681f424,54097367,0,0x0,8
tick,0x7ffdf681f424,54099292,0,0x0,8
tick,0x7ffdf681f424,54101285,0,0x0,8
tick,0x7ffdf681f424,54103280,0,0x0,8
tick,0x7ffdf681f424,54105278,0,0x0,8
tick,0x7ffdf681f424,54107273,0,0x0,8
tick,0x7ffdf681f424,54109265,0,0x0,8
tick,0x7ffdf681f424,54111259,0,0x0,8
tick,0x7ffdf681f424,54113250,0,0x0,8
tick,0x7ffdf681f424,54115252,0,0x0,8
tick,0x7ffdf681f424,54117244,0,0x0,8
tick,0x7ffdf681f424,54119236,0,0x0,8
tick,0x7ffdf681f424,54121233,0,0x0,8
tick,0x7ffdf681f424,54123242,0,0x0,8
tick,0x7ffdf681f424,54125218,0,0x0,8
tick,0x7ffdf681f424,54127222,0,0x0,8
tick,0x7ffdf681f424,54129281,0,0x0,8
tick,0x7ffdf681f424,54143501,0,0x0,8
tick,0x7ffdf681f424,54145171,0,0x0,8
tick,0x7ffdf681f424,54147163,0,0x0,8
tick,0x7ffdf681f424,54150640,0,0x0,8
tick,0x7ffdf681f424,54161714,0,0x0,8
tick,0x7ffdf681f424,54163123,0,0x0,8
tick,0x7ffdf681f424,54165122,0,0x0,8
tick,0x7ffdf681f424,54167421,0,0x0,8
tick,0x7ffdf681f424,54169254,0,0x0,8
tick,0x7ffdf681f424,54171371,0,0x0,8
tick,0x7ffdf681f424,54173177,0,0x0,8
tick,0x7ffdf681f424,54175101,0,0x0,8
tick,0x7ffdf681f424,54177087,0,0x0,8
tick,0x7ffdf681f424,54179077,0,0x0,8
tick,0x7ffdf681f424,54181070,0,0x0,8
tick,0x7ffdf681f424,54183076,0,0x0,8
tick,0x7ffdf681f424,54185063,0,0x0,8
tick,0x7ffdf681f424,54187057,0,0x0,8
tick,0x7ffdf681f424,54189063,0,0x0,8
tick,0x7ffdf681f424,54191044,0,0x0,8
tick,0x7ffdf681f424,54193041,0,0x0,8
tick,0x7ffdf681f424,54195043,0,0x0,8
tick,0x7ffdf681f424,54197069,0,0x0,8
tick,0x7ffdf681f424,54199023,0,0x0,8
tick,0x7ffdf681f424,54201015,0,0x0,8
tick,0x7ffdf681f424,54203037,0,0x0,8
tick,0x7ffdf681f424,54205018,0,0x0,8
tick,0x7ffdf681f424,54207002,0,0x0,8
tick,0x7ffdf681f424,54208992,0,0x0,8
tick,0x7ffdf681f424,54210992,0,0x0,8
tick,0x7ffdf681f424,54212985,0,0x0,8
tick,0x7ffdf681f424,54214980,0,0x0,8
tick,0x7ffdf681f424,54216974,0,0x0,8
tick,0x7ffdf681f424,54231108,0,0x0,8
tick,0x7ffdf681f424,54232975,0,0x0,8
tick,0x7ffdf681f424,54235242,0,0x0,8
tick,0x7ffdf681f424,54237258,0,0x0,8
tick,0x7ffdf681f424,54239040,0,0x0,8
tick,0x7ffdf681f424,54241253,0,0x0,8
tick,0x7ffdf681f424,54242908,0,0x0,8
tick,0x7ffdf681f424,54244905,0,0x0,8
tick,0x7ffdf681f424,54246913,0,0x0,8
tick,0x7ffdf681f424,54248892,0,0x0,8
tick,0x7ffdf681f424,54250889,0,0x0,8
tick,0x7ffdf681f424,54252880,0,0x0,8
tick,0x7ffdf681f424,54254873,0,0x0,8
tick,0x7ffdf681f424,54259192,0,0x0,8
tick,0x7ffdf681f424,54261645,0,0x0,8
tick,0x7ffdf681f424,54270710,0,0x0,8
tick,0x7ffdf681f424,54272176,0,0x0,8
tick,0x7ffdf681f424,54273837,0,0x0,8
tick,0x7ffdf681f424,54275851,0,0x0,8
tick,0x7ffdf681f424,54277951,0,0x0,8
tick,0x7ffdf681f424,54279958,0,0x0,8
tick,0x7ffdf681f424,54281866,0,0x0,8
tick,0x7ffdf681f424,54283814,0,0x0,8
tick,0x7ffdf681f424,54285795,0,0x0,8
tick,0x7ffdf681f424,54287790,0,0x0,8
tick,0x7ffdf681f424,54289777,0,0x0,8
tick,0x7ffdf681f424,54291780,0,0x0,8
tick,0x7ffdf681f424,54293794,0,0x0,8
tick,0x7ffdf681f424,54295772,0,0x0,8
tick,0x7ffdf681f424,54297756,0,0x0,8
tick,0x7ffdf681f424,54299755,0,0x0,8
tick,0x7ffdf681f424,54301744,0,0x0,8
tick,0x7ffdf681f424,54303742,0,0x0,8
tick,0x7ffdf681f424,54307417,0,0x0,8
tick,0x7ffdf681f424,54320816,0,0x0,8
tick,0x7ffdf681f424,54322696,0,0x0,8
tick,0x7ffdf681f424,54324695,0,0x0,8
tick,0x7ffdf681f424,54326951,0,0x0,8
tick,0x7ffdf681f424,54328686,0,0x0,8
tick,0x7ffdf681f424,54330875,0,0x0,8
tick,0x7ffdf681f424,54332673,0,0x0,8
tick,0x7ffdf681f424,54334666,0,0x0,8
tick,0x7ffdf681f424,54336661,0,0x0,8
tick,0x7ffdf681f424,54338654,0,0x0,8
tick,0x7ffdf681f424,54340647,0,0x0,8
tick,0x7ffdf681f424,54342640,0,0x0,8
tick,0x7ffdf681f424,54344727,0,0x0,8
tick,0x7ffdf681f424,54346630,0,0x0,8
tick,0x7ffdf681f424,54348631,0,0x0,8
tick,0x7ffdf681f424,54350618,0,0x0,8
tick,0x7ffdf681f424,54352615,0,0x0,8
tick,0x7ffdf681f424,54354611,0,0x0,8
tick,0x7ffdf681f424,54356603,0,0x0,8
tick,0x7ffdf681f424,54358637,0,0x0,8
tick,0x7ffdf681f424,54360594,0,0x0,8
tick,0x7ffdf681f424,54362589,0,0x0,8
tick,0x7ffdf681f424,54364590,0,0x0,8
tick,0x7ffdf681f424,54366577,0,0x0,8
tick,0x7ffdf681f424,54379864,0,0x0,8
tick,0x7ffdf681f424,54379905,0,0x0,8
tick,0x7ffdf681f424,54381541,0,0x0,8
tick,0x7ffdf681f424,54383588,0,0x0,8
tick,0x7ffdf681f424,54385548,0,0x0,8
tick,0x7ffdf681f424,54387525,0,0x0,8
tick,0x7ffdf681f424,54389521,0,0x0,8
tick,0x7ffdf681f424,54391541,0,0x0,8
tick,0x7ffdf681f424,54394013,0,0x0,8
tick,0x7ffdf681f424,54399923,0,0x0,8
tick,0x7ffdf681f424,54404448,0,0x0,8
tick,0x7ffdf681f424,54405525,0,0x0,8
tick,0x7ffdf681f424,54407477,0,0x0,8
tick,0x7ffdf681f424,54409461,0,0x0,8
tick,0x7ffdf681f424,54413437,0,0x0,8
tick,0x7ffdf681f424,54413484,0,0x0,8
tick,0x7ffdf681f424,54415451,0,0x0,8
tick,0x7ffdf681f424,54417500,0,0x0,8
tick,0x7ffdf681f424,54419432,0,0x0,8
tick,0x7ffdf681f424,54421437,0,0x0,8
tick,0x7ffdf681f424,54423430,0,0x0,8
tick,0x7ffdf681f424,54425419,0,0x0,8
tick,0x7ffdf681f424,54427411,0,0x0,8
tick,0x7ffdf681f424,54429407,0,0x0,8
tick,0x7ffdf681f424,54431430,0,0x0,8
tick,0x7ffdf681f424,54433402,0,0x0,8
tick,0x7ffdf681f424,54435396,0,0x0,8
tick,0x7ffdf681f424,54437413,0,0x0,8
tick,0x7ffdf681f424,54439389,0,0x0,8
tick,0x7ffdf681f424,54442817,0,0x0,8
tick,0x7ffdf681f424,54454075,0,0x0,8
tick,0x7ffdf681f424,54455340,0,0x0,8
tick,0x7ffdf681f424,54457386,0,0x0,8
tick,0x7ffdf681f424,54459428,0,0x0,8
tick,0x7ffdf681f424,54461438,0,0x0,8
tick,0x7ffdf681f424,54463325,0,0x0,8
tick,0x7ffdf681f424,54465317,0,0x0,8
tick,0x7ffdf681f424,54467304,0,0x0,8
tick,0x7ffdf681f424,54469301,0,0x0,8
tick,0x7ffdf681f424,54471292,0,0x0,8
tick,0x7ffdf681f424,54473290,0,0x0,8
tick,0x7ffdf681f424,54475391,0,0x0,8
tick,0x7ffdf681f424,54477279,0,0x0,8
tick,0x7ffdf681f424,54479273,0,0x0,8
tick,0x7ffdf681f424,54481269,0,0x0,8
tick,0x7ffdf681f424,54483261,0,0x0,8
tick,0x7ffdf681f424,54485293,0,0x0,8
tick,0x7ffdf681f424,54487259,0,0x0,8
tick,0x7ffdf681f424,54489384,0,0x0,8
tick,0x7ffdf681f424,54491273,0,0x0,8
tick,0x7ffdf681f424,54493238,0,0x0,8
tick,0x7ffdf681f424,54497620,0,0x0,8
tick,0x7ffdf681f424,54516430,0,0x0,8
tick,0x7ffdf681f424,54517180,0,0x0,8
tick,0x7ffdf681f424,54519176,0,0x0,8
tick,0x7ffdf681f424,54521236,0,0x0,8
tick,0x7ffdf681f424,54523193,0,0x0,8
tick,0x7ffdf681f424,54530809,0,0x0,8
tick,0x7ffdf681f424,54540943,0,0x0,8
tick,0x7ffdf681f424,54542110,0,0x0,8
tick,0x7ffdf681f424,54544166,0,0x0,8
tick,0x7ffdf681f424,54546117,0,0x0,8
tick,0x7ffdf681f424,54548096,0,0x0,8
tick,0x7ffdf681f424,54550160,0,0x0,8
tick,0x7ffdf681f424,54552108,0,0x0,8
tick,0x7ffdf681f424,54554128,0,0x0,8
tick,0x7ffdf681f424,54556075,0,0x0,8
tick,0x7ffdf681f424,54558397,0,0x0,8
tick,0x7ffdf681f424,54560056,0,0x0,8
tick,0x7ffdf681f424,54562057,0,0x0,8
tick,0x7ffdf681f424,54564116,0,0x0,8
tick,0x7ffdf681f424,54566043,0,0x0,8
tick,0x7ffdf681f424,54568060,0,0x0,8
tick,0x7ffdf681f424,54570030,0,0x0,8
tick,0x7ffdf681f424,54572027,0,0x0,8
tick,0x7ffdf681f424,54574020,0,0x0,8
tick,0x7ffdf681f424,54576015,0,0x0,8
tick,0x7ffdf681f424,54578008,0,0x0,8
tick,0x7ffdf681f424,54580003,0,0x0,8
tick,0x7ffdf681f424,54582001,0,0x0,8
tick,0x7ffdf681f424,54584006,0,0x0,8
tick,0x7ffdf681f424,54585985,0,0x0,8
tick,0x7ffdf681f424,54587980,0,0x0,8
tick,0x7ffdf681f424,54590289,0,0x0,8
tick,0x7ffdf681f424,54592311,0,0x0,8
tick,0x7ffdf681f424,54594032,0,0x0,8
tick,0x7ffdf681f424,54595964,0,0x0,8
tick,0x7ffdf681f424,54597963,0,0x0,8
tick,0x7ffdf681f424,54599951,0,0x0,8
tick,0x7ffdf681f424,54618192,0,0x0,8
tick,0x7ffdf681f424,54619902,0,0x0,8
tick,0x7ffdf681f424,54621931,0,0x0,8
tick,0x7ffdf681f424,54623908,0,0x0,8
tick,0x7ffdf681f424,54625908,0,0x0,8
tick,0x7ffdf681f424,54627896,0,0x0,8
tick,0x7ffdf681f424,54629883,0,0x0,8
tick,0x7ffdf681f424,54631958,0,0x0,8
tick,0x7ffdf681f424,54633954,0,0x0,8
tick,0x7ffdf681f424,54635910,0,0x0,8
tick,0x7ffdf681f424,54637848,0,0x0,8
tick,0x7ffdf681f424,54639848,0,0x0,8
tick,0x7ffdf681f424,54641842,0,0x0,8
tick,0x7ffdf681f424,54643831,0,0x0,8
tick,0x7ffdf681f424,54645830,0,0x0,8
tick,0x7ffdf681f424,54647826,0,0x0,8
tick,0x7ffdf681f424,54649821,0,0x0,8
tick,0x7ffdf681f424,54651814,0,0x0,8
tick,0x7ffdf681f424,54653807,0,0x0,8
tick,0x7ffdf681f424,54655808,0,0x0,8
tick,0x7ffdf681f424,54657798,0,0x0,8
tick,0x7ffdf681f424,54659800,0,0x0,8
tick,0x7ffdf681f424,54661801,0,0x0,8
tick,0x7ffdf681f424,54663807,0,0x0,8
tick,0x7ffdf681f424,54665781,0,0x0,8
tick,0x7ffdf681f424,54667766,0,0x0,8
tick,0x7ffdf681f424,54669764,0,0x0,8
tick,0x7ffdf681f424,54671768,0,0x0,8
tick,0x7ffdf681f424,54673796,0,0x0,8
tick,0x7ffdf681f424,54687479,0,0x0,8
tick,0x7ffdf681f424,54688893,0,0x0,8
tick,0x7ffdf681f424,54690711,0,0x0,8
tick,0x7ffdf681f424,54702486,0,0x0,8
tick,0x7ffdf681f424,54703671,0,0x0,8
tick,0x7ffdf681f424,54705666,0,0x0,8
tick,0x7ffdf681f424,54707669,0,0x0,8
tick,0x7ffdf681f424,54709665,0,0x0,8
tick,0x7ffdf681f424,54711664,0,0x0,8
tick,0x7ffdf681f424,54713654,0,0x0,8
tick,0x7ffdf681f424,54715663,0,0x0,8
tick,0x7ffdf681f424,54717648,0,0x0,8
tick,0x7ffdf681f424,54719724,0,0x0,8
tick,0x7ffdf681f424,54721626,0,0x0,8
tick,0x7ffdf681f424,54723624,0,0x0,8
tick,0x7ffdf681f424,54725617,0,0x0,8
tick,0x7ffdf681f424,54727609,0,0x0,8
tick,0x7ffdf681f424,54729604,0,0x0,8
tick,0x7ffdf681f424,54731600,0,0x0,8
tick,0x7ffdf681f424,54733594,0,0x0,8
tick,0x7ffdf681f424,54735602,0,0x0,8
tick,0x7ffdf681f424,54737589,0,0x0,8
tick,0x7ffdf681f424,54739617,0,0x0,8
tick,0x7ffdf681f424,54741574,0,0x0,8
tick,0x7ffdf681f424,54743566,0,0x0,8
tick,0x7ffdf681f424,54745564,0,0x0,8
tick,0x7ffdf681f424,54747556,0,0x0,8
tick,0x7ffdf681f424,54749551,0,0x0,8
tick,0x7ffdf681f424,54751545,0,0x0,8
tick,0x7ffdf681f424,54753537,0,0x0,8
tick,0x7ffdf681f424,54755535,0,0x0,8
tick,0x7ffdf681f424,54757530,0,0x0,8
tick,0x7ffdf681f424,54759523,0,0x0,8
tick,0x7ffdf681f424,54761529,0,0x0,8
tick,0x7ffdf681f424,54764623,0,0x0,8
tick,0x7ffdf681f424,54775626,0,0x0,8
tick,0x7ffdf681f424,54777505,0,0x0,8
tick,0x7ffdf681f424,54779486,0,0x0,8
tick,0x7ffdf681f424,54781536,0,0x0,8
tick,0x7ffdf681f424,54783707,0,0x0,8
tick,0x7ffdf681f424,54785503,0,0x0,8
tick,0x7ffdf681f424,54787459,0,0x0,8
tick,0x7ffdf681f424,54789587,0,0x0,8
tick,0x7ffdf681f424,54791647,0,0x0,8
tick,0x7ffdf681f424,54799429,0,0x0,8
tick,0x7ffdf681f424,54801418,0,0x0,8
tick,0x7ffdf681f424,54804190,0,0x0,8
tick,0x7ffdf681f424,54805406,0,0x0,8
tick,0x7ffdf681f424,54807398,0,0x0,8
tick,0x7ffdf681f424,54809524,0,0x0,8
tick,0x7ffdf681f424,54811403,0,0x0,8
tick,0x7ffdf681f424,54813414,0,0x0,8
tick,0x7ffdf681f424,54815386,0,0x0,8
tick,0x7ffdf681f424,54817368,0,0x0,8
tick,0x7ffdf681f424,54819366,0,0x0,8
tick,0x7ffdf681f424,54821362,0,0x0,8
tick,0x7ffdf681f424,54823353,0,0x0,8
tick,0x7ffdf681f424,54825366,0,0x0,8
tick,0x7ffdf681f424,54827345,0,0x0,8
tick,0x7ffdf681f424,54829336,0,0x0,8
tick,0x7ffdf681f424,54831340,0,0x0,8
tick,0x7ffdf681f424,54833325,0,0x0,8
tick,0x7ffdf681f424,54835318,0,0x0,8
tick,0x7ffdf681f424,54837310,0,0x0,8
tick,0x7ffdf681f424,54839309,0,0x0,8
tick,0x7ffdf681f424,54841302,0,0x0,8
tick,0x7ffdf681f424,54843300,0,0x0,8
tick,0x7ffdf681f424,54845290,0,0x0,8
tick,0x7ffdf681f424,54847293,0,0x0,8
tick,0x7ffdf681f424,54849287,0,0x0,8
tick,0x7ffdf681f424,54856803,0,0x0,8
tick,0x7ffdf681f424,54858330,0,0x0,8
tick,0x7ffdf681f424,54860264,0,0x0,8
tick,0x7ffdf681f424,54864729,0,0x0,8
tick,0x7ffdf681f424,54866251,0,0x0,8
tick,0x7ffdf681f424,54868237,0,0x0,8
tick,0x7ffdf681f424,54870338,0,0x0,8
tick,0x7ffdf681f424,54872370,0,0x0,8
tick,0x7ffdf681f424,54874690,0,0x0,8
tick,0x7ffdf681f424,54876310,0,0x0,8
tick,0x7ffdf681f424,54878217,0,0x0,8
tick,0x7ffdf681f424,54880201,0,0x0,8
tick,0x7ffdf681f424,54882200,0,0x0,8
tick,0x7ffdf681f424,54884190,0,0x0,8
tick,0x7ffdf681f424,54886314,0,0x0,8
tick,0x7ffdf681f424,54888199,0,0x0,8
tick,0x7ffdf681f424,54890176,0,0x0,8
tick,0x7ffdf681f424,54892166,0,0x0,8
tick,0x7ffdf681f424,54894163,0,0x0,8
tick,0x7ffdf681f424,54901629,0,0x0,8
tick,0x7ffdf681f424,54909687,0,0x0,8
tick,0x7ffdf681f424,54911133,0,0x0,8
tick,0x7ffdf681f424,54913145,0,0x0,8
tick,0x7ffdf681f424,54915263,0,0x0,8
tick,0x7ffdf681f424,54917476,0,0x0,8
tick,0x7ffdf681f424,54919106,0,0x0,8
tick,0x7ffdf681f424,54921114,0,0x0,8
tick,0x7ffdf681f424,54923090,0,0x0,8
tick,0x7ffdf681f424,54925098,0,0x0,8
tick,0x7ffdf681f424,54927086,0,0x0,8
tick,0x7ffdf681f424,54929150,0,0x0,8
tick,0x7ffdf681f424,54931066,0,0x0,8
tick,0x7ffdf681f424,54933064,0,0x0,8
tick,0x7ffdf681f424,54935058,0,0x0,8
tick,0x7ffdf681f424,54950617,0,0x0,8
tick,0x7ffdf681f424,54952014,0,0x0,8
tick,0x7ffdf681f424,54954020,0,0x0,8
tick,0x7ffdf681f424,54956170,0,0x0,8
tick,0x7ffdf681f424,54958115,0,0x0,8
tick,0x7ffdf681f424,54960010,0,0x0,8
tick,0x7ffdf681f424,54961985,0,0x0,8
tick,0x7ffdf681f424,54963981,0,0x0,8
tick,0x7ffdf681f424,54965975,0,0x0,8
tick,0x7ffdf681f424,54967967,0,0x0,8
tick,0x7ffdf681f424,54969959,0,0x0,8
tick,0x7ffdf681f424,54971960,0,0x0,8
tick,0x7ffdf681f424,54973957,0,0x0,8
tick,0x7ffdf681f424,54975946,0,0x0,8
tick,0x7ffdf681f424,54977934,0,0x0,8
tick,0x7ffdf681f424,54979933,0,0x0,8
tick,0x7ffdf681f424,54981933,0,0x0,8
tick,0x7ffdf681f424,54983921,0,0x0,8
tick,0x7ffdf681f424,54985918,0,0x0,8
tick,0x7ffdf681f424,54987914,0,0x0,8
tick,0x7ffdf681f424,54989907,0,0x0,8
tick,0x7ffdf681f424,54991904,0,0x0,8
tick,0x7ffdf681f424,54993906,0,0x0,8
tick,0x7ffdf681f424,55009105,0,0x0,8
tick,0x7ffdf681f424,55009862,0,0x0,8
tick,0x7ffdf681f424,55011851,0,0x0,8
tick,0x7ffdf681f424,55014000,0,0x0,8
tick,0x7ffdf681f424,55015846,0,0x0,8
tick,0x7ffdf681f424,55017838,0,0x0,8
tick,0x7ffdf681f424,55019831,0,0x0,8
tick,0x7ffdf681f424,55021888,0,0x0,8
tick,0x7ffdf681f424,55023843,0,0x0,8
tick,0x7ffdf681f424,55025906,0,0x0,8
tick,0x7ffdf681f424,55028105,0,0x0,8
tick,0x7ffdf681f424,55029808,0,0x0,8
tick,0x7ffdf681f424,55031806,0,0x0,8
tick,0x7ffdf681f424,55037363,0,0x0,8
tick,0x7ffdf681f424,55038948,0,0x0,8
tick,0x7ffdf681f424,55040834,0,0x0,8
tick,0x7ffdf681f424,55042774,0,0x0,8
tick,0x7ffdf681f424,55044767,0,0x0,8
tick,0x7ffdf681f424,55046767,0,0x0,8
tick,0x7ffdf681f424,55049002,0,0x0,8
tick,0x7ffdf681f424,55050789,0,0x0,8
tick,0x7ffdf681f424,55053218,0,0x0,8
tick,0x7ffdf681f424,55055609,0,0x0,8
tick,0x7ffdf681f424,55056841,0,0x0,8
tick,0x7ffdf681f424,55058742,0,0x0,8
tick,0x7ffdf681f424,55060719,0,0x0,8
tick,0x7ffdf681f424,55062721,0,0x0,8
tick,0x7ffdf681f424,55064710,0,0x0,8
tick,0x7ffdf681f424,55066702,0,0x0,8
tick,0x7ffdf681f424,55068700,0,0x0,8
tick,0x7ffdf681f424,55070688,0,0x0,8
tick,0x7ffdf681f424,55072710,0,0x0,8
tick,0x7ffdf681f424,55074688,0,0x0,8
tick,0x7ffdf681f424,55084406,0,0x0,8
tick,0x7ffdf681f424,55090416,0,0x0,8
tick,0x7ffdf681f424,55091639,0,0x0,8
tick,0x7ffdf681f424,55093633,0,0x0,8
tick,0x7ffdf681f424,55095656,0,0x0,8
tick,0x7ffdf681f424,55097779,0,0x0,8
tick,0x7ffdf681f424,55099630,0,0x0,8
tick,0x7ffdf681f424,55101682,0,0x0,8
tick,0x7ffdf681f424,55103654,0,0x0,8
tick,0x7ffdf681f424,55105667,0,0x0,8
tick,0x7ffdf681f424,55107595,0,0x0,8
tick,0x7ffdf681f424,55109587,0,0x0,8
tick,0x7ffdf681f424,55111588,0,0x0,8
tick,0x7ffdf681f424,55113580,0,0x0,8
tick,0x7ffdf681f424,55115681,0,0x0,8
tick,0x7ffdf681f424,55117576,0,0x0,8
tick,0x7ffdf681f424,55119568,0,0x0,8
tick,0x7ffdf681f424,55121552,0,0x0,8
tick,0x7ffdf681f424,55123558,0,0x0,8
tick,0x7ffdf681f424,55125552,0,0x0,8
tick,0x7ffdf681f424,55127540,0,0x0,8
tick,0x7ffdf681f424,55129534,0,0x0,8
tick,0x7ffdf681f424,55131530,0,0x0,8
tick,0x7ffdf681f424,55133547,0,0x0,8
tick,0x7ffdf681f424,55135518,0,0x0,8
tick,0x7ffdf681f424,55137588,0,0x0,8
tick,0x7ffdf681f424,55150921,0,0x0,8
tick,0x7ffdf681f424,55152475,0,0x0,8
tick,0x7ffdf681f424,55154477,0,0x0,8
tick,0x7ffdf681f424,55156519,0,0x0,8
tick,0x7ffdf681f424,55158461,0,0x0,8
tick,0x7ffdf681f424,55160535,0,0x0,8
tick,0x7ffdf681f424,55174554,0,0x0,8
tick,0x7ffdf681f424,55176432,0,0x0,8
tick,0x7ffdf681f424,55178466,0,0x0,8
tick,0x7ffdf681f424,55180427,0,0x0,8
tick,0x7ffdf681f424,55182428,0,0x0,8
tick,0x7ffdf681f424,55184388,0,0x0,8
tick,0x7ffdf681f424,55186382,0,0x0,8
tick,0x7ffdf681f424,55188377,0,0x0,8
tick,0x7ffdf681f424,55190378,0,0x0,8
tick,0x7ffdf681f424,55192365,0,0x0,8
tick,0x7ffdf681f424,55194417,0,0x0,8
tick,0x7ffdf681f424,55196363,0,0x0,8
tick,0x7ffdf681f424,55198360,0,0x0,8
tick,0x7ffdf681f424,55200341,0,0x0,8
tick,0x7ffdf681f424,55202343,0,0x0,8
tick,0x7ffdf681f424,55204346,0,0x0,8
tick,0x7ffdf681f424,55206334,0,0x0,8
tick,0x7ffdf681f424,55208331,0,0x0,8
tick,0x7ffdf681f424,55210318,0,0x0,8
tick,0x7ffdf681f424,55212321,0,0x0,8
tick,0x7ffdf681f424,55214307,0,0x0,8
tick,0x7ffdf681f424,55216308,0,0x0,8
tick,0x7ffdf681f424,55218308,0,0x0,8
tick,0x7ffdf681f424,55234046,0,0x0,8
tick,0x7ffdf681f424,55235326,0,0x0,8
tick,0x7ffdf681f424,55237264,0,0x0,8
tick,0x7ffdf681f424,55239255,0,0x0,8
tick,0x7ffdf681f424,55241239,0,0x0,8
tick,0x7ffdf681f424,55243229,0,0x0,8
tick,0x7ffdf681f424,55245239,0,0x0,8
tick,0x7ffdf681f424,55247273,0,0x0,8
tick,0x7ffdf681f424,55249253,0,0x0,8
tick,0x7ffdf681f424,55251256,0,0x0,8
tick,0x7ffdf681f424,55253361,0,0x0,8
tick,0x7ffdf681f424,55255371,0,0x0,8
tick,0x7ffdf681f424,55257218,0,0x0,8
tick,0x7ffdf681f424,55259214,0,0x0,8
tick,0x7ffdf681f424,55261187,0,0x0,8
tick,0x7ffdf681f424,55263211,0,0x0,8
tick,0x7ffdf681f424,55265177,0,0x0,8
tick,0x7ffdf681f424,55267179,0,0x0,8
tick,0x7ffdf681f424,55269165,0,0x0,8
tick,0x7ffdf681f424,55271164,0,0x0,8
tick,0x7ffdf681f424,55273151,0,0x0,8
tick,0x7ffdf681f424,55275175,0,0x0,8
tick,0x7ffdf681f424,55277137,0,0x0,8
tick,0x7ffdf681f424,55279137,0,0x0,8
tick,0x7ffdf681f424,55281135,0,0x0,8
tick,0x7ffdf681f424,55283125,0,0x0,8
tick,0x7ffdf681f424,55285119,0,0x0,8
tick,0x7ffdf681f424,55287122,0,0x0,8
tick,0x7ffdf681f424,55289116,0,0x0,8
tick,0x7ffdf681f424,55291102,0,0x0,8
tick,0x7ffdf681f424,55293095,0,0x0,8
tick,0x7ffdf681f424,55295089,0,0x0,8
tick,0x7ffdf681f424,55297087,0,0x0,8
tick,0x7ffdf681f424,55299082,0,0x0,8
tick,0x7ffdf681f424,55301079,0,0x0,8
tick,0x7ffdf681f424,55303149,0,0x0,8
tick,0x7ffdf681f424,55305190,0,0x0,8
tick,0x7ffdf681f424,55307087,0,0x0,8
tick,0x7ffdf681f424,55309618,0,0x0,8
tick,0x7ffdf681f424,55323560,0,0x0,8
tick,0x7ffdf681f424,55325015,0,0x0,8
tick,0x7ffdf681f424,55327026,0,0x0,8
tick,0x7ffdf681f424,55329447,0,0x0,8
tick,0x7ffdf681f424,55341171,0,0x0,8
tick,0x7ffdf681f424,55342981,0,0x0,8
tick,0x7ffdf681f424,55348766,0,0x0,8
tick,0x7ffdf681f424,55348835,0,0x0,8
tick,0x7ffdf681f424,55349947,0,0x0,8
tick,0x7ffdf681f424,55352086,0,0x0,8
tick,0x7ffdf681f424,55353932,0,0x0,8
tick,0x7ffdf681f424,55355929,0,0x0,8
tick,0x7ffdf681f424,55357948,0,0x0,8
tick,0x7ffdf681f424,55359920,0,0x0,8
tick,0x7ffdf681f424,55361929,0,0x0,8
tick,0x7ffdf681f424,55363938,0,0x0,8
tick,0x7ffdf681f424,55365906,0,0x0,8
tick,0x7ffdf681f424,55367896,0,0x0,8
tick,0x7ffdf681f424,55369905,0,0x0,8
tick,0x7ffdf681f424,55371886,0,0x0,8
tick,0x7ffdf681f424,55373890,0,0x0,8
tick,0x7ffdf681f424,55375878,0,0x0,8
tick,0x7ffdf681f424,55377869,0,0x0,8
tick,0x7ffdf681f424,55379864,0,0x0,8
tick,0x7ffdf681f424,55381858,0,0x0,8
tick,0x7ffdf681f424,55383852,0,0x0,8
tick,0x7ffdf681f424,55385864,0,0x0,8
tick,0x7ffdf681f424,55387839,0,0x0,8
tick,0x7ffdf681f424,55389836,0,0x0,8
tick,0x7ffdf681f424,55395683,0,0x0,8
tick,0x7ffdf681f424,55404430,0,0x0,8
tick,0x7ffdf681f424,55405799,0,0x0,8
tick,0x7ffdf681f424,55407833,0,0x0,8
tick,0x7ffdf681f424,55410431,0,0x0,8
tick,0x7ffdf681f424,55412169,0,0x0,8
tick,0x7ffdf681f424,55414184,0,0x0,8
tick,0x7ffdf681f424,55415772,0,0x0,8
tick,0x7ffdf681f424,55417764,0,0x0,8
tick,0x7ffdf681f424,55419759,0,0x0,8
tick,0x7ffdf681f424,55421751,0,0x0,8
tick,0x7ffdf681f424,55423765,0,0x0,8
tick,0x7ffdf681f424,55425748,0,0x0,8
tick,0x7ffdf681f424,55427735,0,0x0,8
tick,0x7ffdf681f424,55429731,0,0x0,8
tick,0x7ffdf681f424,55431738,0,0x0,8
tick,0x7ffdf681f424,55433722,0,0x0,8
tick,0x7ffdf681f424,55435718,0,0x0,8
tick,0x7ffdf681f424,55437710,0,0x0,8
tick,0x7ffdf681f424,55439710,0,0x0,8
tick,0x7ffdf681f424,55441701,0,0x0,8
tick,0x7ffdf681f424,55443859,0,0x0,8
tick,0x7ffdf681f424,55445711,0,0x0,8
tick,0x7ffdf681f424,55447722,0,0x0,8
tick,0x7ffdf681f424,55449679,0,0x0,8
tick,0x7ffdf681f424,55451671,0,0x0,8
tick,0x7ffdf681f424,55453947,0,0x0,8
tick,0x7ffdf681f424,55457475,0,0x0,8
tick,0x7ffdf681f424,55470273,0,0x0,8
tick,0x7ffdf681f424,55471623,0,0x0,8
tick,0x7ffdf681f424,55473617,0,0x0,8
tick,0x7ffdf681f424,55475655,0,0x0,8
tick,0x7ffdf681f424,55477687,0,0x0,8
tick,0x7ffdf681f424,55479604,0,0x0,8
tick,0x7ffdf681f424,55481669,0,0x0,8
tick,0x7ffdf681f424,55484486,0,0x0,8
tick,0x7ffdf681f424,55497387,0,0x0,8
tick,0x7ffdf681f424,55498547,0,0x0,8
tick,0x7ffdf681f424,55500549,0,0x0,8
tick,0x7ffdf681f424,55502585,0,0x0,8
tick,0x7ffdf681f424,55504553,0,0x0,8
tick,0x7ffdf681f424,55506636,0,0x0,8
tick,0x7ffdf681f424,55508524,0,0x0,8
tick,0x7ffdf681f424,55510517,0,0x0,8
tick,0x7ffdf681f424,55512512,0,0x0,8
tick,0x7ffdf681f424,55514507,0,0x0,8
tick,0x7ffdf681f424,55516501,0,0x0,8
tick,0x7ffdf681f424,55518499,0,0x0,8
tick,0x7ffdf681f424,55520487,0,0x0,8
tick,0x7ffdf681f424,55522497,0,0x0,8
tick,0x7ffdf681f424,55524480,0,0x0,8
tick,0x7ffdf681f424,55526474,0,0x0,8
tick,0x7ffdf681f424,55528470,0,0x0,8
tick,0x7ffdf681f424,55530460,0,0x0,8
tick,0x7ffdf681f424,55532460,0,0x0,8
tick,0x7ffdf681f424,55534447,0,0x0,8
tick,0x7ffdf681f424,55536440,0,0x0,8
tick,0x7ffdf681f424,55538438,0,0x0,8
tick,0x7ffdf681f424,55540441,0,0x0,8
tick,0x7ffdf681f424,55542431,0,0x0,8
tick,0x7ffdf681f424,55544434,0,0x0,8
tick,0x7ffdf681f424,55546416,0,0x0,8
tick,0x7ffdf681f424,55548416,0,0x0,8
tick,0x7ffdf681f424,55550407,0,0x0,8
tick,0x7ffdf681f424,55552404,0,0x0,8
tick,0x7ffdf681f424,55554401,0,0x0,8
tick,0x7ffdf681f424,55556463,0,0x0,8
tick,0x7ffdf681f424,55559207,0,0x0,8
tick,0x7ffdf681f424,55568272,0,0x0,8
tick,0x7ffdf681f424,55568372,0,0x0,8
tick,0x7ffdf681f424,55573974,0,0x0,8
tick,0x7ffdf681f424,55581253,0,0x0,8
tick,0x7ffdf681f424,55582327,0,0x0,8
tick,0x7ffdf681f424,55584324,0,0x0,8
tick,0x7ffdf681f424,55586336,0,0x0,8
tick,0x7ffdf681f424,55588384,0,0x0,8
tick,0x7ffdf681f424,55590355,0,0x0,8
tick,0x7ffdf681f424,55592299,0,0x0,8
tick,0x7ffdf681f424,55594309,0,0x0,8
tick,0x7ffdf681f424,55596291,0,0x0,8
tick,0x7ffdf681f424,55598289,0,0x0,8
tick,0x7ffdf681f424,55600842,0,0x0,8
tick,0x7ffdf681f424,55602321,0,0x0,8
tick,0x7ffdf681f424,55604340,0,0x0,8
tick,0x7ffdf681f424,55606276,0,0x0,8
tick,0x7ffdf681f424,55608321,0,0x0,8
tick,0x7ffdf681f424,55615110,0,0x0,8
tick,0x7ffdf681f424,55618260,0,0x0,8
tick,0x7ffdf681f424,55620973,0,0x0,8
tick,0x7ffdf681f424,55622216,0,0x0,8
tick,0x7ffdf681f424,55624207,0,0x0,8
tick,0x7ffdf681f424,55626201,0,0x0,8
tick,0x7ffdf681f424,55628456,0,0x0,8
tick,0x7ffdf681f424,55630278,0,0x0,8
tick,0x7ffdf681f424,55632402,0,0x0,8
tick,0x7ffdf681f424,55634521,0,0x0,8
tick,0x7ffdf681f424,55636196,0,0x0,8
tick,0x7ffdf681f424,55638176,0,0x0,8
tick,0x7ffdf681f424,55640172,0,0x0,8
tick,0x7ffdf681f424,55642165,0,0x0,8
tick,0x7ffdf681f424,55644162,0,0x0,8
tick,0x7ffdf681f424,55646172,0,0x0,8
tick,0x7ffdf681f424,55648148,0,0x0,8
tick,0x7ffdf681f424,55650150,0,0x0,8
tick,0x7ffdf681f424,55652136,0,0x0,8
tick,0x7ffdf681f424,55654190,0,0x0,8
tick,0x7ffdf681f424,55656128,0,0x0,8
tick,0x7ffdf681f424,55658121,0,0x0,8
tick,0x7ffdf681f424,55660121,0,0x0,8
tick,0x7ffdf681f424,55662112,0,0x0,8
tick,0x7ffdf681f424,55664109,0,0x0,8
tick,0x7ffdf681f424,55666103,0,0x0,8
tick,0x7ffdf681f424,55668096,0,0x0,8
tick,0x7ffdf681f424,55670087,0,0x0,8
tick,0x7ffdf681f424,55672083,0,0x0,8
tick,0x7ffdf681f424,55674759,0,0x0,8
tick,0x7ffdf681f424,55686438,0,0x0,8
tick,0x7ffdf681f424,55688043,0,0x0,8
tick,0x7ffdf681f424,55690285,0,0x0,8
tick,0x7ffdf681f424,55692066,0,0x0,8
tick,0x7ffdf681f424,55694144,0,0x0,8
tick,0x7ffdf681f424,55696760,0,0x0,8
tick,0x7ffdf681f424,55698015,0,0x0,8
tick,0x7ffdf681f424,55700113,0,0x0,8
tick,0x7ffdf681f424,55702025,0,0x0,8
tick,0x7ffdf681f424,55704043,0,0x0,8
tick,0x7ffdf681f424,55706125,0,0x0,8
tick,0x7ffdf681f424,55708034,0,0x0,8
tick,0x7ffdf681f424,55715154,0,0x0,8
tick,0x7ffdf681f424,55716964,0,0x0,8
tick,0x7ffdf681f424,55718966,0,0x0,8
tick,0x7ffdf681f424,55721043,0,0x0,8
tick,0x7ffdf681f424,55723033,0,0x0,8
tick,0x7ffdf681f424,55725341,0,0x0,8
tick,0x7ffdf681f424,55727211,0,0x0,8
tick,0x7ffdf681f424,55728933,0,0x0,8
tick,0x7ffdf681f424,55730934,0,0x0,8
tick,0x7ffdf681f424,55732922,0,0x0,8
tick,0x7ffdf681f424,55734921,0,0x0,8
tick,0x7ffdf681f424,55736924,0,0x0,8
tick,0x7ffdf681f424,55739002,0,0x0,8
tick,0x7ffdf681f424,55740903,0,0x0,8
tick,0x7ffdf681f424,55742894,0,0x0,8
tick,0x7ffdf681f424,55744888,0,0x0,8
tick,0x7ffdf681f424,55746888,0,0x0,8
tick,0x7ffdf681f424,55748887,0,0x0,8
tick,0x7ffdf681f424,55750874,0,0x0,8
tick,0x7ffdf681f424,55752876,0,0x0,8
tick,0x7ffdf681f424,55754906,0,0x0,8
tick,0x7ffdf681f424,55756858,0,0x0,8
tick,0x7ffdf681f424,55758850,0,0x0,8
tick,0x7ffdf681f424,55760847,0,0x0,8
tick,0x7ffdf681f424,55762841,0,0x0,8
tick,0x7ffdf681f424,55764836,0,0x0,8
tick,0x7ffdf681f424,55766831,0,0x0,8
tick,0x7ffdf681f424,55768824,0,0x0,8
tick,0x7ffdf681f424,55770822,0,0x0,8
tick,0x7ffdf681f424,55772817,0,0x0,8
tick,0x7ffdf681f424,55774814,0,0x0,8
tick,0x7ffdf681f424,55776807,0,0x0,8
tick,0x7ffdf681f424,55782115,0,0x0,8
tick,0x7ffdf681f424,55786486,0,0x0,8
tick,0x7ffdf681f424,55793065,0,0x0,8
tick,0x7ffdf681f424,55794760,0,0x0,8
tick,0x7ffdf681f424,55796763,0,0x0,8
tick,0x7ffdf681f424,55798827,0,0x0,8
tick,0x7ffdf681f424,55800748,0,0x0,8
tick,0x7ffdf681f424,55802790,0,0x0,8
tick,0x7ffdf681f424,55804732,0,0x0,8
tick,0x7ffdf681f424,55806726,0,0x0,8
tick,0x7ffdf681f424,55808718,0,0x0,8
tick,0x7ffdf681f424,55810711,0,0x0,8
tick,0x7ffdf681f424,55812714,0,0x0,8
tick,0x7ffdf681f424,55814706,0,0x0,8
tick,0x7ffdf681f424,55816697,0,0x0,8
tick,0x7ffdf681f424,55818769,0,0x0,8
tick,0x7ffdf681f424,55822275,0,0x0,8
tick,0x7ffdf681f424,55826731,0,0x0,8
tick,0x7ffdf681f424,55828668,0,0x0,8
tick,0x7ffdf681f424,55830723,0,0x0,8
tick,0x7ffdf681f424,55836106,0,0x0,8
tick,0x7ffdf681f424,55837651,0,0x0,8
tick,0x7ffdf681f424,55839646,0,0x0,8
tick,0x7ffdf681f424,55841769,0,0x0,8
tick,0x7ffdf681f424,55843637,0,0x0,8
tick,0x7ffdf681f424,55845651,0,0x0,8
tick,0x7ffdf681f424,55847618,0,0x0,8
tick,0x7ffdf681f424,55849610,0,0x0,8
tick,0x7ffdf681f424,55851607,0,0x0,8
tick,0x7ffdf681f424,55853595,0,0x0,8
tick,0x7ffdf681f424,55855596,0,0x0,8
tick,0x7ffdf681f424,55857589,0,0x0,8
tick,0x7ffdf681f424,55859581,0,0x0,8
tick,0x7ffdf681f424,55861576,0,0x0,8
tick,0x7ffdf681f424,55863571,0,0x0,8
tick,0x7ffdf681f424,55865566,0,0x0,8
tick,0x7ffdf681f424,55867574,0,0x0,8
tick,0x7ffdf681f424,55869556,0,0x0,8
tick,0x7ffdf681f424,55871548,0,0x0,8
tick,0x7ffdf681f424,55873549,0,0x0,8
tick,0x7ffdf681f424,55875538,0,0x0,8
tick,0x7ffdf681f424,55878527,0,0x0,8
tick,0x7ffdf681f424,55894875,0,0x0,8
tick,0x7ffdf681f424,55896500,0,0x0,8
tick,0x7ffdf681f424,55898483,0,0x0,8
tick,0x7ffdf681f424,55900479,0,0x0,8
tick,0x7ffdf681f424,55902474,0,0x0,8
tick,0x7ffdf681f424,55904469,0,0x0,8
tick,0x7ffdf681f424,55906461,0,0x0,8
tick,0x7ffdf681f424,55908452,0,0x0,8
tick,0x7ffdf681f424,55910446,0,0x0,8
tick,0x7ffdf681f424,55912439,0,0x0,8
tick,0x7ffdf681f424,55914483,0,0x0,8
tick,0x7ffdf681f424,55916439,0,0x0,8
tick,0x7ffdf681f424,55918419,0,0x0,8
tick,0x7ffdf681f424,55920448,0,0x0,8
tick,0x7ffdf681f424,55922416,0,0x0,8
tick,0x7ffdf681f424,55925610,0,0x0,8
tick,0x7ffdf681f424,55927481,0,0x0,8
tick,0x7ffdf681f424,55929403,0,0x0,8
tick,0x7ffdf681f424,55931396,0,0x0,8
tick,0x7ffdf681f424,55933391,0,0x0,8
tick,0x7ffdf681f424,55935389,0,0x0,8
tick,0x7ffdf681f424,55937391,0,0x0,8
tick,0x7ffdf681f424,55939819,0,0x0,8
tick,0x7ffdf681f424,55941376,0,0x0,8
tick,0x7ffdf681f424,55943361,0,0x0,8
tick,0x7ffdf681f424,55945369,0,0x0,8
tick,0x7ffdf681f424,55950278,0,0x0,8
tick,0x7ffdf681f424,55951409,0,0x0,8
tick,0x7ffdf681f424,55954930,0,0x0,8
tick,0x7ffdf681f424,55956328,0,0x0,8
tick,0x7ffdf681f424,55958351,0,0x0,8
tick,0x7ffdf681f424,55974462,0,0x0,8
tick,0x7ffdf681f424,55976279,0,0x0,8
tick,0x7ffdf681f424,55978267,0,0x0,8
tick,0x7ffdf681f424,55980298,0,0x0,8
tick,0x7ffdf681f424,55982318,0,0x0,8
tick,0x7ffdf681f424,55984598,0,0x0,8
tick,0x7ffdf681f424,55986242,0,0x0,8
tick,0x7ffdf681f424,55988236,0,0x0,8
tick,0x7ffdf681f424,55990236,0,0x0,8
tick,0x7ffdf681f424,55992227,0,0x0,8
tick,0x7ffdf681f424,55994241,0,0x0,8
tick,0x7ffdf681f424,55996220,0,0x0,8
tick,0x7ffdf681f424,55998219,0,0x0,8
tick,0x7ffdf681f424,56000208,0,0x0,8
tick,0x7ffdf681f424,56002204,0,0x0,8
tick,0x7ffdf681f424,56004197,0,0x0,8
tick,0x7ffdf681f424,56006193,0,0x0,8
tick,0x7ffdf681f424,56008184,0,0x0,8
tick,0x7ffdf681f424,56010179,0,0x0,8
tick,0x7ffdf681f424,56012175,0,0x0,8
tick,0x7ffdf681f424,56014189,0,0x0,8
tick,0x7ffdf681f424,56016189,0,0x0,8
tick,0x7ffdf681f424,56018166,0,0x0,8
tick,0x7ffdf681f424,56020157,0,0x0,8
tick,0x7ffdf681f424,56022147,0,0x0,8
tick,0x7ffdf681f424,56024145,0,0x0,8
tick,0x7ffdf681f424,56028074,0,0x0,8
tick,0x7ffdf681f424,56029347,0,0x0,8
tick,0x7ffdf681f424,56040302,0,0x0,8
tick,0x7ffdf681f424,56042103,0,0x0,8
tick,0x7ffdf681f424,56044159,0,0x0,8
tick,0x7ffdf681f424,56046501,0,0x0,8
tick,0x7ffdf681f424,56048097,0,0x0,8
tick,0x7ffdf681f424,56050190,0,0x0,8
tick,0x7ffdf681f424,56052077,0,0x0,8
tick,0x7ffdf681f424,56054314,0,0x0,8
tick,0x7ffdf681f424,56056201,0,0x0,8
tick,0x7ffdf681f424,56058112,0,0x0,8
tick,0x7ffdf681f424,56060122,0,0x0,8
tick,0x7ffdf681f424,56062051,0,0x0,8
tick,0x7ffdf681f424,56064100,0,0x0,8
tick,0x7ffdf681f424,56066035,0,0x0,8
tick,0x7ffdf681f424,56068036,0,0x0,8
tick,0x7ffdf681f424,56070079,0,0x0,8
tick,0x7ffdf681f424,56072028,0,0x0,8
tick,0x7ffdf681f424,56074081,0,0x0,8
tick,0x7ffdf681f424,56076008,0,0x0,8
tick,0x7ffdf681f424,56078001,0,0x0,8
tick,0x7ffdf681f424,56080010,0,0x0,8
tick,0x7ffdf681f424,56081990,0,0x0,8
tick,0x7ffdf681f424,56083984,0,0x0,8
tick,0x7ffdf681f424,56085983,0,0x0,8
tick,0x7ffdf681f424,56088020,0,0x0,8
tick,0x7ffdf681f424,56090001,0,0x0,8
tick,0x7ffdf681f424,56092111,0,0x0,8
tick,0x7ffdf681f424,56093956,0,0x0,8
tick,0x7ffdf681f424,56095955,0,0x0,8
tick,0x7ffdf681f424,56097948,0,0x0,8
tick,0x7ffdf681f424,56099952,0,0x0,8
tick,0x7ffdf681f424,56101940,0,0x0,8
tick,0x7ffdf681f424,56103956,0,0x0,8
tick,0x7ffdf681f424,56121862,0,0x0,8
tick,0x7ffdf681f424,56123886,0,0x0,8
tick,0x7ffdf681f424,56125876,0,0x0,8
tick,0x7ffdf681f424,56127935,0,0x0,8
tick,0x7ffdf681f424,56129862,0,0x0,8
tick,0x7ffdf681f424,56131888,0,0x0,8
tick,0x7ffdf681f424,56133850,0,0x0,8
tick,0x7ffdf681f424,56135845,0,0x0,8
tick,0x7ffdf681f424,56137841,0,0x0,8
tick,0x7ffdf681f424,56139833,0,0x0,8
tick,0x7ffdf681f424,56141838,0,0x0,8
tick,0x7ffdf681f424,56143830,0,0x0,8
tick,0x7ffdf681f424,56145836,0,0x0,8
tick,0x7ffdf681f424,56147968,0,0x0,8
tick,0x7ffdf681f424,56149811,0,0x0,8
tick,0x7ffdf681f424,56151803,0,0x0,8
tick,0x7ffdf681f424,56153800,0,0x0,8
tick,0x7ffdf681f424,56155788,0,0x0,8
tick,0x7ffdf681f424,56157786,0,0x0,8
tick,0x7ffdf681f424,56159779,0,0x0,8
tick,0x7ffdf681f424,56161774,0,0x0,8
tick,0x7ffdf681f424,56163780,0,0x0,8
tick,0x7ffdf681f424,56165767,0,0x0,8
tick,0x7ffdf681f424,56167761,0,0x0,8
tick,0x7ffdf681f424,56169755,0,0x0,8
tick,0x7ffdf681f424,56171749,0,0x0,8
tick,0x7ffdf681f424,56173745,0,0x0,8
tick,0x7ffdf681f424,56175742,0,0x0,8
tick,0x7ffdf681f424,56177731,0,0x0,8
tick,0x7ffdf681f424,56179728,0,0x0,8
tick,0x7ffdf681f424,56181748,0,0x0,8
tick,0x7ffdf681f424,56185225,0,0x0,8
tick,0x7ffdf681f424,56198421,0,0x0,8
tick,0x7ffdf681f424,56199679,0,0x0,8
tick,0x7ffdf681f424,56201699,0,0x0,8
tick,0x7ffdf681f424,56203916,0,0x0,8
tick,0x7ffdf681f424,56205753,0,0x0,8
tick,0x7ffdf681f424,56207876,0,0x0,8
tick,0x7ffdf681f424,56209676,0,0x0,8
tick,0x7ffdf681f424,56211640,0,0x0,8
tick,0x7ffdf681f424,56213654,0,0x0,8
tick,0x7ffdf681f424,56215631,0,0x0,8
tick,0x7ffdf681f424,56217625,0,0x0,8
tick,0x7ffdf681f424,56219622,0,0x0,8
tick,0x7ffdf681f424,56233207,0,0x0,8
tick,0x7ffdf681f424,56234583,0,0x0,8
tick,0x7ffdf681f424,56236577,0,0x0,8
tick,0x7ffdf681f424,56239184,0,0x0,8
tick,0x7ffdf681f424,56240570,0,0x0,8
tick,0x7ffdf681f424,56242566,0,0x0,8
tick,0x7ffdf681f424,56244564,0,0x0,8
tick,0x7ffdf681f424,56246568,0,0x0,8
tick,0x7ffdf681f424,56248552,0,0x0,8
tick,0x7ffdf681f424,56250540,0,0x0,8
tick,0x7ffdf681f424,56252533,0,0x0,8
tick,0x7ffdf681f424,56254541,0,0x0,8
tick,0x7ffdf681f424,56256524,0,0x0,8
tick,0x7ffdf681f424,56258555,0,0x0,8
tick,0x7ffdf681f424,56260508,0,0x0,8
tick,0x7ffdf681f424,56262503,0,0x0,8
tick,0x7ffdf681f424,56264499,0,0x0,8
tick,0x7ffdf681f424,56266493,0,0x0,8
tick,0x7ffdf681f424,56268490,0,0x0,8
tick,0x7ffdf681f424,56270481,0,0x0,8
tick,0x7ffdf681f424,56272484,0,0x0,8
tick,0x7ffdf681f424,56274471,0,0x0,8
tick,0x7ffdf681f424,56276469,0,0x0,8
tick,0x7ffdf681f424,56278466,0,0x0,8
tick,0x7ffdf681f424,56280463,0,0x0,8
tick,0x7ffdf681f424,56283032,0,0x0,8
tick,0x7ffdf681f424,56284590,0,0x0,8
tick,0x7ffdf681f424,56286670,0,0x0,8
tick,0x7ffdf681f424,56288587,0,0x0,8
tick,0x7ffdf681f424,56290577,0,0x0,8
tick,0x7ffdf681f424,56292436,0,0x0,8
tick,0x7ffdf681f424,56294451,0,0x0,8
tick,0x7ffdf681f424,56298487,0,0x0,8
tick,0x7ffdf681f424,56300406,0,0x0,8
tick,0x7ffdf681f424,56303214,0,0x0,8
tick,0x7ffdf681f424,56304410,0,0x0,8
tick,0x7ffdf681f424,56306462,0,0x0,8
tick,0x7ffdf681f424,56308503,0,0x0,8
tick,0x7ffdf681f424,56310378,0,0x0,8
tick,0x7ffdf681f424,56312385,0,0x0,8
tick,0x7ffdf681f424,56314374,0,0x0,8
tick,0x7ffdf681f424,56316361,0,0x0,8
tick,0x7ffdf681f424,56318416,0,0x0,8
tick,0x7ffdf681f424,56320517,0,0x0,8
tick,0x7ffdf681f424,56334607,0,0x0,8
tick,0x7ffdf681f424,56336312,0,0x0,8
tick,0x7ffdf681f424,56338305,0,0x0,8
tick,0x7ffdf681f424,56340320,0,0x0,8
tick,0x7ffdf681f424,56342302,0,0x0,8
tick,0x7ffdf681f424,56344354,0,0x0,8
tick,0x7ffdf681f424,56346321,0,0x0,8
tick,0x7ffdf681f424,56348292,0,0x0,8
tick,0x7ffdf681f424,56350273,0,0x0,8
tick,0x7ffdf681f424,56352266,0,0x0,8
tick,0x7ffdf681f424,56354266,0,0x0,8
tick,0x7ffdf681f424,56357398,0,0x0,8
tick,0x7ffdf681f424,56359370,0,0x0,8
tick,0x7ffdf681f424,56361247,0,0x0,8
tick,0x7ffdf681f424,56363257,0,0x0,8
tick,0x7ffdf681f424,56365242,0,0x0,8
tick,0x7ffdf681f424,56367231,0,0x0,8
tick,0x7ffdf681f424,56369223,0,0x0,8
tick,0x7ffdf681f424,56371216,0,0x0,8
tick,0x7ffdf681f424,56373212,0,0x0,8
tick,0x7ffdf681f424,56375205,0,0x0,8
tick,0x7ffdf681f424,56377198,0,0x0,8
tick,0x7ffdf681f424,56379196,0,0x0,8
tick,0x7ffdf681f424,56381189,0,0x0,8
tick,0x7ffdf681f424,56383734,0,0x0,8
tick,0x7ffdf681f424,56385308,0,0x0,8
tick,0x7ffdf681f424,56397112,0,0x0,8
tick,0x7ffdf681f424,56398154,0,0x0,8
tick,0x7ffdf681f424,56400374,0,0x0,8
tick,0x7ffdf681f424,56402190,0,0x0,8
tick,0x7ffdf681f424,56404144,0,0x0,8
tick,0x7ffdf681f424,56406127,0,0x0,8
tick,0x7ffdf681f424,56408125,0,0x0,8
tick,0x7ffdf681f424,56410110,0,0x0,8
tick,0x7ffdf681f424,56412104,0,0x0,8
tick,0x7ffdf681f424,56414101,0,0x0,8
tick,0x7ffdf681f424,56416093,0,0x0,8
tick,0x7ffdf681f424,56418086,0,0x0,8
tick,0x7ffdf681f424,56420078,0,0x0,8
tick,0x7ffdf681f424,56422077,0,0x0,8
tick,0x7ffdf681f424,56424069,0,0x0,8
tick,0x7ffdf681f424,56426063,0,0x0,8
tick,0x7ffdf681f424,56428059,0,0x0,8
tick,0x7ffdf681f424,56430054,0,0x0,8
tick,0x7ffdf681f424,56432048,0,0x0,8
tick,0x7ffdf681f424,56434045,0,0x0,8
tick,0x7ffdf681f424,56436043,0,0x0,8
tick,0x7ffdf681f424,56438046,0,0x0,8
tick,0x7ffdf681f424,56440030,0,0x0,8
tick,0x7ffdf681f424,56442026,0,0x0,8
tick,0x7ffdf681f424,56444062,0,0x0,8
tick,0x7ffdf681f424,56447294,0,0x0,8
tick,0x7ffdf681f424,56458664,0,0x0,8
tick,0x7ffdf681f424,56458696,0,0x0,8
tick,0x7ffdf681f424,56459976,0,0x0,8
tick,0x7ffdf681f424,56461987,0,0x0,8
tick,0x7ffdf681f424,56463996,0,0x0,8
tick,0x7ffdf681f424,56466015,0,0x0,8
tick,0x7ffdf681f424,56467992,0,0x0,8
tick,0x7ffdf681f424,56469952,0,0x0,8
tick,0x7ffdf681f424,56471961,0,0x0,8
tick,0x7ffdf681f424,56473954,0,0x0,8
tick,0x7ffdf681f424,56475939,0,0x0,8
tick,0x7ffdf681f424,56477958,0,0x0,8
tick,0x7ffdf681f424,56479930,0,0x0,8
tick,0x7ffdf681f424,56481918,0,0x0,8
tick,0x7ffdf681f424,56483912,0,0x0,8
tick,0x7ffdf681f424,56486163,0,0x0,8
tick,0x7ffdf681f424,56487974,0,0x0,8
tick,0x7ffdf681f424,56500418,0,0x0,8
tick,0x7ffdf681f424,56501867,0,0x0,8
tick,0x7ffdf681f424,56503871,0,0x0,8
tick,0x7ffdf681f424,56505895,0,0x0,8
tick,0x7ffdf681f424,56507900,0,0x0,8
tick,0x7ffdf681f424,56509941,0,0x0,8
tick,0x7ffdf681f424,56511856,0,0x0,8
tick,0x7ffdf681f424,56513832,0,0x0,8
tick,0x7ffdf681f424,56515828,0,0x0,8
tick,0x7ffdf681f424,56517835,0,0x0,8
tick,0x7ffdf681f424,56519824,0,0x0,8
tick,0x7ffdf681f424,56521815,0,0x0,8
tick,0x7ffdf681f424,56523805,0,0x0,8
tick,0x7ffdf681f424,56525801,0,0x0,8
tick,0x7ffdf681f424,56527934,0,0x0,8
tick,0x7ffdf681f424,56540006,0,0x0,8
tick,0x7ffdf681f424,56540042,0,0x0,8
tick,0x7ffdf681f424,56541760,0,0x0,8
tick,0x7ffdf681f424,56543759,0,0x0,8
tick,0x7ffdf681f424,56547159,0,0x0,8
tick,0x7ffdf681f424,56549014,0,0x0,8
tick,0x7ffdf681f424,56550881,0,0x0,8
tick,0x7ffdf681f424,56552730,0,0x0,8
tick,0x7ffdf681f424,56554723,0,0x0,8
tick,0x7ffdf681f424,56556720,0,0x0,8
tick,0x7ffdf681f424,56558716,0,0x0,8
tick,0x7ffdf681f424,56560711,0,0x0,8
tick,0x7ffdf681f424,56562704,0,0x0,8
tick,0x7ffdf681f424,56564701,0,0x0,8
tick,0x7ffdf681f424,56566690,0,0x0,8
tick,0x7ffdf681f424,56568686,0,0x0,8
tick,0x7ffdf681f424,56570684,0,0x0,8
tick,0x7ffdf681f424,56572689,0,0x0,8
tick,0x7ffdf681f424,56574667,0,0x0,8
tick,0x7ffdf681f424,56576664,0,0x0,8
tick,0x7ffdf681f424,56578693,0,0x0,8
tick,0x7ffdf681f424,56580655,0,0x0,8
tick,0x7ffdf681f424,56582703,0,0x0,8
tick,0x7ffdf681f424,56584647,0,0x0,8
tick,0x7ffdf681f424,56586638,0,0x0,8
tick,0x7ffdf681f424,56588632,0,0x0,8
tick,0x7ffdf681f424,56590628,0,0x0,8
tick,0x7ffdf681f424,56604128,0,0x0,8
tick,0x7ffdf681f424,56605593,0,0x0,8
tick,0x7ffdf681f424,56607592,0,0x0,8
tick,0x7ffdf681f424,56609696,0,0x0,8
tick,0x7ffdf681f424,56611698,0,0x0,8
tick,0x7ffdf681f424,56613576,0,0x0,8
tick,0x7ffdf681f424,56615585,0,0x0,8
tick,0x7ffdf681f424,56617559,0,0x0,8
tick,0x7ffdf681f424,56619575,0,0x0,8
tick,0x7ffdf681f424,56621557,0,0x0,8
tick,0x7ffdf681f424,56623554,0,0x0,8
tick,0x7ffdf681f424,56625544,0,0x0,8
tick,0x7ffdf681f424,56627528,0,0x0,8
tick,0x7ffdf681f424,56629527,0,0x0,8
tick,0x7ffdf681f424,56631529,0,0x0,8
tick,0x7ffdf681f424,56633520,0,0x0,8
tick,0x7ffdf681f424,56635506,0,0x0,8
tick,0x7ffdf681f424,56637839,0,0x0,8
tick,0x7ffdf681f424,56639514,0,0x0,8
tick,0x7ffdf681f424,56641572,0,0x0,8
tick,0x7ffdf681f424,56643498,0,0x0,8
tick,0x7ffdf681f424,56645547,0,0x0,8
tick,0x7ffdf681f424,56650101,0,0x0,8
tick,0x7ffdf681f424,56655294,0,0x0,8
tick,0x7ffdf681f424,56656459,0,0x0,8
tick,0x7ffdf681f424,56658447,0,0x0,8
tick,0x7ffdf681f424,56660446,0,0x0,8
tick,0x7ffdf681f424,56663122,0,0x0,8
tick,0x7ffdf681f424,56676051,0,0x0,8
tick,0x7ffdf681f424,56677404,0,0x0,8
tick,0x7ffdf681f424,56679400,0,0x0,8
tick,0x7ffdf681f424,56681397,0,0x0,8
tick,0x7ffdf681f424,56684244,0,0x0,8
tick,0x7ffdf681f424,56685481,0,0x0,8
tick,0x7ffdf681f424,56687394,0,0x0,8
tick,0x7ffdf681f424,56689370,0,0x0,8
tick,0x7ffdf681f424,56691360,0,0x0,8
tick,0x7ffdf681f424,56693351,0,0x0,8
tick,0x7ffdf681f424,56695349,0,0x0,8
tick,0x7ffdf681f424,56697345,0,0x0,8
tick,0x7ffdf681f424,56699343,0,0x0,8
tick,0x7ffdf681f424,56701336,0,0x0,8
tick,0x7ffdf681f424,56703325,0,0x0,8
tick,0x7ffdf681f424,56705322,0,0x0,8
tick,0x7ffdf681f424,56707318,0,0x0,8
tick,0x7ffdf681f424,56709313,0,0x0,8
tick,0x7ffdf681f424,56711304,0,0x0,8
tick,0x7ffdf681f424,56713305,0,0x0,8
tick,0x7ffdf681f424,56715296,0,0x0,8
tick,0x7ffdf681f424,56717291,0,0x0,8
tick,0x7ffdf681f424,56719296,0,0x0,8
tick,0x7ffdf681f424,56721278,0,0x0,8
tick,0x7ffdf681f424,56723307,0,0x0,8
tick,0x7ffdf681f424,56725267,0,0x0,8
tick,0x7ffdf681f424,56727264,0,0x0,8
tick,0x7ffdf681f424,56729257,0,0x0,8
tick,0x7ffdf681f424,56731254,0,0x0,8
tick,0x7ffdf681f424,56741117,0,0x0,8
tick,0x7ffdf681f424,56749853,0,0x0,8
tick,0x7ffdf681f424,56751202,0,0x0,8
tick,0x7ffdf681f424,56753201,0,0x0,8
tick,0x7ffdf681f424,56755508,0,0x0,8
tick,0x7ffdf681f424,56757215,0,0x0,8
tick,0x7ffdf681f424,56759212,0,0x0,8
tick,0x7ffdf681f424,56761175,0,0x0,8
tick,0x7ffdf681f424,56763164,0,0x0,8
tick,0x7ffdf681f424,56765161,0,0x0,8
tick,0x7ffdf681f424,56780545,0,0x0,8
tick,0x7ffdf681f424,56782120,0,0x0,8
tick,0x7ffdf681f424,56784134,0,0x0,8
tick,0x7ffdf681f424,56786353,0,0x0,8
tick,0x7ffdf681f424,56788124,0,0x0,8
tick,0x7ffdf681f424,56790141,0,0x0,8
tick,0x7ffdf681f424,56792095,0,0x0,8
tick,0x7ffdf681f424,56794188,0,0x0,8
tick,0x7ffdf681f424,56796087,0,0x0,8
tick,0x7ffdf681f424,56798174,0,0x0,8
tick,0x7ffdf681f424,56800068,0,0x0,8
tick,0x7ffdf681f424,56802066,0,0x0,8
tick,0x7ffdf681f424,56804056,0,0x0,8
tick,0x7ffdf681f424,56806049,0,0x0,8
tick,0x7ffdf681f424,56808046,0,0x0,8
tick,0x7ffdf681f424,56810037,0,0x0,8
tick,0x7ffdf681f424,56812035,0,0x0,8
tick,0x7ffdf681f424,56814036,0,0x0,8
tick,0x7ffdf681f424,56816026,0,0x0,8
tick,0x7ffdf681f424,56828797,0,0x0,8
tick,0x7ffdf681f424,56829992,0,0x0,8
tick,0x7ffdf681f424,56831988,0,0x0,8
tick,0x7ffdf681f424,56834013,0,0x0,8
tick,0x7ffdf681f424,56836064,0,0x0,8
tick,0x7ffdf681f424,56837988,0,0x0,8
tick,0x7ffdf681f424,56839967,0,0x0,8
tick,0x7ffdf681f424,56841962,0,0x0,8
tick,0x7ffdf681f424,56843951,0,0x0,8
tick,0x7ffdf681f424,56845944,0,0x0,8
tick,0x7ffdf681f424,56847941,0,0x0,8
tick,0x7ffdf681f424,56849949,0,0x0,8
tick,0x7ffdf681f424,56851928,0,0x0,8
tick,0x7ffdf681f424,56853933,0,0x0,8
tick,0x7ffdf681f424,56855925,0,0x0,8
tick,0x7ffdf681f424,56857916,0,0x0,8
tick,0x7ffdf681f424,56859909,0,0x0,8
tick,0x7ffdf681f424,56861932,0,0x0,8
tick,0x7ffdf681f424,56863898,0,0x0,8
tick,0x7ffdf681f424,56865936,0,0x0,8
tick,0x7ffdf681f424,56867885,0,0x0,8
tick,0x7ffdf681f424,56869977,0,0x0,8
tick,0x7ffdf681f424,56872820,0,0x0,8
tick,0x7ffdf681f424,56886827,0,0x0,8
tick,0x7ffdf681f424,56888834,0,0x0,8
tick,0x7ffdf681f424,56890829,0,0x0,8
tick,0x7ffdf681f424,56892834,0,0x0,8
tick,0x7ffdf681f424,56895148,0,0x0,8
tick,0x7ffdf681f424,56897075,0,0x0,8
tick,0x7ffdf681f424,56898820,0,0x0,8
tick,0x7ffdf681f424,56900798,0,0x0,8
tick,0x7ffdf681f424,56915071,0,0x0,8
tick,0x7ffdf681f424,56915104,0,0x0,8
tick,0x7ffdf681f424,56916770,0,0x0,8
tick,0x7ffdf681f424,56918761,0,0x0,8
tick,0x7ffdf681f424,56920749,0,0x0,8
tick,0x7ffdf681f424,56922740,0,0x0,8
tick,0x7ffdf681f424,56924761,0,0x0,8
tick,0x7ffdf681f424,56926862,0,0x0,8
tick,0x7ffdf681f424,56928733,0,0x0,8
tick,0x7ffdf681f424,56931171,0,0x0,8
tick,0x7ffdf681f424,56932722,0,0x0,8
tick,0x7ffdf681f424,56934727,0,0x0,8
tick,0x7ffdf681f424,56936715,0,0x0,8
tick,0x7ffdf681f424,56938704,0,0x0,8
tick,0x7ffdf681f424,56940698,0,0x0,8
tick,0x7ffdf681f424,56942686,0,0x0,8
tick,0x7ffdf681f424,56944683,0,0x0,8
tick,0x7ffdf681f424,56946678,0,0x0,8
tick,0x7ffdf681f424,56948681,0,0x0,8
tick,0x7ffdf681f424,56950665,0,0x0,8
tick,0x7ffdf681f424,56952660,0,0x0,8
tick,0x7ffdf681f424,56966447,0,0x0,8
tick,0x7ffdf681f424,56966495,0,0x0,8
tick,0x7ffdf681f424,56967629,0,0x0,8
tick,0x7ffdf681f424,56969621,0,0x0,8
tick,0x7ffdf681f424,56971955,0,0x0,8
tick,0x7ffdf681f424,56973618,0,0x0,8
tick,0x7ffdf681f424,56975602,0,0x0,8
tick,0x7ffdf681f424,56977599,0,0x0,8
tick,0x7ffdf681f424,56979586,0,0x0,8
tick,0x7ffdf681f424,56981582,0,0x0,8
tick,0x7ffdf681f424,56983579,0,0x0,8
tick,0x7ffdf681f424,56985572,0,0x0,8
tick,0x7ffdf681f424,56987566,0,0x0,8
tick,0x7ffdf681f424,56989565,0,0x0,8
tick,0x7ffdf681f424,56991559,0,0x0,8
tick,0x7ffdf681f424,56993557,0,0x0,8
tick,0x7ffdf681f424,56995551,0,0x0,8
tick,0x7ffdf681f424,56997549,0,0x0,8
tick,0x7ffdf681f424,57000606,0,0x0,8
tick,0x7ffdf681f424,57001572,0,0x0,8
tick,0x7ffdf681f424,57003728,0,0x0,8
tick,0x7ffdf681f424,57005589,0,0x0,8
tick,0x7ffdf681f424,57007952,0,0x0,8
tick,0x7ffdf681f424,57009509,0,0x0,8
tick,0x7ffdf681f424,57011510,0,0x0,8
tick,0x7ffdf681f424,57014013,0,0x0,8
tick,0x7ffdf681f424,57015500,0,0x0,8
tick,0x7ffdf681f424,57017487,0,0x0,8
tick,0x7ffdf681f424,57019742,0,0x0,8
tick,0x7ffdf681f424,57021488,0,0x0,8
tick,0x7ffdf681f424,57023575,0,0x0,8
tick,0x7ffdf681f424,57025781,0,0x0,8
tick,0x7ffdf681f424,57029371,0,0x0,8
tick,0x7ffdf681f424,57030450,0,0x0,8
tick,0x7ffdf681f424,57032451,0,0x0,8
tick,0x7ffdf681f424,57034445,0,0x0,8
tick,0x7ffdf681f424,57036460,0,0x0,8
tick,0x7ffdf681f424,57038434,0,0x0,8
tick,0x7ffdf681f424,57040429,0,0x0,8
tick,0x7ffdf681f424,57042419,0,0x0,8
tick,0x7ffdf681f424,57044412,0,0x0,8
tick,0x7ffdf681f424,57046406,0,0x0,8
tick,0x7ffdf681f424,57048401,0,0x0,8
tick,0x7ffdf681f424,57051364,0,0x0,8
tick,0x7ffdf681f424,57065161,0,0x0,8
tick,0x7ffdf681f424,57066367,0,0x0,8
tick,0x7ffdf681f424,57068356,0,0x0,8
tick,0x7ffdf681f424,57070350,0,0x0,8
tick,0x7ffdf681f424,57072408,0,0x0,8
tick,0x7ffdf681f424,57074490,0,0x0,8
tick,0x7ffdf681f424,57076348,0,0x0,8
tick,0x7ffdf681f424,57078320,0,0x0,8
tick,0x7ffdf681f424,57080325,0,0x0,8
tick,0x7ffdf681f424,57082333,0,0x0,8
tick,0x7ffdf681f424,57084310,0,0x0,8
tick,0x7ffdf681f424,57086341,0,0x0,8
tick,0x7ffdf681f424,57088295,0,0x0,8
tick,0x7ffdf681f424,57090298,0,0x0,8
tick,0x7ffdf681f424,57105102,0,0x0,8
tick,0x7ffdf681f424,57106262,0,0x0,8
tick,0x7ffdf681f424,57108252,0,0x0,8
tick,0x7ffdf681f424,57110251,0,0x0,8
tick,0x7ffdf681f424,57112237,0,0x0,8
tick,0x7ffdf681f424,57114283,0,0x0,8
tick,0x7ffdf681f424,57116235,0,0x0,8
tick,0x7ffdf681f424,57118220,0,0x0,8
tick,0x7ffdf681f424,57120218,0,0x0,8
tick,0x7ffdf681f424,57122206,0,0x0,8
tick,0x7ffdf681f424,57124205,0,0x0,8
tick,0x7ffdf681f424,57126198,0,0x0,8
tick,0x7ffdf681f424,57128190,0,0x0,8
tick,0x7ffdf681f424,57130191,0,0x0,8
tick,0x7ffdf681f424,57132180,0,0x0,8
tick,0x7ffdf681f424,57134367,0,0x0,8
tick,0x7ffdf681f424,57136170,0,0x0,8
tick,0x7ffdf681f424,57138233,0,0x0,8
tick,0x7ffdf681f424,57140354,0,0x0,8
tick,0x7ffdf681f424,57142286,0,0x0,8
tick,0x7ffdf681f424,57144189,0,0x0,8
tick,0x7ffdf681f424,57146197,0,0x0,8
tick,0x7ffdf681f424,57148141,0,0x0,8
tick,0x7ffdf681f424,57150133,0,0x0,8
tick,0x7ffdf681f424,57152126,0,0x0,8
tick,0x7ffdf681f424,57154120,0,0x0,8
tick,0x7ffdf681f424,57156120,0,0x0,8
tick,0x7ffdf681f424,57158114,0,0x0,8
tick,0x7ffdf681f424,57160114,0,0x0,8
tick,0x7ffdf681f424,57162100,0,0x0,8
tick,0x7ffdf681f424,57164098,0,0x0,8
tick,0x7ffdf681f424,57166444,0,0x0,8
tick,0x7ffdf681f424,57168135,0,0x0,8
tick,0x7ffdf681f424,57170081,0,0x0,8
tick,0x7ffdf681f424,57172070,0,0x0,8
tick,0x7ffdf681f424,57174065,0,0x0,8
tick,0x7ffdf681f424,57176054,0,0x0,8
tick,0x7ffdf681f424,57178056,0,0x0,8
tick,0x7ffdf681f424,57180723,0,0x0,8
tick,0x7ffdf681f424,57182573,0,0x0,8
tick,0x7ffdf681f424,57184251,0,0x0,8
tick,0x7ffdf681f424,57186103,0,0x0,8
tick,0x7ffdf681f424,57188043,0,0x0,8
tick,0x7ffdf681f424,57195821,0,0x0,8
tick,0x7ffdf681f424,57197004,0,0x0,8
tick,0x7ffdf681f424,57199006,0,0x0,8
tick,0x7ffdf681f424,57201047,0,0x0,8
tick,0x7ffdf681f424,57203013,0,0x0,8
tick,0x7ffdf681f424,57205073,0,0x0,8
tick,0x7ffdf681f424,57207141,0,0x0,8
tick,0x7ffdf681f424,57208975,0,0x0,8
tick,0x7ffdf681f424,57210977,0,0x0,8
tick,0x7ffdf681f424,57212964,0,0x0,8
tick,0x7ffdf681f424,57214962,0,0x0,8
tick,0x7ffdf681f424,57216965,0,0x0,8
tick,0x7ffdf681f424,57218950,0,0x0,8
tick,0x7ffdf681f424,57220951,0,0x0,8
tick,0x7ffdf681f424,57222940,0,0x0,8
tick,0x7ffdf681f424,57224942,0,0x0,8
tick,0x7ffdf681f424,57226925,0,0x0,8
tick,0x7ffdf681f424,57228922,0,0x0,8
tick,0x7ffdf681f424,57230916,0,0x0,8
tick,0x7ffdf681f424,57232909,0,0x0,8
tick,0x7ffdf681f424,57234905,0,0x0,8
tick,0x7ffdf681f424,57236906,0,0x0,8
tick,0x7ffdf681f424,57238896,0,0x0,8
tick,0x7ffdf681f424,57240890,0,0x0,8
tick,0x7ffdf681f424,57242886,0,0x0,8
tick,0x7ffdf681f424,57245316,0,0x0,8
tick,0x7ffdf681f424,57247085,0,0x0,8
tick,0x7ffdf681f424,57254815,0,0x0,8
tick,0x7ffdf681f424,57255111,0,0x0,8
tick,0x7ffdf681f424,57256995,0,0x0,8
tick,0x7ffdf681f424,57258846,0,0x0,8
tick,0x7ffdf681f424,57260838,0,0x0,8
tick,0x7ffdf681f424,57267687,0,0x0,8
tick,0x7ffdf681f424,57268819,0,0x0,8
tick,0x7ffdf681f424,57270861,0,0x0,8
tick,0x7ffdf681f424,57272825,0,0x0,8
tick,0x7ffdf681f424,57274813,0,0x0,8
tick,0x7ffdf681f424,57283007,0,0x0,8
tick,0x7ffdf681f424,57284798,0,0x0,8
tick,0x7ffdf681f424,57286777,0,0x0,8
tick,0x7ffdf681f424,57288770,0,0x0,8
tick,0x7ffdf681f424,57290756,0,0x0,8
tick,0x7ffdf681f424,57292827,0,0x0,8
tick,0x7ffdf681f424,57294749,0,0x0,8
tick,0x7ffdf681f424,57296842,0,0x0,8
tick,0x7ffdf681f424,57298911,0,0x0,8
tick,0x7ffdf681f424,57300732,0,0x0,8
tick,0x7ffdf681f424,57302727,0,0x0,8
tick,0x7ffdf681f424,57304720,0,0x0,8
tick,0x7ffdf681f424,57306715,0,0x0,8
tick,0x7ffdf681f424,57308709,0,0x0,8
tick,0x7ffdf681f424,57310712,0,0x0,8
tick,0x7ffdf681f424,57312697,0,0x0,8
tick,0x7ffdf681f424,57314721,0,0x0,8
tick,0x7ffdf681f424,57316697,0,0x0,8
tick,0x7ffdf681f424,57318690,0,0x0,8
tick,0x7ffdf681f424,57320677,0,0x0,8
tick,0x7ffdf681f424,57322687,0,0x0,8
tick,0x7ffdf681f424,57324665,0,0x0,8
tick,0x7ffdf681f424,57326663,0,0x0,8
tick,0x7ffdf681f424,57328663,0,0x0,8
tick,0x7ffdf681f424,57330650,0,0x0,8
tick,0x7ffdf681f424,57332654,0,0x0,8
tick,0x7ffdf681f424,57334643,0,0x0,8
tick,0x7ffdf681f424,57349169,0,0x0,8
tick,0x7ffdf681f424,57349198,0,0x0,8
tick,0x7ffdf681f424,57350603,0,0x0,8
tick,0x7ffdf681f424,57352591,0,0x0,8
tick,0x7ffdf681f424,57354700,0,0x0,8
tick,0x7ffdf681f424,57356587,0,0x0,8
tick,0x7ffdf681f424,57358624,0,0x0,8
tick,0x7ffdf681f424,57360581,0,0x0,8
tick,0x7ffdf681f424,57362561,0,0x0,8
tick,0x7ffdf681f424,57364566,0,0x0,8
tick,0x7ffdf681f424,57366553,0,0x0,8
tick,0x7ffdf681f424,57368552,0,0x0,8
tick,0x7ffdf681f424,57370543,0,0x0,8
tick,0x7ffdf681f424,57372535,0,0x0,8
tick,0x7ffdf681f424,57374532,0,0x0,8
tick,0x7ffdf681f424,57376540,0,0x0,8
tick,0x7ffdf681f424,57378519,0,0x0,8
tick,0x7ffdf681f424,57380514,0,0x0,8
tick,0x7ffdf681f424,57382511,0,0x0,8
tick,0x7ffdf681f424,57384511,0,0x0,8
tick,0x7ffdf681f424,57386512,0,0x0,8
tick,0x7ffdf681f424,57388498,0,0x0,8
tick,0x7ffdf681f424,57390534,0,0x0,8
tick,0x7ffdf681f424,57392498,0,0x0,8
tick,0x7ffdf681f424,57394477,0,0x0,8
tick,0x7ffdf681f424,57408211,0,0x0,8
tick,0x7ffdf681f424,57409439,0,0x0,8
tick,0x7ffdf681f424,57411469,0,0x0,8
tick,0x7ffdf681f424,57413451,0,0x0,8
tick,0x7ffdf681f424,57415428,0,0x0,8
tick,0x7ffdf681f424,57417437,0,0x0,8
tick,0x7ffdf681f424,57419438,0,0x0,8
tick,0x7ffdf681f424,57421754,0,0x0,8
tick,0x7ffdf681f424,57423413,0,0x0,8
tick,0x7ffdf681f424,57425749,0,0x0,8
tick,0x7ffdf681f424,57427509,0,0x0,8
tick,0x7ffdf681f424,57430150,0,0x0,8
tick,0x7ffdf681f424,57436409,0,0x0,8
tick,0x7ffdf681f424,57438364,0,0x0,8
tick,0x7ffdf681f424,57440357,0,0x0,8
tick,0x7ffdf681f424,57442503,0,0x0,8
tick,0x7ffdf681f424,57444422,0,0x0,8
tick,0x7ffdf681f424,57446361,0,0x0,8
tick,0x7ffdf681f424,57448380,0,0x0,8
tick,0x7ffdf681f424,57450335,0,0x0,8
tick,0x7ffdf681f424,57452323,0,0x0,8
tick,0x7ffdf681f424,57454322,0,0x0,8
tick,0x7ffdf681f424,57456315,0,0x0,8
tick,0x7ffdf681f424,57458304,0,0x0,8
tick,0x7ffdf681f424,57460303,0,0x0,8
tick,0x7ffdf681f424,57462297,0,0x0,8
tick,0x7ffdf681f424,57464294,0,0x0,8
tick,0x7ffdf681f424,57466287,0,0x0,8
tick,0x7ffdf681f424,57468278,0,0x0,8
tick,0x7ffdf681f424,57470277,0,0x0,8
tick,0x7ffdf681f424,57472269,0,0x0,8
tick,0x7ffdf681f424,57474265,0,0x0,8
tick,0x7ffdf681f424,57476255,0,0x0,8
tick,0x7ffdf681f424,57478570,0,0x0,8
tick,0x7ffdf681f424,57480368,0,0x0,8
tick,0x7ffdf681f424,57482373,0,0x0,8
tick,0x7ffdf681f424,57490631,0,0x0,8
tick,0x7ffdf681f424,57492218,0,0x0,8
tick,0x7ffdf681f424,57497267,0,0x0,8
tick,0x7ffdf681f424,57498283,0,0x0,8
tick,0x7ffdf681f424,57500270,0,0x0,8
tick,0x7ffdf681f424,57502188,0,0x0,8
tick,0x7ffdf681f424,57504186,0,0x0,8
tick,0x7ffdf681f424,57506181,0,0x0,8
tick,0x7ffdf681f424,57508185,0,0x0,8
tick,0x7ffdf681f424,57510337,0,0x0,8
tick,0x7ffdf681f424,57512173,0,0x0,8
tick,0x7ffdf681f424,57514159,0,0x0,8
tick,0x7ffdf681f424,57516146,0,0x0,8
tick,0x7ffdf681f424,57518144,0,0x0,8
tick,0x7ffdf681f424,57520147,0,0x0,8
tick,0x7ffdf681f424,57522140,0,0x0,8
tick,0x7ffdf681f424,57524136,0,0x0,8
tick,0x7ffdf681f424,57526123,0,0x0,8
tick,0x7ffdf681f424,57528130,0,0x0,8
tick,0x7ffdf681f424,57530118,0,0x0,8
tick,0x7ffdf681f424,57532118,0,0x0,8
tick,0x7ffdf681f424,57546871,0,0x0,8
tick,0x7ffdf681f424,57547598,0,0x0,8
tick,0x7ffdf681f424,57555294,0,0x0,8
tick,0x7ffdf681f424,57557050,0,0x0,8
tick,0x7ffdf681f424,57559040,0,0x0,8
tick,0x7ffdf681f424,57561055,0,0x0,8
tick,0x7ffdf681f424,57563047,0,0x0,8
tick,0x7ffdf681f424,57565026,0,0x0,8
tick,0x7ffdf681f424,57584860,0,0x0,8
tick,0x7ffdf681f424,57584889,0,0x0,8
tick,0x7ffdf681f424,57585975,0,0x0,8
tick,0x7ffdf681f424,57587972,0,0x0,8
tick,0x7ffdf681f424,57589975,0,0x0,8
tick,0x7ffdf681f424,57591953,0,0x0,8
tick,0x7ffdf681f424,57593949,0,0x0,8
tick,0x7ffdf681f424,57595964,0,0x0,8
tick,0x7ffdf681f424,57597939,0,0x0,8
tick,0x7ffdf681f424,57599956,0,0x0,8
tick,0x7ffdf681f424,57601940,0,0x0,8
tick,0x7ffdf681f424,57603933,0,0x0,8
tick,0x7ffdf681f424,57605952,0,0x0,8
tick,0x7ffdf681f424,57607913,0,0x0,8
tick,0x7ffdf681f424,57609904,0,0x0,8
tick,0x7ffdf681f424,57611897,0,0x0,8
tick,0x7ffdf681f424,57613899,0,0x0,8
tick,0x7ffdf681f424,57615904,0,0x0,8
tick,0x7ffdf681f424,57617892,0,0x0,8
tick,0x7ffdf681f424,57619874,0,0x0,8
tick,0x7ffdf681f424,57621871,0,0x0,8
tick,0x7ffdf681f424,57623883,0,0x0,8
tick,0x7ffdf681f424,57625869,0,0x0,8
tick,0x7ffdf681f424,57627860,0,0x0,8
tick,0x7ffdf681f424,57629858,0,0x0,8
tick,0x7ffdf681f424,57631849,0,0x0,8
tick,0x7ffdf681f424,57633837,0,0x0,8
tick,0x7ffdf681f424,57635981,0,0x0,8
tick,0x7ffdf681f424,57637827,0,0x0,8
tick,0x7ffdf681f424,57639837,0,0x0,8
tick,0x7ffdf681f424,57641819,0,0x0,8
tick,0x7ffdf681f424,57643814,0,0x0,8
tick,0x7ffdf681f424,57645806,0,0x0,8
tick,0x7ffdf681f424,57647802,0,0x0,8
tick,0x7ffdf681f424,57649798,0,0x0,8
tick,0x7ffdf681f424,57651792,0,0x0,8
tick,0x7ffdf681f424,57654025,0,0x0,8
tick,0x7ffdf681f424,57667371,0,0x0,8
tick,0x7ffdf681f424,57668749,0,0x0,8
tick,0x7ffdf681f424,57670814,0,0x0,8
tick,0x7ffdf681f424,57680839,0,0x0,8
tick,0x7ffdf681f424,57685069,0,0x0,8
tick,0x7ffdf681f424,57686706,0,0x0,8
tick,0x7ffdf681f424,57688699,0,0x0,8
tick,0x7ffdf681f424,57690700,0,0x0,8
tick,0x7ffdf681f424,57692685,0,0x0,8
tick,0x7ffdf681f424,57694678,0,0x0,8
tick,0x7ffdf681f424,57696712,0,0x0,8
tick,0x7ffdf681f424,57698729,0,0x0,8
tick,0x7ffdf681f424,57700727,0,0x0,8
tick,0x7ffdf681f424,57702654,0,0x0,8
tick,0x7ffdf681f424,57704652,0,0x0,8
tick,0x7ffdf681f424,57707005,0,0x0,8
tick,0x7ffdf681f424,57708639,0,0x0,8
tick,0x7ffdf681f424,57710631,0,0x0,8
tick,0x7ffdf681f424,57712623,0,0x0,8
tick,0x7ffdf681f424,57714623,0,0x0,8
tick,0x7ffdf681f424,57716618,0,0x0,8
tick,0x7ffdf681f424,57718613,0,0x0,8
tick,0x7ffdf681f424,57720609,0,0x0,8
tick,0x7ffdf681f424,57722685,0,0x0,8
tick,0x7ffdf681f424,57724596,0,0x0,8
tick,0x7ffdf681f424,57726594,0,0x0,8
tick,0x7ffdf681f424,57728586,0,0x0,8
tick,0x7ffdf681f424,57730615,0,0x0,8
tick,0x7ffdf681f424,57732583,0,0x0,8
tick,0x7ffdf681f424,57734570,0,0x0,8
tick,0x7ffdf681f424,57751050,0,0x0,8
tick,0x7ffdf681f424,57752601,0,0x0,8
tick,0x7ffdf681f424,57754529,0,0x0,8
tick,0x7ffdf681f424,57756545,0,0x0,8
tick,0x7ffdf681f424,57758845,0,0x0,8
tick,0x7ffdf681f424,57761338,0,0x0,8
tick,0x7ffdf681f424,57762701,0,0x0,8
tick,0x7ffdf681f424,57764500,0,0x0,8
tick,0x7ffdf681f424,57766487,0,0x0,8
tick,0x7ffdf681f424,57768484,0,0x0,8
tick,0x7ffdf681f424,57770474,0,0x0,8
tick,0x7ffdf681f424,57772472,0,0x0,8
tick,0x7ffdf681f424,57774469,0,0x0,8
tick,0x7ffdf681f424,57776472,0,0x0,8
tick,0x7ffdf681f424,57778454,0,0x0,8
tick,0x7ffdf681f424,57782005,0,0x0,8
tick,0x7ffdf681f424,57792020,0,0x0,8
tick,0x7ffdf681f424,57798499,0,0x0,8
tick,0x7ffdf681f424,57800395,0,0x0,8
tick,0x7ffdf681f424,57802405,0,0x0,8
tick,0x7ffdf681f424,57804485,0,0x0,8
tick,0x7ffdf681f424,57806470,0,0x0,8
tick,0x7ffdf681f424,57808390,0,0x0,8
tick,0x7ffdf681f424,57810390,0,0x0,8
tick,0x7ffdf681f424,57812382,0,0x0,8
tick,0x7ffdf681f424,57814367,0,0x0,8
tick,0x7ffdf681f424,57816350,0,0x0,8
tick,0x7ffdf681f424,57818342,0,0x0,8
tick,0x7ffdf681f424,57820341,0,0x0,8
tick,0x7ffdf681f424,57822332,0,0x0,8
tick,0x7ffdf681f424,57824330,0,0x0,8
tick,0x7ffdf681f424,57826328,0,0x0,8
tick,0x7ffdf681f424,57828314,0,0x0,8
tick,0x7ffdf681f424,57830313,0,0x0,8
tick,0x7ffdf681f424,57832310,0,0x0,8
tick,0x7ffdf681f424,57834299,0,0x0,8
tick,0x7ffdf681f424,57836296,0,0x0,8
tick,0x7ffdf681f424,57838289,0,0x0,8
tick,0x7ffdf681f424,57840286,0,0x0,8
tick,0x7ffdf681f424,57842330,0,0x0,8
tick,0x7ffdf681f424,57844279,0,0x0,8
tick,0x7ffdf681f424,57846272,0,0x0,8
tick,0x7ffdf681f424,57848270,0,0x0,8
tick,0x7ffdf681f424,57850284,0,0x0,8
tick,0x7ffdf681f424,57861046,0,0x0,8
tick,0x7ffdf681f424,57862678,0,0x0,8
tick,0x7ffdf681f424,57866338,0,0x0,8
tick,0x7ffdf681f424,57868214,0,0x0,8
tick,0x7ffdf681f424,57870220,0,0x0,8
tick,0x7ffdf681f424,57872228,0,0x0,8
tick,0x7ffdf681f424,57874261,0,0x0,8
tick,0x7ffdf681f424,57876206,0,0x0,8
tick,0x7ffdf681f424,57878191,0,0x0,8
tick,0x7ffdf681f424,57891129,0,0x0,8
tick,0x7ffdf681f424,57893156,0,0x0,8
tick,0x7ffdf681f424,57895444,0,0x0,8
tick,0x7ffdf681f424,57897169,0,0x0,8
tick,0x7ffdf681f424,57899144,0,0x0,8
tick,0x7ffdf681f424,57901216,0,0x0,8
tick,0x7ffdf681f424,57903129,0,0x0,8
tick,0x7ffdf681f424,57905114,0,0x0,8
tick,0x7ffdf681f424,57907112,0,0x0,8
tick,0x7ffdf681f424,57909106,0,0x0,8
tick,0x7ffdf681f424,57911159,0,0x0,8
tick,0x7ffdf681f424,57913100,0,0x0,8
tick,0x7ffdf681f424,57915097,0,0x0,8
tick,0x7ffdf681f424,57917083,0,0x0,8
tick,0x7ffdf681f424,57919088,0,0x0,8
tick,0x7ffdf681f424,57921070,0,0x0,8
tick,0x7ffdf681f424,57923065,0,0x0,8
tick,0x7ffdf681f424,57925077,0,0x0,8
tick,0x7ffdf681f424,57927059,0,0x0,8
tick,0x7ffdf681f424,57929049,0,0x0,8
tick,0x7ffdf681f424,57931054,0,0x0,8
tick,0x7ffdf681f424,57933039,0,0x0,8
tick,0x7ffdf681f424,57935072,0,0x0,8
tick,0x7ffdf681f424,57937040,0,0x0,8
tick,0x7ffdf681f424,57939060,0,0x0,8
tick,0x7ffdf681f424,57941024,0,0x0,8
tick,0x7ffdf681f424,57943377,0,0x0,8
tick,0x7ffdf681f424,57945461,0,0x0,8
tick,0x7ffdf681f424,57947256,0,0x0,8
tick,0x7ffdf681f424,57958779,0,0x0,8
tick,0x7ffdf681f424,57959966,0,0x0,8
tick,0x7ffdf681f424,57961960,0,0x0,8
tick,0x7ffdf681f424,57963989,0,0x0,8
tick,0x7ffdf681f424,57965966,0,0x0,8
tick,0x7ffdf681f424,57968019,0,0x0,8
tick,0x7ffdf681f424,57969961,0,0x0,8
tick,0x7ffdf681f424,57975842,0,0x0,8
tick,0x7ffdf681f424,57976930,0,0x0,8
tick,0x7ffdf681f424,57980259,0,0x0,8
tick,0x7ffdf681f424,57981920,0,0x0,8
tick,0x7ffdf681f424,57983961,0,0x0,8
tick,0x7ffdf681f424,57985907,0,0x0,8
tick,0x7ffdf681f424,57987927,0,0x0,8
tick,0x7ffdf681f424,57989901,0,0x0,8
tick,0x7ffdf681f424,57991889,0,0x0,8
tick,0x7ffdf681f424,57993877,0,0x0,8
tick,0x7ffdf681f424,57995878,0,0x0,8
tick,0x7ffdf681f424,57997866,0,0x0,8
tick,0x7ffdf681f424,57999862,0,0x0,8
tick,0x7ffdf681f424,58001857,0,0x0,8
tick,0x7ffdf681f424,58003853,0,0x0,8
tick,0x7ffdf681f424,58005857,0,0x0,8
tick,0x7ffdf681f424,58008354,0,0x0,8
tick,0x7ffdf681f424,58009894,0,0x0,8
tick,0x7ffdf681f424,58011838,0,0x0,8
tick,0x7ffdf681f424,58013831,0,0x0,8
tick,0x7ffdf681f424,58015821,0,0x0,8
tick,0x7ffdf681f424,58017856,0,0x0,8
tick,0x7ffdf681f424,58019808,0,0x0,8
tick,0x7ffdf681f424,58021800,0,0x0,8
tick,0x7ffdf681f424,58023801,0,0x0,8
tick,0x7ffdf681f424,58025843,0,0x0,8
tick,0x7ffdf681f424,58027786,0,0x0,8
tick,0x7ffdf681f424,58029776,0,0x0,8
tick,0x7ffdf681f424,58031774,0,0x0,8
tick,0x7ffdf681f424,58033767,0,0x0,8
tick,0x7ffdf681f424,58035764,0,0x0,8
tick,0x7ffdf681f424,58037759,0,0x0,8
tick,0x7ffdf681f424,58039756,0,0x0,8
tick,0x7ffdf681f424,58041746,0,0x0,8
tick,0x7ffdf681f424,58043738,0,0x0,8
tick,0x7ffdf681f424,58045740,0,0x0,8
tick,0x7ffdf681f424,58047729,0,0x0,8
tick,0x7ffdf681f424,58049738,0,0x0,8
tick,0x7ffdf681f424,58052141,0,0x0,8
tick,0x7ffdf681f424,58063768,0,0x0,8
tick,0x7ffdf681f424,58065691,0,0x0,8
tick,0x7ffdf681f424,58067739,0,0x0,8
tick,0x7ffdf681f424,58073859,0,0x0,8
tick,0x7ffdf681f424,58075670,0,0x0,8
tick,0x7ffdf681f424,58077692,0,0x0,8
tick,0x7ffdf681f424,58079673,0,0x0,8
tick,0x7ffdf681f424,58087663,0,0x0,8
tick,0x7ffdf681f424,58089626,0,0x0,8
tick,0x7ffdf681f424,58091621,0,0x0,8
tick,0x7ffdf681f424,58093651,0,0x0,8
tick,0x7ffdf681f424,58095630,0,0x0,8
tick,0x7ffdf681f424,58099280,0,0x0,8
tick,0x7ffdf681f424,58100707,0,0x0,8
tick,0x7ffdf681f424,58102610,0,0x0,8
tick,0x7ffdf681f424,58104588,0,0x0,8
tick,0x7ffdf681f424,58106603,0,0x0,8
tick,0x7ffdf681f424,58108568,0,0x0,8
tick,0x7ffdf681f424,58110566,0,0x0,8
tick,0x7ffdf681f424,58112565,0,0x0,8
tick,0x7ffdf681f424,58114554,0,0x0,8
tick,0x7ffdf681f424,58116546,0,0x0,8
tick,0x7ffdf681f424,58118538,0,0x0,8
tick,0x7ffdf681f424,58120535,0,0x0,8
tick,0x7ffdf681f424,58122608,0,0x0,8
tick,0x7ffdf681f424,58124530,0,0x0,8
tick,0x7ffdf681f424,58126531,0,0x0,8
tick,0x7ffdf681f424,58128516,0,0x0,8
tick,0x7ffdf681f424,58130515,0,0x0,8
tick,0x7ffdf681f424,58132505,0,0x0,8
tick,0x7ffdf681f424,58134504,0,0x0,8
tick,0x7ffdf681f424,58136493,0,0x0,8
tick,0x7ffdf681f424,58138511,0,0x0,8
tick,0x7ffdf681f424,58140483,0,0x0,8
tick,0x7ffdf681f424,58142480,0,0x0,8
tick,0x7ffdf681f424,58144489,0,0x0,8
tick,0x7ffdf681f424,58146468,0,0x0,8
tick,0x7ffdf681f424,58148464,0,0x0,8
tick,0x7ffdf681f424,58150459,0,0x0,8
tick,0x7ffdf681f424,58152451,0,0x0,8
tick,0x7ffdf681f424,58154471,0,0x0,8
tick,0x7ffdf681f424,58156549,0,0x0,8
tick,0x7ffdf681f424,58158437,0,0x0,8
tick,0x7ffdf681f424,58160429,0,0x0,8
tick,0x7ffdf681f424,58163572,0,0x0,8
tick,0x7ffdf681f424,58176363,0,0x0,8
tick,0x7ffdf681f424,58178391,0,0x0,8
tick,0x7ffdf681f424,58181526,0,0x0,8
tick,0x7ffdf681f424,58189172,0,0x0,8
tick,0x7ffdf681f424,58189248,0,0x0,8
tick,0x7ffdf681f424,58190383,0,0x0,8
tick,0x7ffdf681f424,58198872,0,0x0,8
tick,0x7ffdf681f424,58200336,0,0x0,8
tick,0x7ffdf681f424,58202329,0,0x0,8
tick,0x7ffdf681f424,58204502,0,0x0,8
tick,0x7ffdf681f424,58206312,0,0x0,8
tick,0x7ffdf681f424,58208349,0,0x0,8
tick,0x7ffdf681f424,58210362,0,0x0,8
tick,0x7ffdf681f424,58212289,0,0x0,8
tick,0x7ffdf681f424,58214288,0,0x0,8
tick,0x7ffdf681f424,58216281,0,0x0,8
tick,0x7ffdf681f424,58218273,0,0x0,8
tick,0x7ffdf681f424,58220288,0,0x0,8
tick,0x7ffdf681f424,58222267,0,0x0,8
tick,0x7ffdf681f424,58224259,0,0x0,8
tick,0x7ffdf681f424,58226248,0,0x0,8
tick,0x7ffdf681f424,58228249,0,0x0,8
tick,0x7ffdf681f424,58230249,0,0x0,8
tick,0x7ffdf681f424,58232242,0,0x0,8
tick,0x7ffdf681f424,58234229,0,0x0,8
tick,0x7ffdf681f424,58236225,0,0x0,8
tick,0x7ffdf681f424,58238219,0,0x0,8
tick,0x7ffdf681f424,58240218,0,0x0,8
tick,0x7ffdf681f424,58252147,0,0x0,8
tick,0x7ffdf681f424,58253186,0,0x0,8
tick,0x7ffdf681f424,58255184,0,0x0,8
tick,0x7ffdf681f424,58257805,0,0x0,8
tick,0x7ffdf681f424,58259172,0,0x0,8
tick,0x7ffdf681f424,58261170,0,0x0,8
tick,0x7ffdf681f424,58263167,0,0x0,8
tick,0x7ffdf681f424,58265158,0,0x0,8
tick,0x7ffdf681f424,58267188,0,0x0,8
tick,0x7ffdf681f424,58281795,0,0x0,8
tick,0x7ffdf681f424,58283108,0,0x0,8
tick,0x7ffdf681f424,58285099,0,0x0,8
tick,0x7ffdf681f424,58287227,0,0x0,8
tick,0x7ffdf681f424,58289102,0,0x0,8
tick,0x7ffdf681f424,58291307,0,0x0,8
tick,0x7ffdf681f424,58293095,0,0x0,8
tick,0x7ffdf681f424,58295073,0,0x0,8
tick,0x7ffdf681f424,58297063,0,0x0,8
tick,0x7ffdf681f424,58299079,0,0x0,8
tick,0x7ffdf681f424,58301054,0,0x0,8
tick,0x7ffdf681f424,58303113,0,0x0,8
tick,0x7ffdf681f424,58305057,0,0x0,8
tick,0x7ffdf681f424,58307055,0,0x0,8
tick,0x7ffdf681f424,58309048,0,0x0,8
tick,0x7ffdf681f424,58311030,0,0x0,8
tick,0x7ffdf681f424,58313028,0,0x0,8
tick,0x7ffdf681f424,58315017,0,0x0,8
tick,0x7ffdf681f424,58317015,0,0x0,8
tick,0x7ffdf681f424,58319007,0,0x0,8
tick,0x7ffdf681f424,58320999,0,0x0,8
tick,0x7ffdf681f424,58329464,0,0x0,8
tick,0x7ffdf681f424,58331306,0,0x0,8
tick,0x7ffdf681f424,58336188,0,0x0,8
tick,0x7ffdf681f424,58337989,0,0x0,8
tick,0x7ffdf681f424,58340081,0,0x0,8
tick,0x7ffdf681f424,58342683,0,0x0,8
tick,0x7ffdf681f424,58344120,0,0x0,8
tick,0x7ffdf681f424,58346013,0,0x0,8
tick,0x7ffdf681f424,58348198,0,0x0,8
tick,0x7ffdf681f424,58350045,0,0x0,8
tick,0x7ffdf681f424,58351921,0,0x0,8
tick,0x7ffdf681f424,58353919,0,0x0,8
tick,0x7ffdf681f424,58355997,0,0x0,8
tick,0x7ffdf681f424,58357909,0,0x0,8
tick,0x7ffdf681f424,58359899,0,0x0,8
tick,0x7ffdf681f424,58361891,0,0x0,8
tick,0x7ffdf681f424,58363902,0,0x0,8
tick,0x7ffdf681f424,58365884,0,0x0,8
tick,0x7ffdf681f424,58367951,0,0x0,8
tick,0x7ffdf681f424,58369872,0,0x0,8
tick,0x7ffdf681f424,58371862,0,0x0,8
tick,0x7ffdf681f424,58373861,0,0x0,8
tick,0x7ffdf681f424,58375853,0,0x0,8
tick,0x7ffdf681f424,58377846,0,0x0,8
tick,0x7ffdf681f424,58380230,0,0x0,8
tick,0x7ffdf681f424,58381967,0,0x0,8
tick,0x7ffdf681f424,58383839,0,0x0,8
tick,0x7ffdf681f424,58385893,0,0x0,8
tick,0x7ffdf681f424,58387823,0,0x0,8
tick,0x7ffdf681f424,58389822,0,0x0,8
tick,0x7ffdf681f424,58391810,0,0x0,8
tick,0x7ffdf681f424,58393806,0,0x0,8
tick,0x7ffdf681f424,58395823,0,0x0,8
tick,0x7ffdf681f424,58397795,0,0x0,8
tick,0x7ffdf681f424,58399792,0,0x0,8
tick,0x7ffdf681f424,58401783,0,0x0,8
tick,0x7ffdf681f424,58403777,0,0x0,8
tick,0x7ffdf681f424,58405777,0,0x0,8
tick,0x7ffdf681f424,58407779,0,0x0,8
tick,0x7ffdf681f424,58409759,0,0x0,8
tick,0x7ffdf681f424,58411754,0,0x0,8
tick,0x7ffdf681f424,58413836,0,0x0,8
tick,0x7ffdf681f424,58415782,0,0x0,8
tick,0x7ffdf681f424,58417758,0,0x0,8
tick,0x7ffdf681f424,58419733,0,0x0,8
tick,0x7ffdf681f424,58421730,0,0x0,8
tick,0x7ffdf681f424,58423732,0,0x0,8
tick,0x7ffdf681f424,58425732,0,0x0,8
tick,0x7ffdf681f424,58427746,0,0x0,8
tick,0x7ffdf681f424,58429747,0,0x0,8
tick,0x7ffdf681f424,58431709,0,0x0,8
tick,0x7ffdf681f424,58433710,0,0x0,8
tick,0x7ffdf681f424,58435699,0,0x0,8
tick,0x7ffdf681f424,58437692,0,0x0,8
tick,0x7ffdf681f424,58452867,0,0x0,8
tick,0x7ffdf681f424,58454655,0,0x0,8
tick,0x7ffdf681f424,58456696,0,0x0,8
tick,0x7ffdf681f424,58458657,0,0x0,8
tick,0x7ffdf681f424,58460632,0,0x0,8
tick,0x7ffdf681f424,58462623,0,0x0,8
tick,0x7ffdf681f424,58464629,0,0x0,8
tick,0x7ffdf681f424,58466610,0,0x0,8
tick,0x7ffdf681f424,58468605,0,0x0,8
tick,0x7ffdf681f424,58470604,0,0x0,8
tick,0x7ffdf681f424,58472959,0,0x0,8
tick,0x7ffdf681f424,58474591,0,0x0,8
tick,0x7ffdf681f424,58476583,0,0x0,8
tick,0x7ffdf681f424,58478577,0,0x0,8
tick,0x7ffdf681f424,58480573,0,0x0,8
tick,0x7ffdf681f424,58482578,0,0x0,8
tick,0x7ffdf681f424,58484579,0,0x0,8
tick,0x7ffdf681f424,58486559,0,0x0,8
tick,0x7ffdf681f424,58488553,0,0x0,8
tick,0x7ffdf681f424,58490587,0,0x0,8
tick,0x7ffdf681f424,58492542,0,0x0,8
tick,0x7ffdf681f424,58494541,0,0x0,8
tick,0x7ffdf681f424,58496562,0,0x0,8
tick,0x7ffdf681f424,58498531,0,0x0,8
tick,0x7ffdf681f424,58500520,0,0x0,8
tick,0x7ffdf681f424,58502522,0,0x0,8
tick,0x7ffdf681f424,58504511,0,0x0,8
tick,0x7ffdf681f424,58506532,0,0x0,8
tick,0x7ffdf681f424,58508497,0,0x0,8
tick,0x7ffdf681f424,58510492,0,0x0,8
tick,0x7ffdf681f424,58512489,0,0x0,8
tick,0x7ffdf681f424,58514501,0,0x0,8
tick,0x7ffdf681f424,58516476,0,0x0,8
tick,0x7ffdf681f424,58532777,0,0x0,8
tick,0x7ffdf681f424,58533456,0,0x0,8
tick,0x7ffdf681f424,58535475,0,0x0,8
tick,0x7ffdf681f424,58547926,0,0x0,8
tick,0x7ffdf681f424,58549396,0,0x0,8
tick,0x7ffdf681f424,58551390,0,0x0,8
tick,0x7ffdf681f424,58553398,0,0x0,8
tick,0x7ffdf681f424,58555392,0,0x0,8
tick,0x7ffdf681f424,58557467,0,0x0,8
tick,0x7ffdf681f424,58559407,0,0x0,8
tick,0x7ffdf681f424,58561380,0,0x0,8
tick,0x7ffdf681f424,58563396,0,0x0,8
tick,0x7ffdf681f424,58565348,0,0x0,8
tick,0x7ffdf681f424,58567344,0,0x0,8
tick,0x7ffdf681f424,58569337,0,0x0,8
tick,0x7ffdf681f424,58571333,0,0x0,8
tick,0x7ffdf681f424,58573329,0,0x0,8
tick,0x7ffdf681f424,58575326,0,0x0,8
tick,0x7ffdf681f424,58577314,0,0x0,8
tick,0x7ffdf681f424,58579323,0,0x0,8
tick,0x7ffdf681f424,58581306,0,0x0,8
tick,0x7ffdf681f424,58583300,0,0x0,8
tick,0x7ffdf681f424,58585292,0,0x0,8
tick,0x7ffdf681f424,58587290,0,0x0,8
tick,0x7ffdf681f424,58589282,0,0x0,8
tick,0x7ffdf681f424,58591281,0,0x0,8
tick,0x7ffdf681f424,58593267,0,0x0,8
tick,0x7ffdf681f424,58595265,0,0x0,8
tick,0x7ffdf681f424,58611952,0,0x0,8
tick,0x7ffdf681f424,58626028,0,0x0,8
tick,0x7ffdf681f424,58627264,0,0x0,8
tick,0x7ffdf681f424,58629427,0,0x0,8
tick,0x7ffdf681f424,58631174,0,0x0,8
tick,0x7ffdf681f424,58633257,0,0x0,8
tick,0x7ffdf681f424,58635185,0,0x0,8
tick,0x7ffdf681f424,58637258,0,0x0,8
tick,0x7ffdf681f424,58639179,0,0x0,8
tick,0x7ffdf681f424,58641149,0,0x0,8
tick,0x7ffdf681f424,58643143,0,0x0,8
tick,0x7ffdf681f424,58645366,0,0x0,8
tick,0x7ffdf681f424,58647161,0,0x0,8
tick,0x7ffdf681f424,58649181,0,0x0,8
tick,0x7ffdf681f424,58651121,0,0x0,8
tick,0x7ffdf681f424,58653118,0,0x0,8
tick,0x7ffdf681f424,58655144,0,0x0,8
tick,0x7ffdf681f424,58657112,0,0x0,8
tick,0x7ffdf681f424,58659097,0,0x0,8
tick,0x7ffdf681f424,58661089,0,0x0,8
tick,0x7ffdf681f424,58663085,0,0x0,8
tick,0x7ffdf681f424,58665090,0,0x0,8
tick,0x7ffdf681f424,58667076,0,0x0,8
tick,0x7ffdf681f424,58669085,0,0x0,8
tick,0x7ffdf681f424,58671066,0,0x0,8
tick,0x7ffdf681f424,58673062,0,0x0,8
tick,0x7ffdf681f424,58675053,0,0x0,8
tick,0x7ffdf681f424,58677054,0,0x0,8
tick,0x7ffdf681f424,58679039,0,0x0,8
tick,0x7ffdf681f424,58681045,0,0x0,8
tick,0x7ffdf681f424,58690618,0,0x0,8
tick,0x7ffdf681f424,58697863,0,0x0,8
tick,0x7ffdf681f424,58698990,0,0x0,8
tick,0x7ffdf681f424,58700998,0,0x0,8
tick,0x7ffdf681f424,58703213,0,0x0,8
tick,0x7ffdf681f424,58705244,0,0x0,8
tick,0x7ffdf681f424,58706977,0,0x0,8
tick,0x7ffdf681f424,58709009,0,0x0,8
tick,0x7ffdf681f424,58710960,0,0x0,8
tick,0x7ffdf681f424,58712951,0,0x0,8
tick,0x7ffdf681f424,58714957,0,0x0,8
tick,0x7ffdf681f424,58716943,0,0x0,8
tick,0x7ffdf681f424,58718939,0,0x0,8
tick,0x7ffdf681f424,58732207,0,0x0,8
tick,0x7ffdf681f424,58733903,0,0x0,8
tick,0x7ffdf681f424,58735902,0,0x0,8
tick,0x7ffdf681f424,58738100,0,0x0,8
tick,0x7ffdf681f424,58739997,0,0x0,8
tick,0x7ffdf681f424,58741887,0,0x0,8
tick,0x7ffdf681f424,58743870,0,0x0,8
tick,0x7ffdf681f424,58745866,0,0x0,8
tick,0x7ffdf681f424,58747903,0,0x0,8
tick,0x7ffdf681f424,58749860,0,0x0,8
tick,0x7ffdf681f424,58752312,0,0x0,8
tick,0x7ffdf681f424,58753872,0,0x0,8
tick,0x7ffdf681f424,58755843,0,0x0,8
tick,0x7ffdf681f424,58757839,0,0x0,8
tick,0x7ffdf681f424,58759827,0,0x0,8
tick,0x7ffdf681f424,58761821,0,0x0,8
tick,0x7ffdf681f424,58763824,0,0x0,8
tick,0x7ffdf681f424,58765812,0,0x0,8
tick,0x7ffdf681f424,58767808,0,0x0,8
tick,0x7ffdf681f424,58769823,0,0x0,8
tick,0x7ffdf681f424,58772112,0,0x0,8
tick,0x7ffdf681f424,58773793,0,0x0,8
tick,0x7ffdf681f424,58776149,0,0x0,8
tick,0x7ffdf681f424,58777794,0,0x0,8
tick,0x7ffdf681f424,58779787,0,0x0,8
tick,0x7ffdf681f424,58781807,0,0x0,8
tick,0x7ffdf681f424,58789547,0,0x0,8
tick,0x7ffdf681f424,58790746,0,0x0,8
tick,0x7ffdf681f424,58792747,0,0x0,8
tick,0x7ffdf681f424,58795323,0,0x0,8
tick,0x7ffdf681f424,58796879,0,0x0,8
tick,0x7ffdf681f424,58807613,0,0x0,8
tick,0x7ffdf681f424,58808741,0,0x0,8
tick,0x7ffdf681f424,58810694,0,0x0,8
tick,0x7ffdf681f424,58813120,0,0x0,8
tick,0x7ffdf681f424,58814855,0,0x0,8
tick,0x7ffdf681f424,58816683,0,0x0,8
tick,0x7ffdf681f424,58818688,0,0x0,8
tick,0x7ffdf681f424,58820667,0,0x0,8
tick,0x7ffdf681f424,58824105,0,0x0,8
tick,0x7ffdf681f424,58825651,0,0x0,8
tick,0x7ffdf681f424,58827718,0,0x0,8
tick,0x7ffdf681f424,58829799,0,0x0,8
tick,0x7ffdf681f424,58831751,0,0x0,8
tick,0x7ffdf681f424,58833648,0,0x0,8
tick,0x7ffdf681f424,58835635,0,0x0,8
tick,0x7ffdf681f424,58837620,0,0x0,8
tick,0x7ffdf681f424,58839615,0,0x0,8
tick,0x7ffdf681f424,58841612,0,0x0,8
tick,0x7ffdf681f424,58843602,0,0x0,8
tick,0x7ffdf681f424,58845605,0,0x0,8
tick,0x7ffdf681f424,58847594,0,0x0,8
tick,0x7ffdf681f424,58849587,0,0x0,8
tick,0x7ffdf681f424,58851584,0,0x0,8
tick,0x7ffdf681f424,58853576,0,0x0,8
tick,0x7ffdf681f424,58855570,0,0x0,8
tick,0x7ffdf681f424,58857578,0,0x0,8
tick,0x7ffdf681f424,58859560,0,0x0,8
tick,0x7ffdf681f424,58861547,0,0x0,8
tick,0x7ffdf681f424,58863543,0,0x0,8
tick,0x7ffdf681f424,58865545,0,0x0,8
tick,0x7ffdf681f424,58867666,0,0x0,8
tick,0x7ffdf681f424,58869749,0,0x0,8
tick,0x7ffdf681f424,58871610,0,0x0,8
tick,0x7ffdf681f424,58873531,0,0x0,8
tick,0x7ffdf681f424,58875525,0,0x0,8
tick,0x7ffdf681f424,58877517,0,0x0,8
tick,0x7ffdf681f424,58879562,0,0x0,8
tick,0x7ffdf681f424,58881503,0,0x0,8
tick,0x7ffdf681f424,58883502,0,0x0,8
tick,0x7ffdf681f424,58885515,0,0x0,8
tick,0x7ffdf681f424,58887493,0,0x0,8
tick,0x7ffdf681f424,58889504,0,0x0,8
tick,0x7ffdf681f424,58891476,0,0x0,8
tick,0x7ffdf681f424,58893470,0,0x0,8
tick,0x7ffdf681f424,58895469,0,0x0,8
tick,0x7ffdf681f424,58897468,0,0x0,8
tick,0x7ffdf681f424,58899495,0,0x0,8
tick,0x7ffdf681f424,58915221,0,0x0,8
tick,0x7ffdf681f424,58916496,0,0x0,8
tick,0x7ffdf681f424,58918414,0,0x0,8
tick,0x7ffdf681f424,58920535,0,0x0,8
tick,0x7ffdf681f424,58922469,0,0x0,8
tick,0x7ffdf681f424,58924474,0,0x0,8
tick,0x7ffdf681f424,58926387,0,0x0,8
tick,0x7ffdf681f424,58928380,0,0x0,8
tick,0x7ffdf681f424,58930370,0,0x0,8
tick,0x7ffdf681f424,58932365,0,0x0,8
tick,0x7ffdf681f424,58934408,0,0x0,8
tick,0x7ffdf681f424,58936368,0,0x0,8
tick,0x7ffdf681f424,58938352,0,0x0,8
tick,0x7ffdf681f424,58940350,0,0x0,8
tick,0x7ffdf681f424,58942343,0,0x0,8
tick,0x7ffdf681f424,58944334,0,0x0,8
tick,0x7ffdf681f424,58946330,0,0x0,8
tick,0x7ffdf681f424,58948325,0,0x0,8
tick,0x7ffdf681f424,58950320,0,0x0,8
tick,0x7ffdf681f424,58952406,0,0x0,8
tick,0x7ffdf681f424,58954312,0,0x0,8
tick,0x7ffdf681f424,58956306,0,0x0,8
tick,0x7ffdf681f424,58958319,0,0x0,8
tick,0x7ffdf681f424,58960292,0,0x0,8
tick,0x7ffdf681f424,58962291,0,0x0,8
tick,0x7ffdf681f424,58968186,0,0x0,8
tick,0x7ffdf681f424,58977662,0,0x0,8
tick,0x7ffdf681f424,58979245,0,0x0,8
tick,0x7ffdf681f424,58981245,0,0x0,8
tick,0x7ffdf681f424,58983365,0,0x0,8
tick,0x7ffdf681f424,58985225,0,0x0,8
tick,0x7ffdf681f424,58987256,0,0x0,8
tick,0x7ffdf681f424,58989220,0,0x0,8
tick,0x7ffdf681f424,58991214,0,0x0,8
tick,0x7ffdf681f424,58993203,0,0x0,8
tick,0x7ffdf681f424,58995206,0,0x0,8
tick,0x7ffdf681f424,58997191,0,0x0,8
tick,0x7ffdf681f424,58999197,0,0x0,8
tick,0x7ffdf681f424,59001180,0,0x0,8
tick,0x7ffdf681f424,59003179,0,0x0,8
tick,0x7ffdf681f424,59005185,0,0x0,8
tick,0x7ffdf681f424,59007166,0,0x0,8
tick,0x7ffdf681f424,59009161,0,0x0,8
tick,0x7ffdf681f424,59011207,0,0x0,8
tick,0x7ffdf681f424,59013248,0,0x0,8
tick,0x7ffdf681f424,59015149,0,0x0,8
tick,0x7ffdf681f424,59017147,0,0x0,8
tick,0x7ffdf681f424,59033126,0,0x0,8
tick,0x7ffdf681f424,59035094,0,0x0,8
tick,0x7ffdf681f424,59037087,0,0x0,8
tick,0x7ffdf681f424,59039125,0,0x0,8
tick,0x7ffdf681f424,59041407,0,0x0,8
tick,0x7ffdf681f424,59043087,0,0x0,8
tick,0x7ffdf681f424,59045065,0,0x0,8
tick,0x7ffdf681f424,59050810,0,0x0,8
tick,0x7ffdf681f424,59052044,0,0x0,8
tick,0x7ffdf681f424,59054043,0,0x0,8
tick,0x7ffdf681f424,59056194,0,0x0,8
tick,0x7ffdf681f424,59060915,0,0x0,8
tick,0x7ffdf681f424,59062027,0,0x0,8
tick,0x7ffdf681f424,59064016,0,0x0,8
tick,0x7ffdf681f424,59066143,0,0x0,8
tick,0x7ffdf681f424,59068018,0,0x0,8
tick,0x7ffdf681f424,59070003,0,0x0,8
tick,0x7ffdf681f424,59071995,0,0x0,8
tick,0x7ffdf681f424,59073991,0,0x0,8
tick,0x7ffdf681f424,59075985,0,0x0,8
tick,0x7ffdf681f424,59077980,0,0x0,8
tick,0x7ffdf681f424,59079972,0,0x0,8
tick,0x7ffdf681f424,59081969,0,0x0,8
tick,0x7ffdf681f424,59083965,0,0x0,8
tick,0x7ffdf681f424,59085964,0,0x0,8
tick,0x7ffdf681f424,59087959,0,0x0,8
tick,0x7ffdf681f424,59089944,0,0x0,8
tick,0x7ffdf681f424,59091951,0,0x0,8
tick,0x7ffdf681f424,59093949,0,0x0,8
tick,0x7ffdf681f424,59095932,0,0x0,8
tick,0x7ffdf681f424,59097926,0,0x0,8
tick,0x7ffdf681f424,59099916,0,0x0,8
tick,0x7ffdf681f424,59101943,0,0x0,8
tick,0x7ffdf681f424,59103905,0,0x0,8
tick,0x7ffdf681f424,59105903,0,0x0,8
tick,0x7ffdf681f424,59107895,0,0x0,8
tick,0x7ffdf681f424,59109906,0,0x0,8
tick,0x7ffdf681f424,59111894,0,0x0,8
tick,0x7ffdf681f424,59113882,0,0x0,8
tick,0x7ffdf681f424,59122917,0,0x0,8
tick,0x7ffdf681f424,59125111,0,0x0,8
tick,0x7ffdf681f424,59126906,0,0x0,8
tick,0x7ffdf681f424,59128842,0,0x0,8
tick,0x7ffdf681f424,59130840,0,0x0,8
tick,0x7ffdf681f424,59132983,0,0x0,8
tick,0x7ffdf681f424,59134837,0,0x0,8
tick,0x7ffdf681f424,59136824,0,0x0,8
tick,0x7ffdf681f424,59138853,0,0x0,8
tick,0x7ffdf681f424,59140815,0,0x0,8
tick,0x7ffdf681f424,59142872,0,0x0,8
tick,0x7ffdf681f424,59144829,0,0x0,8
tick,0x7ffdf681f424,59146796,0,0x0,8
tick,0x7ffdf681f424,59149004,0,0x0,8
tick,0x7ffdf681f424,59150787,0,0x0,8
tick,0x7ffdf681f424,59152776,0,0x0,8
tick,0x7ffdf681f424,59154772,0,0x0,8
tick,0x7ffdf681f424,59156767,0,0x0,8
tick,0x7ffdf681f424,59158762,0,0x0,8
tick,0x7ffdf681f424,59161799,0,0x0,8
tick,0x7ffdf681f424,59163778,0,0x0,8
tick,0x7ffdf681f424,59165743,0,0x0,8
tick,0x7ffdf681f424,59176507,0,0x0,8
tick,0x7ffdf681f424,59177736,0,0x0,8
tick,0x7ffdf681f424,59179708,0,0x0,8
tick,0x7ffdf681f424,59181779,0,0x0,8
tick,0x7ffdf681f424,59183696,0,0x0,8
tick,0x7ffdf681f424,59185689,0,0x0,8
tick,0x7ffdf681f424,59187706,0,0x0,8
tick,0x7ffdf681f424,59189676,0,0x0,8
tick,0x7ffdf681f424,59191678,0,0x0,8
tick,0x7ffdf681f424,59205947,0,0x0,8
tick,0x7ffdf681f424,59207635,0,0x0,8
tick,0x7ffdf681f424,59209630,0,0x0,8
tick,0x7ffdf681f424,59211664,0,0x0,8
tick,0x7ffdf681f424,59213715,0,0x0,8
tick,0x7ffdf681f424,59215694,0,0x0,8
tick,0x7ffdf681f424,59217603,0,0x0,8
tick,0x7ffdf681f424,59219604,0,0x0,8
tick,0x7ffdf681f424,59221591,0,0x0,8
tick,0x7ffdf681f424,59223590,0,0x0,8
tick,0x7ffdf681f424,59225583,0,0x0,8
tick,0x7ffdf681f424,59227586,0,0x0,8
tick,0x7ffdf681f424,59229584,0,0x0,8
tick,0x7ffdf681f424,59231568,0,0x0,8
tick,0x7ffdf681f424,59233564,0,0x0,8
tick,0x7ffdf681f424,59235569,0,0x0,8
tick,0x7ffdf681f424,59237555,0,0x0,8
tick,0x7ffdf681f424,59239546,0,0x0,8
tick,0x7ffdf681f424,59241571,0,0x0,8
tick,0x7ffdf681f424,59243536,0,0x0,8
tick,0x7ffdf681f424,59245531,0,0x0,8
tick,0x7ffdf681f424,59247526,0,0x0,8
tick,0x7ffdf681f424,59249525,0,0x0,8
tick,0x7ffdf681f424,59251514,0,0x0,8
tick,0x7ffdf681f424,59253518,0,0x0,8
tick,0x7ffdf681f424,59255502,0,0x0,8
tick,0x7ffdf681f424,59258561,0,0x0,8
tick,0x7ffdf681f424,59259536,0,0x0,8
tick,0x7ffdf681f424,59261509,0,0x0,8
tick,0x7ffdf681f424,59271020,0,0x0,8
tick,0x7ffdf681f424,59271061,0,0x0,8
tick,0x7ffdf681f424,59272459,0,0x0,8
tick,0x7ffdf681f424,59274463,0,0x0,8
tick,0x7ffdf681f424,59276504,0,0x0,8
tick,0x7ffdf681f424,59278570,0,0x0,8
tick,0x7ffdf681f424,59280504,0,0x0,8
tick,0x7ffdf681f424,59282434,0,0x0,8
tick,0x7ffdf681f424,59284423,0,0x0,8
tick,0x7ffdf681f424,59286418,0,0x0,8
tick,0x7ffdf681f424,59290161,0,0x0,8
tick,0x7ffdf681f424,59292987,0,0x0,8
tick,0x7ffdf681f424,59294926,0,0x0,8
tick,0x7ffdf681f424,59304793,0,0x0,8
tick,0x7ffdf681f424,59306369,0,0x0,8
tick,0x7ffdf681f424,59308369,0,0x0,8
tick,0x7ffdf681f424,59310376,0,0x0,8
tick,0x7ffdf681f424,59312355,0,0x0,8
tick,0x7ffdf681f424,59314460,0,0x0,8
tick,0x7ffdf681f424,59316448,0,0x0,8
tick,0x7ffdf681f424,59318337,0,0x0,8
tick,0x7ffdf681f424,59320326,0,0x0,8
tick,0x7ffdf681f424,59322323,0,0x0,8
tick,0x7ffdf681f424,59324325,0,0x0,8
tick,0x7ffdf681f424,59326332,0,0x0,8
tick,0x7ffdf681f424,59328306,0,0x0,8
tick,0x7ffdf681f424,59330305,0,0x0,8
tick,0x7ffdf681f424,59332298,0,0x0,8
tick,0x7ffdf681f424,59334295,0,0x0,8
tick,0x7ffdf681f424,59336305,0,0x0,8
tick,0x7ffdf681f424,59338284,0,0x0,8
tick,0x7ffdf681f424,59340278,0,0x0,8
tick,0x7ffdf681f424,59342273,0,0x0,8
tick,0x7ffdf681f424,59344264,0,0x0,8
tick,0x7ffdf681f424,59346256,0,0x0,8
tick,0x7ffdf681f424,59348280,0,0x0,8
tick,0x7ffdf681f424,59352682,0,0x0,8
tick,0x7ffdf681f424,59364298,0,0x0,8
tick,0x7ffdf681f424,59366210,0,0x0,8
tick,0x7ffdf681f424,59368206,0,0x0,8
tick,0x7ffdf681f424,59370278,0,0x0,8
tick,0x7ffdf681f424,59372193,0,0x0,8
tick,0x7ffdf681f424,59374249,0,0x0,8
tick,0x7ffdf681f424,59376182,0,0x0,8
tick,0x7ffdf681f424,59378176,0,0x0,8
tick,0x7ffdf681f424,59380171,0,0x0,8
tick,0x7ffdf681f424,59382169,0,0x0,8
tick,0x7ffdf681f424,59384158,0,0x0,8
tick,0x7ffdf681f424,59386162,0,0x0,8
tick,0x7ffdf681f424,59388162,0,0x0,8
tick,0x7ffdf681f424,59390146,0,0x0,8
tick,0x7ffdf681f424,59392137,0,0x0,8
tick,0x7ffdf681f424,59394133,0,0x0,8
tick,0x7ffdf681f424,59396126,0,0x0,8
tick,0x7ffdf681f424,59398128,0,0x0,8
tick,0x7ffdf681f424,59413385,0,0x0,8
tick,0x7ffdf681f424,59415084,0,0x0,8
tick,0x7ffdf681f424,59417077,0,0x0,8
tick,0x7ffdf681f424,59419084,0,0x0,8
tick,0x7ffdf681f424,59421100,0,0x0,8
tick,0x7ffdf681f424,59423114,0,0x0,8
tick,0x7ffdf681f424,59425172,0,0x0,8
tick,0x7ffdf681f424,59427040,0,0x0,8
tick,0x7ffdf681f424,59429038,0,0x0,8
tick,0x7ffdf681f424,59431050,0,0x0,8
tick,0x7ffdf681f424,59433026,0,0x0,8
tick,0x7ffdf681f424,59435042,0,0x0,8
tick,0x7ffdf681f424,59437017,0,0x0,8
tick,0x7ffdf681f424,59439015,0,0x0,8
tick,0x7ffdf681f424,59441010,0,0x0,8
tick,0x7ffdf681f424,59443003,0,0x0,8
tick,0x7ffdf681f424,59445000,0,0x0,8
tick,0x7ffdf681f424,59446988,0,0x0,8
tick,0x7ffdf681f424,59448986,0,0x0,8
tick,0x7ffdf681f424,59451106,0,0x0,8
tick,0x7ffdf681f424,59453077,0,0x0,8
tick,0x7ffdf681f424,59455061,0,0x0,8
tick,0x7ffdf681f424,59463376,0,0x0,8
tick,0x7ffdf681f424,59464947,0,0x0,8
tick,0x7ffdf681f424,59466978,0,0x0,8
tick,0x7ffdf681f424,59468967,0,0x0,8
tick,0x7ffdf681f424,59470970,0,0x0,8
tick,0x7ffdf681f424,59472925,0,0x0,8
tick,0x7ffdf681f424,59474946,0,0x0,8
tick,0x7ffdf681f424,59476908,0,0x0,8
tick,0x7ffdf681f424,59478906,0,0x0,8
tick,0x7ffdf681f424,59480898,0,0x0,8
tick,0x7ffdf681f424,59482939,0,0x0,8
tick,0x7ffdf681f424,59484890,0,0x0,8
tick,0x7ffdf681f424,59486899,0,0x0,8
tick,0x7ffdf681f424,59488884,0,0x0,8
tick,0x7ffdf681f424,59490876,0,0x0,8
tick,0x7ffdf681f424,59492870,0,0x0,8
tick,0x7ffdf681f424,59494870,0,0x0,8
tick,0x7ffdf681f424,59496860,0,0x0,8
tick,0x7ffdf681f424,59498850,0,0x0,8
tick,0x7ffdf681f424,59500854,0,0x0,8
tick,0x7ffdf681f424,59502851,0,0x0,8
tick,0x7ffdf681f424,59505039,0,0x0,8
tick,0x7ffdf681f424,59516406,0,0x0,8
tick,0x7ffdf681f424,59521696,0,0x0,8
tick,0x7ffdf681f424,59522806,0,0x0,8
tick,0x7ffdf681f424,59524790,0,0x0,8
tick,0x7ffdf681f424,59540913,0,0x0,8
tick,0x7ffdf681f424,59543152,0,0x0,8
tick,0x7ffdf681f424,59545865,0,0x0,8
tick,0x7ffdf681f424,59547845,0,0x0,8
tick,0x7ffdf681f424,59549732,0,0x0,8
tick,0x7ffdf681f424,59552015,0,0x0,8
tick,0x7ffdf681f424,59553706,0,0x0,8
tick,0x7ffdf681f424,59555701,0,0x0,8
tick,0x7ffdf681f424,59557694,0,0x0,8
tick,0x7ffdf681f424,59559691,0,0x0,8
tick,0x7ffdf681f424,59561685,0,0x0,8
tick,0x7ffdf681f424,59563682,0,0x0,8
tick,0x7ffdf681f424,59565679,0,0x0,8
tick,0x7ffdf681f424,59567669,0,0x0,8
tick,0x7ffdf681f424,59569664,0,0x0,8
tick,0x7ffdf681f424,59571660,0,0x0,8
tick,0x7ffdf681f424,59573659,0,0x0,8
tick,0x7ffdf681f424,59575649,0,0x0,8
tick,0x7ffdf681f424,59577641,0,0x0,8
tick,0x7ffdf681f424,59579665,0,0x0,8
tick,0x7ffdf681f424,59581640,0,0x0,8
tick,0x7ffdf681f424,59583624,0,0x0,8
tick,0x7ffdf681f424,59585620,0,0x0,8
tick,0x7ffdf681f424,59587613,0,0x0,8
tick,0x7ffdf681f424,59601237,0,0x0,8
tick,0x7ffdf681f424,59602577,0,0x0,8
tick,0x7ffdf681f424,59604572,0,0x0,8
tick,0x7ffdf681f424,59606571,0,0x0,8
tick,0x7ffdf681f424,59608566,0,0x0,8
tick,0x7ffdf681f424,59610627,0,0x0,8
tick,0x7ffdf681f424,59612590,0,0x0,8
tick,0x7ffdf681f424,59614577,0,0x0,8
tick,0x7ffdf681f424,59616542,0,0x0,8
tick,0x7ffdf681f424,59618532,0,0x0,8
tick,0x7ffdf681f424,59620524,0,0x0,8
tick,0x7ffdf681f424,59622521,0,0x0,8
tick,0x7ffdf681f424,59624514,0,0x0,8
tick,0x7ffdf681f424,59626509,0,0x0,8
tick,0x7ffdf681f424,59628680,0,0x0,8
tick,0x7ffdf681f424,59632205,0,0x0,8
tick,0x7ffdf681f424,59637517,0,0x0,8
tick,0x7ffdf681f424,59639587,0,0x0,8
tick,0x7ffdf681f424,59641517,0,0x0,8
tick,0x7ffdf681f424,59643476,0,0x0,8
tick,0x7ffdf681f424,59645465,0,0x0,8
tick,0x7ffdf681f424,59647469,0,0x0,8
tick,0x7ffdf681f424,59649465,0,0x0,8
tick,0x7ffdf681f424,59651502,0,0x0,8
tick,0x7ffdf681f424,59653446,0,0x0,8
tick,0x7ffdf681f424,59655593,0,0x0,8
tick,0x7ffdf681f424,59657428,0,0x0,8
tick,0x7ffdf681f424,59659426,0,0x0,8
tick,0x7ffdf681f424,59661504,0,0x0,8
tick,0x7ffdf681f424,59663421,0,0x0,8
tick,0x7ffdf681f424,59665450,0,0x0,8
tick,0x7ffdf681f424,59667402,0,0x0,8
tick,0x7ffdf681f424,59682101,0,0x0,8
tick,0x7ffdf681f424,59682148,0,0x0,8
tick,0x7ffdf681f424,59683364,0,0x0,8
tick,0x7ffdf681f424,59685371,0,0x0,8
tick,0x7ffdf681f424,59687995,0,0x0,8
tick,0x7ffdf681f424,59689405,0,0x0,8
tick,0x7ffdf681f424,59691393,0,0x0,8
tick,0x7ffdf681f424,59693341,0,0x0,8
tick,0x7ffdf681f424,59695326,0,0x0,8
tick,0x7ffdf681f424,59697324,0,0x0,8
tick,0x7ffdf681f424,59699313,0,0x0,8
tick,0x7ffdf681f424,59701308,0,0x0,8
tick,0x7ffdf681f424,59703312,0,0x0,8
tick,0x7ffdf681f424,59705300,0,0x0,8
tick,0x7ffdf681f424,59707301,0,0x0,8
tick,0x7ffdf681f424,59709299,0,0x0,8
tick,0x7ffdf681f424,59711283,0,0x0,8
tick,0x7ffdf681f424,59713307,0,0x0,8
tick,0x7ffdf681f424,59715274,0,0x0,8
tick,0x7ffdf681f424,59717268,0,0x0,8
tick,0x7ffdf681f424,59719265,0,0x0,8
tick,0x7ffdf681f424,59721334,0,0x0,8
tick,0x7ffdf681f424,59723256,0,0x0,8
tick,0x7ffdf681f424,59725268,0,0x0,8
tick,0x7ffdf681f424,59727240,0,0x0,8
tick,0x7ffdf681f424,59729235,0,0x0,8
tick,0x7ffdf681f424,59731231,0,0x0,8
tick,0x7ffdf681f424,59733228,0,0x0,8
tick,0x7ffdf681f424,59735224,0,0x0,8
tick,0x7ffdf681f424,59737303,0,0x0,8
tick,0x7ffdf681f424,59742169,0,0x0,8
tick,0x7ffdf681f424,59744849,0,0x0,8
tick,0x7ffdf681f424,59753658,0,0x0,8
tick,0x7ffdf681f424,59755177,0,0x0,8
tick,0x7ffdf681f424,59757179,0,0x0,8
tick,0x7ffdf681f424,59759305,0,0x0,8
tick,0x7ffdf681f424,59761171,0,0x0,8
tick,0x7ffdf681f424,59763208,0,0x0,8
tick,0x7ffdf681f424,59765153,0,0x0,8
tick,0x7ffdf681f424,59767134,0,0x0,8
tick,0x7ffdf681f424,59769135,0,0x0,8
tick,0x7ffdf681f424,59771120,0,0x0,8
tick,0x7ffdf681f424,59773121,0,0x0,8
tick,0x7ffdf681f424,59775119,0,0x0,8
tick,0x7ffdf681f424,59777104,0,0x0,8
tick,0x7ffdf681f424,59779110,0,0x0,8
tick,0x7ffdf681f424,59791762,0,0x0,8
tick,0x7ffdf681f424,59793063,0,0x0,8
tick,0x7ffdf681f424,59795165,0,0x0,8
tick,0x7ffdf681f424,59797193,0,0x0,8
tick,0x7ffdf681f424,59799050,0,0x0,8
tick,0x7ffdf681f424,59801084,0,0x0,8
tick,0x7ffdf681f424,59803040,0,0x0,8
tick,0x7ffdf681f424,59805048,0,0x0,8
tick,0x7ffdf681f424,59807033,0,0x0,8
tick,0x7ffdf681f424,59809034,0,0x0,8
tick,0x7ffdf681f424,59811020,0,0x0,8
tick,0x7ffdf681f424,59813018,0,0x0,8
tick,0x7ffdf681f424,59815010,0,0x0,8
tick,0x7ffdf681f424,59819013,0,0x0,8
tick,0x7ffdf681f424,59821020,0,0x0,8
tick,0x7ffdf681f424,59823040,0,0x0,8
tick,0x7ffdf681f424,59824987,0,0x0,8
tick,0x7ffdf681f424,59826974,0,0x0,8
tick,0x7ffdf681f424,59828976,0,0x0,8
tick,0x7ffdf681f424,59831398,0,0x0,8
tick,0x7ffdf681f424,59832958,0,0x0,8
tick,0x7ffdf681f424,59834969,0,0x0,8
tick,0x7ffdf681f424,59836988,0,0x0,8
tick,0x7ffdf681f424,59838947,0,0x0,8
tick,0x7ffdf681f424,59840941,0,0x0,8
tick,0x7ffdf681f424,59843020,0,0x0,8
tick,0x7ffdf681f424,59845073,0,0x0,8
tick,0x7ffdf681f424,59847129,0,0x0,8
tick,0x7ffdf681f424,59848922,0,0x0,8
tick,0x7ffdf681f424,59850914,0,0x0,8
tick,0x7ffdf681f424,59852907,0,0x0,8
tick,0x7ffdf681f424,59854900,0,0x0,8
tick,0x7ffdf681f424,59856895,0,0x0,8
tick,0x7ffdf681f424,59858901,0,0x0,8
tick,0x7ffdf681f424,59860881,0,0x0,8
tick,0x7ffdf681f424,59862885,0,0x0,8
tick,0x7ffdf681f424,59864889,0,0x0,8
tick,0x7ffdf681f424,59879451,0,0x0,8
tick,0x7ffdf681f424,59880840,0,0x0,8
tick,0x7ffdf681f424,59882842,0,0x0,8
tick,0x7ffdf681f424,59884976,0,0x0,8
tick,0x7ffdf681f424,59886883,0,0x0,8
tick,0x7ffdf681f424,59889813,0,0x0,8
tick,0x7ffdf681f424,59891818,0,0x0,8
tick,0x7ffdf681f424,59893864,0,0x0,8
tick,0x7ffdf681f424,59899226,0,0x0,8
tick,0x7ffdf681f424,59900796,0,0x0,8
tick,0x7ffdf681f424,59907196,0,0x0,8
tick,0x7ffdf681f424,59912102,0,0x0,8
tick,0x7ffdf681f424,59913776,0,0x0,8
tick,0x7ffdf681f424,59915746,0,0x0,8
tick,0x7ffdf681f424,59917889,0,0x0,8
tick,0x7ffdf681f424,59919745,0,0x0,8
tick,0x7ffdf681f424,59921725,0,0x0,8
tick,0x7ffdf681f424,59923720,0,0x0,8
tick,0x7ffdf681f424,59925718,0,0x0,8
tick,0x7ffdf681f424,59927709,0,0x0,8
tick,0x7ffdf681f424,59929702,0,0x0,8
tick,0x7ffdf681f424,59931696,0,0x0,8
tick,0x7ffdf681f424,59933693,0,0x0,8
tick,0x7ffdf681f424,59935680,0,0x0,8
tick,0x7ffdf681f424,59937780,0,0x0,8
tick,0x7ffdf681f424,59939685,0,0x0,8
tick,0x7ffdf681f424,59941666,0,0x0,8
tick,0x7ffdf681f424,59943662,0,0x0,8
tick,0x7ffdf681f424,59945663,0,0x0,8
tick,0x7ffdf681f424,59947651,0,0x0,8
tick,0x7ffdf681f424,59949647,0,0x0,8
tick,0x7ffdf681f424,59951638,0,0x0,8
tick,0x7ffdf681f424,59953633,0,0x0,8
tick,0x7ffdf681f424,59955632,0,0x0,8
tick,0x7ffdf681f424,59957627,0,0x0,8
tick,0x7ffdf681f424,59959617,0,0x0,8
tick,0x7ffdf681f424,59961655,0,0x0,8
tick,0x7ffdf681f424,59963704,0,0x0,8
tick,0x7ffdf681f424,59965692,0,0x0,8
tick,0x7ffdf681f424,59967736,0,0x0,8
tick,0x7ffdf681f424,59969595,0,0x0,8
tick,0x7ffdf681f424,59971588,0,0x0,8
tick,0x7ffdf681f424,59973584,0,0x0,8
tick,0x7ffdf681f424,59975578,0,0x0,8
tick,0x7ffdf681f424,59977579,0,0x0,8
tick,0x7ffdf681f424,59990961,0,0x0,8
tick,0x7ffdf681f424,59992537,0,0x0,8
tick,0x7ffdf681f424,59994529,0,0x0,8
tick,0x7ffdf681f424,59997135,0,0x0,8
tick,0x7ffdf681f424,59998533,0,0x0,8
tick,0x7ffdf681f424,60000648,0,0x0,8
tick,0x7ffdf681f424,60002506,0,0x0,8
tick,0x7ffdf681f424,60004503,0,0x0,8
tick,0x7ffdf681f424,60006501,0,0x0,8
tick,0x7ffdf681f424,60008491,0,0x0,8
tick,0x7ffdf681f424,60010484,0,0x0,8
tick,0x7ffdf681f424,60012489,0,0x0,8
tick,0x7ffdf681f424,60014649,0,0x0,8
tick,0x7ffdf681f424,60016534,0,0x0,8
tick,0x7ffdf681f424,60019426,0,0x0,8
tick,0x7ffdf681f424,60020733,0,0x0,8
tick,0x7ffdf681f424,60022526,0,0x0,8
tick,0x7ffdf681f424,60024441,0,0x0,8
tick,0x7ffdf681f424,60026436,0,0x0,8
tick,0x7ffdf681f424,60028436,0,0x0,8
tick,0x7ffdf681f424,60030425,0,0x0,8
tick,0x7ffdf681f424,60032428,0,0x0,8
tick,0x7ffdf681f424,60034425,0,0x0,8
tick,0x7ffdf681f424,60036421,0,0x0,8
tick,0x7ffdf681f424,60038416,0,0x0,8
tick,0x7ffdf681f424,60040407,0,0x0,8
tick,0x7ffdf681f424,60042397,0,0x0,8
tick,0x7ffdf681f424,60044425,0,0x0,8
tick,0x7ffdf681f424,60046389,0,0x0,8
tick,0x7ffdf681f424,60048381,0,0x0,8
tick,0x7ffdf681f424,60050372,0,0x0,8
tick,0x7ffdf681f424,60052372,0,0x0,8
tick,0x7ffdf681f424,60054363,0,0x0,8
tick,0x7ffdf681f424,60056361,0,0x0,8
tick,0x7ffdf681f424,60058354,0,0x0,8
tick,0x7ffdf681f424,60060352,0,0x0,8
tick,0x7ffdf681f424,60062343,0,0x0,8
tick,0x7ffdf681f424,60064353,0,0x0,8
tick,0x7ffdf681f424,60066335,0,0x0,8
tick,0x7ffdf681f424,60068335,0,0x0,8
tick,0x7ffdf681f424,60070324,0,0x0,8
tick,0x7ffdf681f424,60072315,0,0x0,8
tick,0x7ffdf681f424,60074319,0,0x0,8
tick,0x7ffdf681f424,60076309,0,0x0,8
tick,0x7ffdf681f424,60085400,0,0x0,8
tick,0x7ffdf681f424,60085938,0,0x0,8
tick,0x7ffdf681f424,60094766,0,0x0,8
tick,0x7ffdf681f424,60096256,0,0x0,8
tick,0x7ffdf681f424,60098251,0,0x0,8
tick,0x7ffdf681f424,60100240,0,0x0,8
tick,0x7ffdf681f424,60102238,0,0x0,8
tick,0x7ffdf681f424,60104243,0,0x0,8
tick,0x7ffdf681f424,60106389,0,0x0,8
tick,0x7ffdf681f424,60108249,0,0x0,8
tick,0x7ffdf681f424,60110283,0,0x0,8
tick,0x7ffdf681f424,60112212,0,0x0,8
tick,0x7ffdf681f424,60114241,0,0x0,8
tick,0x7ffdf681f424,60116206,0,0x0,8
tick,0x7ffdf681f424,60118563,0,0x0,8
tick,0x7ffdf681f424,60120200,0,0x0,8
tick,0x7ffdf681f424,60122188,0,0x0,8
tick,0x7ffdf681f424,60124178,0,0x0,8
tick,0x7ffdf681f424,60126174,0,0x0,8
tick,0x7ffdf681f424,60128168,0,0x0,8
tick,0x7ffdf681f424,60130165,0,0x0,8
tick,0x7ffdf681f424,60132156,0,0x0,8
tick,0x7ffdf681f424,60134153,0,0x0,8
tick,0x7ffdf681f424,60136144,0,0x0,8
tick,0x7ffdf681f424,60138145,0,0x0,8
tick,0x7ffdf681f424,60140141,0,0x0,8
tick,0x7ffdf681f424,60142132,0,0x0,8
tick,0x7ffdf681f424,60144126,0,0x0,8
tick,0x7ffdf681f424,60146153,0,0x0,8
tick,0x7ffdf681f424,60148125,0,0x0,8
tick,0x7ffdf681f424,60163982,0,0x0,8
tick,0x7ffdf681f424,60165089,0,0x0,8
tick,0x7ffdf681f424,60167067,0,0x0,8
tick,0x7ffdf681f424,60169077,0,0x0,8
tick,0x7ffdf681f424,60171065,0,0x0,8
tick,0x7ffdf681f424,60173060,0,0x0,8
tick,0x7ffdf681f424,60175050,0,0x0,8
tick,0x7ffdf681f424,60177063,0,0x0,8
tick,0x7ffdf681f424,60179034,0,0x0,8
tick,0x7ffdf681f424,60181030,0,0x0,8
tick,0x7ffdf681f424,60183023,0,0x0,8
tick,0x7ffdf681f424,60185025,0,0x0,8
tick,0x7ffdf681f424,60187012,0,0x0,8
tick,0x7ffdf681f424,60189006,0,0x0,8
tick,0x7ffdf681f424,60191006,0,0x0,8
tick,0x7ffdf681f424,60206821,0,0x0,8
tick,0x7ffdf681f424,60206854,0,0x0,8
tick,0x7ffdf681f424,60207957,0,0x0,8
tick,0x7ffdf681f424,60209955,0,0x0,8
tick,0x7ffdf681f424,60211984,0,0x0,8
tick,0x7ffdf681f424,60214227,0,0x0,8
tick,0x7ffdf681f424,60216043,0,0x0,8
tick,0x7ffdf681f424,60217957,0,0x0,8
tick,0x7ffdf681f424,60219923,0,0x0,8
tick,0x7ffdf681f424,60221920,0,0x0,8
tick,0x7ffdf681f424,60223919,0,0x0,8
tick,0x7ffdf681f424,60225910,0,0x0,8
tick,0x7ffdf681f424,60227901,0,0x0,8
tick,0x7ffdf681f424,60229913,0,0x0,8
tick,0x7ffdf681f424,60231896,0,0x0,8
tick,0x7ffdf681f424,60233887,0,0x0,8
tick,0x7ffdf681f424,60235877,0,0x0,8
tick,0x7ffdf681f424,60237872,0,0x0,8
tick,0x7ffdf681f424,60239882,0,0x0,8
tick,0x7ffdf681f424,60241863,0,0x0,8
tick,0x7ffdf681f424,60243858,0,0x0,8
tick,0x7ffdf681f424,60245852,0,0x0,8
tick,0x7ffdf681f424,60247850,0,0x0,8
tick,0x7ffdf681f424,60249844,0,0x0,8
tick,0x7ffdf681f424,60251842,0,0x0,8
tick,0x7ffdf681f424,60253837,0,0x0,8
tick,0x7ffdf681f424,60255830,0,0x0,8
tick,0x7ffdf681f424,60257837,0,0x0,8
tick,0x7ffdf681f424,60259816,0,0x0,8
tick,0x7ffdf681f424,60261861,0,0x0,8
tick,0x7ffdf681f424,60263815,0,0x0,8
tick,0x7ffdf681f424,60265822,0,0x0,8
tick,0x7ffdf681f424,60267839,0,0x0,8
tick,0x7ffdf681f424,60269798,0,0x0,8
tick,0x7ffdf681f424,60271794,0,0x0,8
tick,0x7ffdf681f424,60273781,0,0x0,8
tick,0x7ffdf681f424,60275782,0,0x0,8
tick,0x7ffdf681f424,60291179,0,0x0,8
tick,0x7ffdf681f424,60303211,0,0x0,8
tick,0x7ffdf681f424,60304704,0,0x0,8
tick,0x7ffdf681f424,60306700,0,0x0,8
tick,0x7ffdf681f424,60308704,0,0x0,8
tick,0x7ffdf681f424,60310985,0,0x0,8
tick,0x7ffdf681f424,60312689,0,0x0,8
tick,0x7ffdf681f424,60314758,0,0x0,8
tick,0x7ffdf681f424,60316734,0,0x0,8
tick,0x7ffdf681f424,60318704,0,0x0,8
tick,0x7ffdf681f424,60320653,0,0x0,8
tick,0x7ffdf681f424,60322648,0,0x0,8
tick,0x7ffdf681f424,60324645,0,0x0,8
tick,0x7ffdf681f424,60326637,0,0x0,8
tick,0x7ffdf681f424,60328629,0,0x0,8
tick,0x7ffdf681f424,60330624,0,0x0,8
tick,0x7ffdf681f424,60332645,0,0x0,8
tick,0x7ffdf681f424,60334618,0,0x0,8
tick,0x7ffdf681f424,60336627,0,0x0,8
tick,0x7ffdf681f424,60338623,0,0x0,8
tick,0x7ffdf681f424,60340608,0,0x0,8
tick,0x7ffdf681f424,60342601,0,0x0,8
tick,0x7ffdf681f424,60344593,0,0x0,8
tick,0x7ffdf681f424,60346586,0,0x0,8
tick,0x7ffdf681f424,60348580,0,0x0,8
tick,0x7ffdf681f424,60350572,0,0x0,8
tick,0x7ffdf681f424,60352568,0,0x0,8
tick,0x7ffdf681f424,60354571,0,0x0,8
tick,0x7ffdf681f424,60356559,0,0x0,8
tick,0x7ffdf681f424,60358557,0,0x0,8
tick,0x7ffdf681f424,60360546,0,0x0,8
tick,0x7ffdf681f424,60363182,0,0x0,8
tick,0x7ffdf681f424,60364605,0,0x0,8
tick,0x7ffdf681f424,60366974,0,0x0,8
tick,0x7ffdf681f424,60368566,0,0x0,8
tick,0x7ffdf681f424,60370533,0,0x0,8
tick,0x7ffdf681f424,60372577,0,0x0,8
tick,0x7ffdf681f424,60374633,0,0x0,8
tick,0x7ffdf681f424,60376514,0,0x0,8
tick,0x7ffdf681f424,60378562,0,0x0,8
tick,0x7ffdf681f424,60380739,0,0x0,8
tick,0x7ffdf681f424,60382598,0,0x0,8
tick,0x7ffdf681f424,60384496,0,0x0,8
tick,0x7ffdf681f424,60401080,0,0x0,8
tick,0x7ffdf681f424,60401129,0,0x0,8
tick,0x7ffdf681f424,60402437,0,0x0,8
tick,0x7ffdf681f424,60404442,0,0x0,8
tick,0x7ffdf681f424,60406429,0,0x0,8
tick,0x7ffdf681f424,60408450,0,0x0,8
tick,0x7ffdf681f424,60410845,0,0x0,8
tick,0x7ffdf681f424,60412423,0,0x0,8
tick,0x7ffdf681f424,60414413,0,0x0,8
tick,0x7ffdf681f424,60416461,0,0x0,8
tick,0x7ffdf681f424,60418394,0,0x0,8
tick,0x7ffdf681f424,60420389,0,0x0,8
tick,0x7ffdf681f424,60422390,0,0x0,8
tick,0x7ffdf681f424,60424381,0,0x0,8
tick,0x7ffdf681f424,60426420,0,0x0,8
tick,0x7ffdf681f424,60428369,0,0x0,8
tick,0x7ffdf681f424,60430361,0,0x0,8
tick,0x7ffdf681f424,60432359,0,0x0,8
tick,0x7ffdf681f424,60434353,0,0x0,8
tick,0x7ffdf681f424,60436344,0,0x0,8
tick,0x7ffdf681f424,60438337,0,0x0,8
tick,0x7ffdf681f424,60440337,0,0x0,8
tick,0x7ffdf681f424,60442328,0,0x0,8
tick,0x7ffdf681f424,60444333,0,0x0,8
tick,0x7ffdf681f424,60446328,0,0x0,8
tick,0x7ffdf681f424,60448318,0,0x0,8
tick,0x7ffdf681f424,60450309,0,0x0,8
tick,0x7ffdf681f424,60452300,0,0x0,8
tick,0x7ffdf681f424,60454304,0,0x0,8
tick,0x7ffdf681f424,60456358,0,0x0,8
tick,0x7ffdf681f424,60458290,0,0x0,8
tick,0x7ffdf681f424,60460308,0,0x0,8
tick,0x7ffdf681f424,60462276,0,0x0,8
tick,0x7ffdf681f424,60464792,0,0x0,8
tick,0x7ffdf681f424,60475258,0,0x0,8
tick,0x7ffdf681f424,60477247,0,0x0,8
tick,0x7ffdf681f424,60479237,0,0x0,8
tick,0x7ffdf681f424,60481238,0,0x0,8
tick,0x7ffdf681f424,60483222,0,0x0,8
tick,0x7ffdf681f424,60485234,0,0x0,8
tick,0x7ffdf681f424,60487236,0,0x0,8
tick,0x7ffdf681f424,60489212,0,0x0,8
tick,0x7ffdf681f424,60491210,0,0x0,8
tick,0x7ffdf681f424,60493191,0,0x0,8
tick,0x7ffdf681f424,60495189,0,0x0,8
tick,0x7ffdf681f424,60497192,0,0x0,8
tick,0x7ffdf681f424,60501774,0,0x0,8
tick,0x7ffdf681f424,60503552,0,0x0,8
tick,0x7ffdf681f424,60505265,0,0x0,8
tick,0x7ffdf681f424,60507157,0,0x0,8
tick,0x7ffdf681f424,60509152,0,0x0,8
tick,0x7ffdf681f424,60513830,0,0x0,8
tick,0x7ffdf681f424,60515139,0,0x0,8
tick,0x7ffdf681f424,60517133,0,0x0,8
tick,0x7ffdf681f424,60519176,0,0x0,8
tick,0x7ffdf681f424,60521132,0,0x0,8
tick,0x7ffdf681f424,60523165,0,0x0,8
tick,0x7ffdf681f424,60525131,0,0x0,8
tick,0x7ffdf681f424,60527104,0,0x0,8
tick,0x7ffdf681f424,60529096,0,0x0,8
tick,0x7ffdf681f424,60531093,0,0x0,8
tick,0x7ffdf681f424,60533087,0,0x0,8
tick,0x7ffdf681f424,60535094,0,0x0,8
tick,0x7ffdf681f424,60537073,0,0x0,8
tick,0x7ffdf681f424,60539065,0,0x0,8
tick,0x7ffdf681f424,60541067,0,0x0,8
tick,0x7ffdf681f424,60543062,0,0x0,8
tick,0x7ffdf681f424,60545066,0,0x0,8
tick,0x7ffdf681f424,60547049,0,0x0,8
tick,0x7ffdf681f424,60549048,0,0x0,8
tick,0x7ffdf681f424,60551043,0,0x0,8
tick,0x7ffdf681f424,60553032,0,0x0,8
tick,0x7ffdf681f424,60555027,0,0x0,8
tick,0x7ffdf681f424,60558398,0,0x0,8
tick,0x7ffdf681f424,60560018,0,0x0,8
tick,0x7ffdf681f424,60562018,0,0x0,8
tick,0x7ffdf681f424,60564003,0,0x0,8
tick,0x7ffdf681f424,60566030,0,0x0,8
tick,0x7ffdf681f424,60567996,0,0x0,8
tick,0x7ffdf681f424,60572607,0,0x0,8
tick,0x7ffdf681f424,60576597,0,0x0,8
tick,0x7ffdf681f424,60579017,0,0x0,8
tick,0x7ffdf681f424,60586745,0,0x0,8
tick,0x7ffdf681f424,60587937,0,0x0,8
tick,0x7ffdf681f424,60589935,0,0x0,8
tick,0x7ffdf681f424,60591982,0,0x0,8
tick,0x7ffdf681f424,60593925,0,0x0,8
tick,0x7ffdf681f424,60610636,0,0x0,8
tick,0x7ffdf681f424,60616507,0,0x0,8
tick,0x7ffdf681f424,60617867,0,0x0,8
tick,0x7ffdf681f424,60619858,0,0x0,8
tick,0x7ffdf681f424,60621861,0,0x0,8
tick,0x7ffdf681f424,60623848,0,0x0,8
tick,0x7ffdf681f424,60625840,0,0x0,8
tick,0x7ffdf681f424,60627852,0,0x0,8
tick,0x7ffdf681f424,60629876,0,0x0,8
tick,0x7ffdf681f424,60631869,0,0x0,8
tick,0x7ffdf681f424,60633906,0,0x0,8
tick,0x7ffdf681f424,60635830,0,0x0,8
tick,0x7ffdf681f424,60637809,0,0x0,8
tick,0x7ffdf681f424,60639802,0,0x0,8
tick,0x7ffdf681f424,60641799,0,0x0,8
tick,0x7ffdf681f424,60643793,0,0x0,8
tick,0x7ffdf681f424,60645790,0,0x0,8
tick,0x7ffdf681f424,60647779,0,0x0,8
tick,0x7ffdf681f424,60649781,0,0x0,8
tick,0x7ffdf681f424,60651801,0,0x0,8
tick,0x7ffdf681f424,60653764,0,0x0,8
tick,0x7ffdf681f424,60655761,0,0x0,8
tick,0x7ffdf681f424,60657753,0,0x0,8
tick,0x7ffdf681f424,60659752,0,0x0,8
tick,0x7ffdf681f424,60661741,0,0x0,8
tick,0x7ffdf681f424,60663737,0,0x0,8
tick,0x7ffdf681f424,60665738,0,0x0,8
tick,0x7ffdf681f424,60667726,0,0x0,8
tick,0x7ffdf681f424,60669720,0,0x0,8
tick,0x7ffdf681f424,60671711,0,0x0,8
tick,0x7ffdf681f424,60673709,0,0x0,8
tick,0x7ffdf681f424,60675707,0,0x0,8
tick,0x7ffdf681f424,60677701,0,0x0,8
tick,0x7ffdf681f424,60679695,0,0x0,8
tick,0x7ffdf681f424,60681698,0,0x0,8
tick,0x7ffdf681f424,60683703,0,0x0,8
tick,0x7ffdf681f424,60686084,0,0x0,8
tick,0x7ffdf681f424,60687676,0,0x0,8
tick,0x7ffdf681f424,60689681,0,0x0,8
tick,0x7ffdf681f424,60691666,0,0x0,8
tick,0x7ffdf681f424,60693660,0,0x0,8
tick,0x7ffdf681f424,60695650,0,0x0,8
tick,0x7ffdf681f424,60697649,0,0x0,8
tick,0x7ffdf681f424,60699648,0,0x0,8
tick,0x7ffdf681f424,60704109,0,0x0,8
tick,0x7ffdf681f424,60704173,0,0x0,8
tick,0x7ffdf681f424,60705645,0,0x0,8
tick,0x7ffdf681f424,60714758,0,0x0,8
tick,0x7ffdf681f424,60716602,0,0x0,8
tick,0x7ffdf681f424,60718640,0,0x0,8
tick,0x7ffdf681f424,60720665,0,0x0,8
tick,0x7ffdf681f424,60722684,0,0x0,8
tick,0x7ffdf681f424,60724699,0,0x0,8
tick,0x7ffdf681f424,60726570,0,0x0,8
tick,0x7ffdf681f424,60728562,0,0x0,8
tick,0x7ffdf681f424,60730561,0,0x0,8
tick,0x7ffdf681f424,60732555,0,0x0,8
tick,0x7ffdf681f424,60734552,0,0x0,8
tick,0x7ffdf681f424,60739378,0,0x0,8
tick,0x7ffdf681f424,60748488,0,0x0,8
tick,0x7ffdf681f424,60751658,0,0x0,8
tick,0x7ffdf681f424,60753499,0,0x0,8
tick,0x7ffdf681f424,60755518,0,0x0,8
tick,0x7ffdf681f424,60757564,0,0x0,8
tick,0x7ffdf681f424,60759568,0,0x0,8
tick,0x7ffdf681f424,60761534,0,0x0,8
tick,0x7ffdf681f424,60763556,0,0x0,8
tick,0x7ffdf681f424,60765470,0,0x0,8
tick,0x7ffdf681f424,60767460,0,0x0,8
tick,0x7ffdf681f424,60769455,0,0x0,8
tick,0x7ffdf681f424,60771447,0,0x0,8
tick,0x7ffdf681f424,60773454,0,0x0,8
tick,0x7ffdf681f424,60775438,0,0x0,8
tick,0x7ffdf681f424,60777457,0,0x0,8
tick,0x7ffdf681f424,60779427,0,0x0,8
tick,0x7ffdf681f424,60781430,0,0x0,8
tick,0x7ffdf681f424,60783416,0,0x0,8
tick,0x7ffdf681f424,60785412,0,0x0,8
tick,0x7ffdf681f424,60787406,0,0x0,8
tick,0x7ffdf681f424,60789398,0,0x0,8
tick,0x7ffdf681f424,60791397,0,0x0,8
tick,0x7ffdf681f424,60793393,0,0x0,8
tick,0x7ffdf681f424,60795398,0,0x0,8
tick,0x7ffdf681f424,60797378,0,0x0,8
tick,0x7ffdf681f424,60799386,0,0x0,8
tick,0x7ffdf681f424,60801373,0,0x0,8
tick,0x7ffdf681f424,60803364,0,0x0,8
tick,0x7ffdf681f424,60805397,0,0x0,8
tick,0x7ffdf681f424,60807482,0,0x0,8
tick,0x7ffdf681f424,60809400,0,0x0,8
tick,0x7ffdf681f424,60813446,0,0x0,8
tick,0x7ffdf681f424,60817046,0,0x0,8
tick,0x7ffdf681f424,60818332,0,0x0,8
tick,0x7ffdf681f424,60820394,0,0x0,8
tick,0x7ffdf681f424,60822337,0,0x0,8
tick,0x7ffdf681f424,60824314,0,0x0,8
tick,0x7ffdf681f424,60826304,0,0x0,8
tick,0x7ffdf681f424,60828299,0,0x0,8
tick,0x7ffdf681f424,60830300,0,0x0,8
tick,0x7ffdf681f424,60832314,0,0x0,8
tick,0x7ffdf681f424,60834418,0,0x0,8
tick,0x7ffdf681f424,60836419,0,0x0,8
tick,0x7ffdf681f424,60838324,0,0x0,8
tick,0x7ffdf681f424,60846073,0,0x0,8
tick,0x7ffdf681f424,60848753,0,0x0,8
tick,0x7ffdf681f424,60850406,0,0x0,8
tick,0x7ffdf681f424,60852284,0,0x0,8
tick,0x7ffdf681f424,60856816,0,0x0,8
tick,0x7ffdf681f424,60858217,0,0x0,8
tick,0x7ffdf681f424,60860215,0,0x0,8
tick,0x7ffdf681f424,60862256,0,0x0,8
tick,0x7ffdf681f424,60864224,0,0x0,8
tick,0x7ffdf681f424,60866323,0,0x0,8
tick,0x7ffdf681f424,60868190,0,0x0,8
tick,0x7ffdf681f424,60870184,0,0x0,8
tick,0x7ffdf681f424,60872180,0,0x0,8
tick,0x7ffdf681f424,60874180,0,0x0,8
tick,0x7ffdf681f424,60876222,0,0x0,8
tick,0x7ffdf681f424,60878160,0,0x0,8
tick,0x7ffdf681f424,60880163,0,0x0,8
tick,0x7ffdf681f424,60882158,0,0x0,8
tick,0x7ffdf681f424,60884152,0,0x0,8
tick,0x7ffdf681f424,60886147,0,0x0,8
tick,0x7ffdf681f424,60888138,0,0x0,8
tick,0x7ffdf681f424,60890131,0,0x0,8
tick,0x7ffdf681f424,60892130,0,0x0,8
tick,0x7ffdf681f424,60894118,0,0x0,8
tick,0x7ffdf681f424,60896111,0,0x0,8
tick,0x7ffdf681f424,60898132,0,0x0,8
tick,0x7ffdf681f424,60900113,0,0x0,8
tick,0x7ffdf681f424,60902101,0,0x0,8
tick,0x7ffdf681f424,60904097,0,0x0,8
tick,0x7ffdf681f424,60906090,0,0x0,8
tick,0x7ffdf681f424,60909113,0,0x0,8
tick,0x7ffdf681f424,60911234,0,0x0,8
tick,0x7ffdf681f424,60923950,0,0x0,8
tick,0x7ffdf681f424,60925044,0,0x0,8
tick,0x7ffdf681f424,60927037,0,0x0,8
tick,0x7ffdf681f424,60929785,0,0x0,8
tick,0x7ffdf681f424,60931092,0,0x0,8
tick,0x7ffdf681f424,60933039,0,0x0,8
tick,0x7ffdf681f424,60935350,0,0x0,8
tick,0x7ffdf681f424,60937003,0,0x0,8
tick,0x7ffdf681f424,60939004,0,0x0,8
tick,0x7ffdf681f424,60940998,0,0x0,8
tick,0x7ffdf681f424,60943519,0,0x0,8
tick,0x7ffdf681f424,60957236,0,0x0,8
tick,0x7ffdf681f424,60957955,0,0x0,8
tick,0x7ffdf681f424,60959949,0,0x0,8
tick,0x7ffdf681f424,60962012,0,0x0,8
tick,0x7ffdf681f424,60963996,0,0x0,8
tick,0x7ffdf681f424,60965931,0,0x0,8
tick,0x7ffdf681f424,60967925,0,0x0,8
tick,0x7ffdf681f424,60969918,0,0x0,8
tick,0x7ffdf681f424,60971912,0,0x0,8
tick,0x7ffdf681f424,60973907,0,0x0,8
tick,0x7ffdf681f424,60975903,0,0x0,8
tick,0x7ffdf681f424,60977897,0,0x0,8
tick,0x7ffdf681f424,60979890,0,0x0,8
tick,0x7ffdf681f424,60981887,0,0x0,8
tick,0x7ffdf681f424,60983878,0,0x0,8
tick,0x7ffdf681f424,60985874,0,0x0,8
tick,0x7ffdf681f424,60987866,0,0x0,8
tick,0x7ffdf681f424,60989871,0,0x0,8
tick,0x7ffdf681f424,60991858,0,0x0,8
tick,0x7ffdf681f424,60993968,0,0x0,8
tick,0x7ffdf681f424,60995853,0,0x0,8
tick,0x7ffdf681f424,60997846,0,0x0,8
tick,0x7ffdf681f424,60999840,0,0x0,8
tick,0x7ffdf681f424,61014059,0,0x0,8
tick,0x7ffdf681f424,61031154,0,0x0,8
tick,0x7ffdf681f424,61032769,0,0x0,8
tick,0x7ffdf681f424,61034814,0,0x0,8
tick,0x7ffdf681f424,61036763,0,0x0,8
tick,0x7ffdf681f424,61038742,0,0x0,8
tick,0x7ffdf681f424,61040880,0,0x0,8
tick,0x7ffdf681f424,61042748,0,0x0,8
tick,0x7ffdf681f424,61044720,0,0x0,8
tick,0x7ffdf681f424,61046714,0,0x0,8
tick,0x7ffdf681f424,61048712,0,0x0,8
tick,0x7ffdf681f424,61050700,0,0x0,8
tick,0x7ffdf681f424,61052699,0,0x0,8
tick,0x7ffdf681f424,61054691,0,0x0,8
tick,0x7ffdf681f424,61056692,0,0x0,8
tick,0x7ffdf681f424,61058705,0,0x0,8
tick,0x7ffdf681f424,61060678,0,0x0,8
tick,0x7ffdf681f424,61062672,0,0x0,8
tick,0x7ffdf681f424,61064720,0,0x0,8
tick,0x7ffdf681f424,61066660,0,0x0,8
tick,0x7ffdf681f424,61068657,0,0x0,8
tick,0x7ffdf681f424,61070649,0,0x0,8
tick,0x7ffdf681f424,61072645,0,0x0,8
tick,0x7ffdf681f424,61074642,0,0x0,8
tick,0x7ffdf681f424,61076632,0,0x0,8
tick,0x7ffdf681f424,61090784,0,0x0,8
tick,0x7ffdf681f424,61092597,0,0x0,8
tick,0x7ffdf681f424,61094592,0,0x0,8
tick,0x7ffdf681f424,61096848,0,0x0,8
tick,0x7ffdf681f424,61098612,0,0x0,8
tick,0x7ffdf681f424,61100783,0,0x0,8
tick,0x7ffdf681f424,61102564,0,0x0,8
tick,0x7ffdf681f424,61104563,0,0x0,8
tick,0x7ffdf681f424,61106734,0,0x0,8
tick,0x7ffdf681f424,61108549,0,0x0,8
tick,0x7ffdf681f424,61110540,0,0x0,8
tick,0x7ffdf681f424,61112562,0,0x0,8
tick,0x7ffdf681f424,61115200,0,0x0,8
tick,0x7ffdf681f424,61116710,0,0x0,8
tick,0x7ffdf681f424,61119198,0,0x0,8
tick,0x7ffdf681f424,61120864,0,0x0,8
tick,0x7ffdf681f424,61122587,0,0x0,8
tick,0x7ffdf681f424,61124573,0,0x0,8
tick,0x7ffdf681f424,61126517,0,0x0,8
tick,0x7ffdf681f424,61128600,0,0x0,8
tick,0x7ffdf681f424,61130492,0,0x0,8
tick,0x7ffdf681f424,61132494,0,0x0,8
tick,0x7ffdf681f424,61134486,0,0x0,8
tick,0x7ffdf681f424,61136475,0,0x0,8
tick,0x7ffdf681f424,61138472,0,0x0,8
tick,0x7ffdf681f424,61140464,0,0x0,8
tick,0x7ffdf681f424,61142460,0,0x0,8
tick,0x7ffdf681f424,61144483,0,0x0,8
tick,0x7ffdf681f424,61147883,0,0x0,8
tick,0x7ffdf681f424,61149674,0,0x0,8
tick,0x7ffdf681f424,61151584,0,0x0,8
tick,0x7ffdf681f424,61153495,0,0x0,8
tick,0x7ffdf681f424,61155433,0,0x0,8
tick,0x7ffdf681f424,61157421,0,0x0,8
tick,0x7ffdf681f424,61167684,0,0x0,8
tick,0x7ffdf681f424,61170253,0,0x0,8
tick,0x7ffdf681f424,61171404,0,0x0,8
tick,0x7ffdf681f424,61173438,0,0x0,8
tick,0x7ffdf681f424,61175498,0,0x0,8
tick,0x7ffdf681f424,61177377,0,0x0,8
tick,0x7ffdf681f424,61179365,0,0x0,8
tick,0x7ffdf681f424,61182348,0,0x0,8
tick,0x7ffdf681f424,61183527,0,0x0,8
tick,0x7ffdf681f424,61185438,0,0x0,8
tick,0x7ffdf681f424,61187345,0,0x0,8
tick,0x7ffdf681f424,61189337,0,0x0,8
tick,0x7ffdf681f424,61191331,0,0x0,8
tick,0x7ffdf681f424,61193324,0,0x0,8
tick,0x7ffdf681f424,61195316,0,0x0,8
tick,0x7ffdf681f424,61197310,0,0x0,8
tick,0x7ffdf681f424,61199311,0,0x0,8
tick,0x7ffdf681f424,61201302,0,0x0,8
tick,0x7ffdf681f424,61203292,0,0x0,8
tick,0x7ffdf681f424,61205293,0,0x0,8
tick,0x7ffdf681f424,61207283,0,0x0,8
tick,0x7ffdf681f424,61209278,0,0x0,8
tick,0x7ffdf681f424,61211273,0,0x0,8
tick,0x7ffdf681f424,61213265,0,0x0,8
tick,0x7ffdf681f424,61215262,0,0x0,8
tick,0x7ffdf681f424,61217256,0,0x0,8
tick,0x7ffdf681f424,61219252,0,0x0,8
tick,0x7ffdf681f424,61221385,0,0x0,8
tick,0x7ffdf681f424,61223593,0,0x0,8
tick,0x7ffdf681f424,61227467,0,0x0,8
tick,0x7ffdf681f424,61229282,0,0x0,8
tick,0x7ffdf681f424,61231229,0,0x0,8
tick,0x7ffdf681f424,61233226,0,0x0,8
tick,0x7ffdf681f424,61235218,0,0x0,8
tick,0x7ffdf681f424,61237206,0,0x0,8
tick,0x7ffdf681f424,61239201,0,0x0,8
tick,0x7ffdf681f424,61242113,0,0x0,8
tick,0x7ffdf681f424,61246357,0,0x0,8
tick,0x7ffdf681f424,61254534,0,0x0,8
tick,0x7ffdf681f424,61256153,0,0x0,8
tick,0x7ffdf681f424,61258156,0,0x0,8
tick,0x7ffdf681f424,61260166,0,0x0,8
tick,0x7ffdf681f424,61262192,0,0x0,8
tick,0x7ffdf681f424,61264191,0,0x0,8
tick,0x7ffdf681f424,61266138,0,0x0,8
tick,0x7ffdf681f424,61268151,0,0x0,8
tick,0x7ffdf681f424,61270401,0,0x0,8
tick,0x7ffdf681f424,61272111,0,0x0,8
tick,0x7ffdf681f424,61274116,0,0x0,8
tick,0x7ffdf681f424,61276128,0,0x0,8
tick,0x7ffdf681f424,61278108,0,0x0,8
tick,0x7ffdf681f424,61280090,0,0x0,8
tick,0x7ffdf681f424,61282098,0,0x0,8
tick,0x7ffdf681f424,61284081,0,0x0,8
tick,0x7ffdf681f424,61286073,0,0x0,8
tick,0x7ffdf681f424,61288071,0,0x0,8
tick,0x7ffdf681f424,61290070,0,0x0,8
tick,0x7ffdf681f424,61292059,0,0x0,8
tick,0x7ffdf681f424,61294050,0,0x0,8
tick,0x7ffdf681f424,61296049,0,0x0,8
tick,0x7ffdf681f424,61298098,0,0x0,8
tick,0x7ffdf681f424,61300052,0,0x0,8
tick,0x7ffdf681f424,61302043,0,0x0,8
tick,0x7ffdf681f424,61304045,0,0x0,8
tick,0x7ffdf681f424,61306019,0,0x0,8
tick,0x7ffdf681f424,61320475,0,0x0,8
tick,0x7ffdf681f424,61321979,0,0x0,8
tick,0x7ffdf681f424,61323973,0,0x0,8
tick,0x7ffdf681f424,61326258,0,0x0,8
tick,0x7ffdf681f424,61328098,0,0x0,8
tick,0x7ffdf681f424,61330026,0,0x0,8
tick,0x7ffdf681f424,61331994,0,0x0,8
tick,0x7ffdf681f424,61333969,0,0x0,8
tick,0x7ffdf681f424,61335939,0,0x0,8
tick,0x7ffdf681f424,61337932,0,0x0,8
tick,0x7ffdf681f424,61339930,0,0x0,8
tick,0x7ffdf681f424,61341928,0,0x0,8
tick,0x7ffdf681f424,61344968,0,0x0,8
tick,0x7ffdf681f424,61358149,0,0x0,8
tick,0x7ffdf681f424,61359877,0,0x0,8
tick,0x7ffdf681f424,61361877,0,0x0,8
tick,0x7ffdf681f424,61363903,0,0x0,8
tick,0x7ffdf681f424,61365886,0,0x0,8
tick,0x7ffdf681f424,61367862,0,0x0,8
tick,0x7ffdf681f424,61369900,0,0x0,8
tick,0x7ffdf681f424,61371852,0,0x0,8
tick,0x7ffdf681f424,61373843,0,0x0,8
tick,0x7ffdf681f424,61375838,0,0x0,8
tick,0x7ffdf681f424,61377859,0,0x0,8
tick,0x7ffdf681f424,61379832,0,0x0,8
tick,0x7ffdf681f424,61382188,0,0x0,8
tick,0x7ffdf681f424,61383814,0,0x0,8
tick,0x7ffdf681f424,61385811,0,0x0,8
tick,0x7ffdf681f424,61390056,0,0x0,8
tick,0x7ffdf681f424,61401500,0,0x0,8
tick,0x7ffdf681f424,61402767,0,0x0,8
tick,0x7ffdf681f424,61404766,0,0x0,8
tick,0x7ffdf681f424,61407596,0,0x0,8
tick,0x7ffdf681f424,61408757,0,0x0,8
tick,0x7ffdf681f424,61410782,0,0x0,8
tick,0x7ffdf681f424,61412732,0,0x0,8
tick,0x7ffdf681f424,61414747,0,0x0,8
tick,0x7ffdf681f424,61416726,0,0x0,8
tick,0x7ffdf681f424,61418718,0,0x0,8
tick,0x7ffdf681f424,61420717,0,0x0,8
tick,0x7ffdf681f424,61422709,0,0x0,8
tick,0x7ffdf681f424,61424703,0,0x0,8
tick,0x7ffdf681f424,61426698,0,0x0,8
tick,0x7ffdf681f424,61428688,0,0x0,8
tick,0x7ffdf681f424,61430682,0,0x0,8
tick,0x7ffdf681f424,61432681,0,0x0,8
tick,0x7ffdf681f424,61434675,0,0x0,8
tick,0x7ffdf681f424,61436667,0,0x0,8
tick,0x7ffdf681f424,61438666,0,0x0,8
tick,0x7ffdf681f424,61440663,0,0x0,8
tick,0x7ffdf681f424,61453718,0,0x0,8
tick,0x7ffdf681f424,61455627,0,0x0,8
tick,0x7ffdf681f424,61457770,0,0x0,8
tick,0x7ffdf681f424,61459609,0,0x0,8
tick,0x7ffdf681f424,61461607,0,0x0,8
tick,0x7ffdf681f424,61463862,0,0x0,8
tick,0x7ffdf681f424,61465756,0,0x0,8
tick,0x7ffdf681f424,61467616,0,0x0,8
tick,0x7ffdf681f424,61469719,0,0x0,8
tick,0x7ffdf681f424,61471589,0,0x0,8
tick,0x7ffdf681f424,61473632,0,0x0,8
tick,0x7ffdf681f424,61475577,0,0x0,8
tick,0x7ffdf681f424,61477736,0,0x0,8
tick,0x7ffdf681f424,61479618,0,0x0,8
tick,0x7ffdf681f424,61481644,0,0x0,8
tick,0x7ffdf681f424,61483547,0,0x0,8
tick,0x7ffdf681f424,61485568,0,0x0,8
tick,0x7ffdf681f424,61488000,0,0x0,8
tick,0x7ffdf681f424,61489532,0,0x0,8
tick,0x7ffdf681f424,61491537,0,0x0,8
tick,0x7ffdf681f424,61493549,0,0x0,8
tick,0x7ffdf681f424,61495515,0,0x0,8
tick,0x7ffdf681f424,61497526,0,0x0,8
tick,0x7ffdf681f424,61499501,0,0x0,8
tick,0x7ffdf681f424,61501498,0,0x0,8
tick,0x7ffdf681f424,61503500,0,0x0,8
tick,0x7ffdf681f424,61505482,0,0x0,8
tick,0x7ffdf681f424,61507513,0,0x0,8
tick,0x7ffdf681f424,61509492,0,0x0,8
tick,0x7ffdf681f424,61511475,0,0x0,8
tick,0x7ffdf681f424,61513465,0,0x0,8
tick,0x7ffdf681f424,61515466,0,0x0,8
tick,0x7ffdf681f424,61517456,0,0x0,8
tick,0x7ffdf681f424,61519448,0,0x0,8
tick,0x7ffdf681f424,61521444,0,0x0,8
tick,0x7ffdf681f424,61523460,0,0x0,8
tick,0x7ffdf681f424,61525452,0,0x0,8
tick,0x7ffdf681f424,61527434,0,0x0,8
tick,0x7ffdf681f424,61540639,0,0x0,8
tick,0x7ffdf681f424,61542415,0,0x0,8
tick,0x7ffdf681f424,61544396,0,0x0,8
tick,0x7ffdf681f424,61546500,0,0x0,8
tick,0x7ffdf681f424,61548761,0,0x0,8
tick,0x7ffdf681f424,61550368,0,0x0,8
tick,0x7ffdf681f424,61552364,0,0x0,8
tick,0x7ffdf681f424,61554357,0,0x0,8
tick,0x7ffdf681f424,61556354,0,0x0,8
tick,0x7ffdf681f424,61558345,0,0x0,8
tick,0x7ffdf681f424,61560338,0,0x0,8
tick,0x7ffdf681f424,61562337,0,0x0,8
tick,0x7ffdf681f424,61564328,0,0x0,8
tick,0x7ffdf681f424,61566393,0,0x0,8
tick,0x7ffdf681f424,61568320,0,0x0,8
tick,0x7ffdf681f424,61570311,0,0x0,8
tick,0x7ffdf681f424,61572307,0,0x0,8
tick,0x7ffdf681f424,61574305,0,0x0,8
tick,0x7ffdf681f424,61576300,0,0x0,8
tick,0x7ffdf681f424,61578291,0,0x0,8
tick,0x7ffdf681f424,61580285,0,0x0,8
tick,0x7ffdf681f424,61582283,0,0x0,8
tick,0x7ffdf681f424,61584280,0,0x0,8
tick,0x7ffdf681f424,61586270,0,0x0,8
tick,0x7ffdf681f424,61588262,0,0x0,8
tick,0x7ffdf681f424,61590266,0,0x0,8
tick,0x7ffdf681f424,61592256,0,0x0,8
tick,0x7ffdf681f424,61594245,0,0x0,8
tick,0x7ffdf681f424,61596247,0,0x0,8
tick,0x7ffdf681f424,61600662,0,0x0,8
tick,0x7ffdf681f424,61615931,0,0x0,8
tick,0x7ffdf681f424,61617587,0,0x0,8
tick,0x7ffdf681f424,61619254,0,0x0,8
tick,0x7ffdf681f424,61621272,0,0x0,8
tick,0x7ffdf681f424,61626298,0,0x0,8
tick,0x7ffdf681f424,61636785,0,0x0,8
tick,0x7ffdf681f424,61638132,0,0x0,8
tick,0x7ffdf681f424,61640131,0,0x0,8
tick,0x7ffdf681f424,61642117,0,0x0,8
tick,0x7ffdf681f424,61644114,0,0x0,8
tick,0x7ffdf681f424,61646104,0,0x0,8
tick,0x7ffdf681f424,61648167,0,0x0,8
tick,0x7ffdf681f424,61650098,0,0x0,8
tick,0x7ffdf681f424,61652105,0,0x0,8
tick,0x7ffdf681f424,61657649,0,0x0,8
tick,0x7ffdf681f424,61659743,0,0x0,8
tick,0x7ffdf681f424,61661096,0,0x0,8
tick,0x7ffdf681f424,61663065,0,0x0,8
tick,0x7ffdf681f424,61665338,0,0x0,8
tick,0x7ffdf681f424,61667111,0,0x0,8
tick,0x7ffdf681f424,61669062,0,0x0,8
tick,0x7ffdf681f424,61671110,0,0x0,8
tick,0x7ffdf681f424,61673480,0,0x0,8
tick,0x7ffdf681f424,61675062,0,0x0,8
tick,0x7ffdf681f424,61677040,0,0x0,8
tick,0x7ffdf681f424,61679027,0,0x0,8
tick,0x7ffdf681f424,61681017,0,0x0,8
tick,0x7ffdf681f424,61683018,0,0x0,8
tick,0x7ffdf681f424,61685013,0,0x0,8
tick,0x7ffdf681f424,61687006,0,0x0,8
tick,0x7ffdf681f424,61691957,0,0x0,8
tick,0x7ffdf681f424,61692983,0,0x0,8
tick,0x7ffdf681f424,61695000,0,0x0,8
tick,0x7ffdf681f424,61696975,0,0x0,8
tick,0x7ffdf681f424,61698973,0,0x0,8
tick,0x7ffdf681f424,61701093,0,0x0,8
tick,0x7ffdf681f424,61720980,0,0x0,8
tick,0x7ffdf681f424,61721360,0,0x0,8
tick,0x7ffdf681f424,61722923,0,0x0,8
tick,0x7ffdf681f424,61724907,0,0x0,8
tick,0x7ffdf681f424,61726899,0,0x0,8
tick,0x7ffdf681f424,61733978,0,0x0,8
tick,0x7ffdf681f424,61747487,0,0x0,8
tick,0x7ffdf681f424,61748900,0,0x0,8
tick,0x7ffdf681f424,61750833,0,0x0,8
tick,0x7ffdf681f424,61752827,0,0x0,8
tick,0x7ffdf681f424,61754835,0,0x0,8
tick,0x7ffdf681f424,61756812,0,0x0,8
tick,0x7ffdf681f424,61758813,0,0x0,8
tick,0x7ffdf681f424,61760810,0,0x0,8
tick,0x7ffdf681f424,61762894,0,0x0,8
tick,0x7ffdf681f424,61764965,0,0x0,8
tick,0x7ffdf681f424,61766800,0,0x0,8
tick,0x7ffdf681f424,61768965,0,0x0,8
tick,0x7ffdf681f424,61770780,0,0x0,8
tick,0x7ffdf681f424,61772770,0,0x0,8
tick,0x7ffdf681f424,61774789,0,0x0,8
tick,0x7ffdf681f424,61776761,0,0x0,8
tick,0x7ffdf681f424,61778759,0,0x0,8
tick,0x7ffdf681f424,61780750,0,0x0,8
tick,0x7ffdf681f424,61782748,0,0x0,8
tick,0x7ffdf681f424,61784740,0,0x0,8
tick,0x7ffdf681f424,61786751,0,0x0,8
tick,0x7ffdf681f424,61788733,0,0x0,8
tick,0x7ffdf681f424,61790728,0,0x0,8
tick,0x7ffdf681f424,61792738,0,0x0,8
tick,0x7ffdf681f424,61794715,0,0x0,8
tick,0x7ffdf681f424,61796710,0,0x0,8
tick,0x7ffdf681f424,61798707,0,0x0,8
tick,0x7ffdf681f424,61800698,0,0x0,8
tick,0x7ffdf681f424,61802688,0,0x0,8
tick,0x7ffdf681f424,61804689,0,0x0,8
tick,0x7ffdf681f424,61806689,0,0x0,8
tick,0x7ffdf681f424,61808984,0,0x0,8
tick,0x7ffdf681f424,61813566,0,0x0,8
tick,0x7ffdf681f424,61816140,0,0x0,8
tick,0x7ffdf681f424,61825518,0,0x0,8
tick,0x7ffdf681f424,61826657,0,0x0,8
tick,0x7ffdf681f424,61828631,0,0x0,8
tick,0x7ffdf681f424,61830814,0,0x0,8
tick,0x7ffdf681f424,61832627,0,0x0,8
tick,0x7ffdf681f424,61834748,0,0x0,8
tick,0x7ffdf681f424,61836605,0,0x0,8
tick,0x7ffdf681f424,61838596,0,0x0,8
tick,0x7ffdf681f424,61840598,0,0x0,8
tick,0x7ffdf681f424,61842587,0,0x0,8
tick,0x7ffdf681f424,61844582,0,0x0,8
tick,0x7ffdf681f424,61846578,0,0x0,8
tick,0x7ffdf681f424,61848588,0,0x0,8
tick,0x7ffdf681f424,61863226,0,0x0,8
tick,0x7ffdf681f424,61864524,0,0x0,8
tick,0x7ffdf681f424,61866523,0,0x0,8
tick,0x7ffdf681f424,61868803,0,0x0,8
tick,0x7ffdf681f424,61870623,0,0x0,8
tick,0x7ffdf681f424,61872524,0,0x0,8
tick,0x7ffdf681f424,61874606,0,0x0,8
tick,0x7ffdf681f424,61876499,0,0x0,8
tick,0x7ffdf681f424,61878486,0,0x0,8
tick,0x7ffdf681f424,61880482,0,0x0,8
tick,0x7ffdf681f424,61882479,0,0x0,8
tick,0x7ffdf681f424,61884489,0,0x0,8
tick,0x7ffdf681f424,61886467,0,0x0,8
tick,0x7ffdf681f424,61888460,0,0x0,8
tick,0x7ffdf681f424,61890457,0,0x0,8
tick,0x7ffdf681f424,61892453,0,0x0,8
tick,0x7ffdf681f424,61894446,0,0x0,8
tick,0x7ffdf681f424,61897201,0,0x0,8
tick,0x7ffdf681f424,61898646,0,0x0,8
tick,0x7ffdf681f424,61900561,0,0x0,8
tick,0x7ffdf681f424,61902456,0,0x0,8
tick,0x7ffdf681f424,61904432,0,0x0,8
tick,0x7ffdf681f424,61906422,0,0x0,8
tick,0x7ffdf681f424,61908470,0,0x0,8
tick,0x7ffdf681f424,61910414,0,0x0,8
tick,0x7ffdf681f424,61912400,0,0x0,8
tick,0x7ffdf681f424,61914436,0,0x0,8
tick,0x7ffdf681f424,61916400,0,0x0,8
tick,0x7ffdf681f424,61918390,0,0x0,8
tick,0x7ffdf681f424,61920389,0,0x0,8
tick,0x7ffdf681f424,61922372,0,0x0,8
tick,0x7ffdf681f424,61924369,0,0x0,8
tick,0x7ffdf681f424,61926366,0,0x0,8
tick,0x7ffdf681f424,61928353,0,0x0,8
tick,0x7ffdf681f424,61930352,0,0x0,8
tick,0x7ffdf681f424,61932343,0,0x0,8
tick,0x7ffdf681f424,61934338,0,0x0,8
tick,0x7ffdf681f424,61936334,0,0x0,8
tick,0x7ffdf681f424,61938326,0,0x0,8
tick,0x7ffdf681f424,61940696,0,0x0,8
tick,0x7ffdf681f424,61942614,0,0x0,8
tick,0x7ffdf681f424,61944326,0,0x0,8
tick,0x7ffdf681f424,61946370,0,0x0,8
tick,0x7ffdf681f424,61948628,0,0x0,8
tick,0x7ffdf681f424,61955211,0,0x0,8
tick,0x7ffdf681f424,61957924,0,0x0,8
tick,0x7ffdf681f424,61959267,0,0x0,8
tick,0x7ffdf681f424,61961259,0,0x0,8
tick,0x7ffdf681f424,61963258,0,0x0,8
tick,0x7ffdf681f424,61965276,0,0x0,8
tick,0x7ffdf681f424,61967306,0,0x0,8
tick,0x7ffdf681f424,61969539,0,0x0,8
tick,0x7ffdf681f424,61971263,0,0x0,8
tick,0x7ffdf681f424,61973275,0,0x0,8
tick,0x7ffdf681f424,61975232,0,0x0,8
tick,0x7ffdf681f424,61977226,0,0x0,8
tick,0x7ffdf681f424,61995112,0,0x0,8
tick,0x7ffdf681f424,61996177,0,0x0,8
tick,0x7ffdf681f424,61998199,0,0x0,8
tick,0x7ffdf681f424,62000354,0,0x0,8
tick,0x7ffdf681f424,62002158,0,0x0,8
tick,0x7ffdf681f424,62004176,0,0x0,8
tick,0x7ffdf681f424,62006184,0,0x0,8
tick,0x7ffdf681f424,62008145,0,0x0,8
tick,0x7ffdf681f424,62010139,0,0x0,8
tick,0x7ffdf681f424,62012133,0,0x0,8
tick,0x7ffdf681f424,62014130,0,0x0,8
tick,0x7ffdf681f424,62016133,0,0x0,8
tick,0x7ffdf681f424,62018115,0,0x0,8
tick,0x7ffdf681f424,62020110,0,0x0,8
tick,0x7ffdf681f424,62022105,0,0x0,8
tick,0x7ffdf681f424,62024100,0,0x0,8
tick,0x7ffdf681f424,62026098,0,0x0,8
tick,0x7ffdf681f424,62028110,0,0x0,8
tick,0x7ffdf681f424,62030080,0,0x0,8
tick,0x7ffdf681f424,62032083,0,0x0,8
tick,0x7ffdf681f424,62034086,0,0x0,8
tick,0x7ffdf681f424,62036068,0,0x0,8
tick,0x7ffdf681f424,62038396,0,0x0,8
tick,0x7ffdf681f424,62041647,0,0x0,8
tick,0x7ffdf681f424,62054240,0,0x0,8
tick,0x7ffdf681f424,62056030,0,0x0,8
tick,0x7ffdf681f424,62058012,0,0x0,8
tick,0x7ffdf681f424,62060032,0,0x0,8
tick,0x7ffdf681f424,62062015,0,0x0,8
tick,0x7ffdf681f424,62064048,0,0x0,8
tick,0x7ffdf681f424,62065994,0,0x0,8
tick,0x7ffdf681f424,62067983,0,0x0,8
tick,0x7ffdf681f424,62069976,0,0x0,8
tick,0x7ffdf681f424,62071975,0,0x0,8
tick,0x7ffdf681f424,62087785,0,0x0,8
tick,0x7ffdf681f424,62088933,0,0x0,8
tick,0x7ffdf681f424,62090925,0,0x0,8
tick,0x7ffdf681f424,62092928,0,0x0,8
tick,0x7ffdf681f424,62094963,0,0x0,8
tick,0x7ffdf681f424,62096915,0,0x0,8
tick,0x7ffdf681f424,62099003,0,0x0,8
tick,0x7ffdf681f424,62100909,0,0x0,8
tick,0x7ffdf681f424,62102898,0,0x0,8
tick,0x7ffdf681f424,62104893,0,0x0,8
tick,0x7ffdf681f424,62107189,0,0x0,8
tick,0x7ffdf681f424,62108874,0,0x0,8
tick,0x7ffdf681f424,62110869,0,0x0,8
tick,0x7ffdf681f424,62112861,0,0x0,8
tick,0x7ffdf681f424,62114883,0,0x0,8
tick,0x7ffdf681f424,62116866,0,0x0,8
tick,0x7ffdf681f424,62118845,0,0x0,8
tick,0x7ffdf681f424,62120849,0,0x0,8
tick,0x7ffdf681f424,62122836,0,0x0,8
tick,0x7ffdf681f424,62124839,0,0x0,8
tick,0x7ffdf681f424,62126826,0,0x0,8
tick,0x7ffdf681f424,62128823,0,0x0,8
tick,0x7ffdf681f424,62130814,0,0x0,8
tick,0x7ffdf681f424,62132810,0,0x0,8
tick,0x7ffdf681f424,62134801,0,0x0,8
tick,0x7ffdf681f424,62137130,0,0x0,8
tick,0x7ffdf681f424,62138809,0,0x0,8
tick,0x7ffdf681f424,62140811,0,0x0,8
tick,0x7ffdf681f424,62142836,0,0x0,8
tick,0x7ffdf681f424,62144795,0,0x0,8
tick,0x7ffdf681f424,62146800,0,0x0,8
tick,0x7ffdf681f424,62148841,0,0x0,8
tick,0x7ffdf681f424,62151026,0,0x0,8
tick,0x7ffdf681f424,62152765,0,0x0,8
tick,0x7ffdf681f424,62154759,0,0x0,8
tick,0x7ffdf681f424,62156747,0,0x0,8
tick,0x7ffdf681f424,62158745,0,0x0,8
tick,0x7ffdf681f424,62160733,0,0x0,8
tick,0x7ffdf681f424,62175644,0,0x0,8
tick,0x7ffdf681f424,62175812,0,0x0,8
tick,0x7ffdf681f424,62177694,0,0x0,8
tick,0x7ffdf681f424,62179981,0,0x0,8
tick,0x7ffdf681f424,62182400,0,0x0,8
tick,0x7ffdf681f424,62183671,0,0x0,8
tick,0x7ffdf681f424,62185708,0,0x0,8
tick,0x7ffdf681f424,62187664,0,0x0,8
tick,0x7ffdf681f424,62189657,0,0x0,8
tick,0x7ffdf681f424,62191666,0,0x0,8
tick,0x7ffdf681f424,62193647,0,0x0,8
tick,0x7ffdf681f424,62195644,0,0x0,8
tick,0x7ffdf681f424,62197693,0,0x0,8
tick,0x7ffdf681f424,62199679,0,0x0,8
tick,0x7ffdf681f424,62201624,0,0x0,8
tick,0x7ffdf681f424,62203659,0,0x0,8
tick,0x7ffdf681f424,62205619,0,0x0,8
tick,0x7ffdf681f424,62207620,0,0x0,8
tick,0x7ffdf681f424,62209606,0,0x0,8
tick,0x7ffdf681f424,62211596,0,0x0,8
tick,0x7ffdf681f424,62213588,0,0x0,8
tick,0x7ffdf681f424,62215598,0,0x0,8
tick,0x7ffdf681f424,62217579,0,0x0,8
tick,0x7ffdf681f424,62219578,0,0x0,8
tick,0x7ffdf681f424,62221571,0,0x0,8
tick,0x7ffdf681f424,62223565,0,0x0,8
tick,0x7ffdf681f424,62225605,0,0x0,8
tick,0x7ffdf681f424,62227554,0,0x0,8
tick,0x7ffdf681f424,62229555,0,0x0,8
tick,0x7ffdf681f424,62231552,0,0x0,8
tick,0x7ffdf681f424,62233545,0,0x0,8
tick,0x7ffdf681f424,62235541,0,0x0,8
tick,0x7ffdf681f424,62249599,0,0x0,8
tick,0x7ffdf681f424,62251498,0,0x0,8
tick,0x7ffdf681f424,62254321,0,0x0,8
tick,0x7ffdf681f424,62255601,0,0x0,8
tick,0x7ffdf681f424,62257558,0,0x0,8
tick,0x7ffdf681f424,62259555,0,0x0,8
tick,0x7ffdf681f424,62261467,0,0x0,8
tick,0x7ffdf681f424,62263458,0,0x0,8
tick,0x7ffdf681f424,62265470,0,0x0,8
tick,0x7ffdf681f424,62268198,0,0x0,8
tick,0x7ffdf681f424,62273368,0,0x0,8
tick,0x7ffdf681f424,62274439,0,0x0,8
tick,0x7ffdf681f424,62276468,0,0x0,8
tick,0x7ffdf681f424,62278428,0,0x0,8
tick,0x7ffdf681f424,62280490,0,0x0,8
tick,0x7ffdf681f424,62282416,0,0x0,8
tick,0x7ffdf681f424,62284407,0,0x0,8
tick,0x7ffdf681f424,62286421,0,0x0,8
tick,0x7ffdf681f424,62288510,0,0x0,8
tick,0x7ffdf681f424,62290432,0,0x0,8
tick,0x7ffdf681f424,62292404,0,0x0,8
tick,0x7ffdf681f424,62294376,0,0x0,8
tick,0x7ffdf681f424,62296369,0,0x0,8
tick,0x7ffdf681f424,62298367,0,0x0,8
tick,0x7ffdf681f424,62300357,0,0x0,8
tick,0x7ffdf681f424,62302366,0,0x0,8
tick,0x7ffdf681f424,62304349,0,0x0,8
tick,0x7ffdf681f424,62306349,0,0x0,8
tick,0x7ffdf681f424,62308347,0,0x0,8
tick,0x7ffdf681f424,62310333,0,0x0,8
tick,0x7ffdf681f424,62312329,0,0x0,8
tick,0x7ffdf681f424,62314321,0,0x0,8
tick,0x7ffdf681f424,62316319,0,0x0,8
tick,0x7ffdf681f424,62318310,0,0x0,8
tick,0x7ffdf681f424,62330990,0,0x0,8
tick,0x7ffdf681f424,62331037,0,0x0,8
tick,0x7ffdf681f424,62332280,0,0x0,8
tick,0x7ffdf681f424,62334283,0,0x0,8
tick,0x7ffdf681f424,62336525,0,0x0,8
tick,0x7ffdf681f424,62338266,0,0x0,8
tick,0x7ffdf681f424,62340264,0,0x0,8
tick,0x7ffdf681f424,62342248,0,0x0,8
tick,0x7ffdf681f424,62344244,0,0x0,8
tick,0x7ffdf681f424,62346238,0,0x0,8
tick,0x7ffdf681f424,62348258,0,0x0,8
tick,0x7ffdf681f424,62350229,0,0x0,8
tick,0x7ffdf681f424,62352226,0,0x0,8
tick,0x7ffdf681f424,62354217,0,0x0,8
tick,0x7ffdf681f424,62356207,0,0x0,8
tick,0x7ffdf681f424,62358250,0,0x0,8
tick,0x7ffdf681f424,62360224,0,0x0,8
tick,0x7ffdf681f424,62362200,0,0x0,8
tick,0x7ffdf681f424,62364194,0,0x0,8
tick,0x7ffdf681f424,62366210,0,0x0,8
tick,0x7ffdf681f424,62368189,0,0x0,8
tick,0x7ffdf681f424,62370177,0,0x0,8
tick,0x7ffdf681f424,62372168,0,0x0,8
tick,0x7ffdf681f424,62374167,0,0x0,8
tick,0x7ffdf681f424,62376160,0,0x0,8
tick,0x7ffdf681f424,62378156,0,0x0,8
tick,0x7ffdf681f424,62380418,0,0x0,8
tick,0x7ffdf681f424,62382294,0,0x0,8
tick,0x7ffdf681f424,62384260,0,0x0,8
tick,0x7ffdf681f424,62395708,0,0x0,8
tick,0x7ffdf681f424,62397103,0,0x0,8
tick,0x7ffdf681f424,62399103,0,0x0,8
tick,0x7ffdf681f424,62401116,0,0x0,8
tick,0x7ffdf681f424,62414524,0,0x0,8
tick,0x7ffdf681f424,62416058,0,0x0,8
tick,0x7ffdf681f424,62418054,0,0x0,8
tick,0x7ffdf681f424,62420301,0,0x0,8
tick,0x7ffdf681f424,62422278,0,0x0,8
tick,0x7ffdf681f424,62424033,0,0x0,8
tick,0x7ffdf681f424,62426052,0,0x0,8
tick,0x7ffdf681f424,62428034,0,0x0,8
tick,0x7ffdf681f424,62430008,0,0x0,8
tick,0x7ffdf681f424,62432055,0,0x0,8
tick,0x7ffdf681f424,62434009,0,0x0,8
tick,0x7ffdf681f424,62436004,0,0x0,8
tick,0x7ffdf681f424,62438022,0,0x0,8
tick,0x7ffdf681f424,62439988,0,0x0,8
tick,0x7ffdf681f424,62441986,0,0x0,8
tick,0x7ffdf681f424,62443977,0,0x0,8
tick,0x7ffdf681f424,62445976,0,0x0,8
tick,0x7ffdf681f424,62447976,0,0x0,8
tick,0x7ffdf681f424,62449968,0,0x0,8
tick,0x7ffdf681f424,62451951,0,0x0,8
tick,0x7ffdf681f424,62453947,0,0x0,8
tick,0x7ffdf681f424,62455946,0,0x0,8
tick,0x7ffdf681f424,62457956,0,0x0,8
tick,0x7ffdf681f424,62459935,0,0x0,8
tick,0x7ffdf681f424,62461928,0,0x0,8
tick,0x7ffdf681f424,62463922,0,0x0,8
tick,0x7ffdf681f424,62465937,0,0x0,8
tick,0x7ffdf681f424,62467916,0,0x0,8
tick,0x7ffdf681f424,62469913,0,0x0,8
tick,0x7ffdf681f424,62472976,0,0x0,8
tick,0x7ffdf681f424,62486137,0,0x0,8
tick,0x7ffdf681f424,62487865,0,0x0,8
tick,0x7ffdf681f424,62489860,0,0x0,8
tick,0x7ffdf681f424,62491850,0,0x0,8
tick,0x7ffdf681f424,62493847,0,0x0,8
tick,0x7ffdf681f424,62496643,0,0x0,8
tick,0x7ffdf681f424,62497866,0,0x0,8
tick,0x7ffdf681f424,62499834,0,0x0,8
tick,0x7ffdf681f424,62501825,0,0x0,8
tick,0x7ffdf681f424,62503823,0,0x0,8
tick,0x7ffdf681f424,62505816,0,0x0,8
tick,0x7ffdf681f424,62507814,0,0x0,8
tick,0x7ffdf681f424,62509805,0,0x0,8
tick,0x7ffdf681f424,62523773,0,0x0,8
tick,0x7ffdf681f424,62525758,0,0x0,8
tick,0x7ffdf681f424,62527752,0,0x0,8
tick,0x7ffdf681f424,62529750,0,0x0,8
tick,0x7ffdf681f424,62531869,0,0x0,8
tick,0x7ffdf681f424,62533784,0,0x0,8
tick,0x7ffdf681f424,62535813,0,0x0,8
tick,0x7ffdf681f424,62538764,0,0x0,8
tick,0x7ffdf681f424,62540719,0,0x0,8
tick,0x7ffdf681f424,62542712,0,0x0,8
tick,0x7ffdf681f424,62544705,0,0x0,8
tick,0x7ffdf681f424,62546704,0,0x0,8
tick,0x7ffdf681f424,62548696,0,0x0,8
tick,0x7ffdf681f424,62550694,0,0x0,8
tick,0x7ffdf681f424,62552683,0,0x0,8
tick,0x7ffdf681f424,62554704,0,0x0,8
tick,0x7ffdf681f424,62556676,0,0x0,8
tick,0x7ffdf681f424,62558668,0,0x0,8
tick,0x7ffdf681f424,62560666,0,0x0,8
tick,0x7ffdf681f424,62562680,0,0x0,8
tick,0x7ffdf681f424,62564671,0,0x0,8
tick,0x7ffdf681f424,62569680,0,0x0,8
tick,0x7ffdf681f424,62573752,0,0x0,8
tick,0x7ffdf681f424,62581877,0,0x0,8
tick,0x7ffdf681f424,62583605,0,0x0,8
tick,0x7ffdf681f424,62585874,0,0x0,8
tick,0x7ffdf681f424,62587663,0,0x0,8
tick,0x7ffdf681f424,62589611,0,0x0,8
tick,0x7ffdf681f424,62591584,0,0x0,8
tick,0x7ffdf681f424,62593577,0,0x0,8
tick,0x7ffdf681f424,62595568,0,0x0,8
tick,0x7ffdf681f424,62597569,0,0x0,8
tick,0x7ffdf681f424,62599566,0,0x0,8
tick,0x7ffdf681f424,62601553,0,0x0,8
tick,0x7ffdf681f424,62603551,0,0x0,8
tick,0x7ffdf681f424,62605543,0,0x0,8
tick,0x7ffdf681f424,62607538,0,0x0,8
tick,0x7ffdf681f424,62609530,0,0x0,8
tick,0x7ffdf681f424,62611523,0,0x0,8
tick,0x7ffdf681f424,62613522,0,0x0,8
tick,0x7ffdf681f424,62615520,0,0x0,8
tick,0x7ffdf681f424,62617509,0,0x0,8
tick,0x7ffdf681f424,62619504,0,0x0,8
tick,0x7ffdf681f424,62621501,0,0x0,8
tick,0x7ffdf681f424,62623499,0,0x0,8
tick,0x7ffdf681f424,62625513,0,0x0,8
tick,0x7ffdf681f424,62627485,0,0x0,8
tick,0x7ffdf681f424,62629481,0,0x0,8
tick,0x7ffdf681f424,62659195,0,0x0,8
tick,0x7ffdf681f424,62660403,0,0x0,8
tick,0x7ffdf681f424,62662398,0,0x0,8
tick,0x7ffdf681f424,62665398,0,0x0,8
tick,0x7ffdf681f424,62666543,0,0x0,8
tick,0x7ffdf681f424,62668431,0,0x0,8
tick,0x7ffdf681f424,62670379,0,0x0,8
tick,0x7ffdf681f424,62672471,0,0x0,8
tick,0x7ffdf681f424,62674371,0,0x0,8
tick,0x7ffdf681f424,62676355,0,0x0,8
tick,0x7ffdf681f424,62678350,0,0x0,8
tick,0x7ffdf681f424,62680349,0,0x0,8
tick,0x7ffdf681f424,62682355,0,0x0,8
tick,0x7ffdf681f424,62684341,0,0x0,8
tick,0x7ffdf681f424,62686340,0,0x0,8
tick,0x7ffdf681f424,62688327,0,0x0,8
tick,0x7ffdf681f424,62690319,0,0x0,8
tick,0x7ffdf681f424,62692319,0,0x0,8
tick,0x7ffdf681f424,62694307,0,0x0,8
tick,0x7ffdf681f424,62696307,0,0x0,8
tick,0x7ffdf681f424,62698299,0,0x0,8
tick,0x7ffdf681f424,62700297,0,0x0,8
tick,0x7ffdf681f424,62702292,0,0x0,8
tick,0x7ffdf681f424,62704284,0,0x0,8
tick,0x7ffdf681f424,62706286,0,0x0,8
tick,0x7ffdf681f424,62708277,0,0x0,8
tick,0x7ffdf681f424,62710264,0,0x0,8
tick,0x7ffdf681f424,62712261,0,0x0,8
tick,0x7ffdf681f424,62714258,0,0x0,8
tick,0x7ffdf681f424,62716246,0,0x0,8
tick,0x7ffdf681f424,62718252,0,0x0,8
tick,0x7ffdf681f424,62720283,0,0x0,8
tick,0x7ffdf681f424,62732861,0,0x0,8
tick,0x7ffdf681f424,62734206,0,0x0,8
tick,0x7ffdf681f424,62736203,0,0x0,8
tick,0x7ffdf681f424,62738813,0,0x0,8
tick,0x7ffdf681f424,62740226,0,0x0,8
tick,0x7ffdf681f424,62742241,0,0x0,8
tick,0x7ffdf681f424,62744176,0,0x0,8
tick,0x7ffdf681f424,62746170,0,0x0,8
tick,0x7ffdf681f424,62748165,0,0x0,8
tick,0x7ffdf681f424,62750173,0,0x0,8
tick,0x7ffdf681f424,62752157,0,0x0,8
tick,0x7ffdf681f424,62754150,0,0x0,8
tick,0x7ffdf681f424,62756154,0,0x0,8
tick,0x7ffdf681f424,62758136,0,0x0,8
tick,0x7ffdf681f424,62763308,0,0x0,8
tick,0x7ffdf681f424,62774753,0,0x0,8
tick,0x7ffdf681f424,62776091,0,0x0,8
tick,0x7ffdf681f424,62778086,0,0x0,8
tick,0x7ffdf681f424,62780116,0,0x0,8
tick,0x7ffdf681f424,62782120,0,0x0,8
tick,0x7ffdf681f424,62784114,0,0x0,8
tick,0x7ffdf681f424,62786180,0,0x0,8
tick,0x7ffdf681f424,62788056,0,0x0,8
tick,0x7ffdf681f424,62790050,0,0x0,8
tick,0x7ffdf681f424,62792064,0,0x0,8
tick,0x7ffdf681f424,62794047,0,0x0,8
tick,0x7ffdf681f424,62796048,0,0x0,8
tick,0x7ffdf681f424,62798029,0,0x0,8
tick,0x7ffdf681f424,62800024,0,0x0,8
tick,0x7ffdf681f424,62802021,0,0x0,8
tick,0x7ffdf681f424,62814135,0,0x0,8
tick,0x7ffdf681f424,62815988,0,0x0,8
tick,0x7ffdf681f424,62818053,0,0x0,8
tick,0x7ffdf681f424,62820057,0,0x0,8
tick,0x7ffdf681f424,62822016,0,0x0,8
tick,0x7ffdf681f424,62823966,0,0x0,8
tick,0x7ffdf681f424,62825955,0,0x0,8
tick,0x7ffdf681f424,62827951,0,0x0,8
tick,0x7ffdf681f424,62829946,0,0x0,8
tick,0x7ffdf681f424,62831942,0,0x0,8
tick,0x7ffdf681f424,62833934,0,0x0,8
tick,0x7ffdf681f424,62835951,0,0x0,8
tick,0x7ffdf681f424,62837920,0,0x0,8
tick,0x7ffdf681f424,62839979,0,0x0,8
tick,0x7ffdf681f424,62841912,0,0x0,8
tick,0x7ffdf681f424,62843907,0,0x0,8
tick,0x7ffdf681f424,62845898,0,0x0,8
tick,0x7ffdf681f424,62847900,0,0x0,8
tick,0x7ffdf681f424,62849892,0,0x0,8
tick,0x7ffdf681f424,62851890,0,0x0,8
tick,0x7ffdf681f424,62853879,0,0x0,8
tick,0x7ffdf681f424,62855876,0,0x0,8
tick,0x7ffdf681f424,62857877,0,0x0,8
tick,0x7ffdf681f424,62859864,0,0x0,8
tick,0x7ffdf681f424,62861873,0,0x0,8
tick,0x7ffdf681f424,62863865,0,0x0,8
tick,0x7ffdf681f424,62866561,0,0x0,8
tick,0x7ffdf681f424,62872382,0,0x0,8
tick,0x7ffdf681f424,62884822,0,0x0,8
tick,0x7ffdf681f424,62884864,0,0x0,8
tick,0x7ffdf681f424,62886795,0,0x0,8
tick,0x7ffdf681f424,62888790,0,0x0,8
tick,0x7ffdf681f424,62890961,0,0x0,8
tick,0x7ffdf681f424,62892804,0,0x0,8
tick,0x7ffdf681f424,62894879,0,0x0,8
tick,0x7ffdf681f424,62896792,0,0x0,8
tick,0x7ffdf681f424,62898785,0,0x0,8
tick,0x7ffdf681f424,62900755,0,0x0,8
tick,0x7ffdf681f424,62902765,0,0x0,8
tick,0x7ffdf681f424,62904744,0,0x0,8
tick,0x7ffdf681f424,62906754,0,0x0,8
tick,0x7ffdf681f424,62908751,0,0x0,8
tick,0x7ffdf681f424,62911950,0,0x0,8
tick,0x7ffdf681f424,62923322,0,0x0,8
tick,0x7ffdf681f424,62924716,0,0x0,8
tick,0x7ffdf681f424,62926690,0,0x0,8
tick,0x7ffdf681f424,62928712,0,0x0,8
tick,0x7ffdf681f424,62930673,0,0x0,8
tick,0x7ffdf681f424,62932674,0,0x0,8
tick,0x7ffdf681f424,62934668,0,0x0,8
tick,0x7ffdf681f424,62936660,0,0x0,8
tick,0x7ffdf681f424,62938664,0,0x0,8
tick,0x7ffdf681f424,62940653,0,0x0,8
tick,0x7ffdf681f424,62942642,0,0x0,8
tick,0x7ffdf681f424,62944652,0,0x0,8
tick,0x7ffdf681f424,62946630,0,0x0,8
tick,0x7ffdf681f424,62948650,0,0x0,8
tick,0x7ffdf681f424,62950651,0,0x0,8
tick,0x7ffdf681f424,62952618,0,0x0,8
tick,0x7ffdf681f424,62954671,0,0x0,8
tick,0x7ffdf681f424,62957428,0,0x0,8
tick,0x7ffdf681f424,62958600,0,0x0,8
tick,0x7ffdf681f424,62960651,0,0x0,8
tick,0x7ffdf681f424,62962593,0,0x0,8
tick,0x7ffdf681f424,62964599,0,0x0,8
tick,0x7ffdf681f424,62966585,0,0x0,8
tick,0x7ffdf681f424,62968580,0,0x0,8
tick,0x7ffdf681f424,62970569,0,0x0,8
tick,0x7ffdf681f424,62972570,0,0x0,8
tick,0x7ffdf681f424,62974561,0,0x0,8
tick,0x7ffdf681f424,62976553,0,0x0,8
tick,0x7ffdf681f424,62978623,0,0x0,8
tick,0x7ffdf681f424,62980545,0,0x0,8
tick,0x7ffdf681f424,62982740,0,0x0,8
tick,0x7ffdf681f424,62984537,0,0x0,8
tick,0x7ffdf681f424,62986527,0,0x0,8
tick,0x7ffdf681f424,62988518,0,0x0,8
tick,0x7ffdf681f424,62990516,0,0x0,8
tick,0x7ffdf681f424,62992506,0,0x0,8
tick,0x7ffdf681f424,62994505,0,0x0,8
tick,0x7ffdf681f424,62996497,0,0x0,8
tick,0x7ffdf681f424,62998492,0,0x0,8
tick,0x7ffdf681f424,63000487,0,0x0,8
tick,0x7ffdf681f424,63002482,0,0x0,8
tick,0x7ffdf681f424,63004492,0,0x0,8
tick,0x7ffdf681f424,63008872,0,0x0,8
tick,0x7ffdf681f424,63009523,0,0x0,8
tick,0x7ffdf681f424,63021465,0,0x0,8
tick,0x7ffdf681f424,63023441,0,0x0,8
tick,0x7ffdf681f424,63025783,0,0x0,8
tick,0x7ffdf681f424,63027421,0,0x0,8
tick,0x7ffdf681f424,63029417,0,0x0,8
tick,0x7ffdf681f424,63031461,0,0x0,8
tick,0x7ffdf681f424,63033406,0,0x0,8
tick,0x7ffdf681f424,63035397,0,0x0,8
tick,0x7ffdf681f424,63037414,0,0x0,8
tick,0x7ffdf681f424,63039383,0,0x0,8
tick,0x7ffdf681f424,63041382,0,0x0,8
tick,0x7ffdf681f424,63043379,0,0x0,8
tick,0x7ffdf681f424,63045375,0,0x0,8
tick,0x7ffdf681f424,63047362,0,0x0,8
tick,0x7ffdf681f424,63049372,0,0x0,8
tick,0x7ffdf681f424,63051353,0,0x0,8
tick,0x7ffdf681f424,63053343,0,0x0,8
tick,0x7ffdf681f424,63055344,0,0x0,8
tick,0x7ffdf681f424,63057338,0,0x0,8
tick,0x7ffdf681f424,63059584,0,0x0,8
tick,0x7ffdf681f424,63061389,0,0x0,8
tick,0x7ffdf681f424,63063333,0,0x0,8
tick,0x7ffdf681f424,63068211,0,0x0,8
tick,0x7ffdf681f424,63070110,0,0x0,8
tick,0x7ffdf681f424,63072300,0,0x0,8
tick,0x7ffdf681f424,63074294,0,0x0,8
tick,0x7ffdf681f424,63076288,0,0x0,8
tick,0x7ffdf681f424,63078291,0,0x0,8
tick,0x7ffdf681f424,63080337,0,0x0,8
tick,0x7ffdf681f424,63082313,0,0x0,8
tick,0x7ffdf681f424,63084290,0,0x0,8
tick,0x7ffdf681f424,63086280,0,0x0,8
tick,0x7ffdf681f424,63088266,0,0x0,8
tick,0x7ffdf681f424,63090309,0,0x0,8
tick,0x7ffdf681f424,63092246,0,0x0,8
tick,0x7ffdf681f424,63094241,0,0x0,8
tick,0x7ffdf681f424,63096238,0,0x0,8
tick,0x7ffdf681f424,63098230,0,0x0,8
tick,0x7ffdf681f424,63100225,0,0x0,8
tick,0x7ffdf681f424,63102221,0,0x0,8
tick,0x7ffdf681f424,63104212,0,0x0,8
tick,0x7ffdf681f424,63106203,0,0x0,8
tick,0x7ffdf681f424,63108214,0,0x0,8
tick,0x7ffdf681f424,63110196,0,0x0,8
tick,0x7ffdf681f424,63124996,0,0x0,8
tick,0x7ffdf681f424,63126155,0,0x0,8
tick,0x7ffdf681f424,63128158,0,0x0,8
tick,0x7ffdf681f424,63130156,0,0x0,8
tick,0x7ffdf681f424,63132212,0,0x0,8
tick,0x7ffdf681f424,63134167,0,0x0,8
tick,0x7ffdf681f424,63136134,0,0x0,8
tick,0x7ffdf681f424,63138152,0,0x0,8
tick,0x7ffdf681f424,63140118,0,0x0,8
tick,0x7ffdf681f424,63142109,0,0x0,8
tick,0x7ffdf681f424,63144104,0,0x0,8
tick,0x7ffdf681f424,63146100,0,0x0,8
tick,0x7ffdf681f424,63148092,0,0x0,8
tick,0x7ffdf681f424,63150092,0,0x0,8
tick,0x7ffdf681f424,63152083,0,0x0,8
tick,0x7ffdf681f424,63154076,0,0x0,8
tick,0x7ffdf681f424,63156074,0,0x0,8
tick,0x7ffdf681f424,63158076,0,0x0,8
tick,0x7ffdf681f424,63160122,0,0x0,8
tick,0x7ffdf681f424,63162053,0,0x0,8
tick,0x7ffdf681f424,63164049,0,0x0,8
tick,0x7ffdf681f424,63166053,0,0x0,8
tick,0x7ffdf681f424,63168365,0,0x0,8
tick,0x7ffdf681f424,63170467,0,0x0,8
tick,0x7ffdf681f424,63173947,0,0x0,8
tick,0x7ffdf681f424,63184577,0,0x0,8
tick,0x7ffdf681f424,63185994,0,0x0,8
tick,0x7ffdf681f424,63188003,0,0x0,8
tick,0x7ffdf681f424,63190134,0,0x0,8
tick,0x7ffdf681f424,63195282,0,0x0,8
tick,0x7ffdf681f424,63197117,0,0x0,8
tick,0x7ffdf681f424,63198960,0,0x0,8
tick,0x7ffdf681f424,63200962,0,0x0,8
tick,0x7ffdf681f424,63202944,0,0x0,8
tick,0x7ffdf681f424,63204942,0,0x0,8
tick,0x7ffdf681f424,63206973,0,0x0,8
tick,0x7ffdf681f424,63208929,0,0x0,8
tick,0x7ffdf681f424,63210923,0,0x0,8
tick,0x7ffdf681f424,63213350,0,0x0,8
tick,0x7ffdf681f424,63224720,0,0x0,8
tick,0x7ffdf681f424,63225892,0,0x0,8
tick,0x7ffdf681f424,63227887,0,0x0,8
tick,0x7ffdf681f424,63230040,0,0x0,8
tick,0x7ffdf681f424,63232194,0,0x0,8
tick,0x7ffdf681f424,63233892,0,0x0,8
tick,0x7ffdf681f424,63235870,0,0x0,8
tick,0x7ffdf681f424,63237854,0,0x0,8
tick,0x7ffdf681f424,63239850,0,0x0,8
tick,0x7ffdf681f424,63241844,0,0x0,8
tick,0x7ffdf681f424,63243838,0,0x0,8
tick,0x7ffdf681f424,63245846,0,0x0,8
tick,0x7ffdf681f424,63247827,0,0x0,8
tick,0x7ffdf681f424,63250680,0,0x0,8
tick,0x7ffdf681f424,63252870,0,0x0,8
tick,0x7ffdf681f424,63255054,0,0x0,8
tick,0x7ffdf681f424,63256864,0,0x0,8
tick,0x7ffdf681f424,63258809,0,0x0,8
tick,0x7ffdf681f424,63260798,0,0x0,8
tick,0x7ffdf681f424,63262787,0,0x0,8
tick,0x7ffdf681f424,63264780,0,0x0,8
tick,0x7ffdf681f424,63266781,0,0x0,8
tick,0x7ffdf681f424,63268782,0,0x0,8
tick,0x7ffdf681f424,63270928,0,0x0,8
tick,0x7ffdf681f424,63272785,0,0x0,8
tick,0x7ffdf681f424,63274833,0,0x0,8
tick,0x7ffdf681f424,63276805,0,0x0,8
tick,0x7ffdf681f424,63278764,0,0x0,8
tick,0x7ffdf681f424,63280738,0,0x0,8
tick,0x7ffdf681f424,63282737,0,0x0,8
tick,0x7ffdf681f424,63284731,0,0x0,8
tick,0x7ffdf681f424,63286734,0,0x0,8
tick,0x7ffdf681f424,63304629,0,0x0,8
tick,0x7ffdf681f424,63305682,0,0x0,8
tick,0x7ffdf681f424,63307671,0,0x0,8
tick,0x7ffdf681f424,63309743,0,0x0,8
tick,0x7ffdf681f424,63311725,0,0x0,8
tick,0x7ffdf681f424,63313713,0,0x0,8
tick,0x7ffdf681f424,63315663,0,0x0,8
tick,0x7ffdf681f424,63317648,0,0x0,8
tick,0x7ffdf681f424,63319634,0,0x0,8
tick,0x7ffdf681f424,63321631,0,0x0,8
tick,0x7ffdf681f424,63323651,0,0x0,8
tick,0x7ffdf681f424,63325624,0,0x0,8
tick,0x7ffdf681f424,63327612,0,0x0,8
tick,0x7ffdf681f424,63329608,0,0x0,8
tick,0x7ffdf681f424,63331611,0,0x0,8
tick,0x7ffdf681f424,63333606,0,0x0,8
tick,0x7ffdf681f424,63335617,0,0x0,8
tick,0x7ffdf681f424,63337597,0,0x0,8
tick,0x7ffdf681f424,63339588,0,0x0,8
tick,0x7ffdf681f424,63341644,0,0x0,8
tick,0x7ffdf681f424,63343573,0,0x0,8
tick,0x7ffdf681f424,63345580,0,0x0,8
tick,0x7ffdf681f424,63347571,0,0x0,8
tick,0x7ffdf681f424,63349557,0,0x0,8
tick,0x7ffdf681f424,63351552,0,0x0,8
tick,0x7ffdf681f424,63353567,0,0x0,8
tick,0x7ffdf681f424,63357584,0,0x0,8
tick,0x7ffdf681f424,63359543,0,0x0,8
tick,0x7ffdf681f424,63368874,0,0x0,8
tick,0x7ffdf681f424,63370502,0,0x0,8
tick,0x7ffdf681f424,63372521,0,0x0,8
tick,0x7ffdf681f424,63374716,0,0x0,8
tick,0x7ffdf681f424,63376534,0,0x0,8
tick,0x7ffdf681f424,63378515,0,0x0,8
tick,0x7ffdf681f424,63380503,0,0x0,8
tick,0x7ffdf681f424,63382472,0,0x0,8
tick,0x7ffdf681f424,63384462,0,0x0,8
tick,0x7ffdf681f424,63386453,0,0x0,8
tick,0x7ffdf681f424,63388472,0,0x0,8
tick,0x7ffdf681f424,63390458,0,0x0,8
tick,0x7ffdf681f424,63392441,0,0x0,8
tick,0x7ffdf681f424,63394433,0,0x0,8
tick,0x7ffdf681f424,63408743,0,0x0,8
tick,0x7ffdf681f424,63411141,0,0x0,8
tick,0x7ffdf681f424,63412387,0,0x0,8
tick,0x7ffdf681f424,63414381,0,0x0,8
tick,0x7ffdf681f424,63416431,0,0x0,8
tick,0x7ffdf681f424,63418549,0,0x0,8
tick,0x7ffdf681f424,63420367,0,0x0,8
tick,0x7ffdf681f424,63422365,0,0x0,8
tick,0x7ffdf681f424,63424359,0,0x0,8
tick,0x7ffdf681f424,63426348,0,0x0,8
tick,0x7ffdf681f424,63428347,0,0x0,8
tick,0x7ffdf681f424,63430338,0,0x0,8
tick,0x7ffdf681f424,63432477,0,0x0,8
tick,0x7ffdf681f424,63434330,0,0x0,8
tick,0x7ffdf681f424,63436320,0,0x0,8
tick,0x7ffdf681f424,63438317,0,0x0,8
tick,0x7ffdf681f424,63440311,0,0x0,8
tick,0x7ffdf681f424,63442306,0,0x0,8
tick,0x7ffdf681f424,63444298,0,0x0,8
tick,0x7ffdf681f424,63446308,0,0x0,8
tick,0x7ffdf681f424,63448291,0,0x0,8
tick,0x7ffdf681f424,63450285,0,0x0,8
tick,0x7ffdf681f424,63452277,0,0x0,8
tick,0x7ffdf681f424,63454276,0,0x0,8
tick,0x7ffdf681f424,63456267,0,0x0,8
tick,0x7ffdf681f424,63458332,0,0x0,8
tick,0x7ffdf681f424,63460264,0,0x0,8
tick,0x7ffdf681f424,63462347,0,0x0,8
tick,0x7ffdf681f424,63464281,0,0x0,8
tick,0x7ffdf681f424,63466245,0,0x0,8
tick,0x7ffdf681f424,63468256,0,0x0,8
tick,0x7ffdf681f424,63492842,0,0x0,8
tick,0x7ffdf681f424,63492876,0,0x0,8
tick,0x7ffdf681f424,63494175,0,0x0,8
tick,0x7ffdf681f424,63496205,0,0x0,8
tick,0x7ffdf681f424,63498571,0,0x0,8
tick,0x7ffdf681f424,63500155,0,0x0,8
tick,0x7ffdf681f424,63502196,0,0x0,8
tick,0x7ffdf681f424,63504163,0,0x0,8
tick,0x7ffdf681f424,63506484,0,0x0,8
tick,0x7ffdf681f424,63508146,0,0x0,8
tick,0x7ffdf681f424,63510176,0,0x0,8
tick,0x7ffdf681f424,63512197,0,0x0,8
tick,0x7ffdf681f424,63514118,0,0x0,8
tick,0x7ffdf681f424,63516111,0,0x0,8
tick,0x7ffdf681f424,63518102,0,0x0,8
tick,0x7ffdf681f424,63520110,0,0x0,8
tick,0x7ffdf681f424,63522096,0,0x0,8
tick,0x7ffdf681f424,63524091,0,0x0,8
tick,0x7ffdf681f424,63526087,0,0x0,8
tick,0x7ffdf681f424,63528070,0,0x0,8
tick,0x7ffdf681f424,63530060,0,0x0,8
tick,0x7ffdf681f424,63532827,0,0x0,8
tick,0x7ffdf681f424,63534663,0,0x0,8
tick,0x7ffdf681f424,63536804,0,0x0,8
tick,0x7ffdf681f424,63538063,0,0x0,8
tick,0x7ffdf681f424,63540060,0,0x0,8
tick,0x7ffdf681f424,63542055,0,0x0,8
tick,0x7ffdf681f424,63544033,0,0x0,8
tick,0x7ffdf681f424,63546029,0,0x0,8
tick,0x7ffdf681f424,63548026,0,0x0,8
tick,0x7ffdf681f424,63550021,0,0x0,8
tick,0x7ffdf681f424,63552013,0,0x0,8
tick,0x7ffdf681f424,63554032,0,0x0,8
tick,0x7ffdf681f424,63556001,0,0x0,8
tick,0x7ffdf681f424,63558002,0,0x0,8
tick,0x7ffdf681f424,63559993,0,0x0,8
tick,0x7ffdf681f424,63561990,0,0x0,8
tick,0x7ffdf681f424,63564838,0,0x0,8
tick,0x7ffdf681f424,63570544,0,0x0,8
tick,0x7ffdf681f424,63579725,0,0x0,8
tick,0x7ffdf681f424,63580941,0,0x0,8
tick,0x7ffdf681f424,63582946,0,0x0,8
tick,0x7ffdf681f424,63584942,0,0x0,8
tick,0x7ffdf681f424,63587023,0,0x0,8
tick,0x7ffdf681f424,63588958,0,0x0,8
tick,0x7ffdf681f424,63590913,0,0x0,8
tick,0x7ffdf681f424,63592903,0,0x0,8
tick,0x7ffdf681f424,63594897,0,0x0,8
tick,0x7ffdf681f424,63596895,0,0x0,8
tick,0x7ffdf681f424,63598888,0,0x0,8
tick,0x7ffdf681f424,63600894,0,0x0,8
tick,0x7ffdf681f424,63616933,0,0x0,8
tick,0x7ffdf681f424,63618851,0,0x0,8
tick,0x7ffdf681f424,63620833,0,0x0,8
tick,0x7ffdf681f424,63622853,0,0x0,8
tick,0x7ffdf681f424,63624825,0,0x0,8
tick,0x7ffdf681f424,63626904,0,0x0,8
tick,0x7ffdf681f424,63628910,0,0x0,8
tick,0x7ffdf681f424,63630803,0,0x0,8
tick,0x7ffdf681f424,63632800,0,0x0,8
tick,0x7ffdf681f424,63634794,0,0x0,8
tick,0x7ffdf681f424,63636799,0,0x0,8
tick,0x7ffdf681f424,63638808,0,0x0,8
tick,0x7ffdf681f424,63640821,0,0x0,8
tick,0x7ffdf681f424,63642774,0,0x0,8
tick,0x7ffdf681f424,63645928,0,0x0,8
tick,0x7ffdf681f424,63658875,0,0x0,8
tick,0x7ffdf681f424,63658918,0,0x0,8
tick,0x7ffdf681f424,63660731,0,0x0,8
tick,0x7ffdf681f424,63662905,0,0x0,8
tick,0x7ffdf681f424,63664790,0,0x0,8
tick,0x7ffdf681f424,63666741,0,0x0,8
tick,0x7ffdf681f424,63668708,0,0x0,8
tick,0x7ffdf681f424,63670701,0,0x0,8
tick,0x7ffdf681f424,63672693,0,0x0,8
tick,0x7ffdf681f424,63674685,0,0x0,8
tick,0x7ffdf681f424,63676679,0,0x0,8
tick,0x7ffdf681f424,63678673,0,0x0,8
tick,0x7ffdf681f424,63680674,0,0x0,8
tick,0x7ffdf681f424,63682664,0,0x0,8
tick,0x7ffdf681f424,63684660,0,0x0,8
tick,0x7ffdf681f424,63686653,0,0x0,8
tick,0x7ffdf681f424,63688651,0,0x0,8
tick,0x7ffdf681f424,63690643,0,0x0,8
tick,0x7ffdf681f424,63692639,0,0x0,8
tick,0x7ffdf681f424,63694634,0,0x0,8
tick,0x7ffdf681f424,63696628,0,0x0,8
tick,0x7ffdf681f424,63698626,0,0x0,8
tick,0x7ffdf681f424,63700629,0,0x0,8
tick,0x7ffdf681f424,63702618,0,0x0,8
tick,0x7ffdf681f424,63711942,0,0x0,8
tick,0x7ffdf681f424,63715220,0,0x0,8
tick,0x7ffdf681f424,63716623,0,0x0,8
tick,0x7ffdf681f424,63720090,0,0x0,8
tick,0x7ffdf681f424,63721607,0,0x0,8
tick,0x7ffdf681f424,63723595,0,0x0,8
tick,0x7ffdf681f424,63725555,0,0x0,8
tick,0x7ffdf681f424,63727547,0,0x0,8
tick,0x7ffdf681f424,63731368,0,0x0,8
tick,0x7ffdf681f424,63744379,0,0x0,8
tick,0x7ffdf681f424,63745564,0,0x0,8
tick,0x7ffdf681f424,63747512,0,0x0,8
tick,0x7ffdf681f424,63749524,0,0x0,8
tick,0x7ffdf681f424,63751484,0,0x0,8
tick,0x7ffdf681f424,63753480,0,0x0,8
tick,0x7ffdf681f424,63755473,0,0x0,8
tick,0x7ffdf681f424,63757467,0,0x0,8
tick,0x7ffdf681f424,63759710,0,0x0,8
tick,0x7ffdf681f424,63761705,0,0x0,8
tick,0x7ffdf681f424,63763879,0,0x0,8
tick,0x7ffdf681f424,63765687,0,0x0,8
tick,0x7ffdf681f424,63767439,0,0x0,8
tick,0x7ffdf681f424,63769440,0,0x0,8
tick,0x7ffdf681f424,63771428,0,0x0,8
tick,0x7ffdf681f424,63773424,0,0x0,8
tick,0x7ffdf681f424,63775471,0,0x0,8
tick,0x7ffdf681f424,63777415,0,0x0,8
tick,0x7ffdf681f424,63779408,0,0x0,8
tick,0x7ffdf681f424,63781399,0,0x0,8
tick,0x7ffdf681f424,63783397,0,0x0,8
tick,0x7ffdf681f424,63785401,0,0x0,8
tick,0x7ffdf681f424,63787383,0,0x0,8
tick,0x7ffdf681f424,63789376,0,0x0,8
tick,0x7ffdf681f424,63791377,0,0x0,8
tick,0x7ffdf681f424,63793368,0,0x0,8
tick,0x7ffdf681f424,63801153,0,0x0,8
tick,0x7ffdf681f424,63802644,0,0x0,8
tick,0x7ffdf681f424,63804454,0,0x0,8
tick,0x7ffdf681f424,63806633,0,0x0,8
tick,0x7ffdf681f424,63808337,0,0x0,8
tick,0x7ffdf681f424,63810380,0,0x0,8
tick,0x7ffdf681f424,63812331,0,0x0,8
tick,0x7ffdf681f424,63814516,0,0x0,8
tick,0x7ffdf681f424,63816418,0,0x0,8
tick,0x7ffdf681f424,63818309,0,0x0,8
tick,0x7ffdf681f424,63820308,0,0x0,8
tick,0x7ffdf681f424,63822292,0,0x0,8
tick,0x7ffdf681f424,63824289,0,0x0,8
tick,0x7ffdf681f424,63826280,0,0x0,8
tick,0x7ffdf681f424,63828273,0,0x0,8
tick,0x7ffdf681f424,63830264,0,0x0,8
tick,0x7ffdf681f424,63832274,0,0x0,8
tick,0x7ffdf681f424,63834259,0,0x0,8
tick,0x7ffdf681f424,63836288,0,0x0,8
tick,0x7ffdf681f424,63838260,0,0x0,8
tick,0x7ffdf681f424,63840242,0,0x0,8
tick,0x7ffdf681f424,63842236,0,0x0,8
tick,0x7ffdf681f424,63844228,0,0x0,8
tick,0x7ffdf681f424,63846236,0,0x0,8
tick,0x7ffdf681f424,63848231,0,0x0,8
tick,0x7ffdf681f424,63850225,0,0x0,8
tick,0x7ffdf681f424,63852208,0,0x0,8
tick,0x7ffdf681f424,63854251,0,0x0,8
tick,0x7ffdf681f424,63856463,0,0x0,8
tick,0x7ffdf681f424,63859190,0,0x0,8
tick,0x7ffdf681f424,63860380,0,0x0,8
tick,0x7ffdf681f424,63863819,0,0x0,8
tick,0x7ffdf681f424,63865188,0,0x0,8
tick,0x7ffdf681f424,63868551,0,0x0,8
tick,0x7ffdf681f424,63874600,0,0x0,8
tick,0x7ffdf681f424,63876154,0,0x0,8
tick,0x7ffdf681f424,63878144,0,0x0,8
tick,0x7ffdf681f424,63880148,0,0x0,8
tick,0x7ffdf681f424,63882175,0,0x0,8
tick,0x7ffdf681f424,63884196,0,0x0,8
tick,0x7ffdf681f424,63886136,0,0x0,8
tick,0x7ffdf681f424,63888132,0,0x0,8
tick,0x7ffdf681f424,63890160,0,0x0,8
tick,0x7ffdf681f424,63892110,0,0x0,8
tick,0x7ffdf681f424,63894109,0,0x0,8
tick,0x7ffdf681f424,63896108,0,0x0,8
tick,0x7ffdf681f424,63898113,0,0x0,8
tick,0x7ffdf681f424,63900091,0,0x0,8
tick,0x7ffdf681f424,63902184,0,0x0,8
tick,0x7ffdf681f424,63906968,0,0x0,8
tick,0x7ffdf681f424,63907282,0,0x0,8
tick,0x7ffdf681f424,63918322,0,0x0,8
tick,0x7ffdf681f424,63920041,0,0x0,8
tick,0x7ffdf681f424,63922031,0,0x0,8
tick,0x7ffdf681f424,63924046,0,0x0,8
tick,0x7ffdf681f424,63926059,0,0x0,8
tick,0x7ffdf681f424,63928013,0,0x0,8
tick,0x7ffdf681f424,63930007,0,0x0,8
tick,0x7ffdf681f424,63932005,0,0x0,8
tick,0x7ffdf681f424,63933995,0,0x0,8
tick,0x7ffdf681f424,63935992,0,0x0,8
tick,0x7ffdf681f424,63937990,0,0x0,8
tick,0x7ffdf681f424,63939982,0,0x0,8
tick,0x7ffdf681f424,63941974,0,0x0,8
tick,0x7ffdf681f424,63943968,0,0x0,8
tick,0x7ffdf681f424,63945960,0,0x0,8
tick,0x7ffdf681f424,63947966,0,0x0,8
tick,0x7ffdf681f424,63949949,0,0x0,8
tick,0x7ffdf681f424,63951942,0,0x0,8
tick,0x7ffdf681f424,63953937,0,0x0,8
tick,0x7ffdf681f424,63955934,0,0x0,8
tick,0x7ffdf681f424,63957927,0,0x0,8
tick,0x7ffdf681f424,63959990,0,0x0,8
tick,0x7ffdf681f424,63961922,0,0x0,8
tick,0x7ffdf681f424,63963910,0,0x0,8
tick,0x7ffdf681f424,63965904,0,0x0,8
tick,0x7ffdf681f424,63970023,0,0x0,8
tick,0x7ffdf681f424,63972218,0,0x0,8
tick,0x7ffdf681f424,63973887,0,0x0,8
tick,0x7ffdf681f424,63975930,0,0x0,8
tick,0x7ffdf681f424,63977890,0,0x0,8
tick,0x7ffdf681f424,63979924,0,0x0,8
tick,0x7ffdf681f424,63981960,0,0x0,8
tick,0x7ffdf681f424,63983863,0,0x0,8
tick,0x7ffdf681f424,63986087,0,0x0,8
tick,0x7ffdf681f424,63987959,0,0x0,8
tick,0x7ffdf681f424,63989862,0,0x0,8
tick,0x7ffdf681f424,63991847,0,0x0,8
tick,0x7ffdf681f424,63993838,0,0x0,8
tick,0x7ffdf681f424,63995846,0,0x0,8
tick,0x7ffdf681f424,63997839,0,0x0,8
tick,0x7ffdf681f424,63999838,0,0x0,8
tick,0x7ffdf681f424,64001811,0,0x0,8
tick,0x7ffdf681f424,64003807,0,0x0,8
tick,0x7ffdf681f424,64005806,0,0x0,8
tick,0x7ffdf681f424,64015241,0,0x0,8
tick,0x7ffdf681f424,64019680,0,0x0,8
tick,0x7ffdf681f424,64020769,0,0x0,8
tick,0x7ffdf681f424,64022762,0,0x0,8
tick,0x7ffdf681f424,64024953,0,0x0,8
tick,0x7ffdf681f424,64026946,0,0x0,8
tick,0x7ffdf681f424,64028818,0,0x0,8
tick,0x7ffdf681f424,64030834,0,0x0,8
tick,0x7ffdf681f424,64032732,0,0x0,8
tick,0x7ffdf681f424,64034726,0,0x0,8
tick,0x7ffdf681f424,64036732,0,0x0,8
tick,0x7ffdf681f424,64038712,0,0x0,8
tick,0x7ffdf681f424,64040711,0,0x0,8
tick,0x7ffdf681f424,64042708,0,0x0,8
tick,0x7ffdf681f424,64044694,0,0x0,8
tick,0x7ffdf681f424,64046697,0,0x0,8
tick,0x7ffdf681f424,64048689,0,0x0,8
tick,0x7ffdf681f424,64050683,0,0x0,8
tick,0x7ffdf681f424,64052689,0,0x0,8
tick,0x7ffdf681f424,64054672,0,0x0,8
tick,0x7ffdf681f424,64056673,0,0x0,8
tick,0x7ffdf681f424,64058663,0,0x0,8
tick,0x7ffdf681f424,64060668,0,0x0,8
tick,0x7ffdf681f424,64062684,0,0x0,8
tick,0x7ffdf681f424,64064641,0,0x0,8
tick,0x7ffdf681f424,64066640,0,0x0,8
tick,0x7ffdf681f424,64068700,0,0x0,8
tick,0x7ffdf681f424,64070642,0,0x0,8
tick,0x7ffdf681f424,64072710,0,0x0,8
tick,0x7ffdf681f424,64075673,0,0x0,8
tick,0x7ffdf681f424,64077621,0,0x0,8
tick,0x7ffdf681f424,64079659,0,0x0,8
tick,0x7ffdf681f424,64081616,0,0x0,8
tick,0x7ffdf681f424,64083605,0,0x0,8
tick,0x7ffdf681f424,64088087,0,0x0,8
tick,0x7ffdf681f424,64089816,0,0x0,8
tick,0x7ffdf681f424,64091580,0,0x0,8
tick,0x7ffdf681f424,64093582,0,0x0,8
tick,0x7ffdf681f424,64095580,0,0x0,8
tick,0x7ffdf681f424,64097562,0,0x0,8
tick,0x7ffdf681f424,64099560,0,0x0,8
tick,0x7ffdf681f424,64101754,0,0x0,8
tick,0x7ffdf681f424,64103575,0,0x0,8
tick,0x7ffdf681f424,64105806,0,0x0,8
tick,0x7ffdf681f424,64107580,0,0x0,8
tick,0x7ffdf681f424,64109688,0,0x0,8
tick,0x7ffdf681f424,64111879,0,0x0,8
tick,0x7ffdf681f424,64117086,0,0x0,8
tick,0x7ffdf681f424,64118503,0,0x0,8
tick,0x7ffdf681f424,64120546,0,0x0,8
tick,0x7ffdf681f424,64122502,0,0x0,8
tick,0x7ffdf681f424,64124496,0,0x0,8
tick,0x7ffdf681f424,64126515,0,0x0,8
tick,0x7ffdf681f424,64128486,0,0x0,8
tick,0x7ffdf681f424,64130465,0,0x0,8
tick,0x7ffdf681f424,64132607,0,0x0,8
tick,0x7ffdf681f424,64134568,0,0x0,8
tick,0x7ffdf681f424,64136481,0,0x0,8
tick,0x7ffdf681f424,64138508,0,0x0,8
tick,0x7ffdf681f424,64140450,0,0x0,8
tick,0x7ffdf681f424,64142435,0,0x0,8
tick,0x7ffdf681f424,64144430,0,0x0,8
tick,0x7ffdf681f424,64146429,0,0x0,8
tick,0x7ffdf681f424,64148421,0,0x0,8
tick,0x7ffdf681f424,64150485,0,0x0,8
tick,0x7ffdf681f424,64152425,0,0x0,8
tick,0x7ffdf681f424,64154405,0,0x0,8
tick,0x7ffdf681f424,64156407,0,0x0,8
tick,0x7ffdf681f424,64158391,0,0x0,8
tick,0x7ffdf681f424,64160394,0,0x0,8
tick,0x7ffdf681f424,64162382,0,0x0,8
tick,0x7ffdf681f424,64164382,0,0x0,8
tick,0x7ffdf681f424,64166371,0,0x0,8
tick,0x7ffdf681f424,64168366,0,0x0,8
tick,0x7ffdf681f424,64180340,0,0x0,8
tick,0x7ffdf681f424,64186161,0,0x0,8
tick,0x7ffdf681f424,64187316,0,0x0,8
tick,0x7ffdf681f424,64189317,0,0x0,8
tick,0x7ffdf681f424,64191906,0,0x0,8
tick,0x7ffdf681f424,64193316,0,0x0,8
tick,0x7ffdf681f424,64195309,0,0x0,8
tick,0x7ffdf681f424,64197294,0,0x0,8
tick,0x7ffdf681f424,64199288,0,0x0,8
tick,0x7ffdf681f424,64201276,0,0x0,8
tick,0x7ffdf681f424,64203273,0,0x0,8
tick,0x7ffdf681f424,64205267,0,0x0,8
tick,0x7ffdf681f424,64207263,0,0x0,8
tick,0x7ffdf681f424,64209254,0,0x0,8
tick,0x7ffdf681f424,64211250,0,0x0,8
tick,0x7ffdf681f424,64213243,0,0x0,8
tick,0x7ffdf681f424,64218389,0,0x0,8
tick,0x7ffdf681f424,64220239,0,0x0,8
tick,0x7ffdf681f424,64222350,0,0x0,8
tick,0x7ffdf681f424,64224220,0,0x0,8
tick,0x7ffdf681f424,64232992,0,0x0,8
tick,0x7ffdf681f424,64234211,0,0x0,8
tick,0x7ffdf681f424,64236191,0,0x0,8
tick,0x7ffdf681f424,64238493,0,0x0,8
tick,0x7ffdf681f424,64240207,0,0x0,8
tick,0x7ffdf681f424,64242176,0,0x0,8
tick,0x7ffdf681f424,64244306,0,0x0,8
tick,0x7ffdf681f424,64246161,0,0x0,8
tick,0x7ffdf681f424,64259412,0,0x0,8
tick,0x7ffdf681f424,64261157,0,0x0,8
tick,0x7ffdf681f424,64263117,0,0x0,8
tick,0x7ffdf681f424,64265368,0,0x0,8
tick,0x7ffdf681f424,64267172,0,0x0,8
tick,0x7ffdf681f424,64269182,0,0x0,8
tick,0x7ffdf681f424,64271094,0,0x0,8
tick,0x7ffdf681f424,64273085,0,0x0,8
tick,0x7ffdf681f424,64275092,0,0x0,8
tick,0x7ffdf681f424,64277084,0,0x0,8
tick,0x7ffdf681f424,64279071,0,0x0,8
tick,0x7ffdf681f424,64281071,0,0x0,8
tick,0x7ffdf681f424,64283060,0,0x0,8
tick,0x7ffdf681f424,64285053,0,0x0,8
tick,0x7ffdf681f424,64287366,0,0x0,8
tick,0x7ffdf681f424,64289316,0,0x0,8
tick,0x7ffdf681f424,64291073,0,0x0,8
tick,0x7ffdf681f424,64295558,0,0x0,8
tick,0x7ffdf681f424,64297052,0,0x0,8
tick,0x7ffdf681f424,64299045,0,0x0,8
tick,0x7ffdf681f424,64301024,0,0x0,8
tick,0x7ffdf681f424,64303066,0,0x0,8
tick,0x7ffdf681f424,64305024,0,0x0,8
tick,0x7ffdf681f424,64306997,0,0x0,8
tick,0x7ffdf681f424,64308984,0,0x0,8
tick,0x7ffdf681f424,64310973,0,0x0,8
tick,0x7ffdf681f424,64312972,0,0x0,8
tick,0x7ffdf681f424,64314965,0,0x0,8
tick,0x7ffdf681f424,64317016,0,0x0,8
tick,0x7ffdf681f424,64318987,0,0x0,8
tick,0x7ffdf681f424,64321052,0,0x0,8
tick,0x7ffdf681f424,64322958,0,0x0,8
tick,0x7ffdf681f424,64324954,0,0x0,8
tick,0x7ffdf681f424,64326942,0,0x0,8
tick,0x7ffdf681f424,64341932,0,0x0,8
tick,0x7ffdf681f424,64343910,0,0x0,8
tick,0x7ffdf681f424,64345902,0,0x0,8
tick,0x7ffdf681f424,64348383,0,0x0,8
tick,0x7ffdf681f424,64349891,0,0x0,8
tick,0x7ffdf681f424,64352497,0,0x0,8
tick,0x7ffdf681f424,64353877,0,0x0,8
tick,0x7ffdf681f424,64355868,0,0x0,8
tick,0x7ffdf681f424,64357862,0,0x0,8
tick,0x7ffdf681f424,64359856,0,0x0,8
tick,0x7ffdf681f424,64361932,0,0x0,8
tick,0x7ffdf681f424,64363854,0,0x0,8
tick,0x7ffdf681f424,64365852,0,0x0,8
tick,0x7ffdf681f424,64367858,0,0x0,8
tick,0x7ffdf681f424,64370088,0,0x0,8
tick,0x7ffdf681f424,64371935,0,0x0,8
tick,0x7ffdf681f424,64374186,0,0x0,8
tick,0x7ffdf681f424,64375915,0,0x0,8
tick,0x7ffdf681f424,64377814,0,0x0,8
tick,0x7ffdf681f424,64379854,0,0x0,8
tick,0x7ffdf681f424,64381800,0,0x0,8
tick,0x7ffdf681f424,64383796,0,0x0,8
tick,0x7ffdf681f424,64385784,0,0x0,8
tick,0x7ffdf681f424,64387784,0,0x0,8
tick,0x7ffdf681f424,64389861,0,0x0,8
tick,0x7ffdf681f424,64391789,0,0x0,8
tick,0x7ffdf681f424,64393821,0,0x0,8
tick,0x7ffdf681f424,64395764,0,0x0,8
tick,0x7ffdf681f424,64397753,0,0x0,8
tick,0x7ffdf681f424,64399747,0,0x0,8
tick,0x7ffdf681f424,64401741,0,0x0,8
tick,0x7ffdf681f424,64403734,0,0x0,8
tick,0x7ffdf681f424,64405734,0,0x0,8
tick,0x7ffdf681f424,64407730,0,0x0,8
tick,0x7ffdf681f424,64421069,0,0x0,8
tick,0x7ffdf681f424,64421151,0,0x0,8
tick,0x7ffdf681f424,64422722,0,0x0,8
tick,0x7ffdf681f424,64424685,0,0x0,8
tick,0x7ffdf681f424,64429051,0,0x0,8
tick,0x7ffdf681f424,64430715,0,0x0,8
tick,0x7ffdf681f424,64432662,0,0x0,8
tick,0x7ffdf681f424,64434671,0,0x0,8
tick,0x7ffdf681f424,64436650,0,0x0,8
tick,0x7ffdf681f424,64438643,0,0x0,8
tick,0x7ffdf681f424,64440636,0,0x0,8
tick,0x7ffdf681f424,64442638,0,0x0,8
tick,0x7ffdf681f424,64444636,0,0x0,8
tick,0x7ffdf681f424,64446626,0,0x0,8
tick,0x7ffdf681f424,64448621,0,0x0,8
tick,0x7ffdf681f424,64450613,0,0x0,8
tick,0x7ffdf681f424,64452604,0,0x0,8
tick,0x7ffdf681f424,64454597,0,0x0,8
tick,0x7ffdf681f424,64456606,0,0x0,8
tick,0x7ffdf681f424,64458596,0,0x0,8
tick,0x7ffdf681f424,64460587,0,0x0,8
tick,0x7ffdf681f424,64462580,0,0x0,8
tick,0x7ffdf681f424,64464611,0,0x0,8
tick,0x7ffdf681f424,64466571,0,0x0,8
tick,0x7ffdf681f424,64468563,0,0x0,8
tick,0x7ffdf681f424,64478544,0,0x0,8
tick,0x7ffdf681f424,64480545,0,0x0,8
tick,0x7ffdf681f424,64482528,0,0x0,8
tick,0x7ffdf681f424,64484589,0,0x0,8
tick,0x7ffdf681f424,64488277,0,0x0,8
tick,0x7ffdf681f424,64489583,0,0x0,8
tick,0x7ffdf681f424,64491512,0,0x0,8
tick,0x7ffdf681f424,64496158,0,0x0,8
tick,0x7ffdf681f424,64497490,0,0x0,8
tick,0x7ffdf681f424,64499521,0,0x0,8
tick,0x7ffdf681f424,64501735,0,0x0,8
tick,0x7ffdf681f424,64509910,0,0x0,8
tick,0x7ffdf681f424,64511455,0,0x0,8
tick,0x7ffdf681f424,64513449,0,0x0,8
tick,0x7ffdf681f424,64515474,0,0x0,8
tick,0x7ffdf681f424,64517493,0,0x0,8
tick,0x7ffdf681f424,64519448,0,0x0,8
tick,0x7ffdf681f424,64521717,0,0x0,8
tick,0x7ffdf681f424,64523518,0,0x0,8
tick,0x7ffdf681f424,64525414,0,0x0,8
tick,0x7ffdf681f424,64527406,0,0x0,8
tick,0x7ffdf681f424,64529402,0,0x0,8
tick,0x7ffdf681f424,64531396,0,0x0,8
tick,0x7ffdf681f424,64533406,0,0x0,8
tick,0x7ffdf681f424,64535387,0,0x0,8
tick,0x7ffdf681f424,64537380,0,0x0,8
tick,0x7ffdf681f424,64539377,0,0x0,8
tick,0x7ffdf681f424,64545156,0,0x0,8
tick,0x7ffdf681f424,64545198,0,0x0,8
tick,0x7ffdf681f424,64557440,0,0x0,8
tick,0x7ffdf681f424,64559321,0,0x0,8
tick,0x7ffdf681f424,64561358,0,0x0,8
tick,0x7ffdf681f424,64563309,0,0x0,8
tick,0x7ffdf681f424,64565372,0,0x0,8
tick,0x7ffdf681f424,64567301,0,0x0,8
tick,0x7ffdf681f424,64569311,0,0x0,8
tick,0x7ffdf681f424,64571291,0,0x0,8
tick,0x7ffdf681f424,64573286,0,0x0,8
tick,0x7ffdf681f424,64575284,0,0x0,8
tick,0x7ffdf681f424,64577272,0,0x0,8
tick,0x7ffdf681f424,64579293,0,0x0,8
tick,0x7ffdf681f424,64581264,0,0x0,8
tick,0x7ffdf681f424,64583268,0,0x0,8
tick,0x7ffdf681f424,64585255,0,0x0,8
tick,0x7ffdf681f424,64587274,0,0x0,8
tick,0x7ffdf681f424,64589239,0,0x0,8
tick,0x7ffdf681f424,64591236,0,0x0,8
tick,0x7ffdf681f424,64593227,0,0x0,8
tick,0x7ffdf681f424,64595230,0,0x0,8
tick,0x7ffdf681f424,64597222,0,0x0,8
tick,0x7ffdf681f424,64599340,0,0x0,8
tick,0x7ffdf681f424,64601213,0,0x0,8
tick,0x7ffdf681f424,64603208,0,0x0,8
tick,0x7ffdf681f424,64605204,0,0x0,8
tick,0x7ffdf681f424,64608593,0,0x0,8
tick,0x7ffdf681f424,64610195,0,0x0,8
tick,0x7ffdf681f424,64612217,0,0x0,8
tick,0x7ffdf681f424,64614188,0,0x0,8
tick,0x7ffdf681f424,64616173,0,0x0,8
tick,0x7ffdf681f424,64618882,0,0x0,8
tick,0x7ffdf681f424,64620158,0,0x0,8
tick,0x7ffdf681f424,64622154,0,0x0,8
tick,0x7ffdf681f424,64624523,0,0x0,8
tick,0x7ffdf681f424,64626248,0,0x0,8
tick,0x7ffdf681f424,64628282,0,0x0,8
tick,0x7ffdf681f424,64630460,0,0x0,8
tick,0x7ffdf681f424,64646547,0,0x0,8
tick,0x7ffdf681f424,64648090,0,0x0,8
tick,0x7ffdf681f424,64650098,0,0x0,8
tick,0x7ffdf681f424,64652377,0,0x0,8
tick,0x7ffdf681f424,64654099,0,0x0,8
tick,0x7ffdf681f424,64656101,0,0x0,8
tick,0x7ffdf681f424,64658078,0,0x0,8
tick,0x7ffdf681f424,64660054,0,0x0,8
tick,0x7ffdf681f424,64662049,0,0x0,8
tick,0x7ffdf681f424,64664039,0,0x0,8
tick,0x7ffdf681f424,64666035,0,0x0,8
tick,0x7ffdf681f424,64668041,0,0x0,8
tick,0x7ffdf681f424,64670045,0,0x0,8
tick,0x7ffdf681f424,64672017,0,0x0,8
tick,0x7ffdf681f424,64674018,0,0x0,8
tick,0x7ffdf681f424,64676018,0,0x0,8
tick,0x7ffdf681f424,64678003,0,0x0,8
tick,0x7ffdf681f424,64679997,0,0x0,8
tick,0x7ffdf681f424,64681995,0,0x0,8
tick,0x7ffdf681f424,64683988,0,0x0,8
tick,0x7ffdf681f424,64685979,0,0x0,8
tick,0x7ffdf681f424,64687975,0,0x0,8
tick,0x7ffdf681f424,64689976,0,0x0,8
tick,0x7ffdf681f424,64691966,0,0x0,8
tick,0x7ffdf681f424,64695575,0,0x0,8
tick,0x7ffdf681f424,64705181,0,0x0,8
tick,0x7ffdf681f424,64706936,0,0x0,8
tick,0x7ffdf681f424,64708971,0,0x0,8
tick,0x7ffdf681f424,64710940,0,0x0,8
tick,0x7ffdf681f424,64712930,0,0x0,8
tick,0x7ffdf681f424,64714915,0,0x0,8
tick,0x7ffdf681f424,64716898,0,0x0,8
tick,0x7ffdf681f424,64718891,0,0x0,8
tick,0x7ffdf681f424,64720887,0,0x0,8
tick,0x7ffdf681f424,64722885,0,0x0,8
tick,0x7ffdf681f424,64724874,0,0x0,8
tick,0x7ffdf681f424,64726913,0,0x0,8
tick,0x7ffdf681f424,64729414,0,0x0,8
tick,0x7ffdf681f424,64733739,0,0x0,8
tick,0x7ffdf681f424,64744587,0,0x0,8
tick,0x7ffdf681f424,64745875,0,0x0,8
tick,0x7ffdf681f424,64747818,0,0x0,8
tick,0x7ffdf681f424,64749810,0,0x0,8
tick,0x7ffdf681f424,64751810,0,0x0,8
tick,0x7ffdf681f424,64753842,0,0x0,8
tick,0x7ffdf681f424,64755822,0,0x0,8
tick,0x7ffdf681f424,64757815,0,0x0,8
tick,0x7ffdf681f424,64759786,0,0x0,8
tick,0x7ffdf681f424,64761780,0,0x0,8
tick,0x7ffdf681f424,64763774,0,0x0,8
tick,0x7ffdf681f424,64765780,0,0x0,8
tick,0x7ffdf681f424,64767762,0,0x0,8
tick,0x7ffdf681f424,64769766,0,0x0,8
tick,0x7ffdf681f424,64785148,0,0x0,8
tick,0x7ffdf681f424,64785208,0,0x0,8
tick,0x7ffdf681f424,64786719,0,0x0,8
tick,0x7ffdf681f424,64788708,0,0x0,8
tick,0x7ffdf681f424,64790778,0,0x0,8
tick,0x7ffdf681f424,64792743,0,0x0,8
tick,0x7ffdf681f424,64794712,0,0x0,8
tick,0x7ffdf681f424,64796686,0,0x0,8
tick,0x7ffdf681f424,64798672,0,0x0,8
tick,0x7ffdf681f424,64800670,0,0x0,8
tick,0x7ffdf681f424,64802707,0,0x0,8
tick,0x7ffdf681f424,64804667,0,0x0,8
tick,0x7ffdf681f424,64806683,0,0x0,8
tick,0x7ffdf681f424,64808656,0,0x0,8
tick,0x7ffdf681f424,64810649,0,0x0,8
tick,0x7ffdf681f424,64812653,0,0x0,8
tick,0x7ffdf681f424,64814649,0,0x0,8
tick,0x7ffdf681f424,64816640,0,0x0,8
tick,0x7ffdf681f424,64818629,0,0x0,8
tick,0x7ffdf681f424,64820626,0,0x0,8
tick,0x7ffdf681f424,64822632,0,0x0,8
tick,0x7ffdf681f424,64824612,0,0x0,8
tick,0x7ffdf681f424,64826605,0,0x0,8
tick,0x7ffdf681f424,64828606,0,0x0,8
tick,0x7ffdf681f424,64830594,0,0x0,8
tick,0x7ffdf681f424,64832593,0,0x0,8
tick,0x7ffdf681f424,64834583,0,0x0,8
tick,0x7ffdf681f424,64836582,0,0x0,8
tick,0x7ffdf681f424,64850092,0,0x0,8
tick,0x7ffdf681f424,64851556,0,0x0,8
tick,0x7ffdf681f424,64853641,0,0x0,8
tick,0x7ffdf681f424,64855560,0,0x0,8
tick,0x7ffdf681f424,64857546,0,0x0,8
tick,0x7ffdf681f424,64859540,0,0x0,8
tick,0x7ffdf681f424,64861521,0,0x0,8
tick,0x7ffdf681f424,64863510,0,0x0,8
tick,0x7ffdf681f424,64865519,0,0x0,8
tick,0x7ffdf681f424,64867508,0,0x0,8
tick,0x7ffdf681f424,64869495,0,0x0,8
tick,0x7ffdf681f424,64871531,0,0x0,8
tick,0x7ffdf681f424,64873483,0,0x0,8
tick,0x7ffdf681f424,64875480,0,0x0,8
tick,0x7ffdf681f424,64877468,0,0x0,8
tick,0x7ffdf681f424,64879477,0,0x0,8
tick,0x7ffdf681f424,64881459,0,0x0,8
tick,0x7ffdf681f424,64883454,0,0x0,8
tick,0x7ffdf681f424,64885449,0,0x0,8
tick,0x7ffdf681f424,64887451,0,0x0,8
tick,0x7ffdf681f424,64889953,0,0x0,8
tick,0x7ffdf681f424,64896605,0,0x0,8
tick,0x7ffdf681f424,64898414,0,0x0,8
tick,0x7ffdf681f424,64900410,0,0x0,8
tick,0x7ffdf681f424,64902451,0,0x0,8
tick,0x7ffdf681f424,64904399,0,0x0,8
tick,0x7ffdf681f424,64906449,0,0x0,8
tick,0x7ffdf681f424,64908426,0,0x0,8
tick,0x7ffdf681f424,64910407,0,0x0,8
tick,0x7ffdf681f424,64912384,0,0x0,8
tick,0x7ffdf681f424,64914411,0,0x0,8
tick,0x7ffdf681f424,64916368,0,0x0,8
tick,0x7ffdf681f424,64918371,0,0x0,8
tick,0x7ffdf681f424,64920355,0,0x0,8
tick,0x7ffdf681f424,64924672,0,0x0,8
tick,0x7ffdf681f424,64935751,0,0x0,8
tick,0x7ffdf681f424,64935791,0,0x0,8
tick,0x7ffdf681f424,64937314,0,0x0,8
tick,0x7ffdf681f424,64939306,0,0x0,8
tick,0x7ffdf681f424,64941302,0,0x0,8
tick,0x7ffdf681f424,64943302,0,0x0,8
tick,0x7ffdf681f424,64945506,0,0x0,8
tick,0x7ffdf681f424,64947301,0,0x0,8
tick,0x7ffdf681f424,64949569,0,0x0,8
tick,0x7ffdf681f424,64951280,0,0x0,8
tick,0x7ffdf681f424,64953266,0,0x0,8
tick,0x7ffdf681f424,64955267,0,0x0,8
tick,0x7ffdf681f424,64957294,0,0x0,8
tick,0x7ffdf681f424,64959251,0,0x0,8
tick,0x7ffdf681f424,64961246,0,0x0,8
tick,0x7ffdf681f424,64963236,0,0x0,8
tick,0x7ffdf681f424,64965238,0,0x0,8
tick,0x7ffdf681f424,64967233,0,0x0,8
tick,0x7ffdf681f424,64969226,0,0x0,8
tick,0x7ffdf681f424,64971217,0,0x0,8
tick,0x7ffdf681f424,64973216,0,0x0,8
tick,0x7ffdf681f424,64975207,0,0x0,8
tick,0x7ffdf681f424,64977204,0,0x0,8
tick,0x7ffdf681f424,64979245,0,0x0,8
tick,0x7ffdf681f424,64981202,0,0x0,8
tick,0x7ffdf681f424,64983188,0,0x0,8
tick,0x7ffdf681f424,64992145,0,0x0,8
tick,0x7ffdf681f424,65000411,0,0x0,8
tick,0x7ffdf681f424,65002159,0,0x0,8
tick,0x7ffdf681f424,65004188,0,0x0,8
tick,0x7ffdf681f424,65006129,0,0x0,8
tick,0x7ffdf681f424,65008133,0,0x0,8
tick,0x7ffdf681f424,65010127,0,0x0,8
tick,0x7ffdf681f424,65012195,0,0x0,8
tick,0x7ffdf681f424,65014106,0,0x0,8
tick,0x7ffdf681f424,65016282,0,0x0,8
tick,0x7ffdf681f424,65018092,0,0x0,8
tick,0x7ffdf681f424,65020092,0,0x0,8
tick,0x7ffdf681f424,65022101,0,0x0,8
tick,0x7ffdf681f424,65024096,0,0x0,8
tick,0x7ffdf681f424,65026074,0,0x0,8
tick,0x7ffdf681f424,65028076,0,0x0,8
tick,0x7ffdf681f424,65030062,0,0x0,8
tick,0x7ffdf681f424,65032081,0,0x0,8
tick,0x7ffdf681f424,65034077,0,0x0,8
tick,0x7ffdf681f424,65036056,0,0x0,8
tick,0x7ffdf681f424,65038042,0,0x0,8
tick,0x7ffdf681f424,65040034,0,0x0,8
tick,0x7ffdf681f424,65042033,0,0x0,8
tick,0x7ffdf681f424,65044022,0,0x0,8
tick,0x7ffdf681f424,65046018,0,0x0,8
tick,0x7ffdf681f424,65048014,0,0x0,8
tick,0x7ffdf681f424,65050019,0,0x0,8
tick,0x7ffdf681f424,65063584,0,0x0,8
tick,0x7ffdf681f424,65065524,0,0x0,8
tick,0x7ffdf681f424,65068281,0,0x0,8
tick,0x7ffdf681f424,65073717,0,0x0,8
tick,0x7ffdf681f424,65081124,0,0x0,8
tick,0x7ffdf681f424,65082946,0,0x0,8
tick,0x7ffdf681f424,65084940,0,0x0,8
tick,0x7ffdf681f424,65086936,0,0x0,8
tick,0x7ffdf681f424,65089380,0,0x0,8
tick,0x7ffdf681f424,65091640,0,0x0,8
tick,0x7ffdf681f424,65092927,0,0x0,8
tick,0x7ffdf681f424,65094895,0,0x0,8
tick,0x7ffdf681f424,65096907,0,0x0,8
tick,0x7ffdf681f424,65098878,0,0x0,8
tick,0x7ffdf681f424,65100872,0,0x0,8
tick,0x7ffdf681f424,65102873,0,0x0,8
tick,0x7ffdf681f424,65104864,0,0x0,8
tick,0x7ffdf681f424,65106856,0,0x0,8
tick,0x7ffdf681f424,65108853,0,0x0,8
tick,0x7ffdf681f424,65110846,0,0x0,8
tick,0x7ffdf681f424,65112838,0,0x0,8
tick,0x7ffdf681f424,65114832,0,0x0,8
tick,0x7ffdf681f424,65116830,0,0x0,8
tick,0x7ffdf681f424,65118837,0,0x0,8
tick,0x7ffdf681f424,65120818,0,0x0,8
tick,0x7ffdf681f424,65122834,0,0x0,8
tick,0x7ffdf681f424,65137267,0,0x0,8
tick,0x7ffdf681f424,65138779,0,0x0,8
tick,0x7ffdf681f424,65140769,0,0x0,8
tick,0x7ffdf681f424,65142766,0,0x0,8
tick,0x7ffdf681f424,65144789,0,0x0,8
tick,0x7ffdf681f424,65146782,0,0x0,8
tick,0x7ffdf681f424,65148896,0,0x0,8
tick,0x7ffdf681f424,65150740,0,0x0,8
tick,0x7ffdf681f424,65152736,0,0x0,8
tick,0x7ffdf681f424,65154729,0,0x0,8
tick,0x7ffdf681f424,65156723,0,0x0,8
tick,0x7ffdf681f424,65158720,0,0x0,8
tick,0x7ffdf681f424,65160708,0,0x0,8
tick,0x7ffdf681f424,65162704,0,0x0,8
tick,0x7ffdf681f424,65164706,0,0x0,8
tick,0x7ffdf681f424,65166696,0,0x0,8
tick,0x7ffdf681f424,65168688,0,0x0,8
tick,0x7ffdf681f424,65170691,0,0x0,8
tick,0x7ffdf681f424,65172689,0,0x0,8
tick,0x7ffdf681f424,65174678,0,0x0,8
tick,0x7ffdf681f424,65176691,0,0x0,8
tick,0x7ffdf681f424,65178663,0,0x0,8
tick,0x7ffdf681f424,65180670,0,0x0,8
tick,0x7ffdf681f424,65182658,0,0x0,8
tick,0x7ffdf681f424,65184653,0,0x0,8
tick,0x7ffdf681f424,65188012,0,0x0,8
tick,0x7ffdf681f424,65191404,0,0x0,8
tick,0x7ffdf681f424,65199220,0,0x0,8
tick,0x7ffdf681f424,65200611,0,0x0,8
tick,0x7ffdf681f424,65202608,0,0x0,8
tick,0x7ffdf681f424,65207584,0,0x0,8
tick,0x7ffdf681f424,65208602,0,0x0,8
tick,0x7ffdf681f424,65210582,0,0x0,8
tick,0x7ffdf681f424,65212584,0,0x0,8
tick,0x7ffdf681f424,65214569,0,0x0,8
tick,0x7ffdf681f424,65216566,0,0x0,8
tick,0x7ffdf681f424,65218555,0,0x0,8
tick,0x7ffdf681f424,65221803,0,0x0,8
tick,0x7ffdf681f424,65223545,0,0x0,8
tick,0x7ffdf681f424,65225561,0,0x0,8
tick,0x7ffdf681f424,65228711,0,0x0,8
tick,0x7ffdf681f424,65242752,0,0x0,8
tick,0x7ffdf681f424,65244983,0,0x0,8
tick,0x7ffdf681f424,65246557,0,0x0,8
tick,0x7ffdf681f424,65248765,0,0x0,8
tick,0x7ffdf681f424,65250795,0,0x0,8
tick,0x7ffdf681f424,65252473,0,0x0,8
tick,0x7ffdf681f424,65254470,0,0x0,8
tick,0x7ffdf681f424,65256498,0,0x0,8
tick,0x7ffdf681f424,65258469,0,0x0,8
tick,0x7ffdf681f424,65260453,0,0x0,8
tick,0x7ffdf681f424,65262440,0,0x0,8
tick,0x7ffdf681f424,65264447,0,0x0,8
tick,0x7ffdf681f424,65266436,0,0x0,8
tick,0x7ffdf681f424,65268506,0,0x0,8
tick,0x7ffdf681f424,65270419,0,0x0,8
tick,0x7ffdf681f424,65272412,0,0x0,8
tick,0x7ffdf681f424,65274406,0,0x0,8
tick,0x7ffdf681f424,65276404,0,0x0,8
tick,0x7ffdf681f424,65278471,0,0x0,8
tick,0x7ffdf681f424,65280390,0,0x0,8
tick,0x7ffdf681f424,65282390,0,0x0,8
tick,0x7ffdf681f424,65284383,0,0x0,8
tick,0x7ffdf681f424,65286377,0,0x0,8
tick,0x7ffdf681f424,65288371,0,0x0,8
tick,0x7ffdf681f424,65290366,0,0x0,8
tick,0x7ffdf681f424,65305717,0,0x0,8
tick,0x7ffdf681f424,65305751,0,0x0,8
tick,0x7ffdf681f424,65307327,0,0x0,8
tick,0x7ffdf681f424,65309320,0,0x0,8
tick,0x7ffdf681f424,65311388,0,0x0,8
tick,0x7ffdf681f424,65313352,0,0x0,8
tick,0x7ffdf681f424,65315356,0,0x0,8
tick,0x7ffdf681f424,65317294,0,0x0,8
tick,0x7ffdf681f424,65319290,0,0x0,8
tick,0x7ffdf681f424,65321283,0,0x0,8
tick,0x7ffdf681f424,65323286,0,0x0,8
tick,0x7ffdf681f424,65325275,0,0x0,8
tick,0x7ffdf681f424,65327289,0,0x0,8
tick,0x7ffdf681f424,65329258,0,0x0,8
tick,0x7ffdf681f424,65331272,0,0x0,8
tick,0x7ffdf681f424,65333254,0,0x0,8
tick,0x7ffdf681f424,65335249,0,0x0,8
tick,0x7ffdf681f424,65337261,0,0x0,8
tick,0x7ffdf681f424,65339237,0,0x0,8
tick,0x7ffdf681f424,65341230,0,0x0,8
tick,0x7ffdf681f424,65343240,0,0x0,8
tick,0x7ffdf681f424,65345218,0,0x0,8
tick,0x7ffdf681f424,65347223,0,0x0,8
tick,0x7ffdf681f424,65349214,0,0x0,8
tick,0x7ffdf681f424,65364228,0,0x0,8
tick,0x7ffdf681f424,65366847,0,0x0,8
tick,0x7ffdf681f424,65368206,0,0x0,8
tick,0x7ffdf681f424,65370823,0,0x0,8
tick,0x7ffdf681f424,65382541,0,0x0,8
tick,0x7ffdf681f424,65384118,0,0x0,8
tick,0x7ffdf681f424,65386450,0,0x0,8
tick,0x7ffdf681f424,65388172,0,0x0,8
tick,0x7ffdf681f424,65390098,0,0x0,8
tick,0x7ffdf681f424,65392124,0,0x0,8
tick,0x7ffdf681f424,65394165,0,0x0,8
tick,0x7ffdf681f424,65396084,0,0x0,8
tick,0x7ffdf681f424,65398079,0,0x0,8
tick,0x7ffdf681f424,65400076,0,0x0,8
tick,0x7ffdf681f424,65402065,0,0x0,8
tick,0x7ffdf681f424,65404070,0,0x0,8
tick,0x7ffdf681f424,65406057,0,0x0,8
tick,0x7ffdf681f424,65408052,0,0x0,8
tick,0x7ffdf681f424,65410057,0,0x0,8
tick,0x7ffdf681f424,65412040,0,0x0,8
tick,0x7ffdf681f424,65414033,0,0x0,8
tick,0x7ffdf681f424,65416040,0,0x0,8
tick,0x7ffdf681f424,65418064,0,0x0,8
tick,0x7ffdf681f424,65420030,0,0x0,8
tick,0x7ffdf681f424,65422165,0,0x0,8
tick,0x7ffdf681f424,65430919,0,0x0,8
tick,0x7ffdf681f424,65432166,0,0x0,8
tick,0x7ffdf681f424,65433987,0,0x0,8
tick,0x7ffdf681f424,65435984,0,0x0,8
tick,0x7ffdf681f424,65437975,0,0x0,8
tick,0x7ffdf681f424,65439967,0,0x0,8
tick,0x7ffdf681f424,65441963,0,0x0,8
tick,0x7ffdf681f424,65443955,0,0x0,8
tick,0x7ffdf681f424,65445953,0,0x0,8
tick,0x7ffdf681f424,65448011,0,0x0,8
tick,0x7ffdf681f424,65450045,0,0x0,8
tick,0x7ffdf681f424,65451942,0,0x0,8
tick,0x7ffdf681f424,65453942,0,0x0,8
tick,0x7ffdf681f424,65455933,0,0x0,8
tick,0x7ffdf681f424,65457919,0,0x0,8
tick,0x7ffdf681f424,65460989,0,0x0,8
tick,0x7ffdf681f424,65463504,0,0x0,8
tick,0x7ffdf681f424,65464900,0,0x0,8
tick,0x7ffdf681f424,65467353,0,0x0,8
tick,0x7ffdf681f424,65468932,0,0x0,8
tick,0x7ffdf681f424,65470930,0,0x0,8
tick,0x7ffdf681f424,65476969,0,0x0,8
tick,0x7ffdf681f424,65478863,0,0x0,8
tick,0x7ffdf681f424,65480859,0,0x0,8
tick,0x7ffdf681f424,65482892,0,0x0,8
tick,0x7ffdf681f424,65484850,0,0x0,8
tick,0x7ffdf681f424,65486910,0,0x0,8
tick,0x7ffdf681f424,65488836,0,0x0,8
tick,0x7ffdf681f424,65490832,0,0x0,8
tick,0x7ffdf681f424,65492827,0,0x0,8
tick,0x7ffdf681f424,65494833,0,0x0,8
tick,0x7ffdf681f424,65496811,0,0x0,8
tick,0x7ffdf681f424,65498812,0,0x0,8
tick,0x7ffdf681f424,65500803,0,0x0,8
tick,0x7ffdf681f424,65502806,0,0x0,8
tick,0x7ffdf681f424,65504791,0,0x0,8
tick,0x7ffdf681f424,65506789,0,0x0,8
tick,0x7ffdf681f424,65519838,0,0x0,8
tick,0x7ffdf681f424,65523664,0,0x0,8
tick,0x7ffdf681f424,65524754,0,0x0,8
tick,0x7ffdf681f424,65526739,0,0x0,8
tick,0x7ffdf681f424,65528783,0,0x0,8
tick,0x7ffdf681f424,65530946,0,0x0,8
tick,0x7ffdf681f424,65533285,0,0x0,8
tick,0x7ffdf681f424,65535189,0,0x0,8
tick,0x7ffdf681f424,65536706,0,0x0,8
tick,0x7ffdf681f424,65538740,0,0x0,8
tick,0x7ffdf681f424,65540699,0,0x0,8
tick,0x7ffdf681f424,65542699,0,0x0,8
tick,0x7ffdf681f424,65544686,0,0x0,8
tick,0x7ffdf681f424,65546682,0,0x0,8
tick,0x7ffdf681f424,65550704,0,0x0,8
tick,0x7ffdf681f424,65562188,0,0x0,8
tick,0x7ffdf681f424,65563640,0,0x0,8
tick,0x7ffdf681f424,65565706,0,0x0,8
tick,0x7ffdf681f424,65567665,0,0x0,8
tick,0x7ffdf681f424,65569696,0,0x0,8
tick,0x7ffdf681f424,65571631,0,0x0,8
tick,0x7ffdf681f424,65573606,0,0x0,8
tick,0x7ffdf681f424,65575606,0,0x0,8
tick,0x7ffdf681f424,65577600,0,0x0,8
tick,0x7ffdf681f424,65579591,0,0x0,8
tick,0x7ffdf681f424,65581583,0,0x0,8
tick,0x7ffdf681f424,65583586,0,0x0,8
tick,0x7ffdf681f424,65585572,0,0x0,8
tick,0x7ffdf681f424,65587568,0,0x0,8
tick,0x7ffdf681f424,65589564,0,0x0,8
tick,0x7ffdf681f424,65591558,0,0x0,8
tick,0x7ffdf681f424,65593552,0,0x0,8
tick,0x7ffdf681f424,65595565,0,0x0,8
tick,0x7ffdf681f424,65597558,0,0x0,8
tick,0x7ffdf681f424,65599543,0,0x0,8
tick,0x7ffdf681f424,65601779,0,0x0,8
tick,0x7ffdf681f424,65623824,0,0x0,8
tick,0x7ffdf681f424,65628239,0,0x0,8
tick,0x7ffdf681f424,65629463,0,0x0,8
tick,0x7ffdf681f424,65631457,0,0x0,8
tick,0x7ffdf681f424,65633466,0,0x0,8
tick,0x7ffdf681f424,65635477,0,0x0,8
tick,0x7ffdf681f424,65637514,0,0x0,8
tick,0x7ffdf681f424,65639448,0,0x0,8
tick,0x7ffdf681f424,65641513,0,0x0,8
tick,0x7ffdf681f424,65643443,0,0x0,8
tick,0x7ffdf681f424,65645424,0,0x0,8
tick,0x7ffdf681f424,65647412,0,0x0,8
tick,0x7ffdf681f424,65649409,0,0x0,8
tick,0x7ffdf681f424,65651398,0,0x0,8
tick,0x7ffdf681f424,65653394,0,0x0,8
tick,0x7ffdf681f424,65655392,0,0x0,8
tick,0x7ffdf681f424,65657384,0,0x0,8
tick,0x7ffdf681f424,65659381,0,0x0,8
tick,0x7ffdf681f424,65661371,0,0x0,8
tick,0x7ffdf681f424,65663369,0,0x0,8
tick,0x7ffdf681f424,65665364,0,0x0,8
tick,0x7ffdf681f424,65667356,0,0x0,8
tick,0x7ffdf681f424,65669350,0,0x0,8
tick,0x7ffdf681f424,65671345,0,0x0,8
tick,0x7ffdf681f424,65673337,0,0x0,8
tick,0x7ffdf681f424,65675335,0,0x0,8
tick,0x7ffdf681f424,65677329,0,0x0,8
tick,0x7ffdf681f424,65679323,0,0x0,8
tick,0x7ffdf681f424,65681321,0,0x0,8
tick,0x7ffdf681f424,65684500,0,0x0,8
tick,0x7ffdf681f424,65697917,0,0x0,8
tick,0x7ffdf681f424,65699274,0,0x0,8
tick,0x7ffdf681f424,65701289,0,0x0,8
tick,0x7ffdf681f424,65703271,0,0x0,8
tick,0x7ffdf681f424,65705472,0,0x0,8
tick,0x7ffdf681f424,65707402,0,0x0,8
tick,0x7ffdf681f424,65709314,0,0x0,8
tick,0x7ffdf681f424,65711239,0,0x0,8
tick,0x7ffdf681f424,65713244,0,0x0,8
tick,0x7ffdf681f424,65715231,0,0x0,8
tick,0x7ffdf681f424,65717225,0,0x0,8
tick,0x7ffdf681f424,65720664,0,0x0,8
tick,0x7ffdf681f424,65732146,0,0x0,8
tick,0x7ffdf681f424,65732202,0,0x0,8
tick,0x7ffdf681f424,65734229,0,0x0,8
tick,0x7ffdf681f424,65736386,0,0x0,8
tick,0x7ffdf681f424,65738645,0,0x0,8
tick,0x7ffdf681f424,65740304,0,0x0,8
tick,0x7ffdf681f424,65742209,0,0x0,8
tick,0x7ffdf681f424,65744154,0,0x0,8
tick,0x7ffdf681f424,65746148,0,0x0,8
tick,0x7ffdf681f424,65748142,0,0x0,8
tick,0x7ffdf681f424,65750137,0,0x0,8
tick,0x7ffdf681f424,65752131,0,0x0,8
tick,0x7ffdf681f424,65754125,0,0x0,8
tick,0x7ffdf681f424,65756120,0,0x0,8
tick,0x7ffdf681f424,65758120,0,0x0,8
tick,0x7ffdf681f424,65760110,0,0x0,8
tick,0x7ffdf681f424,65762501,0,0x0,8
tick,0x7ffdf681f424,65764130,0,0x0,8
tick,0x7ffdf681f424,65766096,0,0x0,8
tick,0x7ffdf681f424,65768084,0,0x0,8
tick,0x7ffdf681f424,65770085,0,0x0,8
tick,0x7ffdf681f424,65772076,0,0x0,8
tick,0x7ffdf681f424,65774088,0,0x0,8
tick,0x7ffdf681f424,65776112,0,0x0,8
tick,0x7ffdf681f424,65778062,0,0x0,8
tick,0x7ffdf681f424,65780067,0,0x0,8
tick,0x7ffdf681f424,65782148,0,0x0,8
tick,0x7ffdf681f424,65785220,0,0x0,8
tick,0x7ffdf681f424,65787186,0,0x0,8
tick,0x7ffdf681f424,65800569,0,0x0,8
tick,0x7ffdf681f424,65802034,0,0x0,8
tick,0x7ffdf681f424,65803995,0,0x0,8
tick,0x7ffdf681f424,65805988,0,0x0,8
tick,0x7ffdf681f424,65818909,0,0x0,8
tick,0x7ffdf681f424,65819960,0,0x0,8
tick,0x7ffdf681f424,65821947,0,0x0,8
tick,0x7ffdf681f424,65824046,0,0x0,8
tick,0x7ffdf681f424,65826255,0,0x0,8
tick,0x7ffdf681f424,65829352,0,0x0,8
tick,0x7ffdf681f424,65831016,0,0x0,8
tick,0x7ffdf681f424,65833096,0,0x0,8
tick,0x7ffdf681f424,65834916,0,0x0,8
tick,0x7ffdf681f424,65836906,0,0x0,8
tick,0x7ffdf681f424,65838897,0,0x0,8
tick,0x7ffdf681f424,65840893,0,0x0,8
tick,0x7ffdf681f424,65842888,0,0x0,8
tick,0x7ffdf681f424,65844882,0,0x0,8
tick,0x7ffdf681f424,65846878,0,0x0,8
tick,0x7ffdf681f424,65848878,0,0x0,8
tick,0x7ffdf681f424,65850888,0,0x0,8
tick,0x7ffdf681f424,65852864,0,0x0,8
tick,0x7ffdf681f424,65854855,0,0x0,8
tick,0x7ffdf681f424,65856876,0,0x0,8
tick,0x7ffdf681f424,65859002,0,0x0,8
tick,0x7ffdf681f424,65860973,0,0x0,8
tick,0x7ffdf681f424,65862847,0,0x0,8
tick,0x7ffdf681f424,65864894,0,0x0,8
tick,0x7ffdf681f424,65866838,0,0x0,8
tick,0x7ffdf681f424,65868858,0,0x0,8
tick,0x7ffdf681f424,65870819,0,0x0,8
tick,0x7ffdf681f424,65872870,0,0x0,8
tick,0x7ffdf681f424,65874829,0,0x0,8
tick,0x7ffdf681f424,65876801,0,0x0,8
tick,0x7ffdf681f424,65878811,0,0x0,8
tick,0x7ffdf681f424,65880817,0,0x0,8
tick,0x7ffdf681f424,65882788,0,0x0,8
tick,0x7ffdf681f424,65886925,0,0x0,8
tick,0x7ffdf681f424,65888766,0,0x0,8
tick,0x7ffdf681f424,65890772,0,0x0,8
tick,0x7ffdf681f424,65904082,0,0x0,8
tick,0x7ffdf681f424,65905741,0,0x0,8
tick,0x7ffdf681f424,65907786,0,0x0,8
tick,0x7ffdf681f424,65909750,0,0x0,8
tick,0x7ffdf681f424,65911792,0,0x0,8
tick,0x7ffdf681f424,65913703,0,0x0,8
tick,0x7ffdf681f424,65915698,0,0x0,8
tick,0x7ffdf681f424,65917688,0,0x0,8
tick,0x7ffdf681f424,65919685,0,0x0,8
tick,0x7ffdf681f424,65921678,0,0x0,8
tick,0x7ffdf681f424,65923674,0,0x0,8
tick,0x7ffdf681f424,65925681,0,0x0,8
tick,0x7ffdf681f424,65927667,0,0x0,8
tick,0x7ffdf681f424,65929664,0,0x0,8
tick,0x7ffdf681f424,65931650,0,0x0,8
tick,0x7ffdf681f424,65933646,0,0x0,8
tick,0x7ffdf681f424,65935641,0,0x0,8
tick,0x7ffdf681f424,65937636,0,0x0,8
tick,0x7ffdf681f424,65939626,0,0x0,8
tick,0x7ffdf681f424,65941623,0,0x0,8
tick,0x7ffdf681f424,65943616,0,0x0,8
tick,0x7ffdf681f424,65945611,0,0x0,8
tick,0x7ffdf681f424,65947616,0,0x0,8
tick,0x7ffdf681f424,65951036,0,0x0,8
tick,0x7ffdf681f424,65963792,0,0x0,8
tick,0x7ffdf681f424,65965563,0,0x0,8
tick,0x7ffdf681f424,65984755,0,0x0,8
tick,0x7ffdf681f424,65986507,0,0x0,8
tick,0x7ffdf681f424,65988554,0,0x0,8
tick,0x7ffdf681f424,65990674,0,0x0,8
tick,0x7ffdf681f424,65992508,0,0x0,8
tick,0x7ffdf681f424,65994497,0,0x0,8
tick,0x7ffdf681f424,65996484,0,0x0,8
tick,0x7ffdf681f424,65998479,0,0x0,8
tick,0x7ffdf681f424,66000475,0,0x0,8
tick,0x7ffdf681f424,66002467,0,0x0,8
tick,0x7ffdf681f424,66004467,0,0x0,8
tick,0x7ffdf681f424,66006456,0,0x0,8
tick,0x7ffdf681f424,66008453,0,0x0,8
tick,0x7ffdf681f424,66010445,0,0x0,8
tick,0x7ffdf681f424,66012435,0,0x0,8
tick,0x7ffdf681f424,66014427,0,0x0,8
tick,0x7ffdf681f424,66016424,0,0x0,8
tick,0x7ffdf681f424,66018423,0,0x0,8
tick,0x7ffdf681f424,66020415,0,0x0,8
tick,0x7ffdf681f424,66022435,0,0x0,8
tick,0x7ffdf681f424,66024405,0,0x0,8
tick,0x7ffdf681f424,66026396,0,0x0,8
tick,0x7ffdf681f424,66028398,0,0x0,8
tick,0x7ffdf681f424,66030387,0,0x0,8
tick,0x7ffdf681f424,66032391,0,0x0,8
tick,0x7ffdf681f424,66034374,0,0x0,8
tick,0x7ffdf681f424,66036706,0,0x0,8
tick,0x7ffdf681f424,66038518,0,0x0,8
tick,0x7ffdf681f424,66040363,0,0x0,8
tick,0x7ffdf681f424,66050490,0,0x0,8
tick,0x7ffdf681f424,66052330,0,0x0,8
tick,0x7ffdf681f424,66054418,0,0x0,8
tick,0x7ffdf681f424,66056339,0,0x0,8
tick,0x7ffdf681f424,66058412,0,0x0,8
tick,0x7ffdf681f424,66060308,0,0x0,8
tick,0x7ffdf681f424,66062305,0,0x0,8
tick,0x7ffdf681f424,66064565,0,0x0,8
tick,0x7ffdf681f424,66074144,0,0x0,8
tick,0x7ffdf681f424,66080111,0,0x0,8
tick,0x7ffdf681f424,66081248,0,0x0,8
tick,0x7ffdf681f424,66083252,0,0x0,8
tick,0x7ffdf681f424,66085304,0,0x0,8
tick,0x7ffdf681f424,66087269,0,0x0,8
tick,0x7ffdf681f424,66089297,0,0x0,8
tick,0x7ffdf681f424,66091322,0,0x0,8
tick,0x7ffdf681f424,66093221,0,0x0,8
tick,0x7ffdf681f424,66095212,0,0x0,8
tick,0x7ffdf681f424,66097208,0,0x0,8
tick,0x7ffdf681f424,66099209,0,0x0,8
tick,0x7ffdf681f424,66101231,0,0x0,8
tick,0x7ffdf681f424,66103194,0,0x0,8
tick,0x7ffdf681f424,66105198,0,0x0,8
tick,0x7ffdf681f424,66107181,0,0x0,8
tick,0x7ffdf681f424,66109178,0,0x0,8
tick,0x7ffdf681f424,66111170,0,0x0,8
tick,0x7ffdf681f424,66113164,0,0x0,8
tick,0x7ffdf681f424,66115158,0,0x0,8
tick,0x7ffdf681f424,66117159,0,0x0,8
tick,0x7ffdf681f424,66119146,0,0x0,8
tick,0x7ffdf681f424,66133446,0,0x0,8
tick,0x7ffdf681f424,66135115,0,0x0,8
tick,0x7ffdf681f424,66137110,0,0x0,8
tick,0x7ffdf681f424,66139180,0,0x0,8
tick,0x7ffdf681f424,66141094,0,0x0,8
tick,0x7ffdf681f424,66143114,0,0x0,8
tick,0x7ffdf681f424,66145085,0,0x0,8
tick,0x7ffdf681f424,66147079,0,0x0,8
tick,0x7ffdf681f424,66149071,0,0x0,8
tick,0x7ffdf681f424,66151062,0,0x0,8
tick,0x7ffdf681f424,66153065,0,0x0,8
tick,0x7ffdf681f424,66155056,0,0x0,8
tick,0x7ffdf681f424,66158791,0,0x0,8
tick,0x7ffdf681f424,66171637,0,0x0,8
tick,0x7ffdf681f424,66173005,0,0x0,8
tick,0x7ffdf681f424,66175012,0,0x0,8
tick,0x7ffdf681f424,66177084,0,0x0,8
tick,0x7ffdf681f424,66178991,0,0x0,8
tick,0x7ffdf681f424,66182708,0,0x0,8
tick,0x7ffdf681f424,66183975,0,0x0,8
tick,0x7ffdf681f424,66185988,0,0x0,8
tick,0x7ffdf681f424,66187970,0,0x0,8
tick,0x7ffdf681f424,66189963,0,0x0,8
tick,0x7ffdf681f424,66191966,0,0x0,8
tick,0x7ffdf681f424,66193966,0,0x0,8
tick,0x7ffdf681f424,66196011,0,0x0,8
tick,0x7ffdf681f424,66197944,0,0x0,8
tick,0x7ffdf681f424,66199978,0,0x0,8
tick,0x7ffdf681f424,66201933,0,0x0,8
tick,0x7ffdf681f424,66204515,0,0x0,8
tick,0x7ffdf681f424,66212893,0,0x0,8
tick,0x7ffdf681f424,66214900,0,0x0,8
tick,0x7ffdf681f424,66216890,0,0x0,8
tick,0x7ffdf681f424,66218887,0,0x0,8
tick,0x7ffdf681f424,66220921,0,0x0,8
tick,0x7ffdf681f424,66222882,0,0x0,8
tick,0x7ffdf681f424,66224890,0,0x0,8
tick,0x7ffdf681f424,66226862,0,0x0,8
tick,0x7ffdf681f424,66228856,0,0x0,8
tick,0x7ffdf681f424,66230853,0,0x0,8
tick,0x7ffdf681f424,66232862,0,0x0,8
tick,0x7ffdf681f424,66234839,0,0x0,8
tick,0x7ffdf681f424,66236832,0,0x0,8
tick,0x7ffdf681f424,66238830,0,0x0,8
tick,0x7ffdf681f424,66240834,0,0x0,8
tick,0x7ffdf681f424,66242816,0,0x0,8
tick,0x7ffdf681f424,66244812,0,0x0,8
tick,0x7ffdf681f424,66246810,0,0x0,8
tick,0x7ffdf681f424,66248855,0,0x0,8
tick,0x7ffdf681f424,66250823,0,0x0,8
tick,0x7ffdf681f424,66253611,0,0x0,8
tick,0x7ffdf681f424,66258585,0,0x0,8
tick,0x7ffdf681f424,66268265,0,0x0,8
tick,0x7ffdf681f424,66269747,0,0x0,8
tick,0x7ffdf681f424,66271746,0,0x0,8
tick,0x7ffdf681f424,66273924,0,0x0,8
tick,0x7ffdf681f424,66275802,0,0x0,8
tick,0x7ffdf681f424,66277773,0,0x0,8
tick,0x7ffdf681f424,66279798,0,0x0,8
tick,0x7ffdf681f424,66281714,0,0x0,8
tick,0x7ffdf681f424,66283716,0,0x0,8
tick,0x7ffdf681f424,66299075,0,0x0,8
tick,0x7ffdf681f424,66300670,0,0x0,8
tick,0x7ffdf681f424,66302717,0,0x0,8
tick,0x7ffdf681f424,66304663,0,0x0,8
tick,0x7ffdf681f424,66306769,0,0x0,8
tick,0x7ffdf681f424,66308727,0,0x0,8
tick,0x7ffdf681f424,66310635,0,0x0,8
tick,0x7ffdf681f424,66312629,0,0x0,8
tick,0x7ffdf681f424,66314625,0,0x0,8
tick,0x7ffdf681f424,66316622,0,0x0,8
tick,0x7ffdf681f424,66318616,0,0x0,8
tick,0x7ffdf681f424,66320610,0,0x0,8
tick,0x7ffdf681f424,66322605,0,0x0,8
tick,0x7ffdf681f424,66324598,0,0x0,8
tick,0x7ffdf681f424,66326664,0,0x0,8
tick,0x7ffdf681f424,66328592,0,0x0,8
tick,0x7ffdf681f424,66330581,0,0x0,8
tick,0x7ffdf681f424,66332579,0,0x0,8
tick,0x7ffdf681f424,66334569,0,0x0,8
tick,0x7ffdf681f424,66336569,0,0x0,8
tick,0x7ffdf681f424,66338559,0,0x0,8
tick,0x7ffdf681f424,66340577,0,0x0,8
tick,0x7ffdf681f424,66342947,0,0x0,8
tick,0x7ffdf681f424,66370479,0,0x0,8
tick,0x7ffdf681f424,66370554,0,0x0,8
tick,0x7ffdf681f424,66372510,0,0x0,8
tick,0x7ffdf681f424,66374480,0,0x0,8
tick,0x7ffdf681f424,66379333,0,0x0,8
tick,0x7ffdf681f424,66380480,0,0x0,8
tick,0x7ffdf681f424,66382454,0,0x0,8
tick,0x7ffdf681f424,66384440,0,0x0,8
tick,0x7ffdf681f424,66386436,0,0x0,8
tick,0x7ffdf681f424,66388428,0,0x0,8
tick,0x7ffdf681f424,66390427,0,0x0,8
tick,0x7ffdf681f424,66392426,0,0x0,8
tick,0x7ffdf681f424,66394515,0,0x0,8
tick,0x7ffdf681f424,66396420,0,0x0,8
tick,0x7ffdf681f424,66398411,0,0x0,8
tick,0x7ffdf681f424,66400399,0,0x0,8
tick,0x7ffdf681f424,66402386,0,0x0,8
tick,0x7ffdf681f424,66404382,0,0x0,8
tick,0x7ffdf681f424,66406400,0,0x0,8
tick,0x7ffdf681f424,66408370,0,0x0,8
tick,0x7ffdf681f424,66410371,0,0x0,8
tick,0x7ffdf681f424,66412377,0,0x0,8
tick,0x7ffdf681f424,66414385,0,0x0,8
tick,0x7ffdf681f424,66416365,0,0x0,8
tick,0x7ffdf681f424,66418355,0,0x0,8
tick,0x7ffdf681f424,66420355,0,0x0,8
tick,0x7ffdf681f424,66422342,0,0x0,8
tick,0x7ffdf681f424,66424342,0,0x0,8
tick,0x7ffdf681f424,66426330,0,0x0,8
tick,0x7ffdf681f424,66428320,0,0x0,8
tick,0x7ffdf681f424,66430317,0,0x0,8
tick,0x7ffdf681f424,66432312,0,0x0,8
tick,0x7ffdf681f424,66434311,0,0x0,8
tick,0x7ffdf681f424,66436313,0,0x0,8
tick,0x7ffdf681f424,66438295,0,0x0,8
tick,0x7ffdf681f424,66440907,0,0x0,8
tick,0x7ffdf681f424,66453540,0,0x0,8
tick,0x7ffdf681f424,66455286,0,0x0,8
tick,0x7ffdf681f424,66457389,0,0x0,8
tick,0x7ffdf681f424,66459282,0,0x0,8
tick,0x7ffdf681f424,66461276,0,0x0,8
tick,0x7ffdf681f424,66465050,0,0x0,8
tick,0x7ffdf681f424,66466258,0,0x0,8
tick,0x7ffdf681f424,66468226,0,0x0,8
tick,0x7ffdf681f424,66484861,0,0x0,8
tick,0x7ffdf681f424,66486177,0,0x0,8
tick,0x7ffdf681f424,66488182,0,0x0,8
tick,0x7ffdf681f424,66490258,0,0x0,8
tick,0x7ffdf681f424,66492494,0,0x0,8
tick,0x7ffdf681f424,66494230,0,0x0,8
tick,0x7ffdf681f424,66496199,0,0x0,8
tick,0x7ffdf681f424,66498134,0,0x0,8
tick,0x7ffdf681f424,66500138,0,0x0,8
tick,0x7ffdf681f424,66502137,0,0x0,8
tick,0x7ffdf681f424,66504120,0,0x0,8
tick,0x7ffdf681f424,66506118,0,0x0,8
tick,0x7ffdf681f424,66508110,0,0x0,8
tick,0x7ffdf681f424,66510103,0,0x0,8
tick,0x7ffdf681f424,66512096,0,0x0,8
tick,0x7ffdf681f424,66514091,0,0x0,8
tick,0x7ffdf681f424,66516086,0,0x0,8
tick,0x7ffdf681f424,66518083,0,0x0,8
tick,0x7ffdf681f424,66520077,0,0x0,8
tick,0x7ffdf681f424,66522283,0,0x0,8
tick,0x7ffdf681f424,66535214,0,0x0,8
tick,0x7ffdf681f424,66535263,0,0x0,8
tick,0x7ffdf681f424,66537034,0,0x0,8
tick,0x7ffdf681f424,66539055,0,0x0,8
tick,0x7ffdf681f424,66541073,0,0x0,8
tick,0x7ffdf681f424,66543111,0,0x0,8
tick,0x7ffdf681f424,66545029,0,0x0,8
tick,0x7ffdf681f424,66547005,0,0x0,8
tick,0x7ffdf681f424,66549015,0,0x0,8
tick,0x7ffdf681f424,66550995,0,0x0,8
tick,0x7ffdf681f424,66552989,0,0x0,8
tick,0x7ffdf681f424,66554983,0,0x0,8
tick,0x7ffdf681f424,66556980,0,0x0,8
tick,0x7ffdf681f424,66558973,0,0x0,8
tick,0x7ffdf681f424,66560966,0,0x0,8
tick,0x7ffdf681f424,66562964,0,0x0,8
tick,0x7ffdf681f424,66564963,0,0x0,8
tick,0x7ffdf681f424,66566953,0,0x0,8
tick,0x7ffdf681f424,66568950,0,0x0,8
tick,0x7ffdf681f424,66570974,0,0x0,8
tick,0x7ffdf681f424,66572964,0,0x0,8
tick,0x7ffdf681f424,66574936,0,0x0,8
tick,0x7ffdf681f424,66590570,0,0x0,8
tick,0x7ffdf681f424,66590685,0,0x0,8
tick,0x7ffdf681f424,66591894,0,0x0,8
tick,0x7ffdf681f424,66593884,0,0x0,8
tick,0x7ffdf681f424,66595881,0,0x0,8
tick,0x7ffdf681f424,66597924,0,0x0,8
tick,0x7ffdf681f424,66599870,0,0x0,8
tick,0x7ffdf681f424,66601939,0,0x0,8
tick,0x7ffdf681f424,66603910,0,0x0,8
tick,0x7ffdf681f424,66605864,0,0x0,8
tick,0x7ffdf681f424,66607846,0,0x0,8
tick,0x7ffdf681f424,66609882,0,0x0,8
tick,0x7ffdf681f424,66612004,0,0x0,8
tick,0x7ffdf681f424,66614001,0,0x0,8
tick,0x7ffdf681f424,66628506,0,0x0,8
tick,0x7ffdf681f424,66629797,0,0x0,8
tick,0x7ffdf681f424,66631803,0,0x0,8
tick,0x7ffdf681f424,66633836,0,0x0,8
tick,0x7ffdf681f424,66635871,0,0x0,8
tick,0x7ffdf681f424,66638030,0,0x0,8
tick,0x7ffdf681f424,66639871,0,0x0,8
tick,0x7ffdf681f424,66641885,0,0x0,8
tick,0x7ffdf681f424,66643747,0,0x0,8
tick,0x7ffdf681f424,66645756,0,0x0,8
tick,0x7ffdf681f424,66647737,0,0x0,8
tick,0x7ffdf681f424,66649731,0,0x0,8
tick,0x7ffdf681f424,66651736,0,0x0,8
tick,0x7ffdf681f424,66653727,0,0x0,8
tick,0x7ffdf681f424,66655715,0,0x0,8
tick,0x7ffdf681f424,66657792,0,0x0,8
tick,0x7ffdf681f424,66659705,0,0x0,8
tick,0x7ffdf681f424,66661696,0,0x0,8
tick,0x7ffdf681f424,66663697,0,0x0,8
tick,0x7ffdf681f424,66665687,0,0x0,8
tick,0x7ffdf681f424,66667686,0,0x0,8
tick,0x7ffdf681f424,66669686,0,0x0,8
tick,0x7ffdf681f424,66671681,0,0x0,8
tick,0x7ffdf681f424,66673681,0,0x0,8
tick,0x7ffdf681f424,66675665,0,0x0,8
tick,0x7ffdf681f424,66677688,0,0x0,8
tick,0x7ffdf681f424,66679657,0,0x0,8
tick,0x7ffdf681f424,66681650,0,0x0,8
tick,0x7ffdf681f424,66683644,0,0x0,8
tick,0x7ffdf681f424,66685639,0,0x0,8
tick,0x7ffdf681f424,66687629,0,0x0,8
tick,0x7ffdf681f424,66694757,0,0x0,8
tick,0x7ffdf681f424,66705855,0,0x0,8
tick,0x7ffdf681f424,66707578,0,0x0,8
tick,0x7ffdf681f424,66709568,0,0x0,8
tick,0x7ffdf681f424,66711697,0,0x0,8
tick,0x7ffdf681f424,66713682,0,0x0,8
tick,0x7ffdf681f424,66715658,0,0x0,8
tick,0x7ffdf681f424,66717552,0,0x0,8
tick,0x7ffdf681f424,66719548,0,0x0,8
tick,0x7ffdf681f424,66721540,0,0x0,8
tick,0x7ffdf681f424,66723543,0,0x0,8
tick,0x7ffdf681f424,66725550,0,0x0,8
tick,0x7ffdf681f424,66727531,0,0x0,8
tick,0x7ffdf681f424,66729589,0,0x0,8
tick,0x7ffdf681f424,66731511,0,0x0,8
tick,0x7ffdf681f424,66733506,0,0x0,8
tick,0x7ffdf681f424,66735518,0,0x0,8
tick,0x7ffdf681f424,66740699,0,0x0,8
tick,0x7ffdf681f424,66752785,0,0x0,8
tick,0x7ffdf681f424,66754455,0,0x0,8
tick,0x7ffdf681f424,66756452,0,0x0,8
tick,0x7ffdf681f424,66758469,0,0x0,8
tick,0x7ffdf681f424,66760577,0,0x0,8
tick,0x7ffdf681f424,66762443,0,0x0,8
tick,0x7ffdf681f424,66764498,0,0x0,8
tick,0x7ffdf681f424,66766420,0,0x0,8
tick,0x7ffdf681f424,66768420,0,0x0,8
tick,0x7ffdf681f424,66770420,0,0x0,8
tick,0x7ffdf681f424,66772403,0,0x0,8
tick,0x7ffdf681f424,66774408,0,0x0,8
tick,0x7ffdf681f424,66790798,0,0x0,8
tick,0x7ffdf681f424,66792352,0,0x0,8
tick,0x7ffdf681f424,66794356,0,0x0,8
tick,0x7ffdf681f424,66796371,0,0x0,8
tick,0x7ffdf681f424,66798414,0,0x0,8
tick,0x7ffdf681f424,66800338,0,0x0,8
tick,0x7ffdf681f424,66802323,0,0x0,8
tick,0x7ffdf681f424,66804320,0,0x0,8
tick,0x7ffdf681f424,66806317,0,0x0,8
tick,0x7ffdf681f424,66808313,0,0x0,8
tick,0x7ffdf681f424,66810298,0,0x0,8
tick,0x7ffdf681f424,66812349,0,0x0,8
tick,0x7ffdf681f424,66814297,0,0x0,8
tick,0x7ffdf681f424,66816285,0,0x0,8
tick,0x7ffdf681f424,66818280,0,0x0,8
tick,0x7ffdf681f424,66820272,0,0x0,8
tick,0x7ffdf681f424,66822268,0,0x0,8
tick,0x7ffdf681f424,66824264,0,0x0,8
tick,0x7ffdf681f424,66826260,0,0x0,8
tick,0x7ffdf681f424,66828251,0,0x0,8
tick,0x7ffdf681f424,66830247,0,0x0,8
tick,0x7ffdf681f424,66844924,0,0x0,8
tick,0x7ffdf681f424,66846208,0,0x0,8
tick,0x7ffdf681f424,66848205,0,0x0,8
tick,0x7ffdf681f424,66850390,0,0x0,8
tick,0x7ffdf681f424,66852231,0,0x0,8
tick,0x7ffdf681f424,66854188,0,0x0,8
tick,0x7ffdf681f424,66856181,0,0x0,8
tick,0x7ffdf681f424,66858178,0,0x0,8
tick,0x7ffdf681f424,66860164,0,0x0,8
tick,0x7ffdf681f424,66865463,0,0x0,8
tick,0x7ffdf681f424,66877850,0,0x0,8
tick,0x7ffdf681f424,66879116,0,0x0,8
tick,0x7ffdf681f424,66881119,0,0x0,8
tick,0x7ffdf681f424,66883167,0,0x0,8
tick,0x7ffdf681f424,66885145,0,0x0,8
tick,0x7ffdf681f424,66887103,0,0x0,8
tick,0x7ffdf681f424,66889133,0,0x0,8
tick,0x7ffdf681f424,66891086,0,0x0,8
tick,0x7ffdf681f424,66893081,0,0x0,8
tick,0x7ffdf681f424,66895075,0,0x0,8
tick,0x7ffdf681f424,66897080,0,0x0,8
tick,0x7ffdf681f424,66899069,0,0x0,8
tick,0x7ffdf681f424,66901059,0,0x0,8
tick,0x7ffdf681f424,66903051,0,0x0,8
tick,0x7ffdf681f424,66905048,0,0x0,8
tick,0x7ffdf681f424,66907104,0,0x0,8
tick,0x7ffdf681f424,66909062,0,0x0,8
tick,0x7ffdf681f424,66911036,0,0x0,8
tick,0x7ffdf681f424,66913033,0,0x0,8
tick,0x7ffdf681f424,66915029,0,0x0,8
tick,0x7ffdf681f424,66917048,0,0x0,8
tick,0x7ffdf681f424,66931557,0,0x0,8
tick,0x7ffdf681f424,66931673,0,0x0,8
tick,0x7ffdf681f424,66932982,0,0x0,8
tick,0x7ffdf681f424,66934972,0,0x0,8
tick,0x7ffdf681f424,66937065,0,0x0,8
tick,0x7ffdf681f424,66939077,0,0x0,8
tick,0x7ffdf681f424,66941010,0,0x0,8
tick,0x7ffdf681f424,66942947,0,0x0,8
tick,0x7ffdf681f424,66944955,0,0x0,8
tick,0x7ffdf681f424,66946935,0,0x0,8
tick,0x7ffdf681f424,66948985,0,0x0,8
tick,0x7ffdf681f424,66950929,0,0x0,8
tick,0x7ffdf681f424,66952930,0,0x0,8
tick,0x7ffdf681f424,66969478,0,0x0,8
tick,0x7ffdf681f424,66969523,0,0x0,8
tick,0x7ffdf681f424,66970877,0,0x0,8
tick,0x7ffdf681f424,66972870,0,0x0,8
tick,0x7ffdf681f424,66974934,0,0x0,8
tick,0x7ffdf681f424,66976900,0,0x0,8
tick,0x7ffdf681f424,66978878,0,0x0,8
tick,0x7ffdf681f424,66980876,0,0x0,8
tick,0x7ffdf681f424,66982848,0,0x0,8
tick,0x7ffdf681f424,66984849,0,0x0,8
tick,0x7ffdf681f424,66986829,0,0x0,8
tick,0x7ffdf681f424,66988826,0,0x0,8
tick,0x7ffdf681f424,66990838,0,0x0,8
tick,0x7ffdf681f424,66992813,0,0x0,8
tick,0x7ffdf681f424,66994815,0,0x0,8
tick,0x7ffdf681f424,66996802,0,0x0,8
tick,0x7ffdf681f424,66998801,0,0x0,8
tick,0x7ffdf681f424,67000793,0,0x0,8
tick,0x7ffdf681f424,67015252,0,0x0,8
tick,0x7ffdf681f424,67016755,0,0x0,8
tick,0x7ffdf681f424,67018813,0,0x0,8
tick,0x7ffdf681f424,67021296,0,0x0,8
tick,0x7ffdf681f424,67023004,0,0x0,8
tick,0x7ffdf681f424,67024734,0,0x0,8
tick,0x7ffdf681f424,67026721,0,0x0,8
tick,0x7ffdf681f424,67028718,0,0x0,8
tick,0x7ffdf681f424,67030710,0,0x0,8
tick,0x7ffdf681f424,67032708,0,0x0,8
tick,0x7ffdf681f424,67034700,0,0x0,8
tick,0x7ffdf681f424,67036699,0,0x0,8
tick,0x7ffdf681f424,67038686,0,0x0,8
tick,0x7ffdf681f424,67040683,0,0x0,8
tick,0x7ffdf681f424,67042685,0,0x0,8
tick,0x7ffdf681f424,67044674,0,0x0,8
tick,0x7ffdf681f424,67046668,0,0x0,8
tick,0x7ffdf681f424,67048668,0,0x0,8
tick,0x7ffdf681f424,67050661,0,0x0,8
tick,0x7ffdf681f424,67052649,0,0x0,8
tick,0x7ffdf681f424,67054683,0,0x0,8
tick,0x7ffdf681f424,67056698,0,0x0,8
tick,0x7ffdf681f424,67058720,0,0x0,8
tick,0x7ffdf681f424,67060644,0,0x0,8
tick,0x7ffdf681f424,67062716,0,0x0,8
tick,0x7ffdf681f424,67064650,0,0x0,8
tick,0x7ffdf681f424,67066623,0,0x0,8
tick,0x7ffdf681f424,67093455,0,0x0,8
tick,0x7ffdf681f424,67094549,0,0x0,8
tick,0x7ffdf681f424,67096549,0,0x0,8
tick,0x7ffdf681f424,67100321,0,0x0,8
tick,0x7ffdf681f424,67101526,0,0x0,8
tick,0x7ffdf681f424,67103544,0,0x0,8
tick,0x7ffdf681f424,67105524,0,0x0,8
tick,0x7ffdf681f424,67107660,0,0x0,8
tick,0x7ffdf681f424,67109506,0,0x0,8
tick,0x7ffdf681f424,67113557,0,0x0,8
tick,0x7ffdf681f424,67115493,0,0x0,8
tick,0x7ffdf681f424,67117539,0,0x0,8
tick,0x7ffdf681f424,67119495,0,0x0,8
tick,0x7ffdf681f424,67121469,0,0x0,8
tick,0x7ffdf681f424,67123471,0,0x0,8
tick,0x7ffdf681f424,67125463,0,0x0,8
tick,0x7ffdf681f424,67127482,0,0x0,8
tick,0x7ffdf681f424,67131463,0,0x0,8
tick,0x7ffdf681f424,67133560,0,0x0,8
tick,0x7ffdf681f424,67135433,0,0x0,8
tick,0x7ffdf681f424,67137438,0,0x0,8
tick,0x7ffdf681f424,67139421,0,0x0,8
tick,0x7ffdf681f424,67141426,0,0x0,8
tick,0x7ffdf681f424,67143416,0,0x0,8
tick,0x7ffdf681f424,67145418,0,0x0,8
tick,0x7ffdf681f424,67147398,0,0x0,8
tick,0x7ffdf681f424,67149397,0,0x0,8
tick,0x7ffdf681f424,67151391,0,0x0,8
tick,0x7ffdf681f424,67153393,0,0x0,8
tick,0x7ffdf681f424,67155388,0,0x0,8
tick,0x7ffdf681f424,67162293,0,0x0,8
tick,0x7ffdf681f424,67170125,0,0x0,8
tick,0x7ffdf681f424,67171340,0,0x0,8
tick,0x7ffdf681f424,67173337,0,0x0,8
tick,0x7ffdf681f424,67175583,0,0x0,8
tick,0x7ffdf681f424,67177359,0,0x0,8
tick,0x7ffdf681f424,67179334,0,0x0,8
tick,0x7ffdf681f424,67181308,0,0x0,8
tick,0x7ffdf681f424,67183310,0,0x0,8
tick,0x7ffdf681f424,67185308,0,0x0,8
tick,0x7ffdf681f424,67187291,0,0x0,8
tick,0x7ffdf681f424,67189284,0,0x0,8
tick,0x7ffdf681f424,67191288,0,0x0,8
tick,0x7ffdf681f424,67193279,0,0x0,8
tick,0x7ffdf681f424,67195271,0,0x0,8
tick,0x7ffdf681f424,67197263,0,0x0,8
tick,0x7ffdf681f424,67200169,0,0x0,8
tick,0x7ffdf681f424,67212229,0,0x0,8
tick,0x7ffdf681f424,67214225,0,0x0,8
tick,0x7ffdf681f424,67216234,0,0x0,8
tick,0x7ffdf681f424,67218252,0,0x0,8
tick,0x7ffdf681f424,67220265,0,0x0,8
tick,0x7ffdf681f424,67222207,0,0x0,8
tick,0x7ffdf681f424,67224219,0,0x0,8
tick,0x7ffdf681f424,67226190,0,0x0,8
tick,0x7ffdf681f424,67228187,0,0x0,8
tick,0x7ffdf681f424,67230182,0,0x0,8
tick,0x7ffdf681f424,67232171,0,0x0,8
tick,0x7ffdf681f424,67234203,0,0x0,8
tick,0x7ffdf681f424,67236168,0,0x0,8
tick,0x7ffdf681f424,67238160,0,0x0,8
tick,0x7ffdf681f424,67240154,0,0x0,8
tick,0x7ffdf681f424,67242201,0,0x0,8
tick,0x7ffdf681f424,67244143,0,0x0,8
tick,0x7ffdf681f424,67246137,0,0x0,8
tick,0x7ffdf681f424,67248132,0,0x0,8
tick,0x7ffdf681f424,67250127,0,0x0,8
tick,0x7ffdf681f424,67252133,0,0x0,8
tick,0x7ffdf681f424,67254111,0,0x0,8
tick,0x7ffdf681f424,67256112,0,0x0,8
tick,0x7ffdf681f424,67258106,0,0x0,8
tick,0x7ffdf681f424,67260101,0,0x0,8
tick,0x7ffdf681f424,67262095,0,0x0,8
tick,0x7ffdf681f424,67264090,0,0x0,8
tick,0x7ffdf681f424,67267923,0,0x0,8
tick,0x7ffdf681f424,67272918,0,0x0,8
tick,0x7ffdf681f424,67274075,0,0x0,8
tick,0x7ffdf681f424,67280831,0,0x0,8
tick,0x7ffdf681f424,67282045,0,0x0,8
tick,0x7ffdf681f424,67284051,0,0x0,8
tick,0x7ffdf681f424,67286095,0,0x0,8
tick,0x7ffdf681f424,67288055,0,0x0,8
tick,0x7ffdf681f424,67290030,0,0x0,8
tick,0x7ffdf681f424,67292017,0,0x0,8
tick,0x7ffdf681f424,67294015,0,0x0,8
tick,0x7ffdf681f424,67296008,0,0x0,8
tick,0x7ffdf681f424,67298008,0,0x0,8
tick,0x7ffdf681f424,67301022,0,0x0,8
tick,0x7ffdf681f424,67314819,0,0x0,8
tick,0x7ffdf681f424,67315952,0,0x0,8
tick,0x7ffdf681f424,67317952,0,0x0,8
tick,0x7ffdf681f424,67319950,0,0x0,8
tick,0x7ffdf681f424,67322242,0,0x0,8
tick,0x7ffdf681f424,67324088,0,0x0,8
tick,0x7ffdf681f424,67325937,0,0x0,8
tick,0x7ffdf681f424,67327918,0,0x0,8
tick,0x7ffdf681f424,67329917,0,0x0,8
tick,0x7ffdf681f424,67331907,0,0x0,8
tick,0x7ffdf681f424,67333904,0,0x0,8
tick,0x7ffdf681f424,67335951,0,0x0,8
tick,0x7ffdf681f424,67337891,0,0x0,8
tick,0x7ffdf681f424,67339897,0,0x0,8
tick,0x7ffdf681f424,67341889,0,0x0,8
tick,0x7ffdf681f424,67343873,0,0x0,8
tick,0x7ffdf681f424,67345986,0,0x0,8
tick,0x7ffdf681f424,67347866,0,0x0,8
tick,0x7ffdf681f424,67349866,0,0x0,8
tick,0x7ffdf681f424,67351851,0,0x0,8
tick,0x7ffdf681f424,67353846,0,0x0,8
tick,0x7ffdf681f424,67366848,0,0x0,8
tick,0x7ffdf681f424,67366897,0,0x0,8
tick,0x7ffdf681f424,67368813,0,0x0,8
tick,0x7ffdf681f424,67370845,0,0x0,8
tick,0x7ffdf681f424,67372861,0,0x0,8
tick,0x7ffdf681f424,67374797,0,0x0,8
tick,0x7ffdf681f424,67376822,0,0x0,8
tick,0x7ffdf681f424,67378784,0,0x0,8
tick,0x7ffdf681f424,67380775,0,0x0,8
tick,0x7ffdf681f424,67382790,0,0x0,8
tick,0x7ffdf681f424,67384766,0,0x0,8
tick,0x7ffdf681f424,67386759,0,0x0,8
tick,0x7ffdf681f424,67388756,0,0x0,8
tick,0x7ffdf681f424,67390747,0,0x0,8
tick,0x7ffdf681f424,67392739,0,0x0,8
tick,0x7ffdf681f424,67394748,0,0x0,8
tick,0x7ffdf681f424,67396732,0,0x0,8
tick,0x7ffdf681f424,67398734,0,0x0,8
tick,0x7ffdf681f424,67400733,0,0x0,8
tick,0x7ffdf681f424,67402791,0,0x0,8
tick,0x7ffdf681f424,67404973,0,0x0,8
tick,0x7ffdf681f424,67419868,0,0x0,8
tick,0x7ffdf681f424,67421669,0,0x0,8
tick,0x7ffdf681f424,67423720,0,0x0,8
tick,0x7ffdf681f424,67425675,0,0x0,8
tick,0x7ffdf681f424,67427660,0,0x0,8
tick,0x7ffdf681f424,67429654,0,0x0,8
tick,0x7ffdf681f424,67431654,0,0x0,8
tick,0x7ffdf681f424,67433635,0,0x0,8
tick,0x7ffdf681f424,67435635,0,0x0,8
tick,0x7ffdf681f424,67450122,0,0x0,8
tick,0x7ffdf681f424,67454554,0,0x0,8
tick,0x7ffdf681f424,67455583,0,0x0,8
tick,0x7ffdf681f424,67457575,0,0x0,8
tick,0x7ffdf681f424,67459567,0,0x0,8
tick,0x7ffdf681f424,67461584,0,0x0,8
tick,0x7ffdf681f424,67463557,0,0x0,8
tick,0x7ffdf681f424,67465552,0,0x0,8
tick,0x7ffdf681f424,67467546,0,0x0,8
tick,0x7ffdf681f424,67469616,0,0x0,8
tick,0x7ffdf681f424,67472143,0,0x0,8
tick,0x7ffdf681f424,67473526,0,0x0,8
tick,0x7ffdf681f424,67475523,0,0x0,8
tick,0x7ffdf681f424,67477519,0,0x0,8
tick,0x7ffdf681f424,67479515,0,0x0,8
tick,0x7ffdf681f424,67481506,0,0x0,8
tick,0x7ffdf681f424,67483510,0,0x0,8
tick,0x7ffdf681f424,67485501,0,0x0,8
tick,0x7ffdf681f424,67487531,0,0x0,8
tick,0x7ffdf681f424,67489492,0,0x0,8
tick,0x7ffdf681f424,67499165,0,0x0,8
tick,0x7ffdf681f424,67500455,0,0x0,8
tick,0x7ffdf681f424,67503124,0,0x0,8
tick,0x7ffdf681f424,67504447,0,0x0,8
tick,0x7ffdf681f424,67506451,0,0x0,8
tick,0x7ffdf681f424,67508437,0,0x0,8
tick,0x7ffdf681f424,67510428,0,0x0,8
tick,0x7ffdf681f424,67512424,0,0x0,8
tick,0x7ffdf681f424,67514437,0,0x0,8
tick,0x7ffdf681f424,67516746,0,0x0,8
tick,0x7ffdf681f424,67518433,0,0x0,8
tick,0x7ffdf681f424,67520415,0,0x0,8
tick,0x7ffdf681f424,67522409,0,0x0,8
tick,0x7ffdf681f424,67524395,0,0x0,8
tick,0x7ffdf681f424,67526393,0,0x0,8
tick,0x7ffdf681f424,67528388,0,0x0,8
tick,0x7ffdf681f424,67530382,0,0x0,8
tick,0x7ffdf681f424,67532526,0,0x0,8
tick,0x7ffdf681f424,67537168,0,0x0,8
tick,0x7ffdf681f424,67545672,0,0x0,8
tick,0x7ffdf681f424,67547364,0,0x0,8
tick,0x7ffdf681f424,67549329,0,0x0,8
tick,0x7ffdf681f424,67551841,0,0x0,8
tick,0x7ffdf681f424,67553337,0,0x0,8
tick,0x7ffdf681f424,67555319,0,0x0,8
tick,0x7ffdf681f424,67557315,0,0x0,8
tick,0x7ffdf681f424,67559302,0,0x0,8
tick,0x7ffdf681f424,67561293,0,0x0,8
tick,0x7ffdf681f424,67563286,0,0x0,8
tick,0x7ffdf681f424,67565282,0,0x0,8
tick,0x7ffdf681f424,67567288,0,0x0,8
tick,0x7ffdf681f424,67569275,0,0x0,8
tick,0x7ffdf681f424,67571265,0,0x0,8
tick,0x7ffdf681f424,67573259,0,0x0,8
tick,0x7ffdf681f424,67575270,0,0x0,8
tick,0x7ffdf681f424,67577250,0,0x0,8
tick,0x7ffdf681f424,67579250,0,0x0,8
tick,0x7ffdf681f424,67581238,0,0x0,8
tick,0x7ffdf681f424,67583236,0,0x0,8
tick,0x7ffdf681f424,67585227,0,0x0,8
tick,0x7ffdf681f424,67587227,0,0x0,8
tick,0x7ffdf681f424,67589219,0,0x0,8
tick,0x7ffdf681f424,67591218,0,0x0,8
tick,0x7ffdf681f424,67593203,0,0x0,8
tick,0x7ffdf681f424,67597404,0,0x0,8
tick,0x7ffdf681f424,67599406,0,0x0,8
tick,0x7ffdf681f424,67601234,0,0x0,8
tick,0x7ffdf681f424,67603196,0,0x0,8
tick,0x7ffdf681f424,67612086,0,0x0,8
tick,0x7ffdf681f424,67613193,0,0x0,8
tick,0x7ffdf681f424,67630900,0,0x0,8
tick,0x7ffdf681f424,67632109,0,0x0,8
tick,0x7ffdf681f424,67634127,0,0x0,8
tick,0x7ffdf681f424,67636168,0,0x0,8
tick,0x7ffdf681f424,67638088,0,0x0,8
tick,0x7ffdf681f424,67640081,0,0x0,8
tick,0x7ffdf681f424,67642088,0,0x0,8
tick,0x7ffdf681f424,67644218,0,0x0,8
tick,0x7ffdf681f424,67646134,0,0x0,8
tick,0x7ffdf681f424,67648107,0,0x0,8
tick,0x7ffdf681f424,67650065,0,0x0,8
tick,0x7ffdf681f424,67652053,0,0x0,8
tick,0x7ffdf681f424,67654044,0,0x0,8
tick,0x7ffdf681f424,67656047,0,0x0,8
tick,0x7ffdf681f424,67658035,0,0x0,8
tick,0x7ffdf681f424,67660030,0,0x0,8
tick,0x7ffdf681f424,67662024,0,0x0,8
tick,0x7ffdf681f424,67664020,0,0x0,8
tick,0x7ffdf681f424,67666017,0,0x0,8
tick,0x7ffdf681f424,67668012,0,0x0,8
tick,0x7ffdf681f424,67670002,0,0x0,8
tick,0x7ffdf681f424,67672007,0,0x0,8
tick,0x7ffdf681f424,67673990,0,0x0,8
tick,0x7ffdf681f424,67675983,0,0x0,8
tick,0x7ffdf681f424,67677987,0,0x0,8
tick,0x7ffdf681f424,67680066,0,0x0,8
tick,0x7ffdf681f424,67682426,0,0x0,8
tick,0x7ffdf681f424,67691027,0,0x0,8
tick,0x7ffdf681f424,67698280,0,0x0,8
tick,0x7ffdf681f424,67699931,0,0x0,8
tick,0x7ffdf681f424,67701925,0,0x0,8
tick,0x7ffdf681f424,67703916,0,0x0,8
tick,0x7ffdf681f424,67705992,0,0x0,8
tick,0x7ffdf681f424,67708100,0,0x0,8
tick,0x7ffdf681f424,67710198,0,0x0,8
tick,0x7ffdf681f424,67711964,0,0x0,8
tick,0x7ffdf681f424,67713885,0,0x0,8
tick,0x7ffdf681f424,67715892,0,0x0,8
tick,0x7ffdf681f424,67719204,0,0x0,8
tick,0x7ffdf681f424,67721190,0,0x0,8
tick,0x7ffdf681f424,67722916,0,0x0,8
tick,0x7ffdf681f424,67724926,0,0x0,8
tick,0x7ffdf681f424,67728280,0,0x0,8
tick,0x7ffdf681f424,67729897,0,0x0,8
tick,0x7ffdf681f424,67731873,0,0x0,8
tick,0x7ffdf681f424,67733856,0,0x0,8
tick,0x7ffdf681f424,67735839,0,0x0,8
tick,0x7ffdf681f424,67737824,0,0x0,8
tick,0x7ffdf681f424,67739816,0,0x0,8
tick,0x7ffdf681f424,67741816,0,0x0,8
tick,0x7ffdf681f424,67743805,0,0x0,8
tick,0x7ffdf681f424,67749127,0,0x0,8
tick,0x7ffdf681f424,67750793,0,0x0,8
tick,0x7ffdf681f424,67752816,0,0x0,8
tick,0x7ffdf681f424,67754789,0,0x0,8
tick,0x7ffdf681f424,67756768,0,0x0,8
tick,0x7ffdf681f424,67758765,0,0x0,8
tick,0x7ffdf681f424,67760774,0,0x0,8
tick,0x7ffdf681f424,67763891,0,0x0,8
tick,0x7ffdf681f424,67765768,0,0x0,8
tick,0x7ffdf681f424,67767752,0,0x0,8
tick,0x7ffdf681f424,67777872,0,0x0,8
tick,0x7ffdf681f424,67779717,0,0x0,8
tick,0x7ffdf681f424,67781798,0,0x0,8
tick,0x7ffdf681f424,67784591,0,0x0,8
tick,0x7ffdf681f424,67786204,0,0x0,8
tick,0x7ffdf681f424,67788764,0,0x0,8
tick,0x7ffdf681f424,67791123,0,0x0,8
tick,0x7ffdf681f424,67792677,0,0x0,8
tick,0x7ffdf681f424,67794676,0,0x0,8
tick,0x7ffdf681f424,67796664,0,0x0,8
tick,0x7ffdf681f424,67798658,0,0x0,8
tick,0x7ffdf681f424,67802073,0,0x0,8
tick,0x7ffdf681f424,67807338,0,0x0,8
tick,0x7ffdf681f424,67813111,0,0x0,8
tick,0x7ffdf681f424,67814619,0,0x0,8
tick,0x7ffdf681f424,67816615,0,0x0,8
tick,0x7ffdf681f424,67818611,0,0x0,8
tick,0x7ffdf681f424,67820599,0,0x0,8
tick,0x7ffdf681f424,67822601,0,0x0,8
tick,0x7ffdf681f424,67824591,0,0x0,8
tick,0x7ffdf681f424,67826904,0,0x0,8
tick,0x7ffdf681f424,67828612,0,0x0,8
tick,0x7ffdf681f424,67830594,0,0x0,8
tick,0x7ffdf681f424,67832568,0,0x0,8
tick,0x7ffdf681f424,67834562,0,0x0,8
tick,0x7ffdf681f424,67836563,0,0x0,8
tick,0x7ffdf681f424,67838556,0,0x0,8
tick,0x7ffdf681f424,67840548,0,0x0,8
tick,0x7ffdf681f424,67842541,0,0x0,8
tick,0x7ffdf681f424,67844537,0,0x0,8
tick,0x7ffdf681f424,67846533,0,0x0,8
tick,0x7ffdf681f424,67848659,0,0x0,8
tick,0x7ffdf681f424,67850531,0,0x0,8
tick,0x7ffdf681f424,67852534,0,0x0,8
tick,0x7ffdf681f424,67854971,0,0x0,8
tick,0x7ffdf681f424,67856503,0,0x0,8
tick,0x7ffdf681f424,67858503,0,0x0,8
tick,0x7ffdf681f424,67864906,0,0x0,8
tick,0x7ffdf681f424,67866484,0,0x0,8
tick,0x7ffdf681f424,67868486,0,0x0,8
tick,0x7ffdf681f424,67870477,0,0x0,8
tick,0x7ffdf681f424,67872467,0,0x0,8
tick,0x7ffdf681f424,67874483,0,0x0,8
tick,0x7ffdf681f424,67876462,0,0x0,8
tick,0x7ffdf681f424,67878561,0,0x0,8
tick,0x7ffdf681f424,67880496,0,0x0,8
tick,0x7ffdf681f424,67882442,0,0x0,8
tick,0x7ffdf681f424,67884433,0,0x0,8
tick,0x7ffdf681f424,67886427,0,0x0,8
tick,0x7ffdf681f424,67888426,0,0x0,8
tick,0x7ffdf681f424,67900868,0,0x0,8
tick,0x7ffdf681f424,67900910,0,0x0,8
tick,0x7ffdf681f424,67902387,0,0x0,8
tick,0x7ffdf681f424,67904482,0,0x0,8
tick,0x7ffdf681f424,67906434,0,0x0,8
tick,0x7ffdf681f424,67908552,0,0x0,8
tick,0x7ffdf681f424,67910465,0,0x0,8
tick,0x7ffdf681f424,67912356,0,0x0,8
tick,0x7ffdf681f424,67914350,0,0x0,8
tick,0x7ffdf681f424,67916350,0,0x0,8
tick,0x7ffdf681f424,67918339,0,0x0,8
tick,0x7ffdf681f424,67920335,0,0x0,8
tick,0x7ffdf681f424,67922335,0,0x0,8
tick,0x7ffdf681f424,67924322,0,0x0,8
tick,0x7ffdf681f424,67926327,0,0x0,8
tick,0x7ffdf681f424,67928311,0,0x0,8
tick,0x7ffdf681f424,67930310,0,0x0,8
tick,0x7ffdf681f424,67932353,0,0x0,8
tick,0x7ffdf681f424,67934298,0,0x0,8
tick,0x7ffdf681f424,67936356,0,0x0,8
tick,0x7ffdf681f424,67938292,0,0x0,8
tick,0x7ffdf681f424,67940284,0,0x0,8
tick,0x7ffdf681f424,67942281,0,0x0,8
tick,0x7ffdf681f424,67944280,0,0x0,8
tick,0x7ffdf681f424,67946270,0,0x0,8
tick,0x7ffdf681f424,67948264,0,0x0,8
tick,0x7ffdf681f424,67964104,0,0x0,8
tick,0x7ffdf681f424,67965221,0,0x0,8
tick,0x7ffdf681f424,67967226,0,0x0,8
tick,0x7ffdf681f424,67969242,0,0x0,8
tick,0x7ffdf681f424,67971303,0,0x0,8
tick,0x7ffdf681f424,67973207,0,0x0,8
tick,0x7ffdf681f424,67975191,0,0x0,8
tick,0x7ffdf681f424,67977178,0,0x0,8
tick,0x7ffdf681f424,67979175,0,0x0,8
tick,0x7ffdf681f424,67981188,0,0x0,8
tick,0x7ffdf681f424,67983192,0,0x0,8
tick,0x7ffdf681f424,67992201,0,0x0,8
tick,0x7ffdf681f424,67994141,0,0x0,8
tick,0x7ffdf681f424,67996176,0,0x0,8
tick,0x7ffdf681f424,67998133,0,0x0,8
tick,0x7ffdf681f424,68000122,0,0x0,8
tick,0x7ffdf681f424,68002118,0,0x0,8
tick,0x7ffdf681f424,68004139,0,0x0,8
tick,0x7ffdf681f424,68006164,0,0x0,8
tick,0x7ffdf681f424,68010032,0,0x0,8
tick,0x7ffdf681f424,68011284,0,0x0,8
tick,0x7ffdf681f424,68013086,0,0x0,8
tick,0x7ffdf681f424,68015085,0,0x0,8
tick,0x7ffdf681f424,68017081,0,0x0,8
tick,0x7ffdf681f424,68019070,0,0x0,8
tick,0x7ffdf681f424,68021066,0,0x0,8
tick,0x7ffdf681f424,68023060,0,0x0,8
tick,0x7ffdf681f424,68025096,0,0x0,8
tick,0x7ffdf681f424,68027051,0,0x0,8
tick,0x7ffdf681f424,68029043,0,0x0,8
tick,0x7ffdf681f424,68031037,0,0x0,8
tick,0x7ffdf681f424,68033036,0,0x0,8
tick,0x7ffdf681f424,68035714,0,0x0,8
tick,0x7ffdf681f424,68037187,0,0x0,8
tick,0x7ffdf681f424,68039135,0,0x0,8
tick,0x7ffdf681f424,68041120,0,0x0,8
tick,0x7ffdf681f424,68043013,0,0x0,8
tick,0x7ffdf681f424,68045055,0,0x0,8
tick,0x7ffdf681f424,68047006,0,0x0,8
tick,0x7ffdf681f424,68048998,0,0x0,8
tick,0x7ffdf681f424,68051047,0,0x0,8
tick,0x7ffdf681f424,68053167,0,0x0,8
tick,0x7ffdf681f424,68055016,0,0x0,8
tick,0x7ffdf681f424,68056967,0,0x0,8
tick,0x7ffdf681f424,68058968,0,0x0,8
tick,0x7ffdf681f424,68061888,0,0x0,8
tick,0x7ffdf681f424,68063293,0,0x0,8
tick,0x7ffdf681f424,68065026,0,0x0,8
tick,0x7ffdf681f424,68066962,0,0x0,8
tick,0x7ffdf681f424,68070140,0,0x0,8
tick,0x7ffdf681f424,68071933,0,0x0,8
tick,0x7ffdf681f424,68073923,0,0x0,8
tick,0x7ffdf681f424,68075917,0,0x0,8
tick,0x7ffdf681f424,68077917,0,0x0,8
tick,0x7ffdf681f424,68079906,0,0x0,8
tick,0x7ffdf681f424,68081900,0,0x0,8
tick,0x7ffdf681f424,68083905,0,0x0,8
tick,0x7ffdf681f424,68085935,0,0x0,8
tick,0x7ffdf681f424,68087885,0,0x0,8
tick,0x7ffdf681f424,68089881,0,0x0,8
tick,0x7ffdf681f424,68091883,0,0x0,8
tick,0x7ffdf681f424,68093871,0,0x0,8
tick,0x7ffdf681f424,68095865,0,0x0,8
tick,0x7ffdf681f424,68097854,0,0x0,8
tick,0x7ffdf681f424,68099862,0,0x0,8
tick,0x7ffdf681f424,68101853,0,0x0,8
tick,0x7ffdf681f424,68125422,0,0x0,8
tick,0x7ffdf681f424,68127171,0,0x0,8
tick,0x7ffdf681f424,68128781,0,0x0,8
tick,0x7ffdf681f424,68130776,0,0x0,8
tick,0x7ffdf681f424,68132771,0,0x0,8
tick,0x7ffdf681f424,68134765,0,0x0,8
tick,0x7ffdf681f424,68136754,0,0x0,8
tick,0x7ffdf681f424,68138749,0,0x0,8
tick,0x7ffdf681f424,68140746,0,0x0,8
tick,0x7ffdf681f424,68142788,0,0x0,8
tick,0x7ffdf681f424,68144761,0,0x0,8
tick,0x7ffdf681f424,68146729,0,0x0,8
tick,0x7ffdf681f424,68148725,0,0x0,8
tick,0x7ffdf681f424,68150718,0,0x0,8
tick,0x7ffdf681f424,68152713,0,0x0,8
tick,0x7ffdf681f424,68154750,0,0x0,8
tick,0x7ffdf681f424,68156697,0,0x0,8
tick,0x7ffdf681f424,68158702,0,0x0,8
tick,0x7ffdf681f424,68160713,0,0x0,8
tick,0x7ffdf681f424,68162686,0,0x0,8
tick,0x7ffdf681f424,68164720,0,0x0,8
tick,0x7ffdf681f424,68166686,0,0x0,8
tick,0x7ffdf681f424,68168681,0,0x0,8
tick,0x7ffdf681f424,68170677,0,0x0,8
tick,0x7ffdf681f424,68172660,0,0x0,8
tick,0x7ffdf681f424,68174654,0,0x0,8
tick,0x7ffdf681f424,68176649,0,0x0,8
tick,0x7ffdf681f424,68178643,0,0x0,8
tick,0x7ffdf681f424,68180638,0,0x0,8
tick,0x7ffdf681f424,68182638,0,0x0,8
tick,0x7ffdf681f424,68184629,0,0x0,8
tick,0x7ffdf681f424,68186628,0,0x0,8
tick,0x7ffdf681f424,68188615,0,0x0,8
tick,0x7ffdf681f424,68190612,0,0x0,8
tick,0x7ffdf681f424,68192607,0,0x0,8
tick,0x7ffdf681f424,68194598,0,0x0,8
tick,0x7ffdf681f424,68196594,0,0x0,8
tick,0x7ffdf681f424,68198661,0,0x0,8
tick,0x7ffdf681f424,68204519,0,0x0,8
tick,0x7ffdf681f424,68207320,0,0x0,8
tick,0x7ffdf681f424,68215333,0,0x0,8
tick,0x7ffdf681f424,68216541,0,0x0,8
tick,0x7ffdf681f424,68218551,0,0x0,8
tick,0x7ffdf681f424,68220586,0,0x0,8
tick,0x7ffdf681f424,68222557,0,0x0,8
tick,0x7ffdf681f424,68224548,0,0x0,8
tick,0x7ffdf681f424,68226516,0,0x0,8
tick,0x7ffdf681f424,68228514,0,0x0,8
tick,0x7ffdf681f424,68230514,0,0x0,8
tick,0x7ffdf681f424,68232545,0,0x0,8
tick,0x7ffdf681f424,68234498,0,0x0,8
tick,0x7ffdf681f424,68236493,0,0x0,8
tick,0x7ffdf681f424,68238486,0,0x0,8
tick,0x7ffdf681f424,68240477,0,0x0,8
tick,0x7ffdf681f424,68242473,0,0x0,8
tick,0x7ffdf681f424,68244468,0,0x0,8
tick,0x7ffdf681f424,68246457,0,0x0,8
tick,0x7ffdf681f424,68248453,0,0x0,8
tick,0x7ffdf681f424,68250450,0,0x0,8
tick,0x7ffdf681f424,68252452,0,0x0,8
tick,0x7ffdf681f424,68254444,0,0x0,8
tick,0x7ffdf681f424,68256446,0,0x0,8
tick,0x7ffdf681f424,68258493,0,0x0,8
tick,0x7ffdf681f424,68260426,0,0x0,8
tick,0x7ffdf681f424,68263031,0,0x0,8
tick,0x7ffdf681f424,68278671,0,0x0,8
tick,0x7ffdf681f424,68280372,0,0x0,8
tick,0x7ffdf681f424,68282369,0,0x0,8
tick,0x7ffdf681f424,68284362,0,0x0,8
tick,0x7ffdf681f424,68286429,0,0x0,8
tick,0x7ffdf681f424,68288512,0,0x0,8
tick,0x7ffdf681f424,68290454,0,0x0,8
tick,0x7ffdf681f424,68292353,0,0x0,8
tick,0x7ffdf681f424,68306131,0,0x0,8
tick,0x7ffdf681f424,68307550,0,0x0,8
tick,0x7ffdf681f424,68309298,0,0x0,8
tick,0x7ffdf681f424,68311449,0,0x0,8
tick,0x7ffdf681f424,68313790,0,0x0,8
tick,0x7ffdf681f424,68315292,0,0x0,8
tick,0x7ffdf681f424,68317306,0,0x0,8
tick,0x7ffdf681f424,68319281,0,0x0,8
tick,0x7ffdf681f424,68321325,0,0x0,8
tick,0x7ffdf681f424,68323260,0,0x0,8
tick,0x7ffdf681f424,68325279,0,0x0,8
tick,0x7ffdf681f424,68327251,0,0x0,8
tick,0x7ffdf681f424,68329240,0,0x0,8
tick,0x7ffdf681f424,68331242,0,0x0,8
tick,0x7ffdf681f424,68333230,0,0x0,8
tick,0x7ffdf681f424,68335235,0,0x0,8
tick,0x7ffdf681f424,68337216,0,0x0,8
tick,0x7ffdf681f424,68339225,0,0x0,8
tick,0x7ffdf681f424,68341209,0,0x0,8
tick,0x7ffdf681f424,68343200,0,0x0,8
tick,0x7ffdf681f424,68345196,0,0x0,8
tick,0x7ffdf681f424,68347190,0,0x0,8
tick,0x7ffdf681f424,68349187,0,0x0,8
tick,0x7ffdf681f424,68351186,0,0x0,8
tick,0x7ffdf681f424,68353179,0,0x0,8
tick,0x7ffdf681f424,68355215,0,0x0,8
tick,0x7ffdf681f424,68357171,0,0x0,8
tick,0x7ffdf681f424,68359161,0,0x0,8
tick,0x7ffdf681f424,68361158,0,0x0,8
tick,0x7ffdf681f424,68365189,0,0x0,8
tick,0x7ffdf681f424,68376951,0,0x0,8
tick,0x7ffdf681f424,68376995,0,0x0,8
tick,0x7ffdf681f424,68378112,0,0x0,8
tick,0x7ffdf681f424,68380114,0,0x0,8
tick,0x7ffdf681f424,68382581,0,0x0,8
tick,0x7ffdf681f424,68384145,0,0x0,8
tick,0x7ffdf681f424,68386096,0,0x0,8
tick,0x7ffdf681f424,68388201,0,0x0,8
tick,0x7ffdf681f424,68390084,0,0x0,8
tick,0x7ffdf681f424,68392074,0,0x0,8
tick,0x7ffdf681f424,68394066,0,0x0,8
tick,0x7ffdf681f424,68396057,0,0x0,8
tick,0x7ffdf681f424,68398066,0,0x0,8
tick,0x7ffdf681f424,68400048,0,0x0,8
tick,0x7ffdf681f424,68402045,0,0x0,8
tick,0x7ffdf681f424,68404037,0,0x0,8
tick,0x7ffdf681f424,68406034,0,0x0,8
tick,0x7ffdf681f424,68408040,0,0x0,8
tick,0x7ffdf681f424,68410026,0,0x0,8
tick,0x7ffdf681f424,68412017,0,0x0,8
tick,0x7ffdf681f424,68416128,0,0x0,8
tick,0x7ffdf681f424,68428887,0,0x0,8
tick,0x7ffdf681f424,68429973,0,0x0,8
tick,0x7ffdf681f424,68431968,0,0x0,8
tick,0x7ffdf681f424,68433974,0,0x0,8
tick,0x7ffdf681f424,68436313,0,0x0,8
tick,0x7ffdf681f424,68438026,0,0x0,8
tick,0x7ffdf681f424,68440022,0,0x0,8
tick,0x7ffdf681f424,68441967,0,0x0,8
tick,0x7ffdf681f424,68443946,0,0x0,8
tick,0x7ffdf681f424,68458341,0,0x0,8
tick,0x7ffdf681f424,68459899,0,0x0,8
tick,0x7ffdf681f424,68461894,0,0x0,8
tick,0x7ffdf681f424,68464481,0,0x0,8
tick,0x7ffdf681f424,68465961,0,0x0,8
tick,0x7ffdf681f424,68467909,0,0x0,8
tick,0x7ffdf681f424,68469863,0,0x0,8
tick,0x7ffdf681f424,68471863,0,0x0,8
tick,0x7ffdf681f424,68473852,0,0x0,8
tick,0x7ffdf681f424,68475850,0,0x0,8
tick,0x7ffdf681f424,68477843,0,0x0,8
tick,0x7ffdf681f424,68479840,0,0x0,8
tick,0x7ffdf681f424,68481829,0,0x0,8
tick,0x7ffdf681f424,68483823,0,0x0,8
tick,0x7ffdf681f424,68485817,0,0x0,8
tick,0x7ffdf681f424,68487813,0,0x0,8
tick,0x7ffdf681f424,68489812,0,0x0,8
tick,0x7ffdf681f424,68491803,0,0x0,8
tick,0x7ffdf681f424,68493800,0,0x0,8
tick,0x7ffdf681f424,68495793,0,0x0,8
tick,0x7ffdf681f424,68497785,0,0x0,8
tick,0x7ffdf681f424,68500091,0,0x0,8
tick,0x7ffdf681f424,68501918,0,0x0,8
tick,0x7ffdf681f424,68503828,0,0x0,8
tick,0x7ffdf681f424,68505786,0,0x0,8
tick,0x7ffdf681f424,68507817,0,0x0,8
tick,0x7ffdf681f424,68509768,0,0x0,8
tick,0x7ffdf681f424,68515574,0,0x0,8
tick,0x7ffdf681f424,68516812,0,0x0,8
tick,0x7ffdf681f424,68518732,0,0x0,8
tick,0x7ffdf681f424,68520782,0,0x0,8
tick,0x7ffdf681f424,68522729,0,0x0,8
tick,0x7ffdf681f424,68524721,0,0x0,8
tick,0x7ffdf681f424,68526725,0,0x0,8
tick,0x7ffdf681f424,68528704,0,0x0,8
tick,0x7ffdf681f424,68530703,0,0x0,8
tick,0x7ffdf681f424,68532693,0,0x0,8
tick,0x7ffdf681f424,68534692,0,0x0,8
tick,0x7ffdf681f424,68536690,0,0x0,8
tick,0x7ffdf681f424,68538678,0,0x0,8
tick,0x7ffdf681f424,68540673,0,0x0,8
tick,0x7ffdf681f424,68542708,0,0x0,8
tick,0x7ffdf681f424,68544667,0,0x0,8
tick,0x7ffdf681f424,68546665,0,0x0,8
tick,0x7ffdf681f424,68550624,0,0x0,8
tick,0x7ffdf681f424,68564523,0,0x0,8
tick,0x7ffdf681f424,68565611,0,0x0,8
tick,0x7ffdf681f424,68567630,0,0x0,8
tick,0x7ffdf681f424,68569621,0,0x0,8
tick,0x7ffdf681f424,68571845,0,0x0,8
tick,0x7ffdf681f424,68573608,0,0x0,8
tick,0x7ffdf681f424,68575640,0,0x0,8
tick,0x7ffdf681f424,68577637,0,0x0,8
tick,0x7ffdf681f424,68579571,0,0x0,8
tick,0x7ffdf681f424,68581589,0,0x0,8
tick,0x7ffdf681f424,68583565,0,0x0,8
tick,0x7ffdf681f424,68585556,0,0x0,8
tick,0x7ffdf681f424,68587554,0,0x0,8
tick,0x7ffdf681f424,68589592,0,0x0,8
tick,0x7ffdf681f424,68591750,0,0x0,8
tick,0x7ffdf681f424,68603522,0,0x0,8
tick,0x7ffdf681f424,68604514,0,0x0,8
tick,0x7ffdf681f424,68606507,0,0x0,8
tick,0x7ffdf681f424,68608535,0,0x0,8
tick,0x7ffdf681f424,68610622,0,0x0,8
tick,0x7ffdf681f424,68612591,0,0x0,8
tick,0x7ffdf681f424,68614482,0,0x0,8
tick,0x7ffdf681f424,68616476,0,0x0,8
tick,0x7ffdf681f424,68618471,0,0x0,8
tick,0x7ffdf681f424,68620459,0,0x0,8
tick,0x7ffdf681f424,68622456,0,0x0,8
tick,0x7ffdf681f424,68624478,0,0x0,8
tick,0x7ffdf681f424,68626444,0,0x0,8
tick,0x7ffdf681f424,68628439,0,0x0,8
tick,0x7ffdf681f424,68630443,0,0x0,8
tick,0x7ffdf681f424,68632427,0,0x0,8
tick,0x7ffdf681f424,68634755,0,0x0,8
tick,0x7ffdf681f424,68636454,0,0x0,8
tick,0x7ffdf681f424,68638413,0,0x0,8
tick,0x7ffdf681f424,68640404,0,0x0,8
tick,0x7ffdf681f424,68642399,0,0x0,8
tick,0x7ffdf681f424,68644398,0,0x0,8
tick,0x7ffdf681f424,68646395,0,0x0,8
tick,0x7ffdf681f424,68648384,0,0x0,8
tick,0x7ffdf681f424,68650383,0,0x0,8
tick,0x7ffdf681f424,68652376,0,0x0,8
tick,0x7ffdf681f424,68654366,0,0x0,8
tick,0x7ffdf681f424,68656360,0,0x0,8
tick,0x7ffdf681f424,68658377,0,0x0,8
tick,0x7ffdf681f424,68660356,0,0x0,8
tick,0x7ffdf681f424,68662348,0,0x0,8
tick,0x7ffdf681f424,68671386,0,0x0,8
tick,0x7ffdf681f424,68673327,0,0x0,8
tick,0x7ffdf681f424,68675366,0,0x0,8
tick,0x7ffdf681f424,68680883,0,0x0,8
tick,0x7ffdf681f424,68682311,0,0x0,8
tick,0x7ffdf681f424,68684301,0,0x0,8
tick,0x7ffdf681f424,68686758,0,0x0,8
tick,0x7ffdf681f424,68708552,0,0x0,8
tick,0x7ffdf681f424,68709445,0,0x0,8
tick,0x7ffdf681f424,68711225,0,0x0,8
tick,0x7ffdf681f424,68713327,0,0x0,8
tick,0x7ffdf681f424,68715394,0,0x0,8
tick,0x7ffdf681f424,68717263,0,0x0,8
tick,0x7ffdf681f424,68719239,0,0x0,8
tick,0x7ffdf681f424,68721256,0,0x0,8
tick,0x7ffdf681f424,68723319,0,0x0,8
tick,0x7ffdf681f424,68725184,0,0x0,8
tick,0x7ffdf681f424,68727178,0,0x0,8
tick,0x7ffdf681f424,68729174,0,0x0,8
tick,0x7ffdf681f424,68731175,0,0x0,8
tick,0x7ffdf681f424,68733170,0,0x0,8
tick,0x7ffdf681f424,68735170,0,0x0,8
tick,0x7ffdf681f424,68737148,0,0x0,8
tick,0x7ffdf681f424,68739166,0,0x0,8
tick,0x7ffdf681f424,68741137,0,0x0,8
tick,0x7ffdf681f424,68743140,0,0x0,8
tick,0x7ffdf681f424,68745135,0,0x0,8
tick,0x7ffdf681f424,68747125,0,0x0,8
tick,0x7ffdf681f424,68749322,0,0x0,8
tick,0x7ffdf681f424,68751374,0,0x0,8
tick,0x7ffdf681f424,68753130,0,0x0,8
tick,0x7ffdf681f424,68755150,0,0x0,8
tick,0x7ffdf681f424,68757161,0,0x0,8
tick,0x7ffdf681f424,68759090,0,0x0,8
tick,0x7ffdf681f424,68761084,0,0x0,8
tick,0x7ffdf681f424,68763081,0,0x0,8
tick,0x7ffdf681f424,68765069,0,0x0,8
tick,0x7ffdf681f424,68767065,0,0x0,8
tick,0x7ffdf681f424,68769074,0,0x0,8
tick,0x7ffdf681f424,68771054,0,0x0,8
tick,0x7ffdf681f424,68773047,0,0x0,8
tick,0x7ffdf681f424,68775060,0,0x0,8
tick,0x7ffdf681f424,68777040,0,0x0,8
tick,0x7ffdf681f424,68779061,0,0x0,8
tick,0x7ffdf681f424,68781030,0,0x0,8
tick,0x7ffdf681f424,68783044,0,0x0,8
tick,0x7ffdf681f424,68785036,0,0x0,8
tick,0x7ffdf681f424,68787013,0,0x0,8
tick,0x7ffdf681f424,68789008,0,0x0,8
tick,0x7ffdf681f424,68791007,0,0x0,8
tick,0x7ffdf681f424,68793000,0,0x0,8
tick,0x7ffdf681f424,68794993,0,0x0,8
tick,0x7ffdf681f424,68796988,0,0x0,8
tick,0x7ffdf681f424,68798982,0,0x0,8
tick,0x7ffdf681f424,68801854,0,0x0,8
tick,0x7ffdf681f424,68816203,0,0x0,8
tick,0x7ffdf681f424,68816236,0,0x0,8
tick,0x7ffdf681f424,68817936,0,0x0,8
tick,0x7ffdf681f424,68819926,0,0x0,8
tick,0x7ffdf681f424,68821928,0,0x0,8
tick,0x7ffdf681f424,68823987,0,0x0,8
tick,0x7ffdf681f424,68825979,0,0x0,8
tick,0x7ffdf681f424,68827940,0,0x0,8
tick,0x7ffdf681f424,68829919,0,0x0,8
tick,0x7ffdf681f424,68831898,0,0x0,8
tick,0x7ffdf681f424,68833897,0,0x0,8
tick,0x7ffdf681f424,68835887,0,0x0,8
tick,0x7ffdf681f424,68837884,0,0x0,8
tick,0x7ffdf681f424,68839875,0,0x0,8
tick,0x7ffdf681f424,68841883,0,0x0,8
tick,0x7ffdf681f424,68843862,0,0x0,8
tick,0x7ffdf681f424,68845861,0,0x0,8
tick,0x7ffdf681f424,68847858,0,0x0,8
tick,0x7ffdf681f424,68849850,0,0x0,8
tick,0x7ffdf681f424,68851841,0,0x0,8
tick,0x7ffdf681f424,68853874,0,0x0,8
tick,0x7ffdf681f424,68855838,0,0x0,8
tick,0x7ffdf681f424,68857860,0,0x0,8
tick,0x7ffdf681f424,68873399,0,0x0,8
tick,0x7ffdf681f424,68874783,0,0x0,8
tick,0x7ffdf681f424,68876781,0,0x0,8
tick,0x7ffdf681f424,68879036,0,0x0,8
tick,0x7ffdf681f424,68880854,0,0x0,8
tick,0x7ffdf681f424,68882808,0,0x0,8
tick,0x7ffdf681f424,68884758,0,0x0,8
tick,0x7ffdf681f424,68886749,0,0x0,8
tick,0x7ffdf681f424,68888762,0,0x0,8
tick,0x7ffdf681f424,68890738,0,0x0,8
tick,0x7ffdf681f424,68892740,0,0x0,8
tick,0x7ffdf681f424,68894737,0,0x0,8
tick,0x7ffdf681f424,68896724,0,0x0,8
tick,0x7ffdf681f424,68898725,0,0x0,8
tick,0x7ffdf681f424,68900746,0,0x0,8
tick,0x7ffdf681f424,68902712,0,0x0,8
tick,0x7ffdf681f424,68904704,0,0x0,8
tick,0x7ffdf681f424,68906700,0,0x0,8
tick,0x7ffdf681f424,68908697,0,0x0,8
tick,0x7ffdf681f424,68910687,0,0x0,8
tick,0x7ffdf681f424,68912684,0,0x0,8
tick,0x7ffdf681f424,68914677,0,0x0,8
tick,0x7ffdf681f424,68916673,0,0x0,8
tick,0x7ffdf681f424,68918663,0,0x0,8
tick,0x7ffdf681f424,68920664,0,0x0,8
tick,0x7ffdf681f424,68922661,0,0x0,8
tick,0x7ffdf681f424,68938593,0,0x0,8
tick,0x7ffdf681f424,68939614,0,0x0,8
tick,0x7ffdf681f424,68941615,0,0x0,8
tick,0x7ffdf681f424,68943983,0,0x0,8
tick,0x7ffdf681f424,68945596,0,0x0,8
tick,0x7ffdf681f424,68947630,0,0x0,8
tick,0x7ffdf681f424,68949633,0,0x0,8
tick,0x7ffdf681f424,68951575,0,0x0,8
tick,0x7ffdf681f424,68954075,0,0x0,8
tick,0x7ffdf681f424,68965420,0,0x0,8
tick,0x7ffdf681f424,68968277,0,0x0,8
tick,0x7ffdf681f424,68970863,0,0x0,8
tick,0x7ffdf681f424,68972524,0,0x0,8
tick,0x7ffdf681f424,68974517,0,0x0,8
tick,0x7ffdf681f424,68976521,0,0x0,8
tick,0x7ffdf681f424,68978527,0,0x0,8
tick,0x7ffdf681f424,68980502,0,0x0,8
tick,0x7ffdf681f424,68982503,0,0x0,8
tick,0x7ffdf681f424,68984604,0,0x0,8
tick,0x7ffdf681f424,68986485,0,0x0,8
tick,0x7ffdf681f424,68988478,0,0x0,8
tick,0x7ffdf681f424,68990479,0,0x0,8
tick,0x7ffdf681f424,68992468,0,0x0,8
tick,0x7ffdf681f424,68994477,0,0x0,8
tick,0x7ffdf681f424,68996458,0,0x0,8
tick,0x7ffdf681f424,68998471,0,0x0,8
tick,0x7ffdf681f424,69009545,0,0x0,8
tick,0x7ffdf681f424,69013975,0,0x0,8
tick,0x7ffdf681f424,69015430,0,0x0,8
tick,0x7ffdf681f424,69017413,0,0x0,8
tick,0x7ffdf681f424,69019899,0,0x0,8
tick,0x7ffdf681f424,69021412,0,0x0,8
tick,0x7ffdf681f424,69023389,0,0x0,8
tick,0x7ffdf681f424,69025381,0,0x0,8
tick,0x7ffdf681f424,69027373,0,0x0,8
tick,0x7ffdf681f424,69029366,0,0x0,8
tick,0x7ffdf681f424,69031363,0,0x0,8
tick,0x7ffdf681f424,69033356,0,0x0,8
tick,0x7ffdf681f424,69035380,0,0x0,8
tick,0x7ffdf681f424,69037347,0,0x0,8
tick,0x7ffdf681f424,69039346,0,0x0,8
tick,0x7ffdf681f424,69041333,0,0x0,8
tick,0x7ffdf681f424,69043330,0,0x0,8
tick,0x7ffdf681f424,69045327,0,0x0,8
tick,0x7ffdf681f424,69047337,0,0x0,8
tick,0x7ffdf681f424,69049313,0,0x0,8
tick,0x7ffdf681f424,69051309,0,0x0,8
tick,0x7ffdf681f424,69053308,0,0x0,8
tick,0x7ffdf681f424,69055301,0,0x0,8
tick,0x7ffdf681f424,69057297,0,0x0,8
tick,0x7ffdf681f424,69059290,0,0x0,8
tick,0x7ffdf681f424,69068515,0,0x0,8
tick,0x7ffdf681f424,69069382,0,0x0,8
tick,0x7ffdf681f424,69071484,0,0x0,8
tick,0x7ffdf681f424,69073388,0,0x0,8
tick,0x7ffdf681f424,69075328,0,0x0,8
tick,0x7ffdf681f424,69077247,0,0x0,8
tick,0x7ffdf681f424,69079239,0,0x0,8
tick,0x7ffdf681f424,69081245,0,0x0,8
tick,0x7ffdf681f424,69083310,0,0x0,8
tick,0x7ffdf681f424,69085220,0,0x0,8
tick,0x7ffdf681f424,69087234,0,0x0,8
tick,0x7ffdf681f424,69089292,0,0x0,8
tick,0x7ffdf681f424,69091290,0,0x0,8
tick,0x7ffdf681f424,69093197,0,0x0,8
tick,0x7ffdf681f424,69095195,0,0x0,8
tick,0x7ffdf681f424,69097201,0,0x0,8
tick,0x7ffdf681f424,69099233,0,0x0,8
tick,0x7ffdf681f424,69101188,0,0x0,8
tick,0x7ffdf681f424,69103171,0,0x0,8
tick,0x7ffdf681f424,69107777,0,0x0,8
tick,0x7ffdf681f424,69113406,0,0x0,8
tick,0x7ffdf681f424,69115143,0,0x0,8
tick,0x7ffdf681f424,69123867,0,0x0,8
tick,0x7ffdf681f424,69125117,0,0x0,8
tick,0x7ffdf681f424,69127108,0,0x0,8
tick,0x7ffdf681f424,69129104,0,0x0,8
tick,0x7ffdf681f424,69131107,0,0x0,8
tick,0x7ffdf681f424,69133105,0,0x0,8
tick,0x7ffdf681f424,69135500,0,0x0,8
tick,0x7ffdf681f424,69137080,0,0x0,8
tick,0x7ffdf681f424,69139074,0,0x0,8
tick,0x7ffdf681f424,69141075,0,0x0,8
tick,0x7ffdf681f424,69143073,0,0x0,8
tick,0x7ffdf681f424,69145118,0,0x0,8
tick,0x7ffdf681f424,69147061,0,0x0,8
tick,0x7ffdf681f424,69149071,0,0x0,8
tick,0x7ffdf681f424,69151045,0,0x0,8
tick,0x7ffdf681f424,69153036,0,0x0,8
tick,0x7ffdf681f424,69155030,0,0x0,8
tick,0x7ffdf681f424,69157310,0,0x0,8
tick,0x7ffdf681f424,69170579,0,0x0,8
tick,0x7ffdf681f424,69171995,0,0x0,8
tick,0x7ffdf681f424,69173991,0,0x0,8
tick,0x7ffdf681f424,69176672,0,0x0,8
tick,0x7ffdf681f424,69178039,0,0x0,8
tick,0x7ffdf681f424,69180078,0,0x0,8
tick,0x7ffdf681f424,69181959,0,0x0,8
tick,0x7ffdf681f424,69183958,0,0x0,8
tick,0x7ffdf681f424,69185954,0,0x0,8
tick,0x7ffdf681f424,69187942,0,0x0,8
tick,0x7ffdf681f424,69189935,0,0x0,8
tick,0x7ffdf681f424,69191941,0,0x0,8
tick,0x7ffdf681f424,69193927,0,0x0,8
tick,0x7ffdf681f424,69195920,0,0x0,8
tick,0x7ffdf681f424,69197915,0,0x0,8
tick,0x7ffdf681f424,69199914,0,0x0,8
tick,0x7ffdf681f424,69201948,0,0x0,8
tick,0x7ffdf681f424,69203899,0,0x0,8
tick,0x7ffdf681f424,69205895,0,0x0,8
tick,0x7ffdf681f424,69207891,0,0x0,8
tick,0x7ffdf681f424,69209884,0,0x0,8
tick,0x7ffdf681f424,69211877,0,0x0,8
tick,0x7ffdf681f424,69213877,0,0x0,8
tick,0x7ffdf681f424,69230614,0,0x0,8
tick,0x7ffdf681f424,69231617,0,0x0,8
tick,0x7ffdf681f424,69232829,0,0x0,8
tick,0x7ffdf681f424,69234824,0,0x0,8
tick,0x7ffdf681f424,69237064,0,0x0,8
tick,0x7ffdf681f424,69238816,0,0x0,8
tick,0x7ffdf681f424,69240841,0,0x0,8
tick,0x7ffdf681f424,69242801,0,0x0,8
tick,0x7ffdf681f424,69244795,0,0x0,8
tick,0x7ffdf681f424,69246787,0,0x0,8
tick,0x7ffdf681f424,69248786,0,0x0,8
tick,0x7ffdf681f424,69250849,0,0x0,8
tick,0x7ffdf681f424,69252772,0,0x0,8
tick,0x7ffdf681f424,69254766,0,0x0,8
tick,0x7ffdf681f424,69256761,0,0x0,8
tick,0x7ffdf681f424,69258841,0,0x0,8
tick,0x7ffdf681f424,69262231,0,0x0,8
tick,0x7ffdf681f424,69274598,0,0x0,8
tick,0x7ffdf681f424,69275854,0,0x0,8
tick,0x7ffdf681f424,69277711,0,0x0,8
tick,0x7ffdf681f424,69279706,0,0x0,8
tick,0x7ffdf681f424,69281696,0,0x0,8
tick,0x7ffdf681f424,69283692,0,0x0,8
tick,0x7ffdf681f424,69285688,0,0x0,8
tick,0x7ffdf681f424,69287768,0,0x0,8
tick,0x7ffdf681f424,69289699,0,0x0,8
tick,0x7ffdf681f424,69291705,0,0x0,8
tick,0x7ffdf681f424,69293670,0,0x0,8
tick,0x7ffdf681f424,69295658,0,0x0,8
tick,0x7ffdf681f424,69297659,0,0x0,8
tick,0x7ffdf681f424,69317998,0,0x0,8
tick,0x7ffdf681f424,69319601,0,0x0,8
tick,0x7ffdf681f424,69321590,0,0x0,8
tick,0x7ffdf681f424,69323584,0,0x0,8
tick,0x7ffdf681f424,69325590,0,0x0,8
tick,0x7ffdf681f424,69327574,0,0x0,8
tick,0x7ffdf681f424,69330369,0,0x0,8
tick,0x7ffdf681f424,69331702,0,0x0,8
tick,0x7ffdf681f424,69333707,0,0x0,8
tick,0x7ffdf681f424,69335573,0,0x0,8
tick,0x7ffdf681f424,69337542,0,0x0,8
tick,0x7ffdf681f424,69339562,0,0x0,8
tick,0x7ffdf681f424,69341537,0,0x0,8
tick,0x7ffdf681f424,69343528,0,0x0,8
tick,0x7ffdf681f424,69345579,0,0x0,8
tick,0x7ffdf681f424,69347539,0,0x0,8
tick,0x7ffdf681f424,69349538,0,0x0,8
tick,0x7ffdf681f424,69351506,0,0x0,8
tick,0x7ffdf681f424,69353501,0,0x0,8
tick,0x7ffdf681f424,69355534,0,0x0,8
tick,0x7ffdf681f424,69357492,0,0x0,8
tick,0x7ffdf681f424,69359487,0,0x0,8
tick,0x7ffdf681f424,69361483,0,0x0,8
tick,0x7ffdf681f424,69363473,0,0x0,8
tick,0x7ffdf681f424,69365467,0,0x0,8
tick,0x7ffdf681f424,69367465,0,0x0,8
tick,0x7ffdf681f424,69369460,0,0x0,8
tick,0x7ffdf681f424,69371461,0,0x0,8
tick,0x7ffdf681f424,69373446,0,0x0,8
tick,0x7ffdf681f424,69375446,0,0x0,8
tick,0x7ffdf681f424,69377439,0,0x0,8
tick,0x7ffdf681f424,69379431,0,0x0,8
tick,0x7ffdf681f424,69381425,0,0x0,8
tick,0x7ffdf681f424,69383427,0,0x0,8
tick,0x7ffdf681f424,69385429,0,0x0,8
tick,0x7ffdf681f424,69388830,0,0x0,8
tick,0x7ffdf681f424,69402662,0,0x0,8
tick,0x7ffdf681f424,69404369,0,0x0,8
tick,0x7ffdf681f424,69406362,0,0x0,8
tick,0x7ffdf681f424,69421645,0,0x0,8
tick,0x7ffdf681f424,69421733,0,0x0,8
tick,0x7ffdf681f424,69423311,0,0x0,8
tick,0x7ffdf681f424,69425339,0,0x0,8
tick,0x7ffdf681f424,69427303,0,0x0,8
tick,0x7ffdf681f424,69429302,0,0x0,8
tick,0x7ffdf681f424,69431311,0,0x0,8
tick,0x7ffdf681f424,69433304,0,0x0,8
tick,0x7ffdf681f424,69435297,0,0x0,8
tick,0x7ffdf681f424,69437359,0,0x0,8
tick,0x7ffdf681f424,69439299,0,0x0,8
tick,0x7ffdf681f424,69441268,0,0x0,8
tick,0x7ffdf681f424,69443265,0,0x0,8
tick,0x7ffdf681f424,69445257,0,0x0,8
tick,0x7ffdf681f424,69447258,0,0x0,8
tick,0x7ffdf681f424,69449250,0,0x0,8
tick,0x7ffdf681f424,69451249,0,0x0,8
tick,0x7ffdf681f424,69453242,0,0x0,8
tick,0x7ffdf681f424,69455256,0,0x0,8
tick,0x7ffdf681f424,69457232,0,0x0,8
tick,0x7ffdf681f424,69459230,0,0x0,8
tick,0x7ffdf681f424,69461216,0,0x0,8
tick,0x7ffdf681f424,69463209,0,0x0,8
tick,0x7ffdf681f424,69465210,0,0x0,8
tick,0x7ffdf681f424,69467201,0,0x0,8
tick,0x7ffdf681f424,69469200,0,0x0,8
tick,0x7ffdf681f424,69471185,0,0x0,8
tick,0x7ffdf681f424,69473180,0,0x0,8
tick,0x7ffdf681f424,69475190,0,0x0,8
tick,0x7ffdf681f424,69477170,0,0x0,8
tick,0x7ffdf681f424,69479172,0,0x0,8
tick,0x7ffdf681f424,69481199,0,0x0,8
tick,0x7ffdf681f424,69483158,0,0x0,8
tick,0x7ffdf681f424,69485154,0,0x0,8
tick,0x7ffdf681f424,69487180,0,0x0,8
tick,0x7ffdf681f424,69489142,0,0x0,8
tick,0x7ffdf681f424,69491163,0,0x0,8
tick,0x7ffdf681f424,69493132,0,0x0,8
tick,0x7ffdf681f424,69495179,0,0x0,8
tick,0x7ffdf681f424,69497157,0,0x0,8
tick,0x7ffdf681f424,69499112,0,0x0,8
tick,0x7ffdf681f424,69501115,0,0x0,8
tick,0x7ffdf681f424,69514148,0,0x0,8
tick,0x7ffdf681f424,69516230,0,0x0,8
tick,0x7ffdf681f424,69518068,0,0x0,8
tick,0x7ffdf681f424,69520130,0,0x0,8
tick,0x7ffdf681f424,69522193,0,0x0,8
tick,0x7ffdf681f424,69527886,0,0x0,8
tick,0x7ffdf681f424,69529041,0,0x0,8
tick,0x7ffdf681f424,69538626,0,0x0,8
tick,0x7ffdf681f424,69540008,0,0x0,8
tick,0x7ffdf681f424,69542000,0,0x0,8
tick,0x7ffdf681f424,69544040,0,0x0,8
tick,0x7ffdf681f424,69546062,0,0x0,8
tick,0x7ffdf681f424,69547984,0,0x0,8
tick,0x7ffdf681f424,69549978,0,0x0,8
tick,0x7ffdf681f424,69551973,0,0x0,8
tick,0x7ffdf681f424,69554030,0,0x0,8
tick,0x7ffdf681f424,69555971,0,0x0,8
tick,0x7ffdf681f424,69557963,0,0x0,8
tick,0x7ffdf681f424,69559960,0,0x0,8
tick,0x7ffdf681f424,69561965,0,0x0,8
tick,0x7ffdf681f424,69563951,0,0x0,8
tick,0x7ffdf681f424,69565950,0,0x0,8
tick,0x7ffdf681f424,69567938,0,0x0,8
tick,0x7ffdf681f424,69569926,0,0x0,8
tick,0x7ffdf681f424,69571922,0,0x0,8
tick,0x7ffdf681f424,69573906,0,0x0,8
tick,0x7ffdf681f424,69575903,0,0x0,8
tick,0x7ffdf681f424,69577897,0,0x0,8
tick,0x7ffdf681f424,69579896,0,0x0,8
tick,0x7ffdf681f424,69581892,0,0x0,8
tick,0x7ffdf681f424,69583935,0,0x0,8
tick,0x7ffdf681f424,69585880,0,0x0,8
tick,0x7ffdf681f424,69587868,0,0x0,8
tick,0x7ffdf681f424,69589864,0,0x0,8
tick,0x7ffdf681f424,69591908,0,0x0,8
tick,0x7ffdf681f424,69593861,0,0x0,8
tick,0x7ffdf681f424,69595867,0,0x0,8
tick,0x7ffdf681f424,69597884,0,0x0,8
tick,0x7ffdf681f424,69599890,0,0x0,8
tick,0x7ffdf681f424,69601842,0,0x0,8
tick,0x7ffdf681f424,69603874,0,0x0,8
tick,0x7ffdf681f424,69605834,0,0x0,8
tick,0x7ffdf681f424,69607839,0,0x0,8
tick,0x7ffdf681f424,69609834,0,0x0,8
tick,0x7ffdf681f424,69611828,0,0x0,8
tick,0x7ffdf681f424,69613808,0,0x0,8
tick,0x7ffdf681f424,69615812,0,0x0,8
tick,0x7ffdf681f424,69617797,0,0x0,8
tick,0x7ffdf681f424,69619787,0,0x0,8
tick,0x7ffdf681f424,69621794,0,0x0,8
tick,0x7ffdf681f424,69623779,0,0x0,8
tick,0x7ffdf681f424,69625779,0,0x0,8
tick,0x7ffdf681f424,69639109,0,0x0,8
tick,0x7ffdf681f424,69640742,0,0x0,8
tick,0x7ffdf681f424,69642733,0,0x0,8
tick,0x7ffdf681f424,69644771,0,0x0,8
tick,0x7ffdf681f424,69646718,0,0x0,8
tick,0x7ffdf681f424,69648715,0,0x0,8
tick,0x7ffdf681f424,69650705,0,0x0,8
tick,0x7ffdf681f424,69652711,0,0x0,8
tick,0x7ffdf681f424,69654698,0,0x0,8
tick,0x7ffdf681f424,69656686,0,0x0,8
tick,0x7ffdf681f424,69658685,0,0x0,8
tick,0x7ffdf681f424,69660714,0,0x0,8
tick,0x7ffdf681f424,69663901,0,0x0,8
tick,0x7ffdf681f424,69674142,0,0x0,8
tick,0x7ffdf681f424,69675674,0,0x0,8
tick,0x7ffdf681f424,69677634,0,0x0,8
tick,0x7ffdf681f424,69679823,0,0x0,8
tick,0x7ffdf681f424,69681671,0,0x0,8
tick,0x7ffdf681f424,69683662,0,0x0,8
tick,0x7ffdf681f424,69685613,0,0x0,8
tick,0x7ffdf681f424,69687619,0,0x0,8
tick,0x7ffdf681f424,69689601,0,0x0,8
tick,0x7ffdf681f424,69691598,0,0x0,8
tick,0x7ffdf681f424,69693593,0,0x0,8
tick,0x7ffdf681f424,69695609,0,0x0,8
tick,0x7ffdf681f424,69697582,0,0x0,8
tick,0x7ffdf681f424,69699589,0,0x0,8
tick,0x7ffdf681f424,69701592,0,0x0,8
tick,0x7ffdf681f424,69703564,0,0x0,8
tick,0x7ffdf681f424,69705576,0,0x0,8
tick,0x7ffdf681f424,69707553,0,0x0,8
tick,0x7ffdf681f424,69709554,0,0x0,8
tick,0x7ffdf681f424,69711544,0,0x0,8
tick,0x7ffdf681f424,69713567,0,0x0,8
tick,0x7ffdf681f424,69715533,0,0x0,8
tick,0x7ffdf681f424,69717552,0,0x0,8
tick,0x7ffdf681f424,69719521,0,0x0,8
tick,0x7ffdf681f424,69721512,0,0x0,8
tick,0x7ffdf681f424,69723506,0,0x0,8
tick,0x7ffdf681f424,69725502,0,0x0,8
tick,0x7ffdf681f424,69727495,0,0x0,8
tick,0x7ffdf681f424,69729488,0,0x0,8
tick,0x7ffdf681f424,69731787,0,0x0,8
tick,0x7ffdf681f424,69733491,0,0x0,8
tick,0x7ffdf681f424,69735523,0,0x0,8
tick,0x7ffdf681f424,69739143,0,0x0,8
tick,0x7ffdf681f424,69740485,0,0x0,8
tick,0x7ffdf681f424,69744395,0,0x0,8
tick,0x7ffdf681f424,69745448,0,0x0,8
tick,0x7ffdf681f424,69747448,0,0x0,8
tick,0x7ffdf681f424,69754357,0,0x0,8
tick,0x7ffdf681f424,69755438,0,0x0,8
tick,0x7ffdf681f424,69765275,0,0x0,8
tick,0x7ffdf681f424,69766394,0,0x0,8
tick,0x7ffdf681f424,69768399,0,0x0,8
tick,0x7ffdf681f424,69770432,0,0x0,8
tick,0x7ffdf681f424,69772420,0,0x0,8
tick,0x7ffdf681f424,69774457,0,0x0,8
tick,0x7ffdf681f424,69776370,0,0x0,8
tick,0x7ffdf681f424,69778360,0,0x0,8
tick,0x7ffdf681f424,69780357,0,0x0,8
tick,0x7ffdf681f424,69782361,0,0x0,8
tick,0x7ffdf681f424,69784346,0,0x0,8
tick,0x7ffdf681f424,69786356,0,0x0,8
tick,0x7ffdf681f424,69788334,0,0x0,8
tick,0x7ffdf681f424,69790347,0,0x0,8
tick,0x7ffdf681f424,69792324,0,0x0,8
tick,0x7ffdf681f424,69794320,0,0x0,8
tick,0x7ffdf681f424,69796313,0,0x0,8
tick,0x7ffdf681f424,69798320,0,0x0,8
tick,0x7ffdf681f424,69800304,0,0x0,8
tick,0x7ffdf681f424,69802295,0,0x0,8
tick,0x7ffdf681f424,69804289,0,0x0,8
tick,0x7ffdf681f424,69806285,0,0x0,8
tick,0x7ffdf681f424,69808280,0,0x0,8
tick,0x7ffdf681f424,69810290,0,0x0,8
tick,0x7ffdf681f424,69812271,0,0x0,8
tick,0x7ffdf681f424,69814264,0,0x0,8
tick,0x7ffdf681f424,69819425,0,0x0,8
tick,0x7ffdf681f424,69821307,0,0x0,8
tick,0x7ffdf681f424,69828337,0,0x0,8
tick,0x7ffdf681f424,69830234,0,0x0,8
tick,0x7ffdf681f424,69832293,0,0x0,8
tick,0x7ffdf681f424,69834234,0,0x0,8
tick,0x7ffdf681f424,69836220,0,0x0,8
tick,0x7ffdf681f424,69838208,0,0x0,8
tick,0x7ffdf681f424,69840195,0,0x0,8
tick,0x7ffdf681f424,69842190,0,0x0,8
tick,0x7ffdf681f424,69856338,0,0x0,8
tick,0x7ffdf681f424,69858155,0,0x0,8
tick,0x7ffdf681f424,69860144,0,0x0,8
tick,0x7ffdf681f424,69862167,0,0x0,8
tick,0x7ffdf681f424,69864159,0,0x0,8
tick,0x7ffdf681f424,69866257,0,0x0,8
tick,0x7ffdf681f424,69868121,0,0x0,8
tick,0x7ffdf681f424,69870115,0,0x0,8
tick,0x7ffdf681f424,69872109,0,0x0,8
tick,0x7ffdf681f424,69874103,0,0x0,8
tick,0x7ffdf681f424,69876102,0,0x0,8
tick,0x7ffdf681f424,69878107,0,0x0,8
tick,0x7ffdf681f424,69880090,0,0x0,8
tick,0x7ffdf681f424,69882090,0,0x0,8
tick,0x7ffdf681f424,69884093,0,0x0,8
tick,0x7ffdf681f424,69886075,0,0x0,8
tick,0x7ffdf681f424,69888066,0,0x0,8
tick,0x7ffdf681f424,69890062,0,0x0,8
tick,0x7ffdf681f424,69892055,0,0x0,8
tick,0x7ffdf681f424,69894063,0,0x0,8
tick,0x7ffdf681f424,69896046,0,0x0,8
tick,0x7ffdf681f424,69898046,0,0x0,8
tick,0x7ffdf681f424,69900043,0,0x0,8
tick,0x7ffdf681f424,69902030,0,0x0,8
tick,0x7ffdf681f424,69904033,0,0x0,8
tick,0x7ffdf681f424,69906027,0,0x0,8
tick,0x7ffdf681f424,69909708,0,0x0,8
tick,0x7ffdf681f424,69919963,0,0x0,8
tick,0x7ffdf681f424,69922000,0,0x0,8
tick,0x7ffdf681f424,69924194,0,0x0,8
tick,0x7ffdf681f424,69926035,0,0x0,8
tick,0x7ffdf681f424,69928007,0,0x0,8
tick,0x7ffdf681f424,69930041,0,0x0,8
tick,0x7ffdf681f424,69933393,0,0x0,8
tick,0x7ffdf681f424,69946152,0,0x0,8
tick,0x7ffdf681f424,69947913,0,0x0,8
tick,0x7ffdf681f424,69949905,0,0x0,8
tick,0x7ffdf681f424,69952221,0,0x0,8
tick,0x7ffdf681f424,69953943,0,0x0,8
tick,0x7ffdf681f424,69955888,0,0x0,8
tick,0x7ffdf681f424,69957887,0,0x0,8
tick,0x7ffdf681f424,69959878,0,0x0,8
tick,0x7ffdf681f424,69961872,0,0x0,8
tick,0x7ffdf681f424,69963862,0,0x0,8
tick,0x7ffdf681f424,69965864,0,0x0,8
tick,0x7ffdf681f424,69967862,0,0x0,8
tick,0x7ffdf681f424,69969852,0,0x0,8
tick,0x7ffdf681f424,69971844,0,0x0,8
tick,0x7ffdf681f424,69973833,0,0x0,8
tick,0x7ffdf681f424,69975843,0,0x0,8
tick,0x7ffdf681f424,69977831,0,0x0,8
tick,0x7ffdf681f424,69979826,0,0x0,8
tick,0x7ffdf681f424,69981817,0,0x0,8
tick,0x7ffdf681f424,69983812,0,0x0,8
tick,0x7ffdf681f424,69985806,0,0x0,8
tick,0x7ffdf681f424,69987809,0,0x0,8
tick,0x7ffdf681f424,69989799,0,0x0,8
tick,0x7ffdf681f424,69991789,0,0x0,8
tick,0x7ffdf681f424,69993783,0,0x0,8
tick,0x7ffdf681f424,69995779,0,0x0,8
tick,0x7ffdf681f424,70007995,0,0x0,8
tick,0x7ffdf681f424,70009751,0,0x0,8
tick,0x7ffdf681f424,70011757,0,0x0,8
tick,0x7ffdf681f424,70013732,0,0x0,8
tick,0x7ffdf681f424,70015728,0,0x0,8
tick,0x7ffdf681f424,70017722,0,0x0,8
tick,0x7ffdf681f424,70019716,0,0x0,8
tick,0x7ffdf681f424,70021712,0,0x0,8
tick,0x7ffdf681f424,70023741,0,0x0,8
tick,0x7ffdf681f424,70025698,0,0x0,8
tick,0x7ffdf681f424,70028210,0,0x0,8
tick,0x7ffdf681f424,70044552,0,0x0,8
tick,0x7ffdf681f424,70044587,0,0x0,8
tick,0x7ffdf681f424,70045649,0,0x0,8
tick,0x7ffdf681f424,70047632,0,0x0,8
tick,0x7ffdf681f424,70049631,0,0x0,8
tick,0x7ffdf681f424,70051628,0,0x0,8
tick,0x7ffdf681f424,70053755,0,0x0,8
tick,0x7ffdf681f424,70055850,0,0x0,8
tick,0x7ffdf681f424,70058005,0,0x0,8
tick,0x7ffdf681f424,70059614,0,0x0,8
tick,0x7ffdf681f424,70061607,0,0x0,8
tick,0x7ffdf681f424,70063622,0,0x0,8
tick,0x7ffdf681f424,70065596,0,0x0,8
tick,0x7ffdf681f424,70079722,0,0x0,8
tick,0x7ffdf681f424,70079757,0,0x0,8
tick,0x7ffdf681f424,70081556,0,0x0,8
tick,0x7ffdf681f424,70083559,0,0x0,8
tick,0x7ffdf681f424,70085550,0,0x0,8
tick,0x7ffdf681f424,70087610,0,0x0,8
tick,0x7ffdf681f424,70089539,0,0x0,8
tick,0x7ffdf681f424,70091525,0,0x0,8
tick,0x7ffdf681f424,70093519,0,0x0,8
tick,0x7ffdf681f424,70095513,0,0x0,8
tick,0x7ffdf681f424,70097515,0,0x0,8
tick,0x7ffdf681f424,70099517,0,0x0,8
tick,0x7ffdf681f424,70101498,0,0x0,8
tick,0x7ffdf681f424,70103496,0,0x0,8
tick,0x7ffdf681f424,70105485,0,0x0,8
tick,0x7ffdf681f424,70107481,0,0x0,8
tick,0x7ffdf681f424,70109481,0,0x0,8
tick,0x7ffdf681f424,70111467,0,0x0,8
tick,0x7ffdf681f424,70113466,0,0x0,8
tick,0x7ffdf681f424,70115479,0,0x0,8
tick,0x7ffdf681f424,70117458,0,0x0,8
tick,0x7ffdf681f424,70119455,0,0x0,8
tick,0x7ffdf681f424,70121450,0,0x0,8
tick,0x7ffdf681f424,70123461,0,0x0,8
tick,0x7ffdf681f424,70125518,0,0x0,8
tick,0x7ffdf681f424,70129536,0,0x0,8
tick,0x7ffdf681f424,70139832,0,0x0,8
tick,0x7ffdf681f424,70141394,0,0x0,8
tick,0x7ffdf681f424,70143402,0,0x0,8
tick,0x7ffdf681f424,70145417,0,0x0,8
tick,0x7ffdf681f424,70147433,0,0x0,8
tick,0x7ffdf681f424,70149486,0,0x0,8
tick,0x7ffdf681f424,70151364,0,0x0,8
tick,0x7ffdf681f424,70153358,0,0x0,8
tick,0x7ffdf681f424,70155359,0,0x0,8
tick,0x7ffdf681f424,70157347,0,0x0,8
tick,0x7ffdf681f424,70159342,0,0x0,8
tick,0x7ffdf681f424,70161340,0,0x0,8
tick,0x7ffdf681f424,70163334,0,0x0,8
tick,0x7ffdf681f424,70165325,0,0x0,8
tick,0x7ffdf681f424,70167324,0,0x0,8
tick,0x7ffdf681f424,70169328,0,0x0,8
tick,0x7ffdf681f424,70181860,0,0x0,8
tick,0x7ffdf681f424,70183283,0,0x0,8
tick,0x7ffdf681f424,70185305,0,0x0,8
tick,0x7ffdf681f424,70187580,0,0x0,8
tick,0x7ffdf681f424,70189320,0,0x0,8
tick,0x7ffdf681f424,70191286,0,0x0,8
tick,0x7ffdf681f424,70193255,0,0x0,8
tick,0x7ffdf681f424,70195247,0,0x0,8
tick,0x7ffdf681f424,70197242,0,0x0,8
tick,0x7ffdf681f424,70199237,0,0x0,8
tick,0x7ffdf681f424,70201230,0,0x0,8
tick,0x7ffdf681f424,70203230,0,0x0,8
tick,0x7ffdf681f424,70205218,0,0x0,8
tick,0x7ffdf681f424,70207219,0,0x0,8
tick,0x7ffdf681f424,70209207,0,0x0,8
tick,0x7ffdf681f424,70211201,0,0x0,8
tick,0x7ffdf681f424,70213195,0,0x0,8
tick,0x7ffdf681f424,70215194,0,0x0,8
tick,0x7ffdf681f424,70217185,0,0x0,8
tick,0x7ffdf681f424,70219181,0,0x0,8
tick,0x7ffdf681f424,70221173,0,0x0,8
tick,0x7ffdf681f424,70223174,0,0x0,8
tick,0x7ffdf681f424,70225169,0,0x0,8
tick,0x7ffdf681f424,70238715,0,0x0,8
tick,0x7ffdf681f424,70251174,0,0x0,8
tick,0x7ffdf681f424,70253102,0,0x0,8
tick,0x7ffdf681f424,70255086,0,0x0,8
tick,0x7ffdf681f424,70257087,0,0x0,8
tick,0x7ffdf681f424,70259120,0,0x0,8
tick,0x7ffdf681f424,70261828,0,0x0,8
tick,0x7ffdf681f424,70263267,0,0x0,8
tick,0x7ffdf681f424,70265091,0,0x0,8
tick,0x7ffdf681f424,70267060,0,0x0,8
tick,0x7ffdf681f424,70269068,0,0x0,8
tick,0x7ffdf681f424,70271048,0,0x0,8
tick,0x7ffdf681f424,70273041,0,0x0,8
tick,0x7ffdf681f424,70275038,0,0x0,8
tick,0x7ffdf681f424,70277030,0,0x0,8
tick,0x7ffdf681f424,70279019,0,0x0,8
tick,0x7ffdf681f424,70281016,0,0x0,8
tick,0x7ffdf681f424,70283013,0,0x0,8
tick,0x7ffdf681f424,70285008,0,0x0,8
tick,0x7ffdf681f424,70286998,0,0x0,8
tick,0x7ffdf681f424,70288994,0,0x0,8
tick,0x7ffdf681f424,70290986,0,0x0,8
tick,0x7ffdf681f424,70292984,0,0x0,8
tick,0x7ffdf681f424,70294988,0,0x0,8
tick,0x7ffdf681f424,70296972,0,0x0,8
tick,0x7ffdf681f424,70310886,0,0x0,8
tick,0x7ffdf681f424,70310938,0,0x0,8
tick,0x7ffdf681f424,70312938,0,0x0,8
tick,0x7ffdf681f424,70314937,0,0x0,8
tick,0x7ffdf681f424,70316973,0,0x0,8
tick,0x7ffdf681f424,70320154,0,0x0,8
tick,0x7ffdf681f424,70321919,0,0x0,8
tick,0x7ffdf681f424,70323938,0,0x0,8
tick,0x7ffdf681f424,70325908,0,0x0,8
tick,0x7ffdf681f424,70334366,0,0x0,8
tick,0x7ffdf681f424,70335879,0,0x0,8
tick,0x7ffdf681f424,70337869,0,0x0,8
tick,0x7ffdf681f424,70340008,0,0x0,8
tick,0x7ffdf681f424,70341897,0,0x0,8
tick,0x7ffdf681f424,70343876,0,0x0,8
tick,0x7ffdf681f424,70345932,0,0x0,8
tick,0x7ffdf681f424,70347840,0,0x0,8
tick,0x7ffdf681f424,70349853,0,0x0,8
tick,0x7ffdf681f424,70351833,0,0x0,8
tick,0x7ffdf681f424,70353820,0,0x0,8
tick,0x7ffdf681f424,70355822,0,0x0,8
tick,0x7ffdf681f424,70357820,0,0x0,8
tick,0x7ffdf681f424,70359814,0,0x0,8
tick,0x7ffdf681f424,70361807,0,0x0,8
tick,0x7ffdf681f424,70363792,0,0x0,8
tick,0x7ffdf681f424,70365793,0,0x0,8
tick,0x7ffdf681f424,70367790,0,0x0,8
tick,0x7ffdf681f424,70369785,0,0x0,8
tick,0x7ffdf681f424,70371779,0,0x0,8
tick,0x7ffdf681f424,70373765,0,0x0,8
tick,0x7ffdf681f424,70375763,0,0x0,8
tick,0x7ffdf681f424,70377765,0,0x0,8
tick,0x7ffdf681f424,70379757,0,0x0,8
tick,0x7ffdf681f424,70381745,0,0x0,8
tick,0x7ffdf681f424,70383741,0,0x0,8
tick,0x7ffdf681f424,70385739,0,0x0,8
tick,0x7ffdf681f424,70387730,0,0x0,8
tick,0x7ffdf681f424,70389726,0,0x0,8
tick,0x7ffdf681f424,70391725,0,0x0,8
tick,0x7ffdf681f424,70393714,0,0x0,8
tick,0x7ffdf681f424,70395712,0,0x0,8
tick,0x7ffdf681f424,70400352,0,0x0,8
tick,0x7ffdf681f424,70407706,0,0x0,8
tick,0x7ffdf681f424,70410151,0,0x0,8
tick,0x7ffdf681f424,70411682,0,0x0,8
tick,0x7ffdf681f424,70413729,0,0x0,8
tick,0x7ffdf681f424,70415698,0,0x0,8
tick,0x7ffdf681f424,70417703,0,0x0,8
tick,0x7ffdf681f424,70419648,0,0x0,8
tick,0x7ffdf681f424,70421640,0,0x0,8
tick,0x7ffdf681f424,70423633,0,0x0,8
tick,0x7ffdf681f424,70425635,0,0x0,8
tick,0x7ffdf681f424,70427624,0,0x0,8
tick,0x7ffdf681f424,70429621,0,0x0,8
tick,0x7ffdf681f424,70431611,0,0x0,8
tick,0x7ffdf681f424,70433609,0,0x0,8
tick,0x7ffdf681f424,70435607,0,0x0,8
tick,0x7ffdf681f424,70440690,0,0x0,8
tick,0x7ffdf681f424,70449169,0,0x0,8
tick,0x7ffdf681f424,70450568,0,0x0,8
tick,0x7ffdf681f424,70452563,0,0x0,8
tick,0x7ffdf681f424,70454595,0,0x0,8
tick,0x7ffdf681f424,70456549,0,0x0,8
tick,0x7ffdf681f424,70458586,0,0x0,8
tick,0x7ffdf681f424,70460539,0,0x0,8
tick,0x7ffdf681f424,70462531,0,0x0,8
tick,0x7ffdf681f424,70464524,0,0x0,8
tick,0x7ffdf681f424,70466529,0,0x0,8
tick,0x7ffdf681f424,70475518,0,0x0,8
tick,0x7ffdf681f424,70475603,0,0x0,8
tick,0x7ffdf681f424,70481612,0,0x0,8
tick,0x7ffdf681f424,70483479,0,0x0,8
tick,0x7ffdf681f424,70485831,0,0x0,8
tick,0x7ffdf681f424,70487474,0,0x0,8
tick,0x7ffdf681f424,70489551,0,0x0,8
tick,0x7ffdf681f424,70491457,0,0x0,8
tick,0x7ffdf681f424,70493449,0,0x0,8
tick,0x7ffdf681f424,70495453,0,0x0,8
tick,0x7ffdf681f424,70497445,0,0x0,8
tick,0x7ffdf681f424,70499504,0,0x0,8
tick,0x7ffdf681f424,70501431,0,0x0,8
tick,0x7ffdf681f424,70503429,0,0x0,8
tick,0x7ffdf681f424,70505416,0,0x0,8
tick,0x7ffdf681f424,70507408,0,0x0,8
tick,0x7ffdf681f424,70509413,0,0x0,8
tick,0x7ffdf681f424,70511398,0,0x0,8
tick,0x7ffdf681f424,70513398,0,0x0,8
tick,0x7ffdf681f424,70515398,0,0x0,8
tick,0x7ffdf681f424,70517384,0,0x0,8
tick,0x7ffdf681f424,70520389,0,0x0,8
tick,0x7ffdf681f424,70532327,0,0x0,8
tick,0x7ffdf681f424,70534345,0,0x0,8
tick,0x7ffdf681f424,70536344,0,0x0,8
tick,0x7ffdf681f424,70538374,0,0x0,8
tick,0x7ffdf681f424,70540338,0,0x0,8
tick,0x7ffdf681f424,70542331,0,0x0,8
tick,0x7ffdf681f424,70544312,0,0x0,8
tick,0x7ffdf681f424,70546310,0,0x0,8
tick,0x7ffdf681f424,70548300,0,0x0,8
tick,0x7ffdf681f424,70550296,0,0x0,8
tick,0x7ffdf681f424,70552289,0,0x0,8
tick,0x7ffdf681f424,70554299,0,0x0,8
tick,0x7ffdf681f424,70556277,0,0x0,8
tick,0x7ffdf681f424,70558275,0,0x0,8
tick,0x7ffdf681f424,70560270,0,0x0,8
tick,0x7ffdf681f424,70562269,0,0x0,8
tick,0x7ffdf681f424,70564301,0,0x0,8
tick,0x7ffdf681f424,70566253,0,0x0,8
tick,0x7ffdf681f424,70568250,0,0x0,8
tick,0x7ffdf681f424,70570242,0,0x0,8
tick,0x7ffdf681f424,70572234,0,0x0,8
tick,0x7ffdf681f424,70574230,0,0x0,8
tick,0x7ffdf681f424,70576235,0,0x0,8
tick,0x7ffdf681f424,70579029,0,0x0,8
tick,0x7ffdf681f424,70580385,0,0x0,8
tick,0x7ffdf681f424,70582272,0,0x0,8
tick,0x7ffdf681f424,70584220,0,0x0,8
tick,0x7ffdf681f424,70586234,0,0x0,8
tick,0x7ffdf681f424,70588202,0,0x0,8
tick,0x7ffdf681f424,70590195,0,0x0,8
tick,0x7ffdf681f424,70592189,0,0x0,8
tick,0x7ffdf681f424,70594204,0,0x0,8
tick,0x7ffdf681f424,70596252,0,0x0,8
tick,0x7ffdf681f424,70598182,0,0x0,8
tick,0x7ffdf681f424,70600173,0,0x0,8
tick,0x7ffdf681f424,70602160,0,0x0,8
tick,0x7ffdf681f424,70604149,0,0x0,8
tick,0x7ffdf681f424,70606143,0,0x0,8
tick,0x7ffdf681f424,70619547,0,0x0,8
tick,0x7ffdf681f424,70621111,0,0x0,8
tick,0x7ffdf681f424,70623104,0,0x0,8
tick,0x7ffdf681f424,70625108,0,0x0,8
tick,0x7ffdf681f424,70627128,0,0x0,8
tick,0x7ffdf681f424,70629094,0,0x0,8
tick,0x7ffdf681f424,70631079,0,0x0,8
tick,0x7ffdf681f424,70633076,0,0x0,8
tick,0x7ffdf681f424,70635082,0,0x0,8
tick,0x7ffdf681f424,70637062,0,0x0,8
tick,0x7ffdf681f424,70639063,0,0x0,8
tick,0x7ffdf681f424,70641061,0,0x0,8
tick,0x7ffdf681f424,70643054,0,0x0,8
tick,0x7ffdf681f424,70645045,0,0x0,8
tick,0x7ffdf681f424,70647038,0,0x0,8
tick,0x7ffdf681f424,70649031,0,0x0,8
tick,0x7ffdf681f424,70651028,0,0x0,8
tick,0x7ffdf681f424,70653025,0,0x0,8
tick,0x7ffdf681f424,70655014,0,0x0,8
tick,0x7ffdf681f424,70657026,0,0x0,8
tick,0x7ffdf681f424,70659023,0,0x0,8
tick,0x7ffdf681f424,70661000,0,0x0,8
tick,0x7ffdf681f424,70663006,0,0x0,8
tick,0x7ffdf681f424,70664990,0,0x0,8
tick,0x7ffdf681f424,70666992,0,0x0,8
tick,0x7ffdf681f424,70669215,0,0x0,8
tick,0x7ffdf681f424,70673252,0,0x0,8
tick,0x7ffdf681f424,70679999,0,0x0,8
tick,0x7ffdf681f424,70681950,0,0x0,8
tick,0x7ffdf681f424,70683947,0,0x0,8
tick,0x7ffdf681f424,70685937,0,0x0,8
tick,0x7ffdf681f424,70687990,0,0x0,8
tick,0x7ffdf681f424,70689994,0,0x0,8
tick,0x7ffdf681f424,70691950,0,0x0,8
tick,0x7ffdf681f424,70693914,0,0x0,8
tick,0x7ffdf681f424,70696066,0,0x0,8
tick,0x7ffdf681f424,70698004,0,0x0,8
tick,0x7ffdf681f424,70699905,0,0x0,8
tick,0x7ffdf681f424,70701933,0,0x0,8
tick,0x7ffdf681f424,70703894,0,0x0,8
tick,0x7ffdf681f424,70707693,0,0x0,8
tick,0x7ffdf681f424,70708878,0,0x0,8
tick,0x7ffdf681f424,70710872,0,0x0,8
tick,0x7ffdf681f424,70712937,0,0x0,8
tick,0x7ffdf681f424,70714866,0,0x0,8
tick,0x7ffdf681f424,70716859,0,0x0,8
tick,0x7ffdf681f424,70718849,0,0x0,8
tick,0x7ffdf681f424,70720845,0,0x0,8
tick,0x7ffdf681f424,70722842,0,0x0,8
tick,0x7ffdf681f424,70724865,0,0x0,8
tick,0x7ffdf681f424,70726831,0,0x0,8
tick,0x7ffdf681f424,70728818,0,0x0,8
tick,0x7ffdf681f424,70730812,0,0x0,8
tick,0x7ffdf681f424,70732816,0,0x0,8
tick,0x7ffdf681f424,70734808,0,0x0,8
tick,0x7ffdf681f424,70736797,0,0x0,8
tick,0x7ffdf681f424,70738794,0,0x0,8
tick,0x7ffdf681f424,70740788,0,0x0,8
tick,0x7ffdf681f424,70742783,0,0x0,8
tick,0x7ffdf681f424,70744777,0,0x0,8
tick,0x7ffdf681f424,70746769,0,0x0,8
tick,0x7ffdf681f424,70748764,0,0x0,8
tick,0x7ffdf681f424,70750775,0,0x0,8
tick,0x7ffdf681f424,70752754,0,0x0,8
tick,0x7ffdf681f424,70754750,0,0x0,8
tick,0x7ffdf681f424,70768597,0,0x0,8
tick,0x7ffdf681f424,70769711,0,0x0,8
tick,0x7ffdf681f424,70771946,0,0x0,8
tick,0x7ffdf681f424,70781202,0,0x0,8
tick,0x7ffdf681f424,70782732,0,0x0,8
tick,0x7ffdf681f424,70784684,0,0x0,8
tick,0x7ffdf681f424,70789710,0,0x0,8
tick,0x7ffdf681f424,70791656,0,0x0,8
tick,0x7ffdf681f424,70793649,0,0x0,8
tick,0x7ffdf681f424,70795721,0,0x0,8
tick,0x7ffdf681f424,70797640,0,0x0,8
tick,0x7ffdf681f424,70799688,0,0x0,8
tick,0x7ffdf681f424,70801631,0,0x0,8
tick,0x7ffdf681f424,70803627,0,0x0,8
tick,0x7ffdf681f424,70805613,0,0x0,8
tick,0x7ffdf681f424,70807611,0,0x0,8
tick,0x7ffdf681f424,70809617,0,0x0,8
tick,0x7ffdf681f424,70811599,0,0x0,8
tick,0x7ffdf681f424,70813601,0,0x0,8
tick,0x7ffdf681f424,70815589,0,0x0,8
tick,0x7ffdf681f424,70817585,0,0x0,8
tick,0x7ffdf681f424,70819582,0,0x0,8
tick,0x7ffdf681f424,70821576,0,0x0,8
tick,0x7ffdf681f424,70823566,0,0x0,8
tick,0x7ffdf681f424,70825560,0,0x0,8
tick,0x7ffdf681f424,70827550,0,0x0,8
tick,0x7ffdf681f424,70829549,0,0x0,8
tick,0x7ffdf681f424,70841459,0,0x0,8
tick,0x7ffdf681f424,70842827,0,0x0,8
tick,0x7ffdf681f424,70844512,0,0x0,8
tick,0x7ffdf681f424,70846521,0,0x0,8
tick,0x7ffdf681f424,70848517,0,0x0,8
tick,0x7ffdf681f424,70850518,0,0x0,8
tick,0x7ffdf681f424,70852489,0,0x0,8
tick,0x7ffdf681f424,70867396,0,0x0,8
tick,0x7ffdf681f424,70868452,0,0x0,8
tick,0x7ffdf681f424,70870444,0,0x0,8
tick,0x7ffdf681f424,70872469,0,0x0,8
tick,0x7ffdf681f424,70874537,0,0x0,8
tick,0x7ffdf681f424,70876450,0,0x0,8
tick,0x7ffdf681f424,70878442,0,0x0,8
tick,0x7ffdf681f424,70880412,0,0x0,8
tick,0x7ffdf681f424,70882413,0,0x0,8
tick,0x7ffdf681f424,70884403,0,0x0,8
tick,0x7ffdf681f424,70886397,0,0x0,8
tick,0x7ffdf681f424,70888392,0,0x0,8
tick,0x7ffdf681f424,70890383,0,0x0,8
tick,0x7ffdf681f424,70892382,0,0x0,8
tick,0x7ffdf681f424,70894373,0,0x0,8
tick,0x7ffdf681f424,70896367,0,0x0,8
tick,0x7ffdf681f424,70898397,0,0x0,8
tick,0x7ffdf681f424,70900398,0,0x0,8
tick,0x7ffdf681f424,70902358,0,0x0,8
tick,0x7ffdf681f424,70904362,0,0x0,8
tick,0x7ffdf681f424,70906343,0,0x0,8
tick,0x7ffdf681f424,70908346,0,0x0,8
tick,0x7ffdf681f424,70910337,0,0x0,8
tick,0x7ffdf681f424,70912325,0,0x0,8
tick,0x7ffdf681f424,70914319,0,0x0,8
tick,0x7ffdf681f424,70916314,0,0x0,8
tick,0x7ffdf681f424,70918327,0,0x0,8
tick,0x7ffdf681f424,70920311,0,0x0,8
tick,0x7ffdf681f424,70922331,0,0x0,8
tick,0x7ffdf681f424,70924299,0,0x0,8
tick,0x7ffdf681f424,70926289,0,0x0,8
tick,0x7ffdf681f424,70928286,0,0x0,8
tick,0x7ffdf681f424,70930280,0,0x0,8
tick,0x7ffdf681f424,70932275,0,0x0,8
tick,0x7ffdf681f424,70934270,0,0x0,8
tick,0x7ffdf681f424,70936507,0,0x0,8
tick,0x7ffdf681f424,70941869,0,0x0,8
tick,0x7ffdf681f424,70950094,0,0x0,8
tick,0x7ffdf681f424,70950131,0,0x0,8
tick,0x7ffdf681f424,70951224,0,0x0,8
tick,0x7ffdf681f424,70953225,0,0x0,8
tick,0x7ffdf681f424,70959177,0,0x0,8
tick,0x7ffdf681f424,70960209,0,0x0,8
tick,0x7ffdf681f424,70962195,0,0x0,8
tick,0x7ffdf681f424,70964194,0,0x0,8
tick,0x7ffdf681f424,70966353,0,0x0,8
tick,0x7ffdf681f424,70968192,0,0x0,8
tick,0x7ffdf681f424,70970215,0,0x0,8
tick,0x7ffdf681f424,70972176,0,0x0,8
tick,0x7ffdf681f424,70974201,0,0x0,8
tick,0x7ffdf681f424,70976218,0,0x0,8
tick,0x7ffdf681f424,70978222,0,0x0,8
tick,0x7ffdf681f424,70980159,0,0x0,8
tick,0x7ffdf681f424,70982347,0,0x0,8
tick,0x7ffdf681f424,70984144,0,0x0,8
tick,0x7ffdf681f424,70986136,0,0x0,8
tick,0x7ffdf681f424,70988130,0,0x0,8
tick,0x7ffdf681f424,70990153,0,0x0,8
tick,0x7ffdf681f424,70992127,0,0x0,8
tick,0x7ffdf681f424,70994112,0,0x0,8
tick,0x7ffdf681f424,70996102,0,0x0,8
tick,0x7ffdf681f424,70998100,0,0x0,8
tick,0x7ffdf681f424,71000095,0,0x0,8
tick,0x7ffdf681f424,71002098,0,0x0,8
tick,0x7ffdf681f424,71004093,0,0x0,8
tick,0x7ffdf681f424,71006076,0,0x0,8
tick,0x7ffdf681f424,71008070,0,0x0,8
tick,0x7ffdf681f424,71010065,0,0x0,8
tick,0x7ffdf681f424,71012057,0,0x0,8
tick,0x7ffdf681f424,71014052,0,0x0,8
tick,0x7ffdf681f424,71016046,0,0x0,8
tick,0x7ffdf681f424,71018040,0,0x0,8
tick,0x7ffdf681f424,71020034,0,0x0,8
tick,0x7ffdf681f424,71022032,0,0x0,8
tick,0x7ffdf681f424,71024029,0,0x0,8
tick,0x7ffdf681f424,71026030,0,0x0,8
tick,0x7ffdf681f424,71028019,0,0x0,8
tick,0x7ffdf681f424,71030104,0,0x0,8
tick,0x7ffdf681f424,71041912,0,0x0,8
tick,0x7ffdf681f424,71042984,0,0x0,8
tick,0x7ffdf681f424,71044983,0,0x0,8
tick,0x7ffdf681f424,71046998,0,0x0,8
tick,0x7ffdf681f424,71048983,0,0x0,8
tick,0x7ffdf681f424,71051019,0,0x0,8
tick,0x7ffdf681f424,71053019,0,0x0,8
tick,0x7ffdf681f424,71054952,0,0x0,8
tick,0x7ffdf681f424,71056940,0,0x0,8
tick,0x7ffdf681f424,71058938,0,0x0,8
tick,0x7ffdf681f424,71060929,0,0x0,8
tick,0x7ffdf681f424,71062927,0,0x0,8
tick,0x7ffdf681f424,71069946,0,0x0,8
tick,0x7ffdf681f424,71075180,0,0x0,8
tick,0x7ffdf681f424,71077047,0,0x0,8
tick,0x7ffdf681f424,71078888,0,0x0,8
tick,0x7ffdf681f424,71080879,0,0x0,8
tick,0x7ffdf681f424,71082882,0,0x0,8
tick,0x7ffdf681f424,71084877,0,0x0,8
tick,0x7ffdf681f424,71086938,0,0x0,8
tick,0x7ffdf681f424,71088873,0,0x0,8
tick,0x7ffdf681f424,71090870,0,0x0,8
tick,0x7ffdf681f424,71092848,0,0x0,8
tick,0x7ffdf681f424,71094838,0,0x0,8
tick,0x7ffdf681f424,71096864,0,0x0,8
tick,0x7ffdf681f424,71098828,0,0x0,8
tick,0x7ffdf681f424,71100828,0,0x0,8
tick,0x7ffdf681f424,71102848,0,0x0,8
tick,0x7ffdf681f424,71104824,0,0x0,8
tick,0x7ffdf681f424,71106811,0,0x0,8
tick,0x7ffdf681f424,71108806,0,0x0,8
tick,0x7ffdf681f424,71110795,0,0x0,8
tick,0x7ffdf681f424,71112792,0,0x0,8
tick,0x7ffdf681f424,71114782,0,0x0,8
tick,0x7ffdf681f424,71116783,0,0x0,8
tick,0x7ffdf681f424,71118802,0,0x0,8
tick,0x7ffdf681f424,71121217,0,0x0,8
tick,0x7ffdf681f424,71122799,0,0x0,8
tick,0x7ffdf681f424,71132225,0,0x0,8
tick,0x7ffdf681f424,71133743,0,0x0,8
tick,0x7ffdf681f424,71135853,0,0x0,8
tick,0x7ffdf681f424,71137732,0,0x0,8
tick,0x7ffdf681f424,71139722,0,0x0,8
tick,0x7ffdf681f424,71141719,0,0x0,8
tick,0x7ffdf681f424,71143715,0,0x0,8
tick,0x7ffdf681f424,71145704,0,0x0,8
tick,0x7ffdf681f424,71147695,0,0x0,8
tick,0x7ffdf681f424,71149694,0,0x0,8
tick,0x7ffdf681f424,71151686,0,0x0,8
tick,0x7ffdf681f424,71153686,0,0x0,8
tick,0x7ffdf681f424,71155677,0,0x0,8
tick,0x7ffdf681f424,71157666,0,0x0,8
tick,0x7ffdf681f424,71159665,0,0x0,8
tick,0x7ffdf681f424,71161657,0,0x0,8
tick,0x7ffdf681f424,71163657,0,0x0,8
tick,0x7ffdf681f424,71165670,0,0x0,8
tick,0x7ffdf681f424,71179879,0,0x0,8
tick,0x7ffdf681f424,71181619,0,0x0,8
tick,0x7ffdf681f424,71183611,0,0x0,8
tick,0x7ffdf681f424,71186303,0,0x0,8
tick,0x7ffdf681f424,71187633,0,0x0,8
tick,0x7ffdf681f424,71192144,0,0x0,8
tick,0x7ffdf681f424,71201944,0,0x0,8
tick,0x7ffdf681f424,71203553,0,0x0,8
tick,0x7ffdf681f424,71205714,0,0x0,8
tick,0x7ffdf681f424,71207545,0,0x0,8
tick,0x7ffdf681f424,71209551,0,0x0,8
tick,0x7ffdf681f424,71211549,0,0x0,8
tick,0x7ffdf681f424,71213521,0,0x0,8
tick,0x7ffdf681f424,71215517,0,0x0,8
tick,0x7ffdf681f424,71217515,0,0x0,8
tick,0x7ffdf681f424,71219504,0,0x0,8
tick,0x7ffdf681f424,71221500,0,0x0,8
tick,0x7ffdf681f424,71223496,0,0x0,8
tick,0x7ffdf681f424,71225489,0,0x0,8
tick,0x7ffdf681f424,71227482,0,0x0,8
tick,0x7ffdf681f424,71229480,0,0x0,8
tick,0x7ffdf681f424,71231470,0,0x0,8
tick,0x7ffdf681f424,71233466,0,0x0,8
tick,0x7ffdf681f424,71235464,0,0x0,8
tick,0x7ffdf681f424,71237454,0,0x0,8
tick,0x7ffdf681f424,71239451,0,0x0,8
tick,0x7ffdf681f424,71241445,0,0x0,8
tick,0x7ffdf681f424,71243440,0,0x0,8
tick,0x7ffdf681f424,71245436,0,0x0,8
tick,0x7ffdf681f424,71247674,0,0x0,8
tick,0x7ffdf681f424,71249609,0,0x0,8
tick,0x7ffdf681f424,71258218,0,0x0,8
tick,0x7ffdf681f424,71259402,0,0x0,8
tick,0x7ffdf681f424,71261453,0,0x0,8
tick,0x7ffdf681f424,71263423,0,0x0,8
tick,0x7ffdf681f424,71265426,0,0x0,8
tick,0x7ffdf681f424,71267382,0,0x0,8
tick,0x7ffdf681f424,71269375,0,0x0,8
tick,0x7ffdf681f424,71284934,0,0x0,8
tick,0x7ffdf681f424,71284989,0,0x0,8
tick,0x7ffdf681f424,71286331,0,0x0,8
tick,0x7ffdf681f424,71288319,0,0x0,8
tick,0x7ffdf681f424,71290317,0,0x0,8
tick,0x7ffdf681f424,71292321,0,0x0,8
tick,0x7ffdf681f424,71294316,0,0x0,8
tick,0x7ffdf681f424,71296334,0,0x0,8
tick,0x7ffdf681f424,71298294,0,0x0,8
tick,0x7ffdf681f424,71300293,0,0x0,8
tick,0x7ffdf681f424,71302314,0,0x0,8
tick,0x7ffdf681f424,71304279,0,0x0,8
tick,0x7ffdf681f424,71306291,0,0x0,8
tick,0x7ffdf681f424,71308272,0,0x0,8
tick,0x7ffdf681f424,71310264,0,0x0,8
tick,0x7ffdf681f424,71312261,0,0x0,8
tick,0x7ffdf681f424,71314252,0,0x0,8
tick,0x7ffdf681f424,71316244,0,0x0,8
tick,0x7ffdf681f424,71318242,0,0x0,8
tick,0x7ffdf681f424,71320236,0,0x0,8
tick,0x7ffdf681f424,71322230,0,0x0,8
tick,0x7ffdf681f424,71331855,0,0x0,8
tick,0x7ffdf681f424,71332073,0,0x0,8
tick,0x7ffdf681f424,71337489,0,0x0,8
tick,0x7ffdf681f424,71339190,0,0x0,8
tick,0x7ffdf681f424,71341187,0,0x0,8
tick,0x7ffdf681f424,71343546,0,0x0,8
tick,0x7ffdf681f424,71345190,0,0x0,8
tick,0x7ffdf681f424,71347184,0,0x0,8
tick,0x7ffdf681f424,71349162,0,0x0,8
tick,0x7ffdf681f424,71363579,0,0x0,8
tick,0x7ffdf681f424,71365123,0,0x0,8
tick,0x7ffdf681f424,71367120,0,0x0,8
tick,0x7ffdf681f424,71369228,0,0x0,8
tick,0x7ffdf681f424,71371146,0,0x0,8
tick,0x7ffdf681f424,71373102,0,0x0,8
tick,0x7ffdf681f424,71375095,0,0x0,8
tick,0x7ffdf681f424,71377095,0,0x0,8
tick,0x7ffdf681f424,71379078,0,0x0,8
tick,0x7ffdf681f424,71381074,0,0x0,8
tick,0x7ffdf681f424,71383070,0,0x0,8
tick,0x7ffdf681f424,71385114,0,0x0,8
tick,0x7ffdf681f424,71387057,0,0x0,8
tick,0x7ffdf681f424,71389052,0,0x0,8
tick,0x7ffdf681f424,71391045,0,0x0,8
tick,0x7ffdf681f424,71393044,0,0x0,8
tick,0x7ffdf681f424,71395034,0,0x0,8
tick,0x7ffdf681f424,71397030,0,0x0,8
tick,0x7ffdf681f424,71399028,0,0x0,8
tick,0x7ffdf681f424,71401022,0,0x0,8
tick,0x7ffdf681f424,71403015,0,0x0,8
tick,0x7ffdf681f424,71405010,0,0x0,8
tick,0x7ffdf681f424,71407022,0,0x0,8
tick,0x7ffdf681f424,71409000,0,0x0,8
tick,0x7ffdf681f424,71410993,0,0x0,8
tick,0x7ffdf681f424,71412986,0,0x0,8
tick,0x7ffdf681f424,71418369,0,0x0,8
tick,0x7ffdf681f424,71435086,0,0x0,8
tick,0x7ffdf681f424,71436955,0,0x0,8
tick,0x7ffdf681f424,71438962,0,0x0,8
tick,0x7ffdf681f424,71440927,0,0x0,8
tick,0x7ffdf681f424,71442954,0,0x0,8
tick,0x7ffdf681f424,71444918,0,0x0,8
tick,0x7ffdf681f424,71446935,0,0x0,8
tick,0x7ffdf681f424,71448910,0,0x0,8
tick,0x7ffdf681f424,71450893,0,0x0,8
tick,0x7ffdf681f424,71452890,0,0x0,8
tick,0x7ffdf681f424,71454912,0,0x0,8
tick,0x7ffdf681f424,71458279,0,0x0,8
tick,0x7ffdf681f424,71459872,0,0x0,8
tick,0x7ffdf681f424,71461923,0,0x0,8
tick,0x7ffdf681f424,71463858,0,0x0,8
tick,0x7ffdf681f424,71465850,0,0x0,8
tick,0x7ffdf681f424,71467852,0,0x0,8
tick,0x7ffdf681f424,71469850,0,0x0,8
tick,0x7ffdf681f424,71471832,0,0x0,8
tick,0x7ffdf681f424,71473831,0,0x0,8
tick,0x7ffdf681f424,71475833,0,0x0,8
tick,0x7ffdf681f424,71477814,0,0x0,8
tick,0x7ffdf681f424,71479808,0,0x0,8
tick,0x7ffdf681f424,71481822,0,0x0,8
tick,0x7ffdf681f424,71483801,0,0x0,8
tick,0x7ffdf681f424,71485793,0,0x0,8
tick,0x7ffdf681f424,71487788,0,0x0,8
tick,0x7ffdf681f424,71489782,0,0x0,8
tick,0x7ffdf681f424,71491790,0,0x0,8
tick,0x7ffdf681f424,71493772,0,0x0,8
tick,0x7ffdf681f424,71495769,0,0x0,8
tick,0x7ffdf681f424,71497763,0,0x0,8
tick,0x7ffdf681f424,71501693,0,0x0,8
tick,0x7ffdf681f424,71512839,0,0x0,8
tick,0x7ffdf681f424,71524781,0,0x0,8
tick,0x7ffdf681f424,71526697,0,0x0,8
tick,0x7ffdf681f424,71528688,0,0x0,8
tick,0x7ffdf681f424,71530831,0,0x0,8
tick,0x7ffdf681f424,71532707,0,0x0,8
tick,0x7ffdf681f424,71534676,0,0x0,8
tick,0x7ffdf681f424,71536663,0,0x0,8
tick,0x7ffdf681f424,71538656,0,0x0,8
tick,0x7ffdf681f424,71540648,0,0x0,8
tick,0x7ffdf681f424,71542647,0,0x0,8
tick,0x7ffdf681f424,71544640,0,0x0,8
tick,0x7ffdf681f424,71546638,0,0x0,8
tick,0x7ffdf681f424,71548625,0,0x0,8
tick,0x7ffdf681f424,71550621,0,0x0,8
tick,0x7ffdf681f424,71552617,0,0x0,8
tick,0x7ffdf681f424,71554609,0,0x0,8
tick,0x7ffdf681f424,71556602,0,0x0,8
tick,0x7ffdf681f424,71558600,0,0x0,8
tick,0x7ffdf681f424,71560591,0,0x0,8
tick,0x7ffdf681f424,71562587,0,0x0,8
tick,0x7ffdf681f424,71564586,0,0x0,8
tick,0x7ffdf681f424,71566587,0,0x0,8
tick,0x7ffdf681f424,71568574,0,0x0,8
tick,0x7ffdf681f424,71570567,0,0x0,8
tick,0x7ffdf681f424,71572558,0,0x0,8
tick,0x7ffdf681f424,71574556,0,0x0,8
tick,0x7ffdf681f424,71576547,0,0x0,8
tick,0x7ffdf681f424,71578541,0,0x0,8
tick,0x7ffdf681f424,71580539,0,0x0,8
tick,0x7ffdf681f424,71582531,0,0x0,8
tick,0x7ffdf681f424,71584529,0,0x0,8
tick,0x7ffdf681f424,71586522,0,0x0,8
tick,0x7ffdf681f424,71588518,0,0x0,8
tick,0x7ffdf681f424,71590522,0,0x0,8
tick,0x7ffdf681f424,71592509,0,0x0,8
tick,0x7ffdf681f424,71601111,0,0x0,8
tick,0x7ffdf681f424,71605691,0,0x0,8
tick,0x7ffdf681f424,71607473,0,0x0,8
tick,0x7ffdf681f424,71625048,0,0x0,8
tick,0x7ffdf681f424,71626425,0,0x0,8
tick,0x7ffdf681f424,71628419,0,0x0,8
tick,0x7ffdf681f424,71630408,0,0x0,8
tick,0x7ffdf681f424,71632401,0,0x0,8
tick,0x7ffdf681f424,71634479,0,0x0,8
tick,0x7ffdf681f424,71636394,0,0x0,8
tick,0x7ffdf681f424,71638519,0,0x0,8
tick,0x7ffdf681f424,71640387,0,0x0,8
tick,0x7ffdf681f424,71642388,0,0x0,8
tick,0x7ffdf681f424,71644372,0,0x0,8
tick,0x7ffdf681f424,71646363,0,0x0,8
tick,0x7ffdf681f424,71648383,0,0x0,8
tick,0x7ffdf681f424,71650355,0,0x0,8
tick,0x7ffdf681f424,71652346,0,0x0,8
tick,0x7ffdf681f424,71654336,0,0x0,8
tick,0x7ffdf681f424,71656333,0,0x0,8
tick,0x7ffdf681f424,71658337,0,0x0,8
tick,0x7ffdf681f424,71660324,0,0x0,8
tick,0x7ffdf681f424,71662326,0,0x0,8
tick,0x7ffdf681f424,71664320,0,0x0,8
tick,0x7ffdf681f424,71674647,0,0x0,8
tick,0x7ffdf681f424,71680114,0,0x0,8
tick,0x7ffdf681f424,71680333,0,0x0,8
tick,0x7ffdf681f424,71682276,0,0x0,8
tick,0x7ffdf681f424,71684530,0,0x0,8
tick,0x7ffdf681f424,71686280,0,0x0,8
tick,0x7ffdf681f424,71688259,0,0x0,8
tick,0x7ffdf681f424,71690246,0,0x0,8
tick,0x7ffdf681f424,71692245,0,0x0,8
tick,0x7ffdf681f424,71694234,0,0x0,8
tick,0x7ffdf681f424,71696229,0,0x0,8
tick,0x7ffdf681f424,71698589,0,0x0,8
tick,0x7ffdf681f424,71700903,0,0x0,8
tick,0x7ffdf681f424,71712189,0,0x0,8
tick,0x7ffdf681f424,71714191,0,0x0,8
tick,0x7ffdf681f424,71716183,0,0x0,8
tick,0x7ffdf681f424,71718177,0,0x0,8
tick,0x7ffdf681f424,71720174,0,0x0,8
tick,0x7ffdf681f424,71722205,0,0x0,8
tick,0x7ffdf681f424,71724156,0,0x0,8
tick,0x7ffdf681f424,71726153,0,0x0,8
tick,0x7ffdf681f424,71728148,0,0x0,8
tick,0x7ffdf681f424,71730140,0,0x0,8
tick,0x7ffdf681f424,71732132,0,0x0,8
tick,0x7ffdf681f424,71734139,0,0x0,8
tick,0x7ffdf681f424,71736122,0,0x0,8
tick,0x7ffdf681f424,71738120,0,0x0,8
tick,0x7ffdf681f424,71740110,0,0x0,8
tick,0x7ffdf681f424,71742108,0,0x0,8
tick,0x7ffdf681f424,71744102,0,0x0,8
tick,0x7ffdf681f424,71746093,0,0x0,8
tick,0x7ffdf681f424,71749758,0,0x0,8
tick,0x7ffdf681f424,71757939,0,0x0,8
tick,0x7ffdf681f424,71758851,0,0x0,8
tick,0x7ffdf681f424,71760064,0,0x0,8
tick,0x7ffdf681f424,71762106,0,0x0,8
tick,0x7ffdf681f424,71764134,0,0x0,8
tick,0x7ffdf681f424,71766049,0,0x0,8
tick,0x7ffdf681f424,71768045,0,0x0,8
tick,0x7ffdf681f424,71770035,0,0x0,8
tick,0x7ffdf681f424,71772031,0,0x0,8
tick,0x7ffdf681f424,71774021,0,0x0,8
tick,0x7ffdf681f424,71776019,0,0x0,8
tick,0x7ffdf681f424,71778012,0,0x0,8
tick,0x7ffdf681f424,71780014,0,0x0,8
tick,0x7ffdf681f424,71782003,0,0x0,8
tick,0x7ffdf681f424,71784000,0,0x0,8
tick,0x7ffdf681f424,71785989,0,0x0,8
tick,0x7ffdf681f424,71787989,0,0x0,8
tick,0x7ffdf681f424,71789979,0,0x0,8
tick,0x7ffdf681f424,71791982,0,0x0,8
tick,0x7ffdf681f424,71793971,0,0x0,8
tick,0x7ffdf681f424,71795962,0,0x0,8
tick,0x7ffdf681f424,71797956,0,0x0,8
tick,0x7ffdf681f424,71799953,0,0x0,8
tick,0x7ffdf681f424,71801957,0,0x0,8
tick,0x7ffdf681f424,71803946,0,0x0,8
tick,0x7ffdf681f424,71808299,0,0x0,8
tick,0x7ffdf681f424,71817604,0,0x0,8
tick,0x7ffdf681f424,71818910,0,0x0,8
tick,0x7ffdf681f424,71821004,0,0x0,8
tick,0x7ffdf681f424,71822903,0,0x0,8
tick,0x7ffdf681f424,71824919,0,0x0,8
tick,0x7ffdf681f424,71826885,0,0x0,8
tick,0x7ffdf681f424,71828880,0,0x0,8
tick,0x7ffdf681f424,71830877,0,0x0,8
tick,0x7ffdf681f424,71832869,0,0x0,8
tick,0x7ffdf681f424,71834864,0,0x0,8
tick,0x7ffdf681f424,71836859,0,0x0,8
tick,0x7ffdf681f424,71851634,0,0x0,8
tick,0x7ffdf681f424,71852818,0,0x0,8
tick,0x7ffdf681f424,71854808,0,0x0,8
tick,0x7ffdf681f424,71856854,0,0x0,8
tick,0x7ffdf681f424,71858839,0,0x0,8
tick,0x7ffdf681f424,71860800,0,0x0,8
tick,0x7ffdf681f424,71862791,0,0x0,8
tick,0x7ffdf681f424,71864785,0,0x0,8
tick,0x7ffdf681f424,71866777,0,0x0,8
tick,0x7ffdf681f424,71868770,0,0x0,8
tick,0x7ffdf681f424,71870769,0,0x0,8
tick,0x7ffdf681f424,71872777,0,0x0,8
tick,0x7ffdf681f424,71874754,0,0x0,8
tick,0x7ffdf681f424,71876747,0,0x0,8
tick,0x7ffdf681f424,71878740,0,0x0,8
tick,0x7ffdf681f424,71880735,0,0x0,8
tick,0x7ffdf681f424,71882941,0,0x0,8
tick,0x7ffdf681f424,71884891,0,0x0,8
tick,0x7ffdf681f424,71893935,0,0x0,8
tick,0x7ffdf681f424,71895707,0,0x0,8
tick,0x7ffdf681f424,71897780,0,0x0,8
tick,0x7ffdf681f424,71899699,0,0x0,8
tick,0x7ffdf681f424,71901687,0,0x0,8
tick,0x7ffdf681f424,71903680,0,0x0,8
tick,0x7ffdf681f424,71905675,0,0x0,8
tick,0x7ffdf681f424,71907665,0,0x0,8
tick,0x7ffdf681f424,71909659,0,0x0,8
tick,0x7ffdf681f424,71911653,0,0x0,8
tick,0x7ffdf681f424,71913651,0,0x0,8
tick,0x7ffdf681f424,71915654,0,0x0,8
tick,0x7ffdf681f424,71917643,0,0x0,8
tick,0x7ffdf681f424,71919632,0,0x0,8
tick,0x7ffdf681f424,71921626,0,0x0,8
tick,0x7ffdf681f424,71923622,0,0x0,8
tick,0x7ffdf681f424,71925620,0,0x0,8
tick,0x7ffdf681f424,71927613,0,0x0,8
tick,0x7ffdf681f424,71929608,0,0x0,8
tick,0x7ffdf681f424,71932236,0,0x0,8
tick,0x7ffdf681f424,71936311,0,0x0,8
tick,0x7ffdf681f424,71938588,0,0x0,8
tick,0x7ffdf681f424,71946593,0,0x0,8
tick,0x7ffdf681f424,71948807,0,0x0,8
tick,0x7ffdf681f424,71950693,0,0x0,8
tick,0x7ffdf681f424,71952646,0,0x0,8
tick,0x7ffdf681f424,71967796,0,0x0,8
tick,0x7ffdf681f424,71967870,0,0x0,8
tick,0x7ffdf681f424,71969784,0,0x0,8
tick,0x7ffdf681f424,71971505,0,0x0,8
tick,0x7ffdf681f424,71973530,0,0x0,8
tick,0x7ffdf681f424,71975487,0,0x0,8
tick,0x7ffdf681f424,71977479,0,0x0,8
tick,0x7ffdf681f424,71979483,0,0x0,8
tick,0x7ffdf681f424,71981482,0,0x0,8
tick,0x7ffdf681f424,71983627,0,0x0,8
tick,0x7ffdf681f424,71985480,0,0x0,8
tick,0x7ffdf681f424,71987482,0,0x0,8
tick,0x7ffdf681f424,71989451,0,0x0,8
tick,0x7ffdf681f424,71991448,0,0x0,8
tick,0x7ffdf681f424,71993447,0,0x0,8
tick,0x7ffdf681f424,71995436,0,0x0,8
tick,0x7ffdf681f424,71997441,0,0x0,8
tick,0x7ffdf681f424,71999423,0,0x0,8
tick,0x7ffdf681f424,72001418,0,0x0,8
tick,0x7ffdf681f424,72003408,0,0x0,8
tick,0x7ffdf681f424,72005404,0,0x0,8
tick,0x7ffdf681f424,72007402,0,0x0,8
tick,0x7ffdf681f424,72009394,0,0x0,8
tick,0x7ffdf681f424,72011394,0,0x0,8
tick,0x7ffdf681f424,72013381,0,0x0,8
tick,0x7ffdf681f424,72015378,0,0x0,8
tick,0x7ffdf681f424,72017373,0,0x0,8
tick,0x7ffdf681f424,72019367,0,0x0,8
tick,0x7ffdf681f424,72021361,0,0x0,8
tick,0x7ffdf681f424,72023357,0,0x0,8
tick,0x7ffdf681f424,72025375,0,0x0,8
tick,0x7ffdf681f424,72027386,0,0x0,8
tick,0x7ffdf681f424,72029406,0,0x0,8
tick,0x7ffdf681f424,72031372,0,0x0,8
tick,0x7ffdf681f424,72033342,0,0x0,8
tick,0x7ffdf681f424,72035360,0,0x0,8
tick,0x7ffdf681f424,72037331,0,0x0,8
tick,0x7ffdf681f424,72039345,0,0x0,8
tick,0x7ffdf681f424,72041317,0,0x0,8
tick,0x7ffdf681f424,72043307,0,0x0,8
tick,0x7ffdf681f424,72045463,0,0x0,8
tick,0x7ffdf681f424,72048436,0,0x0,8
tick,0x7ffdf681f424,72050300,0,0x0,8
tick,0x7ffdf681f424,72052320,0,0x0,8
tick,0x7ffdf681f424,72054285,0,0x0,8
tick,0x7ffdf681f424,72056315,0,0x0,8
tick,0x7ffdf681f424,72058281,0,0x0,8
tick,0x7ffdf681f424,72060264,0,0x0,8
tick,0x7ffdf681f424,72062421,0,0x0,8
tick,0x7ffdf681f424,72064284,0,0x0,8
tick,0x7ffdf681f424,72067723,0,0x0,8
tick,0x7ffdf681f424,72069234,0,0x0,8
tick,0x7ffdf681f424,72071235,0,0x0,8
tick,0x7ffdf681f424,72073265,0,0x0,8
tick,0x7ffdf681f424,72075223,0,0x0,8
tick,0x7ffdf681f424,72077211,0,0x0,8
tick,0x7ffdf681f424,72079215,0,0x0,8
tick,0x7ffdf681f424,72081203,0,0x0,8
tick,0x7ffdf681f424,72083196,0,0x0,8
tick,0x7ffdf681f424,72085195,0,0x0,8
tick,0x7ffdf681f424,72087188,0,0x0,8
tick,0x7ffdf681f424,72089179,0,0x0,8
tick,0x7ffdf681f424,72091180,0,0x0,8
tick,0x7ffdf681f424,72093172,0,0x0,8
tick,0x7ffdf681f424,72095168,0,0x0,8
tick,0x7ffdf681f424,72097162,0,0x0,8
tick,0x7ffdf681f424,72099152,0,0x0,8
tick,0x7ffdf681f424,72105612,0,0x0,8
tick,0x7ffdf681f424,72108737,0,0x0,8
tick,0x7ffdf681f424,72116970,0,0x0,8
tick,0x7ffdf681f424,72118108,0,0x0,8
tick,0x7ffdf681f424,72120100,0,0x0,8
tick,0x7ffdf681f424,72122093,0,0x0,8
tick,0x7ffdf681f424,72124085,0,0x0,8
tick,0x7ffdf681f424,72126201,0,0x0,8
tick,0x7ffdf681f424,72128240,0,0x0,8
tick,0x7ffdf681f424,72130079,0,0x0,8
tick,0x7ffdf681f424,72132067,0,0x0,8
tick,0x7ffdf681f424,72134063,0,0x0,8
tick,0x7ffdf681f424,72136058,0,0x0,8
tick,0x7ffdf681f424,72138055,0,0x0,8
tick,0x7ffdf681f424,72140044,0,0x0,8
tick,0x7ffdf681f424,72142082,0,0x0,8
tick,0x7ffdf681f424,72144050,0,0x0,8
tick,0x7ffdf681f424,72146028,0,0x0,8
tick,0x7ffdf681f424,72148021,0,0x0,8
tick,0x7ffdf681f424,72150054,0,0x0,8
tick,0x7ffdf681f424,72152009,0,0x0,8
tick,0x7ffdf681f424,72154006,0,0x0,8
tick,0x7ffdf681f424,72156000,0,0x0,8
tick,0x7ffdf681f424,72157996,0,0x0,8
tick,0x7ffdf681f424,72159996,0,0x0,8
tick,0x7ffdf681f424,72173717,0,0x0,8
tick,0x7ffdf681f424,72174954,0,0x0,8
tick,0x7ffdf681f424,72176968,0,0x0,8
tick,0x7ffdf681f424,72178982,0,0x0,8
tick,0x7ffdf681f424,72180950,0,0x0,8
tick,0x7ffdf681f424,72182941,0,0x0,8
tick,0x7ffdf681f424,72184963,0,0x0,8
tick,0x7ffdf681f424,72187066,0,0x0,8
tick,0x7ffdf681f424,72188952,0,0x0,8
tick,0x7ffdf681f424,72190917,0,0x0,8
tick,0x7ffdf681f424,72192945,0,0x0,8
tick,0x7ffdf681f424,72195992,0,0x0,8
tick,0x7ffdf681f424,72198138,0,0x0,8
tick,0x7ffdf681f424,72200059,0,0x0,8
tick,0x7ffdf681f424,72201910,0,0x0,8
tick,0x7ffdf681f424,72203878,0,0x0,8
tick,0x7ffdf681f424,72205871,0,0x0,8
tick,0x7ffdf681f424,72207893,0,0x0,8
tick,0x7ffdf681f424,72209868,0,0x0,8
tick,0x7ffdf681f424,72211880,0,0x0,8
tick,0x7ffdf681f424,72213849,0,0x0,8
tick,0x7ffdf681f424,72215842,0,0x0,8
tick,0x7ffdf681f424,72217845,0,0x0,8
tick,0x7ffdf681f424,72219838,0,0x0,8
tick,0x7ffdf681f424,72221834,0,0x0,8
tick,0x7ffdf681f424,72223836,0,0x0,8
tick,0x7ffdf681f424,72225818,0,0x0,8
tick,0x7ffdf681f424,72228061,0,0x0,8
tick,0x7ffdf681f424,72229946,0,0x0,8
tick,0x7ffdf681f424,72231840,0,0x0,8
tick,0x7ffdf681f424,72233806,0,0x0,8
tick,0x7ffdf681f424,72242859,0,0x0,8
tick,0x7ffdf681f424,72244771,0,0x0,8
tick,0x7ffdf681f424,72246760,0,0x0,8
tick,0x7ffdf681f424,72248756,0,0x0,8
tick,0x7ffdf681f424,72250755,0,0x0,8
tick,0x7ffdf681f424,72252770,0,0x0,8
tick,0x7ffdf681f424,72254744,0,0x0,8
tick,0x7ffdf681f424,72256736,0,0x0,8
tick,0x7ffdf681f424,72258729,0,0x0,8
tick,0x7ffdf681f424,72260724,0,0x0,8
tick,0x7ffdf681f424,72262720,0,0x0,8
tick,0x7ffdf681f424,72264719,0,0x0,8
tick,0x7ffdf681f424,72266709,0,0x0,8
tick,0x7ffdf681f424,72268699,0,0x0,8
tick,0x7ffdf681f424,72270701,0,0x0,8
tick,0x7ffdf681f424,72272692,0,0x0,8
tick,0x7ffdf681f424,72274686,0,0x0,8
tick,0x7ffdf681f424,72276680,0,0x0,8
tick,0x7ffdf681f424,72278677,0,0x0,8
tick,0x7ffdf681f424,72280671,0,0x0,8
tick,0x7ffdf681f424,72282663,0,0x0,8
tick,0x7ffdf681f424,72284664,0,0x0,8
tick,0x7ffdf681f424,72286654,0,0x0,8
tick,0x7ffdf681f424,72288646,0,0x0,8
tick,0x7ffdf681f424,72290640,0,0x0,8
tick,0x7ffdf681f424,72292647,0,0x0,8
tick,0x7ffdf681f424,72294631,0,0x0,8
tick,0x7ffdf681f424,72296624,0,0x0,8
tick,0x7ffdf681f424,72298619,0,0x0,8
tick,0x7ffdf681f424,72300617,0,0x0,8
tick,0x7ffdf681f424,72303561,0,0x0,8
tick,0x7ffdf681f424,72315370,0,0x0,8
tick,0x7ffdf681f424,72316575,0,0x0,8
tick,0x7ffdf681f424,72318573,0,0x0,8
tick,0x7ffdf681f424,72320590,0,0x0,8
tick,0x7ffdf681f424,72322563,0,0x0,8
tick,0x7ffdf681f424,72324564,0,0x0,8
tick,0x7ffdf681f424,72326553,0,0x0,8
tick,0x7ffdf681f424,72328542,0,0x0,8
tick,0x7ffdf681f424,72330745,0,0x0,8
tick,0x7ffdf681f424,72340806,0,0x0,8
tick,0x7ffdf681f424,72342509,0,0x0,8
tick,0x7ffdf681f424,72344524,0,0x0,8
tick,0x7ffdf681f424,72346515,0,0x0,8
tick,0x7ffdf681f424,72348504,0,0x0,8
tick,0x7ffdf681f424,72350487,0,0x0,8
tick,0x7ffdf681f424,72352491,0,0x0,8
tick,0x7ffdf681f424,72354473,0,0x0,8
tick,0x7ffdf681f424,72356466,0,0x0,8
tick,0x7ffdf681f424,72358476,0,0x0,8
tick,0x7ffdf681f424,72360457,0,0x0,8
tick,0x7ffdf681f424,72362458,0,0x0,8
tick,0x7ffdf681f424,72364443,0,0x0,8
tick,0x7ffdf681f424,72366438,0,0x0,8
tick,0x7ffdf681f424,72368435,0,0x0,8
tick,0x7ffdf681f424,72370428,0,0x0,8
tick,0x7ffdf681f424,72372419,0,0x0,8
tick,0x7ffdf681f424,72374415,0,0x0,8
tick,0x7ffdf681f424,72376414,0,0x0,8
tick,0x7ffdf681f424,72378404,0,0x0,8
tick,0x7ffdf681f424,72380396,0,0x0,8
tick,0x7ffdf681f424,72382390,0,0x0,8
tick,0x7ffdf681f424,72384396,0,0x0,8
tick,0x7ffdf681f424,72386382,0,0x0,8
tick,0x7ffdf681f424,72388380,0,0x0,8
tick,0x7ffdf681f424,72390372,0,0x0,8
tick,0x7ffdf681f424,72392367,0,0x0,8
tick,0x7ffdf681f424,72394367,0,0x0,8
tick,0x7ffdf681f424,72396360,0,0x0,8
tick,0x7ffdf681f424,72398354,0,0x0,8
tick,0x7ffdf681f424,72415274,0,0x0,8
tick,0x7ffdf681f424,72422114,0,0x0,8
tick,0x7ffdf681f424,72424668,0,0x0,8
tick,0x7ffdf681f424,72426558,0,0x0,8
tick,0x7ffdf681f424,72428433,0,0x0,8
tick,0x7ffdf681f424,72430398,0,0x0,8
tick,0x7ffdf681f424,72432275,0,0x0,8
tick,0x7ffdf681f424,72434283,0,0x0,8
tick,0x7ffdf681f424,72436310,0,0x0,8
tick,0x7ffdf681f424,72438255,0,0x0,8
tick,0x7ffdf681f424,72440257,0,0x0,8
tick,0x7ffdf681f424,72442251,0,0x0,8
tick,0x7ffdf681f424,72444239,0,0x0,8
tick,0x7ffdf681f424,72446239,0,0x0,8
tick,0x7ffdf681f424,72448223,0,0x0,8
tick,0x7ffdf681f424,72450219,0,0x0,8
tick,0x7ffdf681f424,72452208,0,0x0,8
tick,0x7ffdf681f424,72454203,0,0x0,8
tick,0x7ffdf681f424,72456197,0,0x0,8
tick,0x7ffdf681f424,72458192,0,0x0,8
tick,0x7ffdf681f424,72460185,0,0x0,8
tick,0x7ffdf681f424,72462183,0,0x0,8
tick,0x7ffdf681f424,72464177,0,0x0,8
tick,0x7ffdf681f424,72466169,0,0x0,8
tick,0x7ffdf681f424,72468171,0,0x0,8
tick,0x7ffdf681f424,72470159,0,0x0,8
tick,0x7ffdf681f424,72472152,0,0x0,8
tick,0x7ffdf681f424,72474158,0,0x0,8
tick,0x7ffdf681f424,72476150,0,0x0,8
tick,0x7ffdf681f424,72482969,0,0x0,8
tick,0x7ffdf681f424,72483045,0,0x0,8
tick,0x7ffdf681f424,72485663,0,0x0,8
tick,0x7ffdf681f424,72494566,0,0x0,8
tick,0x7ffdf681f424,72496097,0,0x0,8
tick,0x7ffdf681f424,72498086,0,0x0,8
tick,0x7ffdf681f424,72500087,0,0x0,8
tick,0x7ffdf681f424,72502190,0,0x0,8
tick,0x7ffdf681f424,72504098,0,0x0,8
tick,0x7ffdf681f424,72506143,0,0x0,8
tick,0x7ffdf681f424,72508467,0,0x0,8
tick,0x7ffdf681f424,72510541,0,0x0,8
tick,0x7ffdf681f424,72521011,0,0x0,8
tick,0x7ffdf681f424,72523030,0,0x0,8
tick,0x7ffdf681f424,72525028,0,0x0,8
tick,0x7ffdf681f424,72527023,0,0x0,8
tick,0x7ffdf681f424,72529026,0,0x0,8
tick,0x7ffdf681f424,72531033,0,0x0,8
tick,0x7ffdf681f424,72532995,0,0x0,8
tick,0x7ffdf681f424,72534989,0,0x0,8
tick,0x7ffdf681f424,72536984,0,0x0,8
tick,0x7ffdf681f424,72538978,0,0x0,8
tick,0x7ffdf681f424,72540970,0,0x0,8
tick,0x7ffdf681f424,72542970,0,0x0,8
tick,0x7ffdf681f424,72544967,0,0x0,8
tick,0x7ffdf681f424,72546955,0,0x0,8
tick,0x7ffdf681f424,72548950,0,0x0,8
tick,0x7ffdf681f424,72550944,0,0x0,8
tick,0x7ffdf681f424,72552936,0,0x0,8
tick,0x7ffdf681f424,72554943,0,0x0,8
tick,0x7ffdf681f424,72556929,0,0x0,8
tick,0x7ffdf681f424,72568708,0,0x0,8
tick,0x7ffdf681f424,72569897,0,0x0,8
tick,0x7ffdf681f424,72571905,0,0x0,8
tick,0x7ffdf681f424,72573967,0,0x0,8
tick,0x7ffdf681f424,72575885,0,0x0,8
tick,0x7ffdf681f424,72577884,0,0x0,8
tick,0x7ffdf681f424,72579875,0,0x0,8
tick,0x7ffdf681f424,72581864,0,0x0,8
tick,0x7ffdf681f424,72583861,0,0x0,8
tick,0x7ffdf681f424,72585865,0,0x0,8
tick,0x7ffdf681f424,72587857,0,0x0,8
tick,0x7ffdf681f424,72589866,0,0x0,8
tick,0x7ffdf681f424,72591847,0,0x0,8
tick,0x7ffdf681f424,72593836,0,0x0,8
tick,0x7ffdf681f424,72595827,0,0x0,8
tick,0x7ffdf681f424,72597821,0,0x0,8
tick,0x7ffdf681f424,72599829,0,0x0,8
tick,0x7ffdf681f424,72601810,0,0x0,8
tick,0x7ffdf681f424,72603803,0,0x0,8
tick,0x7ffdf681f424,72605800,0,0x0,8
tick,0x7ffdf681f424,72607792,0,0x0,8
tick,0x7ffdf681f424,72609792,0,0x0,8
tick,0x7ffdf681f424,72611786,0,0x0,8
tick,0x7ffdf681f424,72613782,0,0x0,8
tick,0x7ffdf681f424,72629112,0,0x0,8
tick,0x7ffdf681f424,72630744,0,0x0,8
tick,0x7ffdf681f424,72632749,0,0x0,8
tick,0x7ffdf681f424,72634759,0,0x0,8
tick,0x7ffdf681f424,72636736,0,0x0,8
tick,0x7ffdf681f424,72638715,0,0x0,8
tick,0x7ffdf681f424,72640752,0,0x0,8
tick,0x7ffdf681f424,72642707,0,0x0,8
tick,0x7ffdf681f424,72644696,0,0x0,8
tick,0x7ffdf681f424,72646690,0,0x0,8
tick,0x7ffdf681f424,72649910,0,0x0,8
tick,0x7ffdf681f424,72651808,0,0x0,8
tick,0x7ffdf681f424,72654136,0,0x0,8
tick,0x7ffdf681f424,72655674,0,0x0,8
tick,0x7ffdf681f424,72657921,0,0x0,8
tick,0x7ffdf681f424,72660170,0,0x0,8
tick,0x7ffdf681f424,72661882,0,0x0,8
tick,0x7ffdf681f424,72665004,0,0x0,8
tick,0x7ffdf681f424,72666647,0,0x0,8
tick,0x7ffdf681f424,72668638,0,0x0,8
tick,0x7ffdf681f424,72670692,0,0x0,8
tick,0x7ffdf681f424,72672666,0,0x0,8
tick,0x7ffdf681f424,72674629,0,0x0,8
tick,0x7ffdf681f424,72676618,0,0x0,8
tick,0x7ffdf681f424,72678605,0,0x0,8
tick,0x7ffdf681f424,72680598,0,0x0,8
tick,0x7ffdf681f424,72682592,0,0x0,8
tick,0x7ffdf681f424,72684588,0,0x0,8
tick,0x7ffdf681f424,72686585,0,0x0,8
tick,0x7ffdf681f424,72688577,0,0x0,8
tick,0x7ffdf681f424,72690572,0,0x0,8
tick,0x7ffdf681f424,72692568,0,0x0,8
tick,0x7ffdf681f424,72694557,0,0x0,8
tick,0x7ffdf681f424,72696553,0,0x0,8
tick,0x7ffdf681f424,72698559,0,0x0,8
tick,0x7ffdf681f424,72700546,0,0x0,8
tick,0x7ffdf681f424,72702541,0,0x0,8
tick,0x7ffdf681f424,72704534,0,0x0,8
tick,0x7ffdf681f424,72706526,0,0x0,8
tick,0x7ffdf681f424,72708758,0,0x0,8
tick,0x7ffdf681f424,72710660,0,0x0,8
tick,0x7ffdf681f424,72716236,0,0x0,8
tick,0x7ffdf681f424,72717508,0,0x0,8
tick,0x7ffdf681f424,72721082,0,0x0,8
tick,0x7ffdf681f424,72722486,0,0x0,8
tick,0x7ffdf681f424,72724482,0,0x0,8
tick,0x7ffdf681f424,72726541,0,0x0,8
tick,0x7ffdf681f424,72728474,0,0x0,8
tick,0x7ffdf681f424,72730470,0,0x0,8
tick,0x7ffdf681f424,72732460,0,0x0,8
tick,0x7ffdf681f424,72734457,0,0x0,8
tick,0x7ffdf681f424,72736451,0,0x0,8
tick,0x7ffdf681f424,72738451,0,0x0,8
tick,0x7ffdf681f424,72741445,0,0x0,8
tick,0x7ffdf681f424,72750475,0,0x0,8
tick,0x7ffdf681f424,72752419,0,0x0,8
tick,0x7ffdf681f424,72754408,0,0x0,8
tick,0x7ffdf681f424,72756400,0,0x0,8
tick,0x7ffdf681f424,72758406,0,0x0,8
tick,0x7ffdf681f424,72760490,0,0x0,8
tick,0x7ffdf681f424,72762383,0,0x0,8
tick,0x7ffdf681f424,72764378,0,0x0,8
tick,0x7ffdf681f424,72766376,0,0x0,8
tick,0x7ffdf681f424,72768371,0,0x0,8
tick,0x7ffdf681f424,72770357,0,0x0,8
tick,0x7ffdf681f424,72772356,0,0x0,8
tick,0x7ffdf681f424,72774353,0,0x0,8
tick,0x7ffdf681f424,72776340,0,0x0,8
tick,0x7ffdf681f424,72778335,0,0x0,8
tick,0x7ffdf681f424,72780322,0,0x0,8
tick,0x7ffdf681f424,72782329,0,0x0,8
tick,0x7ffdf681f424,72784328,0,0x0,8
tick,0x7ffdf681f424,72786319,0,0x0,8
tick,0x7ffdf681f424,72788310,0,0x0,8
tick,0x7ffdf681f424,72790305,0,0x0,8
tick,0x7ffdf681f424,72792299,0,0x0,8
tick,0x7ffdf681f424,72794295,0,0x0,8
tick,0x7ffdf681f424,72796299,0,0x0,8
tick,0x7ffdf681f424,72798764,0,0x0,8
tick,0x7ffdf681f424,72811702,0,0x0,8
tick,0x7ffdf681f424,72813253,0,0x0,8
tick,0x7ffdf681f424,72815242,0,0x0,8
tick,0x7ffdf681f424,72817567,0,0x0,8
tick,0x7ffdf681f424,72819258,0,0x0,8
tick,0x7ffdf681f424,72821240,0,0x0,8
tick,0x7ffdf681f424,72823221,0,0x0,8
tick,0x7ffdf681f424,72825219,0,0x0,8
tick,0x7ffdf681f424,72827208,0,0x0,8
tick,0x7ffdf681f424,72829202,0,0x0,8
tick,0x7ffdf681f424,72831330,0,0x0,8
tick,0x7ffdf681f424,72833587,0,0x0,8
tick,0x7ffdf681f424,72835197,0,0x0,8
tick,0x7ffdf681f424,72837214,0,0x0,8
tick,0x7ffdf681f424,72839184,0,0x0,8
tick,0x7ffdf681f424,72841263,0,0x0,8
tick,0x7ffdf681f424,72843173,0,0x0,8
tick,0x7ffdf681f424,72845168,0,0x0,8
tick,0x7ffdf681f424,72847181,0,0x0,8
tick,0x7ffdf681f424,72849210,0,0x0,8
tick,0x7ffdf681f424,72851154,0,0x0,8
tick,0x7ffdf681f424,72853160,0,0x0,8
tick,0x7ffdf681f424,72855141,0,0x0,8
tick,0x7ffdf681f424,72857134,0,0x0,8
tick,0x7ffdf681f424,72859131,0,0x0,8
tick,0x7ffdf681f424,72861114,0,0x0,8
tick,0x7ffdf681f424,72863117,0,0x0,8
tick,0x7ffdf681f424,72865108,0,0x0,8
tick,0x7ffdf681f424,72867105,0,0x0,8
tick,0x7ffdf681f424,72869092,0,0x0,8
tick,0x7ffdf681f424,72871091,0,0x0,8
tick,0x7ffdf681f424,72873084,0,0x0,8
tick,0x7ffdf681f424,72876398,0,0x0,8
tick,0x7ffdf681f424,72889790,0,0x0,8
tick,0x7ffdf681f424,72891041,0,0x0,8
tick,0x7ffdf681f424,72893033,0,0x0,8
tick,0x7ffdf681f424,72895030,0,0x0,8
tick,0x7ffdf681f424,72897026,0,0x0,8
tick,0x7ffdf681f424,72899091,0,0x0,8
tick,0x7ffdf681f424,72901018,0,0x0,8
tick,0x7ffdf681f424,72903010,0,0x0,8
tick,0x7ffdf681f424,72904998,0,0x0,8
tick,0x7ffdf681f424,72906996,0,0x0,8
tick,0x7ffdf681f424,72908986,0,0x0,8
tick,0x7ffdf681f424,72910987,0,0x0,8
tick,0x7ffdf681f424,72912975,0,0x0,8
tick,0x7ffdf681f424,72914980,0,0x0,8
tick,0x7ffdf681f424,72916968,0,0x0,8
tick,0x7ffdf681f424,72918966,0,0x0,8
tick,0x7ffdf681f424,72925513,0,0x0,8
tick,0x7ffdf681f424,72926090,0,0x0,8
tick,0x7ffdf681f424,72928006,0,0x0,8
tick,0x7ffdf681f424,72929978,0,0x0,8
tick,0x7ffdf681f424,72932620,0,0x0,8
tick,0x7ffdf681f424,72933927,0,0x0,8
tick,0x7ffdf681f424,72935967,0,0x0,8
tick,0x7ffdf681f424,72938229,0,0x0,8
tick,0x7ffdf681f424,72939909,0,0x0,8
tick,0x7ffdf681f424,72941922,0,0x0,8
tick,0x7ffdf681f424,72943896,0,0x0,8
tick,0x7ffdf681f424,72945890,0,0x0,8
tick,0x7ffdf681f424,72947887,0,0x0,8
tick,0x7ffdf681f424,72949880,0,0x0,8
tick,0x7ffdf681f424,72951884,0,0x0,8
tick,0x7ffdf681f424,72953867,0,0x0,8
tick,0x7ffdf681f424,72955860,0,0x0,8
tick,0x7ffdf681f424,72957854,0,0x0,8
tick,0x7ffdf681f424,72959851,0,0x0,8
tick,0x7ffdf681f424,72961851,0,0x0,8
tick,0x7ffdf681f424,72963840,0,0x0,8
tick,0x7ffdf681f424,72965841,0,0x0,8
tick,0x7ffdf681f424,72967838,0,0x0,8
tick,0x7ffdf681f424,72969839,0,0x0,8
tick,0x7ffdf681f424,72972939,0,0x0,8
tick,0x7ffdf681f424,72976739,0,0x0,8
tick,0x7ffdf681f424,72989849,0,0x0,8
tick,0x7ffdf681f424,73000051,0,0x0,8
tick,0x7ffdf681f424,73001749,0,0x0,8
tick,0x7ffdf681f424,73003744,0,0x0,8
tick,0x7ffdf681f424,73005745,0,0x0,8
tick,0x7ffdf681f424,73007750,0,0x0,8
tick,0x7ffdf681f424,73009766,0,0x0,8
tick,0x7ffdf681f424,73011745,0,0x0,8
tick,0x7ffdf681f424,73013720,0,0x0,8
tick,0x7ffdf681f424,73015710,0,0x0,8
tick,0x7ffdf681f424,73017731,0,0x0,8
tick,0x7ffdf681f424,73019703,0,0x0,8
tick,0x7ffdf681f424,73021699,0,0x0,8
tick,0x7ffdf681f424,73023687,0,0x0,8
tick,0x7ffdf681f424,73025689,0,0x0,8
tick,0x7ffdf681f424,73027679,0,0x0,8
tick,0x7ffdf681f424,73029668,0,0x0,8
tick,0x7ffdf681f424,73031682,0,0x0,8
tick,0x7ffdf681f424,73033663,0,0x0,8
tick,0x7ffdf681f424,73035664,0,0x0,8
tick,0x7ffdf681f424,73037650,0,0x0,8
tick,0x7ffdf681f424,73039648,0,0x0,8
tick,0x7ffdf681f424,73041650,0,0x0,8
tick,0x7ffdf681f424,73043641,0,0x0,8
tick,0x7ffdf681f424,73045632,0,0x0,8
tick,0x7ffdf681f424,73047626,0,0x0,8
tick,0x7ffdf681f424,73049656,0,0x0,8
tick,0x7ffdf681f424,73053456,0,0x0,8
tick,0x7ffdf681f424,73054684,0,0x0,8
tick,0x7ffdf681f424,73056663,0,0x0,8
tick,0x7ffdf681f424,73058646,0,0x0,8
tick,0x7ffdf681f424,73060624,0,0x0,8
tick,0x7ffdf681f424,73062624,0,0x0,8
tick,0x7ffdf681f424,73064602,0,0x0,8
tick,0x7ffdf681f424,73066630,0,0x0,8
tick,0x7ffdf681f424,73068572,0,0x0,8
tick,0x7ffdf681f424,73070567,0,0x0,8
tick,0x7ffdf681f424,73072608,0,0x0,8
tick,0x7ffdf681f424,73075153,0,0x0,8
tick,0x7ffdf681f424,73076575,0,0x0,8
tick,0x7ffdf681f424,73081528,0,0x0,8
tick,0x7ffdf681f424,73082590,0,0x0,8
tick,0x7ffdf681f424,73084568,0,0x0,8
tick,0x7ffdf681f424,73086536,0,0x0,8
tick,0x7ffdf681f424,73088553,0,0x0,8
tick,0x7ffdf681f424,73090514,0,0x0,8
tick,0x7ffdf681f424,73092541,0,0x0,8
tick,0x7ffdf681f424,73094508,0,0x0,8
tick,0x7ffdf681f424,73096499,0,0x0,8
tick,0x7ffdf681f424,73098490,0,0x0,8
tick,0x7ffdf681f424,73100491,0,0x0,8
tick,0x7ffdf681f424,73102486,0,0x0,8
tick,0x7ffdf681f424,73104500,0,0x0,8
tick,0x7ffdf681f424,73106465,0,0x0,8
tick,0x7ffdf681f424,73108461,0,0x0,8
tick,0x7ffdf681f424,73110455,0,0x0,8
tick,0x7ffdf681f424,73112445,0,0x0,8
tick,0x7ffdf681f424,73114439,0,0x0,8
tick,0x7ffdf681f424,73116438,0,0x0,8
tick,0x7ffdf681f424,73118440,0,0x0,8
tick,0x7ffdf681f424,73120427,0,0x0,8
tick,0x7ffdf681f424,73122419,0,0x0,8
tick,0x7ffdf681f424,73124414,0,0x0,8
tick,0x7ffdf681f424,73126426,0,0x0,8
tick,0x7ffdf681f424,73128405,0,0x0,8
tick,0x7ffdf681f424,73130395,0,0x0,8
tick,0x7ffdf681f424,73132391,0,0x0,8
tick,0x7ffdf681f424,73134404,0,0x0,8
tick,0x7ffdf681f424,73136390,0,0x0,8
tick,0x7ffdf681f424,73138379,0,0x0,8
tick,0x7ffdf681f424,73140374,0,0x0,8
tick,0x7ffdf681f424,73142408,0,0x0,8
tick,0x7ffdf681f424,73144556,0,0x0,8
tick,0x7ffdf681f424,73157852,0,0x0,8
tick,0x7ffdf681f424,73163270,0,0x0,8
tick,0x7ffdf681f424,73163967,0,0x0,8
tick,0x7ffdf681f424,73173387,0,0x0,8
tick,0x7ffdf681f424,73175335,0,0x0,8
tick,0x7ffdf681f424,73177329,0,0x0,8
tick,0x7ffdf681f424,73179282,0,0x0,8
tick,0x7ffdf681f424,73181270,0,0x0,8
tick,0x7ffdf681f424,73183324,0,0x0,8
tick,0x7ffdf681f424,73185255,0,0x0,8
tick,0x7ffdf681f424,73187251,0,0x0,8
tick,0x7ffdf681f424,73189244,0,0x0,8
tick,0x7ffdf681f424,73191234,0,0x0,8
tick,0x7ffdf681f424,73193231,0,0x0,8
tick,0x7ffdf681f424,73195238,0,0x0,8
tick,0x7ffdf681f424,73197220,0,0x0,8
tick,0x7ffdf681f424,73199221,0,0x0,8
tick,0x7ffdf681f424,73201217,0,0x0,8
tick,0x7ffdf681f424,73203201,0,0x0,8
tick,0x7ffdf681f424,73205200,0,0x0,8
tick,0x7ffdf681f424,73207193,0,0x0,8
tick,0x7ffdf681f424,73209190,0,0x0,8
tick,0x7ffdf681f424,73211182,0,0x0,8
tick,0x7ffdf681f424,73213174,0,0x0,8
tick,0x7ffdf681f424,73215172,0,0x0,8
tick,0x7ffdf681f424,73217172,0,0x0,8
tick,0x7ffdf681f424,73219160,0,0x0,8
tick,0x7ffdf681f424,73221154,0,0x0,8
tick,0x7ffdf681f424,73223150,0,0x0,8
tick,0x7ffdf681f424,73225146,0,0x0,8
tick,0x7ffdf681f424,73227145,0,0x0,8
tick,0x7ffdf681f424,73229131,0,0x0,8
tick,0x7ffdf681f424,73231126,0,0x0,8
tick,0x7ffdf681f424,73247839,0,0x0,8
tick,0x7ffdf681f424,73249083,0,0x0,8
tick,0x7ffdf681f424,73251084,0,0x0,8
tick,0x7ffdf681f424,73253088,0,0x0,8
tick,0x7ffdf681f424,73255070,0,0x0,8
tick,0x7ffdf681f424,73257069,0,0x0,8
tick,0x7ffdf681f424,73259061,0,0x0,8
tick,0x7ffdf681f424,73261047,0,0x0,8
tick,0x7ffdf681f424,73263039,0,0x0,8
tick,0x7ffdf681f424,73265035,0,0x0,8
tick,0x7ffdf681f424,73267030,0,0x0,8
tick,0x7ffdf681f424,73269073,0,0x0,8
tick,0x7ffdf681f424,73271141,0,0x0,8
tick,0x7ffdf681f424,73273183,0,0x0,8
tick,0x7ffdf681f424,73275301,0,0x0,8
tick,0x7ffdf681f424,73277012,0,0x0,8
tick,0x7ffdf681f424,73285847,0,0x0,8
tick,0x7ffdf681f424,73286986,0,0x0,8
tick,0x7ffdf681f424,73288977,0,0x0,8
tick,0x7ffdf681f424,73291055,0,0x0,8
tick,0x7ffdf681f424,73293063,0,0x0,8
tick,0x7ffdf681f424,73294978,0,0x0,8
tick,0x7ffdf681f424,73296955,0,0x0,8
tick,0x7ffdf681f424,73298946,0,0x0,8
tick,0x7ffdf681f424,73300942,0,0x0,8
tick,0x7ffdf681f424,73302935,0,0x0,8
tick,0x7ffdf681f424,73304934,0,0x0,8
tick,0x7ffdf681f424,73306929,0,0x0,8
tick,0x7ffdf681f424,73308920,0,0x0,8
tick,0x7ffdf681f424,73310913,0,0x0,8
tick,0x7ffdf681f424,73312913,0,0x0,8
tick,0x7ffdf681f424,73314902,0,0x0,8
tick,0x7ffdf681f424,73316909,0,0x0,8
tick,0x7ffdf681f424,73318895,0,0x0,8
tick,0x7ffdf681f424,73320893,0,0x0,8
tick,0x7ffdf681f424,73322883,0,0x0,8
tick,0x7ffdf681f424,73325436,0,0x0,8
tick,0x7ffdf681f424,73329881,0,0x0,8
tick,0x7ffdf681f424,73338159,0,0x0,8
tick,0x7ffdf681f424,73339846,0,0x0,8
tick,0x7ffdf681f424,73341910,0,0x0,8
tick,0x7ffdf681f424,73343845,0,0x0,8
tick,0x7ffdf681f424,73345832,0,0x0,8
tick,0x7ffdf681f424,73347884,0,0x0,8
tick,0x7ffdf681f424,73349815,0,0x0,8
tick,0x7ffdf681f424,73351824,0,0x0,8
tick,0x7ffdf681f424,73353803,0,0x0,8
tick,0x7ffdf681f424,73355796,0,0x0,8
tick,0x7ffdf681f424,73357789,0,0x0,8
tick,0x7ffdf681f424,73359796,0,0x0,8
tick,0x7ffdf681f424,73361781,0,0x0,8
tick,0x7ffdf681f424,73363775,0,0x0,8
tick,0x7ffdf681f424,73365771,0,0x0,8
tick,0x7ffdf681f424,73367770,0,0x0,8
tick,0x7ffdf681f424,73369773,0,0x0,8
tick,0x7ffdf681f424,73371788,0,0x0,8
tick,0x7ffdf681f424,73373750,0,0x0,8
tick,0x7ffdf681f424,73375757,0,0x0,8
tick,0x7ffdf681f424,73378633,0,0x0,8
tick,0x7ffdf681f424,73380146,0,0x0,8
tick,0x7ffdf681f424,73394176,0,0x0,8
tick,0x7ffdf681f424,73395705,0,0x0,8
tick,0x7ffdf681f424,73397689,0,0x0,8
tick,0x7ffdf681f424,73410104,0,0x0,8
tick,0x7ffdf681f424,73412255,0,0x0,8
tick,0x7ffdf681f424,73413658,0,0x0,8
tick,0x7ffdf681f424,73415942,0,0x0,8
tick,0x7ffdf681f424,73417760,0,0x0,8
tick,0x7ffdf681f424,73419650,0,0x0,8
tick,0x7ffdf681f424,73421628,0,0x0,8
tick,0x7ffdf681f424,73423663,0,0x0,8
tick,0x7ffdf681f424,73425630,0,0x0,8
tick,0x7ffdf681f424,73427628,0,0x0,8
tick,0x7ffdf681f424,73429602,0,0x0,8
tick,0x7ffdf681f424,73431596,0,0x0,8
tick,0x7ffdf681f424,73433625,0,0x0,8
tick,0x7ffdf681f424,73435584,0,0x0,8
tick,0x7ffdf681f424,73437589,0,0x0,8
tick,0x7ffdf681f424,73439576,0,0x0,8
tick,0x7ffdf681f424,73441618,0,0x0,8
tick,0x7ffdf681f424,73443563,0,0x0,8
tick,0x7ffdf681f424,73445558,0,0x0,8
tick,0x7ffdf681f424,73447556,0,0x0,8
tick,0x7ffdf681f424,73449549,0,0x0,8
tick,0x7ffdf681f424,73451556,0,0x0,8
tick,0x7ffdf681f424,73453543,0,0x0,8
tick,0x7ffdf681f424,73455550,0,0x0,8
tick,0x7ffdf681f424,73457532,0,0x0,8
tick,0x7ffdf681f424,73459527,0,0x0,8
tick,0x7ffdf681f424,73461525,0,0x0,8
tick,0x7ffdf681f424,73463514,0,0x0,8
tick,0x7ffdf681f424,73465499,0,0x0,8
tick,0x7ffdf681f424,73468257,0,0x0,8
tick,0x7ffdf681f424,73469502,0,0x0,8
tick,0x7ffdf681f424,73471589,0,0x0,8
tick,0x7ffdf681f424,73473487,0,0x0,8
tick,0x7ffdf681f424,73475637,0,0x0,8
tick,0x7ffdf681f424,73477531,0,0x0,8
tick,0x7ffdf681f424,73479532,0,0x0,8
tick,0x7ffdf681f424,73481506,0,0x0,8
tick,0x7ffdf681f424,73483483,0,0x0,8
tick,0x7ffdf681f424,73485473,0,0x0,8
tick,0x7ffdf681f424,73487450,0,0x0,8
tick,0x7ffdf681f424,73489444,0,0x0,8
tick,0x7ffdf681f424,73491443,0,0x0,8
tick,0x7ffdf681f424,73493591,0,0x0,8
tick,0x7ffdf681f424,73495454,0,0x0,8
tick,0x7ffdf681f424,73497424,0,0x0,8
tick,0x7ffdf681f424,73499425,0,0x0,8
tick,0x7ffdf681f424,73501424,0,0x0,8
tick,0x7ffdf681f424,73503406,0,0x0,8
tick,0x7ffdf681f424,73505395,0,0x0,8
tick,0x7ffdf681f424,73507386,0,0x0,8
tick,0x7ffdf681f424,73509393,0,0x0,8
tick,0x7ffdf681f424,73511384,0,0x0,8
tick,0x7ffdf681f424,73513374,0,0x0,8
tick,0x7ffdf681f424,73515373,0,0x0,8
tick,0x7ffdf681f424,73517377,0,0x0,8
tick,0x7ffdf681f424,73519360,0,0x0,8
tick,0x7ffdf681f424,73521349,0,0x0,8
tick,0x7ffdf681f424,73537338,0,0x0,8
tick,0x7ffdf681f424,73537389,0,0x0,8
tick,0x7ffdf681f424,73539310,0,0x0,8
tick,0x7ffdf681f424,73541308,0,0x0,8
tick,0x7ffdf681f424,73543442,0,0x0,8
tick,0x7ffdf681f424,73545304,0,0x0,8
tick,0x7ffdf681f424,73547343,0,0x0,8
tick,0x7ffdf681f424,73549284,0,0x0,8
tick,0x7ffdf681f424,73551281,0,0x0,8
tick,0x7ffdf681f424,73553274,0,0x0,8
tick,0x7ffdf681f424,73555263,0,0x0,8
tick,0x7ffdf681f424,73557257,0,0x0,8
tick,0x7ffdf681f424,73559287,0,0x0,8
tick,0x7ffdf681f424,73561246,0,0x0,8
tick,0x7ffdf681f424,73563241,0,0x0,8
tick,0x7ffdf681f424,73565236,0,0x0,8
tick,0x7ffdf681f424,73567259,0,0x0,8
tick,0x7ffdf681f424,73569229,0,0x0,8
tick,0x7ffdf681f424,73582944,0,0x0,8
tick,0x7ffdf681f424,73584204,0,0x0,8
tick,0x7ffdf681f424,73586190,0,0x0,8
tick,0x7ffdf681f424,73588216,0,0x0,8
tick,0x7ffdf681f424,73590177,0,0x0,8
tick,0x7ffdf681f424,73592366,0,0x0,8
tick,0x7ffdf681f424,73594162,0,0x0,8
tick,0x7ffdf681f424,73596150,0,0x0,8
tick,0x7ffdf681f424,73598145,0,0x0,8
tick,0x7ffdf681f424,73600148,0,0x0,8
tick,0x7ffdf681f424,73602148,0,0x0,8
tick,0x7ffdf681f424,73604141,0,0x0,8
tick,0x7ffdf681f424,73606123,0,0x0,8
tick,0x7ffdf681f424,73608115,0,0x0,8
tick,0x7ffdf681f424,73610127,0,0x0,8
tick,0x7ffdf681f424,73612110,0,0x0,8
tick,0x7ffdf681f424,73614107,0,0x0,8
tick,0x7ffdf681f424,73616096,0,0x0,8
tick,0x7ffdf681f424,73618102,0,0x0,8
tick,0x7ffdf681f424,73620087,0,0x0,8
tick,0x7ffdf681f424,73622089,0,0x0,8
tick,0x7ffdf681f424,73624087,0,0x0,8
tick,0x7ffdf681f424,73626190,0,0x0,8
tick,0x7ffdf681f424,73628082,0,0x0,8
tick,0x7ffdf681f424,73630097,0,0x0,8
tick,0x7ffdf681f424,73632061,0,0x0,8
tick,0x7ffdf681f424,73634062,0,0x0,8
tick,0x7ffdf681f424,73636068,0,0x0,8
tick,0x7ffdf681f424,73638042,0,0x0,8
tick,0x7ffdf681f424,73640036,0,0x0,8
tick,0x7ffdf681f424,73642284,0,0x0,8
tick,0x7ffdf681f424,73648450,0,0x0,8
tick,0x7ffdf681f424,73650631,0,0x0,8
tick,0x7ffdf681f424,73667037,0,0x0,8
tick,0x7ffdf681f424,73667842,0,0x0,8
tick,0x7ffdf681f424,73669261,0,0x0,8
tick,0x7ffdf681f424,73672218,0,0x0,8
tick,0x7ffdf681f424,73673948,0,0x0,8
tick,0x7ffdf681f424,73676015,0,0x0,8
tick,0x7ffdf681f424,73677958,0,0x0,8
tick,0x7ffdf681f424,73679943,0,0x0,8
tick,0x7ffdf681f424,73681925,0,0x0,8
tick,0x7ffdf681f424,73683924,0,0x0,8
tick,0x7ffdf681f424,73685942,0,0x0,8
tick,0x7ffdf681f424,73688030,0,0x0,8
tick,0x7ffdf681f424,73689946,0,0x0,8
tick,0x7ffdf681f424,73691931,0,0x0,8
tick,0x7ffdf681f424,73693899,0,0x0,8
tick,0x7ffdf681f424,73695895,0,0x0,8
tick,0x7ffdf681f424,73697885,0,0x0,8
tick,0x7ffdf681f424,73699876,0,0x0,8
tick,0x7ffdf681f424,73701880,0,0x0,8
tick,0x7ffdf681f424,73703868,0,0x0,8
tick,0x7ffdf681f424,73705863,0,0x0,8
tick,0x7ffdf681f424,73707858,0,0x0,8
tick,0x7ffdf681f424,73709857,0,0x0,8
tick,0x7ffdf681f424,73711847,0,0x0,8
tick,0x7ffdf681f424,73713841,0,0x0,8
tick,0x7ffdf681f424,73715839,0,0x0,8
tick,0x7ffdf681f424,73717839,0,0x0,8
tick,0x7ffdf681f424,73719823,0,0x0,8
tick,0x7ffdf681f424,73721821,0,0x0,8
tick,0x7ffdf681f424,73723827,0,0x0,8
tick,0x7ffdf681f424,73725843,0,0x0,8
tick,0x7ffdf681f424,73727805,0,0x0,8
tick,0x7ffdf681f424,73741120,0,0x0,8
tick,0x7ffdf681f424,73742781,0,0x0,8
tick,0x7ffdf681f424,73744790,0,0x0,8
tick,0x7ffdf681f424,73747408,0,0x0,8
tick,0x7ffdf681f424,73748746,0,0x0,8
tick,0x7ffdf681f424,73751126,0,0x0,8
tick,0x7ffdf681f424,73752753,0,0x0,8
tick,0x7ffdf681f424,73754730,0,0x0,8
tick,0x7ffdf681f424,73756723,0,0x0,8
tick,0x7ffdf681f424,73758748,0,0x0,8
tick,0x7ffdf681f424,73760720,0,0x0,8
tick,0x7ffdf681f424,73762722,0,0x0,8
tick,0x7ffdf681f424,73764702,0,0x0,8
tick,0x7ffdf681f424,73766709,0,0x0,8
tick,0x7ffdf681f424,73768698,0,0x0,8
tick,0x7ffdf681f424,73770687,0,0x0,8
tick,0x7ffdf681f424,73772679,0,0x0,8
tick,0x7ffdf681f424,73774675,0,0x0,8
tick,0x7ffdf681f424,73776681,0,0x0,8
tick,0x7ffdf681f424,73778666,0,0x0,8
tick,0x7ffdf681f424,73780662,0,0x0,8
tick,0x7ffdf681f424,73782651,0,0x0,8
tick,0x7ffdf681f424,73785891,0,0x0,8
tick,0x7ffdf681f424,73786747,0,0x0,8
tick,0x7ffdf681f424,73796105,0,0x0,8
tick,0x7ffdf681f424,73799098,0,0x0,8
tick,0x7ffdf681f424,73800616,0,0x0,8
tick,0x7ffdf681f424,73802610,0,0x0,8
tick,0x7ffdf681f424,73804621,0,0x0,8
tick,0x7ffdf681f424,73819452,0,0x0,8
tick,0x7ffdf681f424,73820562,0,0x0,8
tick,0x7ffdf681f424,73822555,0,0x0,8
tick,0x7ffdf681f424,73824637,0,0x0,8
tick,0x7ffdf681f424,73826550,0,0x0,8
tick,0x7ffdf681f424,73828607,0,0x0,8
tick,0x7ffdf681f424,73830530,0,0x0,8
tick,0x7ffdf681f424,73832520,0,0x0,8
tick,0x7ffdf681f424,73834532,0,0x0,8
tick,0x7ffdf681f424,73836511,0,0x0,8
tick,0x7ffdf681f424,73838500,0,0x0,8
tick,0x7ffdf681f424,73840496,0,0x0,8
tick,0x7ffdf681f424,73842499,0,0x0,8
tick,0x7ffdf681f424,73844486,0,0x0,8
tick,0x7ffdf681f424,73846481,0,0x0,8
tick,0x7ffdf681f424,73848474,0,0x0,8
tick,0x7ffdf681f424,73850525,0,0x0,8
tick,0x7ffdf681f424,73852477,0,0x0,8
tick,0x7ffdf681f424,73854459,0,0x0,8
tick,0x7ffdf681f424,73856455,0,0x0,8
tick,0x7ffdf681f424,73858513,0,0x0,8
tick,0x7ffdf681f424,73860455,0,0x0,8
tick,0x7ffdf681f424,73867364,0,0x0,8
tick,0x7ffdf681f424,73871582,0,0x0,8
tick,0x7ffdf681f424,73876780,0,0x0,8
tick,0x7ffdf681f424,73878399,0,0x0,8
tick,0x7ffdf681f424,73880395,0,0x0,8
tick,0x7ffdf681f424,73882420,0,0x0,8
tick,0x7ffdf681f424,73884459,0,0x0,8
tick,0x7ffdf681f424,73886419,0,0x0,8
tick,0x7ffdf681f424,73888374,0,0x0,8
tick,0x7ffdf681f424,73890369,0,0x0,8
tick,0x7ffdf681f424,73892448,0,0x0,8
tick,0x7ffdf681f424,73894380,0,0x0,8
tick,0x7ffdf681f424,73896356,0,0x0,8
tick,0x7ffdf681f424,73898348,0,0x0,8
tick,0x7ffdf681f424,73900534,0,0x0,8
tick,0x7ffdf681f424,73902366,0,0x0,8
tick,0x7ffdf681f424,73904331,0,0x0,8
tick,0x7ffdf681f424,73907939,0,0x0,8
tick,0x7ffdf681f424,73909367,0,0x0,8
tick,0x7ffdf681f424,73914348,0,0x0,8
tick,0x7ffdf681f424,73917568,0,0x0,8
tick,0x7ffdf681f424,73919551,0,0x0,8
tick,0x7ffdf681f424,73925622,0,0x0,8
tick,0x7ffdf681f424,73927284,0,0x0,8
tick,0x7ffdf681f424,73929266,0,0x0,8
tick,0x7ffdf681f424,73931259,0,0x0,8
tick,0x7ffdf681f424,73934308,0,0x0,8
tick,0x7ffdf681f424,73936305,0,0x0,8
tick,0x7ffdf681f424,73938259,0,0x0,8
tick,0x7ffdf681f424,73947503,0,0x0,8
tick,0x7ffdf681f424,73949261,0,0x0,8
tick,0x7ffdf681f424,73951211,0,0x0,8
tick,0x7ffdf681f424,73953201,0,0x0,8
tick,0x7ffdf681f424,73955242,0,0x0,8
tick,0x7ffdf681f424,73957206,0,0x0,8
tick,0x7ffdf681f424,73959191,0,0x0,8
tick,0x7ffdf681f424,73961179,0,0x0,8
tick,0x7ffdf681f424,73963176,0,0x0,8
tick,0x7ffdf681f424,73965174,0,0x0,8
tick,0x7ffdf681f424,73967257,0,0x0,8
tick,0x7ffdf681f424,73969162,0,0x0,8
tick,0x7ffdf681f424,73971153,0,0x0,8
tick,0x7ffdf681f424,73973144,0,0x0,8
tick,0x7ffdf681f424,73975158,0,0x0,8
tick,0x7ffdf681f424,73977146,0,0x0,8
tick,0x7ffdf681f424,73979130,0,0x0,8
tick,0x7ffdf681f424,73981125,0,0x0,8
tick,0x7ffdf681f424,73983118,0,0x0,8
tick,0x7ffdf681f424,73985118,0,0x0,8
tick,0x7ffdf681f424,73987107,0,0x0,8
tick,0x7ffdf681f424,73989096,0,0x0,8
tick,0x7ffdf681f424,73991110,0,0x0,8
tick,0x7ffdf681f424,73993107,0,0x0,8
tick,0x7ffdf681f424,73995094,0,0x0,8
tick,0x7ffdf681f424,73997078,0,0x0,8
tick,0x7ffdf681f424,73999072,0,0x0,8
tick,0x7ffdf681f424,74001080,0,0x0,8
tick,0x7ffdf681f424,74003062,0,0x0,8
tick,0x7ffdf681f424,74005054,0,0x0,8
tick,0x7ffdf681f424,74007047,0,0x0,8
tick,0x7ffdf681f424,74009049,0,0x0,8
tick,0x7ffdf681f424,74011038,0,0x0,8
tick,0x7ffdf681f424,74013285,0,0x0,8
tick,0x7ffdf681f424,74015283,0,0x0,8
tick,0x7ffdf681f424,74017075,0,0x0,8
tick,0x7ffdf681f424,74019068,0,0x0,8
tick,0x7ffdf681f424,74021050,0,0x0,8
tick,0x7ffdf681f424,74039878,0,0x0,8
tick,0x7ffdf681f424,74040978,0,0x0,8
tick,0x7ffdf681f424,74043290,0,0x0,8
tick,0x7ffdf681f424,74045012,0,0x0,8
tick,0x7ffdf681f424,74046996,0,0x0,8
tick,0x7ffdf681f424,74048949,0,0x0,8
tick,0x7ffdf681f424,74050949,0,0x0,8
tick,0x7ffdf681f424,74052937,0,0x0,8
tick,0x7ffdf681f424,74054953,0,0x0,8
tick,0x7ffdf681f424,74056923,0,0x0,8
tick,0x7ffdf681f424,74058928,0,0x0,8
tick,0x7ffdf681f424,74060931,0,0x0,8
tick,0x7ffdf681f424,74062906,0,0x0,8
tick,0x7ffdf681f424,74064899,0,0x0,8
tick,0x7ffdf681f424,74066894,0,0x0,8
tick,0x7ffdf681f424,74068887,0,0x0,8
tick,0x7ffdf681f424,74070881,0,0x0,8
tick,0x7ffdf681f424,74072873,0,0x0,8
tick,0x7ffdf681f424,74074870,0,0x0,8
tick,0x7ffdf681f424,74076866,0,0x0,8
tick,0x7ffdf681f424,74078857,0,0x0,8
tick,0x7ffdf681f424,74080855,0,0x0,8
tick,0x7ffdf681f424,74082856,0,0x0,8
tick,0x7ffdf681f424,74084856,0,0x0,8
tick,0x7ffdf681f424,74086877,0,0x0,8
tick,0x7ffdf681f424,74088859,0,0x0,8
tick,0x7ffdf681f424,74090835,0,0x0,8
tick,0x7ffdf681f424,74092838,0,0x0,8
tick,0x7ffdf681f424,74094819,0,0x0,8
tick,0x7ffdf681f424,74096814,0,0x0,8
tick,0x7ffdf681f424,74098807,0,0x0,8
tick,0x7ffdf681f424,74100811,0,0x0,8
tick,0x7ffdf681f424,74102797,0,0x0,8
tick,0x7ffdf681f424,74104794,0,0x0,8
tick,0x7ffdf681f424,74132791,0,0x0,8
tick,0x7ffdf681f424,74132881,0,0x0,8
tick,0x7ffdf681f424,74134723,0,0x0,8
tick,0x7ffdf681f424,74136716,0,0x0,8
tick,0x7ffdf681f424,74138744,0,0x0,8
tick,0x7ffdf681f424,74140726,0,0x0,8
tick,0x7ffdf681f424,74142744,0,0x0,8
tick,0x7ffdf681f424,74144688,0,0x0,8
tick,0x7ffdf681f424,74146678,0,0x0,8
tick,0x7ffdf681f424,74148671,0,0x0,8
tick,0x7ffdf681f424,74150692,0,0x0,8
tick,0x7ffdf681f424,74152669,0,0x0,8
tick,0x7ffdf681f424,74154674,0,0x0,8
tick,0x7ffdf681f424,74156653,0,0x0,8
tick,0x7ffdf681f424,74158708,0,0x0,8
tick,0x7ffdf681f424,74160647,0,0x0,8
tick,0x7ffdf681f424,74162639,0,0x0,8
tick,0x7ffdf681f424,74164631,0,0x0,8
tick,0x7ffdf681f424,74166770,0,0x0,8
tick,0x7ffdf681f424,74168632,0,0x0,8
tick,0x7ffdf681f424,74170623,0,0x0,8
tick,0x7ffdf681f424,74172644,0,0x0,8
tick,0x7ffdf681f424,74174607,0,0x0,8
tick,0x7ffdf681f424,74176630,0,0x0,8
tick,0x7ffdf681f424,74178613,0,0x0,8
tick,0x7ffdf681f424,74180591,0,0x0,8
tick,0x7ffdf681f424,74182583,0,0x0,8
tick,0x7ffdf681f424,74184589,0,0x0,8
tick,0x7ffdf681f424,74186581,0,0x0,8
tick,0x7ffdf681f424,74188569,0,0x0,8
tick,0x7ffdf681f424,74190562,0,0x0,8
tick,0x7ffdf681f424,74192573,0,0x0,8
tick,0x7ffdf681f424,74194658,0,0x0,8
tick,0x7ffdf681f424,74197050,0,0x0,8
tick,0x7ffdf681f424,74198657,0,0x0,8
tick,0x7ffdf681f424,74200629,0,0x0,8
tick,0x7ffdf681f424,74202752,0,0x0,8
tick,0x7ffdf681f424,74204543,0,0x0,8
tick,0x7ffdf681f424,74206551,0,0x0,8
tick,0x7ffdf681f424,74208612,0,0x0,8
tick,0x7ffdf681f424,74210517,0,0x0,8
tick,0x7ffdf681f424,74212541,0,0x0,8
tick,0x7ffdf681f424,74214504,0,0x0,8
tick,0x7ffdf681f424,74216497,0,0x0,8
tick,0x7ffdf681f424,74218497,0,0x0,8
tick,0x7ffdf681f424,74229064,0,0x0,8
tick,0x7ffdf681f424,74234952,0,0x0,8
tick,0x7ffdf681f424,74236452,0,0x0,8
tick,0x7ffdf681f424,74238529,0,0x0,8
tick,0x7ffdf681f424,74240470,0,0x0,8
tick,0x7ffdf681f424,74242450,0,0x0,8
tick,0x7ffdf681f424,74244428,0,0x0,8
tick,0x7ffdf681f424,74246415,0,0x0,8
tick,0x7ffdf681f424,74248424,0,0x0,8
tick,0x7ffdf681f424,74250418,0,0x0,8
tick,0x7ffdf681f424,74252411,0,0x0,8
tick,0x7ffdf681f424,74254396,0,0x0,8
tick,0x7ffdf681f424,74256394,0,0x0,8
tick,0x7ffdf681f424,74258430,0,0x0,8
tick,0x7ffdf681f424,74260394,0,0x0,8
tick,0x7ffdf681f424,74262374,0,0x0,8
tick,0x7ffdf681f424,74264364,0,0x0,8
tick,0x7ffdf681f424,74266357,0,0x0,8
tick,0x7ffdf681f424,74268362,0,0x0,8
tick,0x7ffdf681f424,74270363,0,0x0,8
tick,0x7ffdf681f424,74272352,0,0x0,8
tick,0x7ffdf681f424,74274340,0,0x0,8
tick,0x7ffdf681f424,74276337,0,0x0,8
tick,0x7ffdf681f424,74278329,0,0x0,8
tick,0x7ffdf681f424,74280327,0,0x0,8
tick,0x7ffdf681f424,74282319,0,0x0,8
tick,0x7ffdf681f424,74284321,0,0x0,8
tick,0x7ffdf681f424,74286311,0,0x0,8
tick,0x7ffdf681f424,74288309,0,0x0,8
tick,0x7ffdf681f424,74290299,0,0x0,8
tick,0x7ffdf681f424,74292298,0,0x0,8
tick,0x7ffdf681f424,74294286,0,0x0,8
tick,0x7ffdf681f424,74296281,0,0x0,8
tick,0x7ffdf681f424,74299102,0,0x0,8
tick,0x7ffdf681f424,74311288,0,0x0,8
tick,0x7ffdf681f424,74313242,0,0x0,8
tick,0x7ffdf681f424,74315266,0,0x0,8
tick,0x7ffdf681f424,74317270,0,0x0,8
tick,0x7ffdf681f424,74319460,0,0x0,8
tick,0x7ffdf681f424,74321255,0,0x0,8
tick,0x7ffdf681f424,74323446,0,0x0,8
tick,0x7ffdf681f424,74325947,0,0x0,8
tick,0x7ffdf681f424,74327450,0,0x0,8
tick,0x7ffdf681f424,74329202,0,0x0,8
tick,0x7ffdf681f424,74331205,0,0x0,8
tick,0x7ffdf681f424,74340790,0,0x0,8
tick,0x7ffdf681f424,74342273,0,0x0,8
tick,0x7ffdf681f424,74344159,0,0x0,8
tick,0x7ffdf681f424,74346253,0,0x0,8
tick,0x7ffdf681f424,74348223,0,0x0,8
tick,0x7ffdf681f424,74350157,0,0x0,8
tick,0x7ffdf681f424,74352182,0,0x0,8
tick,0x7ffdf681f424,74354138,0,0x0,8
tick,0x7ffdf681f424,74356124,0,0x0,8
tick,0x7ffdf681f424,74358123,0,0x0,8
tick,0x7ffdf681f424,74360128,0,0x0,8
tick,0x7ffdf681f424,74362110,0,0x0,8
tick,0x7ffdf681f424,74364100,0,0x0,8
tick,0x7ffdf681f424,74366092,0,0x0,8
tick,0x7ffdf681f424,74368101,0,0x0,8
tick,0x7ffdf681f424,74370097,0,0x0,8
tick,0x7ffdf681f424,74372078,0,0x0,8
tick,0x7ffdf681f424,74374082,0,0x0,8
tick,0x7ffdf681f424,74376109,0,0x0,8
tick,0x7ffdf681f424,74378103,0,0x0,8
tick,0x7ffdf681f424,74380094,0,0x0,8
tick,0x7ffdf681f424,74382067,0,0x0,8
tick,0x7ffdf681f424,74384062,0,0x0,8
tick,0x7ffdf681f424,74386047,0,0x0,8
tick,0x7ffdf681f424,74388045,0,0x0,8
tick,0x7ffdf681f424,74390032,0,0x0,8
tick,0x7ffdf681f424,74392023,0,0x0,8
tick,0x7ffdf681f424,74394018,0,0x0,8
tick,0x7ffdf681f424,74396659,0,0x0,8
tick,0x7ffdf681f424,74398032,0,0x0,8
tick,0x7ffdf681f424,74400013,0,0x0,8
tick,0x7ffdf681f424,74402603,0,0x0,8
tick,0x7ffdf681f424,74404015,0,0x0,8
tick,0x7ffdf681f424,74405997,0,0x0,8
tick,0x7ffdf681f424,74407989,0,0x0,8
tick,0x7ffdf681f424,74409985,0,0x0,8
tick,0x7ffdf681f424,74411979,0,0x0,8
tick,0x7ffdf681f424,74413975,0,0x0,8
tick,0x7ffdf681f424,74415967,0,0x0,8
tick,0x7ffdf681f424,74417964,0,0x0,8
tick,0x7ffdf681f424,74419964,0,0x0,8
tick,0x7ffdf681f424,74422057,0,0x0,8
tick,0x7ffdf681f424,74423942,0,0x0,8
tick,0x7ffdf681f424,74439119,0,0x0,8
tick,0x7ffdf681f424,74440904,0,0x0,8
tick,0x7ffdf681f424,74442905,0,0x0,8
tick,0x7ffdf681f424,74445220,0,0x0,8
tick,0x7ffdf681f424,74446916,0,0x0,8
tick,0x7ffdf681f424,74448981,0,0x0,8
tick,0x7ffdf681f424,74450929,0,0x0,8
tick,0x7ffdf681f424,74452873,0,0x0,8
tick,0x7ffdf681f424,74454862,0,0x0,8
tick,0x7ffdf681f424,74456860,0,0x0,8
tick,0x7ffdf681f424,74458979,0,0x0,8
tick,0x7ffdf681f424,74460851,0,0x0,8
tick,0x7ffdf681f424,74462841,0,0x0,8
tick,0x7ffdf681f424,74464834,0,0x0,8
tick,0x7ffdf681f424,74466885,0,0x0,8
tick,0x7ffdf681f424,74468827,0,0x0,8
tick,0x7ffdf681f424,74470818,0,0x0,8
tick,0x7ffdf681f424,74472817,0,0x0,8
tick,0x7ffdf681f424,74474804,0,0x0,8
tick,0x7ffdf681f424,74476805,0,0x0,8
tick,0x7ffdf681f424,74478793,0,0x0,8
tick,0x7ffdf681f424,74480827,0,0x0,8
tick,0x7ffdf681f424,74483111,0,0x0,8
tick,0x7ffdf681f424,74485646,0,0x0,8
tick,0x7ffdf681f424,74494089,0,0x0,8
tick,0x7ffdf681f424,74495751,0,0x0,8
tick,0x7ffdf681f424,74497748,0,0x0,8
tick,0x7ffdf681f424,74499960,0,0x0,8
tick,0x7ffdf681f424,74501764,0,0x0,8
tick,0x7ffdf681f424,74503743,0,0x0,8
tick,0x7ffdf681f424,74514334,0,0x0,8
tick,0x7ffdf681f424,74514485,0,0x0,8
tick,0x7ffdf681f424,74515719,0,0x0,8
tick,0x7ffdf681f424,74517975,0,0x0,8
tick,0x7ffdf681f424,74519879,0,0x0,8
tick,0x7ffdf681f424,74523923,0,0x0,8
tick,0x7ffdf681f424,74525711,0,0x0,8
tick,0x7ffdf681f424,74527698,0,0x0,8
tick,0x7ffdf681f424,74529686,0,0x0,8
tick,0x7ffdf681f424,74531669,0,0x0,8
tick,0x7ffdf681f424,74533715,0,0x0,8
tick,0x7ffdf681f424,74535652,0,0x0,8
tick,0x7ffdf681f424,74537640,0,0x0,8
tick,0x7ffdf681f424,74539632,0,0x0,8
tick,0x7ffdf681f424,74541626,0,0x0,8
tick,0x7ffdf681f424,74543627,0,0x0,8
tick,0x7ffdf681f424,74545628,0,0x0,8
tick,0x7ffdf681f424,74547616,0,0x0,8
tick,0x7ffdf681f424,74549604,0,0x0,8
tick,0x7ffdf681f424,74551606,0,0x0,8
tick,0x7ffdf681f424,74553590,0,0x0,8
tick,0x7ffdf681f424,74555587,0,0x0,8
tick,0x7ffdf681f424,74557587,0,0x0,8
tick,0x7ffdf681f424,74559585,0,0x0,8
tick,0x7ffdf681f424,74561579,0,0x0,8
tick,0x7ffdf681f424,74563568,0,0x0,8
tick,0x7ffdf681f424,74565576,0,0x0,8
tick,0x7ffdf681f424,74567569,0,0x0,8
tick,0x7ffdf681f424,74569554,0,0x0,8
tick,0x7ffdf681f424,74571545,0,0x0,8
tick,0x7ffdf681f424,74573540,0,0x0,8
tick,0x7ffdf681f424,74575713,0,0x0,8
tick,0x7ffdf681f424,74577742,0,0x0,8
tick,0x7ffdf681f424,74579537,0,0x0,8
tick,0x7ffdf681f424,74590373,0,0x0,8
tick,0x7ffdf681f424,74591499,0,0x0,8
tick,0x7ffdf681f424,74593575,0,0x0,8
tick,0x7ffdf681f424,74595557,0,0x0,8
tick,0x7ffdf681f424,74597510,0,0x0,8
tick,0x7ffdf681f424,74599487,0,0x0,8
tick,0x7ffdf681f424,74601486,0,0x0,8
tick,0x7ffdf681f424,74603464,0,0x0,8
tick,0x7ffdf681f424,74605464,0,0x0,8
tick,0x7ffdf681f424,74607451,0,0x0,8
tick,0x7ffdf681f424,74609502,0,0x0,8
tick,0x7ffdf681f424,74611445,0,0x0,8
tick,0x7ffdf681f424,74613438,0,0x0,8
tick,0x7ffdf681f424,74615429,0,0x0,8
tick,0x7ffdf681f424,74617696,0,0x0,8
tick,0x7ffdf681f424,74629345,0,0x0,8
tick,0x7ffdf681f424,74631189,0,0x0,8
tick,0x7ffdf681f424,74632391,0,0x0,8
tick,0x7ffdf681f424,74634393,0,0x0,8
tick,0x7ffdf681f424,74636475,0,0x0,8
tick,0x7ffdf681f424,74638395,0,0x0,8
tick,0x7ffdf681f424,74640379,0,0x0,8
tick,0x7ffdf681f424,74642632,0,0x0,8
tick,0x7ffdf681f424,74644372,0,0x0,8
tick,0x7ffdf681f424,74646345,0,0x0,8
tick,0x7ffdf681f424,74648342,0,0x0,8
tick,0x7ffdf681f424,74650407,0,0x0,8
tick,0x7ffdf681f424,74652339,0,0x0,8
tick,0x7ffdf681f424,74654339,0,0x0,8
tick,0x7ffdf681f424,74656321,0,0x0,8
tick,0x7ffdf681f424,74658319,0,0x0,8
tick,0x7ffdf681f424,74660319,0,0x0,8
tick,0x7ffdf681f424,74662310,0,0x0,8
tick,0x7ffdf681f424,74664300,0,0x0,8
tick,0x7ffdf681f424,74666298,0,0x0,8
tick,0x7ffdf681f424,74670266,0,0x0,8
tick,0x7ffdf681f424,74682292,0,0x0,8
tick,0x7ffdf681f424,74682335,0,0x0,8
tick,0x7ffdf681f424,74684253,0,0x0,8
tick,0x7ffdf681f424,74686328,0,0x0,8
tick,0x7ffdf681f424,74688540,0,0x0,8
tick,0x7ffdf681f424,74690404,0,0x0,8
tick,0x7ffdf681f424,74692334,0,0x0,8
tick,0x7ffdf681f424,74694260,0,0x0,8
tick,0x7ffdf681f424,74696214,0,0x0,8
tick,0x7ffdf681f424,74698207,0,0x0,8
tick,0x7ffdf681f424,74700219,0,0x0,8
tick,0x7ffdf681f424,74702222,0,0x0,8
tick,0x7ffdf681f424,74704194,0,0x0,8
tick,0x7ffdf681f424,74706187,0,0x0,8
tick,0x7ffdf681f424,74708186,0,0x0,8
tick,0x7ffdf681f424,74710202,0,0x0,8
tick,0x7ffdf681f424,74712171,0,0x0,8
tick,0x7ffdf681f424,74714162,0,0x0,8
tick,0x7ffdf681f424,74716161,0,0x0,8
tick,0x7ffdf681f424,74718159,0,0x0,8
tick,0x7ffdf681f424,74720151,0,0x0,8
tick,0x7ffdf681f424,74722151,0,0x0,8
tick,0x7ffdf681f424,74737612,0,0x0,8
tick,0x7ffdf681f424,74739106,0,0x0,8
tick,0x7ffdf681f424,74741098,0,0x0,8
tick,0x7ffdf681f424,74743170,0,0x0,8
tick,0x7ffdf681f424,74745279,0,0x0,8
tick,0x7ffdf681f424,74747131,0,0x0,8
tick,0x7ffdf681f424,74749107,0,0x0,8
tick,0x7ffdf681f424,74751116,0,0x0,8
tick,0x7ffdf681f424,74753108,0,0x0,8
tick,0x7ffdf681f424,74755064,0,0x0,8
tick,0x7ffdf681f424,74757087,0,0x0,8
tick,0x7ffdf681f424,74759146,0,0x0,8
tick,0x7ffdf681f424,74762883,0,0x0,8
tick,0x7ffdf681f424,74764633,0,0x0,8
tick,0x7ffdf681f424,74766037,0,0x0,8
tick,0x7ffdf681f424,74774791,0,0x0,8
tick,0x7ffdf681f424,74776024,0,0x0,8
tick,0x7ffdf681f424,74777998,0,0x0,8
tick,0x7ffdf681f424,74780310,0,0x0,8
tick,0x7ffdf681f424,74782042,0,0x0,8
tick,0x7ffdf681f424,74784520,0,0x0,8
tick,0x7ffdf681f424,74785978,0,0x0,8
tick,0x7ffdf681f424,74787973,0,0x0,8
tick,0x7ffdf681f424,74789964,0,0x0,8
tick,0x7ffdf681f424,74792013,0,0x0,8
tick,0x7ffdf681f424,74794022,0,0x0,8
tick,0x7ffdf681f424,74795957,0,0x0,8
tick,0x7ffdf681f424,74797951,0,0x0,8
tick,0x7ffdf681f424,74799940,0,0x0,8
tick,0x7ffdf681f424,74801975,0,0x0,8
tick,0x7ffdf681f424,74803933,0,0x0,8
tick,0x7ffdf681f424,74805922,0,0x0,8
tick,0x7ffdf681f424,74807918,0,0x0,8
tick,0x7ffdf681f424,74809941,0,0x0,8
tick,0x7ffdf681f424,74811908,0,0x0,8
tick,0x7ffdf681f424,74813901,0,0x0,8
tick,0x7ffdf681f424,74815895,0,0x0,8
tick,0x7ffdf681f424,74817920,0,0x0,8
tick,0x7ffdf681f424,74819889,0,0x0,8
tick,0x7ffdf681f424,74821880,0,0x0,8
tick,0x7ffdf681f424,74823871,0,0x0,8
tick,0x7ffdf681f424,74825905,0,0x0,8
tick,0x7ffdf681f424,74827868,0,0x0,8
tick,0x7ffdf681f424,74829857,0,0x0,8
tick,0x7ffdf681f424,74831853,0,0x0,8
tick,0x7ffdf681f424,74833865,0,0x0,8
tick,0x7ffdf681f424,74835851,0,0x0,8
tick,0x7ffdf681f424,74838126,0,0x0,8
tick,0x7ffdf681f424,74842606,0,0x0,8
tick,0x7ffdf681f424,74853204,0,0x0,8
tick,0x7ffdf681f424,74854808,0,0x0,8
tick,0x7ffdf681f424,74856790,0,0x0,8
tick,0x7ffdf681f424,74859315,0,0x0,8
tick,0x7ffdf681f424,74860815,0,0x0,8
tick,0x7ffdf681f424,74862778,0,0x0,8
tick,0x7ffdf681f424,74864780,0,0x0,8
tick,0x7ffdf681f424,74866771,0,0x0,8
tick,0x7ffdf681f424,74868760,0,0x0,8
tick,0x7ffdf681f424,74870745,0,0x0,8
tick,0x7ffdf681f424,74872738,0,0x0,8
tick,0x7ffdf681f424,74874738,0,0x0,8
tick,0x7ffdf681f424,74876744,0,0x0,8
tick,0x7ffdf681f424,74878729,0,0x0,8
tick,0x7ffdf681f424,74887091,0,0x0,8
tick,0x7ffdf681f424,74892599,0,0x0,8
tick,0x7ffdf681f424,74893704,0,0x0,8
tick,0x7ffdf681f424,74895687,0,0x0,8
tick,0x7ffdf681f424,74897704,0,0x0,8
tick,0x7ffdf681f424,74899752,0,0x0,8
tick,0x7ffdf681f424,74901708,0,0x0,8
tick,0x7ffdf681f424,74903706,0,0x0,8
tick,0x7ffdf681f424,74905655,0,0x0,8
tick,0x7ffdf681f424,74907643,0,0x0,8
tick,0x7ffdf681f424,74909660,0,0x0,8
tick,0x7ffdf681f424,74911639,0,0x0,8
tick,0x7ffdf681f424,74913638,0,0x0,8
tick,0x7ffdf681f424,74915631,0,0x0,8
tick,0x7ffdf681f424,74917634,0,0x0,8
tick,0x7ffdf681f424,74919633,0,0x0,8
tick,0x7ffdf681f424,74921617,0,0x0,8
tick,0x7ffdf681f424,74923605,0,0x0,8
tick,0x7ffdf681f424,74925851,0,0x0,8
tick,0x7ffdf681f424,74927629,0,0x0,8
tick,0x7ffdf681f424,74929589,0,0x0,8
tick,0x7ffdf681f424,74931583,0,0x0,8
tick,0x7ffdf681f424,74933676,0,0x0,8
tick,0x7ffdf681f424,74935604,0,0x0,8
tick,0x7ffdf681f424,74937568,0,0x0,8
tick,0x7ffdf681f424,74939562,0,0x0,8
tick,0x7ffdf681f424,74941555,0,0x0,8
tick,0x7ffdf681f424,74943565,0,0x0,8
tick,0x7ffdf681f424,74945556,0,0x0,8
tick,0x7ffdf681f424,74958830,0,0x0,8
tick,0x7ffdf681f424,74960518,0,0x0,8
tick,0x7ffdf681f424,74962504,0,0x0,8
tick,0x7ffdf681f424,74964514,0,0x0,8
tick,0x7ffdf681f424,74970372,0,0x0,8
tick,0x7ffdf681f424,74976278,0,0x0,8
tick,0x7ffdf681f424,74977873,0,0x0,8
tick,0x7ffdf681f424,74983146,0,0x0,8
tick,0x7ffdf681f424,74984453,0,0x0,8
tick,0x7ffdf681f424,74986443,0,0x0,8
tick,0x7ffdf681f424,74988575,0,0x0,8
tick,0x7ffdf681f424,74990438,0,0x0,8
tick,0x7ffdf681f424,74992669,0,0x0,8
tick,0x7ffdf681f424,74994474,0,0x0,8
tick,0x7ffdf681f424,74996413,0,0x0,8
tick,0x7ffdf681f424,74998402,0,0x0,8
tick,0x7ffdf681f424,75000541,0,0x0,8
tick,0x7ffdf681f424,75002403,0,0x0,8
tick,0x7ffdf681f424,75004392,0,0x0,8
tick,0x7ffdf681f424,75006380,0,0x0,8
tick,0x7ffdf681f424,75008414,0,0x0,8
tick,0x7ffdf681f424,75010382,0,0x0,8
tick,0x7ffdf681f424,75012365,0,0x0,8
tick,0x7ffdf681f424,75014360,0,0x0,8
tick,0x7ffdf681f424,75016359,0,0x0,8
tick,0x7ffdf681f424,75018364,0,0x0,8
tick,0x7ffdf681f424,75020358,0,0x0,8
tick,0x7ffdf681f424,75022340,0,0x0,8
tick,0x7ffdf681f424,75024337,0,0x0,8
tick,0x7ffdf681f424,75026403,0,0x0,8
tick,0x7ffdf681f424,75028325,0,0x0,8
tick,0x7ffdf681f424,75030321,0,0x0,8
tick,0x7ffdf681f424,75032315,0,0x0,8
tick,0x7ffdf681f424,75035105,0,0x0,8
tick,0x7ffdf681f424,75043646,0,0x0,8
tick,0x7ffdf681f424,75047418,0,0x0,8
tick,0x7ffdf681f424,75049271,0,0x0,8
tick,0x7ffdf681f424,75051582,0,0x0,8
tick,0x7ffdf681f424,75053326,0,0x0,8
tick,0x7ffdf681f424,75055346,0,0x0,8
tick,0x7ffdf681f424,75057250,0,0x0,8
tick,0x7ffdf681f424,75059258,0,0x0,8
tick,0x7ffdf681f424,75061253,0,0x0,8
tick,0x7ffdf681f424,75063230,0,0x0,8
tick,0x7ffdf681f424,75065228,0,0x0,8
tick,0x7ffdf681f424,75067265,0,0x0,8
tick,0x7ffdf681f424,75071108,0,0x0,8
tick,0x7ffdf681f424,75073165,0,0x0,8
tick,0x7ffdf681f424,75084271,0,0x0,8
tick,0x7ffdf681f424,75086178,0,0x0,8
tick,0x7ffdf681f424,75088171,0,0x0,8
tick,0x7ffdf681f424,75090168,0,0x0,8
tick,0x7ffdf681f424,75092696,0,0x0,8
tick,0x7ffdf681f424,75094190,0,0x0,8
tick,0x7ffdf681f424,75096145,0,0x0,8
tick,0x7ffdf681f424,75098133,0,0x0,8
tick,0x7ffdf681f424,75100392,0,0x0,8
tick,0x7ffdf681f424,75102149,0,0x0,8
tick,0x7ffdf681f424,75104118,0,0x0,8
tick,0x7ffdf681f424,75106131,0,0x0,8
tick,0x7ffdf681f424,75108120,0,0x0,8
tick,0x7ffdf681f424,75110131,0,0x0,8
tick,0x7ffdf681f424,75112122,0,0x0,8
tick,0x7ffdf681f424,75114095,0,0x0,8
tick,0x7ffdf681f424,75116677,0,0x0,8
tick,0x7ffdf681f424,75129522,0,0x0,8
tick,0x7ffdf681f424,75131057,0,0x0,8
tick,0x7ffdf681f424,75133142,0,0x0,8
tick,0x7ffdf681f424,75135239,0,0x0,8
tick,0x7ffdf681f424,75137061,0,0x0,8
tick,0x7ffdf681f424,75139097,0,0x0,8
tick,0x7ffdf681f424,75141025,0,0x0,8
tick,0x7ffdf681f424,75143067,0,0x0,8
tick,0x7ffdf681f424,75145020,0,0x0,8
tick,0x7ffdf681f424,75147007,0,0x0,8
tick,0x7ffdf681f424,75148999,0,0x0,8
tick,0x7ffdf681f424,75151041,0,0x0,8
tick,0x7ffdf681f424,75152999,0,0x0,8
tick,0x7ffdf681f424,75154983,0,0x0,8
tick,0x7ffdf681f424,75156976,0,0x0,8
tick,0x7ffdf681f424,75159067,0,0x0,8
tick,0x7ffdf681f424,75160977,0,0x0,8
tick,0x7ffdf681f424,75162965,0,0x0,8
tick,0x7ffdf681f424,75164978,0,0x0,8
tick,0x7ffdf681f424,75173977,0,0x0,8
tick,0x7ffdf681f424,75183114,0,0x0,8
tick,0x7ffdf681f424,75185090,0,0x0,8
tick,0x7ffdf681f424,75186925,0,0x0,8
tick,0x7ffdf681f424,75189068,0,0x0,8
tick,0x7ffdf681f424,75190906,0,0x0,8
tick,0x7ffdf681f424,75193025,0,0x0,8
tick,0x7ffdf681f424,75197001,0,0x0,8
tick,0x7ffdf681f424,75209693,0,0x0,8
tick,0x7ffdf681f424,75210858,0,0x0,8
tick,0x7ffdf681f424,75213070,0,0x0,8
tick,0x7ffdf681f424,75215018,0,0x0,8
tick,0x7ffdf681f424,75217008,0,0x0,8
tick,0x7ffdf681f424,75218866,0,0x0,8
tick,0x7ffdf681f424,75220918,0,0x0,8
tick,0x7ffdf681f424,75222876,0,0x0,8
tick,0x7ffdf681f424,75224834,0,0x0,8
tick,0x7ffdf681f424,75226887,0,0x0,8
tick,0x7ffdf681f424,75228798,0,0x0,8
tick,0x7ffdf681f424,75230792,0,0x0,8
tick,0x7ffdf681f424,75232786,0,0x0,8
tick,0x7ffdf681f424,75234786,0,0x0,8
tick,0x7ffdf681f424,75236777,0,0x0,8
tick,0x7ffdf681f424,75238773,0,0x0,8
tick,0x7ffdf681f424,75240757,0,0x0,8
tick,0x7ffdf681f424,75242840,0,0x0,8
tick,0x7ffdf681f424,75244754,0,0x0,8
tick,0x7ffdf681f424,75246743,0,0x0,8
tick,0x7ffdf681f424,75248730,0,0x0,8
tick,0x7ffdf681f424,75250747,0,0x0,8
tick,0x7ffdf681f424,75252730,0,0x0,8
tick,0x7ffdf681f424,75254717,0,0x0,8
tick,0x7ffdf681f424,75256717,0,0x0,8
tick,0x7ffdf681f424,75258787,0,0x0,8
tick,0x7ffdf681f424,75260715,0,0x0,8
tick,0x7ffdf681f424,75262696,0,0x0,8
tick,0x7ffdf681f424,75264689,0,0x0,8
tick,0x7ffdf681f424,75266685,0,0x0,8
tick,0x7ffdf681f424,75270264,0,0x0,8
tick,0x7ffdf681f424,75282307,0,0x0,8
tick,0x7ffdf681f424,75283691,0,0x0,8
tick,0x7ffdf681f424,75285648,0,0x0,8
tick,0x7ffdf681f424,75287675,0,0x0,8
tick,0x7ffdf681f424,75289675,0,0x0,8
tick,0x7ffdf681f424,75291627,0,0x0,8
tick,0x7ffdf681f424,75293675,0,0x0,8
tick,0x7ffdf681f424,75295616,0,0x0,8
tick,0x7ffdf681f424,75297605,0,0x0,8
tick,0x7ffdf681f424,75299602,0,0x0,8
tick,0x7ffdf681f424,75301607,0,0x0,8
tick,0x7ffdf681f424,75303625,0,0x0,8
tick,0x7ffdf681f424,75319941,0,0x0,8
tick,0x7ffdf681f424,75323212,0,0x0,8
tick,0x7ffdf681f424,75324588,0,0x0,8
tick,0x7ffdf681f424,75326687,0,0x0,8
tick,0x7ffdf681f424,75328545,0,0x0,8
tick,0x7ffdf681f424,75330536,0,0x0,8
tick,0x7ffdf681f424,75332526,0,0x0,8
tick,0x7ffdf681f424,75334523,0,0x0,8
tick,0x7ffdf681f424,75336516,0,0x0,8
tick,0x7ffdf681f424,75338516,0,0x0,8
tick,0x7ffdf681f424,75340665,0,0x0,8
tick,0x7ffdf681f424,75343101,0,0x0,8
tick,0x7ffdf681f424,75344506,0,0x0,8
tick,0x7ffdf681f424,75346646,0,0x0,8
tick,0x7ffdf681f424,75348914,0,0x0,8
tick,0x7ffdf681f424,75350604,0,0x0,8
tick,0x7ffdf681f424,75352607,0,0x0,8
tick,0x7ffdf681f424,75354730,0,0x0,8
tick,0x7ffdf681f424,75356468,0,0x0,8
tick,0x7ffdf681f424,75359129,0,0x0,8
tick,0x7ffdf681f424,75360482,0,0x0,8
tick,0x7ffdf681f424,75362461,0,0x0,8
tick,0x7ffdf681f424,75364447,0,0x0,8
tick,0x7ffdf681f424,75366426,0,0x0,8
tick,0x7ffdf681f424,75368613,0,0x0,8
tick,0x7ffdf681f424,75370440,0,0x0,8
tick,0x7ffdf681f424,75372617,0,0x0,8
tick,0x7ffdf681f424,75374482,0,0x0,8
tick,0x7ffdf681f424,75376726,0,0x0,8
tick,0x7ffdf681f424,75378441,0,0x0,8
tick,0x7ffdf681f424,75380434,0,0x0,8
tick,0x7ffdf681f424,75382393,0,0x0,8
tick,0x7ffdf681f424,75384764,0,0x0,8
tick,0x7ffdf681f424,75386381,0,0x0,8
tick,0x7ffdf681f424,75388389,0,0x0,8
tick,0x7ffdf681f424,75390390,0,0x0,8
tick,0x7ffdf681f424,75392931,0,0x0,8
tick,0x7ffdf681f424,75394409,0,0x0,8
tick,0x7ffdf681f424,75396432,0,0x0,8
tick,0x7ffdf681f424,75398461,0,0x0,8
tick,0x7ffdf681f424,75402290,0,0x0,8
tick,0x7ffdf681f424,75409663,0,0x0,8
tick,0x7ffdf681f424,75415407,0,0x0,8
tick,0x7ffdf681f424,75417549,0,0x0,8
tick,0x7ffdf681f424,75419313,0,0x0,8
tick,0x7ffdf681f424,75421322,0,0x0,8
tick,0x7ffdf681f424,75423579,0,0x0,8
tick,0x7ffdf681f424,75427081,0,0x0,8
tick,0x7ffdf681f424,75428377,0,0x0,8
tick,0x7ffdf681f424,75430325,0,0x0,8
tick,0x7ffdf681f424,75432259,0,0x0,8
tick,0x7ffdf681f424,75434288,0,0x0,8
tick,0x7ffdf681f424,75436246,0,0x0,8
tick,0x7ffdf681f424,75438272,0,0x0,8
tick,0x7ffdf681f424,75440426,0,0x0,8
tick,0x7ffdf681f424,75445773,0,0x0,8
tick,0x7ffdf681f424,75447493,0,0x0,8
tick,0x7ffdf681f424,75449230,0,0x0,8
tick,0x7ffdf681f424,75451444,0,0x0,8
tick,0x7ffdf681f424,75453244,0,0x0,8
tick,0x7ffdf681f424,75455190,0,0x0,8
tick,0x7ffdf681f424,75457198,0,0x0,8
tick,0x7ffdf681f424,75459597,0,0x0,8
tick,0x7ffdf681f424,75461193,0,0x0,8
tick,0x7ffdf681f424,75463174,0,0x0,8
tick,0x7ffdf681f424,75465182,0,0x0,8
tick,0x7ffdf681f424,75481731,0,0x0,8
tick,0x7ffdf681f424,75481899,0,0x0,8
tick,0x7ffdf681f424,75483345,0,0x0,8
tick,0x7ffdf681f424,75485129,0,0x0,8
tick,0x7ffdf681f424,75487139,0,0x0,8
tick,0x7ffdf681f424,75489187,0,0x0,8
tick,0x7ffdf681f424,75491125,0,0x0,8
tick,0x7ffdf681f424,75493729,0,0x0,8
tick,0x7ffdf681f424,75495296,0,0x0,8
tick,0x7ffdf681f424,75497258,0,0x0,8
tick,0x7ffdf681f424,75499111,0,0x0,8
tick,0x7ffdf681f424,75501702,0,0x0,8
tick,0x7ffdf681f424,75503073,0,0x0,8
tick,0x7ffdf681f424,75505079,0,0x0,8
tick,0x7ffdf681f424,75507058,0,0x0,8
tick,0x7ffdf681f424,75509206,0,0x0,8
tick,0x7ffdf681f424,75511055,0,0x0,8
tick,0x7ffdf681f424,75513082,0,0x0,8
tick,0x7ffdf681f424,75515030,0,0x0,8
tick,0x7ffdf681f424,75517291,0,0x0,8
tick,0x7ffdf681f424,75519025,0,0x0,8
tick,0x7ffdf681f424,75521013,0,0x0,8
tick,0x7ffdf681f424,75523003,0,0x0,8
tick,0x7ffdf681f424,75524997,0,0x0,8
tick,0x7ffdf681f424,75527004,0,0x0,8
tick,0x7ffdf681f424,75528986,0,0x0,8
tick,0x7ffdf681f424,75530977,0,0x0,8
tick,0x7ffdf681f424,75532971,0,0x0,8
tick,0x7ffdf681f424,75535020,0,0x0,8
tick,0x7ffdf681f424,75549373,0,0x0,8
tick,0x7ffdf681f424,75551645,0,0x0,8
tick,0x7ffdf681f424,75552934,0,0x0,8
tick,0x7ffdf681f424,75554919,0,0x0,8
tick,0x7ffdf681f424,75556916,0,0x0,8
tick,0x7ffdf681f424,75559405,0,0x0,8
tick,0x7ffdf681f424,75560962,0,0x0,8
tick,0x7ffdf681f424,75562913,0,0x0,8
tick,0x7ffdf681f424,75564892,0,0x0,8
tick,0x7ffdf681f424,75566921,0,0x0,8
tick,0x7ffdf681f424,75568887,0,0x0,8
tick,0x7ffdf681f424,75570871,0,0x0,8
tick,0x7ffdf681f424,75572863,0,0x0,8
tick,0x7ffdf681f424,75574862,0,0x0,8
tick,0x7ffdf681f424,75576871,0,0x0,8
tick,0x7ffdf681f424,75578862,0,0x0,8
tick,0x7ffdf681f424,75580843,0,0x0,8
tick,0x7ffdf681f424,75582880,0,0x0,8
tick,0x7ffdf681f424,75595861,0,0x0,8
tick,0x7ffdf681f424,75596812,0,0x0,8
tick,0x7ffdf681f424,75598799,0,0x0,8
tick,0x7ffdf681f424,75600855,0,0x0,8
tick,0x7ffdf681f424,75602949,0,0x0,8
tick,0x7ffdf681f424,75604793,0,0x0,8
tick,0x7ffdf681f424,75606794,0,0x0,8
tick,0x7ffdf681f424,75608791,0,0x0,8
tick,0x7ffdf681f424,75610766,0,0x0,8
tick,0x7ffdf681f424,75612771,0,0x0,8
tick,0x7ffdf681f424,75614754,0,0x0,8
tick,0x7ffdf681f424,75616746,0,0x0,8
tick,0x7ffdf681f424,75618754,0,0x0,8
tick,0x7ffdf681f424,75620739,0,0x0,8
tick,0x7ffdf681f424,75622732,0,0x0,8
tick,0x7ffdf681f424,75624801,0,0x0,8
tick,0x7ffdf681f424,75626766,0,0x0,8
tick,0x7ffdf681f424,75631141,0,0x0,8
tick,0x7ffdf681f424,75640146,0,0x0,8
tick,0x7ffdf681f424,75641687,0,0x0,8
tick,0x7ffdf681f424,75642797,0,0x0,8
tick,0x7ffdf681f424,75644683,0,0x0,8
tick,0x7ffdf681f424,75646680,0,0x0,8
tick,0x7ffdf681f424,75648872,0,0x0,8
tick,0x7ffdf681f424,75650800,0,0x0,8
tick,0x7ffdf681f424,75652662,0,0x0,8
tick,0x7ffdf681f424,75654649,0,0x0,8
tick,0x7ffdf681f424,75656651,0,0x0,8
tick,0x7ffdf681f424,75658809,0,0x0,8
tick,0x7ffdf681f424,75660643,0,0x0,8
tick,0x7ffdf681f424,75662632,0,0x0,8
tick,0x7ffdf681f424,75664635,0,0x0,8
tick,0x7ffdf681f424,75666613,0,0x0,8
tick,0x7ffdf681f424,75668624,0,0x0,8
tick,0x7ffdf681f424,75670606,0,0x0,8
tick,0x7ffdf681f424,75672600,0,0x0,8
tick,0x7ffdf681f424,75674592,0,0x0,8
tick,0x7ffdf681f424,75676599,0,0x0,8
tick,0x7ffdf681f424,75678588,0,0x0,8
tick,0x7ffdf681f424,75680586,0,0x0,8
tick,0x7ffdf681f424,75684933,0,0x0,8
tick,0x7ffdf681f424,75694048,0,0x0,8
tick,0x7ffdf681f424,75695665,0,0x0,8
tick,0x7ffdf681f424,75697547,0,0x0,8
tick,0x7ffdf681f424,75699541,0,0x0,8
tick,0x7ffdf681f424,75701679,0,0x0,8
tick,0x7ffdf681f424,75703530,0,0x0,8
tick,0x7ffdf681f424,75706041,0,0x0,8
tick,0x7ffdf681f424,75711787,0,0x0,8
tick,0x7ffdf681f424,75713531,0,0x0,8
tick,0x7ffdf681f424,75715495,0,0x0,8
tick,0x7ffdf681f424,75718059,0,0x0,8
tick,0x7ffdf681f424,75719480,0,0x0,8
tick,0x7ffdf681f424,75721497,0,0x0,8
tick,0x7ffdf681f424,75723477,0,0x0,8
tick,0x7ffdf681f424,75726265,0,0x0,8
tick,0x7ffdf681f424,75727482,0,0x0,8
tick,0x7ffdf681f424,75729500,0,0x0,8
tick,0x7ffdf681f424,75731462,0,0x0,8
tick,0x7ffdf681f424,75733453,0,0x0,8
tick,0x7ffdf681f424,75735462,0,0x0,8
tick,0x7ffdf681f424,75737441,0,0x0,8
tick,0x7ffdf681f424,75739429,0,0x0,8
tick,0x7ffdf681f424,75741418,0,0x0,8
tick,0x7ffdf681f424,75743446,0,0x0,8
tick,0x7ffdf681f424,75745414,0,0x0,8
tick,0x7ffdf681f424,75747405,0,0x0,8
tick,0x7ffdf681f424,75749397,0,0x0,8
tick,0x7ffdf681f424,75751403,0,0x0,8
tick,0x7ffdf681f424,75753403,0,0x0,8
tick,0x7ffdf681f424,75755391,0,0x0,8
tick,0x7ffdf681f424,75757376,0,0x0,8
tick,0x7ffdf681f424,75759417,0,0x0,8
tick,0x7ffdf681f424,75761375,0,0x0,8
tick,0x7ffdf681f424,75763364,0,0x0,8
tick,0x7ffdf681f424,75766103,0,0x0,8
tick,0x7ffdf681f424,75768101,0,0x0,8
tick,0x7ffdf681f424,75769350,0,0x0,8
tick,0x7ffdf681f424,75771379,0,0x0,8
tick,0x7ffdf681f424,75773344,0,0x0,8
tick,0x7ffdf681f424,75794239,0,0x0,8
tick,0x7ffdf681f424,75795285,0,0x0,8
tick,0x7ffdf681f424,75797272,0,0x0,8
tick,0x7ffdf681f424,75799370,0,0x0,8
tick,0x7ffdf681f424,75801287,0,0x0,8
tick,0x7ffdf681f424,75803309,0,0x0,8
tick,0x7ffdf681f424,75805280,0,0x0,8
tick,0x7ffdf681f424,75807257,0,0x0,8
tick,0x7ffdf681f424,75809250,0,0x0,8
tick,0x7ffdf681f424,75811254,0,0x0,8
tick,0x7ffdf681f424,75813227,0,0x0,8
tick,0x7ffdf681f424,75815217,0,0x0,8
tick,0x7ffdf681f424,75817218,0,0x0,8
tick,0x7ffdf681f424,75819215,0,0x0,8
tick,0x7ffdf681f424,75821202,0,0x0,8
tick,0x7ffdf681f424,75823198,0,0x0,8
tick,0x7ffdf681f424,75825231,0,0x0,8
tick,0x7ffdf681f424,75827200,0,0x0,8
tick,0x7ffdf681f424,75829179,0,0x0,8
tick,0x7ffdf681f424,75831173,0,0x0,8
tick,0x7ffdf681f424,75833167,0,0x0,8
tick,0x7ffdf681f424,75835176,0,0x0,8
tick,0x7ffdf681f424,75837160,0,0x0,8
tick,0x7ffdf681f424,75839158,0,0x0,8
tick,0x7ffdf681f424,75841147,0,0x0,8
tick,0x7ffdf681f424,75843184,0,0x0,8
tick,0x7ffdf681f424,75845141,0,0x0,8
tick,0x7ffdf681f424,75847131,0,0x0,8
tick,0x7ffdf681f424,75849124,0,0x0,8
tick,0x7ffdf681f424,75851128,0,0x0,8
tick,0x7ffdf681f424,75853388,0,0x0,8
tick,0x7ffdf681f424,75866847,0,0x0,8
tick,0x7ffdf681f424,75868097,0,0x0,8
tick,0x7ffdf681f424,75870076,0,0x0,8
tick,0x7ffdf681f424,75872112,0,0x0,8
tick,0x7ffdf681f424,75874112,0,0x0,8
tick,0x7ffdf681f424,75876265,0,0x0,8
tick,0x7ffdf681f424,75878103,0,0x0,8
tick,0x7ffdf681f424,75880049,0,0x0,8
tick,0x7ffdf681f424,75882039,0,0x0,8
tick,0x7ffdf681f424,75884050,0,0x0,8
tick,0x7ffdf681f424,75886037,0,0x0,8
tick,0x7ffdf681f424,75900770,0,0x0,8
tick,0x7ffdf681f424,75902003,0,0x0,8
tick,0x7ffdf681f424,75903996,0,0x0,8
tick,0x7ffdf681f424,75906005,0,0x0,8
tick,0x7ffdf681f424,75908106,0,0x0,8
tick,0x7ffdf681f424,75910144,0,0x0,8
tick,0x7ffdf681f424,75912218,0,0x0,8
tick,0x7ffdf681f424,75914075,0,0x0,8
tick,0x7ffdf681f424,75915960,0,0x0,8
tick,0x7ffdf681f424,75918632,0,0x0,8
tick,0x7ffdf681f424,75919946,0,0x0,8
tick,0x7ffdf681f424,75921983,0,0x0,8
tick,0x7ffdf681f424,75923937,0,0x0,8
tick,0x7ffdf681f424,75925967,0,0x0,8
tick,0x7ffdf681f424,75927927,0,0x0,8
tick,0x7ffdf681f424,75929924,0,0x0,8
tick,0x7ffdf681f424,75931918,0,0x0,8
tick,0x7ffdf681f424,75933962,0,0x0,8
tick,0x7ffdf681f424,75935920,0,0x0,8
tick,0x7ffdf681f424,75937905,0,0x0,8
tick,0x7ffdf681f424,75939970,0,0x0,8
tick,0x7ffdf681f424,75942153,0,0x0,8
tick,0x7ffdf681f424,75944896,0,0x0,8
tick,0x7ffdf681f424,75945884,0,0x0,8
tick,0x7ffdf681f424,75948458,0,0x0,8
tick,0x7ffdf681f424,75951266,0,0x0,8
tick,0x7ffdf681f424,75952883,0,0x0,8
tick,0x7ffdf681f424,75954857,0,0x0,8
tick,0x7ffdf681f424,75956882,0,0x0,8
tick,0x7ffdf681f424,75958931,0,0x0,8
tick,0x7ffdf681f424,75961003,0,0x0,8
tick,0x7ffdf681f424,75962845,0,0x0,8
tick,0x7ffdf681f424,75964833,0,0x0,8
tick,0x7ffdf681f424,75968074,0,0x0,8
tick,0x7ffdf681f424,75969823,0,0x0,8
tick,0x7ffdf681f424,75971854,0,0x0,8
tick,0x7ffdf681f424,75974033,0,0x0,8
tick,0x7ffdf681f424,75977816,0,0x0,8
tick,0x7ffdf681f424,75990397,0,0x0,8
tick,0x7ffdf681f424,75991762,0,0x0,8
tick,0x7ffdf681f424,75993757,0,0x0,8
tick,0x7ffdf681f424,75995749,0,0x0,8
tick,0x7ffdf681f424,75997857,0,0x0,8
tick,0x7ffdf681f424,75999763,0,0x0,8
tick,0x7ffdf681f424,76001742,0,0x0,8
tick,0x7ffdf681f424,76003748,0,0x0,8
tick,0x7ffdf681f424,76005739,0,0x0,8
tick,0x7ffdf681f424,76007753,0,0x0,8
tick,0x7ffdf681f424,76009936,0,0x0,8
tick,0x7ffdf681f424,76012288,0,0x0,8
tick,0x7ffdf681f424,76014570,0,0x0,8
tick,0x7ffdf681f424,76015715,0,0x0,8
tick,0x7ffdf681f424,76017824,0,0x0,8
tick,0x7ffdf681f424,76019767,0,0x0,8
tick,0x7ffdf681f424,76036144,0,0x0,8
tick,0x7ffdf681f424,76037681,0,0x0,8
tick,0x7ffdf681f424,76039666,0,0x0,8
tick,0x7ffdf681f424,76043354,0,0x0,8
tick,0x7ffdf681f424,76044620,0,0x0,8
tick,0x7ffdf681f424,76046640,0,0x0,8
tick,0x7ffdf681f424,76048604,0,0x0,8
tick,0x7ffdf681f424,76050603,0,0x0,8
tick,0x7ffdf681f424,76052616,0,0x0,8
tick,0x7ffdf681f424,76054584,0,0x0,8
tick,0x7ffdf681f424,76056576,0,0x0,8
tick,0x7ffdf681f424,76058641,0,0x0,8
tick,0x7ffdf681f424,76060572,0,0x0,8
tick,0x7ffdf681f424,76062568,0,0x0,8
tick,0x7ffdf681f424,76064555,0,0x0,8
tick,0x7ffdf681f424,76066560,0,0x0,8
tick,0x7ffdf681f424,76068552,0,0x0,8
tick,0x7ffdf681f424,76070542,0,0x0,8
tick,0x7ffdf681f424,76072533,0,0x0,8
tick,0x7ffdf681f424,76074534,0,0x0,8
tick,0x7ffdf681f424,76077871,0,0x0,8
tick,0x7ffdf681f424,76088488,0,0x0,8
tick,0x7ffdf681f424,76089496,0,0x0,8
tick,0x7ffdf681f424,76091518,0,0x0,8
tick,0x7ffdf681f424,76093478,0,0x0,8
tick,0x7ffdf681f424,76095476,0,0x0,8
tick,0x7ffdf681f424,76097559,0,0x0,8
tick,0x7ffdf681f424,76099513,0,0x0,8
tick,0x7ffdf681f424,76101467,0,0x0,8
tick,0x7ffdf681f424,76103476,0,0x0,8
tick,0x7ffdf681f424,76105448,0,0x0,8
tick,0x7ffdf681f424,76107447,0,0x0,8
tick,0x7ffdf681f424,76109445,0,0x0,8
tick,0x7ffdf681f424,76111428,0,0x0,8
tick,0x7ffdf681f424,76113423,0,0x0,8
tick,0x7ffdf681f424,76115422,0,0x0,8
tick,0x7ffdf681f424,76117449,0,0x0,8
tick,0x7ffdf681f424,76119563,0,0x0,8
tick,0x7ffdf681f424,76121588,0,0x0,8
tick,0x7ffdf681f424,76123555,0,0x0,8
tick,0x7ffdf681f424,76125683,0,0x0,8
tick,0x7ffdf681f424,76127407,0,0x0,8
tick,0x7ffdf681f424,76129412,0,0x0,8
tick,0x7ffdf681f424,76131404,0,0x0,8
tick,0x7ffdf681f424,76133448,0,0x0,8
tick,0x7ffdf681f424,76148468,0,0x0,8
tick,0x7ffdf681f424,76150367,0,0x0,8
tick,0x7ffdf681f424,76152551,0,0x0,8
tick,0x7ffdf681f424,76156126,0,0x0,8
tick,0x7ffdf681f424,76157420,0,0x0,8
tick,0x7ffdf681f424,76159545,0,0x0,8
tick,0x7ffdf681f424,76161359,0,0x0,8
tick,0x7ffdf681f424,76163293,0,0x0,8
tick,0x7ffdf681f424,76165287,0,0x0,8
tick,0x7ffdf681f424,76167292,0,0x0,8
tick,0x7ffdf681f424,76169282,0,0x0,8
tick,0x7ffdf681f424,76171279,0,0x0,8
tick,0x7ffdf681f424,76173276,0,0x0,8
tick,0x7ffdf681f424,76175359,0,0x0,8
tick,0x7ffdf681f424,76177264,0,0x0,8
tick,0x7ffdf681f424,76179268,0,0x0,8
tick,0x7ffdf681f424,76181868,0,0x0,8
tick,0x7ffdf681f424,76184046,0,0x0,8
tick,0x7ffdf681f424,76185654,0,0x0,8
tick,0x7ffdf681f424,76189495,0,0x0,8
tick,0x7ffdf681f424,76192600,0,0x0,8
tick,0x7ffdf681f424,76194791,0,0x0,8
tick,0x7ffdf681f424,76196583,0,0x0,8
tick,0x7ffdf681f424,76199128,0,0x0,8
tick,0x7ffdf681f424,76200189,0,0x0,8
tick,0x7ffdf681f424,76202190,0,0x0,8
tick,0x7ffdf681f424,76204183,0,0x0,8
tick,0x7ffdf681f424,76206271,0,0x0,8
tick,0x7ffdf681f424,76208210,0,0x0,8
tick,0x7ffdf681f424,76210182,0,0x0,8
tick,0x7ffdf681f424,76212164,0,0x0,8
tick,0x7ffdf681f424,76214179,0,0x0,8
tick,0x7ffdf681f424,76216154,0,0x0,8
tick,0x7ffdf681f424,76218150,0,0x0,8
tick,0x7ffdf681f424,76220149,0,0x0,8
tick,0x7ffdf681f424,76222143,0,0x0,8
tick,0x7ffdf681f424,76224151,0,0x0,8
tick,0x7ffdf681f424,76226141,0,0x0,8
tick,0x7ffdf681f424,76228124,0,0x0,8
tick,0x7ffdf681f424,76230128,0,0x0,8
tick,0x7ffdf681f424,76232143,0,0x0,8
tick,0x7ffdf681f424,76234234,0,0x0,8
tick,0x7ffdf681f424,76236116,0,0x0,8
tick,0x7ffdf681f424,76238097,0,0x0,8
tick,0x7ffdf681f424,76240093,0,0x0,8
tick,0x7ffdf681f424,76242088,0,0x0,8
tick,0x7ffdf681f424,76244091,0,0x0,8
tick,0x7ffdf681f424,76246691,0,0x0,8
tick,0x7ffdf681f424,76248067,0,0x0,8
tick,0x7ffdf681f424,76250062,0,0x0,8
tick,0x7ffdf681f424,76262800,0,0x0,8
tick,0x7ffdf681f424,76264093,0,0x0,8
tick,0x7ffdf681f424,76266128,0,0x0,8
tick,0x7ffdf681f424,76269418,0,0x0,8
tick,0x7ffdf681f424,76272054,0,0x0,8
tick,0x7ffdf681f424,76274093,0,0x0,8
tick,0x7ffdf681f424,76276227,0,0x0,8
tick,0x7ffdf681f424,76277998,0,0x0,8
tick,0x7ffdf681f424,76279993,0,0x0,8
tick,0x7ffdf681f424,76282002,0,0x0,8
tick,0x7ffdf681f424,76284020,0,0x0,8
tick,0x7ffdf681f424,76285970,0,0x0,8
tick,0x7ffdf681f424,76287963,0,0x0,8
tick,0x7ffdf681f424,76289964,0,0x0,8
tick,0x7ffdf681f424,76292044,0,0x0,8
tick,0x7ffdf681f424,76293962,0,0x0,8
tick,0x7ffdf681f424,76295959,0,0x0,8
tick,0x7ffdf681f424,76298633,0,0x0,8
tick,0x7ffdf681f424,76300637,0,0x0,8
tick,0x7ffdf681f424,76306646,0,0x0,8
tick,0x7ffdf681f424,76314491,0,0x0,8
tick,0x7ffdf681f424,76316132,0,0x0,8
tick,0x7ffdf681f424,76317895,0,0x0,8
tick,0x7ffdf681f424,76319889,0,0x0,8
tick,0x7ffdf681f424,76321876,0,0x0,8
tick,0x7ffdf681f424,76323889,0,0x0,8
tick,0x7ffdf681f424,76325863,0,0x0,8
tick,0x7ffdf681f424,76340285,0,0x0,8
tick,0x7ffdf681f424,76340335,0,0x0,8
tick,0x7ffdf681f424,76341828,0,0x0,8
tick,0x7ffdf681f424,76343817,0,0x0,8
tick,0x7ffdf681f424,76346130,0,0x0,8
tick,0x7ffdf681f424,76347898,0,0x0,8
tick,0x7ffdf681f424,76350031,0,0x0,8
tick,0x7ffdf681f424,76351894,0,0x0,8
tick,0x7ffdf681f424,76353785,0,0x0,8
tick,0x7ffdf681f424,76355770,0,0x0,8
tick,0x7ffdf681f424,76357774,0,0x0,8
tick,0x7ffdf681f424,76359772,0,0x0,8
tick,0x7ffdf681f424,76361775,0,0x0,8
tick,0x7ffdf681f424,76363761,0,0x0,8
tick,0x7ffdf681f424,76365757,0,0x0,8
tick,0x7ffdf681f424,76367748,0,0x0,8
tick,0x7ffdf681f424,76369738,0,0x0,8
tick,0x7ffdf681f424,76371736,0,0x0,8
tick,0x7ffdf681f424,76373731,0,0x0,8
tick,0x7ffdf681f424,76375726,0,0x0,8
tick,0x7ffdf681f424,76377712,0,0x0,8
tick,0x7ffdf681f424,76379717,0,0x0,8
tick,0x7ffdf681f424,76381711,0,0x0,8
tick,0x7ffdf681f424,76383774,0,0x0,8
tick,0x7ffdf681f424,76385700,0,0x0,8
tick,0x7ffdf681f424,76387694,0,0x0,8
tick,0x7ffdf681f424,76389686,0,0x0,8
tick,0x7ffdf681f424,76391679,0,0x0,8
tick,0x7ffdf681f424,76393679,0,0x0,8
tick,0x7ffdf681f424,76395674,0,0x0,8
tick,0x7ffdf681f424,76397670,0,0x0,8
tick,0x7ffdf681f424,76399658,0,0x0,8
tick,0x7ffdf681f424,76401653,0,0x0,8
tick,0x7ffdf681f424,76403649,0,0x0,8
tick,0x7ffdf681f424,76405666,0,0x0,8
tick,0x7ffdf681f424,76407637,0,0x0,8
tick,0x7ffdf681f424,76409637,0,0x0,8
tick,0x7ffdf681f424,76411629,0,0x0,8
tick,0x7ffdf681f424,76416135,0,0x0,8
tick,0x7ffdf681f424,76427030,0,0x0,8
tick,0x7ffdf681f424,76428592,0,0x0,8
tick,0x7ffdf681f424,76430630,0,0x0,8
tick,0x7ffdf681f424,76432711,0,0x0,8
tick,0x7ffdf681f424,76434614,0,0x0,8
tick,0x7ffdf681f424,76436572,0,0x0,8
tick,0x7ffdf681f424,76438561,0,0x0,8
tick,0x7ffdf681f424,76440548,0,0x0,8
tick,0x7ffdf681f424,76442548,0,0x0,8
tick,0x7ffdf681f424,76444542,0,0x0,8
tick,0x7ffdf681f424,76446532,0,0x0,8
tick,0x7ffdf681f424,76448531,0,0x0,8
tick,0x7ffdf681f424,76452707,0,0x0,8
tick,0x7ffdf681f424,76456582,0,0x0,8
tick,0x7ffdf681f424,76458515,0,0x0,8
tick,0x7ffdf681f424,76460511,0,0x0,8
tick,0x7ffdf681f424,76462514,0,0x0,8
tick,0x7ffdf681f424,76464526,0,0x0,8
tick,0x7ffdf681f424,76466605,0,0x0,8
tick,0x7ffdf681f424,76468658,0,0x0,8
tick,0x7ffdf681f424,76470486,0,0x0,8
tick,0x7ffdf681f424,76472480,0,0x0,8
tick,0x7ffdf681f424,76474489,0,0x0,8
tick,0x7ffdf681f424,76476465,0,0x0,8
tick,0x7ffdf681f424,76478774,0,0x0,8
tick,0x7ffdf681f424,76480543,0,0x0,8
tick,0x7ffdf681f424,76482475,0,0x0,8
tick,0x7ffdf681f424,76484437,0,0x0,8
tick,0x7ffdf681f424,76486444,0,0x0,8
tick,0x7ffdf681f424,76488420,0,0x0,8
tick,0x7ffdf681f424,76490420,0,0x0,8
tick,0x7ffdf681f424,76492412,0,0x0,8
tick,0x7ffdf681f424,76494415,0,0x0,8
tick,0x7ffdf681f424,76496398,0,0x0,8
tick,0x7ffdf681f424,76498403,0,0x0,8
tick,0x7ffdf681f424,76500419,0,0x0,8
tick,0x7ffdf681f424,76502392,0,0x0,8
tick,0x7ffdf681f424,76504379,0,0x0,8
tick,0x7ffdf681f424,76519052,0,0x0,8
tick,0x7ffdf681f424,76520355,0,0x0,8
tick,0x7ffdf681f424,76522337,0,0x0,8
tick,0x7ffdf681f424,76524567,0,0x0,8
tick,0x7ffdf681f424,76526341,0,0x0,8
tick,0x7ffdf681f424,76528423,0,0x0,8
tick,0x7ffdf681f424,76530448,0,0x0,8
tick,0x7ffdf681f424,76532308,0,0x0,8
tick,0x7ffdf681f424,76534394,0,0x0,8
tick,0x7ffdf681f424,76536318,0,0x0,8
tick,0x7ffdf681f424,76538286,0,0x0,8
tick,0x7ffdf681f424,76540290,0,0x0,8
tick,0x7ffdf681f424,76542280,0,0x0,8
tick,0x7ffdf681f424,76544272,0,0x0,8
tick,0x7ffdf681f424,76546275,0,0x0,8
tick,0x7ffdf681f424,76548264,0,0x0,8
tick,0x7ffdf681f424,76550353,0,0x0,8
tick,0x7ffdf681f424,76552272,0,0x0,8
tick,0x7ffdf681f424,76554243,0,0x0,8
tick,0x7ffdf681f424,76556236,0,0x0,8
tick,0x7ffdf681f424,76558236,0,0x0,8
tick,0x7ffdf681f424,76560241,0,0x0,8
tick,0x7ffdf681f424,76562227,0,0x0,8
tick,0x7ffdf681f424,76564221,0,0x0,8
tick,0x7ffdf681f424,76566209,0,0x0,8
tick,0x7ffdf681f424,76568211,0,0x0,8
tick,0x7ffdf681f424,76570204,0,0x0,8
tick,0x7ffdf681f424,76572195,0,0x0,8
tick,0x7ffdf681f424,76574205,0,0x0,8
tick,0x7ffdf681f424,76576204,0,0x0,8
tick,0x7ffdf681f424,76578184,0,0x0,8
tick,0x7ffdf681f424,76580175,0,0x0,8
tick,0x7ffdf681f424,76582175,0,0x0,8
tick,0x7ffdf681f424,76584167,0,0x0,8
tick,0x7ffdf681f424,76586162,0,0x0,8
tick,0x7ffdf681f424,76599322,0,0x0,8
tick,0x7ffdf681f424,76602436,0,0x0,8
tick,0x7ffdf681f424,76606893,0,0x0,8
tick,0x7ffdf681f424,76616921,0,0x0,8
tick,0x7ffdf681f424,76618133,0,0x0,8
tick,0x7ffdf681f424,76620073,0,0x0,8
tick,0x7ffdf681f424,76622066,0,0x0,8
tick,0x7ffdf681f424,76624057,0,0x0,8
tick,0x7ffdf681f424,76626063,0,0x0,8
tick,0x7ffdf681f424,76628184,0,0x0,8
tick,0x7ffdf681f424,76630141,0,0x0,8
tick,0x7ffdf681f424,76632053,0,0x0,8
tick,0x7ffdf681f424,76634032,0,0x0,8
tick,0x7ffdf681f424,76636024,0,0x0,8
tick,0x7ffdf681f424,76638018,0,0x0,8
tick,0x7ffdf681f424,76640013,0,0x0,8
tick,0x7ffdf681f424,76642007,0,0x0,8
tick,0x7ffdf681f424,76644094,0,0x0,8
tick,0x7ffdf681f424,76646024,0,0x0,8
tick,0x7ffdf681f424,76647991,0,0x0,8
tick,0x7ffdf681f424,76649991,0,0x0,8
tick,0x7ffdf681f424,76651982,0,0x0,8
tick,0x7ffdf681f424,76653981,0,0x0,8
tick,0x7ffdf681f424,76655971,0,0x0,8
tick,0x7ffdf681f424,76657963,0,0x0,8
tick,0x7ffdf681f424,76660029,0,0x0,8
tick,0x7ffdf681f424,76662117,0,0x0,8
tick,0x7ffdf681f424,76664000,0,0x0,8
tick,0x7ffdf681f424,76666451,0,0x0,8
tick,0x7ffdf681f424,76667953,0,0x0,8
tick,0x7ffdf681f424,76669973,0,0x0,8
tick,0x7ffdf681f424,76671941,0,0x0,8
tick,0x7ffdf681f424,76674236,0,0x0,8
tick,0x7ffdf681f424,76676859,0,0x0,8
tick,0x7ffdf681f424,76677910,0,0x0,8
tick,0x7ffdf681f424,76679926,0,0x0,8
tick,0x7ffdf681f424,76682266,0,0x0,8
tick,0x7ffdf681f424,76684138,0,0x0,8
tick,0x7ffdf681f424,76686009,0,0x0,8
tick,0x7ffdf681f424,76687912,0,0x0,8
tick,0x7ffdf681f424,76689886,0,0x0,8
tick,0x7ffdf681f424,76691881,0,0x0,8
tick,0x7ffdf681f424,76693902,0,0x0,8
tick,0x7ffdf681f424,76695873,0,0x0,8
tick,0x7ffdf681f424,76697873,0,0x0,8
tick,0x7ffdf681f424,76699859,0,0x0,8
tick,0x7ffdf681f424,76701861,0,0x0,8
tick,0x7ffdf681f424,76715491,0,0x0,8
tick,0x7ffdf681f424,76716811,0,0x0,8
tick,0x7ffdf681f424,76718819,0,0x0,8
tick,0x7ffdf681f424,76720838,0,0x0,8
tick,0x7ffdf681f424,76722796,0,0x0,8
tick,0x7ffdf681f424,76724833,0,0x0,8
tick,0x7ffdf681f424,76726785,0,0x0,8
tick,0x7ffdf681f424,76728779,0,0x0,8
tick,0x7ffdf681f424,76730769,0,0x0,8
tick,0x7ffdf681f424,76732759,0,0x0,8
tick,0x7ffdf681f424,76734762,0,0x0,8
tick,0x7ffdf681f424,76736767,0,0x0,8
tick,0x7ffdf681f424,76738746,0,0x0,8
tick,0x7ffdf681f424,76740740,0,0x0,8
tick,0x7ffdf681f424,76742737,0,0x0,8
tick,0x7ffdf681f424,76744728,0,0x0,8
tick,0x7ffdf681f424,76746723,0,0x0,8
tick,0x7ffdf681f424,76748726,0,0x0,8
tick,0x7ffdf681f424,76750717,0,0x0,8
tick,0x7ffdf681f424,76752735,0,0x0,8
tick,0x7ffdf681f424,76760748,0,0x0,8
tick,0x7ffdf681f424,76763119,0,0x0,8
tick,0x7ffdf681f424,76765735,0,0x0,8
tick,0x7ffdf681f424,76766683,0,0x0,8
tick,0x7ffdf681f424,76768865,0,0x0,8
tick,0x7ffdf681f424,76770674,0,0x0,8
tick,0x7ffdf681f424,76772733,0,0x0,8
tick,0x7ffdf681f424,76774726,0,0x0,8
tick,0x7ffdf681f424,76776722,0,0x0,8
tick,0x7ffdf681f424,76778645,0,0x0,8
tick,0x7ffdf681f424,76780637,0,0x0,8
tick,0x7ffdf681f424,76782648,0,0x0,8
tick,0x7ffdf681f424,76784913,0,0x0,8
tick,0x7ffdf681f424,76786635,0,0x0,8
tick,0x7ffdf681f424,76788636,0,0x0,8
tick,0x7ffdf681f424,76790614,0,0x0,8
tick,0x7ffdf681f424,76792606,0,0x0,8
tick,0x7ffdf681f424,76794598,0,0x0,8
tick,0x7ffdf681f424,76796592,0,0x0,8
tick,0x7ffdf681f424,76798589,0,0x0,8
tick,0x7ffdf681f424,76800584,0,0x0,8
tick,0x7ffdf681f424,76802577,0,0x0,8
tick,0x7ffdf681f424,76804571,0,0x0,8
tick,0x7ffdf681f424,76806567,0,0x0,8
tick,0x7ffdf681f424,76808557,0,0x0,8
tick,0x7ffdf681f424,76810560,0,0x0,8
tick,0x7ffdf681f424,76812550,0,0x0,8
tick,0x7ffdf681f424,76814543,0,0x0,8
tick,0x7ffdf681f424,76816539,0,0x0,8
tick,0x7ffdf681f424,76824029,0,0x0,8
tick,0x7ffdf681f424,76830769,0,0x0,8
tick,0x7ffdf681f424,76832504,0,0x0,8
tick,0x7ffdf681f424,76834546,0,0x0,8
tick,0x7ffdf681f424,76836518,0,0x0,8
tick,0x7ffdf681f424,76838512,0,0x0,8
tick,0x7ffdf681f424,76840603,0,0x0,8
tick,0x7ffdf681f424,76850823,0,0x0,8
tick,0x7ffdf681f424,76854412,0,0x0,8
tick,0x7ffdf681f424,76855437,0,0x0,8
tick,0x7ffdf681f424,76857433,0,0x0,8
tick,0x7ffdf681f424,76859516,0,0x0,8
tick,0x7ffdf681f424,76861430,0,0x0,8
tick,0x7ffdf681f424,76863421,0,0x0,8
tick,0x7ffdf681f424,76865414,0,0x0,8
tick,0x7ffdf681f424,76867410,0,0x0,8
tick,0x7ffdf681f424,76869401,0,0x0,8
tick,0x7ffdf681f424,76871393,0,0x0,8
tick,0x7ffdf681f424,76873386,0,0x0,8
tick,0x7ffdf681f424,76875584,0,0x0,8
tick,0x7ffdf681f424,76877384,0,0x0,8
tick,0x7ffdf681f424,76879380,0,0x0,8
tick,0x7ffdf681f424,76881411,0,0x0,8
tick,0x7ffdf681f424,76883393,0,0x0,8
tick,0x7ffdf681f424,76885367,0,0x0,8
tick,0x7ffdf681f424,76887369,0,0x0,8
tick,0x7ffdf681f424,76889344,0,0x0,8
tick,0x7ffdf681f424,76891362,0,0x0,8
tick,0x7ffdf681f424,76893344,0,0x0,8
tick,0x7ffdf681f424,76895958,0,0x0,8
tick,0x7ffdf681f424,76897387,0,0x0,8
tick,0x7ffdf681f424,76901074,0,0x0,8
tick,0x7ffdf681f424,76902345,0,0x0,8
tick,0x7ffdf681f424,76904354,0,0x0,8
tick,0x7ffdf681f424,76906334,0,0x0,8
tick,0x7ffdf681f424,76924782,0,0x0,8
tick,0x7ffdf681f424,76926336,0,0x0,8
tick,0x7ffdf681f424,76928264,0,0x0,8
tick,0x7ffdf681f424,76930435,0,0x0,8
tick,0x7ffdf681f424,76935999,0,0x0,8
tick,0x7ffdf681f424,76938219,0,0x0,8
tick,0x7ffdf681f424,76939221,0,0x0,8
tick,0x7ffdf681f424,76941254,0,0x0,8
tick,0x7ffdf681f424,76943216,0,0x0,8
tick,0x7ffdf681f424,76945208,0,0x0,8
tick,0x7ffdf681f424,76947204,0,0x0,8
tick,0x7ffdf681f424,76949192,0,0x0,8
tick,0x7ffdf681f424,76951187,0,0x0,8
tick,0x7ffdf681f424,76953179,0,0x0,8
tick,0x7ffdf681f424,76955170,0,0x0,8
tick,0x7ffdf681f424,76957169,0,0x0,8
tick,0x7ffdf681f424,76959172,0,0x0,8
tick,0x7ffdf681f424,76961160,0,0x0,8
tick,0x7ffdf681f424,76963155,0,0x0,8
tick,0x7ffdf681f424,76965155,0,0x0,8
tick,0x7ffdf681f424,76967150,0,0x0,8
tick,0x7ffdf681f424,76969136,0,0x0,8
tick,0x7ffdf681f424,76979303,0,0x0,8
tick,0x7ffdf681f424,76981166,0,0x0,8
tick,0x7ffdf681f424,76983135,0,0x0,8
tick,0x7ffdf681f424,76985099,0,0x0,8
tick,0x7ffdf681f424,76987090,0,0x0,8
tick,0x7ffdf681f424,76989091,0,0x0,8
tick,0x7ffdf681f424,76991145,0,0x0,8
tick,0x7ffdf681f424,76993082,0,0x0,8
tick,0x7ffdf681f424,76995275,0,0x0,8
tick,0x7ffdf681f424,76997062,0,0x0,8
tick,0x7ffdf681f424,76999058,0,0x0,8
tick,0x7ffdf681f424,77001059,0,0x0,8
tick,0x7ffdf681f424,77003049,0,0x0,8
tick,0x7ffdf681f424,77005042,0,0x0,8
tick,0x7ffdf681f424,77007032,0,0x0,8
tick,0x7ffdf681f424,77009054,0,0x0,8
tick,0x7ffdf681f424,77022784,0,0x0,8
tick,0x7ffdf681f424,77023993,0,0x0,8
tick,0x7ffdf681f424,77026233,0,0x0,8
tick,0x7ffdf681f424,77028005,0,0x0,8
tick,0x7ffdf681f424,77030024,0,0x0,8
tick,0x7ffdf681f424,77032026,0,0x0,8
tick,0x7ffdf681f424,77033983,0,0x0,8
tick,0x7ffdf681f424,77035961,0,0x0,8
tick,0x7ffdf681f424,77037956,0,0x0,8
tick,0x7ffdf681f424,77039949,0,0x0,8
tick,0x7ffdf681f424,77044013,0,0x0,8
tick,0x7ffdf681f424,77044945,0,0x0,8
tick,0x7ffdf681f424,77046941,0,0x0,8
tick,0x7ffdf681f424,77048926,0,0x0,8
tick,0x7ffdf681f424,77050929,0,0x0,8
tick,0x7ffdf681f424,77063065,0,0x0,8
tick,0x7ffdf681f424,77064886,0,0x0,8
tick,0x7ffdf681f424,77066881,0,0x0,8
tick,0x7ffdf681f424,77068878,0,0x0,8
tick,0x7ffdf681f424,77070971,0,0x0,8
tick,0x7ffdf681f424,77072933,0,0x0,8
tick,0x7ffdf681f424,77074882,0,0x0,8
tick,0x7ffdf681f424,77076978,0,0x0,8
tick,0x7ffdf681f424,77078854,0,0x0,8
tick,0x7ffdf681f424,77080847,0,0x0,8
tick,0x7ffdf681f424,77082842,0,0x0,8
tick,0x7ffdf681f424,77084836,0,0x0,8
tick,0x7ffdf681f424,77086828,0,0x0,8
tick,0x7ffdf681f424,77088822,0,0x0,8
tick,0x7ffdf681f424,77090809,0,0x0,8
tick,0x7ffdf681f424,77092810,0,0x0,8
tick,0x7ffdf681f424,77094806,0,0x0,8
tick,0x7ffdf681f424,77096872,0,0x0,8
tick,0x7ffdf681f424,77098813,0,0x0,8
tick,0x7ffdf681f424,77100812,0,0x0,8
tick,0x7ffdf681f424,77102802,0,0x0,8
tick,0x7ffdf681f424,77104784,0,0x0,8
tick,0x7ffdf681f424,77106789,0,0x0,8
tick,0x7ffdf681f424,77108900,0,0x0,8
tick,0x7ffdf681f424,77110764,0,0x0,8
tick,0x7ffdf681f424,77112747,0,0x0,8
tick,0x7ffdf681f424,77114751,0,0x0,8
tick,0x7ffdf681f424,77116742,0,0x0,8
tick,0x7ffdf681f424,77118751,0,0x0,8
tick,0x7ffdf681f424,77120738,0,0x0,8
tick,0x7ffdf681f424,77122728,0,0x0,8
tick,0x7ffdf681f424,77136010,0,0x0,8
tick,0x7ffdf681f424,77136048,0,0x0,8
tick,0x7ffdf681f424,77137687,0,0x0,8
tick,0x7ffdf681f424,77139853,0,0x0,8
tick,0x7ffdf681f424,77141682,0,0x0,8
tick,0x7ffdf681f424,77143732,0,0x0,8
tick,0x7ffdf681f424,77145676,0,0x0,8
tick,0x7ffdf681f424,77147665,0,0x0,8
tick,0x7ffdf681f424,77150360,0,0x0,8
tick,0x7ffdf681f424,77152625,0,0x0,8
tick,0x7ffdf681f424,77153656,0,0x0,8
tick,0x7ffdf681f424,77155638,0,0x0,8
tick,0x7ffdf681f424,77157672,0,0x0,8
tick,0x7ffdf681f424,77159637,0,0x0,8
tick,0x7ffdf681f424,77161629,0,0x0,8
tick,0x7ffdf681f424,77163623,0,0x0,8
tick,0x7ffdf681f424,77165711,0,0x0,8
tick,0x7ffdf681f424,77167614,0,0x0,8
tick,0x7ffdf681f424,77169603,0,0x0,8
tick,0x7ffdf681f424,77171590,0,0x0,8
tick,0x7ffdf681f424,77173584,0,0x0,8
tick,0x7ffdf681f424,77175591,0,0x0,8
tick,0x7ffdf681f424,77177634,0,0x0,8
tick,0x7ffdf681f424,77179596,0,0x0,8
tick,0x7ffdf681f424,77181584,0,0x0,8
tick,0x7ffdf681f424,77183565,0,0x0,8
tick,0x7ffdf681f424,77185555,0,0x0,8
tick,0x7ffdf681f424,77187544,0,0x0,8
tick,0x7ffdf681f424,77189542,0,0x0,8
tick,0x7ffdf681f424,77191538,0,0x0,8
tick,0x7ffdf681f424,77193536,0,0x0,8
tick,0x7ffdf681f424,77195533,0,0x0,8
tick,0x7ffdf681f424,77197520,0,0x0,8
tick,0x7ffdf681f424,77199529,0,0x0,8
tick,0x7ffdf681f424,77201518,0,0x0,8
tick,0x7ffdf681f424,77203508,0,0x0,8
tick,0x7ffdf681f424,77205505,0,0x0,8
tick,0x7ffdf681f424,77219004,0,0x0,8
tick,0x7ffdf681f424,77219471,0,0x0,8
tick,0x7ffdf681f424,77221467,0,0x0,8
tick,0x7ffdf681f424,77223598,0,0x0,8
tick,0x7ffdf681f424,77225730,0,0x0,8
tick,0x7ffdf681f424,77227496,0,0x0,8
tick,0x7ffdf681f424,77229445,0,0x0,8
tick,0x7ffdf681f424,77231433,0,0x0,8
tick,0x7ffdf681f424,77233427,0,0x0,8
tick,0x7ffdf681f424,77235439,0,0x0,8
tick,0x7ffdf681f424,77237415,0,0x0,8
tick,0x7ffdf681f424,77239664,0,0x0,8
tick,0x7ffdf681f424,77241523,0,0x0,8
tick,0x7ffdf681f424,77243660,0,0x0,8
tick,0x7ffdf681f424,77253390,0,0x0,8
tick,0x7ffdf681f424,77255385,0,0x0,8
tick,0x7ffdf681f424,77257368,0,0x0,8
tick,0x7ffdf681f424,77259362,0,0x0,8
tick,0x7ffdf681f424,77261353,0,0x0,8
tick,0x7ffdf681f424,77263390,0,0x0,8
tick,0x7ffdf681f424,77265341,0,0x0,8
tick,0x7ffdf681f424,77267335,0,0x0,8
tick,0x7ffdf681f424,77269326,0,0x0,8
tick,0x7ffdf681f424,77271321,0,0x0,8
tick,0x7ffdf681f424,77273317,0,0x0,8
tick,0x7ffdf681f424,77275316,0,0x0,8
tick,0x7ffdf681f424,77277311,0,0x0,8
tick,0x7ffdf681f424,77279305,0,0x0,8
tick,0x7ffdf681f424,77281298,0,0x0,8
tick,0x7ffdf681f424,77283289,0,0x0,8
tick,0x7ffdf681f424,77285288,0,0x0,8
tick,0x7ffdf681f424,77287284,0,0x0,8
tick,0x7ffdf681f424,77289273,0,0x0,8
tick,0x7ffdf681f424,77291271,0,0x0,8
tick,0x7ffdf681f424,77293267,0,0x0,8
tick,0x7ffdf681f424,77295268,0,0x0,8
tick,0x7ffdf681f424,77297278,0,0x0,8
tick,0x7ffdf681f424,77299252,0,0x0,8
tick,0x7ffdf681f424,77311909,0,0x0,8
tick,0x7ffdf681f424,77313223,0,0x0,8
tick,0x7ffdf681f424,77315342,0,0x0,8
tick,0x7ffdf681f424,77317269,0,0x0,8
tick,0x7ffdf681f424,77319206,0,0x0,8
tick,0x7ffdf681f424,77321200,0,0x0,8
tick,0x7ffdf681f424,77323193,0,0x0,8
tick,0x7ffdf681f424,77325187,0,0x0,8
tick,0x7ffdf681f424,77327178,0,0x0,8
tick,0x7ffdf681f424,77329174,0,0x0,8
tick,0x7ffdf681f424,77331448,0,0x0,8
tick,0x7ffdf681f424,77344757,0,0x0,8
tick,0x7ffdf681f424,77346140,0,0x0,8
tick,0x7ffdf681f424,77348125,0,0x0,8
tick,0x7ffdf681f424,77350123,0,0x0,8
tick,0x7ffdf681f424,77352128,0,0x0,8
tick,0x7ffdf681f424,77354122,0,0x0,8
tick,0x7ffdf681f424,77356104,0,0x0,8
tick,0x7ffdf681f424,77358096,0,0x0,8
tick,0x7ffdf681f424,77360100,0,0x0,8
tick,0x7ffdf681f424,77362086,0,0x0,8
tick,0x7ffdf681f424,77364094,0,0x0,8
tick,0x7ffdf681f424,77366097,0,0x0,8
tick,0x7ffdf681f424,77368078,0,0x0,8
tick,0x7ffdf681f424,77370068,0,0x0,8
tick,0x7ffdf681f424,77372083,0,0x0,8
tick,0x7ffdf681f424,77377188,0,0x0,8
tick,0x7ffdf681f424,77387945,0,0x0,8
tick,0x7ffdf681f424,77389019,0,0x0,8
tick,0x7ffdf681f424,77391045,0,0x0,8
tick,0x7ffdf681f424,77393113,0,0x0,8
tick,0x7ffdf681f424,77395023,0,0x0,8
tick,0x7ffdf681f424,77397008,0,0x0,8
tick,0x7ffdf681f424,77398992,0,0x0,8
tick,0x7ffdf681f424,77400987,0,0x0,8
tick,0x7ffdf681f424,77402978,0,0x0,8
tick,0x7ffdf681f424,77404979,0,0x0,8
tick,0x7ffdf681f424,77406970,0,0x0,8
tick,0x7ffdf681f424,77408968,0,0x0,8
tick,0x7ffdf681f424,77410960,0,0x0,8
tick,0x7ffdf681f424,77412948,0,0x0,8
tick,0x7ffdf681f424,77414947,0,0x0,8
tick,0x7ffdf681f424,77416938,0,0x0,8
tick,0x7ffdf681f424,77418938,0,0x0,8
tick,0x7ffdf681f424,77420932,0,0x0,8
tick,0x7ffdf681f424,77422928,0,0x0,8
tick,0x7ffdf681f424,77424972,0,0x0,8
tick,0x7ffdf681f424,77426924,0,0x0,8
tick,0x7ffdf681f424,77428949,0,0x0,8
tick,0x7ffdf681f424,77430909,0,0x0,8
tick,0x7ffdf681f424,77432939,0,0x0,8
tick,0x7ffdf681f424,77434902,0,0x0,8
tick,0x7ffdf681f424,77436920,0,0x0,8
tick,0x7ffdf681f424,77438885,0,0x0,8
tick,0x7ffdf681f424,77440908,0,0x0,8
tick,0x7ffdf681f424,77442885,0,0x0,8
tick,0x7ffdf681f424,77444885,0,0x0,8
tick,0x7ffdf681f424,77446860,0,0x0,8
tick,0x7ffdf681f424,77448854,0,0x0,8
tick,0x7ffdf681f424,77450855,0,0x0,8
tick,0x7ffdf681f424,77452840,0,0x0,8
tick,0x7ffdf681f424,77454838,0,0x0,8
tick,0x7ffdf681f424,77456889,0,0x0,8
tick,0x7ffdf681f424,77458870,0,0x0,8
tick,0x7ffdf681f424,77460825,0,0x0,8
tick,0x7ffdf681f424,77462813,0,0x0,8
tick,0x7ffdf681f424,77464912,0,0x0,8
tick,0x7ffdf681f424,77466809,0,0x0,8
tick,0x7ffdf681f424,77468831,0,0x0,8
tick,0x7ffdf681f424,77474284,0,0x0,8
tick,0x7ffdf681f424,77489040,0,0x0,8
tick,0x7ffdf681f424,77490752,0,0x0,8
tick,0x7ffdf681f424,77492737,0,0x0,8
tick,0x7ffdf681f424,77494759,0,0x0,8
tick,0x7ffdf681f424,77496828,0,0x0,8
tick,0x7ffdf681f424,77498755,0,0x0,8
tick,0x7ffdf681f424,77500783,0,0x0,8
tick,0x7ffdf681f424,77502712,0,0x0,8
tick,0x7ffdf681f424,77504702,0,0x0,8
tick,0x7ffdf681f424,77506703,0,0x0,8
tick,0x7ffdf681f424,77508698,0,0x0,8
tick,0x7ffdf681f424,77510691,0,0x0,8
tick,0x7ffdf681f424,77512683,0,0x0,8
tick,0x7ffdf681f424,77514676,0,0x0,8
tick,0x7ffdf681f424,77516668,0,0x0,8
tick,0x7ffdf681f424,77518664,0,0x0,8
tick,0x7ffdf681f424,77520940,0,0x0,8
tick,0x7ffdf681f424,77522770,0,0x0,8
tick,0x7ffdf681f424,77524684,0,0x0,8
tick,0x7ffdf681f424,77526654,0,0x0,8
tick,0x7ffdf681f424,77528674,0,0x0,8
tick,0x7ffdf681f424,77530638,0,0x0,8
tick,0x7ffdf681f424,77532659,0,0x0,8
tick,0x7ffdf681f424,77534626,0,0x0,8
tick,0x7ffdf681f424,77536631,0,0x0,8
tick,0x7ffdf681f424,77538726,0,0x0,8
tick,0x7ffdf681f424,77540634,0,0x0,8
tick,0x7ffdf681f424,77542608,0,0x0,8
tick,0x7ffdf681f424,77544600,0,0x0,8
tick,0x7ffdf681f424,77546590,0,0x0,8
tick,0x7ffdf681f424,77548580,0,0x0,8
tick,0x7ffdf681f424,77550582,0,0x0,8
tick,0x7ffdf681f424,77552577,0,0x0,8
tick,0x7ffdf681f424,77554583,0,0x0,8
tick,0x7ffdf681f424,77556571,0,0x0,8
tick,0x7ffdf681f424,77558593,0,0x0,8
tick,0x7ffdf681f424,77563188,0,0x0,8
tick,0x7ffdf681f424,77574027,0,0x0,8
tick,0x7ffdf681f424,77575572,0,0x0,8
tick,0x7ffdf681f424,77577520,0,0x0,8
tick,0x7ffdf681f424,77579761,0,0x0,8
tick,0x7ffdf681f424,77581542,0,0x0,8
tick,0x7ffdf681f424,77583501,0,0x0,8
tick,0x7ffdf681f424,77585504,0,0x0,8
tick,0x7ffdf681f424,77587504,0,0x0,8
tick,0x7ffdf681f424,77589529,0,0x0,8
tick,0x7ffdf681f424,77591478,0,0x0,8
tick,0x7ffdf681f424,77593479,0,0x0,8
tick,0x7ffdf681f424,77595468,0,0x0,8
tick,0x7ffdf681f424,77597467,0,0x0,8
tick,0x7ffdf681f424,77599469,0,0x0,8
tick,0x7ffdf681f424,77601449,0,0x0,8
tick,0x7ffdf681f424,77603440,0,0x0,8
tick,0x7ffdf681f424,77605472,0,0x0,8
tick,0x7ffdf681f424,77607432,0,0x0,8
tick,0x7ffdf681f424,77609426,0,0x0,8
tick,0x7ffdf681f424,77611424,0,0x0,8
tick,0x7ffdf681f424,77613415,0,0x0,8
tick,0x7ffdf681f424,77615408,0,0x0,8
tick,0x7ffdf681f424,77617421,0,0x0,8
tick,0x7ffdf681f424,77619397,0,0x0,8
tick,0x7ffdf681f424,77621390,0,0x0,8
tick,0x7ffdf681f424,77623387,0,0x0,8
tick,0x7ffdf681f424,77625383,0,0x0,8
tick,0x7ffdf681f424,77637066,0,0x0,8
tick,0x7ffdf681f424,77640934,0,0x0,8
tick,0x7ffdf681f424,77642350,0,0x0,8
tick,0x7ffdf681f424,77644333,0,0x0,8
tick,0x7ffdf681f424,77646376,0,0x0,8
tick,0x7ffdf681f424,77648335,0,0x0,8
tick,0x7ffdf681f424,77650313,0,0x0,8
tick,0x7ffdf681f424,77652333,0,0x0,8
tick,0x7ffdf681f424,77654345,0,0x0,8
tick,0x7ffdf681f424,77656350,0,0x0,8
tick,0x7ffdf681f424,77658303,0,0x0,8
tick,0x7ffdf681f424,77660335,0,0x0,8
tick,0x7ffdf681f424,77669110,0,0x0,8
tick,0x7ffdf681f424,77670277,0,0x0,8
tick,0x7ffdf681f424,77672260,0,0x0,8
tick,0x7ffdf681f424,77674429,0,0x0,8
tick,0x7ffdf681f424,77676279,0,0x0,8
tick,0x7ffdf681f424,77678297,0,0x0,8
tick,0x7ffdf681f424,77680329,0,0x0,8
tick,0x7ffdf681f424,77682230,0,0x0,8
tick,0x7ffdf681f424,77684244,0,0x0,8
tick,0x7ffdf681f424,77686222,0,0x0,8
tick,0x7ffdf681f424,77688210,0,0x0,8
tick,0x7ffdf681f424,77690210,0,0x0,8
tick,0x7ffdf681f424,77692256,0,0x0,8
tick,0x7ffdf681f424,77694238,0,0x0,8
tick,0x7ffdf681f424,77696192,0,0x0,8
tick,0x7ffdf681f424,77698182,0,0x0,8
tick,0x7ffdf681f424,77700181,0,0x0,8
tick,0x7ffdf681f424,77702186,0,0x0,8
tick,0x7ffdf681f424,77705965,0,0x0,8
tick,0x7ffdf681f424,77716189,0,0x0,8
tick,0x7ffdf681f424,77718137,0,0x0,8
tick,0x7ffdf681f424,77720210,0,0x0,8
tick,0x7ffdf681f424,77722130,0,0x0,8
tick,0x7ffdf681f424,77724155,0,0x0,8
tick,0x7ffdf681f424,77726113,0,0x0,8
tick,0x7ffdf681f424,77728105,0,0x0,8
tick,0x7ffdf681f424,77730101,0,0x0,8
tick,0x7ffdf681f424,77732094,0,0x0,8
tick,0x7ffdf681f424,77734085,0,0x0,8
tick,0x7ffdf681f424,77736083,0,0x0,8
tick,0x7ffdf681f424,77738107,0,0x0,8
tick,0x7ffdf681f424,77740072,0,0x0,8
tick,0x7ffdf681f424,77742066,0,0x0,8
tick,0x7ffdf681f424,77744066,0,0x0,8
tick,0x7ffdf681f424,77746062,0,0x0,8
tick,0x7ffdf681f424,77749208,0,0x0,8
tick,0x7ffdf681f424,77761537,0,0x0,8
tick,0x7ffdf681f424,77763020,0,0x0,8
tick,0x7ffdf681f424,77765041,0,0x0,8
tick,0x7ffdf681f424,77767032,0,0x0,8
tick,0x7ffdf681f424,77769002,0,0x0,8
tick,0x7ffdf681f424,77770998,0,0x0,8
tick,0x7ffdf681f424,77772993,0,0x0,8
tick,0x7ffdf681f424,77775019,0,0x0,8
tick,0x7ffdf681f424,77777017,0,0x0,8
tick,0x7ffdf681f424,77778982,0,0x0,8
tick,0x7ffdf681f424,77780965,0,0x0,8
tick,0x7ffdf681f424,77782956,0,0x0,8
tick,0x7ffdf681f424,77784970,0,0x0,8
tick,0x7ffdf681f424,77786950,0,0x0,8
tick,0x7ffdf681f424,77788939,0,0x0,8
tick,0x7ffdf681f424,77790935,0,0x0,8
tick,0x7ffdf681f424,77792930,0,0x0,8
tick,0x7ffdf681f424,77794925,0,0x0,8
tick,0x7ffdf681f424,77796915,0,0x0,8
tick,0x7ffdf681f424,77798909,0,0x0,8
tick,0x7ffdf681f424,77800906,0,0x0,8
tick,0x7ffdf681f424,77802904,0,0x0,8
tick,0x7ffdf681f424,77807334,0,0x0,8
tick,0x7ffdf681f424,77808033,0,0x0,8
tick,0x7ffdf681f424,77815517,0,0x0,8
tick,0x7ffdf681f424,77820596,0,0x0,8
tick,0x7ffdf681f424,77821861,0,0x0,8
tick,0x7ffdf681f424,77823855,0,0x0,8
tick,0x7ffdf681f424,77825893,0,0x0,8
tick,0x7ffdf681f424,77828111,0,0x0,8
tick,0x7ffdf681f424,77829847,0,0x0,8
tick,0x7ffdf681f424,77831833,0,0x0,8
tick,0x7ffdf681f424,77833827,0,0x0,8
tick,0x7ffdf681f424,77835827,0,0x0,8
tick,0x7ffdf681f424,77837816,0,0x0,8
tick,0x7ffdf681f424,77839808,0,0x0,8
tick,0x7ffdf681f424,77841831,0,0x0,8
tick,0x7ffdf681f424,77843800,0,0x0,8
tick,0x7ffdf681f424,77845787,0,0x0,8
tick,0x7ffdf681f424,77847786,0,0x0,8
tick,0x7ffdf681f424,77849779,0,0x0,8
tick,0x7ffdf681f424,77852052,0,0x0,8
tick,0x7ffdf681f424,77853881,0,0x0,8
tick,0x7ffdf681f424,77855828,0,0x0,8
tick,0x7ffdf681f424,77857813,0,0x0,8
tick,0x7ffdf681f424,77859763,0,0x0,8
tick,0x7ffdf681f424,77861784,0,0x0,8
tick,0x7ffdf681f424,77863751,0,0x0,8
tick,0x7ffdf681f424,77865749,0,0x0,8
tick,0x7ffdf681f424,77867735,0,0x0,8
tick,0x7ffdf681f424,77869749,0,0x0,8
tick,0x7ffdf681f424,77871832,0,0x0,8
tick,0x7ffdf681f424,77873739,0,0x0,8
tick,0x7ffdf681f424,77875754,0,0x0,8
tick,0x7ffdf681f424,77877706,0,0x0,8
tick,0x7ffdf681f424,77879700,0,0x0,8
tick,0x7ffdf681f424,77881698,0,0x0,8
tick,0x7ffdf681f424,77883691,0,0x0,8
tick,0x7ffdf681f424,77885686,0,0x0,8
tick,0x7ffdf681f424,77887683,0,0x0,8
tick,0x7ffdf681f424,77889668,0,0x0,8
tick,0x7ffdf681f424,77891668,0,0x0,8
tick,0x7ffdf681f424,77893668,0,0x0,8
tick,0x7ffdf681f424,77895670,0,0x0,8
tick,0x7ffdf681f424,77897660,0,0x0,8
tick,0x7ffdf681f424,77899648,0,0x0,8
tick,0x7ffdf681f424,77901653,0,0x0,8
tick,0x7ffdf681f424,77903635,0,0x0,8
tick,0x7ffdf681f424,77906474,0,0x0,8
tick,0x7ffdf681f424,77917241,0,0x0,8
tick,0x7ffdf681f424,77918610,0,0x0,8
tick,0x7ffdf681f424,77920603,0,0x0,8
tick,0x7ffdf681f424,77922686,0,0x0,8
tick,0x7ffdf681f424,77924590,0,0x0,8
tick,0x7ffdf681f424,77926609,0,0x0,8
tick,0x7ffdf681f424,77928570,0,0x0,8
tick,0x7ffdf681f424,77930568,0,0x0,8
tick,0x7ffdf681f424,77932582,0,0x0,8
tick,0x7ffdf681f424,77934558,0,0x0,8
tick,0x7ffdf681f424,77936548,0,0x0,8
tick,0x7ffdf681f424,77938543,0,0x0,8
tick,0x7ffdf681f424,77940535,0,0x0,8
tick,0x7ffdf681f424,77942530,0,0x0,8
tick,0x7ffdf681f424,77944525,0,0x0,8
tick,0x7ffdf681f424,77946518,0,0x0,8
tick,0x7ffdf681f424,77948508,0,0x0,8
tick,0x7ffdf681f424,77950515,0,0x0,8
tick,0x7ffdf681f424,77952503,0,0x0,8
tick,0x7ffdf681f424,77954492,0,0x0,8
tick,0x7ffdf681f424,77956490,0,0x0,8
tick,0x7ffdf681f424,77959354,0,0x0,8
tick,0x7ffdf681f424,77960493,0,0x0,8
tick,0x7ffdf681f424,77962482,0,0x0,8
tick,0x7ffdf681f424,77964469,0,0x0,8
tick,0x7ffdf681f424,77966467,0,0x0,8
tick,0x7ffdf681f424,77975873,0,0x0,8
tick,0x7ffdf681f424,77977479,0,0x0,8
tick,0x7ffdf681f424,77979470,0,0x0,8
tick,0x7ffdf681f424,77981519,0,0x0,8
tick,0x7ffdf681f424,77983434,0,0x0,8
tick,0x7ffdf681f424,77985424,0,0x0,8
tick,0x7ffdf681f424,77987425,0,0x0,8
tick,0x7ffdf681f424,77989515,0,0x0,8
tick,0x7ffdf681f424,77991492,0,0x0,8
tick,0x7ffdf681f424,77993403,0,0x0,8
tick,0x7ffdf681f424,77995406,0,0x0,8
tick,0x7ffdf681f424,77997389,0,0x0,8
tick,0x7ffdf681f424,77999386,0,0x0,8
tick,0x7ffdf681f424,78001380,0,0x0,8
tick,0x7ffdf681f424,78010352,0,0x0,8
tick,0x7ffdf681f424,78015374,0,0x0,8
tick,0x7ffdf681f424,78017347,0,0x0,8
tick,0x7ffdf681f424,78019671,0,0x0,8
tick,0x7ffdf681f424,78021362,0,0x0,8
tick,0x7ffdf681f424,78023365,0,0x0,8
tick,0x7ffdf681f424,78025312,0,0x0,8
tick,0x7ffdf681f424,78027305,0,0x0,8
tick,0x7ffdf681f424,78029295,0,0x0,8
tick,0x7ffdf681f424,78031292,0,0x0,8
tick,0x7ffdf681f424,78033286,0,0x0,8
tick,0x7ffdf681f424,78035282,0,0x0,8
tick,0x7ffdf681f424,78037285,0,0x0,8
tick,0x7ffdf681f424,78039268,0,0x0,8
tick,0x7ffdf681f424,78041264,0,0x0,8
tick,0x7ffdf681f424,78043260,0,0x0,8
tick,0x7ffdf681f424,78045259,0,0x0,8
tick,0x7ffdf681f424,78047246,0,0x0,8
tick,0x7ffdf681f424,78049242,0,0x0,8
tick,0x7ffdf681f424,78051241,0,0x0,8
tick,0x7ffdf681f424,78053230,0,0x0,8
tick,0x7ffdf681f424,78065848,0,0x0,8
tick,0x7ffdf681f424,78067210,0,0x0,8
tick,0x7ffdf681f424,78069332,0,0x0,8
tick,0x7ffdf681f424,78071237,0,0x0,8
tick,0x7ffdf681f424,78073324,0,0x0,8
tick,0x7ffdf681f424,78077598,0,0x0,8
tick,0x7ffdf681f424,78079174,0,0x0,8
tick,0x7ffdf681f424,78081170,0,0x0,8
tick,0x7ffdf681f424,78083171,0,0x0,8
tick,0x7ffdf681f424,78085156,0,0x0,8
tick,0x7ffdf681f424,78087341,0,0x0,8
tick,0x7ffdf681f424,78089250,0,0x0,8
tick,0x7ffdf681f424,78091132,0,0x0,8
tick,0x7ffdf681f424,78093126,0,0x0,8
tick,0x7ffdf681f424,78095116,0,0x0,8
tick,0x7ffdf681f424,78097123,0,0x0,8
tick,0x7ffdf681f424,78099116,0,0x0,8
tick,0x7ffdf681f424,78101172,0,0x0,8
tick,0x7ffdf681f424,78103209,0,0x0,8
tick,0x7ffdf681f424,78105159,0,0x0,8
tick,0x7ffdf681f424,78107105,0,0x0,8
tick,0x7ffdf681f424,78109106,0,0x0,8
tick,0x7ffdf681f424,78111095,0,0x0,8
tick,0x7ffdf681f424,78113083,0,0x0,8
tick,0x7ffdf681f424,78115093,0,0x0,8
tick,0x7ffdf681f424,78117081,0,0x0,8
tick,0x7ffdf681f424,78119063,0,0x0,8
tick,0x7ffdf681f424,78121053,0,0x0,8
tick,0x7ffdf681f424,78123049,0,0x0,8
tick,0x7ffdf681f424,78125059,0,0x0,8
tick,0x7ffdf681f424,78127051,0,0x0,8
tick,0x7ffdf681f424,78129046,0,0x0,8
tick,0x7ffdf681f424,78131030,0,0x0,8
tick,0x7ffdf681f424,78133030,0,0x0,8
tick,0x7ffdf681f424,78135041,0,0x0,8
tick,0x7ffdf681f424,78137017,0,0x0,8
tick,0x7ffdf681f424,78139013,0,0x0,8
tick,0x7ffdf681f424,78141002,0,0x0,8
tick,0x7ffdf681f424,78142999,0,0x0,8
tick,0x7ffdf681f424,78144989,0,0x0,8
tick,0x7ffdf681f424,78146989,0,0x0,8
tick,0x7ffdf681f424,78148981,0,0x0,8
tick,0x7ffdf681f424,78150982,0,0x0,8
tick,0x7ffdf681f424,78152967,0,0x0,8
tick,0x7ffdf681f424,78175278,0,0x0,8
tick,0x7ffdf681f424,78178643,0,0x0,8
tick,0x7ffdf681f424,78179908,0,0x0,8
tick,0x7ffdf681f424,78181895,0,0x0,8
tick,0x7ffdf681f424,78184007,0,0x0,8
tick,0x7ffdf681f424,78191788,0,0x0,8
tick,0x7ffdf681f424,78192896,0,0x0,8
tick,0x7ffdf681f424,78194854,0,0x0,8
tick,0x7ffdf681f424,78196850,0,0x0,8
tick,0x7ffdf681f424,78198843,0,0x0,8
tick,0x7ffdf681f424,78200843,0,0x0,8
tick,0x7ffdf681f424,78202843,0,0x0,8
tick,0x7ffdf681f424,78204829,0,0x0,8
tick,0x7ffdf681f424,78206822,0,0x0,8
tick,0x7ffdf681f424,78208829,0,0x0,8
tick,0x7ffdf681f424,78210838,0,0x0,8
tick,0x7ffdf681f424,78212816,0,0x0,8
tick,0x7ffdf681f424,78214822,0,0x0,8
tick,0x7ffdf681f424,78216803,0,0x0,8
tick,0x7ffdf681f424,78218819,0,0x0,8
tick,0x7ffdf681f424,78220796,0,0x0,8
tick,0x7ffdf681f424,78222799,0,0x0,8
tick,0x7ffdf681f424,78224794,0,0x0,8
tick,0x7ffdf681f424,78226784,0,0x0,8
tick,0x7ffdf681f424,78228769,0,0x0,8
tick,0x7ffdf681f424,78230766,0,0x0,8
tick,0x7ffdf681f424,78244732,0,0x0,8
tick,0x7ffdf681f424,78246738,0,0x0,8
tick,0x7ffdf681f424,78248851,0,0x0,8
tick,0x7ffdf681f424,78250769,0,0x0,8
tick,0x7ffdf681f424,78251810,0,0x0,8
tick,0x7ffdf681f424,78253786,0,0x0,8
tick,0x7ffdf681f424,78255744,0,0x0,8
tick,0x7ffdf681f424,78257690,0,0x0,8
tick,0x7ffdf681f424,78259720,0,0x0,8
tick,0x7ffdf681f424,78261690,0,0x0,8
tick,0x7ffdf681f424,78263676,0,0x0,8
tick,0x7ffdf681f424,78265671,0,0x0,8
tick,0x7ffdf681f424,78267680,0,0x0,8
tick,0x7ffdf681f424,78269660,0,0x0,8
tick,0x7ffdf681f424,78273725,0,0x0,8
tick,0x7ffdf681f424,78276302,0,0x0,8
tick,0x7ffdf681f424,78277651,0,0x0,8
tick,0x7ffdf681f424,78279660,0,0x0,8
tick,0x7ffdf681f424,78281632,0,0x0,8
tick,0x7ffdf681f424,78283655,0,0x0,8
tick,0x7ffdf681f424,78285623,0,0x0,8
tick,0x7ffdf681f424,78287608,0,0x0,8
tick,0x7ffdf681f424,78289615,0,0x0,8
tick,0x7ffdf681f424,78291686,0,0x0,8
tick,0x7ffdf681f424,78294047,0,0x0,8
tick,0x7ffdf681f424,78295592,0,0x0,8
tick,0x7ffdf681f424,78297589,0,0x0,8
tick,0x7ffdf681f424,78299575,0,0x0,8
tick,0x7ffdf681f424,78301575,0,0x0,8
tick,0x7ffdf681f424,78303563,0,0x0,8
tick,0x7ffdf681f424,78305568,0,0x0,8
tick,0x7ffdf681f424,78317993,0,0x0,8
tick,0x7ffdf681f424,78318033,0,0x0,8
tick,0x7ffdf681f424,78319529,0,0x0,8
tick,0x7ffdf681f424,78321603,0,0x0,8
tick,0x7ffdf681f424,78323579,0,0x0,8
tick,0x7ffdf681f424,78325806,0,0x0,8
tick,0x7ffdf681f424,78327508,0,0x0,8
tick,0x7ffdf681f424,78329499,0,0x0,8
tick,0x7ffdf681f424,78331493,0,0x0,8
tick,0x7ffdf681f424,78333483,0,0x0,8
tick,0x7ffdf681f424,78335481,0,0x0,8
tick,0x7ffdf681f424,78337471,0,0x0,8
tick,0x7ffdf681f424,78339504,0,0x0,8
tick,0x7ffdf681f424,78341465,0,0x0,8
tick,0x7ffdf681f424,78343461,0,0x0,8
tick,0x7ffdf681f424,78345455,0,0x0,8
tick,0x7ffdf681f424,78347445,0,0x0,8
tick,0x7ffdf681f424,78349442,0,0x0,8
tick,0x7ffdf681f424,78351438,0,0x0,8
tick,0x7ffdf681f424,78353431,0,0x0,8
tick,0x7ffdf681f424,78355426,0,0x0,8
tick,0x7ffdf681f424,78357418,0,0x0,8
tick,0x7ffdf681f424,78359422,0,0x0,8
tick,0x7ffdf681f424,78361423,0,0x0,8
tick,0x7ffdf681f424,78363635,0,0x0,8
tick,0x7ffdf681f424,78374812,0,0x0,8
tick,0x7ffdf681f424,78376381,0,0x0,8
tick,0x7ffdf681f424,78378381,0,0x0,8
tick,0x7ffdf681f424,78380549,0,0x0,8
tick,0x7ffdf681f424,78382379,0,0x0,8
tick,0x7ffdf681f424,78384472,0,0x0,8
tick,0x7ffdf681f424,78386347,0,0x0,8
tick,0x7ffdf681f424,78388338,0,0x0,8
tick,0x7ffdf681f424,78390330,0,0x0,8
tick,0x7ffdf681f424,78392335,0,0x0,8
tick,0x7ffdf681f424,78394325,0,0x0,8
tick,0x7ffdf681f424,78396616,0,0x0,8
tick,0x7ffdf681f424,78401052,0,0x0,8
tick,0x7ffdf681f424,78409300,0,0x0,8
tick,0x7ffdf681f424,78411282,0,0x0,8
tick,0x7ffdf681f424,78413279,0,0x0,8
tick,0x7ffdf681f424,78415325,0,0x0,8
tick,0x7ffdf681f424,78417390,0,0x0,8
tick,0x7ffdf681f424,78419258,0,0x0,8
tick,0x7ffdf681f424,78421249,0,0x0,8
tick,0x7ffdf681f424,78423244,0,0x0,8
tick,0x7ffdf681f424,78425239,0,0x0,8
tick,0x7ffdf681f424,78427233,0,0x0,8
tick,0x7ffdf681f424,78429224,0,0x0,8
tick,0x7ffdf681f424,78431227,0,0x0,8
tick,0x7ffdf681f424,78433379,0,0x0,8
tick,0x7ffdf681f424,78435360,0,0x0,8
tick,0x7ffdf681f424,78437219,0,0x0,8
tick,0x7ffdf681f424,78439239,0,0x0,8
tick,0x7ffdf681f424,78441205,0,0x0,8
tick,0x7ffdf681f424,78443276,0,0x0,8
tick,0x7ffdf681f424,78445195,0,0x0,8
tick,0x7ffdf681f424,78447188,0,0x0,8
tick,0x7ffdf681f424,78449183,0,0x0,8
tick,0x7ffdf681f424,78451379,0,0x0,8
tick,0x7ffdf681f424,78453194,0,0x0,8
tick,0x7ffdf681f424,78455441,0,0x0,8
tick,0x7ffdf681f424,78457165,0,0x0,8
tick,0x7ffdf681f424,78459151,0,0x0,8
tick,0x7ffdf681f424,78461145,0,0x0,8
tick,0x7ffdf681f424,78463134,0,0x0,8
tick,0x7ffdf681f424,78465132,0,0x0,8
tick,0x7ffdf681f424,78467127,0,0x0,8
tick,0x7ffdf681f424,78469122,0,0x0,8
tick,0x7ffdf681f424,78471112,0,0x0,8
tick,0x7ffdf681f424,78473105,0,0x0,8
tick,0x7ffdf681f424,78475100,0,0x0,8
tick,0x7ffdf681f424,78477107,0,0x0,8
tick,0x7ffdf681f424,78489090,0,0x0,8
tick,0x7ffdf681f424,78491076,0,0x0,8
tick,0x7ffdf681f424,78493062,0,0x0,8
tick,0x7ffdf681f424,78495056,0,0x0,8
tick,0x7ffdf681f424,78497092,0,0x0,8
tick,0x7ffdf681f424,78499040,0,0x0,8
tick,0x7ffdf681f424,78501147,0,0x0,8
tick,0x7ffdf681f424,78503035,0,0x0,8
tick,0x7ffdf681f424,78505031,0,0x0,8
tick,0x7ffdf681f424,78507026,0,0x0,8
tick,0x7ffdf681f424,78509028,0,0x0,8
tick,0x7ffdf681f424,78511015,0,0x0,8
tick,0x7ffdf681f424,78513013,0,0x0,8
tick,0x7ffdf681f424,78514996,0,0x0,8
tick,0x7ffdf681f424,78516989,0,0x0,8
tick,0x7ffdf681f424,78518986,0,0x0,8
tick,0x7ffdf681f424,78520980,0,0x0,8
tick,0x7ffdf681f424,78522970,0,0x0,8
tick,0x7ffdf681f424,78524978,0,0x0,8
tick,0x7ffdf681f424,78526999,0,0x0,8
tick,0x7ffdf681f424,78528961,0,0x0,8
tick,0x7ffdf681f424,78530960,0,0x0,8
tick,0x7ffdf681f424,78532949,0,0x0,8
tick,0x7ffdf681f424,78534951,0,0x0,8
tick,0x7ffdf681f424,78554316,0,0x0,8
tick,0x7ffdf681f424,78555267,0,0x0,8
tick,0x7ffdf681f424,78558170,0,0x0,8
tick,0x7ffdf681f424,78561456,0,0x0,8
tick,0x7ffdf681f424,78562880,0,0x0,8
tick,0x7ffdf681f424,78564871,0,0x0,8
tick,0x7ffdf681f424,78566865,0,0x0,8
tick,0x7ffdf681f424,78568870,0,0x0,8
tick,0x7ffdf681f424,78570859,0,0x0,8
tick,0x7ffdf681f424,78572844,0,0x0,8
tick,0x7ffdf681f424,78574852,0,0x0,8
tick,0x7ffdf681f424,78576845,0,0x0,8
tick,0x7ffdf681f424,78578836,0,0x0,8
tick,0x7ffdf681f424,78580825,0,0x0,8
tick,0x7ffdf681f424,78582820,0,0x0,8
tick,0x7ffdf681f424,78584821,0,0x0,8
tick,0x7ffdf681f424,78586818,0,0x0,8
tick,0x7ffdf681f424,78589063,0,0x0,8
tick,0x7ffdf681f424,78590838,0,0x0,8
tick,0x7ffdf681f424,78592817,0,0x0,8
tick,0x7ffdf681f424,78594789,0,0x0,8
tick,0x7ffdf681f424,78596791,0,0x0,8
tick,0x7ffdf681f424,78598784,0,0x0,8
tick,0x7ffdf681f424,78600775,0,0x0,8
tick,0x7ffdf681f424,78602767,0,0x0,8
tick,0x7ffdf681f424,78604766,0,0x0,8
tick,0x7ffdf681f424,78606758,0,0x0,8
tick,0x7ffdf681f424,78608745,0,0x0,8
tick,0x7ffdf681f424,78610752,0,0x0,8
tick,0x7ffdf681f424,78612738,0,0x0,8
tick,0x7ffdf681f424,78614738,0,0x0,8
tick,0x7ffdf681f424,78616732,0,0x0,8
tick,0x7ffdf681f424,78618731,0,0x0,8
tick,0x7ffdf681f424,78620720,0,0x0,8
tick,0x7ffdf681f424,78622709,0,0x0,8
tick,0x7ffdf681f424,78631473,0,0x0,8
tick,0x7ffdf681f424,78636662,0,0x0,8
tick,0x7ffdf681f424,78640261,0,0x0,8
tick,0x7ffdf681f424,78641665,0,0x0,8
tick,0x7ffdf681f424,78643660,0,0x0,8
tick,0x7ffdf681f424,78645656,0,0x0,8
tick,0x7ffdf681f424,78647921,0,0x0,8
tick,0x7ffdf681f424,78649663,0,0x0,8
tick,0x7ffdf681f424,78651661,0,0x0,8
tick,0x7ffdf681f424,78653630,0,0x0,8
tick,0x7ffdf681f424,78656715,0,0x0,8
tick,0x7ffdf681f424,78657620,0,0x0,8
tick,0x7ffdf681f424,78666877,0,0x0,8
tick,0x7ffdf681f424,78668601,0,0x0,8
tick,0x7ffdf681f424,78670587,0,0x0,8
tick,0x7ffdf681f424,78672579,0,0x0,8
tick,0x7ffdf681f424,78674570,0,0x0,8
tick,0x7ffdf681f424,78676578,0,0x0,8
tick,0x7ffdf681f424,78678571,0,0x0,8
tick,0x7ffdf681f424,78680571,0,0x0,8
tick,0x7ffdf681f424,78682561,0,0x0,8
tick,0x7ffdf681f424,78684550,0,0x0,8
tick,0x7ffdf681f424,78686540,0,0x0,8
tick,0x7ffdf681f424,78688538,0,0x0,8
tick,0x7ffdf681f424,78690526,0,0x0,8
tick,0x7ffdf681f424,78692522,0,0x0,8
tick,0x7ffdf681f424,78694514,0,0x0,8
tick,0x7ffdf681f424,78696507,0,0x0,8
tick,0x7ffdf681f424,78698500,0,0x0,8
tick,0x7ffdf681f424,78700500,0,0x0,8
tick,0x7ffdf681f424,78702496,0,0x0,8
tick,0x7ffdf681f424,78704495,0,0x0,8
tick,0x7ffdf681f424,78706604,0,0x0,8
tick,0x7ffdf681f424,78708492,0,0x0,8
tick,0x7ffdf681f424,78715537,0,0x0,8
tick,0x7ffdf681f424,78717485,0,0x0,8
tick,0x7ffdf681f424,78719463,0,0x0,8
tick,0x7ffdf681f424,78721448,0,0x0,8
tick,0x7ffdf681f424,78723436,0,0x0,8
tick,0x7ffdf681f424,78725437,0,0x0,8
tick,0x7ffdf681f424,78727440,0,0x0,8
tick,0x7ffdf681f424,78742064,0,0x0,8
tick,0x7ffdf681f424,78743394,0,0x0,8
tick,0x7ffdf681f424,78745425,0,0x0,8
tick,0x7ffdf681f424,78747386,0,0x0,8
tick,0x7ffdf681f424,78749371,0,0x0,8
tick,0x7ffdf681f424,78751369,0,0x0,8
tick,0x7ffdf681f424,78753360,0,0x0,8
tick,0x7ffdf681f424,78755356,0,0x0,8
tick,0x7ffdf681f424,78757419,0,0x0,8
tick,0x7ffdf681f424,78759338,0,0x0,8
tick,0x7ffdf681f424,78761420,0,0x0,8
tick,0x7ffdf681f424,78763400,0,0x0,8
tick,0x7ffdf681f424,78765395,0,0x0,8
tick,0x7ffdf681f424,78767353,0,0x0,8
tick,0x7ffdf681f424,78769349,0,0x0,8
tick,0x7ffdf681f424,78771337,0,0x0,8
tick,0x7ffdf681f424,78773364,0,0x0,8
tick,0x7ffdf681f424,78775356,0,0x0,8
tick,0x7ffdf681f424,78777367,0,0x0,8
tick,0x7ffdf681f424,78779342,0,0x0,8
tick,0x7ffdf681f424,78781336,0,0x0,8
tick,0x7ffdf681f424,78783319,0,0x0,8
tick,0x7ffdf681f424,78785335,0,0x0,8
tick,0x7ffdf681f424,78787314,0,0x0,8
tick,0x7ffdf681f424,78789310,0,0x0,8
tick,0x7ffdf681f424,78791300,0,0x0,8
tick,0x7ffdf681f424,78793319,0,0x0,8
tick,0x7ffdf681f424,78795367,0,0x0,8
tick,0x7ffdf681f424,78797359,0,0x0,8
tick,0x7ffdf681f424,78799358,0,0x0,8
tick,0x7ffdf681f424,78801366,0,0x0,8
tick,0x7ffdf681f424,78803479,0,0x0,8
tick,0x7ffdf681f424,78805395,0,0x0,8
tick,0x7ffdf681f424,78807429,0,0x0,8
tick,0x7ffdf681f424,78809403,0,0x0,8
tick,0x7ffdf681f424,78811408,0,0x0,8
tick,0x7ffdf681f424,78813430,0,0x0,8
tick,0x7ffdf681f424,78815501,0,0x0,8
tick,0x7ffdf681f424,78817576,0,0x0,8
tick,0x7ffdf681f424,78819512,0,0x0,8
tick,0x7ffdf681f424,78821603,0,0x0,8
tick,0x7ffdf681f424,78823732,0,0x0,8
tick,0x7ffdf681f424,78825877,0,0x0,8
tick,0x7ffdf681f424,78827747,0,0x0,8
tick,0x7ffdf681f424,78829682,0,0x0,8
tick,0x7ffdf681f424,78830843,0,0x0,8
tick,0x7ffdf681f424,78832809,0,0x0,8
tick,0x7ffdf681f424,78834842,0,0x0,8
tick,0x7ffdf681f424,78836785,0,0x0,8
tick,0x7ffdf681f424,78838810,0,0x0,8
tick,0x7ffdf681f424,78840833,0,0x0,8
tick,0x7ffdf681f424,78842778,0,0x0,8
tick,0x7ffdf681f424,78844762,0,0x0,8
tick,0x7ffdf681f424,78846759,0,0x0,8
tick,0x7ffdf681f424,78848763,0,0x0,8
tick,0x7ffdf681f424,78850794,0,0x0,8
tick,0x7ffdf681f424,78852743,0,0x0,8
tick,0x7ffdf681f424,78854780,0,0x0,8
tick,0x7ffdf681f424,78856774,0,0x0,8
tick,0x7ffdf681f424,78858795,0,0x0,8
tick,0x7ffdf681f424,78860714,0,0x0,8
tick,0x7ffdf681f424,78862753,0,0x0,8
tick,0x7ffdf681f424,78864756,0,0x0,8
tick,0x7ffdf681f424,78866703,0,0x0,8
tick,0x7ffdf681f424,78868639,0,0x0,8
tick,0x7ffdf681f424,78870758,0,0x0,8
tick,0x7ffdf681f424,78872741,0,0x0,8
tick,0x7ffdf681f424,78874732,0,0x0,8
tick,0x7ffdf681f424,78876729,0,0x0,8
tick,0x7ffdf681f424,78878723,0,0x0,8
tick,0x7ffdf681f424,78880705,0,0x0,8
tick,0x7ffdf681f424,78882715,0,0x0,8
tick,0x7ffdf681f424,78884742,0,0x0,8
tick,0x7ffdf681f424,78886699,0,0x0,8
tick,0x7ffdf681f424,78888696,0,0x0,8
tick,0x7ffdf681f424,78890697,0,0x0,8
tick,0x7ffdf681f424,78892570,0,0x0,8
tick,0x7ffdf681f424,78894679,0,0x0,8
tick,0x7ffdf681f424,78896678,0,0x0,8
tick,0x7ffdf681f424,78898681,0,0x0,8
tick,0x7ffdf681f424,78900620,0,0x0,8
tick,0x7ffdf681f424,78902603,0,0x0,8
tick,0x7ffdf681f424,78904612,0,0x0,8
tick,0x7ffdf681f424,78906619,0,0x0,8
tick,0x7ffdf681f424,78908643,0,0x0,8
tick,0x7ffdf681f424,78910639,0,0x0,8
tick,0x7ffdf681f424,78912523,0,0x0,8
tick,0x7ffdf681f424,78914540,0,0x0,8
tick,0x7ffdf681f424,78916502,0,0x0,8
tick,0x7ffdf681f424,78918488,0,0x0,8
tick,0x7ffdf681f424,78919605,0,0x0,8
tick,0x7ffdf681f424,78920796,0,0x0,8
tick,0x7ffdf681f424,78922816,0,0x0,8
tick,0x7ffdf681f424,78924761,0,0x0,8
tick,0x7ffdf681f424,78926744,0,0x0,8
tick,0x7ffdf681f424,78927921,0,0x0,8
tick,0x7ffdf681f424,78929879,0,0x0,8
tick,0x7ffdf681f424,78931803,0,0x0,8
tick,0x7ffdf681f424,78933860,0,0x0,8
tick,0x7ffdf681f424,78935848,0,0x0,8
tick,0x7ffdf681f424,78937809,0,0x0,8
tick,0x7ffdf681f424,78939820,0,0x0,8
tick,0x7ffdf681f424,78941710,0,0x0,8
tick,0x7ffdf681f424,78943720,0,0x0,8
tick,0x7ffdf681f424,78945728,0,0x0,8
tick,0x7ffdf681f424,78947699,0,0x0,8
tick,0x7ffdf681f424,78949701,0,0x0,8
tick,0x7ffdf681f424,78951700,0,0x0,8
tick,0x7ffdf681f424,78953686,0,0x0,8
tick,0x7ffdf681f424,78955682,0,0x0,8
tick,0x7ffdf681f424,78957668,0,0x0,8
tick,0x7ffdf681f424,78959663,0,0x0,8
tick,0x7ffdf681f424,78961668,0,0x0,8
tick,0x7ffdf681f424,78963658,0,0x0,8
tick,0x7ffdf681f424,78965681,0,0x0,8
tick,0x7ffdf681f424,78967700,0,0x0,8
tick,0x7ffdf681f424,78969679,0,0x0,8
tick,0x7ffdf681f424,78971710,0,0x0,8
tick,0x7ffdf681f424,78973630,0,0x0,8
tick,0x7ffdf681f424,78975654,0,0x0,8
tick,0x7ffdf681f424,78977641,0,0x0,8
tick,0x7ffdf681f424,78979630,0,0x0,8
tick,0x7ffdf681f424,78981656,0,0x0,8
tick,0x7ffdf681f424,78983607,0,0x0,8
tick,0x7ffdf681f424,78985593,0,0x0,8
tick,0x7ffdf681f424,78987629,0,0x0,8
tick,0x7ffdf681f424,78989589,0,0x0,8
tick,0x7ffdf681f424,78991624,0,0x0,8
tick,0x7ffdf681f424,78993631,0,0x0,8
tick,0x7ffdf681f424,78995613,0,0x0,8
tick,0x7ffdf681f424,78997607,0,0x0,8
tick,0x7ffdf681f424,78999553,0,0x0,8
tick,0x7ffdf681f424,79001611,0,0x0,8
tick,0x7ffdf681f424,79003580,0,0x0,8
tick,0x7ffdf681f424,79005592,0,0x0,8
tick,0x7ffdf681f424,79007583,0,0x0,8
tick,0x7ffdf681f424,79009532,0,0x0,8
tick,0x7ffdf681f424,79011591,0,0x0,8
tick,0x7ffdf681f424,79013534,0,0x0,8
tick,0x7ffdf681f424,79015528,0,0x0,8
tick,0x7ffdf681f424,79017542,0,0x0,8
tick,0x7ffdf681f424,79019549,0,0x0,8
tick,0x7ffdf681f424,79021577,0,0x0,8
tick,0x7ffdf681f424,79023560,0,0x0,8
tick,0x7ffdf681f424,79025539,0,0x0,8
tick,0x7ffdf681f424,79027547,0,0x0,8
tick,0x7ffdf681f424,79029524,0,0x0,8
tick,0x7ffdf681f424,79031514,0,0x0,8
tick,0x7ffdf681f424,79033530,0,0x0,8
tick,0x7ffdf681f424,79035534,0,0x0,8
tick,0x7ffdf681f424,79037486,0,0x0,8
tick,0x7ffdf681f424,79039483,0,0x0,8
tick,0x7ffdf681f424,79041494,0,0x0,8
tick,0x7ffdf681f424,79043476,0,0x0,8
tick,0x7ffdf681f424,79045474,0,0x0,8
tick,0x7ffdf681f424,79047504,0,0x0,8
tick,0x7ffdf681f424,79049438,0,0x0,8
tick,0x7ffdf681f424,79051425,0,0x0,8
tick,0x7ffdf681f424,79053455,0,0x0,8
tick,0x7ffdf681f424,79055442,0,0x0,8
tick,0x7ffdf681f424,79057435,0,0x0,8
tick,0x7ffdf681f424,79059396,0,0x0,8
tick,0x7ffdf681f424,79061394,0,0x0,8
tick,0x7ffdf681f424,79063393,0,0x0,8
tick,0x7ffdf681f424,79065372,0,0x0,8
tick,0x7ffdf681f424,79067427,0,0x0,8
tick,0x7ffdf681f424,79069412,0,0x0,8
tick,0x7ffdf681f424,79071384,0,0x0,8
tick,0x7ffdf681f424,79073378,0,0x0,8
tick,0x7ffdf681f424,79075367,0,0x0,8
tick,0x7ffdf681f424,79077375,0,0x0,8
tick,0x7ffdf681f424,79079389,0,0x0,8
tick,0x7ffdf681f424,79081380,0,0x0,8
tick,0x7ffdf681f424,79083344,0,0x0,8
tick,0x7ffdf681f424,79085330,0,0x0,8
tick,0x7ffdf681f424,79087332,0,0x0,8
tick,0x7ffdf681f424,79089336,0,0x0,8
tick,0x7ffdf681f424,79091307,0,0x0,8
tick,0x7ffdf681f424,79093292,0,0x0,8
tick,0x7ffdf681f424,79095288,0,0x0,8
tick,0x7ffdf681f424,79097337,0,0x0,8
tick,0x7ffdf681f424,79099338,0,0x0,8
tick,0x7ffdf681f424,79101353,0,0x0,8
tick,0x7ffdf681f424,79103304,0,0x0,8
tick,0x7ffdf681f424,79105294,0,0x0,8
tick,0x7ffdf681f424,79107316,0,0x0,8
tick,0x7ffdf681f424,79109297,0,0x0,8
tick,0x7ffdf681f424,79111320,0,0x0,8
tick,0x7ffdf681f424,79113309,0,0x0,8
tick,0x7ffdf681f424,79115300,0,0x0,8
tick,0x7ffdf681f424,79117316,0,0x0,8
tick,0x7ffdf681f424,79119288,0,0x0,8
tick,0x7ffdf681f424,79121289,0,0x0,8
tick,0x7ffdf681f424,79123260,0,0x0,8
tick,0x7ffdf681f424,79125300,0,0x0,8
tick,0x7ffdf681f424,79127276,0,0x0,8
tick,0x7ffdf681f424,79129271,0,0x0,8
tick,0x7ffdf681f424,79131245,0,0x0,8
tick,0x7ffdf681f424,79133263,0,0x0,8
tick,0x7ffdf681f424,79135319,0,0x0,8
tick,0x7ffdf681f424,79137326,0,0x0,8
tick,0x7ffdf681f424,79139330,0,0x0,8
tick,0x7ffdf681f424,79141239,0,0x0,8
tick,0x7ffdf681f424,79142383,0,0x0,8
tick,0x7ffdf681f424,79144331,0,0x0,8
tick,0x7ffdf681f424,79146332,0,0x0,8
tick,0x7ffdf681f424,79148314,0,0x0,8
tick,0x7ffdf681f424,79150318,0,0x0,8
tick,0x7ffdf681f424,79152286,0,0x0,8
tick,0x7ffdf681f424,79154318,0,0x0,8
tick,0x7ffdf681f424,79156195,0,0x0,8
tick,0x7ffdf681f424,79157334,0,0x0,8
tick,0x7ffdf681f424,79159254,0,0x0,8
tick,0x7ffdf681f424,79161314,0,0x0,8
tick,0x7ffdf681f424,79163283,0,0x0,8
tick,0x7ffdf681f424,79165289,0,0x0,8
tick,0x7ffdf681f424,79167256,0,0x0,8
tick,0x7ffdf681f424,79169284,0,0x0,8
tick,0x7ffdf681f424,79171278,0,0x0,8
tick,0x7ffdf681f424,79173319,0,0x0,8
tick,0x7ffdf681f424,79175280,0,0x0,8
tick,0x7ffdf681f424,79177333,0,0x0,8
tick,0x7ffdf681f424,79179337,0,0x0,8
tick,0x7ffdf681f424,79181364,0,0x0,8
tick,0x7ffdf681f424,79183352,0,0x0,8
tick,0x7ffdf681f424,79185308,0,0x0,8
tick,0x7ffdf681f424,79187415,0,0x0,8
tick,0x7ffdf681f424,79189416,0,0x0,8
tick,0x7ffdf681f424,79191383,0,0x0,8
tick,0x7ffdf681f424,79193408,0,0x0,8
tick,0x7ffdf681f424,79195246,0,0x0,8
tick,0x7ffdf681f424,79197329,0,0x0,8
tick,0x7ffdf681f424,79199318,0,0x0,8
tick,0x7ffdf681f424,79201332,0,0x0,8
tick,0x7ffdf681f424,79203302,0,0x0,8
tick,0x7ffdf681f424,79205286,0,0x0,8
tick,0x7ffdf681f424,79207353,0,0x0,8
tick,0x7ffdf681f424,79209305,0,0x0,8
tick,0x7ffdf681f424,79211357,0,0x0,8
tick,0x7ffdf681f424,79213352,0,0x0,8
tick,0x7ffdf681f424,79215324,0,0x0,8
tick,0x7ffdf681f424,79217247,0,0x0,8
tick,0x7ffdf681f424,79219284,0,0x0,8
tick,0x7ffdf681f424,79221370,0,0x0,8
tick,0x7ffdf681f424,79223373,0,0x0,8
tick,0x7ffdf681f424,79225416,0,0x0,8
tick,0x7ffdf681f424,79227464,0,0x0,8
tick,0x7ffdf681f424,79229426,0,0x0,8
tick,0x7ffdf681f424,79231411,0,0x0,8
tick,0x7ffdf681f424,79233394,0,0x0,8
tick,0x7ffdf681f424,79235394,0,0x0,8
tick,0x7ffdf681f424,79237418,0,0x0,8
tick,0x7ffdf681f424,79239416,0,0x0,8
tick,0x7ffdf681f424,79241406,0,0x0,8
tick,0x7ffdf681f424,79243373,0,0x0,8
tick,0x7ffdf681f424,79245441,0,0x0,8
tick,0x7ffdf681f424,79247474,0,0x0,8
tick,0x7ffdf681f424,79249460,0,0x0,8
tick,0x7ffdf681f424,79251491,0,0x0,8
tick,0x7ffdf681f424,79253626,0,0x0,8
tick,0x7ffdf681f424,79255570,0,0x0,8
tick,0x7ffdf681f424,79257503,0,0x0,8
tick,0x7ffdf681f424,79259580,0,0x0,8
tick,0x7ffdf681f424,79261578,0,0x0,8
tick,0x7ffdf681f424,79262747,0,0x0,8
tick,0x7ffdf681f424,79264859,0,0x0,8
tick,0x7ffdf681f424,79266865,0,0x0,8
tick,0x7ffdf681f424,79268825,0,0x0,8
tick,0x7ffdf681f424,79270794,0,0x0,8
tick,0x7ffdf681f424,79272792,0,0x0,8
tick,0x7ffdf681f424,79274816,0,0x0,8
tick,0x7ffdf681f424,79276879,0,0x0,8
tick,0x7ffdf681f424,79278776,0,0x0,8
tick,0x7ffdf681f424,79280824,0,0x0,8
tick,0x7ffdf681f424,79282789,0,0x0,8
tick,0x7ffdf681f424,79284744,0,0x0,8
tick,0x7ffdf681f424,79286784,0,0x0,8
tick,0x7ffdf681f424,79288732,0,0x0,8
tick,0x7ffdf681f424,79290859,0,0x0,8
tick,0x7ffdf681f424,79291999,0,0x0,8
tick,0x7ffdf681f424,79294008,0,0x0,8
tick,0x7ffdf681f424,79295254,0,0x0,8
tick,0x7ffdf681f424,79297248,0,0x0,8
tick,0x7ffdf681f424,79298426,0,0x0,8
tick,0x7ffdf681f424,79299670,0,0x0,8
tick,0x7ffdf681f424,79301689,0,0x0,8
tick,0x7ffdf681f424,79303620,0,0x0,8
tick,0x7ffdf681f424,79304744,0,0x0,8
tick,0x7ffdf681f424,79305979,0,0x0,8
tick,0x7ffdf681f424,79307841,0,0x0,8
tick,0x7ffdf681f424,79308976,0,0x0,8
tick,0x7ffdf681f424,79310130,0,0x0,8
tick,0x7ffdf681f424,79312146,0,0x0,8
tick,0x7ffdf681f424,79314020,0,0x0,8
tick,0x7ffdf681f424,79316063,0,0x0,8
tick,0x7ffdf681f424,79318044,0,0x0,8
tick,0x7ffdf681f424,79320047,0,0x0,8
tick,0x7ffdf681f424,79321218,0,0x0,8
tick,0x7ffdf681f424,79322341,0,0x0,8
tick,0x7ffdf681f424,79323395,0,0x0,8
tick,0x7ffdf681f424,79325440,0,0x0,8
tick,0x7ffdf681f424,79327405,0,0x0,8
tick,0x7ffdf681f424,79328614,0,0x0,8
tick,0x7ffdf681f424,79329773,0,0x0,8
tick,0x7ffdf681f424,79330924,0,0x0,8
tick,0x7ffdf681f424,79332910,0,0x0,8
tick,0x7ffdf681f424,79334881,0,0x0,8
tick,0x7ffdf681f424,79336056,0,0x0,8
tick,0x7ffdf681f424,79337962,0,0x0,8
tick,0x7ffdf681f424,79340115,0,0x0,8
tick,0x7ffdf681f424,79341344,0,0x0,8
tick,0x7ffdf681f424,79343355,0,0x0,8
tick,0x7ffdf681f424,79345472,0,0x0,8
tick,0x7ffdf681f424,79347456,0,0x0,8
tick,0x7ffdf681f424,79349396,0,0x0,8
tick,0x7ffdf681f424,79351394,0,0x0,8
tick,0x7ffdf681f424,79353422,0,0x0,8
tick,0x7ffdf681f424,79355382,0,0x0,8
tick,0x7ffdf681f424,79356493,0,0x0,8
tick,0x7ffdf681f424,79358365,0,0x0,8
tick,0x7ffdf681f424,79360503,0,0x0,8
tick,0x7ffdf681f424,79362492,0,0x0,8
tick,0x7ffdf681f424,79364501,0,0x0,8
tick,0x7ffdf681f424,79366484,0,0x0,8
tick,0x7ffdf681f424,79368351,0,0x0,8
tick,0x7ffdf681f424,79370481,0,0x0,8
tick,0x7ffdf681f424,79372275,0,0x0,8
tick,0x7ffdf681f424,79374338,0,0x0,8
tick,0x7ffdf681f424,79376376,0,0x0,8
tick,0x7ffdf681f424,79378332,0,0x0,8
tick,0x7ffdf681f424,79380369,0,0x0,8
tick,0x7ffdf681f424,79381563,0,0x0,8
tick,0x7ffdf681f424,79383381,0,0x0,8
tick,0x7ffdf681f424,79385405,0,0x0,8
tick,0x7ffdf681f424,79387396,0,0x0,8
tick,0x7ffdf681f424,79389388,0,0x0,8
tick,0x7ffdf681f424,79391396,0,0x0,8
tick,0x7ffdf681f424,79393380,0,0x0,8
tick,0x7ffdf681f424,79394527,0,0x0,8
tick,0x7ffdf681f424,79396471,0,0x0,8
tick,0x7ffdf681f424,79398440,0,0x0,8
tick,0x7ffdf681f424,79400443,0,0x0,8
tick,0x7ffdf681f424,79402438,0,0x0,8
tick,0x7ffdf681f424,79404487,0,0x0,8
tick,0x7ffdf681f424,79406408,0,0x0,8
tick,0x7ffdf681f424,79408442,0,0x0,8
tick,0x7ffdf681f424,79410494,0,0x0,8
tick,0x7ffdf681f424,79412493,0,0x0,8
tick,0x7ffdf681f424,79414405,0,0x0,8
tick,0x7ffdf681f424,79416421,0,0x0,8
tick,0x7ffdf681f424,79418428,0,0x0,8
tick,0x7ffdf681f424,79420469,0,0x0,8
tick,0x7ffdf681f424,79422523,0,0x0,8
tick,0x7ffdf681f424,79424447,0,0x0,8
tick,0x7ffdf681f424,79426565,0,0x0,8
tick,0x7ffdf681f424,79428542,0,0x0,8
tick,0x7ffdf681f424,79430526,0,0x0,8
tick,0x7ffdf681f424,79432531,0,0x0,8
tick,0x7ffdf681f424,79434555,0,0x0,8
tick,0x7ffdf681f424,79436498,0,0x0,8
tick,0x7ffdf681f424,79438534,0,0x0,8
tick,0x7ffdf681f424,79440593,0,0x0,8
tick,0x7ffdf681f424,79442642,0,0x0,8
tick,0x7ffdf681f424,79444646,0,0x0,8
tick,0x7ffdf681f424,79445807,0,0x0,8
tick,0x7ffdf681f424,79447642,0,0x0,8
tick,0x7ffdf681f424,79449720,0,0x0,8
tick,0x7ffdf681f424,79451741,0,0x0,8
tick,0x7ffdf681f424,79453688,0,0x0,8
tick,0x7ffdf681f424,79455844,0,0x0,8
tick,0x7ffdf681f424,79457753,0,0x0,8
tick,0x7ffdf681f424,79459700,0,0x0,8
tick,0x7ffdf681f424,79461709,0,0x0,8
tick,0x7ffdf681f424,79463756,0,0x0,8
tick,0x7ffdf681f424,79465712,0,0x0,8
tick,0x7ffdf681f424,79467659,0,0x0,8
tick,0x7ffdf681f424,79469696,0,0x0,8
tick,0x7ffdf681f424,79471727,0,0x0,8
tick,0x7ffdf681f424,79473705,0,0x0,8
tick,0x7ffdf681f424,79475641,0,0x0,8
tick,0x7ffdf681f424,79477633,0,0x0,8
tick,0x7ffdf681f424,79479644,0,0x0,8
tick,0x7ffdf681f424,79481615,0,0x0,8
tick,0x7ffdf681f424,79483669,0,0x0,8
tick,0x7ffdf681f424,79485627,0,0x0,8
tick,0x7ffdf681f424,79487655,0,0x0,8
tick,0x7ffdf681f424,79489649,0,0x0,8
tick,0x7ffdf681f424,79491659,0,0x0,8
tick,0x7ffdf681f424,79493639,0,0x0,8
tick,0x7ffdf681f424,79495637,0,0x0,8
tick,0x7ffdf681f424,79497603,0,0x0,8
tick,0x7ffdf681f424,79499627,0,0x0,8
tick,0x7ffdf681f424,79501548,0,0x0,8
tick,0x7ffdf681f424,79503579,0,0x0,8
tick,0x7ffdf681f424,79505585,0,0x0,8
tick,0x7ffdf681f424,79507546,0,0x0,8
tick,0x7ffdf681f424,79509595,0,0x0,8
tick,0x7ffdf681f424,79511610,0,0x0,8
tick,0x7ffdf681f424,79513613,0,0x0,8
tick,0x7ffdf681f424,79515599,0,0x0,8
tick,0x7ffdf681f424,79517605,0,0x0,8
tick,0x7ffdf681f424,79519599,0,0x0,8
tick,0x7ffdf681f424,79521578,0,0x0,8
tick,0x7ffdf681f424,79523514,0,0x0,8
tick,0x7ffdf681f424,79525568,0,0x0,8
tick,0x7ffdf681f424,79527550,0,0x0,8
tick,0x7ffdf681f424,79529552,0,0x0,8
tick,0x7ffdf681f424,79531476,0,0x0,8
tick,0x7ffdf681f424,79533501,0,0x0,8
tick,0x7ffdf681f424,79535509,0,0x0,8
tick,0x7ffdf681f424,79537516,0,0x0,8
tick,0x7ffdf681f424,79539513,0,0x0,8
tick,0x7ffdf681f424,79541497,0,0x0,8
tick,0x7ffdf681f424,79543512,0,0x0,8
tick,0x7ffdf681f424,79545422,0,0x0,8
tick,0x7ffdf681f424,79547514,0,0x0,8
tick,0x7ffdf681f424,79549507,0,0x0,8
tick,0x7ffdf681f424,79551491,0,0x0,8
tick,0x7ffdf681f424,79553504,0,0x0,8
tick,0x7ffdf681f424,79555496,0,0x0,8
tick,0x7ffdf681f424,79557503,0,0x0,8
tick,0x7ffdf681f424,79559482,0,0x0,8
tick,0x7ffdf681f424,79561480,0,0x0,8
tick,0x7ffdf681f424,79563483,0,0x0,8
tick,0x7ffdf681f424,79565464,0,0x0,8
tick,0x7ffdf681f424,79567461,0,0x0,8
tick,0x7ffdf681f424,79569454,0,0x0,8
tick,0x7ffdf681f424,79571458,0,0x0,8
tick,0x7ffdf681f424,79573449,0,0x0,8
tick,0x7ffdf681f424,79575438,0,0x0,8
tick,0x7ffdf681f424,79577416,0,0x0,8
tick,0x7ffdf681f424,79579416,0,0x0,8
tick,0x7ffdf681f424,79581419,0,0x0,8
tick,0x7ffdf681f424,79583414,0,0x0,8
tick,0x7ffdf681f424,79585369,0,0x0,8
tick,0x7ffdf681f424,79587388,0,0x0,8
tick,0x7ffdf681f424,79589393,0,0x0,8
tick,0x7ffdf681f424,79591399,0,0x0,8
tick,0x7ffdf681f424,79593378,0,0x0,8
tick,0x7ffdf681f424,79595373,0,0x0,8
tick,0x7ffdf681f424,79597369,0,0x0,8
tick,0x7ffdf681f424,79599393,0,0x0,8
tick,0x7ffdf681f424,79601373,0,0x0,8
tick,0x7ffdf681f424,79603365,0,0x0,8
tick,0x7ffdf681f424,79605316,0,0x0,8
tick,0x7ffdf681f424,79607322,0,0x0,8
tick,0x7ffdf681f424,79609319,0,0x0,8
tick,0x7ffdf681f424,79611272,0,0x0,8
tick,0x7ffdf681f424,79613345,0,0x0,8
tick,0x7ffdf681f424,79615297,0,0x0,8
tick,0x7ffdf681f424,79617337,0,0x0,8
tick,0x7ffdf681f424,79619345,0,0x0,8
tick,0x7ffdf681f424,79621319,0,0x0,8
tick,0x7ffdf681f424,79623322,0,0x0,8
tick,0x7ffdf681f424,79625319,0,0x0,8
tick,0x7ffdf681f424,79627332,0,0x0,8
tick,0x7ffdf681f424,79629290,0,0x0,8
tick,0x7ffdf681f424,79631324,0,0x0,8
tick,0x7ffdf681f424,79633327,0,0x0,8
tick,0x7ffdf681f424,79635326,0,0x0,8
tick,0x7ffdf681f424,79637331,0,0x0,8
tick,0x7ffdf681f424,79639342,0,0x0,8
tick,0x7ffdf681f424,79641330,0,0x0,8
tick,0x7ffdf681f424,79643323,0,0x0,8
tick,0x7ffdf681f424,79645249,0,0x0,8
tick,0x7ffdf681f424,79647320,0,0x0,8
tick,0x7ffdf681f424,79649331,0,0x0,8
tick,0x7ffdf681f424,79651204,0,0x0,8
tick,0x7ffdf681f424,79653282,0,0x0,8
tick,0x7ffdf681f424,79655395,0,0x0,8
tick,0x7ffdf681f424,79657284,0,0x0,8
tick,0x7ffdf681f424,79659300,0,0x0,8
tick,0x7ffdf681f424,79661260,0,0x0,8
tick,0x7ffdf681f424,79663305,0,0x0,8
tick,0x7ffdf681f424,79665292,0,0x0,8
tick,0x7ffdf681f424,79667309,0,0x0,8
tick,0x7ffdf681f424,79669286,0,0x0,8
tick,0x7ffdf681f424,79671287,0,0x0,8
tick,0x7ffdf681f424,79673283,0,0x0,8
tick,0x7ffdf681f424,79675281,0,0x0,8
tick,0x7ffdf681f424,79677283,0,0x0,8
tick,0x7ffdf681f424,79679254,0,0x0,8
tick,0x7ffdf681f424,79681261,0,0x0,8
tick,0x7ffdf681f424,79683258,0,0x0,8
tick,0x7ffdf681f424,79685250,0,0x0,8
tick,0x7ffdf681f424,79687241,0,0x0,8
tick,0x7ffdf681f424,79689172,0,0x0,8
tick,0x7ffdf681f424,79691222,0,0x0,8
tick,0x7ffdf681f424,79693238,0,0x0,8
tick,0x7ffdf681f424,79695221,0,0x0,8
tick,0x7ffdf681f424,79697241,0,0x0,8
tick,0x7ffdf681f424,79699161,0,0x0,8
tick,0x7ffdf681f424,79701130,0,0x0,8
tick,0x7ffdf681f424,79703172,0,0x0,8
tick,0x7ffdf681f424,79705225,0,0x0,8
tick,0x7ffdf681f424,79707193,0,0x0,8
tick,0x7ffdf681f424,79709185,0,0x0,8
tick,0x7ffdf681f424,79711127,0,0x0,8
tick,0x7ffdf681f424,79713201,0,0x0,8
tick,0x7ffdf681f424,79715152,0,0x0,8
tick,0x7ffdf681f424,79717130,0,0x0,8
tick,0x7ffdf681f424,79719159,0,0x0,8
tick,0x7ffdf681f424,79721171,0,0x0,8
tick,0x7ffdf681f424,79723102,0,0x0,8
tick,0x7ffdf681f424,79725134,0,0x0,8
tick,0x7ffdf681f424,79727173,0,0x0,8
tick,0x7ffdf681f424,79729117,0,0x0,8
tick,0x7ffdf681f424,79731137,0,0x0,8
tick,0x7ffdf681f424,79733078,0,0x0,8
tick,0x7ffdf681f424,79735064,0,0x0,8
tick,0x7ffdf681f424,79737093,0,0x0,8
tick,0x7ffdf681f424,79739001,0,0x0,8
tick,0x7ffdf681f424,79741048,0,0x0,8
tick,0x7ffdf681f424,79742894,0,0x0,8
tick,0x7ffdf681f424,79745037,0,0x0,8
tick,0x7ffdf681f424,79747089,0,0x0,8
tick,0x7ffdf681f424,79749002,0,0x0,8
tick,0x7ffdf681f424,79750919,0,0x0,8
tick,0x7ffdf681f424,79753036,0,0x0,8
tick,0x7ffdf681f424,79754935,0,0x0,8
tick,0x7ffdf681f424,79756892,0,0x0,8
tick,0x7ffdf681f424,79758941,0,0x0,8
tick,0x7ffdf681f424,79760990,0,0x0,8
tick,0x7ffdf681f424,79762952,0,0x0,8
tick,0x7ffdf681f424,79764960,0,0x0,8
tick,0x7ffdf681f424,79766962,0,0x0,8
tick,0x7ffdf681f424,79768911,0,0x0,8
tick,0x7ffdf681f424,79770969,0,0x0,8
tick,0x7ffdf681f424,79772958,0,0x0,8
tick,0x7ffdf681f424,79774944,0,0x0,8
tick,0x7ffdf681f424,79776897,0,0x0,8
tick,0x7ffdf681f424,79778906,0,0x0,8
tick,0x7ffdf681f424,79780939,0,0x0,8
tick,0x7ffdf681f424,79782889,0,0x0,8
tick,0x7ffdf681f424,79784811,0,0x0,8
tick,0x7ffdf681f424,79786867,0,0x0,8
tick,0x7ffdf681f424,79788894,0,0x0,8
tick,0x7ffdf681f424,79790850,0,0x0,8
tick,0x7ffdf681f424,79792792,0,0x0,8
tick,0x7ffdf681f424,79794823,0,0x0,8
tick,0x7ffdf681f424,79796826,0,0x0,8
tick,0x7ffdf681f424,79798834,0,0x0,8
tick,0x7ffdf681f424,79800770,0,0x0,8
tick,0x7ffdf681f424,79802781,0,0x0,8
tick,0x7ffdf681f424,79804761,0,0x0,8
tick,0x7ffdf681f424,79806813,0,0x0,8
tick,0x7ffdf681f424,79808727,0,0x0,8
tick,0x7ffdf681f424,79810748,0,0x0,8
tick,0x7ffdf681f424,79812744,0,0x0,8
tick,0x7ffdf681f424,79814732,0,0x0,8
tick,0x7ffdf681f424,79816783,0,0x0,8
tick,0x7ffdf681f424,79818776,0,0x0,8
tick,0x7ffdf681f424,79820717,0,0x0,8
tick,0x7ffdf681f424,79822710,0,0x0,8
tick,0x7ffdf681f424,79824719,0,0x0,8
tick,0x7ffdf681f424,79826696,0,0x0,8
tick,0x7ffdf681f424,79828722,0,0x0,8
tick,0x7ffdf681f424,79830685,0,0x0,8
tick,0x7ffdf681f424,79832799,0,0x0,8
tick,0x7ffdf681f424,79834773,0,0x0,8
tick,0x7ffdf681f424,79836676,0,0x0,8
tick,0x7ffdf681f424,79838669,0,0x0,8
tick,0x7ffdf681f424,79840779,0,0x0,8
tick,0x7ffdf681f424,79842667,0,0x0,8
tick,0x7ffdf681f424,79844772,0,0x0,8
tick,0x7ffdf681f424,79846787,0,0x0,8
tick,0x7ffdf681f424,79848699,0,0x0,8
tick,0x7ffdf681f424,79850721,0,0x0,8
tick,0x7ffdf681f424,79852816,0,0x0,8
tick,0x7ffdf681f424,79854798,0,0x0,8
tick,0x7ffdf681f424,79856786,0,0x0,8
tick,0x7ffdf681f424,79858789,0,0x0,8
tick,0x7ffdf681f424,79860621,0,0x0,8
tick,0x7ffdf681f424,79862612,0,0x0,8
tick,0x7ffdf681f424,79864617,0,0x0,8
tick,0x7ffdf681f424,79866596,0,0x0,8
tick,0x7ffdf681f424,79868608,0,0x0,8
tick,0x7ffdf681f424,79870591,0,0x0,8
tick,0x7ffdf681f424,79872584,0,0x0,8
tick,0x7ffdf681f424,79874599,0,0x0,8
tick,0x7ffdf681f424,79876630,0,0x0,8
tick,0x7ffdf681f424,79878622,0,0x0,8
tick,0x7ffdf681f424,79880625,0,0x0,8
tick,0x7ffdf681f424,79882607,0,0x0,8
tick,0x7ffdf681f424,79884605,0,0x0,8
tick,0x7ffdf681f424,79886611,0,0x0,8
tick,0x7ffdf681f424,79888604,0,0x0,8
tick,0x7ffdf681f424,79890609,0,0x0,8
tick,0x7ffdf681f424,79892580,0,0x0,8
tick,0x7ffdf681f424,79894612,0,0x0,8
tick,0x7ffdf681f424,79896597,0,0x0,8
tick,0x7ffdf681f424,79898564,0,0x0,8
tick,0x7ffdf681f424,79900559,0,0x0,8
tick,0x7ffdf681f424,79902555,0,0x0,8
tick,0x7ffdf681f424,79904543,0,0x0,8
tick,0x7ffdf681f424,79906549,0,0x0,8
tick,0x7ffdf681f424,79908573,0,0x0,8
tick,0x7ffdf681f424,79910481,0,0x0,8
tick,0x7ffdf681f424,79912506,0,0x0,8
tick,0x7ffdf681f424,79914511,0,0x0,8
tick,0x7ffdf681f424,79916505,0,0x0,8
tick,0x7ffdf681f424,79918508,0,0x0,8
tick,0x7ffdf681f424,79920547,0,0x0,8
tick,0x7ffdf681f424,79922512,0,0x0,8
tick,0x7ffdf681f424,79924479,0,0x0,8
tick,0x7ffdf681f424,79926496,0,0x0,8
tick,0x7ffdf681f424,79928488,0,0x0,8
tick,0x7ffdf681f424,79930483,0,0x0,8
tick,0x7ffdf681f424,79932475,0,0x0,8
tick,0x7ffdf681f424,79934460,0,0x0,8
tick,0x7ffdf681f424,79936452,0,0x0,8
tick,0x7ffdf681f424,79938464,0,0x0,8
tick,0x7ffdf681f424,79940457,0,0x0,8
tick,0x7ffdf681f424,79942402,0,0x0,8
tick,0x7ffdf681f424,79944390,0,0x0,8
tick,0x7ffdf681f424,79946417,0,0x0,8
tick,0x7ffdf681f424,79948440,0,0x0,8
tick,0x7ffdf681f424,79950433,0,0x0,8
tick,0x7ffdf681f424,79952432,0,0x0,8
tick,0x7ffdf681f424,79954422,0,0x0,8
tick,0x7ffdf681f424,79956425,0,0x0,8
tick,0x7ffdf681f424,79958398,0,0x0,8
tick,0x7ffdf681f424,79960400,0,0x0,8
tick,0x7ffdf681f424,79962416,0,0x0,8
tick,0x7ffdf681f424,79964334,0,0x0,8
tick,0x7ffdf681f424,79966381,0,0x0,8
tick,0x7ffdf681f424,79968383,0,0x0,8
tick,0x7ffdf681f424,79970364,0,0x0,8
tick,0x7ffdf681f424,79972368,0,0x0,8
tick,0x7ffdf681f424,79974368,0,0x0,8
tick,0x7ffdf681f424,79976354,0,0x0,8
tick,0x7ffdf681f424,79978329,0,0x0,8
tick,0x7ffdf681f424,79980370,0,0x0,8
tick,0x7ffdf681f424,79982372,0,0x0,8
tick,0x7ffdf681f424,79984346,0,0x0,8
tick,0x7ffdf681f424,79986317,0,0x0,8
tick,0x7ffdf681f424,79988339,0,0x0,8
tick,0x7ffdf681f424,79990323,0,0x0,8
tick,0x7ffdf681f424,79992341,0,0x0,8
tick,0x7ffdf681f424,79994337,0,0x0,8
tick,0x7ffdf681f424,79996335,0,0x0,8
tick,0x7ffdf681f424,79998342,0,0x0,8
tick,0x7ffdf681f424,80000340,0,0x0,8
tick,0x7ffdf681f424,80002270,0,0x0,8
tick,0x7ffdf681f424,80004279,0,0x0,8
tick,0x7ffdf681f424,80006290,0,0x0,8
tick,0x7ffdf681f424,80008298,0,0x0,8
tick,0x7ffdf681f424,80010267,0,0x0,8
tick,0x7ffdf681f424,80012335,0,0x0,8
tick,0x7ffdf681f424,80014334,0,0x0,8
tick,0x7ffdf681f424,80016322,0,0x0,8
tick,0x7ffdf681f424,80018261,0,0x0,8
tick,0x7ffdf681f424,80020348,0,0x0,8
tick,0x7ffdf681f424,80022299,0,0x0,8
tick,0x7ffdf681f424,80024290,0,0x0,8
tick,0x7ffdf681f424,80026192,0,0x0,8
tick,0x7ffdf681f424,80028334,0,0x0,8
tick,0x7ffdf681f424,80030328,0,0x0,8
tick,0x7ffdf681f424,80032313,0,0x0,8
tick,0x7ffdf681f424,80034299,0,0x0,8
tick,0x7ffdf681f424,80036240,0,0x0,8
tick,0x7ffdf681f424,80038341,0,0x0,8
tick,0x7ffdf681f424,80040246,0,0x0,8
tick,0x7ffdf681f424,80042256,0,0x0,8
tick,0x7ffdf681f424,80044297,0,0x0,8
tick,0x7ffdf681f424,80046302,0,0x0,8
tick,0x7ffdf681f424,80048281,0,0x0,8
tick,0x7ffdf681f424,80050296,0,0x0,8
tick,0x7ffdf681f424,80052292,0,0x0,8
tick,0x7ffdf681f424,80054277,0,0x0,8
tick,0x7ffdf681f424,80056267,0,0x0,8
tick,0x7ffdf681f424,80058214,0,0x0,8
tick,0x7ffdf681f424,80060274,0,0x0,8
tick,0x7ffdf681f424,80062256,0,0x0,8
tick,0x7ffdf681f424,80064250,0,0x0,8
tick,0x7ffdf681f424,80066254,0,0x0,8
tick,0x7ffdf681f424,80068131,0,0x0,8
tick,0x7ffdf681f424,80070178,0,0x0,8
tick,0x7ffdf681f424,80072258,0,0x0,8
tick,0x7ffdf681f424,80074209,0,0x0,8
tick,0x7ffdf681f424,80076093,0,0x0,8
tick,0x7ffdf681f424,80078152,0,0x0,8
tick,0x7ffdf681f424,80080176,0,0x0,8
tick,0x7ffdf681f424,80082210,0,0x0,8
tick,0x7ffdf681f424,80084242,0,0x0,8
tick,0x7ffdf681f424,80086196,0,0x0,8
tick,0x7ffdf681f424,80088174,0,0x0,8
tick,0x7ffdf681f424,80090186,0,0x0,8
tick,0x7ffdf681f424,80092150,0,0x0,8
tick,0x7ffdf681f424,80094231,0,0x0,8
tick,0x7ffdf681f424,80096163,0,0x0,8
tick,0x7ffdf681f424,80098029,0,0x0,8
tick,0x7ffdf681f424,80100128,0,0x0,8
tick,0x7ffdf681f424,80102108,0,0x0,8
tick,0x7ffdf681f424,80104119,0,0x0,8
tick,0x7ffdf681f424,80106150,0,0x0,8
tick,0x7ffdf681f424,80108132,0,0x0,8
tick,0x7ffdf681f424,80110133,0,0x0,8
tick,0x7ffdf681f424,80112099,0,0x0,8
tick,0x7ffdf681f424,80113982,0,0x0,8
tick,0x7ffdf681f424,80116172,0,0x0,8
tick,0x7ffdf681f424,80117980,0,0x0,8
tick,0x7ffdf681f424,80120074,0,0x0,8
tick,0x7ffdf681f424,80121966,0,0x0,8
tick,0x7ffdf681f424,80123989,0,0x0,8
tick,0x7ffdf681f424,80125949,0,0x0,8
tick,0x7ffdf681f424,80127996,0,0x0,8
tick,0x7ffdf681f424,80129924,0,0x0,8
tick,0x7ffdf681f424,80132005,0,0x0,8
tick,0x7ffdf681f424,80133991,0,0x0,8
tick,0x7ffdf681f424,80135992,0,0x0,8
tick,0x7ffdf681f424,80138004,0,0x0,8
tick,0x7ffdf681f424,80139981,0,0x0,8
tick,0x7ffdf681f424,80141966,0,0x0,8
tick,0x7ffdf681f424,80143959,0,0x0,8
tick,0x7ffdf681f424,80145947,0,0x0,8
tick,0x7ffdf681f424,80147911,0,0x0,8
tick,0x7ffdf681f424,80149868,0,0x0,8
tick,0x7ffdf681f424,80151928,0,0x0,8
tick,0x7ffdf681f424,80153842,0,0x0,8
tick,0x7ffdf681f424,80155851,0,0x0,8
tick,0x7ffdf681f424,80157839,0,0x0,8
tick,0x7ffdf681f424,80159779,0,0x0,8
tick,0x7ffdf681f424,80161816,0,0x0,8
tick,0x7ffdf681f424,80163833,0,0x0,8
tick,0x7ffdf681f424,80165789,0,0x0,8
tick,0x7ffdf681f424,80167785,0,0x0,8
tick,0x7ffdf681f424,80169779,0,0x0,8
tick,0x7ffdf681f424,80171789,0,0x0,8
tick,0x7ffdf681f424,80173770,0,0x0,8
tick,0x7ffdf681f424,80175780,0,0x0,8
tick,0x7ffdf681f424,80177757,0,0x0,8
tick,0x7ffdf681f424,80179753,0,0x0,8
tick,0x7ffdf681f424,80181832,0,0x0,8
tick,0x7ffdf681f424,80183752,0,0x0,8
tick,0x7ffdf681f424,80185738,0,0x0,8
tick,0x7ffdf681f424,80187755,0,0x0,8
tick,0x7ffdf681f424,80189726,0,0x0,8
tick,0x7ffdf681f424,80191754,0,0x0,8
tick,0x7ffdf681f424,80193785,0,0x0,8
tick,0x7ffdf681f424,80195706,0,0x0,8
tick,0x7ffdf681f424,80197715,0,0x0,8
tick,0x7ffdf681f424,80199727,0,0x0,8
tick,0x7ffdf681f424,80201720,0,0x0,8
tick,0x7ffdf681f424,80203686,0,0x0,8
tick,0x7ffdf681f424,80205743,0,0x0,8
tick,0x7ffdf681f424,80207743,0,0x0,8
tick,0x7ffdf681f424,80209741,0,0x0,8
tick,0x7ffdf681f424,80211669,0,0x0,8
tick,0x7ffdf681f424,80213666,0,0x0,8
tick,0x7ffdf681f424,80215673,0,0x0,8
tick,0x7ffdf681f424,80217716,0,0x0,8
tick,0x7ffdf681f424,80219693,0,0x0,8
tick,0x7ffdf681f424,80221697,0,0x0,8
tick,0x7ffdf681f424,80223692,0,0x0,8
tick,0x7ffdf681f424,80225603,0,0x0,8
tick,0x7ffdf681f424,80227639,0,0x0,8
tick,0x7ffdf681f424,80229626,0,0x0,8
tick,0x7ffdf681f424,80231613,0,0x0,8
tick,0x7ffdf681f424,80233615,0,0x0,8
tick,0x7ffdf681f424,80235659,0,0x0,8
tick,0x7ffdf681f424,80237658,0,0x0,8
tick,0x7ffdf681f424,80239649,0,0x0,8
tick,0x7ffdf681f424,80241646,0,0x0,8
tick,0x7ffdf681f424,80243641,0,0x0,8
tick,0x7ffdf681f424,80245640,0,0x0,8
tick,0x7ffdf681f424,80247702,0,0x0,8
tick,0x7ffdf681f424,80249626,0,0x0,8
tick,0x7ffdf681f424,80251591,0,0x0,8
tick,0x7ffdf681f424,80253676,0,0x0,8
tick,0x7ffdf681f424,80255833,0,0x0,8
tick,0x7ffdf681f424,80257848,0,0x0,8
tick,0x7ffdf681f424,80259652,0,0x0,8
tick,0x7ffdf681f424,80261572,0,0x0,8
tick,0x7ffdf681f424,80263589,0,0x0,8
tick,0x7ffdf681f424,80265580,0,0x0,8
tick,0x7ffdf681f424,80267652,0,0x0,8
tick,0x7ffdf681f424,80269598,0,0x0,8
tick,0x7ffdf681f424,80271512,0,0x0,8
tick,0x7ffdf681f424,80273566,0,0x0,8
tick,0x7ffdf681f424,80275553,0,0x0,8
tick,0x7ffdf681f424,80277565,0,0x0,8
tick,0x7ffdf681f424,80279582,0,0x0,8
tick,0x7ffdf681f424,80281541,0,0x0,8
tick,0x7ffdf681f424,80283534,0,0x0,8
tick,0x7ffdf681f424,80285552,0,0x0,8
tick,0x7ffdf681f424,80287521,0,0x0,8
tick,0x7ffdf681f424,80289520,0,0x0,8
tick,0x7ffdf681f424,80291553,0,0x0,8
tick,0x7ffdf681f424,80293516,0,0x0,8
tick,0x7ffdf681f424,80295509,0,0x0,8
tick,0x7ffdf681f424,80297515,0,0x0,8
tick,0x7ffdf681f424,80299434,0,0x0,8
tick,0x7ffdf681f424,80301569,0,0x0,8
tick,0x7ffdf681f424,80303481,0,0x0,8
tick,0x7ffdf681f424,80305465,0,0x0,8
tick,0x7ffdf681f424,80307497,0,0x0,8
tick,0x7ffdf681f424,80309443,0,0x0,8
tick,0x7ffdf681f424,80311461,0,0x0,8
tick,0x7ffdf681f424,80313427,0,0x0,8
tick,0x7ffdf681f424,80315459,0,0x0,8
tick,0x7ffdf681f424,80317439,0,0x0,8
tick,0x7ffdf681f424,80319476,0,0x0,8
tick,0x7ffdf681f424,80321438,0,0x0,8
tick,0x7ffdf681f424,80323403,0,0x0,8
tick,0x7ffdf681f424,80325437,0,0x0,8
tick,0x7ffdf681f424,80327431,0,0x0,8
tick,0x7ffdf681f424,80329421,0,0x0,8
tick,0x7ffdf681f424,80331410,0,0x0,8
tick,0x7ffdf681f424,80333393,0,0x0,8
tick,0x7ffdf681f424,80335393,0,0x0,8
tick,0x7ffdf681f424,80337408,0,0x0,8
tick,0x7ffdf681f424,80339382,0,0x0,8
tick,0x7ffdf681f424,80341377,0,0x0,8
tick,0x7ffdf681f424,80343356,0,0x0,8
tick,0x7ffdf681f424,80345326,0,0x0,8
tick,0x7ffdf681f424,80347356,0,0x0,8
tick,0x7ffdf681f424,80349366,0,0x0,8
tick,0x7ffdf681f424,80351361,0,0x0,8
tick,0x7ffdf681f424,80353329,0,0x0,8
tick,0x7ffdf681f424,80355340,0,0x0,8
tick,0x7ffdf681f424,80357332,0,0x0,8
tick,0x7ffdf681f424,80359292,0,0x0,8
tick,0x7ffdf681f424,80361328,0,0x0,8
tick,0x7ffdf681f424,80363343,0,0x0,8
tick,0x7ffdf681f424,80365346,0,0x0,8
tick,0x7ffdf681f424,80367341,0,0x0,8
tick,0x7ffdf681f424,80369293,0,0x0,8
tick,0x7ffdf681f424,80371315,0,0x0,8
tick,0x7ffdf681f424,80373318,0,0x0,8
tick,0x7ffdf681f424,80375312,0,0x0,8
tick,0x7ffdf681f424,80377318,0,0x0,8
tick,0x7ffdf681f424,80379335,0,0x0,8
tick,0x7ffdf681f424,80381307,0,0x0,8
tick,0x7ffdf681f424,80383323,0,0x0,8
tick,0x7ffdf681f424,80385262,0,0x0,8
tick,0x7ffdf681f424,80387313,0,0x0,8
tick,0x7ffdf681f424,80389398,0,0x0,8
tick,0x7ffdf681f424,80391318,0,0x0,8
tick,0x7ffdf681f424,80393316,0,0x0,8
tick,0x7ffdf681f424,80395345,0,0x0,8
tick,0x7ffdf681f424,80397306,0,0x0,8
tick,0x7ffdf681f424,80399329,0,0x0,8
tick,0x7ffdf681f424,80401221,0,0x0,8
tick,0x7ffdf681f424,80403291,0,0x0,8
tick,0x7ffdf681f424,80405321,0,0x0,8
tick,0x7ffdf681f424,80407312,0,0x0,8
tick,0x7ffdf681f424,80409255,0,0x0,8
tick,0x7ffdf681f424,80411269,0,0x0,8
tick,0x7ffdf681f424,80413275,0,0x0,8
tick,0x7ffdf681f424,80415176,0,0x0,8
tick,0x7ffdf681f424,80417161,0,0x0,8
tick,0x7ffdf681f424,80419305,0,0x0,8
tick,0x7ffdf681f424,80421285,0,0x0,8
tick,0x7ffdf681f424,80423278,0,0x0,8
tick,0x7ffdf681f424,80425259,0,0x0,8
tick,0x7ffdf681f424,80427260,0,0x0,8
tick,0x7ffdf681f424,80429242,0,0x0,8
tick,0x7ffdf681f424,80431261,0,0x0,8
tick,0x7ffdf681f424,80433200,0,0x0,8
tick,0x7ffdf681f424,80435251,0,0x0,8
tick,0x7ffdf681f424,80437263,0,0x0,8
tick,0x7ffdf681f424,80439134,0,0x0,8
tick,0x7ffdf681f424,80441201,0,0x0,8
tick,0x7ffdf681f424,80443246,0,0x0,8
tick,0x7ffdf681f424,80445229,0,0x0,8
tick,0x7ffdf681f424,80447233,0,0x0,8
tick,0x7ffdf681f424,80449207,0,0x0,8
tick,0x7ffdf681f424,80451109,0,0x0,8
tick,0x7ffdf681f424,80453215,0,0x0,8
tick,0x7ffdf681f424,80455183,0,0x0,8
tick,0x7ffdf681f424,80457184,0,0x0,8
tick,0x7ffdf681f424,80459193,0,0x0,8
tick,0x7ffdf681f424,80461186,0,0x0,8
tick,0x7ffdf681f424,80463173,0,0x0,8
tick,0x7ffdf681f424,80465153,0,0x0,8
tick,0x7ffdf681f424,80467157,0,0x0,8
tick,0x7ffdf681f424,80469151,0,0x0,8
tick,0x7ffdf681f424,80471141,0,0x0,8
tick,0x7ffdf681f424,80473153,0,0x0,8
tick,0x7ffdf681f424,80475127,0,0x0,8
tick,0x7ffdf681f424,80477112,0,0x0,8
tick,0x7ffdf681f424,80479125,0,0x0,8
tick,0x7ffdf681f424,80481115,0,0x0,8
tick,0x7ffdf681f424,80483109,0,0x0,8
tick,0x7ffdf681f424,80485105,0,0x0,8
tick,0x7ffdf681f424,80487101,0,0x0,8
tick,0x7ffdf681f424,80489078,0,0x0,8
tick,0x7ffdf681f424,80491083,0,0x0,8
tick,0x7ffdf681f424,80492977,0,0x0,8
tick,0x7ffdf681f424,80495057,0,0x0,8
tick,0x7ffdf681f424,80497069,0,0x0,8
tick,0x7ffdf681f424,80498883,0,0x0,8
tick,0x7ffdf681f424,80501097,0,0x0,8
tick,0x7ffdf681f424,80503053,0,0x0,8
tick,0x7ffdf681f424,80505049,0,0x0,8
tick,0x7ffdf681f424,80506943,0,0x0,8
tick,0x7ffdf681f424,80509034,0,0x0,8
tick,0x7ffdf681f424,80511031,0,0x0,8
tick,0x7ffdf681f424,80513025,0,0x0,8
tick,0x7ffdf681f424,80515046,0,0x0,8
tick,0x7ffdf681f424,80517019,0,0x0,8
tick,0x7ffdf681f424,80519008,0,0x0,8
tick,0x7ffdf681f424,80520998,0,0x0,8
tick,0x7ffdf681f424,80522897,0,0x0,8
tick,0x7ffdf681f424,80524966,0,0x0,8
tick,0x7ffdf681f424,80527001,0,0x0,8
tick,0x7ffdf681f424,80528950,0,0x0,8
tick,0x7ffdf681f424,80530994,0,0x0,8
tick,0x7ffdf681f424,80532912,0,0x0,8
tick,0x7ffdf681f424,80534972,0,0x0,8
tick,0x7ffdf681f424,80536966,0,0x0,8
tick,0x7ffdf681f424,80538957,0,0x0,8
tick,0x7ffdf681f424,80540950,0,0x0,8
tick,0x7ffdf681f424,80542842,0,0x0,8
tick,0x7ffdf681f424,80544946,0,0x0,8
tick,0x7ffdf681f424,80546935,0,0x0,8
tick,0x7ffdf681f424,80548937,0,0x0,8
tick,0x7ffdf681f424,80550851,0,0x0,8
tick,0x7ffdf681f424,80552922,0,0x0,8
tick,0x7ffdf681f424,80554916,0,0x0,8
tick,0x7ffdf681f424,80556910,0,0x0,8
tick,0x7ffdf681f424,80558901,0,0x0,8
tick,0x7ffdf681f424,80560795,0,0x0,8
tick,0x7ffdf681f424,80562793,0,0x0,8
tick,0x7ffdf681f424,80564787,0,0x0,8
tick,0x7ffdf681f424,80566795,0,0x0,8
tick,0x7ffdf681f424,80568859,0,0x0,8
tick,0x7ffdf681f424,80570773,0,0x0,8
tick,0x7ffdf681f424,80572856,0,0x0,8
tick,0x7ffdf681f424,80574859,0,0x0,8
tick,0x7ffdf681f424,80576749,0,0x0,8
tick,0x7ffdf681f424,80578858,0,0x0,8
tick,0x7ffdf681f424,80580743,0,0x0,8
tick,0x7ffdf681f424,80582836,0,0x0,8
tick,0x7ffdf681f424,80584734,0,0x0,8
tick,0x7ffdf681f424,80586868,0,0x0,8
tick,0x7ffdf681f424,80588824,0,0x0,8
tick,0x7ffdf681f424,80590723,0,0x0,8
tick,0x7ffdf681f424,80592734,0,0x0,8
tick,0x7ffdf681f424,80594744,0,0x0,8
tick,0x7ffdf681f424,80596761,0,0x0,8
tick,0x7ffdf681f424,80598691,0,0x0,8
tick,0x7ffdf681f424,80600682,0,0x0,8
tick,0x7ffdf681f424,80602713,0,0x0,8
tick,0x7ffdf681f424,80604686,0,0x0,8
tick,0x7ffdf681f424,80606775,0,0x0,8
tick,0x7ffdf681f424,80608773,0,0x0,8
tick,0x7ffdf681f424,80610674,0,0x0,8
tick,0x7ffdf681f424,80612694,0,0x0,8
tick,0x7ffdf681f424,80614765,0,0x0,8
tick,0x7ffdf681f424,80616643,0,0x0,8
tick,0x7ffdf681f424,80618740,0,0x0,8
tick,0x7ffdf681f424,80620738,0,0x0,8
tick,0x7ffdf681f424,80622640,0,0x0,8
tick,0x7ffdf681f424,80624622,0,0x0,8
tick,0x7ffdf681f424,80626617,0,0x0,8
tick,0x7ffdf681f424,80628613,0,0x0,8
tick,0x7ffdf681f424,80630713,0,0x0,8
tick,0x7ffdf681f424,80632614,0,0x0,8
tick,0x7ffdf681f424,80634593,0,0x0,8
tick,0x7ffdf681f424,80636699,0,0x0,8
tick,0x7ffdf681f424,80638626,0,0x0,8
tick,0x7ffdf681f424,80640666,0,0x0,8
tick,0x7ffdf681f424,80642737,0,0x0,8
tick,0x7ffdf681f424,80644568,0,0x0,8
tick,0x7ffdf681f424,80646651,0,0x0,8
tick,0x7ffdf681f424,80648592,0,0x0,8
tick,0x7ffdf681f424,80650657,0,0x0,8
tick,0x7ffdf681f424,80652656,0,0x0,8
tick,0x7ffdf681f424,80654659,0,0x0,8
tick,0x7ffdf681f424,80656646,0,0x0,8
tick,0x7ffdf681f424,80658540,0,0x0,8
tick,0x7ffdf681f424,80660623,0,0x0,8
tick,0x7ffdf681f424,80662623,0,0x0,8
tick,0x7ffdf681f424,80664619,0,0x0,8
tick,0x7ffdf681f424,80666610,0,0x0,8
tick,0x7ffdf681f424,80668496,0,0x0,8
tick,0x7ffdf681f424,80670608,0,0x0,8
tick,0x7ffdf681f424,80672546,0,0x0,8
tick,0x7ffdf681f424,80674630,0,0x0,8
tick,0x7ffdf681f424,80676597,0,0x0,8
tick,0x7ffdf681f424,80678614,0,0x0,8
tick,0x7ffdf681f424,80680584,0,0x0,8
tick,0x7ffdf681f424,80682458,0,0x0,8
tick,0x7ffdf681f424,80684468,0,0x0,8
tick,0x7ffdf681f424,80686574,0,0x0,8
tick,0x7ffdf681f424,80688451,0,0x0,8
tick,0x7ffdf681f424,80690447,0,0x0,8
tick,0x7ffdf681f424,80692543,0,0x0,8
tick,0x7ffdf681f424,80694538,0,0x0,8
tick,0x7ffdf681f424,80696462,0,0x0,8
tick,0x7ffdf681f424,80698417,0,0x0,8
tick,0x7ffdf681f424,80700522,0,0x0,8
tick,0x7ffdf681f424,80702523,0,0x0,8
tick,0x7ffdf681f424,80704407,0,0x0,8
tick,0x7ffdf681f424,80706400,0,0x0,8
tick,0x7ffdf681f424,80708512,0,0x0,8
tick,0x7ffdf681f424,80710496,0,0x0,8
tick,0x7ffdf681f424,80712382,0,0x0,8
tick,0x7ffdf681f424,80714485,0,0x0,8
tick,0x7ffdf681f424,80716388,0,0x0,8
tick,0x7ffdf681f424,80718467,0,0x0,8
tick,0x7ffdf681f424,80720375,0,0x0,8
tick,0x7ffdf681f424,80722378,0,0x0,8
tick,0x7ffdf681f424,80724366,0,0x0,8
tick,0x7ffdf681f424,80726363,0,0x0,8
tick,0x7ffdf681f424,80728457,0,0x0,8
tick,0x7ffdf681f424,80730448,0,0x0,8
tick,0x7ffdf681f424,80732437,0,0x0,8
tick,0x7ffdf681f424,80734444,0,0x0,8
tick,0x7ffdf681f424,80736339,0,0x0,8
tick,0x7ffdf681f424,80738423,0,0x0,8
tick,0x7ffdf681f424,80740420,0,0x0,8
tick,0x7ffdf681f424,80742373,0,0x0,8
tick,0x7ffdf681f424,80744316,0,0x0,8
tick,0x7ffdf681f424,80746313,0,0x0,8
tick,0x7ffdf681f424,80748399,0,0x0,8
tick,0x7ffdf681f424,80750310,0,0x0,8
tick,0x7ffdf681f424,80752327,0,0x0,8
tick,0x7ffdf681f424,80754271,0,0x0,8
tick,0x7ffdf681f424,80756380,0,0x0,8
tick,0x7ffdf681f424,80758316,0,0x0,8
tick,0x7ffdf681f424,80760387,0,0x0,8
tick,0x7ffdf681f424,80762398,0,0x0,8
tick,0x7ffdf681f424,80764248,0,0x0,8
tick,0x7ffdf681f424,80766235,0,0x0,8
tick,0x7ffdf681f424,80768312,0,0x0,8
tick,0x7ffdf681f424,80770280,0,0x0,8
tick,0x7ffdf681f424,80772305,0,0x0,8
tick,0x7ffdf681f424,80774311,0,0x0,8
tick,0x7ffdf681f424,80776217,0,0x0,8
tick,0x7ffdf681f424,80778315,0,0x0,8
tick,0x7ffdf681f424,80780312,0,0x0,8
tick,0x7ffdf681f424,80782307,0,0x0,8
tick,0x7ffdf681f424,80784335,0,0x0,8
tick,0x7ffdf681f424,80786312,0,0x0,8
tick,0x7ffdf681f424,80788292,0,0x0,8
tick,0x7ffdf681f424,80790287,0,0x0,8
tick,0x7ffdf681f424,80792266,0,0x0,8
tick,0x7ffdf681f424,80794269,0,0x0,8
tick,0x7ffdf681f424,80796161,0,0x0,8
tick,0x7ffdf681f424,80798254,0,0x0,8
tick,0x7ffdf681f424,80800257,0,0x0,8
tick,0x7ffdf681f424,80802216,0,0x0,8
tick,0x7ffdf681f424,80804250,0,0x0,8
tick,0x7ffdf681f424,80806197,0,0x0,8
tick,0x7ffdf681f424,80808242,0,0x0,8
tick,0x7ffdf681f424,80810234,0,0x0,8
tick,0x7ffdf681f424,80812241,0,0x0,8
tick,0x7ffdf681f424,80814226,0,0x0,8
tick,0x7ffdf681f424,80816220,0,0x0,8
tick,0x7ffdf681f424,80818164,0,0x0,8
tick,0x7ffdf681f424,80820177,0,0x0,8
tick,0x7ffdf681f424,80822201,0,0x0,8
tick,0x7ffdf681f424,80824205,0,0x0,8
tick,0x7ffdf681f424,80826140,0,0x0,8
tick,0x7ffdf681f424,80828227,0,0x0,8
tick,0x7ffdf681f424,80830193,0,0x0,8
tick,0x7ffdf681f424,80832178,0,0x0,8
tick,0x7ffdf681f424,80834174,0,0x0,8
tick,0x7ffdf681f424,80836162,0,0x0,8
tick,0x7ffdf681f424,80838159,0,0x0,8
tick,0x7ffdf681f424,80840157,0,0x0,8
tick,0x7ffdf681f424,80842152,0,0x0,8
tick,0x7ffdf681f424,80844155,0,0x0,8
tick,0x7ffdf681f424,80846150,0,0x0,8
tick,0x7ffdf681f424,80848138,0,0x0,8
tick,0x7ffdf681f424,80850174,0,0x0,8
tick,0x7ffdf681f424,80852132,0,0x0,8
tick,0x7ffdf681f424,80854019,0,0x0,8
tick,0x7ffdf681f424,80856030,0,0x0,8
tick,0x7ffdf681f424,80858045,0,0x0,8
tick,0x7ffdf681f424,80860029,0,0x0,8
tick,0x7ffdf681f424,80862020,0,0x0,8
tick,0x7ffdf681f424,80864013,0,0x0,8
tick,0x7ffdf681f424,80866007,0,0x0,8
tick,0x7ffdf681f424,80867987,0,0x0,8
tick,0x7ffdf681f424,80869996,0,0x0,8
tick,0x7ffdf681f424,80871923,0,0x0,8
tick,0x7ffdf681f424,80873954,0,0x0,8
tick,0x7ffdf681f424,80875926,0,0x0,8
tick,0x7ffdf681f424,80877862,0,0x0,8
tick,0x7ffdf681f424,80879916,0,0x0,8
tick,0x7ffdf681f424,80881852,0,0x0,8
tick,0x7ffdf681f424,80883902,0,0x0,8
tick,0x7ffdf681f424,80885927,0,0x0,8
tick,0x7ffdf681f424,80887926,0,0x0,8
tick,0x7ffdf681f424,80889915,0,0x0,8
tick,0x7ffdf681f424,80891868,0,0x0,8
tick,0x7ffdf681f424,80893890,0,0x0,8
tick,0x7ffdf681f424,80895943,0,0x0,8
tick,0x7ffdf681f424,80897855,0,0x0,8
tick,0x7ffdf681f424,80899773,0,0x0,8
tick,0x7ffdf681f424,80901779,0,0x0,8
tick,0x7ffdf681f424,80903829,0,0x0,8
tick,0x7ffdf681f424,80905785,0,0x0,8
tick,0x7ffdf681f424,80907785,0,0x0,8
tick,0x7ffdf681f424,80909747,0,0x0,8
tick,0x7ffdf681f424,80911797,0,0x0,8
tick,0x7ffdf681f424,80913928,0,0x0,8
tick,0x7ffdf681f424,80915878,0,0x0,8
tick,0x7ffdf681f424,80917789,0,0x0,8
tick,0x7ffdf681f424,80919847,0,0x0,8
tick,0x7ffdf681f424,80921826,0,0x0,8
tick,0x7ffdf681f424,80923853,0,0x0,8
tick,0x7ffdf681f424,80925733,0,0x0,8
tick,0x7ffdf681f424,80927841,0,0x0,8
tick,0x7ffdf681f424,80929827,0,0x0,8
tick,0x7ffdf681f424,80931821,0,0x0,8
tick,0x7ffdf681f424,80933741,0,0x0,8
tick,0x7ffdf681f424,80935729,0,0x0,8
tick,0x7ffdf681f424,80937715,0,0x0,8
tick,0x7ffdf681f424,80939740,0,0x0,8
tick,0x7ffdf681f424,80941725,0,0x0,8
tick,0x7ffdf681f424,80943796,0,0x0,8
tick,0x7ffdf681f424,80945832,0,0x0,8
tick,0x7ffdf681f424,80947737,0,0x0,8
tick,0x7ffdf681f424,80949831,0,0x0,8
tick,0x7ffdf681f424,80951792,0,0x0,8
tick,0x7ffdf681f424,80953782,0,0x0,8
tick,0x7ffdf681f424,80955714,0,0x0,8
tick,0x7ffdf681f424,80957775,0,0x0,8
tick,0x7ffdf681f424,80959750,0,0x0,8
tick,0x7ffdf681f424,80961694,0,0x0,8
tick,0x7ffdf681f424,80963772,0,0x0,8
tick,0x7ffdf681f424,80965744,0,0x0,8
tick,0x7ffdf681f424,80967776,0,0x0,8
tick,0x7ffdf681f424,80969687,0,0x0,8
tick,0x7ffdf681f424,80971704,0,0x0,8
tick,0x7ffdf681f424,80973706,0,0x0,8
tick,0x7ffdf681f424,80975695,0,0x0,8
tick,0x7ffdf681f424,80977706,0,0x0,8
tick,0x7ffdf681f424,80979658,0,0x0,8
tick,0x7ffdf681f424,80981720,0,0x0,8
tick,0x7ffdf681f424,80983673,0,0x0,8
tick,0x7ffdf681f424,80985688,0,0x0,8
tick,0x7ffdf681f424,80987688,0,0x0,8
tick,0x7ffdf681f424,80989684,0,0x0,8
tick,0x7ffdf681f424,80991634,0,0x0,8
tick,0x7ffdf681f424,80993662,0,0x0,8
tick,0x7ffdf681f424,80995657,0,0x0,8
tick,0x7ffdf681f424,80997639,0,0x0,8
tick,0x7ffdf681f424,80999654,0,0x0,8
tick,0x7ffdf681f424,81001633,0,0x0,8
tick,0x7ffdf681f424,81003666,0,0x0,8
tick,0x7ffdf681f424,81005637,0,0x0,8
tick,0x7ffdf681f424,81007673,0,0x0,8
tick,0x7ffdf681f424,81009640,0,0x0,8
tick,0x7ffdf681f424,81010731,0,0x0,8
tick,0x7ffdf681f424,81012755,0,0x0,8
tick,0x7ffdf681f424,81014715,0,0x0,8
tick,0x7ffdf681f424,81016739,0,0x0,8
tick,0x7ffdf681f424,81018704,0,0x0,8
tick,0x7ffdf681f424,81020702,0,0x0,8
tick,0x7ffdf681f424,81022584,0,0x0,8
tick,0x7ffdf681f424,81024676,0,0x0,8
tick,0x7ffdf681f424,81026566,0,0x0,8
tick,0x7ffdf681f424,81028663,0,0x0,8
tick,0x7ffdf681f424,81030668,0,0x0,8
tick,0x7ffdf681f424,81032660,0,0x0,8
tick,0x7ffdf681f424,81034538,0,0x0,8
tick,0x7ffdf681f424,81036643,0,0x0,8
tick,0x7ffdf681f424,81038651,0,0x0,8
tick,0x7ffdf681f424,81040629,0,0x0,8
tick,0x7ffdf681f424,81042635,0,0x0,8
tick,0x7ffdf681f424,81044619,0,0x0,8
tick,0x7ffdf681f424,81046584,0,0x0,8
tick,0x7ffdf681f424,81048625,0,0x0,8
tick,0x7ffdf681f424,81050605,0,0x0,8
tick,0x7ffdf681f424,81052606,0,0x0,8
tick,0x7ffdf681f424,81054607,0,0x0,8
tick,0x7ffdf681f424,81056527,0,0x0,8
tick,0x7ffdf681f424,81058585,0,0x0,8
tick,0x7ffdf681f424,81060578,0,0x0,8
tick,0x7ffdf681f424,81062579,0,0x0,8
tick,0x7ffdf681f424,81064567,0,0x0,8
tick,0x7ffdf681f424,81066569,0,0x0,8
tick,0x7ffdf681f424,81068563,0,0x0,8
tick,0x7ffdf681f424,81070557,0,0x0,8
tick,0x7ffdf681f424,81072558,0,0x0,8
tick,0x7ffdf681f424,81074541,0,0x0,8
tick,0x7ffdf681f424,81076431,0,0x0,8
tick,0x7ffdf681f424,81078476,0,0x0,8
tick,0x7ffdf681f424,81080525,0,0x0,8
tick,0x7ffdf681f424,81082524,0,0x0,8
tick,0x7ffdf681f424,81084518,0,0x0,8
tick,0x7ffdf681f424,81086507,0,0x0,8
tick,0x7ffdf681f424,81088505,0,0x0,8
tick,0x7ffdf681f424,81090500,0,0x0,8
tick,0x7ffdf681f424,81092536,0,0x0,8
tick,0x7ffdf681f424,81094486,0,0x0,8
tick,0x7ffdf681f424,81096482,0,0x0,8
tick,0x7ffdf681f424,81098455,0,0x0,8
tick,0x7ffdf681f424,81100443,0,0x0,8
tick,0x7ffdf681f424,81102463,0,0x0,8
tick,0x7ffdf681f424,81104472,0,0x0,8
tick,0x7ffdf681f424,81106476,0,0x0,8
tick,0x7ffdf681f424,81108446,0,0x0,8
tick,0x7ffdf681f424,81110351,0,0x0,8
tick,0x7ffdf681f424,81112451,0,0x0,8
tick,0x7ffdf681f424,81114441,0,0x0,8
tick,0x7ffdf681f424,81116439,0,0x0,8
tick,0x7ffdf681f424,81118431,0,0x0,8
tick,0x7ffdf681f424,81120430,0,0x0,8
tick,0x7ffdf681f424,81122389,0,0x0,8
tick,0x7ffdf681f424,81124415,0,0x0,8
tick,0x7ffdf681f424,81126277,0,0x0,8
tick,0x7ffdf681f424,81128419,0,0x0,8
tick,0x7ffdf681f424,81130399,0,0x0,8
tick,0x7ffdf681f424,81132387,0,0x0,8
tick,0x7ffdf681f424,81134400,0,0x0,8
tick,0x7ffdf681f424,81136379,0,0x0,8
tick,0x7ffdf681f424,81138378,0,0x0,8
tick,0x7ffdf681f424,81140370,0,0x0,8
tick,0x7ffdf681f424,81142358,0,0x0,8
tick,0x7ffdf681f424,81144193,0,0x0,8
tick,0x7ffdf681f424,81146355,0,0x0,8
tick,0x7ffdf681f424,81148353,0,0x0,8
tick,0x7ffdf681f424,81150343,0,0x0,8
tick,0x7ffdf681f424,81152339,0,0x0,8
tick,0x7ffdf681f424,81154334,0,0x0,8
tick,0x7ffdf681f424,81156334,0,0x0,8
tick,0x7ffdf681f424,81158330,0,0x0,8
tick,0x7ffdf681f424,81160315,0,0x0,8
tick,0x7ffdf681f424,81162318,0,0x0,8
tick,0x7ffdf681f424,81164311,0,0x0,8
tick,0x7ffdf681f424,81166274,0,0x0,8
tick,0x7ffdf681f424,81168200,0,0x0,8
tick,0x7ffdf681f424,81170304,0,0x0,8
tick,0x7ffdf681f424,81172286,0,0x0,8
tick,0x7ffdf681f424,81174319,0,0x0,8
tick,0x7ffdf681f424,81176209,0,0x0,8
tick,0x7ffdf681f424,81178275,0,0x0,8
tick,0x7ffdf681f424,81180231,0,0x0,8
tick,0x7ffdf681f424,81182260,0,0x0,8
tick,0x7ffdf681f424,81184274,0,0x0,8
tick,0x7ffdf681f424,81186244,0,0x0,8
tick,0x7ffdf681f424,81188203,0,0x0,8
tick,0x7ffdf681f424,81190235,0,0x0,8
tick,0x7ffdf681f424,81192233,0,0x0,8
tick,0x7ffdf681f424,81194226,0,0x0,8
tick,0x7ffdf681f424,81196230,0,0x0,8
tick,0x7ffdf681f424,81198224,0,0x0,8
tick,0x7ffdf681f424,81200216,0,0x0,8
tick,0x7ffdf681f424,81202213,0,0x0,8
tick,0x7ffdf681f424,81204207,0,0x0,8
tick,0x7ffdf681f424,81206199,0,0x0,8
tick,0x7ffdf681f424,81208189,0,0x0,8
tick,0x7ffdf681f424,81210180,0,0x0,8
tick,0x7ffdf681f424,81212177,0,0x0,8
tick,0x7ffdf681f424,81214186,0,0x0,8
tick,0x7ffdf681f424,81216169,0,0x0,8
tick,0x7ffdf681f424,81218064,0,0x0,8
tick,0x7ffdf681f424,81220159,0,0x0,8
tick,0x7ffdf681f424,81222160,0,0x0,8
tick,0x7ffdf681f424,81224163,0,0x0,8
tick,0x7ffdf681f424,81226155,0,0x0,8
tick,0x7ffdf681f424,81228144,0,0x0,8
tick,0x7ffdf681f424,81230127,0,0x0,8
tick,0x7ffdf681f424,81232068,0,0x0,8
tick,0x7ffdf681f424,81234126,0,0x0,8
tick,0x7ffdf681f424,81236122,0,0x0,8
tick,0x7ffdf681f424,81238110,0,0x0,8
tick,0x7ffdf681f424,81240113,0,0x0,8
tick,0x7ffdf681f424,81242097,0,0x0,8
tick,0x7ffdf681f424,81244094,0,0x0,8
tick,0x7ffdf681f424,81246098,0,0x0,8
tick,0x7ffdf681f424,81248084,0,0x0,8
tick,0x7ffdf681f424,81249968,0,0x0,8
tick,0x7ffdf681f424,81252081,0,0x0,8
tick,0x7ffdf681f424,81254026,0,0x0,8
tick,0x7ffdf681f424,81256063,0,0x0,8
tick,0x7ffdf681f424,81258005,0,0x0,8
tick,0x7ffdf681f424,81259946,0,0x0,8
tick,0x7ffdf681f424,81262043,0,0x0,8
tick,0x7ffdf681f424,81264045,0,0x0,8
tick,0x7ffdf681f424,81266034,0,0x0,8
tick,0x7ffdf681f424,81267912,0,0x0,8
tick,0x7ffdf681f424,81270028,0,0x0,8
tick,0x7ffdf681f424,81272024,0,0x0,8
tick,0x7ffdf681f424,81274014,0,0x0,8
tick,0x7ffdf681f424,81275962,0,0x0,8
tick,0x7ffdf681f424,81278007,0,0x0,8
tick,0x7ffdf681f424,81280001,0,0x0,8
tick,0x7ffdf681f424,81282005,0,0x0,8
tick,0x7ffdf681f424,81283986,0,0x0,8
tick,0x7ffdf681f424,81285987,0,0x0,8
tick,0x7ffdf681f424,81287977,0,0x0,8
tick,0x7ffdf681f424,81289867,0,0x0,8
tick,0x7ffdf681f424,81291965,0,0x0,8
tick,0x7ffdf681f424,81293963,0,0x0,8
tick,0x7ffdf681f424,81295965,0,0x0,8
tick,0x7ffdf681f424,81297887,0,0x0,8
tick,0x7ffdf681f424,81299942,0,0x0,8
tick,0x7ffdf681f424,81301937,0,0x0,8
tick,0x7ffdf681f424,81303938,0,0x0,8
tick,0x7ffdf681f424,81305935,0,0x0,8
tick,0x7ffdf681f424,81307924,0,0x0,8
tick,0x7ffdf681f424,81309851,0,0x0,8
tick,0x7ffdf681f424,81311918,0,0x0,8
tick,0x7ffdf681f424,81313914,0,0x0,8
tick,0x7ffdf681f424,81315874,0,0x0,8
tick,0x7ffdf681f424,81317917,0,0x0,8
tick,0x7ffdf681f424,81319886,0,0x0,8
tick,0x7ffdf681f424,81321883,0,0x0,8
tick,0x7ffdf681f424,81323881,0,0x0,8
tick,0x7ffdf681f424,81325765,0,0x0,8
tick,0x7ffdf681f424,81327871,0,0x0,8
tick,0x7ffdf681f424,81329863,0,0x0,8
tick,0x7ffdf681f424,81331856,0,0x0,8
tick,0x7ffdf681f424,81333853,0,0x0,8
tick,0x7ffdf681f424,81335809,0,0x0,8
tick,0x7ffdf681f424,81337852,0,0x0,8
tick,0x7ffdf681f424,81339833,0,0x0,8
tick,0x7ffdf681f424,81341673,0,0x0,8
tick,0x7ffdf681f424,81343719,0,0x0,8
tick,0x7ffdf681f424,81345731,0,0x0,8
tick,0x7ffdf681f424,81347735,0,0x0,8
tick,0x7ffdf681f424,81349831,0,0x0,8
tick,0x7ffdf681f424,81351857,0,0x0,8
tick,0x7ffdf681f424,81353805,0,0x0,8
tick,0x7ffdf681f424,81355799,0,0x0,8
tick,0x7ffdf681f424,81357823,0,0x0,8
tick,0x7ffdf681f424,81359659,0,0x0,8
tick,0x7ffdf681f424,81361754,0,0x0,8
tick,0x7ffdf681f424,81363765,0,0x0,8
tick,0x7ffdf681f424,81365776,0,0x0,8
tick,0x7ffdf681f424,81367771,0,0x0,8
tick,0x7ffdf681f424,81369754,0,0x0,8
tick,0x7ffdf681f424,81371756,0,0x0,8
tick,0x7ffdf681f424,81373701,0,0x0,8
tick,0x7ffdf681f424,81375735,0,0x0,8
tick,0x7ffdf681f424,81377738,0,0x0,8
tick,0x7ffdf681f424,81379726,0,0x0,8
tick,0x7ffdf681f424,81381723,0,0x0,8
tick,0x7ffdf681f424,81383724,0,0x0,8
tick,0x7ffdf681f424,81385704,0,0x0,8
tick,0x7ffdf681f424,81387702,0,0x0,8
tick,0x7ffdf681f424,81389712,0,0x0,8
tick,0x7ffdf681f424,81391696,0,0x0,8
tick,0x7ffdf681f424,81393689,0,0x0,8
tick,0x7ffdf681f424,81395715,0,0x0,8
tick,0x7ffdf681f424,81397679,0,0x0,8
tick,0x7ffdf681f424,81399679,0,0x0,8
tick,0x7ffdf681f424,81401558,0,0x0,8
tick,0x7ffdf681f424,81403565,0,0x0,8
tick,0x7ffdf681f424,81405569,0,0x0,8
tick,0x7ffdf681f424,81407573,0,0x0,8
tick,0x7ffdf681f424,81409551,0,0x0,8
tick,0x7ffdf681f424,81411573,0,0x0,8
tick,0x7ffdf681f424,81413555,0,0x0,8
tick,0x7ffdf681f424,81415527,0,0x0,8
tick,0x7ffdf681f424,81417528,0,0x0,8
tick,0x7ffdf681f424,81419535,0,0x0,8
tick,0x7ffdf681f424,81421490,0,0x0,8
tick,0x7ffdf681f424,81423492,0,0x0,8
tick,0x7ffdf681f424,81425486,0,0x0,8
tick,0x7ffdf681f424,81427481,0,0x0,8
tick,0x7ffdf681f424,81429470,0,0x0,8
tick,0x7ffdf681f424,81431548,0,0x0,8
tick,0x7ffdf681f424,81433584,0,0x0,8
tick,0x7ffdf681f424,81435609,0,0x0,8
tick,0x7ffdf681f424,81437611,0,0x0,8
tick,0x7ffdf681f424,81439576,0,0x0,8
tick,0x7ffdf681f424,81441548,0,0x0,8
tick,0x7ffdf681f424,81443552,0,0x0,8
tick,0x7ffdf681f424,81445547,0,0x0,8
tick,0x7ffdf681f424,81447526,0,0x0,8
tick,0x7ffdf681f424,81449536,0,0x0,8
tick,0x7ffdf681f424,81451422,0,0x0,8
tick,0x7ffdf681f424,81453465,0,0x0,8
tick,0x7ffdf681f424,81455543,0,0x0,8
tick,0x7ffdf681f424,81457520,0,0x0,8
tick,0x7ffdf681f424,81459521,0,0x0,8
tick,0x7ffdf681f424,81461546,0,0x0,8
tick,0x7ffdf681f424,81463494,0,0x0,8
tick,0x7ffdf681f424,81465489,0,0x0,8
tick,0x7ffdf681f424,81467488,0,0x0,8
tick,0x7ffdf681f424,81469384,0,0x0,8
tick,0x7ffdf681f424,81471376,0,0x0,8
tick,0x7ffdf681f424,81473337,0,0x0,8
tick,0x7ffdf681f424,81475343,0,0x0,8
tick,0x7ffdf681f424,81477443,0,0x0,8
tick,0x7ffdf681f424,81479461,0,0x0,8
tick,0x7ffdf681f424,81481450,0,0x0,8
tick,0x7ffdf681f424,81483441,0,0x0,8
tick,0x7ffdf681f424,81485392,0,0x0,8
tick,0x7ffdf681f424,81487432,0,0x0,8
tick,0x7ffdf681f424,81489432,0,0x0,8
tick,0x7ffdf681f424,81491426,0,0x0,8
tick,0x7ffdf681f424,81493420,0,0x0,8
tick,0x7ffdf681f424,81495411,0,0x0,8
tick,0x7ffdf681f424,81497411,0,0x0,8
tick,0x7ffdf681f424,81499410,0,0x0,8
tick,0x7ffdf681f424,81501299,0,0x0,8
tick,0x7ffdf681f424,81503390,0,0x0,8
tick,0x7ffdf681f424,81505424,0,0x0,8
tick,0x7ffdf681f424,81507383,0,0x0,8
tick,0x7ffdf681f424,81509384,0,0x0,8
tick,0x7ffdf681f424,81511392,0,0x0,8
tick,0x7ffdf681f424,81513380,0,0x0,8
tick,0x7ffdf681f424,81515363,0,0x0,8
tick,0x7ffdf681f424,81517360,0,0x0,8
tick,0x7ffdf681f424,81519295,0,0x0,8
tick,0x7ffdf681f424,81521355,0,0x0,8
tick,0x7ffdf681f424,81523343,0,0x0,8
tick,0x7ffdf681f424,81525333,0,0x0,8
tick,0x7ffdf681f424,81527270,0,0x0,8
tick,0x7ffdf681f424,81529328,0,0x0,8
tick,0x7ffdf681f424,81531321,0,0x0,8
tick,0x7ffdf681f424,81533316,0,0x0,8
tick,0x7ffdf681f424,81535308,0,0x0,8
tick,0x7ffdf681f424,81537327,0,0x0,8
tick,0x7ffdf681f424,81539301,0,0x0,8
tick,0x7ffdf681f424,81541255,0,0x0,8
tick,0x7ffdf681f424,81543181,0,0x0,8
tick,0x7ffdf681f424,81545287,0,0x0,8
tick,0x7ffdf681f424,81547275,0,0x0,8
tick,0x7ffdf681f424,81549309,0,0x0,8
tick,0x7ffdf681f424,81551251,0,0x0,8
tick,0x7ffdf681f424,81553180,0,0x0,8
tick,0x7ffdf681f424,81555258,0,0x0,8
tick,0x7ffdf681f424,81557278,0,0x0,8
tick,0x7ffdf681f424,81559244,0,0x0,8
tick,0x7ffdf681f424,81561241,0,0x0,8
tick,0x7ffdf681f424,81563238,0,0x0,8
tick,0x7ffdf681f424,81565227,0,0x0,8
tick,0x7ffdf681f424,81567234,0,0x0,8
tick,0x7ffdf681f424,81569218,0,0x0,8
tick,0x7ffdf681f424,81571152,0,0x0,8
tick,0x7ffdf681f424,81573206,0,0x0,8
tick,0x7ffdf681f424,81575205,0,0x0,8
tick,0x7ffdf681f424,81577199,0,0x0,8
tick,0x7ffdf681f424,81579205,0,0x0,8
tick,0x7ffdf681f424,81581192,0,0x0,8
tick,0x7ffdf681f424,81583182,0,0x0,8
tick,0x7ffdf681f424,81585192,0,0x0,8
tick,0x7ffdf681f424,81587130,0,0x0,8
tick,0x7ffdf681f424,81589192,0,0x0,8
tick,0x7ffdf681f424,81591164,0,0x0,8
tick,0x7ffdf681f424,81592994,0,0x0,8
tick,0x7ffdf681f424,81595147,0,0x0,8
tick,0x7ffdf681f424,81597034,0,0x0,8
tick,0x7ffdf681f424,81599132,0,0x0,8
tick,0x7ffdf681f424,81601149,0,0x0,8
tick,0x7ffdf681f424,81603135,0,0x0,8
tick,0x7ffdf681f424,81605121,0,0x0,8
tick,0x7ffdf681f424,81607095,0,0x0,8
tick,0x7ffdf681f424,81609112,0,0x0,8
tick,0x7ffdf681f424,81611107,0,0x0,8
tick,0x7ffdf681f424,81613102,0,0x0,8
tick,0x7ffdf681f424,81615138,0,0x0,8
tick,0x7ffdf681f424,81617090,0,0x0,8
tick,0x7ffdf681f424,81619107,0,0x0,8
tick,0x7ffdf681f424,81621085,0,0x0,8
tick,0x7ffdf681f424,81623080,0,0x0,8
tick,0x7ffdf681f424,81625072,0,0x0,8
tick,0x7ffdf681f424,81627061,0,0x0,8
tick,0x7ffdf681f424,81628954,0,0x0,8
tick,0x7ffdf681f424,81631054,0,0x0,8
tick,0x7ffdf681f424,81633053,0,0x0,8
tick,0x7ffdf681f424,81634935,0,0x0,8
tick,0x7ffdf681f424,81636976,0,0x0,8
tick,0x7ffdf681f424,81639034,0,0x0,8
tick,0x7ffdf681f424,81641029,0,0x0,8
tick,0x7ffdf681f424,81642926,0,0x0,8
tick,0x7ffdf681f424,81645026,0,0x0,8
tick,0x7ffdf681f424,81647009,0,0x0,8
tick,0x7ffdf681f424,81649005,0,0x0,8
tick,0x7ffdf681f424,81651001,0,0x0,8
tick,0x7ffdf681f424,81652989,0,0x0,8
tick,0x7ffdf681f424,81654992,0,0x0,8
tick,0x7ffdf681f424,81656985,0,0x0,8
tick,0x7ffdf681f424,81659014,0,0x0,8
tick,0x7ffdf681f424,81660970,0,0x0,8
tick,0x7ffdf681f424,81662969,0,0x0,8
tick,0x7ffdf681f424,81664963,0,0x0,8
tick,0x7ffdf681f424,81666963,0,0x0,8
tick,0x7ffdf681f424,81668952,0,0x0,8
tick,0x7ffdf681f424,81670951,0,0x0,8
tick,0x7ffdf681f424,81672946,0,0x0,8
tick,0x7ffdf681f424,81674933,0,0x0,8
tick,0x7ffdf681f424,81676936,0,0x0,8
tick,0x7ffdf681f424,81678924,0,0x0,8
tick,0x7ffdf681f424,81680959,0,0x0,8
tick,0x7ffdf681f424,81682912,0,0x0,8
tick,0x7ffdf681f424,81684804,0,0x0,8
tick,0x7ffdf681f424,81686915,0,0x0,8
tick,0x7ffdf681f424,81688920,0,0x0,8
tick,0x7ffdf681f424,81690894,0,0x0,8
tick,0x7ffdf681f424,81692778,0,0x0,8
tick,0x7ffdf681f424,81694889,0,0x0,8
tick,0x7ffdf681f424,81696878,0,0x0,8
tick,0x7ffdf681f424,81698874,0,0x0,8
tick,0x7ffdf681f424,81700891,0,0x0,8
tick,0x7ffdf681f424,81702800,0,0x0,8
tick,0x7ffdf681f424,81704760,0,0x0,8
tick,0x7ffdf681f424,81706856,0,0x0,8
tick,0x7ffdf681f424,81708843,0,0x0,8
tick,0x7ffdf681f424,81710801,0,0x0,8
tick,0x7ffdf681f424,81712855,0,0x0,8
tick,0x7ffdf681f424,81714827,0,0x0,8
tick,0x7ffdf681f424,81716828,0,0x0,8
tick,0x7ffdf681f424,81718824,0,0x0,8
tick,0x7ffdf681f424,81720818,0,0x0,8
tick,0x7ffdf681f424,81722811,0,0x0,8
tick,0x7ffdf681f424,81724741,0,0x0,8
tick,0x7ffdf681f424,81726797,0,0x0,8
tick,0x7ffdf681f424,81728793,0,0x0,8
tick,0x7ffdf681f424,81730784,0,0x0,8
tick,0x7ffdf681f424,81732784,0,0x0,8
tick,0x7ffdf681f424,81734675,0,0x0,8
tick,0x7ffdf681f424,81736778,0,0x0,8
tick,0x7ffdf681f424,81738765,0,0x0,8
tick,0x7ffdf681f424,81740758,0,0x0,8
tick,0x7ffdf681f424,81742763,0,0x0,8
tick,0x7ffdf681f424,81744757,0,0x0,8
tick,0x7ffdf681f424,81746760,0,0x0,8
tick,0x7ffdf681f424,81748749,0,0x0,8
tick,0x7ffdf681f424,81750742,0,0x0,8
tick,0x7ffdf681f424,81752741,0,0x0,8
tick,0x7ffdf681f424,81754635,0,0x0,8
tick,0x7ffdf681f424,81756614,0,0x0,8
tick,0x7ffdf681f424,81758620,0,0x0,8
tick,0x7ffdf681f424,81760722,0,0x0,8
tick,0x7ffdf681f424,81762711,0,0x0,8
tick,0x7ffdf681f424,81764708,0,0x0,8
tick,0x7ffdf681f424,81766696,0,0x0,8
tick,0x7ffdf681f424,81768719,0,0x0,8
tick,0x7ffdf681f424,81770689,0,0x0,8
tick,0x7ffdf681f424,81772571,0,0x0,8
tick,0x7ffdf681f424,81774560,0,0x0,8
tick,0x7ffdf681f424,81776558,0,0x0,8
tick,0x7ffdf681f424,81778590,0,0x0,8
tick,0x7ffdf681f424,81780544,0,0x0,8
tick,0x7ffdf681f424,81782569,0,0x0,8
tick,0x7ffdf681f424,81784546,0,0x0,8
tick,0x7ffdf681f424,81786511,0,0x0,8
tick,0x7ffdf681f424,81788522,0,0x0,8
tick,0x7ffdf681f424,81790465,0,0x0,8
tick,0x7ffdf681f424,81792541,0,0x0,8
tick,0x7ffdf681f424,81794509,0,0x0,8
tick,0x7ffdf681f424,81796505,0,0x0,8
tick,0x7ffdf681f424,81798609,0,0x0,8
tick,0x7ffdf681f424,81800599,0,0x0,8
tick,0x7ffdf681f424,81802487,0,0x0,8
tick,0x7ffdf681f424,81804595,0,0x0,8
tick,0x7ffdf681f424,81806474,0,0x0,8
tick,0x7ffdf681f424,81808585,0,0x0,8
tick,0x7ffdf681f424,81810467,0,0x0,8
tick,0x7ffdf681f424,81812512,0,0x0,8
tick,0x7ffdf681f424,81814536,0,0x0,8
tick,0x7ffdf681f424,81816559,0,0x0,8
tick,0x7ffdf681f424,81818549,0,0x0,8
tick,0x7ffdf681f424,81820439,0,0x0,8
tick,0x7ffdf681f424,81822540,0,0x0,8
tick,0x7ffdf681f424,81824542,0,0x0,8
tick,0x7ffdf681f424,81826426,0,0x0,8
tick,0x7ffdf681f424,81828428,0,0x0,8
tick,0x7ffdf681f424,81830526,0,0x0,8
tick,0x7ffdf681f424,81832405,0,0x0,8
tick,0x7ffdf681f424,81834479,0,0x0,8
tick,0x7ffdf681f424,81836512,0,0x0,8
tick,0x7ffdf681f424,81838492,0,0x0,8
tick,0x7ffdf681f424,81840389,0,0x0,8
tick,0x7ffdf681f424,81842488,0,0x0,8
tick,0x7ffdf681f424,81844367,0,0x0,8
tick,0x7ffdf681f424,81846474,0,0x0,8
tick,0x7ffdf681f424,81848372,0,0x0,8
tick,0x7ffdf681f424,81850458,0,0x0,8
tick,0x7ffdf681f424,81852463,0,0x0,8
tick,0x7ffdf681f424,81854439,0,0x0,8
tick,0x7ffdf681f424,81856407,0,0x0,8
tick,0x7ffdf681f424,81858314,0,0x0,8
tick,0x7ffdf681f424,81860335,0,0x0,8
tick,0x7ffdf681f424,81862408,0,0x0,8
tick,0x7ffdf681f424,81864451,0,0x0,8
tick,0x7ffdf681f424,81866329,0,0x0,8
tick,0x7ffdf681f424,81868312,0,0x0,8
tick,0x7ffdf681f424,81870410,0,0x0,8
tick,0x7ffdf681f424,81872320,0,0x0,8
tick,0x7ffdf681f424,81874407,0,0x0,8
tick,0x7ffdf681f424,81876310,0,0x0,8
tick,0x7ffdf681f424,81878410,0,0x0,8
tick,0x7ffdf681f424,81880281,0,0x0,8
tick,0x7ffdf681f424,81882317,0,0x0,8
tick,0x7ffdf681f424,81884322,0,0x0,8
tick,0x7ffdf681f424,81886309,0,0x0,8
tick,0x7ffdf681f424,81888305,0,0x0,8
tick,0x7ffdf681f424,81890356,0,0x0,8
tick,0x7ffdf681f424,81892376,0,0x0,8
tick,0x7ffdf681f424,81894352,0,0x0,8
tick,0x7ffdf681f424,81896228,0,0x0,8
tick,0x7ffdf681f424,81898260,0,0x0,8
tick,0x7ffdf681f424,81900371,0,0x0,8
tick,0x7ffdf681f424,81902309,0,0x0,8
tick,0x7ffdf681f424,81904214,0,0x0,8
tick,0x7ffdf681f424,81906311,0,0x0,8
tick,0x7ffdf681f424,81908307,0,0x0,8
tick,0x7ffdf681f424,81910196,0,0x0,8
tick,0x7ffdf681f424,81912141,0,0x0,8
tick,0x7ffdf681f424,81914079,0,0x0,8
tick,0x7ffdf681f424,81916179,0,0x0,8
tick,0x7ffdf681f424,81918176,0,0x0,8
tick,0x7ffdf681f424,81920284,0,0x0,8
tick,0x7ffdf681f424,81922345,0,0x0,8
tick,0x7ffdf681f424,81924293,0,0x0,8
tick,0x7ffdf681f424,81926239,0,0x0,8
tick,0x7ffdf681f424,81928257,0,0x0,8
tick,0x7ffdf681f424,81930258,0,0x0,8
tick,0x7ffdf681f424,81932255,0,0x0,8
tick,0x7ffdf681f424,81934141,0,0x0,8
tick,0x7ffdf681f424,81936263,0,0x0,8
tick,0x7ffdf681f424,81938268,0,0x0,8
tick,0x7ffdf681f424,81940235,0,0x0,8
tick,0x7ffdf681f424,81942240,0,0x0,8
tick,0x7ffdf681f424,81944090,0,0x0,8
tick,0x7ffdf681f424,81946136,0,0x0,8
tick,0x7ffdf681f424,81948219,0,0x0,8
tick,0x7ffdf681f424,81950206,0,0x0,8
tick,0x7ffdf681f424,81952190,0,0x0,8
tick,0x7ffdf681f424,81954183,0,0x0,8
tick,0x7ffdf681f424,81956198,0,0x0,8
tick,0x7ffdf681f424,81958015,0,0x0,8
tick,0x7ffdf681f424,81959975,0,0x0,8
tick,0x7ffdf681f424,81962111,0,0x0,8
tick,0x7ffdf681f424,81964170,0,0x0,8
tick,0x7ffdf681f424,81966213,0,0x0,8
tick,0x7ffdf681f424,81968069,0,0x0,8
tick,0x7ffdf681f424,81970152,0,0x0,8
tick,0x7ffdf681f424,81972151,0,0x0,8
tick,0x7ffdf681f424,81974132,0,0x0,8
tick,0x7ffdf681f424,81976119,0,0x0,8
tick,0x7ffdf681f424,81978012,0,0x0,8
tick,0x7ffdf681f424,81980121,0,0x0,8
tick,0x7ffdf681f424,81982059,0,0x0,8
tick,0x7ffdf681f424,81984064,0,0x0,8
tick,0x7ffdf681f424,81986054,0,0x0,8
tick,0x7ffdf681f424,81988039,0,0x0,8
tick,0x7ffdf681f424,81990036,0,0x0,8
tick,0x7ffdf681f424,81992033,0,0x0,8
tick,0x7ffdf681f424,81994031,0,0x0,8
tick,0x7ffdf681f424,81996026,0,0x0,8
tick,0x7ffdf681f424,81998016,0,0x0,8
tick,0x7ffdf681f424,81999972,0,0x0,8
tick,0x7ffdf681f424,82001896,0,0x0,8
tick,0x7ffdf681f424,82004001,0,0x0,8
tick,0x7ffdf681f424,82006010,0,0x0,8
tick,0x7ffdf681f424,82007997,0,0x0,8
tick,0x7ffdf681f424,82009863,0,0x0,8
tick,0x7ffdf681f424,82011984,0,0x0,8
tick,0x7ffdf681f424,82013990,0,0x0,8
tick,0x7ffdf681f424,82015971,0,0x0,8
tick,0x7ffdf681f424,82017945,0,0x0,8
tick,0x7ffdf681f424,82019878,0,0x0,8
tick,0x7ffdf681f424,82021952,0,0x0,8
tick,0x7ffdf681f424,82023956,0,0x0,8
tick,0x7ffdf681f424,82025945,0,0x0,8
tick,0x7ffdf681f424,82027983,0,0x0,8
tick,0x7ffdf681f424,82029935,0,0x0,8
tick,0x7ffdf681f424,82031989,0,0x0,8
tick,0x7ffdf681f424,82033958,0,0x0,8
tick,0x7ffdf681f424,82035918,0,0x0,8
tick,0x7ffdf681f424,82037931,0,0x0,8
tick,0x7ffdf681f424,82039903,0,0x0,8
tick,0x7ffdf681f424,82041899,0,0x0,8
tick,0x7ffdf681f424,82043835,0,0x0,8
tick,0x7ffdf681f424,82045903,0,0x0,8
tick,0x7ffdf681f424,82047884,0,0x0,8
tick,0x7ffdf681f424,82049878,0,0x0,8
tick,0x7ffdf681f424,82051785,0,0x0,8
tick,0x7ffdf681f424,82053861,0,0x0,8
tick,0x7ffdf681f424,82055862,0,0x0,8
tick,0x7ffdf681f424,82057855,0,0x0,8
tick,0x7ffdf681f424,82059800,0,0x0,8
tick,0x7ffdf681f424,82061860,0,0x0,8
tick,0x7ffdf681f424,82063839,0,0x0,8
tick,0x7ffdf681f424,82065838,0,0x0,8
tick,0x7ffdf681f424,82067841,0,0x0,8
tick,0x7ffdf681f424,82069840,0,0x0,8
tick,0x7ffdf681f424,82071735,0,0x0,8
tick,0x7ffdf681f424,82073758,0,0x0,8
tick,0x7ffdf681f424,82075708,0,0x0,8
tick,0x7ffdf681f424,82077731,0,0x0,8
tick,0x7ffdf681f424,82079787,0,0x0,8
tick,0x7ffdf681f424,82081796,0,0x0,8
tick,0x7ffdf681f424,82083753,0,0x0,8
tick,0x7ffdf681f424,82085678,0,0x0,8
tick,0x7ffdf681f424,82087738,0,0x0,8
tick,0x7ffdf681f424,82089769,0,0x0,8
tick,0x7ffdf681f424,82091658,0,0x0,8
tick,0x7ffdf681f424,82093668,0,0x0,8
tick,0x7ffdf681f424,82095651,0,0x0,8
tick,0x7ffdf681f424,82097640,0,0x0,8
tick,0x7ffdf681f424,82099688,0,0x0,8
tick,0x7ffdf681f424,82101631,0,0x0,8
tick,0x7ffdf681f424,82103692,0,0x0,8
tick,0x7ffdf681f424,82105656,0,0x0,8
tick,0x7ffdf681f424,82107653,0,0x0,8
tick,0x7ffdf681f424,82109647,0,0x0,8
tick,0x7ffdf681f424,82111608,0,0x0,8
tick,0x7ffdf681f424,82113630,0,0x0,8
tick,0x7ffdf681f424,82115662,0,0x0,8
tick,0x7ffdf681f424,82117588,0,0x0,8
tick,0x7ffdf681f424,82119589,0,0x0,8
tick,0x7ffdf681f424,82121591,0,0x0,8
tick,0x7ffdf681f424,82123587,0,0x0,8
tick,0x7ffdf681f424,82125591,0,0x0,8
tick,0x7ffdf681f424,82127571,0,0x0,8
tick,0x7ffdf681f424,82129564,0,0x0,8
tick,0x7ffdf681f424,82131551,0,0x0,8
tick,0x7ffdf681f424,82133560,0,0x0,8
tick,0x7ffdf681f424,82135555,0,0x0,8
tick,0x7ffdf681f424,82137552,0,0x0,8
tick,0x7ffdf681f424,82139586,0,0x0,8
tick,0x7ffdf681f424,82141522,0,0x0,8
tick,0x7ffdf681f424,82143535,0,0x0,8
tick,0x7ffdf681f424,82145571,0,0x0,8
tick,0x7ffdf681f424,82147512,0,0x0,8
tick,0x7ffdf681f424,82149522,0,0x0,8
tick,0x7ffdf681f424,82151546,0,0x0,8
tick,0x7ffdf681f424,82153494,0,0x0,8
tick,0x7ffdf681f424,82155546,0,0x0,8
tick,0x7ffdf681f424,82157539,0,0x0,8
tick,0x7ffdf681f424,82159485,0,0x0,8
tick,0x7ffdf681f424,82161487,0,0x0,8
tick,0x7ffdf681f424,82163521,0,0x0,8
tick,0x7ffdf681f424,82165517,0,0x0,8
tick,0x7ffdf681f424,82167465,0,0x0,8
tick,0x7ffdf681f424,82169452,0,0x0,8
tick,0x7ffdf681f424,82171514,0,0x0,8
tick,0x7ffdf681f424,82173564,0,0x0,8
tick,0x7ffdf681f424,82175556,0,0x0,8
tick,0x7ffdf681f424,82177488,0,0x0,8
tick,0x7ffdf681f424,82179595,0,0x0,8
tick,0x7ffdf681f424,82181601,0,0x0,8
tick,0x7ffdf681f424,82183579,0,0x0,8
tick,0x7ffdf681f424,82185606,0,0x0,8
tick,0x7ffdf681f424,82187561,0,0x0,8
tick,0x7ffdf681f424,82189564,0,0x0,8
tick,0x7ffdf681f424,82191592,0,0x0,8
tick,0x7ffdf681f424,82193569,0,0x0,8
tick,0x7ffdf681f424,82195554,0,0x0,8
tick,0x7ffdf681f424,82197548,0,0x0,8
tick,0x7ffdf681f424,82199544,0,0x0,8
tick,0x7ffdf681f424,82201435,0,0x0,8
tick,0x7ffdf681f424,82203532,0,0x0,8
tick,0x7ffdf681f424,82205526,0,0x0,8
tick,0x7ffdf681f424,82207459,0,0x0,8
tick,0x7ffdf681f424,82209519,0,0x0,8
tick,0x7ffdf681f424,82211397,0,0x0,8
tick,0x7ffdf681f424,82213499,0,0x0,8
tick,0x7ffdf681f424,82215509,0,0x0,8
tick,0x7ffdf681f424,82217490,0,0x0,8
tick,0x7ffdf681f424,82219488,0,0x0,8
tick,0x7ffdf681f424,82221485,0,0x0,8
tick,0x7ffdf681f424,82223476,0,0x0,8
tick,0x7ffdf681f424,82225477,0,0x0,8
tick,0x7ffdf681f424,82227464,0,0x0,8
tick,0x7ffdf681f424,82229493,0,0x0,8
tick,0x7ffdf681f424,82231465,0,0x0,8
tick,0x7ffdf681f424,82233447,0,0x0,8
tick,0x7ffdf681f424,82235442,0,0x0,8
tick,0x7ffdf681f424,82237442,0,0x0,8
tick,0x7ffdf681f424,82239452,0,0x0,8
tick,0x7ffdf681f424,82241429,0,0x0,8
tick,0x7ffdf681f424,82243319,0,0x0,8
tick,0x7ffdf681f424,82245411,0,0x0,8
tick,0x7ffdf681f424,82247414,0,0x0,8
tick,0x7ffdf681f424,82249402,0,0x0,8
tick,0x7ffdf681f424,82251290,0,0x0,8
tick,0x7ffdf681f424,82253392,0,0x0,8
tick,0x7ffdf681f424,82255384,0,0x0,8
tick,0x7ffdf681f424,82257376,0,0x0,8
tick,0x7ffdf681f424,82259372,0,0x0,8
tick,0x7ffdf681f424,82261367,0,0x0,8
tick,0x7ffdf681f424,82263363,0,0x0,8
tick,0x7ffdf681f424,82265368,0,0x0,8
tick,0x7ffdf681f424,82267361,0,0x0,8
tick,0x7ffdf681f424,82269348,0,0x0,8
tick,0x7ffdf681f424,82271348,0,0x0,8
tick,0x7ffdf681f424,82273323,0,0x0,8
tick,0x7ffdf681f424,82275329,0,0x0,8
tick,0x7ffdf681f424,82277318,0,0x0,8
tick,0x7ffdf681f424,82279331,0,0x0,8
tick,0x7ffdf681f424,82281310,0,0x0,8
tick,0x7ffdf681f424,82283311,0,0x0,8
tick,0x7ffdf681f424,82285302,0,0x0,8
tick,0x7ffdf681f424,82287304,0,0x0,8
tick,0x7ffdf681f424,82289306,0,0x0,8
tick,0x7ffdf681f424,82291310,0,0x0,8
tick,0x7ffdf681f424,82293176,0,0x0,8
tick,0x7ffdf681f424,82295312,0,0x0,8
tick,0x7ffdf681f424,82297296,0,0x0,8
tick,0x7ffdf681f424,82299265,0,0x0,8
tick,0x7ffdf681f424,82301272,0,0x0,8
tick,0x7ffdf681f424,82303258,0,0x0,8
tick,0x7ffdf681f424,82305248,0,0x0,8
tick,0x7ffdf681f424,82307188,0,0x0,8
tick,0x7ffdf681f424,82309239,0,0x0,8
tick,0x7ffdf681f424,82311241,0,0x0,8
tick,0x7ffdf681f424,82313230,0,0x0,8
tick,0x7ffdf681f424,82315226,0,0x0,8
tick,0x7ffdf681f424,82317124,0,0x0,8
tick,0x7ffdf681f424,82319122,0,0x0,8
tick,0x7ffdf681f424,82321221,0,0x0,8
tick,0x7ffdf681f424,82323208,0,0x0,8
tick,0x7ffdf681f424,82325201,0,0x0,8
tick,0x7ffdf681f424,82327087,0,0x0,8
tick,0x7ffdf681f424,82329182,0,0x0,8
tick,0x7ffdf681f424,82331186,0,0x0,8
tick,0x7ffdf681f424,82333188,0,0x0,8
tick,0x7ffdf681f424,82335117,0,0x0,8
tick,0x7ffdf681f424,82337160,0,0x0,8
tick,0x7ffdf681f424,82339099,0,0x0,8
tick,0x7ffdf681f424,82341164,0,0x0,8
tick,0x7ffdf681f424,82343051,0,0x0,8
tick,0x7ffdf681f424,82345141,0,0x0,8
tick,0x7ffdf681f424,82347135,0,0x0,8
tick,0x7ffdf681f424,82349137,0,0x0,8
tick,0x7ffdf681f424,82351123,0,0x0,8
tick,0x7ffdf681f424,82353124,0,0x0,8
tick,0x7ffdf681f424,82355155,0,0x0,8
tick,0x7ffdf681f424,82357114,0,0x0,8
tick,0x7ffdf681f424,82359108,0,0x0,8
tick,0x7ffdf681f424,82361038,0,0x0,8
tick,0x7ffdf681f424,82363090,0,0x0,8
tick,0x7ffdf681f424,82365097,0,0x0,8
tick,0x7ffdf681f424,82367086,0,0x0,8
tick,0x7ffdf681f424,82369078,0,0x0,8
tick,0x7ffdf681f424,82371069,0,0x0,8
tick,0x7ffdf681f424,82373074,0,0x0,8
tick,0x7ffdf681f424,82375072,0,0x0,8
tick,0x7ffdf681f424,82377075,0,0x0,8
tick,0x7ffdf681f424,82379055,0,0x0,8
tick,0x7ffdf681f424,82381043,0,0x0,8
tick,0x7ffdf681f424,82382980,0,0x0,8
tick,0x7ffdf681f424,82384930,0,0x0,8
tick,0x7ffdf681f424,82387029,0,0x0,8
tick,0x7ffdf681f424,82389024,0,0x0,8
tick,0x7ffdf681f424,82391021,0,0x0,8
tick,0x7ffdf681f424,82393048,0,0x0,8
tick,0x7ffdf681f424,82395015,0,0x0,8
tick,0x7ffdf681f424,82397007,0,0x0,8
tick,0x7ffdf681f424,82399011,0,0x0,8
tick,0x7ffdf681f424,82400956,0,0x0,8
tick,0x7ffdf681f424,82402989,0,0x0,8
tick,0x7ffdf681f424,82404925,0,0x0,8
tick,0x7ffdf681f424,82406986,0,0x0,8
tick,0x7ffdf681f424,82408971,0,0x0,8
tick,0x7ffdf681f424,82410966,0,0x0,8
tick,0x7ffdf681f424,82412997,0,0x0,8
tick,0x7ffdf681f424,82414961,0,0x0,8
tick,0x7ffdf681f424,82416949,0,0x0,8
tick,0x7ffdf681f424,82418950,0,0x0,8
tick,0x7ffdf681f424,82420939,0,0x0,8
tick,0x7ffdf681f424,82422889,0,0x0,8
tick,0x7ffdf681f424,82424933,0,0x0,8
tick,0x7ffdf681f424,82426964,0,0x0,8
tick,0x7ffdf681f424,82428924,0,0x0,8
tick,0x7ffdf681f424,82430812,0,0x0,8
tick,0x7ffdf681f424,82432748,0,0x0,8
tick,0x7ffdf681f424,82434768,0,0x0,8
tick,0x7ffdf681f424,82436859,0,0x0,8
tick,0x7ffdf681f424,82438784,0,0x0,8
tick,0x7ffdf681f424,82440747,0,0x0,8
tick,0x7ffdf681f424,82442688,0,0x0,8
tick,0x7ffdf681f424,82444700,0,0x0,8
tick,0x7ffdf681f424,82446674,0,0x0,8
tick,0x7ffdf681f424,82448680,0,0x0,8
tick,0x7ffdf681f424,82450670,0,0x0,8
tick,0x7ffdf681f424,82452672,0,0x0,8
tick,0x7ffdf681f424,82454688,0,0x0,8
tick,0x7ffdf681f424,82456733,0,0x0,8
tick,0x7ffdf681f424,82458792,0,0x0,8
tick,0x7ffdf681f424,82460723,0,0x0,8
tick,0x7ffdf681f424,82462831,0,0x0,8
tick,0x7ffdf681f424,82464824,0,0x0,8
tick,0x7ffdf681f424,82466825,0,0x0,8
tick,0x7ffdf681f424,82468714,0,0x0,8
tick,0x7ffdf681f424,82470710,0,0x0,8
tick,0x7ffdf681f424,82472700,0,0x0,8
tick,0x7ffdf681f424,82474827,0,0x0,8
tick,0x7ffdf681f424,82476680,0,0x0,8
tick,0x7ffdf681f424,82478786,0,0x0,8
tick,0x7ffdf681f424,82480781,0,0x0,8
tick,0x7ffdf681f424,82482776,0,0x0,8
tick,0x7ffdf681f424,82484696,0,0x0,8
tick,0x7ffdf681f424,82486774,0,0x0,8
tick,0x7ffdf681f424,82488771,0,0x0,8
tick,0x7ffdf681f424,82490756,0,0x0,8
tick,0x7ffdf681f424,82492862,0,0x0,8
tick,0x7ffdf681f424,82494733,0,0x0,8
tick,0x7ffdf681f424,82496749,0,0x0,8
tick,0x7ffdf681f424,82498736,0,0x0,8
tick,0x7ffdf681f424,82500730,0,0x0,8
tick,0x7ffdf681f424,82502733,0,0x0,8
tick,0x7ffdf681f424,82504724,0,0x0,8
tick,0x7ffdf681f424,82506721,0,0x0,8
tick,0x7ffdf681f424,82508711,0,0x0,8
tick,0x7ffdf681f424,82510703,0,0x0,8
tick,0x7ffdf681f424,82512697,0,0x0,8
tick,0x7ffdf681f424,82514711,0,0x0,8
tick,0x7ffdf681f424,82516692,0,0x0,8
tick,0x7ffdf681f424,82518635,0,0x0,8
tick,0x7ffdf681f424,82520675,0,0x0,8
tick,0x7ffdf681f424,82522666,0,0x0,8
tick,0x7ffdf681f424,82524666,0,0x0,8
tick,0x7ffdf681f424,82526566,0,0x0,8
tick,0x7ffdf681f424,82528666,0,0x0,8
tick,0x7ffdf681f424,82530656,0,0x0,8
tick,0x7ffdf681f424,82532633,0,0x0,8
tick,0x7ffdf681f424,82534648,0,0x0,8
tick,0x7ffdf681f424,82536569,0,0x0,8
tick,0x7ffdf681f424,82538633,0,0x0,8
tick,0x7ffdf681f424,82540622,0,0x0,8
tick,0x7ffdf681f424,82542615,0,0x0,8
tick,0x7ffdf681f424,82544610,0,0x0,8
tick,0x7ffdf681f424,82546614,0,0x0,8
tick,0x7ffdf681f424,82548498,0,0x0,8
tick,0x7ffdf681f424,82550608,0,0x0,8
tick,0x7ffdf681f424,82552598,0,0x0,8
tick,0x7ffdf681f424,82554603,0,0x0,8
tick,0x7ffdf681f424,82556580,0,0x0,8
tick,0x7ffdf681f424,82558632,0,0x0,8
tick,0x7ffdf681f424,82560453,0,0x0,8
tick,0x7ffdf681f424,82562563,0,0x0,8
tick,0x7ffdf681f424,82564560,0,0x0,8
tick,0x7ffdf681f424,82566558,0,0x0,8
tick,0x7ffdf681f424,82568543,0,0x0,8
tick,0x7ffdf681f424,82570546,0,0x0,8
tick,0x7ffdf681f424,82572550,0,0x0,8
tick,0x7ffdf681f424,82574534,0,0x0,8
tick,0x7ffdf681f424,82576427,0,0x0,8
tick,0x7ffdf681f424,82578523,0,0x0,8
tick,0x7ffdf681f424,82580540,0,0x0,8
tick,0x7ffdf681f424,82582512,0,0x0,8
tick,0x7ffdf681f424,82584511,0,0x0,8
tick,0x7ffdf681f424,82586500,0,0x0,8
tick,0x7ffdf681f424,82588505,0,0x0,8
tick,0x7ffdf681f424,82590496,0,0x0,8
tick,0x7ffdf681f424,82592487,0,0x0,8
tick,0x7ffdf681f424,82594487,0,0x0,8
tick,0x7ffdf681f424,82596484,0,0x0,8
tick,0x7ffdf681f424,82598483,0,0x0,8
tick,0x7ffdf681f424,82600488,0,0x0,8
tick,0x7ffdf681f424,82602394,0,0x0,8
tick,0x7ffdf681f424,82604447,0,0x0,8
tick,0x7ffdf681f424,82606446,0,0x0,8
tick,0x7ffdf681f424,82608415,0,0x0,8
tick,0x7ffdf681f424,82610451,0,0x0,8
tick,0x7ffdf681f424,82612432,0,0x0,8
tick,0x7ffdf681f424,82614427,0,0x0,8
tick,0x7ffdf681f424,82616436,0,0x0,8
tick,0x7ffdf681f424,82618311,0,0x0,8
tick,0x7ffdf681f424,82620416,0,0x0,8
tick,0x7ffdf681f424,82622413,0,0x0,8
tick,0x7ffdf681f424,82624320,0,0x0,8
tick,0x7ffdf681f424,82626300,0,0x0,8
tick,0x7ffdf681f424,82628399,0,0x0,8
tick,0x7ffdf681f424,82630385,0,0x0,8
tick,0x7ffdf681f424,82632379,0,0x0,8
tick,0x7ffdf681f424,82634370,0,0x0,8
tick,0x7ffdf681f424,82636364,0,0x0,8
tick,0x7ffdf681f424,82638366,0,0x0,8
tick,0x7ffdf681f424,82640259,0,0x0,8
tick,0x7ffdf681f424,82642359,0,0x0,8
tick,0x7ffdf681f424,82644347,0,0x0,8
tick,0x7ffdf681f424,82646338,0,0x0,8
tick,0x7ffdf681f424,82648330,0,0x0,8
tick,0x7ffdf681f424,82650333,0,0x0,8
tick,0x7ffdf681f424,82652323,0,0x0,8
tick,0x7ffdf681f424,82654335,0,0x0,8
tick,0x7ffdf681f424,82656316,0,0x0,8
tick,0x7ffdf681f424,82658310,0,0x0,8
tick,0x7ffdf681f424,82660306,0,0x0,8
tick,0x7ffdf681f424,82662296,0,0x0,8
tick,0x7ffdf681f424,82664292,0,0x0,8
tick,0x7ffdf681f424,82666283,0,0x0,8
tick,0x7ffdf681f424,82668131,0,0x0,8
tick,0x7ffdf681f424,82670278,0,0x0,8
tick,0x7ffdf681f424,82672272,0,0x0,8
tick,0x7ffdf681f424,82674263,0,0x0,8
tick,0x7ffdf681f424,82676271,0,0x0,8
tick,0x7ffdf681f424,82678253,0,0x0,8
tick,0x7ffdf681f424,82680254,0,0x0,8
tick,0x7ffdf681f424,82682248,0,0x0,8
tick,0x7ffdf681f424,82684236,0,0x0,8
tick,0x7ffdf681f424,82686234,0,0x0,8
tick,0x7ffdf681f424,82688224,0,0x0,8
tick,0x7ffdf681f424,82690158,0,0x0,8
tick,0x7ffdf681f424,82692215,0,0x0,8
tick,0x7ffdf681f424,82694213,0,0x0,8
tick,0x7ffdf681f424,82696204,0,0x0,8
tick,0x7ffdf681f424,82698227,0,0x0,8
tick,0x7ffdf681f424,82700195,0,0x0,8
tick,0x7ffdf681f424,82702180,0,0x0,8
tick,0x7ffdf681f424,82704187,0,0x0,8
tick,0x7ffdf681f424,82706177,0,0x0,8
tick,0x7ffdf681f424,82708177,0,0x0,8
tick,0x7ffdf681f424,82710066,0,0x0,8
tick,0x7ffdf681f424,82712195,0,0x0,8
tick,0x7ffdf681f424,82714159,0,0x0,8
tick,0x7ffdf681f424,82716161,0,0x0,8
tick,0x7ffdf681f424,82718079,0,0x0,8
tick,0x7ffdf681f424,82720161,0,0x0,8
tick,0x7ffdf681f424,82722134,0,0x0,8
tick,0x7ffdf681f424,82724144,0,0x0,8
tick,0x7ffdf681f424,82726138,0,0x0,8
tick,0x7ffdf681f424,82728120,0,0x0,8
tick,0x7ffdf681f424,82730117,0,0x0,8
tick,0x7ffdf681f424,82732115,0,0x0,8
tick,0x7ffdf681f424,82734040,0,0x0,8
tick,0x7ffdf681f424,82736094,0,0x0,8
tick,0x7ffdf681f424,82738092,0,0x0,8
tick,0x7ffdf681f424,82740087,0,0x0,8
tick,0x7ffdf681f424,82742084,0,0x0,8
tick,0x7ffdf681f424,82744074,0,0x0,8
tick,0x7ffdf681f424,82746084,0,0x0,8
tick,0x7ffdf681f424,82748079,0,0x0,8
tick,0x7ffdf681f424,82750068,0,0x0,8
tick,0x7ffdf681f424,82752062,0,0x0,8
tick,0x7ffdf681f424,82754060,0,0x0,8
tick,0x7ffdf681f424,82755984,0,0x0,8
tick,0x7ffdf681f424,82758035,0,0x0,8
tick,0x7ffdf681f424,82759926,0,0x0,8
tick,0x7ffdf681f424,82762034,0,0x0,8
tick,0x7ffdf681f424,82764049,0,0x0,8
tick,0x7ffdf681f424,82766025,0,0x0,8
tick,0x7ffdf681f424,82768030,0,0x0,8
tick,0x7ffdf681f424,82770018,0,0x0,8
tick,0x7ffdf681f424,82772010,0,0x0,8
tick,0x7ffdf681f424,82774002,0,0x0,8
tick,0x7ffdf681f424,82776006,0,0x0,8
tick,0x7ffdf681f424,82777888,0,0x0,8
tick,0x7ffdf681f424,82779880,0,0x0,8
tick,0x7ffdf681f424,82782002,0,0x0,8
tick,0x7ffdf681f424,82783975,0,0x0,8
tick,0x7ffdf681f424,82785964,0,0x0,8
tick,0x7ffdf681f424,82787969,0,0x0,8
tick,0x7ffdf681f424,82789967,0,0x0,8
tick,0x7ffdf681f424,82791968,0,0x0,8
tick,0x7ffdf681f424,82793947,0,0x0,8
tick,0x7ffdf681f424,82795958,0,0x0,8
tick,0x7ffdf681f424,82797949,0,0x0,8
tick,0x7ffdf681f424,82799952,0,0x0,8
tick,0x7ffdf681f424,82801926,0,0x0,8
tick,0x7ffdf681f424,82803919,0,0x0,8
tick,0x7ffdf681f424,82805917,0,0x0,8
tick,0x7ffdf681f424,82807906,0,0x0,8
tick,0x7ffdf681f424,82809792,0,0x0,8
tick,0x7ffdf681f424,82811903,0,0x0,8
tick,0x7ffdf681f424,82813904,0,0x0,8
tick,0x7ffdf681f424,82815890,0,0x0,8
tick,0x7ffdf681f424,82817899,0,0x0,8
tick,0x7ffdf681f424,82819884,0,0x0,8
tick,0x7ffdf681f424,82821885,0,0x0,8
tick,0x7ffdf681f424,82823871,0,0x0,8
tick,0x7ffdf681f424,82825756,0,0x0,8
tick,0x7ffdf681f424,82827857,0,0x0,8
tick,0x7ffdf681f424,82829850,0,0x0,8
tick,0x7ffdf681f424,82831843,0,0x0,8
tick,0x7ffdf681f424,82833851,0,0x0,8
tick,0x7ffdf681f424,82835845,0,0x0,8
tick,0x7ffdf681f424,82837830,0,0x0,8
tick,0x7ffdf681f424,82839723,0,0x0,8
tick,0x7ffdf681f424,82841715,0,0x0,8
tick,0x7ffdf681f424,82843760,0,0x0,8
tick,0x7ffdf681f424,82845740,0,0x0,8
tick,0x7ffdf681f424,82847796,0,0x0,8
tick,0x7ffdf681f424,82849742,0,0x0,8
tick,0x7ffdf681f424,82851680,0,0x0,8
tick,0x7ffdf681f424,82853784,0,0x0,8
tick,0x7ffdf681f424,82855681,0,0x0,8
tick,0x7ffdf681f424,82857669,0,0x0,8
tick,0x7ffdf681f424,82859651,0,0x0,8
tick,0x7ffdf681f424,82861662,0,0x0,8
tick,0x7ffdf681f424,82863680,0,0x0,8
tick,0x7ffdf681f424,82865613,0,0x0,8
tick,0x7ffdf681f424,82867589,0,0x0,8
tick,0x7ffdf681f424,82869625,0,0x0,8
tick,0x7ffdf681f424,82871621,0,0x0,8
tick,0x7ffdf681f424,82873621,0,0x0,8
tick,0x7ffdf681f424,82875614,0,0x0,8
tick,0x7ffdf681f424,82877561,0,0x0,8
tick,0x7ffdf681f424,82879541,0,0x0,8
tick,0x7ffdf681f424,82881546,0,0x0,8
tick,0x7ffdf681f424,82883610,0,0x0,8
tick,0x7ffdf681f424,82885591,0,0x0,8
tick,0x7ffdf681f424,82887535,0,0x0,8
tick,0x7ffdf681f424,82889581,0,0x0,8
tick,0x7ffdf681f424,82891573,0,0x0,8
tick,0x7ffdf681f424,82893523,0,0x0,8
tick,0x7ffdf681f424,82895566,0,0x0,8
tick,0x7ffdf681f424,82897578,0,0x0,8
tick,0x7ffdf681f424,82899555,0,0x0,8
tick,0x7ffdf681f424,82901558,0,0x0,8
tick,0x7ffdf681f424,82903547,0,0x0,8
tick,0x7ffdf681f424,82905539,0,0x0,8
tick,0x7ffdf681f424,82907545,0,0x0,8
tick,0x7ffdf681f424,82909492,0,0x0,8
tick,0x7ffdf681f424,82911472,0,0x0,8
tick,0x7ffdf681f424,82913495,0,0x0,8
tick,0x7ffdf681f424,82915465,0,0x0,8
tick,0x7ffdf681f424,82917465,0,0x0,8
tick,0x7ffdf681f424,82919445,0,0x0,8
tick,0x7ffdf681f424,82921463,0,0x0,8
tick,0x7ffdf681f424,82923449,0,0x0,8
tick,0x7ffdf681f424,82925432,0,0x0,8
tick,0x7ffdf681f424,82927419,0,0x0,8
tick,0x7ffdf681f424,82929497,0,0x0,8
tick,0x7ffdf681f424,82931413,0,0x0,8
tick,0x7ffdf681f424,82933420,0,0x0,8
tick,0x7ffdf681f424,82935421,0,0x0,8
tick,0x7ffdf681f424,82937414,0,0x0,8
tick,0x7ffdf681f424,82939441,0,0x0,8
tick,0x7ffdf681f424,82941472,0,0x0,8
tick,0x7ffdf681f424,82943364,0,0x0,8
tick,0x7ffdf681f424,82945451,0,0x0,8
tick,0x7ffdf681f424,82947439,0,0x0,8
tick,0x7ffdf681f424,82949383,0,0x0,8
tick,0x7ffdf681f424,82951429,0,0x0,8
tick,0x7ffdf681f424,82953368,0,0x0,8
tick,0x7ffdf681f424,82955404,0,0x0,8
tick,0x7ffdf681f424,82957396,0,0x0,8
tick,0x7ffdf681f424,82959384,0,0x0,8
tick,0x7ffdf681f424,82961376,0,0x0,8
tick,0x7ffdf681f424,82963376,0,0x0,8
tick,0x7ffdf681f424,82965374,0,0x0,8
tick,0x7ffdf681f424,82967337,0,0x0,8
tick,0x7ffdf681f424,82969282,0,0x0,8
tick,0x7ffdf681f424,82971281,0,0x0,8
tick,0x7ffdf681f424,82973246,0,0x0,8
tick,0x7ffdf681f424,82975248,0,0x0,8
tick,0x7ffdf681f424,82977258,0,0x0,8
tick,0x7ffdf681f424,82979278,0,0x0,8
tick,0x7ffdf681f424,82981331,0,0x0,8
tick,0x7ffdf681f424,82983346,0,0x0,8
tick,0x7ffdf681f424,82985294,0,0x0,8
tick,0x7ffdf681f424,82987287,0,0x0,8
tick,0x7ffdf681f424,82989363,0,0x0,8
tick,0x7ffdf681f424,82991342,0,0x0,8
tick,0x7ffdf681f424,82993257,0,0x0,8
tick,0x7ffdf681f424,82995304,0,0x0,8
tick,0x7ffdf681f424,82997353,0,0x0,8
tick,0x7ffdf681f424,82999332,0,0x0,8
tick,0x7ffdf681f424,83001337,0,0x0,8
tick,0x7ffdf681f424,83003311,0,0x0,8
tick,0x7ffdf681f424,83005290,0,0x0,8
tick,0x7ffdf681f424,83007314,0,0x0,8
tick,0x7ffdf681f424,83009338,0,0x0,8
tick,0x7ffdf681f424,83011267,0,0x0,8
tick,0x7ffdf681f424,83013261,0,0x0,8
tick,0x7ffdf681f424,83015327,0,0x0,8
tick,0x7ffdf681f424,83017294,0,0x0,8
tick,0x7ffdf681f424,83019320,0,0x0,8
tick,0x7ffdf681f424,83021313,0,0x0,8
tick,0x7ffdf681f424,83023313,0,0x0,8
tick,0x7ffdf681f424,83025313,0,0x0,8
tick,0x7ffdf681f424,83027317,0,0x0,8
tick,0x7ffdf681f424,83029312,0,0x0,8
tick,0x7ffdf681f424,83031311,0,0x0,8
tick,0x7ffdf681f424,83033318,0,0x0,8
tick,0x7ffdf681f424,83035299,0,0x0,8
tick,0x7ffdf681f424,83037263,0,0x0,8
tick,0x7ffdf681f424,83039313,0,0x0,8
tick,0x7ffdf681f424,83041283,0,0x0,8
tick,0x7ffdf681f424,83043199,0,0x0,8
tick,0x7ffdf681f424,83045298,0,0x0,8
tick,0x7ffdf681f424,83047268,0,0x0,8
tick,0x7ffdf681f424,83049260,0,0x0,8
tick,0x7ffdf681f424,83051210,0,0x0,8
tick,0x7ffdf681f424,83053254,0,0x0,8
tick,0x7ffdf681f424,83055245,0,0x0,8
tick,0x7ffdf681f424,83057241,0,0x0,8
tick,0x7ffdf681f424,83059190,0,0x0,8
tick,0x7ffdf681f424,83061212,0,0x0,8
tick,0x7ffdf681f424,83063224,0,0x0,8
tick,0x7ffdf681f424,83065221,0,0x0,8
tick,0x7ffdf681f424,83067217,0,0x0,8
tick,0x7ffdf681f424,83069212,0,0x0,8
tick,0x7ffdf681f424,83071204,0,0x0,8
tick,0x7ffdf681f424,83073243,0,0x0,8
tick,0x7ffdf681f424,83075186,0,0x0,8
tick,0x7ffdf681f424,83077193,0,0x0,8
tick,0x7ffdf681f424,83079179,0,0x0,8
tick,0x7ffdf681f424,83081180,0,0x0,8
tick,0x7ffdf681f424,83083185,0,0x0,8
tick,0x7ffdf681f424,83085059,0,0x0,8
tick,0x7ffdf681f424,83087145,0,0x0,8
tick,0x7ffdf681f424,83089167,0,0x0,8
tick,0x7ffdf681f424,83091146,0,0x0,8
tick,0x7ffdf681f424,83093148,0,0x0,8
tick,0x7ffdf681f424,83095157,0,0x0,8
tick,0x7ffdf681f424,83097023,0,0x0,8
tick,0x7ffdf681f424,83099027,0,0x0,8
tick,0x7ffdf681f424,83101118,0,0x0,8
tick,0x7ffdf681f424,83103136,0,0x0,8
tick,0x7ffdf681f424,83105117,0,0x0,8
tick,0x7ffdf681f424,83107108,0,0x0,8
tick,0x7ffdf681f424,83109148,0,0x0,8
tick,0x7ffdf681f424,83111098,0,0x0,8
tick,0x7ffdf681f424,83113094,0,0x0,8
tick,0x7ffdf681f424,83115091,0,0x0,8
tick,0x7ffdf681f424,83117111,0,0x0,8
tick,0x7ffdf681f424,83119070,0,0x0,8
tick,0x7ffdf681f424,83121074,0,0x0,8
tick,0x7ffdf681f424,83123093,0,0x0,8
tick,0x7ffdf681f424,83125062,0,0x0,8
tick,0x7ffdf681f424,83127047,0,0x0,8
tick,0x7ffdf681f424,83129050,0,0x0,8
tick,0x7ffdf681f424,83131044,0,0x0,8
tick,0x7ffdf681f424,83132942,0,0x0,8
tick,0x7ffdf681f424,83134926,0,0x0,8
tick,0x7ffdf681f424,83137018,0,0x0,8
tick,0x7ffdf681f424,83139056,0,0x0,8
tick,0x7ffdf681f424,83140880,0,0x0,8
tick,0x7ffdf681f424,83142967,0,0x0,8
tick,0x7ffdf681f424,83144937,0,0x0,8
tick,0x7ffdf681f424,83146960,0,0x0,8
tick,0x7ffdf681f424,83148939,0,0x0,8
tick,0x7ffdf681f424,83150913,0,0x0,8
tick,0x7ffdf681f424,83152932,0,0x0,8
tick,0x7ffdf681f424,83154926,0,0x0,8
tick,0x7ffdf681f424,83156917,0,0x0,8
tick,0x7ffdf681f424,83158926,0,0x0,8
tick,0x7ffdf681f424,83160911,0,0x0,8
tick,0x7ffdf681f424,83162841,0,0x0,8
tick,0x7ffdf681f424,83164905,0,0x0,8
tick,0x7ffdf681f424,83166832,0,0x0,8
tick,0x7ffdf681f424,83168853,0,0x0,8
tick,0x7ffdf681f424,83170879,0,0x0,8
tick,0x7ffdf681f424,83172901,0,0x0,8
tick,0x7ffdf681f424,83174873,0,0x0,8
tick,0x7ffdf681f424,83176756,0,0x0,8
tick,0x7ffdf681f424,83178864,0,0x0,8
tick,0x7ffdf681f424,83180894,0,0x0,8
tick,0x7ffdf681f424,83182912,0,0x0,8
tick,0x7ffdf681f424,83184801,0,0x0,8
tick,0x7ffdf681f424,83186853,0,0x0,8
tick,0x7ffdf681f424,83188838,0,0x0,8
tick,0x7ffdf681f424,83190879,0,0x0,8
tick,0x7ffdf681f424,83192887,0,0x0,8
tick,0x7ffdf681f424,83194875,0,0x0,8
tick,0x7ffdf681f424,83196869,0,0x0,8
tick,0x7ffdf681f424,83198862,0,0x0,8
tick,0x7ffdf681f424,83200863,0,0x0,8
tick,0x7ffdf681f424,83202852,0,0x0,8
tick,0x7ffdf681f424,83204884,0,0x0,8
tick,0x7ffdf681f424,83206855,0,0x0,8
tick,0x7ffdf681f424,83208838,0,0x0,8
tick,0x7ffdf681f424,83210830,0,0x0,8
tick,0x7ffdf681f424,83212825,0,0x0,8
tick,0x7ffdf681f424,83214822,0,0x0,8
tick,0x7ffdf681f424,83216820,0,0x0,8
tick,0x7ffdf681f424,83218815,0,0x0,8
tick,0x7ffdf681f424,83220805,0,0x0,8
tick,0x7ffdf681f424,83222797,0,0x0,8
tick,0x7ffdf681f424,83224793,0,0x0,8
tick,0x7ffdf681f424,83226737,0,0x0,8
tick,0x7ffdf681f424,83228674,0,0x0,8
tick,0x7ffdf681f424,83230776,0,0x0,8
tick,0x7ffdf681f424,83232674,0,0x0,8
tick,0x7ffdf681f424,83234777,0,0x0,8
tick,0x7ffdf681f424,83236770,0,0x0,8
tick,0x7ffdf681f424,83238657,0,0x0,8
tick,0x7ffdf681f424,83240679,0,0x0,8
tick,0x7ffdf681f424,83242753,0,0x0,8
tick,0x7ffdf681f424,83244744,0,0x0,8
tick,0x7ffdf681f424,83246744,0,0x0,8
tick,0x7ffdf681f424,83248780,0,0x0,8
tick,0x7ffdf681f424,83250728,0,0x0,8
tick,0x7ffdf681f424,83252635,0,0x0,8
tick,0x7ffdf681f424,83254689,0,0x0,8
tick,0x7ffdf681f424,83256716,0,0x0,8
tick,0x7ffdf681f424,83258707,0,0x0,8
tick,0x7ffdf681f424,83260713,0,0x0,8
tick,0x7ffdf681f424,83262695,0,0x0,8
tick,0x7ffdf681f424,83264694,0,0x0,8
tick,0x7ffdf681f424,83266560,0,0x0,8
tick,0x7ffdf681f424,83268684,0,0x0,8
tick,0x7ffdf681f424,83270729,0,0x0,8
tick,0x7ffdf681f424,83272671,0,0x0,8
tick,0x7ffdf681f424,83274677,0,0x0,8
tick,0x7ffdf681f424,83276537,0,0x0,8
tick,0x7ffdf681f424,83278661,0,0x0,8
tick,0x7ffdf681f424,83280650,0,0x0,8
tick,0x7ffdf681f424,83282645,0,0x0,8
tick,0x7ffdf681f424,83284649,0,0x0,8
tick,0x7ffdf681f424,83286631,0,0x0,8
tick,0x7ffdf681f424,83288627,0,0x0,8
tick,0x7ffdf681f424,83290622,0,0x0,8
tick,0x7ffdf681f424,83292564,0,0x0,8
tick,0x7ffdf681f424,83294617,0,0x0,8
tick,0x7ffdf681f424,83296611,0,0x0,8
tick,0x7ffdf681f424,83298606,0,0x0,8
tick,0x7ffdf681f424,83300598,0,0x0,8
tick,0x7ffdf681f424,83302589,0,0x0,8
tick,0x7ffdf681f424,83304581,0,0x0,8
tick,0x7ffdf681f424,83306578,0,0x0,8
tick,0x7ffdf681f424,83308591,0,0x0,8
tick,0x7ffdf681f424,83310566,0,0x0,8
tick,0x7ffdf681f424,83312567,0,0x0,8
tick,0x7ffdf681f424,83314515,0,0x0,8
tick,0x7ffdf681f424,83316550,0,0x0,8
tick,0x7ffdf681f424,83318449,0,0x0,8
tick,0x7ffdf681f424,83320541,0,0x0,8
tick,0x7ffdf681f424,83322450,0,0x0,8
tick,0x7ffdf681f424,83324340,0,0x0,8
tick,0x7ffdf681f424,83326360,0,0x0,8
tick,0x7ffdf681f424,83328399,0,0x0,8
tick,0x7ffdf681f424,83330405,0,0x0,8
tick,0x7ffdf681f424,83332350,0,0x0,8
tick,0x7ffdf681f424,83334391,0,0x0,8
tick,0x7ffdf681f424,83336317,0,0x0,8
tick,0x7ffdf681f424,83338298,0,0x0,8
tick,0x7ffdf681f424,83340267,0,0x0,8
tick,0x7ffdf681f424,83342297,0,0x0,8
tick,0x7ffdf681f424,83344273,0,0x0,8
tick,0x7ffdf681f424,83346307,0,0x0,8
tick,0x7ffdf681f424,83348312,0,0x0,8
tick,0x7ffdf681f424,83350303,0,0x0,8
tick,0x7ffdf681f424,83352387,0,0x0,8
tick,0x7ffdf681f424,83354376,0,0x0,8
tick,0x7ffdf681f424,83356362,0,0x0,8
tick,0x7ffdf681f424,83358311,0,0x0,8
tick,0x7ffdf681f424,83360335,0,0x0,8
tick,0x7ffdf681f424,83362332,0,0x0,8
tick,0x7ffdf681f424,83364314,0,0x0,8
tick,0x7ffdf681f424,83365480,0,0x0,8
tick,0x7ffdf681f424,83366602,0,0x0,8
tick,0x7ffdf681f424,83367856,0,0x0,8
tick,0x7ffdf681f424,83369832,0,0x0,8
tick,0x7ffdf681f424,83371021,0,0x0,8
tick,0x7ffdf681f424,83372127,0,0x0,8
tick,0x7ffdf681f424,83374123,0,0x0,8
tick,0x7ffdf681f424,83375301,0,0x0,8
tick,0x7ffdf681f424,83377256,0,0x0,8
tick,0x7ffdf681f424,83379274,0,0x0,8
tick,0x7ffdf681f424,83381174,0,0x0,8
tick,0x7ffdf681f424,83383193,0,0x0,8
tick,0x7ffdf681f424,83385088,0,0x0,8
tick,0x7ffdf681f424,83387083,0,0x0,8
tick,0x7ffdf681f424,83389148,0,0x0,8
tick,0x7ffdf681f424,83391067,0,0x0,8
tick,0x7ffdf681f424,83393060,0,0x0,8
tick,0x7ffdf681f424,83395028,0,0x0,8
tick,0x7ffdf681f424,83397030,0,0x0,8
tick,0x7ffdf681f424,83399067,0,0x0,8
tick,0x7ffdf681f424,83401071,0,0x0,8
tick,0x7ffdf681f424,83403074,0,0x0,8
tick,0x7ffdf681f424,83405055,0,0x0,8
tick,0x7ffdf681f424,83407101,0,0x0,8
tick,0x7ffdf681f424,83409182,0,0x0,8
tick,0x7ffdf681f424,83411089,0,0x0,8
tick,0x7ffdf681f424,83413079,0,0x0,8
tick,0x7ffdf681f424,83415069,0,0x0,8
tick,0x7ffdf681f424,83417098,0,0x0,8
tick,0x7ffdf681f424,83419124,0,0x0,8
tick,0x7ffdf681f424,83421080,0,0x0,8
tick,0x7ffdf681f424,83423032,0,0x0,8
tick,0x7ffdf681f424,83425086,0,0x0,8
tick,0x7ffdf681f424,83427022,0,0x0,8
tick,0x7ffdf681f424,83428984,0,0x0,8
tick,0x7ffdf681f424,83431054,0,0x0,8
tick,0x7ffdf681f424,83432977,0,0x0,8
tick,0x7ffdf681f424,83435011,0,0x0,8
tick,0x7ffdf681f424,83436993,0,0x0,8
tick,0x7ffdf681f424,83439048,0,0x0,8
tick,0x7ffdf681f424,83441046,0,0x0,8
tick,0x7ffdf681f424,83443084,0,0x0,8
tick,0x7ffdf681f424,83444999,0,0x0,8
tick,0x7ffdf681f424,83447050,0,0x0,8
tick,0x7ffdf681f424,83449018,0,0x0,8
tick,0x7ffdf681f424,83451003,0,0x0,8
tick,0x7ffdf681f424,83453036,0,0x0,8
tick,0x7ffdf681f424,83454998,0,0x0,8
tick,0x7ffdf681f424,83456936,0,0x0,8
tick,0x7ffdf681f424,83458986,0,0x0,8
tick,0x7ffdf681f424,83460980,0,0x0,8
tick,0x7ffdf681f424,83462951,0,0x0,8
tick,0x7ffdf681f424,83464960,0,0x0,8
tick,0x7ffdf681f424,83466931,0,0x0,8
tick,0x7ffdf681f424,83468976,0,0x0,8
tick,0x7ffdf681f424,83470992,0,0x0,8
tick,0x7ffdf681f424,83473003,0,0x0,8
tick,0x7ffdf681f424,83474971,0,0x0,8
tick,0x7ffdf681f424,83476950,0,0x0,8
tick,0x7ffdf681f424,83478941,0,0x0,8
tick,0x7ffdf681f424,83481077,0,0x0,8
tick,0x7ffdf681f424,83483140,0,0x0,8
tick,0x7ffdf681f424,83485146,0,0x0,8
tick,0x7ffdf681f424,83487121,0,0x0,8
tick,0x7ffdf681f424,83489173,0,0x0,8
tick,0x7ffdf681f424,83491132,0,0x0,8
tick,0x7ffdf681f424,83493102,0,0x0,8
tick,0x7ffdf681f424,83495104,0,0x0,8
tick,0x7ffdf681f424,83497061,0,0x0,8
tick,0x7ffdf681f424,83499136,0,0x0,8
tick,0x7ffdf681f424,83501085,0,0x0,8
tick,0x7ffdf681f424,83503099,0,0x0,8
tick,0x7ffdf681f424,83504995,0,0x0,8
tick,0x7ffdf681f424,83506967,0,0x0,8
tick,0x7ffdf681f424,83509002,0,0x0,8
tick,0x7ffdf681f424,83510945,0,0x0,8
tick,0x7ffdf681f424,83512932,0,0x0,8
tick,0x7ffdf681f424,83514923,0,0x0,8
tick,0x7ffdf681f424,83516918,0,0x0,8
tick,0x7ffdf681f424,83519002,0,0x0,8
tick,0x7ffdf681f424,83520944,0,0x0,8
tick,0x7ffdf681f424,83522937,0,0x0,8
tick,0x7ffdf681f424,83524922,0,0x0,8
tick,0x7ffdf681f424,83526955,0,0x0,8
tick,0x7ffdf681f424,83528908,0,0x0,8
tick,0x7ffdf681f424,83530918,0,0x0,8
tick,0x7ffdf681f424,83532904,0,0x0,8
tick,0x7ffdf681f424,83534905,0,0x0,8
tick,0x7ffdf681f424,83536919,0,0x0,8
tick,0x7ffdf681f424,83538887,0,0x0,8
tick,0x7ffdf681f424,83540945,0,0x0,8
tick,0x7ffdf681f424,83542919,0,0x0,8
tick,0x7ffdf681f424,83544917,0,0x0,8
tick,0x7ffdf681f424,83546907,0,0x0,8
tick,0x7ffdf681f424,83548867,0,0x0,8
tick,0x7ffdf681f424,83550834,0,0x0,8
tick,0x7ffdf681f424,83552886,0,0x0,8
tick,0x7ffdf681f424,83554825,0,0x0,8
tick,0x7ffdf681f424,83556819,0,0x0,8
tick,0x7ffdf681f424,83557837,0,0x0,8
tick,0x7ffdf681f424,83559809,0,0x0,8
tick,0x7ffdf681f424,83560859,0,0x0,8
tick,0x7ffdf681f424,83562850,0,0x0,8
tick,0x7ffdf681f424,83564795,0,0x0,8
tick,0x7ffdf681f424,83566820,0,0x0,8
tick,0x7ffdf681f424,83568786,0,0x0,8
tick,0x7ffdf681f424,83570778,0,0x0,8
tick,0x7ffdf681f424,83572772,0,0x0,8
tick,0x7ffdf681f424,83574812,0,0x0,8
tick,0x7ffdf681f424,83576786,0,0x0,8
tick,0x7ffdf681f424,83578763,0,0x0,8
tick,0x7ffdf681f424,83580752,0,0x0,8
tick,0x7ffdf681f424,83582880,0,0x0,8
tick,0x7ffdf681f424,83584766,0,0x0,8
tick,0x7ffdf681f424,83586761,0,0x0,8
tick,0x7ffdf681f424,83588756,0,0x0,8
tick,0x7ffdf681f424,83590752,0,0x0,8
tick,0x7ffdf681f424,83592774,0,0x0,8
tick,0x7ffdf681f424,83594769,0,0x0,8
tick,0x7ffdf681f424,83596740,0,0x0,8
tick,0x7ffdf681f424,83598760,0,0x0,8
tick,0x7ffdf681f424,83600748,0,0x0,8
tick,0x7ffdf681f424,83602748,0,0x0,8
tick,0x7ffdf681f424,83604796,0,0x0,8
tick,0x7ffdf681f424,83606808,0,0x0,8
tick,0x7ffdf681f424,83608815,0,0x0,8
tick,0x7ffdf681f424,83610800,0,0x0,8
tick,0x7ffdf681f424,83612791,0,0x0,8
tick,0x7ffdf681f424,83614765,0,0x0,8
tick,0x7ffdf681f424,83616736,0,0x0,8
tick,0x7ffdf681f424,83618678,0,0x0,8
tick,0x7ffdf681f424,83620748,0,0x0,8
tick,0x7ffdf681f424,83622765,0,0x0,8
tick,0x7ffdf681f424,83624688,0,0x0,8
tick,0x7ffdf681f424,83626661,0,0x0,8
tick,0x7ffdf681f424,83628713,0,0x0,8
tick,0x7ffdf681f424,83630648,0,0x0,8
tick,0x7ffdf681f424,83632701,0,0x0,8
tick,0x7ffdf681f424,83634650,0,0x0,8
tick,0x7ffdf681f424,83636656,0,0x0,8
tick,0x7ffdf681f424,83638652,0,0x0,8
tick,0x7ffdf681f424,83640634,0,0x0,8
tick,0x7ffdf681f424,83642625,0,0x0,8
tick,0x7ffdf681f424,83644664,0,0x0,8
tick,0x7ffdf681f424,83646620,0,0x0,8
tick,0x7ffdf681f424,83648643,0,0x0,8
tick,0x7ffdf681f424,83650645,0,0x0,8
tick,0x7ffdf681f424,83652717,0,0x0,8
tick,0x7ffdf681f424,83654704,0,0x0,8
tick,0x7ffdf681f424,83656695,0,0x0,8
tick,0x7ffdf681f424,83658691,0,0x0,8
tick,0x7ffdf681f424,83660653,0,0x0,8
tick,0x7ffdf681f424,83662657,0,0x0,8
tick,0x7ffdf681f424,83664585,0,0x0,8
tick,0x7ffdf681f424,83666587,0,0x0,8
tick,0x7ffdf681f424,83668613,0,0x0,8
tick,0x7ffdf681f424,83670670,0,0x0,8
tick,0x7ffdf681f424,83672681,0,0x0,8
tick,0x7ffdf681f424,83674654,0,0x0,8
tick,0x7ffdf681f424,83676609,0,0x0,8
tick,0x7ffdf681f424,83678660,0,0x0,8
tick,0x7ffdf681f424,83680640,0,0x0,8
tick,0x7ffdf681f424,83682615,0,0x0,8
tick,0x7ffdf681f424,83684634,0,0x0,8
tick,0x7ffdf681f424,83686648,0,0x0,8
tick,0x7ffdf681f424,83688652,0,0x0,8
tick,0x7ffdf681f424,83690620,0,0x0,8
tick,0x7ffdf681f424,83692607,0,0x0,8
tick,0x7ffdf681f424,83694655,0,0x0,8
tick,0x7ffdf681f424,83696606,0,0x0,8
tick,0x7ffdf681f424,83698616,0,0x0,8
tick,0x7ffdf681f424,83700608,0,0x0,8
tick,0x7ffdf681f424,83702558,0,0x0,8
tick,0x7ffdf681f424,83704539,0,0x0,8
tick,0x7ffdf681f424,83706609,0,0x0,8
tick,0x7ffdf681f424,83708586,0,0x0,8
tick,0x7ffdf681f424,83710563,0,0x0,8
tick,0x7ffdf681f424,83712584,0,0x0,8
tick,0x7ffdf681f424,83714570,0,0x0,8
tick,0x7ffdf681f424,83716558,0,0x0,8
tick,0x7ffdf681f424,83718555,0,0x0,8
tick,0x7ffdf681f424,83720531,0,0x0,8
tick,0x7ffdf681f424,83722530,0,0x0,8
tick,0x7ffdf681f424,83724559,0,0x0,8
tick,0x7ffdf681f424,83726577,0,0x0,8
tick,0x7ffdf681f424,83728616,0,0x0,8
tick,0x7ffdf681f424,83730524,0,0x0,8
tick,0x7ffdf681f424,83732535,0,0x0,8
tick,0x7ffdf681f424,83734480,0,0x0,8
tick,0x7ffdf681f424,83736511,0,0x0,8
tick,0x7ffdf681f424,83738508,0,0x0,8
tick,0x7ffdf681f424,83740483,0,0x0,8
tick,0x7ffdf681f424,83742505,0,0x0,8
tick,0x7ffdf681f424,83744526,0,0x0,8
tick,0x7ffdf681f424,83746538,0,0x0,8
tick,0x7ffdf681f424,83748522,0,0x0,8
tick,0x7ffdf681f424,83750529,0,0x0,8
tick,0x7ffdf681f424,83752535,0,0x0,8
tick,0x7ffdf681f424,83754515,0,0x0,8
tick,0x7ffdf681f424,83756482,0,0x0,8
tick,0x7ffdf681f424,83758479,0,0x0,8
tick,0x7ffdf681f424,83760390,0,0x0,8
tick,0x7ffdf681f424,83762470,0,0x0,8
tick,0x7ffdf681f424,83764477,0,0x0,8
tick,0x7ffdf681f424,83766477,0,0x0,8
tick,0x7ffdf681f424,83768364,0,0x0,8
tick,0x7ffdf681f424,83770492,0,0x0,8
tick,0x7ffdf681f424,83772457,0,0x0,8
tick,0x7ffdf681f424,83774449,0,0x0,8
tick,0x7ffdf681f424,83776445,0,0x0,8
tick,0x7ffdf681f424,83778441,0,0x0,8
tick,0x7ffdf681f424,83780333,0,0x0,8
tick,0x7ffdf681f424,83782426,0,0x0,8
tick,0x7ffdf681f424,83784431,0,0x0,8
tick,0x7ffdf681f424,83786360,0,0x0,8
tick,0x7ffdf681f424,83788407,0,0x0,8
tick,0x7ffdf681f424,83790409,0,0x0,8
tick,0x7ffdf681f424,83792451,0,0x0,8
tick,0x7ffdf681f424,83794289,0,0x0,8
tick,0x7ffdf681f424,83796391,0,0x0,8
tick,0x7ffdf681f424,83798391,0,0x0,8
tick,0x7ffdf681f424,83800392,0,0x0,8
tick,0x7ffdf681f424,83802379,0,0x0,8
tick,0x7ffdf681f424,83804369,0,0x0,8
tick,0x7ffdf681f424,83806369,0,0x0,8
tick,0x7ffdf681f424,83808377,0,0x0,8
tick,0x7ffdf681f424,83810248,0,0x0,8
tick,0x7ffdf681f424,83812354,0,0x0,8
tick,0x7ffdf681f424,83814392,0,0x0,8
tick,0x7ffdf681f424,83816341,0,0x0,8
tick,0x7ffdf681f424,83818232,0,0x0,8
tick,0x7ffdf681f424,83820328,0,0x0,8
tick,0x7ffdf681f424,83822332,0,0x0,8
tick,0x7ffdf681f424,83824325,0,0x0,8
tick,0x7ffdf681f424,83826337,0,0x0,8
tick,0x7ffdf681f424,83828345,0,0x0,8
tick,0x7ffdf681f424,83830298,0,0x0,8
tick,0x7ffdf681f424,83832295,0,0x0,8
tick,0x7ffdf681f424,83834299,0,0x0,8
tick,0x7ffdf681f424,83836323,0,0x0,8
tick,0x7ffdf681f424,83838275,0,0x0,8
tick,0x7ffdf681f424,83840164,0,0x0,8
tick,0x7ffdf681f424,83842269,0,0x0,8
tick,0x7ffdf681f424,83844157,0,0x0,8
tick,0x7ffdf681f424,83846265,0,0x0,8
tick,0x7ffdf681f424,83848260,0,0x0,8
tick,0x7ffdf681f424,83850241,0,0x0,8
tick,0x7ffdf681f424,83852137,0,0x0,8
tick,0x7ffdf681f424,83854268,0,0x0,8
tick,0x7ffdf681f424,83856197,0,0x0,8
tick,0x7ffdf681f424,83858163,0,0x0,8
tick,0x7ffdf681f424,83860118,0,0x0,8
tick,0x7ffdf681f424,83862215,0,0x0,8
tick,0x7ffdf681f424,83864211,0,0x0,8
tick,0x7ffdf681f424,83866205,0,0x0,8
tick,0x7ffdf681f424,83868208,0,0x0,8
tick,0x7ffdf681f424,83870198,0,0x0,8
tick,0x7ffdf681f424,83872094,0,0x0,8
tick,0x7ffdf681f424,83874144,0,0x0,8
tick,0x7ffdf681f424,83876176,0,0x0,8
tick,0x7ffdf681f424,83878163,0,0x0,8
tick,0x7ffdf681f424,83880144,0,0x0,8
tick,0x7ffdf681f424,83882168,0,0x0,8
tick,0x7ffdf681f424,83884145,0,0x0,8
tick,0x7ffdf681f424,83886148,0,0x0,8
tick,0x7ffdf681f424,83888148,0,0x0,8
tick,0x7ffdf681f424,83890146,0,0x0,8
tick,0x7ffdf681f424,83892132,0,0x0,8
tick,0x7ffdf681f424,83894034,0,0x0,8
tick,0x7ffdf681f424,83896068,0,0x0,8
tick,0x7ffdf681f424,83898101,0,0x0,8
tick,0x7ffdf681f424,83900117,0,0x0,8
tick,0x7ffdf681f424,83902044,0,0x0,8
tick,0x7ffdf681f424,83904091,0,0x0,8
tick,0x7ffdf681f424,83906102,0,0x0,8
tick,0x7ffdf681f424,83908122,0,0x0,8
tick,0x7ffdf681f424,83910005,0,0x0,8
tick,0x7ffdf681f424,83912081,0,0x0,8
tick,0x7ffdf681f424,83913975,0,0x0,8
tick,0x7ffdf681f424,83915961,0,0x0,8
tick,0x7ffdf681f424,83917963,0,0x0,8
tick,0x7ffdf681f424,83920053,0,0x0,8
tick,0x7ffdf681f424,83922039,0,0x0,8
tick,0x7ffdf681f424,83924092,0,0x0,8
tick,0x7ffdf681f424,83926049,0,0x0,8
tick,0x7ffdf681f424,83928038,0,0x0,8
tick,0x7ffdf681f424,83930054,0,0x0,8
tick,0x7ffdf681f424,83932029,0,0x0,8
tick,0x7ffdf681f424,83933896,0,0x0,8
tick,0x7ffdf681f424,83936019,0,0x0,8
tick,0x7ffdf681f424,83938024,0,0x0,8
tick,0x7ffdf681f424,83940013,0,0x0,8
tick,0x7ffdf681f424,83942019,0,0x0,8
tick,0x7ffdf681f424,83943938,0,0x0,8
tick,0x7ffdf681f424,83945963,0,0x0,8
tick,0x7ffdf681f424,83947881,0,0x0,8
tick,0x7ffdf681f424,83949880,0,0x0,8
tick,0x7ffdf681f424,83951829,0,0x0,8
tick,0x7ffdf681f424,83953836,0,0x0,8
tick,0x7ffdf681f424,83955833,0,0x0,8
tick,0x7ffdf681f424,83957984,0,0x0,8
tick,0x7ffdf681f424,83959977,0,0x0,8
tick,0x7ffdf681f424,83961981,0,0x0,8
tick,0x7ffdf681f424,83963985,0,0x0,8
tick,0x7ffdf681f424,83965948,0,0x0,8
tick,0x7ffdf681f424,83967910,0,0x0,8
tick,0x7ffdf681f424,83969893,0,0x0,8
tick,0x7ffdf681f424,83971925,0,0x0,8
tick,0x7ffdf681f424,83973922,0,0x0,8
tick,0x7ffdf681f424,83975922,0,0x0,8
tick,0x7ffdf681f424,83977939,0,0x0,8
tick,0x7ffdf681f424,83979896,0,0x0,8
tick,0x7ffdf681f424,83981891,0,0x0,8
tick,0x7ffdf681f424,83983895,0,0x0,8
tick,0x7ffdf681f424,83985890,0,0x0,8
tick,0x7ffdf681f424,83987883,0,0x0,8
tick,0x7ffdf681f424,83989893,0,0x0,8
tick,0x7ffdf681f424,83991864,0,0x0,8
tick,0x7ffdf681f424,83993858,0,0x0,8
tick,0x7ffdf681f424,83995863,0,0x0,8
tick,0x7ffdf681f424,83997841,0,0x0,8
tick,0x7ffdf681f424,83999839,0,0x0,8
tick,0x7ffdf681f424,84001719,0,0x0,8
tick,0x7ffdf681f424,84003833,0,0x0,8
tick,0x7ffdf681f424,84005825,0,0x0,8
tick,0x7ffdf681f424,84007822,0,0x0,8
tick,0x7ffdf681f424,84009800,0,0x0,8
tick,0x7ffdf681f424,84011704,0,0x0,8
tick,0x7ffdf681f424,84013808,0,0x0,8
tick,0x7ffdf681f424,84015790,0,0x0,8
tick,0x7ffdf681f424,84017793,0,0x0,8
tick,0x7ffdf681f424,84019788,0,0x0,8
tick,0x7ffdf681f424,84021769,0,0x0,8
tick,0x7ffdf681f424,84023774,0,0x0,8
tick,0x7ffdf681f424,84025769,0,0x0,8
tick,0x7ffdf681f424,84027700,0,0x0,8
tick,0x7ffdf681f424,84029735,0,0x0,8
tick,0x7ffdf681f424,84031762,0,0x0,8
tick,0x7ffdf681f424,84033760,0,0x0,8
tick,0x7ffdf681f424,84035763,0,0x0,8
tick,0x7ffdf681f424,84037699,0,0x0,8
tick,0x7ffdf681f424,84039652,0,0x0,8
tick,0x7ffdf681f424,84041655,0,0x0,8
tick,0x7ffdf681f424,84043615,0,0x0,8
tick,0x7ffdf681f424,84045605,0,0x0,8
tick,0x7ffdf681f424,84047598,0,0x0,8
tick,0x7ffdf681f424,84049612,0,0x0,8
tick,0x7ffdf681f424,84051580,0,0x0,8
tick,0x7ffdf681f424,84053588,0,0x0,8
tick,0x7ffdf681f424,84055586,0,0x0,8
tick,0x7ffdf681f424,84057580,0,0x0,8
tick,0x7ffdf681f424,84059567,0,0x0,8
tick,0x7ffdf681f424,84061609,0,0x0,8
tick,0x7ffdf681f424,84063572,0,0x0,8
tick,0x7ffdf681f424,84065576,0,0x0,8
tick,0x7ffdf681f424,84067504,0,0x0,8
tick,0x7ffdf681f424,84069526,0,0x0,8
tick,0x7ffdf681f424,84071528,0,0x0,8
tick,0x7ffdf681f424,84073516,0,0x0,8
tick,0x7ffdf681f424,84075499,0,0x0,8
tick,0x7ffdf681f424,84077443,0,0x0,8
tick,0x7ffdf681f424,84079448,0,0x0,8
tick,0x7ffdf681f424,84081435,0,0x0,8
tick,0x7ffdf681f424,84083438,0,0x0,8
tick,0x7ffdf681f424,84085423,0,0x0,8
tick,0x7ffdf681f424,84087450,0,0x0,8
tick,0x7ffdf681f424,84089446,0,0x0,8
tick,0x7ffdf681f424,84091440,0,0x0,8
tick,0x7ffdf681f424,84093511,0,0x0,8
tick,0x7ffdf681f424,84095429,0,0x0,8
tick,0x7ffdf681f424,84097434,0,0x0,8
tick,0x7ffdf681f424,84099424,0,0x0,8
tick,0x7ffdf681f424,84101415,0,0x0,8
tick,0x7ffdf681f424,84103408,0,0x0,8
tick,0x7ffdf681f424,84105406,0,0x0,8
tick,0x7ffdf681f424,84107396,0,0x0,8
tick,0x7ffdf681f424,84109405,0,0x0,8
tick,0x7ffdf681f424,84111386,0,0x0,8
tick,0x7ffdf681f424,84113405,0,0x0,8
tick,0x7ffdf681f424,84115391,0,0x0,8
tick,0x7ffdf681f424,84117364,0,0x0,8
tick,0x7ffdf681f424,84119353,0,0x0,8
tick,0x7ffdf681f424,84121360,0,0x0,8
tick,0x7ffdf681f424,84123353,0,0x0,8
tick,0x7ffdf681f424,84125351,0,0x0,8
tick,0x7ffdf681f424,84127344,0,0x0,8
tick,0x7ffdf681f424,84129337,0,0x0,8
tick,0x7ffdf681f424,84131333,0,0x0,8
tick,0x7ffdf681f424,84133325,0,0x0,8
tick,0x7ffdf681f424,84135323,0,0x0,8
tick,0x7ffdf681f424,84137328,0,0x0,8
tick,0x7ffdf681f424,84139390,0,0x0,8
tick,0x7ffdf681f424,84141310,0,0x0,8
tick,0x7ffdf681f424,84143320,0,0x0,8
tick,0x7ffdf681f424,84145296,0,0x0,8
tick,0x7ffdf681f424,84147289,0,0x0,8
tick,0x7ffdf681f424,84149297,0,0x0,8
tick,0x7ffdf681f424,84151276,0,0x0,8
tick,0x7ffdf681f424,84153296,0,0x0,8
tick,0x7ffdf681f424,84155387,0,0x0,8
tick,0x7ffdf681f424,84157266,0,0x0,8
tick,0x7ffdf681f424,84159315,0,0x0,8
tick,0x7ffdf681f424,84161293,0,0x0,8
tick,0x7ffdf681f424,84163416,0,0x0,8
tick,0x7ffdf681f424,84165293,0,0x0,8
tick,0x7ffdf681f424,84167292,0,0x0,8
tick,0x7ffdf681f424,84169338,0,0x0,8
tick,0x7ffdf681f424,84171385,0,0x0,8
tick,0x7ffdf681f424,84173381,0,0x0,8
tick,0x7ffdf681f424,84175384,0,0x0,8
tick,0x7ffdf681f424,84177371,0,0x0,8
tick,0x7ffdf681f424,84179363,0,0x0,8
tick,0x7ffdf681f424,84181401,0,0x0,8
tick,0x7ffdf681f424,84183354,0,0x0,8
tick,0x7ffdf681f424,84185270,0,0x0,8
tick,0x7ffdf681f424,84187351,0,0x0,8
tick,0x7ffdf681f424,84189338,0,0x0,8
tick,0x7ffdf681f424,84191333,0,0x0,8
tick,0x7ffdf681f424,84193296,0,0x0,8
tick,0x7ffdf681f424,84195324,0,0x0,8
tick,0x7ffdf681f424,84197328,0,0x0,8
tick,0x7ffdf681f424,84199315,0,0x0,8
tick,0x7ffdf681f424,84201309,0,0x0,8
tick,0x7ffdf681f424,84203312,0,0x0,8
tick,0x7ffdf681f424,84205303,0,0x0,8
tick,0x7ffdf681f424,84207344,0,0x0,8
tick,0x7ffdf681f424,84209286,0,0x0,8
tick,0x7ffdf681f424,84211282,0,0x0,8
tick,0x7ffdf681f424,84213274,0,0x0,8
tick,0x7ffdf681f424,84215280,0,0x0,8
tick,0x7ffdf681f424,84217266,0,0x0,8
tick,0x7ffdf681f424,84219262,0,0x0,8
tick,0x7ffdf681f424,84221263,0,0x0,8
tick,0x7ffdf681f424,84223250,0,0x0,8
tick,0x7ffdf681f424,84225251,0,0x0,8
tick,0x7ffdf681f424,84227234,0,0x0,8
tick,0x7ffdf681f424,84229275,0,0x0,8
tick,0x7ffdf681f424,84231243,0,0x0,8
tick,0x7ffdf681f424,84233232,0,0x0,8
tick,0x7ffdf681f424,84235167,0,0x0,8
tick,0x7ffdf681f424,84237224,0,0x0,8
tick,0x7ffdf681f424,84239213,0,0x0,8
tick,0x7ffdf681f424,84241187,0,0x0,8
tick,0x7ffdf681f424,84243195,0,0x0,8
tick,0x7ffdf681f424,84245190,0,0x0,8
tick,0x7ffdf681f424,84247204,0,0x0,8
tick,0x7ffdf681f424,84249182,0,0x0,8
tick,0x7ffdf681f424,84251119,0,0x0,8
tick,0x7ffdf681f424,84253182,0,0x0,8
tick,0x7ffdf681f424,84255172,0,0x0,8
tick,0x7ffdf681f424,84257167,0,0x0,8
tick,0x7ffdf681f424,84259169,0,0x0,8
tick,0x7ffdf681f424,84261147,0,0x0,8
tick,0x7ffdf681f424,84263156,0,0x0,8
tick,0x7ffdf681f424,84265136,0,0x0,8
tick,0x7ffdf681f424,84267137,0,0x0,8
tick,0x7ffdf681f424,84269131,0,0x0,8
tick,0x7ffdf681f424,84271124,0,0x0,8
tick,0x7ffdf681f424,84273130,0,0x0,8
tick,0x7ffdf681f424,84275110,0,0x0,8
tick,0x7ffdf681f424,84277108,0,0x0,8
tick,0x7ffdf681f424,84279124,0,0x0,8
tick,0x7ffdf681f424,84281101,0,0x0,8
tick,0x7ffdf681f424,84283089,0,0x0,8
tick,0x7ffdf681f424,84284978,0,0x0,8
tick,0x7ffdf681f424,84287092,0,0x0,8
tick,0x7ffdf681f424,84288978,0,0x0,8
tick,0x7ffdf681f424,84291074,0,0x0,8
tick,0x7ffdf681f424,84293050,0,0x0,8
tick,0x7ffdf681f424,84295000,0,0x0,8
tick,0x7ffdf681f424,84297051,0,0x0,8
tick,0x7ffdf681f424,84299054,0,0x0,8
tick,0x7ffdf681f424,84301038,0,0x0,8
tick,0x7ffdf681f424,84303045,0,0x0,8
tick,0x7ffdf681f424,84305032,0,0x0,8
tick,0x7ffdf681f424,84307028,0,0x0,8
tick,0x7ffdf681f424,84309020,0,0x0,8
tick,0x7ffdf681f424,84311009,0,0x0,8
tick,0x7ffdf681f424,84313019,0,0x0,8
tick,0x7ffdf681f424,84315039,0,0x0,8
tick,0x7ffdf681f424,84316816,0,0x0,8
tick,0x7ffdf681f424,84318999,0,0x0,8
tick,0x7ffdf681f424,84320975,0,0x0,8
tick,0x7ffdf681f424,84322987,0,0x0,8
tick,0x7ffdf681f424,84324984,0,0x0,8
tick,0x7ffdf681f424,84326875,0,0x0,8
tick,0x7ffdf681f424,84328971,0,0x0,8
tick,0x7ffdf681f424,84330965,0,0x0,8
tick,0x7ffdf681f424,84332952,0,0x0,8
tick,0x7ffdf681f424,84334963,0,0x0,8
tick,0x7ffdf681f424,84336837,0,0x0,8
tick,0x7ffdf681f424,84338778,0,0x0,8
tick,0x7ffdf681f424,84340853,0,0x0,8
tick,0x7ffdf681f424,84342845,0,0x0,8
tick,0x7ffdf681f424,84344946,0,0x0,8
tick,0x7ffdf681f424,84346935,0,0x0,8
tick,0x7ffdf681f424,84348995,0,0x0,8
tick,0x7ffdf681f424,84350932,0,0x0,8
tick,0x7ffdf681f424,84352933,0,0x0,8
tick,0x7ffdf681f424,84354190,0,0x0,8
tick,0x7ffdf681f424,84356324,0,0x0,8
tick,0x7ffdf681f424,84358280,0,0x0,8
tick,0x7ffdf681f424,84360296,0,0x0,8
tick,0x7ffdf681f424,84362286,0,0x0,8
tick,0x7ffdf681f424,84364292,0,0x0,8
tick,0x7ffdf681f424,84366278,0,0x0,8
tick,0x7ffdf681f424,84368264,0,0x0,8
tick,0x7ffdf681f424,84370267,0,0x0,8
tick,0x7ffdf681f424,84372248,0,0x0,8
tick,0x7ffdf681f424,84374254,0,0x0,8
tick,0x7ffdf681f424,84376236,0,0x0,8
tick,0x7ffdf681f424,84378251,0,0x0,8
tick,0x7ffdf681f424,84380271,0,0x0,8
tick,0x7ffdf681f424,84382269,0,0x0,8
tick,0x7ffdf681f424,84384255,0,0x0,8
tick,0x7ffdf681f424,84386253,0,0x0,8
tick,0x7ffdf681f424,84388246,0,0x0,8
tick,0x7ffdf681f424,84390256,0,0x0,8
tick,0x7ffdf681f424,84392205,0,0x0,8
tick,0x7ffdf681f424,84394196,0,0x0,8
tick,0x7ffdf681f424,84396219,0,0x0,8
tick,0x7ffdf681f424,84398280,0,0x0,8
tick,0x7ffdf681f424,84400241,0,0x0,8
tick,0x7ffdf681f424,84402103,0,0x0,8
tick,0x7ffdf681f424,84404202,0,0x0,8
tick,0x7ffdf681f424,84406202,0,0x0,8
tick,0x7ffdf681f424,84408196,0,0x0,8
tick,0x7ffdf681f424,84410051,0,0x0,8
tick,0x7ffdf681f424,84412181,0,0x0,8
tick,0x7ffdf681f424,84414147,0,0x0,8
tick,0x7ffdf681f424,84416200,0,0x0,8
tick,0x7ffdf681f424,84418177,0,0x0,8
tick,0x7ffdf681f424,84420160,0,0x0,8
tick,0x7ffdf681f424,84422184,0,0x0,8
tick,0x7ffdf681f424,84424147,0,0x0,8
tick,0x7ffdf681f424,84426160,0,0x0,8
tick,0x7ffdf681f424,84428145,0,0x0,8
tick,0x7ffdf681f424,84430141,0,0x0,8
tick,0x7ffdf681f424,84432150,0,0x0,8
tick,0x7ffdf681f424,84434130,0,0x0,8
tick,0x7ffdf681f424,84436091,0,0x0,8
tick,0x7ffdf681f424,84438137,0,0x0,8
tick,0x7ffdf681f424,84440129,0,0x0,8
tick,0x7ffdf681f424,84442111,0,0x0,8
tick,0x7ffdf681f424,84444156,0,0x0,8
tick,0x7ffdf681f424,84446091,0,0x0,8
tick,0x7ffdf681f424,84448094,0,0x0,8
tick,0x7ffdf681f424,84450086,0,0x0,8
tick,0x7ffdf681f424,84452026,0,0x0,8
tick,0x7ffdf681f424,84454073,0,0x0,8
tick,0x7ffdf681f424,84456071,0,0x0,8
tick,0x7ffdf681f424,84458130,0,0x0,8
tick,0x7ffdf681f424,84459993,0,0x0,8
tick,0x7ffdf681f424,84462052,0,0x0,8
tick,0x7ffdf681f424,84464051,0,0x0,8
tick,0x7ffdf681f424,84466062,0,0x0,8
tick,0x7ffdf681f424,84468076,0,0x0,8
tick,0x7ffdf681f424,84469949,0,0x0,8
tick,0x7ffdf681f424,84471955,0,0x0,8
tick,0x7ffdf681f424,84474124,0,0x0,8
tick,0x7ffdf681f424,84476016,0,0x0,8
tick,0x7ffdf681f424,84478010,0,0x0,8
tick,0x7ffdf681f424,84480035,0,0x0,8
tick,0x7ffdf681f424,84482002,0,0x0,8
tick,0x7ffdf681f424,84483995,0,0x0,8
tick,0x7ffdf681f424,84485988,0,0x0,8
tick,0x7ffdf681f424,84487990,0,0x0,8
tick,0x7ffdf681f424,84489974,0,0x0,8
tick,0x7ffdf681f424,84491980,0,0x0,8
tick,0x7ffdf681f424,84493960,0,0x0,8
tick,0x7ffdf681f424,84495957,0,0x0,8
tick,0x7ffdf681f424,84497953,0,0x0,8
tick,0x7ffdf681f424,84499951,0,0x0,8
tick,0x7ffdf681f424,84501877,0,0x0,8
tick,0x7ffdf681f424,84503937,0,0x0,8
tick,0x7ffdf681f424,84505935,0,0x0,8
tick,0x7ffdf681f424,84507930,0,0x0,8
tick,0x7ffdf681f424,84509930,0,0x0,8
tick,0x7ffdf681f424,84511914,0,0x0,8
tick,0x7ffdf681f424,84513918,0,0x0,8
tick,0x7ffdf681f424,84515909,0,0x0,8
tick,0x7ffdf681f424,84517906,0,0x0,8
tick,0x7ffdf681f424,84519904,0,0x0,8
tick,0x7ffdf681f424,84521885,0,0x0,8
tick,0x7ffdf681f424,84523931,0,0x0,8
tick,0x7ffdf681f424,84525881,0,0x0,8
tick,0x7ffdf681f424,84527889,0,0x0,8
tick,0x7ffdf681f424,84529874,0,0x0,8
tick,0x7ffdf681f424,84531875,0,0x0,8
tick,0x7ffdf681f424,84533860,0,0x0,8
tick,0x7ffdf681f424,84535856,0,0x0,8
tick,0x7ffdf681f424,84537854,0,0x0,8
tick,0x7ffdf681f424,84539844,0,0x0,8
tick,0x7ffdf681f424,84541838,0,0x0,8
tick,0x7ffdf681f424,84543828,0,0x0,8
tick,0x7ffdf681f424,84545875,0,0x0,8
tick,0x7ffdf681f424,84547735,0,0x0,8
tick,0x7ffdf681f424,84549817,0,0x0,8
tick,0x7ffdf681f424,84551693,0,0x0,8
tick,0x7ffdf681f424,84553838,0,0x0,8
tick,0x7ffdf681f424,84555811,0,0x0,8
tick,0x7ffdf681f424,84557701,0,0x0,8
tick,0x7ffdf681f424,84559730,0,0x0,8
tick,0x7ffdf681f424,84561754,0,0x0,8
tick,0x7ffdf681f424,84563638,0,0x0,8
tick,0x7ffdf681f424,84565816,0,0x0,8
tick,0x7ffdf681f424,84567696,0,0x0,8
tick,0x7ffdf681f424,84569789,0,0x0,8
tick,0x7ffdf681f424,84571773,0,0x0,8
tick,0x7ffdf681f424,84573766,0,0x0,8
tick,0x7ffdf681f424,84575735,0,0x0,8
tick,0x7ffdf681f424,84577811,0,0x0,8
tick,0x7ffdf681f424,84579750,0,0x0,8
tick,0x7ffdf681f424,84580866,0,0x0,8
tick,0x7ffdf681f424,84582055,0,0x0,8
tick,0x7ffdf681f424,84583202,0,0x0,8
tick,0x7ffdf681f424,84584376,0,0x0,8
tick,0x7ffdf681f424,84586386,0,0x0,8
tick,0x7ffdf681f424,84587557,0,0x0,8
tick,0x7ffdf681f424,84589575,0,0x0,8
tick,0x7ffdf681f424,84590693,0,0x0,8
tick,0x7ffdf681f424,84591804,0,0x0,8
tick,0x7ffdf681f424,84593005,0,0x0,8
tick,0x7ffdf681f424,84594169,0,0x0,8
tick,0x7ffdf681f424,84596344,0,0x0,8
tick,0x7ffdf681f424,84598310,0,0x0,8
tick,0x7ffdf681f424,84600311,0,0x0,8
tick,0x7ffdf681f424,84602309,0,0x0,8
tick,0x7ffdf681f424,84604288,0,0x0,8
tick,0x7ffdf681f424,84606290,0,0x0,8
tick,0x7ffdf681f424,84608249,0,0x0,8
tick,0x7ffdf681f424,84610163,0,0x0,8
tick,0x7ffdf681f424,84612312,0,0x0,8
tick,0x7ffdf681f424,84614309,0,0x0,8
tick,0x7ffdf681f424,84616300,0,0x0,8
tick,0x7ffdf681f424,84618294,0,0x0,8
tick,0x7ffdf681f424,84620290,0,0x0,8
tick,0x7ffdf681f424,84622293,0,0x0,8
tick,0x7ffdf681f424,84624187,0,0x0,8
tick,0x7ffdf681f424,84626281,0,0x0,8
tick,0x7ffdf681f424,84628272,0,0x0,8
tick,0x7ffdf681f424,84630268,0,0x0,8
tick,0x7ffdf681f424,84632268,0,0x0,8
tick,0x7ffdf681f424,84634255,0,0x0,8
tick,0x7ffdf681f424,84636183,0,0x0,8
tick,0x7ffdf681f424,84638246,0,0x0,8
tick,0x7ffdf681f424,84640272,0,0x0,8
tick,0x7ffdf681f424,84642234,0,0x0,8
tick,0x7ffdf681f424,84644231,0,0x0,8
tick,0x7ffdf681f424,84646229,0,0x0,8
tick,0x7ffdf681f424,84648212,0,0x0,8
tick,0x7ffdf681f424,84650204,0,0x0,8
tick,0x7ffdf681f424,84652203,0,0x0,8
tick,0x7ffdf681f424,84654142,0,0x0,8
tick,0x7ffdf681f424,84656195,0,0x0,8
tick,0x7ffdf681f424,84658186,0,0x0,8
tick,0x7ffdf681f424,84660079,0,0x0,8
tick,0x7ffdf681f424,84662175,0,0x0,8
tick,0x7ffdf681f424,84664178,0,0x0,8
tick,0x7ffdf681f424,84666172,0,0x0,8
tick,0x7ffdf681f424,84668170,0,0x0,8
tick,0x7ffdf681f424,84670156,0,0x0,8
tick,0x7ffdf681f424,84672157,0,0x0,8
tick,0x7ffdf681f424,84674142,0,0x0,8
tick,0x7ffdf681f424,84676078,0,0x0,8
tick,0x7ffdf681f424,84678146,0,0x0,8
tick,0x7ffdf681f424,84680145,0,0x0,8
tick,0x7ffdf681f424,84682120,0,0x0,8
tick,0x7ffdf681f424,84684132,0,0x0,8
tick,0x7ffdf681f424,84686114,0,0x0,8
tick,0x7ffdf681f424,84688110,0,0x0,8
tick,0x7ffdf681f424,84690096,0,0x0,8
tick,0x7ffdf681f424,84692096,0,0x0,8
tick,0x7ffdf681f424,84694090,0,0x0,8
tick,0x7ffdf681f424,84696087,0,0x0,8
tick,0x7ffdf681f424,84698026,0,0x0,8
tick,0x7ffdf681f424,84700016,0,0x0,8
tick,0x7ffdf681f424,84701968,0,0x0,8
tick,0x7ffdf681f424,84704086,0,0x0,8
tick,0x7ffdf681f424,84706073,0,0x0,8
tick,0x7ffdf681f424,84708054,0,0x0,8
tick,0x7ffdf681f424,84710051,0,0x0,8
tick,0x7ffdf681f424,84712042,0,0x0,8
tick,0x7ffdf681f424,84714038,0,0x0,8
tick,0x7ffdf681f424,84716032,0,0x0,8
tick,0x7ffdf681f424,84718024,0,0x0,8
tick,0x7ffdf681f424,84719964,0,0x0,8
tick,0x7ffdf681f424,84722016,0,0x0,8
tick,0x7ffdf681f424,84723998,0,0x0,8
tick,0x7ffdf681f424,84726010,0,0x0,8
tick,0x7ffdf681f424,84727915,0,0x0,8
tick,0x7ffdf681f424,84730006,0,0x0,8
tick,0x7ffdf681f424,84731997,0,0x0,8
tick,0x7ffdf681f424,84734004,0,0x0,8
tick,0x7ffdf681f424,84735980,0,0x0,8
tick,0x7ffdf681f424,84737973,0,0x0,8
tick,0x7ffdf681f424,84739973,0,0x0,8
tick,0x7ffdf681f424,84741913,0,0x0,8
tick,0x7ffdf681f424,84743937,0,0x0,8
tick,0x7ffdf681f424,84745960,0,0x0,8
tick,0x7ffdf681f424,84747952,0,0x0,8
tick,0x7ffdf681f424,84749957,0,0x0,8
tick,0x7ffdf681f424,84751833,0,0x0,8
tick,0x7ffdf681f424,84753955,0,0x0,8
tick,0x7ffdf681f424,84755817,0,0x0,8
tick,0x7ffdf681f424,84757922,0,0x0,8
tick,0x7ffdf681f424,84759926,0,0x0,8
tick,0x7ffdf681f424,84761914,0,0x0,8
tick,0x7ffdf681f424,84763853,0,0x0,8
tick,0x7ffdf681f424,84765890,0,0x0,8
tick,0x7ffdf681f424,84767906,0,0x0,8
tick,0x7ffdf681f424,84769892,0,0x0,8
tick,0x7ffdf681f424,84771922,0,0x0,8
tick,0x7ffdf681f424,84773888,0,0x0,8
tick,0x7ffdf681f424,84775877,0,0x0,8
tick,0x7ffdf681f424,84777773,0,0x0,8
tick,0x7ffdf681f424,84779872,0,0x0,8
tick,0x7ffdf681f424,84781872,0,0x0,8
tick,0x7ffdf681f424,84783860,0,0x0,8
tick,0x7ffdf681f424,84785678,0,0x0,8
tick,0x7ffdf681f424,84787845,0,0x0,8
tick,0x7ffdf681f424,84789846,0,0x0,8
tick,0x7ffdf681f424,84791837,0,0x0,8
tick,0x7ffdf681f424,84793755,0,0x0,8
tick,0x7ffdf681f424,84795829,0,0x0,8
tick,0x7ffdf681f424,84797826,0,0x0,8
tick,0x7ffdf681f424,84799820,0,0x0,8
tick,0x7ffdf681f424,84801737,0,0x0,8
tick,0x7ffdf681f424,84803813,0,0x0,8
tick,0x7ffdf681f424,84805803,0,0x0,8
tick,0x7ffdf681f424,84807765,0,0x0,8
tick,0x7ffdf681f424,84809787,0,0x0,8
tick,0x7ffdf681f424,84811781,0,0x0,8
tick,0x7ffdf681f424,84813789,0,0x0,8
tick,0x7ffdf681f424,84815787,0,0x0,8
tick,0x7ffdf681f424,84817769,0,0x0,8
tick,0x7ffdf681f424,84819768,0,0x0,8
tick,0x7ffdf681f424,84821758,0,0x0,8
tick,0x7ffdf681f424,84823748,0,0x0,8
tick,0x7ffdf681f424,84825753,0,0x0,8
tick,0x7ffdf681f424,84827737,0,0x0,8
tick,0x7ffdf681f424,84829695,0,0x0,8
tick,0x7ffdf681f424,84831737,0,0x0,8
tick,0x7ffdf681f424,84833719,0,0x0,8
tick,0x7ffdf681f424,84835719,0,0x0,8
tick,0x7ffdf681f424,84837714,0,0x0,8
tick,0x7ffdf681f424,84839707,0,0x0,8
tick,0x7ffdf681f424,84841710,0,0x0,8
tick,0x7ffdf681f424,84843590,0,0x0,8
tick,0x7ffdf681f424,84845691,0,0x0,8
tick,0x7ffdf681f424,84847712,0,0x0,8
tick,0x7ffdf681f424,84849690,0,0x0,8
tick,0x7ffdf681f424,84851627,0,0x0,8
tick,0x7ffdf681f424,84853574,0,0x0,8
tick,0x7ffdf681f424,84855575,0,0x0,8
tick,0x7ffdf681f424,84857679,0,0x0,8
tick,0x7ffdf681f424,84859665,0,0x0,8
tick,0x7ffdf681f424,84861664,0,0x0,8
tick,0x7ffdf681f424,84863652,0,0x0,8
tick,0x7ffdf681f424,84865636,0,0x0,8
tick,0x7ffdf681f424,84867631,0,0x0,8
tick,0x7ffdf681f424,84869633,0,0x0,8
tick,0x7ffdf681f424,84871629,0,0x0,8
tick,0x7ffdf681f424,84873558,0,0x0,8
tick,0x7ffdf681f424,84875617,0,0x0,8
tick,0x7ffdf681f424,84877604,0,0x0,8
tick,0x7ffdf681f424,84879599,0,0x0,8
tick,0x7ffdf681f424,84881604,0,0x0,8
tick,0x7ffdf681f424,84883599,0,0x0,8
tick,0x7ffdf681f424,84885595,0,0x0,8
tick,0x7ffdf681f424,84887577,0,0x0,8
tick,0x7ffdf681f424,84889572,0,0x0,8
tick,0x7ffdf681f424,84891576,0,0x0,8
tick,0x7ffdf681f424,84893451,0,0x0,8
tick,0x7ffdf681f424,84895496,0,0x0,8
tick,0x7ffdf681f424,84897555,0,0x0,8
tick,0x7ffdf681f424,84899557,0,0x0,8
tick,0x7ffdf681f424,84901550,0,0x0,8
tick,0x7ffdf681f424,84903555,0,0x0,8
tick,0x7ffdf681f424,84905534,0,0x0,8
tick,0x7ffdf681f424,84907533,0,0x0,8
tick,0x7ffdf681f424,84909521,0,0x0,8
tick,0x7ffdf681f424,84911516,0,0x0,8
tick,0x7ffdf681f424,84913529,0,0x0,8
tick,0x7ffdf681f424,84915404,0,0x0,8
tick,0x7ffdf681f424,84916511,0,0x0,8
tick,0x7ffdf681f424,84917729,0,0x0,8
tick,0x7ffdf681f424,84918866,0,0x0,8
tick,0x7ffdf681f424,84920102,0,0x0,8
tick,0x7ffdf681f424,84921258,0,0x0,8
tick,0x7ffdf681f424,84922473,0,0x0,8
tick,0x7ffdf681f424,84923598,0,0x0,8
tick,0x7ffdf681f424,84925582,0,0x0,8
tick,0x7ffdf681f424,84927598,0,0x0,8
tick,0x7ffdf681f424,84929541,0,0x0,8
tick,0x7ffdf681f424,84931601,0,0x0,8
tick,0x7ffdf681f424,84933559,0,0x0,8
tick,0x7ffdf681f424,84935451,0,0x0,8
tick,0x7ffdf681f424,84937527,0,0x0,8
tick,0x7ffdf681f424,84939533,0,0x0,8
tick,0x7ffdf681f424,84941740,0,0x0,8
tick,0x7ffdf681f424,84942919,0,0x0,8
tick,0x7ffdf681f424,84944144,0,0x0,8
tick,0x7ffdf681f424,84945311,0,0x0,8
tick,0x7ffdf681f424,84947329,0,0x0,8
tick,0x7ffdf681f424,84948521,0,0x0,8
tick,0x7ffdf681f424,84950585,0,0x0,8
tick,0x7ffdf681f424,84952577,0,0x0,8
tick,0x7ffdf681f424,84954582,0,0x0,8
tick,0x7ffdf681f424,84956585,0,0x0,8
tick,0x7ffdf681f424,84958589,0,0x0,8
tick,0x7ffdf681f424,84960548,0,0x0,8
tick,0x7ffdf681f424,84962538,0,0x0,8
tick,0x7ffdf681f424,84964541,0,0x0,8
tick,0x7ffdf681f424,84966528,0,0x0,8
tick,0x7ffdf681f424,84968450,0,0x0,8
tick,0x7ffdf681f424,84970562,0,0x0,8
tick,0x7ffdf681f424,84972539,0,0x0,8
tick,0x7ffdf681f424,84974483,0,0x0,8
tick,0x7ffdf681f424,84976381,0,0x0,8
tick,0x7ffdf681f424,84978508,0,0x0,8
tick,0x7ffdf681f424,84980508,0,0x0,8
tick,0x7ffdf681f424,84982483,0,0x0,8
tick,0x7ffdf681f424,84984488,0,0x0,8
tick,0x7ffdf681f424,84986463,0,0x0,8
tick,0x7ffdf681f424,84988460,0,0x0,8
tick,0x7ffdf681f424,84990456,0,0x0,8
tick,0x7ffdf681f424,84992447,0,0x0,8
tick,0x7ffdf681f424,84994450,0,0x0,8
tick,0x7ffdf681f424,84996432,0,0x0,8
tick,0x7ffdf681f424,84998433,0,0x0,8
tick,0x7ffdf681f424,85000435,0,0x0,8
tick,0x7ffdf681f424,85002408,0,0x0,8
tick,0x7ffdf681f424,85004427,0,0x0,8
tick,0x7ffdf681f424,85006311,0,0x0,8
tick,0x7ffdf681f424,85008430,0,0x0,8
tick,0x7ffdf681f424,85010263,0,0x0,8
tick,0x7ffdf681f424,85012393,0,0x0,8
tick,0x7ffdf681f424,85014396,0,0x0,8
tick,0x7ffdf681f424,85016385,0,0x0,8
tick,0x7ffdf681f424,85018372,0,0x0,8
tick,0x7ffdf681f424,85020380,0,0x0,8
tick,0x7ffdf681f424,85022383,0,0x0,8
tick,0x7ffdf681f424,85024470,0,0x0,8
tick,0x7ffdf681f424,85026371,0,0x0,8
tick,0x7ffdf681f424,85028355,0,0x0,8
tick,0x7ffdf681f424,85030349,0,0x0,8
tick,0x7ffdf681f424,85032341,0,0x0,8
tick,0x7ffdf681f424,85034337,0,0x0,8
tick,0x7ffdf681f424,85036352,0,0x0,8
tick,0x7ffdf681f424,85038325,0,0x0,8
tick,0x7ffdf681f424,85040320,0,0x0,8
tick,0x7ffdf681f424,85042313,0,0x0,8
tick,0x7ffdf681f424,85044327,0,0x0,8
tick,0x7ffdf681f424,85046372,0,0x0,8
tick,0x7ffdf681f424,85048337,0,0x0,8
tick,0x7ffdf681f424,85050300,0,0x0,8
tick,0x7ffdf681f424,85052304,0,0x0,8
tick,0x7ffdf681f424,85054292,0,0x0,8
tick,0x7ffdf681f424,85056281,0,0x0,8
tick,0x7ffdf681f424,85058285,0,0x0,8
tick,0x7ffdf681f424,85060164,0,0x0,8
tick,0x7ffdf681f424,85062270,0,0x0,8
tick,0x7ffdf681f424,85064261,0,0x0,8
tick,0x7ffdf681f424,85066271,0,0x0,8
tick,0x7ffdf681f424,85068304,0,0x0,8
tick,0x7ffdf681f424,85070269,0,0x0,8
tick,0x7ffdf681f424,85072142,0,0x0,8
tick,0x7ffdf681f424,85074231,0,0x0,8
tick,0x7ffdf681f424,85076235,0,0x0,8
tick,0x7ffdf681f424,85078231,0,0x0,8
tick,0x7ffdf681f424,85080220,0,0x0,8
tick,0x7ffdf681f424,85082110,0,0x0,8
tick,0x7ffdf681f424,85084097,0,0x0,8
tick,0x7ffdf681f424,85086211,0,0x0,8
tick,0x7ffdf681f424,85088211,0,0x0,8
tick,0x7ffdf681f424,85090265,0,0x0,8
tick,0x7ffdf681f424,85092242,0,0x0,8
tick,0x7ffdf681f424,85094141,0,0x0,8
tick,0x7ffdf681f424,85096177,0,0x0,8
tick,0x7ffdf681f424,85098173,0,0x0,8
tick,0x7ffdf681f424,85100172,0,0x0,8
tick,0x7ffdf681f424,85102125,0,0x0,8
tick,0x7ffdf681f424,85104156,0,0x0,8
tick,0x7ffdf681f424,85106150,0,0x0,8
tick,0x7ffdf681f424,85108145,0,0x0,8
tick,0x7ffdf681f424,85110070,0,0x0,8
tick,0x7ffdf681f424,85112177,0,0x0,8
tick,0x7ffdf681f424,85114163,0,0x0,8
tick,0x7ffdf681f424,85116125,0,0x0,8
tick,0x7ffdf681f424,85118121,0,0x0,8
tick,0x7ffdf681f424,85120113,0,0x0,8
tick,0x7ffdf681f424,85122105,0,0x0,8
tick,0x7ffdf681f424,85124102,0,0x0,8
tick,0x7ffdf681f424,85126095,0,0x0,8
tick,0x7ffdf681f424,85128092,0,0x0,8
tick,0x7ffdf681f424,85130088,0,0x0,8
tick,0x7ffdf681f424,85132093,0,0x0,8
tick,0x7ffdf681f424,85134105,0,0x0,8
tick,0x7ffdf681f424,85136104,0,0x0,8
tick,0x7ffdf681f424,85138067,0,0x0,8
tick,0x7ffdf681f424,85140059,0,0x0,8
tick,0x7ffdf681f424,85142069,0,0x0,8
tick,0x7ffdf681f424,85144065,0,0x0,8
tick,0x7ffdf681f424,85146044,0,0x0,8
tick,0x7ffdf681f424,85148038,0,0x0,8
tick,0x7ffdf681f424,85150036,0,0x0,8
tick,0x7ffdf681f424,85151913,0,0x0,8
tick,0x7ffdf681f424,85154037,0,0x0,8
tick,0x7ffdf681f424,85156003,0,0x0,8
tick,0x7ffdf681f424,85158020,0,0x0,8
tick,0x7ffdf681f424,85159905,0,0x0,8
tick,0x7ffdf681f424,85162024,0,0x0,8
tick,0x7ffdf681f424,85163996,0,0x0,8
tick,0x7ffdf681f424,85165989,0,0x0,8
tick,0x7ffdf681f424,85167979,0,0x0,8
tick,0x7ffdf681f424,85169979,0,0x0,8
tick,0x7ffdf681f424,85171974,0,0x0,8
tick,0x7ffdf681f424,85173996,0,0x0,8
tick,0x7ffdf681f424,85175976,0,0x0,8
tick,0x7ffdf681f424,85178062,0,0x0,8
tick,0x7ffdf681f424,85179985,0,0x0,8
tick,0x7ffdf681f424,85181984,0,0x0,8
tick,0x7ffdf681f424,85183943,0,0x0,8
tick,0x7ffdf681f424,85185946,0,0x0,8
tick,0x7ffdf681f424,85187931,0,0x0,8
tick,0x7ffdf681f424,85189928,0,0x0,8
tick,0x7ffdf681f424,85191922,0,0x0,8
tick,0x7ffdf681f424,85193926,0,0x0,8
tick,0x7ffdf681f424,85195910,0,0x0,8
tick,0x7ffdf681f424,85197917,0,0x0,8
tick,0x7ffdf681f424,85199977,0,0x0,8
tick,0x7ffdf681f424,85201812,0,0x0,8
tick,0x7ffdf681f424,85203894,0,0x0,8
tick,0x7ffdf681f424,85205770,0,0x0,8
tick,0x7ffdf681f424,85207789,0,0x0,8
tick,0x7ffdf681f424,85209872,0,0x0,8
tick,0x7ffdf681f424,85211867,0,0x0,8
tick,0x7ffdf681f424,85213865,0,0x0,8
tick,0x7ffdf681f424,85215851,0,0x0,8
tick,0x7ffdf681f424,85217854,0,0x0,8
tick,0x7ffdf681f424,85219844,0,0x0,8
tick,0x7ffdf681f424,85221838,0,0x0,8
tick,0x7ffdf681f424,85223857,0,0x0,8
tick,0x7ffdf681f424,85225832,0,0x0,8
tick,0x7ffdf681f424,85227832,0,0x0,8
tick,0x7ffdf681f424,85229820,0,0x0,8
tick,0x7ffdf681f424,85231814,0,0x0,8
tick,0x7ffdf681f424,85233816,0,0x0,8
tick,0x7ffdf681f424,85235694,0,0x0,8
tick,0x7ffdf681f424,85237711,0,0x0,8
tick,0x7ffdf681f424,85239801,0,0x0,8
tick,0x7ffdf681f424,85241800,0,0x0,8
tick,0x7ffdf681f424,85243660,0,0x0,8
tick,0x7ffdf681f424,85245776,0,0x0,8
tick,0x7ffdf681f424,85247772,0,0x0,8
tick,0x7ffdf681f424,85249769,0,0x0,8
tick,0x7ffdf681f424,85251746,0,0x0,8
tick,0x7ffdf681f424,85253757,0,0x0,8
tick,0x7ffdf681f424,85255789,0,0x0,8
tick,0x7ffdf681f424,85257634,0,0x0,8
tick,0x7ffdf681f424,85259740,0,0x0,8
tick,0x7ffdf681f424,85261734,0,0x0,8
tick,0x7ffdf681f424,85263741,0,0x0,8
tick,0x7ffdf681f424,85265784,0,0x0,8
tick,0x7ffdf681f424,85267754,0,0x0,8
tick,0x7ffdf681f424,85269715,0,0x0,8
tick,0x7ffdf681f424,85271707,0,0x0,8
tick,0x7ffdf681f424,85273702,0,0x0,8
tick,0x7ffdf681f424,85275698,0,0x0,8
tick,0x7ffdf681f424,85277694,0,0x0,8
tick,0x7ffdf681f424,85279716,0,0x0,8
tick,0x7ffdf681f424,85281695,0,0x0,8
tick,0x7ffdf681f424,85283566,0,0x0,8
tick,0x7ffdf681f424,85285680,0,0x0,8
tick,0x7ffdf681f424,85287705,0,0x0,8
tick,0x7ffdf681f424,85289694,0,0x0,8
tick,0x7ffdf681f424,85291655,0,0x0,8
tick,0x7ffdf681f424,85293561,0,0x0,8
tick,0x7ffdf681f424,85295668,0,0x0,8
tick,0x7ffdf681f424,85297632,0,0x0,8
tick,0x7ffdf681f424,85299627,0,0x0,8
tick,0x7ffdf681f424,85301634,0,0x0,8
tick,0x7ffdf681f424,85303509,0,0x0,8
tick,0x7ffdf681f424,85305611,0,0x0,8
tick,0x7ffdf681f424,85307618,0,0x0,8
tick,0x7ffdf681f424,85309677,0,0x0,8
tick,0x7ffdf681f424,85311624,0,0x0,8
tick,0x7ffdf681f424,85313508,0,0x0,8
tick,0x7ffdf681f424,85315591,0,0x0,8
tick,0x7ffdf681f424,85317587,0,0x0,8
tick,0x7ffdf681f424,85319465,0,0x0,8
tick,0x7ffdf681f424,85321572,0,0x0,8
tick,0x7ffdf681f424,85323569,0,0x0,8
tick,0x7ffdf681f424,85325564,0,0x0,8
tick,0x7ffdf681f424,85327558,0,0x0,8
tick,0x7ffdf681f424,85329569,0,0x0,8
tick,0x7ffdf681f424,85331627,0,0x0,8
tick,0x7ffdf681f424,85333575,0,0x0,8
tick,0x7ffdf681f424,85335501,0,0x0,8
tick,0x7ffdf681f424,85337505,0,0x0,8
tick,0x7ffdf681f424,85339530,0,0x0,8
tick,0x7ffdf681f424,85341523,0,0x0,8
tick,0x7ffdf681f424,85343424,0,0x0,8
tick,0x7ffdf681f424,85345521,0,0x0,8
tick,0x7ffdf681f424,85347505,0,0x0,8
tick,0x7ffdf681f424,85349502,0,0x0,8
tick,0x7ffdf681f424,85351501,0,0x0,8
tick,0x7ffdf681f424,85353496,0,0x0,8
tick,0x7ffdf681f424,85355489,0,0x0,8
tick,0x7ffdf681f424,85357484,0,0x0,8
tick,0x7ffdf681f424,85359475,0,0x0,8
tick,0x7ffdf681f424,85361467,0,0x0,8
tick,0x7ffdf681f424,85363464,0,0x0,8
tick,0x7ffdf681f424,85365458,0,0x0,8
tick,0x7ffdf681f424,85367451,0,0x0,8
tick,0x7ffdf681f424,85369441,0,0x0,8
tick,0x7ffdf681f424,85371441,0,0x0,8
tick,0x7ffdf681f424,85373445,0,0x0,8
tick,0x7ffdf681f424,85375459,0,0x0,8
tick,0x7ffdf681f424,85377460,0,0x0,8
tick,0x7ffdf681f424,85379373,0,0x0,8
tick,0x7ffdf681f424,85381417,0,0x0,8
tick,0x7ffdf681f424,85383262,0,0x0,8
tick,0x7ffdf681f424,85385294,0,0x0,8
tick,0x7ffdf681f424,85387403,0,0x0,8
tick,0x7ffdf681f424,85389283,0,0x0,8
tick,0x7ffdf681f424,85391279,0,0x0,8
tick,0x7ffdf681f424,85393395,0,0x0,8
tick,0x7ffdf681f424,85395384,0,0x0,8
tick,0x7ffdf681f424,85397387,0,0x0,8
tick,0x7ffdf681f424,85399388,0,0x0,8
tick,0x7ffdf681f424,85401368,0,0x0,8
tick,0x7ffdf681f424,85403355,0,0x0,8
tick,0x7ffdf681f424,85405358,0,0x0,8
tick,0x7ffdf681f424,85407345,0,0x0,8
tick,0x7ffdf681f424,85409341,0,0x0,8
tick,0x7ffdf681f424,85411334,0,0x0,8
tick,0x7ffdf681f424,85413331,0,0x0,8
tick,0x7ffdf681f424,85415324,0,0x0,8
tick,0x7ffdf681f424,85417274,0,0x0,8
tick,0x7ffdf681f424,85419315,0,0x0,8
tick,0x7ffdf681f424,85421341,0,0x0,8
tick,0x7ffdf681f424,85423249,0,0x0,8
tick,0x7ffdf681f424,85425297,0,0x0,8
tick,0x7ffdf681f424,85427300,0,0x0,8
tick,0x7ffdf681f424,85429288,0,0x0,8
tick,0x7ffdf681f424,85431275,0,0x0,8
tick,0x7ffdf681f424,85433278,0,0x0,8
tick,0x7ffdf681f424,85435159,0,0x0,8
tick,0x7ffdf681f424,85437268,0,0x0,8
tick,0x7ffdf681f424,85439212,0,0x0,8
tick,0x7ffdf681f424,85441284,0,0x0,8
tick,0x7ffdf681f424,85443287,0,0x0,8
tick,0x7ffdf681f424,85445251,0,0x0,8
tick,0x7ffdf681f424,85447237,0,0x0,8
tick,0x7ffdf681f424,85449234,0,0x0,8
tick,0x7ffdf681f424,85451227,0,0x0,8
tick,0x7ffdf681f424,85453225,0,0x0,8
tick,0x7ffdf681f424,85455216,0,0x0,8
tick,0x7ffdf681f424,85457219,0,0x0,8
tick,0x7ffdf681f424,85459208,0,0x0,8
tick,0x7ffdf681f424,85461242,0,0x0,8
tick,0x7ffdf681f424,85463241,0,0x0,8
tick,0x7ffdf681f424,85465214,0,0x0,8
tick,0x7ffdf681f424,85467128,0,0x0,8
tick,0x7ffdf681f424,85469208,0,0x0,8
tick,0x7ffdf681f424,85471175,0,0x0,8
tick,0x7ffdf681f424,85473179,0,0x0,8
tick,0x7ffdf681f424,85475160,0,0x0,8
tick,0x7ffdf681f424,85477046,0,0x0,8
tick,0x7ffdf681f424,85479154,0,0x0,8
tick,0x7ffdf681f424,85481149,0,0x0,8
tick,0x7ffdf681f424,85483183,0,0x0,8
tick,0x7ffdf681f424,85485157,0,0x0,8
tick,0x7ffdf681f424,85487091,0,0x0,8
tick,0x7ffdf681f424,85489005,0,0x0,8
tick,0x7ffdf681f424,85491020,0,0x0,8
tick,0x7ffdf681f424,85493013,0,0x0,8
tick,0x7ffdf681f424,85495116,0,0x0,8
tick,0x7ffdf681f424,85497107,0,0x0,8
tick,0x7ffdf681f424,85499106,0,0x0,8
tick,0x7ffdf681f424,85501132,0,0x0,8
tick,0x7ffdf681f424,85503089,0,0x0,8
tick,0x7ffdf681f424,85505125,0,0x0,8
tick,0x7ffdf681f424,85507073,0,0x0,8
tick,0x7ffdf681f424,85509076,0,0x0,8
tick,0x7ffdf681f424,85511068,0,0x0,8
tick,0x7ffdf681f424,85513063,0,0x0,8
tick,0x7ffdf681f424,85515060,0,0x0,8
tick,0x7ffdf681f424,85517052,0,0x0,8
tick,0x7ffdf681f424,85519046,0,0x0,8
tick,0x7ffdf681f424,85521040,0,0x0,8
tick,0x7ffdf681f424,85523036,0,0x0,8
tick,0x7ffdf681f424,85525032,0,0x0,8
tick,0x7ffdf681f424,85526959,0,0x0,8
tick,0x7ffdf681f424,85529009,0,0x0,8
tick,0x7ffdf681f424,85531047,0,0x0,8
tick,0x7ffdf681f424,85533012,0,0x0,8
tick,0x7ffdf681f424,85535012,0,0x0,8
tick,0x7ffdf681f424,85536999,0,0x0,8
tick,0x7ffdf681f424,85538993,0,0x0,8
tick,0x7ffdf681f424,85540985,0,0x0,8
tick,0x7ffdf681f424,85542873,0,0x0,8
tick,0x7ffdf681f424,85544887,0,0x0,8
tick,0x7ffdf681f424,85546983,0,0x0,8
tick,0x7ffdf681f424,85548991,0,0x0,8
tick,0x7ffdf681f424,85550954,0,0x0,8
tick,0x7ffdf681f424,85552960,0,0x0,8
tick,0x7ffdf681f424,85554950,0,0x0,8
tick,0x7ffdf681f424,85556948,0,0x0,8
tick,0x7ffdf681f424,85558940,0,0x0,8
tick,0x7ffdf681f424,85560934,0,0x0,8
tick,0x7ffdf681f424,85562936,0,0x0,8
tick,0x7ffdf681f424,85564926,0,0x0,8
tick,0x7ffdf681f424,85566918,0,0x0,8
tick,0x7ffdf681f424,85568879,0,0x0,8
tick,0x7ffdf681f424,85570934,0,0x0,8
tick,0x7ffdf681f424,85572967,0,0x0,8
tick,0x7ffdf681f424,85574930,0,0x0,8
tick,0x7ffdf681f424,85576798,0,0x0,8
tick,0x7ffdf681f424,85578883,0,0x0,8
tick,0x7ffdf681f424,85580881,0,0x0,8
tick,0x7ffdf681f424,85582925,0,0x0,8
tick,0x7ffdf681f424,85584873,0,0x0,8
tick,0x7ffdf681f424,85586865,0,0x0,8
tick,0x7ffdf681f424,85588861,0,0x0,8
tick,0x7ffdf681f424,85590744,0,0x0,8
tick,0x7ffdf681f424,85592889,0,0x0,8
tick,0x7ffdf681f424,85594914,0,0x0,8
tick,0x7ffdf681f424,85596869,0,0x0,8
tick,0x7ffdf681f424,85598833,0,0x0,8
tick,0x7ffdf681f424,85600840,0,0x0,8
tick,0x7ffdf681f424,85602824,0,0x0,8
tick,0x7ffdf681f424,85604819,0,0x0,8
tick,0x7ffdf681f424,85606812,0,0x0,8
tick,0x7ffdf681f424,85608813,0,0x0,8
tick,0x7ffdf681f424,85610801,0,0x0,8
tick,0x7ffdf681f424,85612792,0,0x0,8
tick,0x7ffdf681f424,85614831,0,0x0,8
tick,0x7ffdf681f424,85616778,0,0x0,8
tick,0x7ffdf681f424,85618729,0,0x0,8
tick,0x7ffdf681f424,85620666,0,0x0,8
tick,0x7ffdf681f424,85622769,0,0x0,8
tick,0x7ffdf681f424,85624765,0,0x0,8
tick,0x7ffdf681f424,85626764,0,0x0,8
tick,0x7ffdf681f424,85628639,0,0x0,8
tick,0x7ffdf681f424,85630747,0,0x0,8
tick,0x7ffdf681f424,85632738,0,0x0,8
tick,0x7ffdf681f424,85634739,0,0x0,8
tick,0x7ffdf681f424,85636741,0,0x0,8
tick,0x7ffdf681f424,85638721,0,0x0,8
tick,0x7ffdf681f424,85640769,0,0x0,8
tick,0x7ffdf681f424,85642715,0,0x0,8
tick,0x7ffdf681f424,85644710,0,0x0,8
tick,0x7ffdf681f424,85646704,0,0x0,8
tick,0x7ffdf681f424,85648699,0,0x0,8
tick,0x7ffdf681f424,85650694,0,0x0,8
tick,0x7ffdf681f424,85652690,0,0x0,8
tick,0x7ffdf681f424,85654684,0,0x0,8
tick,0x7ffdf681f424,85656678,0,0x0,8
tick,0x7ffdf681f424,85658681,0,0x0,8
tick,0x7ffdf681f424,85660667,0,0x0,8
tick,0x7ffdf681f424,85662673,0,0x0,8
tick,0x7ffdf681f424,85664707,0,0x0,8
tick,0x7ffdf681f424,85666652,0,0x0,8
tick,0x7ffdf681f424,85668537,0,0x0,8
tick,0x7ffdf681f424,85670640,0,0x0,8
tick,0x7ffdf681f424,85672638,0,0x0,8
tick,0x7ffdf681f424,85674630,0,0x0,8
tick,0x7ffdf681f424,85676631,0,0x0,8
tick,0x7ffdf681f424,85678619,0,0x0,8
tick,0x7ffdf681f424,85680622,0,0x0,8
tick,0x7ffdf681f424,85682603,0,0x0,8
tick,0x7ffdf681f424,85684612,0,0x0,8
tick,0x7ffdf681f424,85686606,0,0x0,8
tick,0x7ffdf681f424,85688599,0,0x0,8
tick,0x7ffdf681f424,85690587,0,0x0,8
tick,0x7ffdf681f424,85692590,0,0x0,8
tick,0x7ffdf681f424,85694585,0,0x0,8
tick,0x7ffdf681f424,85696465,0,0x0,8
tick,0x7ffdf681f424,85698457,0,0x0,8
tick,0x7ffdf681f424,85700569,0,0x0,8
tick,0x7ffdf681f424,85702488,0,0x0,8
tick,0x7ffdf681f424,85704629,0,0x0,8
tick,0x7ffdf681f424,85706581,0,0x0,8
tick,0x7ffdf681f424,85708540,0,0x0,8
tick,0x7ffdf681f424,85710425,0,0x0,8
tick,0x7ffdf681f424,85712529,0,0x0,8
tick,0x7ffdf681f424,85714530,0,0x0,8
tick,0x7ffdf681f424,85716517,0,0x0,8
tick,0x7ffdf681f424,85718485,0,0x0,8
tick,0x7ffdf681f424,85720508,0,0x0,8
tick,0x7ffdf681f424,85722502,0,0x0,8
tick,0x7ffdf681f424,85724505,0,0x0,8
tick,0x7ffdf681f424,85726490,0,0x0,8
tick,0x7ffdf681f424,85728494,0,0x0,8
tick,0x7ffdf681f424,85730481,0,0x0,8
tick,0x7ffdf681f424,85732477,0,0x0,8
tick,0x7ffdf681f424,85734470,0,0x0,8
tick,0x7ffdf681f424,85736467,0,0x0,8
tick,0x7ffdf681f424,85738459,0,0x0,8
tick,0x7ffdf681f424,85740456,0,0x0,8
tick,0x7ffdf681f424,85742449,0,0x0,8
tick,0x7ffdf681f424,85744443,0,0x0,8
tick,0x7ffdf681f424,85746490,0,0x0,8
tick,0x7ffdf681f424,85748434,0,0x0,8
tick,0x7ffdf681f424,85750461,0,0x0,8
tick,0x7ffdf681f424,85752422,0,0x0,8
tick,0x7ffdf681f424,85754310,0,0x0,8
tick,0x7ffdf681f424,85756418,0,0x0,8
tick,0x7ffdf681f424,85758311,0,0x0,8
tick,0x7ffdf681f424,85760282,0,0x0,8
tick,0x7ffdf681f424,85762373,0,0x0,8
tick,0x7ffdf681f424,85764395,0,0x0,8
tick,0x7ffdf681f424,85766384,0,0x0,8
tick,0x7ffdf681f424,85768392,0,0x0,8
tick,0x7ffdf681f424,85770367,0,0x0,8
tick,0x7ffdf681f424,85772391,0,0x0,8
tick,0x7ffdf681f424,85774257,0,0x0,8
tick,0x7ffdf681f424,85776359,0,0x0,8
tick,0x7ffdf681f424,85778347,0,0x0,8
tick,0x7ffdf681f424,85780353,0,0x0,8
tick,0x7ffdf681f424,85782342,0,0x0,8
tick,0x7ffdf681f424,85784337,0,0x0,8
tick,0x7ffdf681f424,85786257,0,0x0,8
tick,0x7ffdf681f424,85788329,0,0x0,8
tick,0x7ffdf681f424,85790331,0,0x0,8
tick,0x7ffdf681f424,85792310,0,0x0,8
tick,0x7ffdf681f424,85794326,0,0x0,8
tick,0x7ffdf681f424,85796307,0,0x0,8
tick,0x7ffdf681f424,85798307,0,0x0,8
tick,0x7ffdf681f424,85800296,0,0x0,8
tick,0x7ffdf681f424,85802290,0,0x0,8
tick,0x7ffdf681f424,85804283,0,0x0,8
tick,0x7ffdf681f424,85806278,0,0x0,8
tick,0x7ffdf681f424,85808272,0,0x0,8
tick,0x7ffdf681f424,85810179,0,0x0,8
tick,0x7ffdf681f424,85812274,0,0x0,8
tick,0x7ffdf681f424,85814295,0,0x0,8
tick,0x7ffdf681f424,85816280,0,0x0,8
tick,0x7ffdf681f424,85818246,0,0x0,8
tick,0x7ffdf681f424,85820243,0,0x0,8
tick,0x7ffdf681f424,85822242,0,0x0,8
tick,0x7ffdf681f424,85824232,0,0x0,8
tick,0x7ffdf681f424,85826230,0,0x0,8
tick,0x7ffdf681f424,85828248,0,0x0,8
tick,0x7ffdf681f424,85830214,0,0x0,8
tick,0x7ffdf681f424,85832211,0,0x0,8
tick,0x7ffdf681f424,85834211,0,0x0,8
tick,0x7ffdf681f424,85836194,0,0x0,8
tick,0x7ffdf681f424,85838200,0,0x0,8
tick,0x7ffdf681f424,85840189,0,0x0,8
tick,0x7ffdf681f424,85842204,0,0x0,8
tick,0x7ffdf681f424,85844179,0,0x0,8
tick,0x7ffdf681f424,85846171,0,0x0,8
tick,0x7ffdf681f424,85848167,0,0x0,8
tick,0x7ffdf681f424,85850150,0,0x0,8
tick,0x7ffdf681f424,85852047,0,0x0,8
tick,0x7ffdf681f424,85854158,0,0x0,8
tick,0x7ffdf681f424,85856154,0,0x0,8
tick,0x7ffdf681f424,85858209,0,0x0,8
tick,0x7ffdf681f424,85860183,0,0x0,8
tick,0x7ffdf681f424,85862143,0,0x0,8
tick,0x7ffdf681f424,85864125,0,0x0,8
tick,0x7ffdf681f424,85866118,0,0x0,8
tick,0x7ffdf681f424,85868113,0,0x0,8
tick,0x7ffdf681f424,85870103,0,0x0,8
tick,0x7ffdf681f424,85872107,0,0x0,8
tick,0x7ffdf681f424,85874097,0,0x0,8
tick,0x7ffdf681f424,85876089,0,0x0,8
tick,0x7ffdf681f424,85878100,0,0x0,8
tick,0x7ffdf681f424,85880075,0,0x0,8
tick,0x7ffdf681f424,85882080,0,0x0,8
tick,0x7ffdf681f424,85884073,0,0x0,8
tick,0x7ffdf681f424,85886066,0,0x0,8
tick,0x7ffdf681f424,85888064,0,0x0,8
tick,0x7ffdf681f424,85890054,0,0x0,8
tick,0x7ffdf681f424,85892056,0,0x0,8
tick,0x7ffdf681f424,85894044,0,0x0,8
tick,0x7ffdf681f424,85896041,0,0x0,8
tick,0x7ffdf681f424,85897924,0,0x0,8
tick,0x7ffdf681f424,85900034,0,0x0,8
tick,0x7ffdf681f424,85901986,0,0x0,8
tick,0x7ffdf681f424,85904048,0,0x0,8
tick,0x7ffdf681f424,85906014,0,0x0,8
tick,0x7ffdf681f424,85908008,0,0x0,8
tick,0x7ffdf681f424,85910027,0,0x0,8
tick,0x7ffdf681f424,85911995,0,0x0,8
tick,0x7ffdf681f424,85913874,0,0x0,8
tick,0x7ffdf681f424,85915988,0,0x0,8
tick,0x7ffdf681f424,85918011,0,0x0,8
tick,0x7ffdf681f424,85919977,0,0x0,8
tick,0x7ffdf681f424,85921976,0,0x0,8
tick,0x7ffdf681f424,85924038,0,0x0,8
tick,0x7ffdf681f424,85925967,0,0x0,8
tick,0x7ffdf681f424,85927886,0,0x0,8
tick,0x7ffdf681f424,85929948,0,0x0,8
tick,0x7ffdf681f424,85931937,0,0x0,8
tick,0x7ffdf681f424,85933931,0,0x0,8
tick,0x7ffdf681f424,85935886,0,0x0,8
tick,0x7ffdf681f424,85937941,0,0x0,8
tick,0x7ffdf681f424,85939923,0,0x0,8
tick,0x7ffdf681f424,85941916,0,0x0,8
tick,0x7ffdf681f424,85943811,0,0x0,8
tick,0x7ffdf681f424,85945897,0,0x0,8
tick,0x7ffdf681f424,85947930,0,0x0,8
tick,0x7ffdf681f424,85949890,0,0x0,8
tick,0x7ffdf681f424,85951851,0,0x0,8
tick,0x7ffdf681f424,85953883,0,0x0,8
tick,0x7ffdf681f424,85955875,0,0x0,8
tick,0x7ffdf681f424,85957872,0,0x0,8
tick,0x7ffdf681f424,85959869,0,0x0,8
tick,0x7ffdf681f424,85961862,0,0x0,8
tick,0x7ffdf681f424,85963867,0,0x0,8
tick,0x7ffdf681f424,85965860,0,0x0,8
tick,0x7ffdf681f424,85967844,0,0x0,8
tick,0x7ffdf681f424,85969877,0,0x0,8
tick,0x7ffdf681f424,85971837,0,0x0,8
tick,0x7ffdf681f424,85973830,0,0x0,8
tick,0x7ffdf681f424,85975827,0,0x0,8
tick,0x7ffdf681f424,85977820,0,0x0,8
tick,0x7ffdf681f424,85979822,0,0x0,8
tick,0x7ffdf681f424,85981809,0,0x0,8
tick,0x7ffdf681f424,85983806,0,0x0,8
tick,0x7ffdf681f424,85985798,0,0x0,8
tick,0x7ffdf681f424,85987803,0,0x0,8
tick,0x7ffdf681f424,85989780,0,0x0,8
tick,0x7ffdf681f424,85991838,0,0x0,8
tick,0x7ffdf681f424,85993663,0,0x0,8
tick,0x7ffdf681f424,85995771,0,0x0,8
tick,0x7ffdf681f424,85997766,0,0x0,8
tick,0x7ffdf681f424,85999764,0,0x0,8
tick,0x7ffdf681f424,86001768,0,0x0,8
tick,0x7ffdf681f424,86003644,0,0x0,8
tick,0x7ffdf681f424,86005639,0,0x0,8
tick,0x7ffdf681f424,86007753,0,0x0,8
tick,0x7ffdf681f424,86009747,0,0x0,8
tick,0x7ffdf681f424,86011725,0,0x0,8
tick,0x7ffdf681f424,86013732,0,0x0,8
tick,0x7ffdf681f424,86015720,0,0x0,8
tick,0x7ffdf681f424,86017712,0,0x0,8
tick,0x7ffdf681f424,86019710,0,0x0,8
tick,0x7ffdf681f424,86021580,0,0x0,8
tick,0x7ffdf681f424,86023697,0,0x0,8
tick,0x7ffdf681f424,86025688,0,0x0,8
tick,0x7ffdf681f424,86027576,0,0x0,8
tick,0x7ffdf681f424,86029680,0,0x0,8
tick,0x7ffdf681f424,86031683,0,0x0,8
tick,0x7ffdf681f424,86033732,0,0x0,8
tick,0x7ffdf681f424,86035575,0,0x0,8
tick,0x7ffdf681f424,86037660,0,0x0,8
tick,0x7ffdf681f424,86039654,0,0x0,8
tick,0x7ffdf681f424,86041651,0,0x0,8
tick,0x7ffdf681f424,86043535,0,0x0,8
tick,0x7ffdf681f424,86045664,0,0x0,8
tick,0x7ffdf681f424,86047635,0,0x0,8
tick,0x7ffdf681f424,86049627,0,0x0,8
tick,0x7ffdf681f424,86051625,0,0x0,8
tick,0x7ffdf681f424,86053623,0,0x0,8
tick,0x7ffdf681f424,86055600,0,0x0,8
tick,0x7ffdf681f424,86057614,0,0x0,8
tick,0x7ffdf681f424,86059601,0,0x0,8
tick,0x7ffdf681f424,86061596,0,0x0,8
tick,0x7ffdf681f424,86063596,0,0x0,8
tick,0x7ffdf681f424,86065594,0,0x0,8
tick,0x7ffdf681f424,86067468,0,0x0,8
tick,0x7ffdf681f424,86069583,0,0x0,8
tick,0x7ffdf681f424,86071577,0,0x0,8
tick,0x7ffdf681f424,86073612,0,0x0,8
tick,0x7ffdf681f424,86075568,0,0x0,8
tick,0x7ffdf681f424,86077582,0,0x0,8
tick,0x7ffdf681f424,86079582,0,0x0,8
tick,0x7ffdf681f424,86081433,0,0x0,8
tick,0x7ffdf681f424,86083539,0,0x0,8
tick,0x7ffdf681f424,86085417,0,0x0,8
tick,0x7ffdf681f424,86087535,0,0x0,8
tick,0x7ffdf681f424,86089518,0,0x0,8
tick,0x7ffdf681f424,86091521,0,0x0,8
tick,0x7ffdf681f424,86093510,0,0x0,8
tick,0x7ffdf681f424,86095511,0,0x0,8
tick,0x7ffdf681f424,86097512,0,0x0,8
tick,0x7ffdf681f424,86099538,0,0x0,8
tick,0x7ffdf681f424,86101529,0,0x0,8
tick,0x7ffdf681f424,86103477,0,0x0,8
tick,0x7ffdf681f424,86105478,0,0x0,8
tick,0x7ffdf681f424,86107476,0,0x0,8
tick,0x7ffdf681f424,86109465,0,0x0,8
tick,0x7ffdf681f424,86111472,0,0x0,8
tick,0x7ffdf681f424,86113456,0,0x0,8
tick,0x7ffdf681f424,86115448,0,0x0,8
tick,0x7ffdf681f424,86117445,0,0x0,8
tick,0x7ffdf681f424,86119449,0,0x0,8
tick,0x7ffdf681f424,86121478,0,0x0,8
tick,0x7ffdf681f424,86123452,0,0x0,8
tick,0x7ffdf681f424,86125424,0,0x0,8
tick,0x7ffdf681f424,86127423,0,0x0,8
tick,0x7ffdf681f424,86129414,0,0x0,8
tick,0x7ffdf681f424,86131413,0,0x0,8
tick,0x7ffdf681f424,86133406,0,0x0,8
tick,0x7ffdf681f424,86135290,0,0x0,8
tick,0x7ffdf681f424,86137393,0,0x0,8
tick,0x7ffdf681f424,86139390,0,0x0,8
tick,0x7ffdf681f424,86141392,0,0x0,8
tick,0x7ffdf681f424,86143374,0,0x0,8
tick,0x7ffdf681f424,86145405,0,0x0,8
tick,0x7ffdf681f424,86147368,0,0x0,8
tick,0x7ffdf681f424,86149372,0,0x0,8
tick,0x7ffdf681f424,86151365,0,0x0,8
tick,0x7ffdf681f424,86153358,0,0x0,8
tick,0x7ffdf681f424,86155390,0,0x0,8
tick,0x7ffdf681f424,86157250,0,0x0,8
tick,0x7ffdf681f424,86159229,0,0x0,8
tick,0x7ffdf681f424,86161359,0,0x0,8
tick,0x7ffdf681f424,86163372,0,0x0,8
tick,0x7ffdf681f424,86165408,0,0x0,8
tick,0x7ffdf681f424,86167344,0,0x0,8
tick,0x7ffdf681f424,86169235,0,0x0,8
tick,0x7ffdf681f424,86171305,0,0x0,8
tick,0x7ffdf681f424,86173297,0,0x0,8
tick,0x7ffdf681f424,86175300,0,0x0,8
tick,0x7ffdf681f424,86177178,0,0x0,8
tick,0x7ffdf681f424,86179283,0,0x0,8
tick,0x7ffdf681f424,86181278,0,0x0,8
tick,0x7ffdf681f424,86183288,0,0x0,8
tick,0x7ffdf681f424,86185264,0,0x0,8
tick,0x7ffdf681f424,86187302,0,0x0,8
tick,0x7ffdf681f424,86189276,0,0x0,8
tick,0x7ffdf681f424,86191249,0,0x0,8
tick,0x7ffdf681f424,86193244,0,0x0,8
tick,0x7ffdf681f424,86195240,0,0x0,8
tick,0x7ffdf681f424,86197244,0,0x0,8
tick,0x7ffdf681f424,86199230,0,0x0,8
tick,0x7ffdf681f424,86201225,0,0x0,8
tick,0x7ffdf681f424,86203220,0,0x0,8
tick,0x7ffdf681f424,86205097,0,0x0,8
tick,0x7ffdf681f424,86207215,0,0x0,8
tick,0x7ffdf681f424,86209187,0,0x0,8
tick,0x7ffdf681f424,86211216,0,0x0,8
tick,0x7ffdf681f424,86213190,0,0x0,8
tick,0x7ffdf681f424,86215181,0,0x0,8
tick,0x7ffdf681f424,86217179,0,0x0,8
tick,0x7ffdf681f424,86219183,0,0x0,8
tick,0x7ffdf681f424,86221170,0,0x0,8
tick,0x7ffdf681f424,86223169,0,0x0,8
tick,0x7ffdf681f424,86225158,0,0x0,8
tick,0x7ffdf681f424,86227044,0,0x0,8
tick,0x7ffdf681f424,86229157,0,0x0,8
tick,0x7ffdf681f424,86231220,0,0x0,8
tick,0x7ffdf681f424,86233158,0,0x0,8
tick,0x7ffdf681f424,86235018,0,0x0,8
tick,0x7ffdf681f424,86237178,0,0x0,8
tick,0x7ffdf681f424,86239122,0,0x0,8
tick,0x7ffdf681f424,86241193,0,0x0,8
tick,0x7ffdf681f424,86243113,0,0x0,8
tick,0x7ffdf681f424,86245130,0,0x0,8
tick,0x7ffdf681f424,86247102,0,0x0,8
tick,0x7ffdf681f424,86249094,0,0x0,8
tick,0x7ffdf681f424,86251096,0,0x0,8
tick,0x7ffdf681f424,86253160,0,0x0,8
tick,0x7ffdf681f424,86255118,0,0x0,8
tick,0x7ffdf681f424,86257054,0,0x0,8
tick,0x7ffdf681f424,86259074,0,0x0,8
tick,0x7ffdf681f424,86261071,0,0x0,8
tick,0x7ffdf681f424,86263062,0,0x0,8
tick,0x7ffdf681f424,86265058,0,0x0,8
tick,0x7ffdf681f424,86267049,0,0x0,8
tick,0x7ffdf681f424,86269049,0,0x0,8
tick,0x7ffdf681f424,86271038,0,0x0,8
tick,0x7ffdf681f424,86273045,0,0x0,8
tick,0x7ffdf681f424,86275066,0,0x0,8
tick,0x7ffdf681f424,86276913,0,0x0,8
tick,0x7ffdf681f424,86279016,0,0x0,8
tick,0x7ffdf681f424,86281008,0,0x0,8
tick,0x7ffdf681f424,86283003,0,0x0,8
tick,0x7ffdf681f424,86285004,0,0x0,8
tick,0x7ffdf681f424,86286993,0,0x0,8
tick,0x7ffdf681f424,86288992,0,0x0,8
tick,0x7ffdf681f424,86290989,0,0x0,8
tick,0x7ffdf681f424,86293000,0,0x0,8
tick,0x7ffdf681f424,86294974,0,0x0,8
tick,0x7ffdf681f424,86296953,0,0x0,8
tick,0x7ffdf681f424,86298971,0,0x0,8
tick,0x7ffdf681f424,86300847,0,0x0,8
tick,0x7ffdf681f424,86302953,0,0x0,8
tick,0x7ffdf681f424,86304945,0,0x0,8
tick,0x7ffdf681f424,86306948,0,0x0,8
tick,0x7ffdf681f424,86308942,0,0x0,8
tick,0x7ffdf681f424,86310907,0,0x0,8
tick,0x7ffdf681f424,86312835,0,0x0,8
tick,0x7ffdf681f424,86314932,0,0x0,8
tick,0x7ffdf681f424,86316920,0,0x0,8
tick,0x7ffdf681f424,86318836,0,0x0,8
tick,0x7ffdf681f424,86320909,0,0x0,8
tick,0x7ffdf681f424,86322899,0,0x0,8
tick,0x7ffdf681f424,86324891,0,0x0,8
tick,0x7ffdf681f424,86326894,0,0x0,8
tick,0x7ffdf681f424,86328897,0,0x0,8
tick,0x7ffdf681f424,86330878,0,0x0,8
tick,0x7ffdf681f424,86332870,0,0x0,8
tick,0x7ffdf681f424,86334871,0,0x0,8
tick,0x7ffdf681f424,86336859,0,0x0,8
tick,0x7ffdf681f424,86338864,0,0x0,8
tick,0x7ffdf681f424,86340911,0,0x0,8
tick,0x7ffdf681f424,86342891,0,0x0,8
tick,0x7ffdf681f424,86344838,0,0x0,8
tick,0x7ffdf681f424,86346832,0,0x0,8
tick,0x7ffdf681f424,86348827,0,0x0,8
tick,0x7ffdf681f424,86350848,0,0x0,8
tick,0x7ffdf681f424,86352824,0,0x0,8
tick,0x7ffdf681f424,86354813,0,0x0,8
tick,0x7ffdf681f424,86356806,0,0x0,8
tick,0x7ffdf681f424,86358697,0,0x0,8
tick,0x7ffdf681f424,86360802,0,0x0,8
tick,0x7ffdf681f424,86362850,0,0x0,8
tick,0x7ffdf681f424,86364818,0,0x0,8
tick,0x7ffdf681f424,86366781,0,0x0,8
tick,0x7ffdf681f424,86368665,0,0x0,8
tick,0x7ffdf681f424,86370771,0,0x0,8
tick,0x7ffdf681f424,86372771,0,0x0,8
tick,0x7ffdf681f424,86374755,0,0x0,8
tick,0x7ffdf681f424,86376755,0,0x0,8
tick,0x7ffdf681f424,86378747,0,0x0,8
tick,0x7ffdf681f424,86380696,0,0x0,8
tick,0x7ffdf681f424,86382770,0,0x0,8
tick,0x7ffdf681f424,86384718,0,0x0,8
tick,0x7ffdf681f424,86386735,0,0x0,8
tick,0x7ffdf681f424,86388627,0,0x0,8
tick,0x7ffdf681f424,86390725,0,0x0,8
tick,0x7ffdf681f424,86392711,0,0x0,8
tick,0x7ffdf681f424,86394617,0,0x0,8
tick,0x7ffdf681f424,86396699,0,0x0,8
tick,0x7ffdf681f424,86398696,0,0x0,8
tick,0x7ffdf681f424,86400716,0,0x0,8
tick,0x7ffdf681f424,86402686,0,0x0,8
tick,0x7ffdf681f424,86404685,0,0x0,8
tick,0x7ffdf681f424,86406782,0,0x0,8
tick,0x7ffdf681f424,86408701,0,0x0,8
tick,0x7ffdf681f424,86410584,0,0x0,8
tick,0x7ffdf681f424,86412657,0,0x0,8
tick,0x7ffdf681f424,86414657,0,0x0,8
tick,0x7ffdf681f424,86416652,0,0x0,8
tick,0x7ffdf681f424,86418621,0,0x0,8
tick,0x7ffdf681f424,86420635,0,0x0,8
tick,0x7ffdf681f424,86422630,0,0x0,8
tick,0x7ffdf681f424,86424624,0,0x0,8
tick,0x7ffdf681f424,86426628,0,0x0,8
tick,0x7ffdf681f424,86428620,0,0x0,8
tick,0x7ffdf681f424,86430621,0,0x0,8
tick,0x7ffdf681f424,86432603,0,0x0,8
tick,0x7ffdf681f424,86434600,0,0x0,8
tick,0x7ffdf681f424,86436592,0,0x0,8
tick,0x7ffdf681f424,86438564,0,0x0,8
tick,0x7ffdf681f424,86440583,0,0x0,8
tick,0x7ffdf681f424,86442577,0,0x0,8
tick,0x7ffdf681f424,86444463,0,0x0,8
tick,0x7ffdf681f424,86446586,0,0x0,8
tick,0x7ffdf681f424,86448568,0,0x0,8
tick,0x7ffdf681f424,86450559,0,0x0,8
tick,0x7ffdf681f424,86452446,0,0x0,8
tick,0x7ffdf681f424,86454544,0,0x0,8
tick,0x7ffdf681f424,86456545,0,0x0,8
tick,0x7ffdf681f424,86458537,0,0x0,8
tick,0x7ffdf681f424,86460453,0,0x0,8
tick,0x7ffdf681f424,86462558,0,0x0,8
tick,0x7ffdf681f424,86464408,0,0x0,8
tick,0x7ffdf681f424,86466454,0,0x0,8
tick,0x7ffdf681f424,86468522,0,0x0,8
tick,0x7ffdf681f424,86470511,0,0x0,8
tick,0x7ffdf681f424,86472490,0,0x0,8
tick,0x7ffdf681f424,86474524,0,0x0,8
tick,0x7ffdf681f424,86476486,0,0x0,8
tick,0x7ffdf681f424,86478481,0,0x0,8
tick,0x7ffdf681f424,86480475,0,0x0,8
tick,0x7ffdf681f424,86482529,0,0x0,8
tick,0x7ffdf681f424,86484459,0,0x0,8
tick,0x7ffdf681f424,86486460,0,0x0,8
tick,0x7ffdf681f424,86488454,0,0x0,8
tick,0x7ffdf681f424,86490451,0,0x0,8
tick,0x7ffdf681f424,86492454,0,0x0,8
tick,0x7ffdf681f424,86494484,0,0x0,8
tick,0x7ffdf681f424,86496465,0,0x0,8
tick,0x7ffdf681f424,86498429,0,0x0,8
tick,0x7ffdf681f424,86500422,0,0x0,8
tick,0x7ffdf681f424,86502425,0,0x0,8
tick,0x7ffdf681f424,86504420,0,0x0,8
tick,0x7ffdf681f424,86506405,0,0x0,8
tick,0x7ffdf681f424,86508402,0,0x0,8
tick,0x7ffdf681f424,86510287,0,0x0,8
tick,0x7ffdf681f424,86512282,0,0x0,8
tick,0x7ffdf681f424,86514391,0,0x0,8
tick,0x7ffdf681f424,86516378,0,0x0,8
tick,0x7ffdf681f424,86518384,0,0x0,8
tick,0x7ffdf681f424,86520369,0,0x0,8
tick,0x7ffdf681f424,86522366,0,0x0,8
tick,0x7ffdf681f424,86524276,0,0x0,8
tick,0x7ffdf681f424,86526359,0,0x0,8
tick,0x7ffdf681f424,86528348,0,0x0,8
tick,0x7ffdf681f424,86530344,0,0x0,8
tick,0x7ffdf681f424,86532337,0,0x0,8
tick,0x7ffdf681f424,86534334,0,0x0,8
tick,0x7ffdf681f424,86536332,0,0x0,8
tick,0x7ffdf681f424,86538398,0,0x0,8
tick,0x7ffdf681f424,86540349,0,0x0,8
tick,0x7ffdf681f424,86542206,0,0x0,8
tick,0x7ffdf681f424,86544305,0,0x0,8
tick,0x7ffdf681f424,86546301,0,0x0,8
tick,0x7ffdf681f424,86548306,0,0x0,8
tick,0x7ffdf681f424,86550289,0,0x0,8
tick,0x7ffdf681f424,86552194,0,0x0,8
tick,0x7ffdf681f424,86554288,0,0x0,8
tick,0x7ffdf681f424,86556272,0,0x0,8
tick,0x7ffdf681f424,86558276,0,0x0,8
tick,0x7ffdf681f424,86560265,0,0x0,8
tick,0x7ffdf681f424,86562283,0,0x0,8
tick,0x7ffdf681f424,86564300,0,0x0,8
tick,0x7ffdf681f424,86566248,0,0x0,8
tick,0x7ffdf681f424,86568240,0,0x0,8
tick,0x7ffdf681f424,86570244,0,0x0,8
tick,0x7ffdf681f424,86572230,0,0x0,8
tick,0x7ffdf681f424,86574224,0,0x0,8
tick,0x7ffdf681f424,86576219,0,0x0,8
tick,0x7ffdf681f424,86578216,0,0x0,8
tick,0x7ffdf681f424,86580222,0,0x0,8
tick,0x7ffdf681f424,86582091,0,0x0,8
tick,0x7ffdf681f424,86584206,0,0x0,8
tick,0x7ffdf681f424,86586086,0,0x0,8
tick,0x7ffdf681f424,86588187,0,0x0,8
tick,0x7ffdf681f424,86590184,0,0x0,8
tick,0x7ffdf681f424,86592188,0,0x0,8
tick,0x7ffdf681f424,86594063,0,0x0,8
tick,0x7ffdf681f424,86596165,0,0x0,8
tick,0x7ffdf681f424,86598164,0,0x0,8
tick,0x7ffdf681f424,86600176,0,0x0,8
tick,0x7ffdf681f424,86602055,0,0x0,8
tick,0x7ffdf681f424,86604141,0,0x0,8
tick,0x7ffdf681f424,86606145,0,0x0,8
tick,0x7ffdf681f424,86608140,0,0x0,8
tick,0x7ffdf681f424,86610140,0,0x0,8
tick,0x7ffdf681f424,86612129,0,0x0,8
tick,0x7ffdf681f424,86614124,0,0x0,8
tick,0x7ffdf681f424,86616120,0,0x0,8
tick,0x7ffdf681f424,86618010,0,0x0,8
tick,0x7ffdf681f424,86619993,0,0x0,8
tick,0x7ffdf681f424,86622112,0,0x0,8
tick,0x7ffdf681f424,86624098,0,0x0,8
tick,0x7ffdf681f424,86626130,0,0x0,8
tick,0x7ffdf681f424,86627995,0,0x0,8
tick,0x7ffdf681f424,86630078,0,0x0,8
tick,0x7ffdf681f424,86632075,0,0x0,8
tick,0x7ffdf681f424,86634067,0,0x0,8
tick,0x7ffdf681f424,86636064,0,0x0,8
tick,0x7ffdf681f424,86638057,0,0x0,8
tick,0x7ffdf681f424,86640051,0,0x0,8
tick,0x7ffdf681f424,86642046,0,0x0,8
tick,0x7ffdf681f424,86643952,0,0x0,8
tick,0x7ffdf681f424,86646079,0,0x0,8
tick,0x7ffdf681f424,86648034,0,0x0,8
tick,0x7ffdf681f424,86650034,0,0x0,8
tick,0x7ffdf681f424,86651956,0,0x0,8
tick,0x7ffdf681f424,86654013,0,0x0,8
tick,0x7ffdf681f424,86656003,0,0x0,8
tick,0x7ffdf681f424,86658011,0,0x0,8
tick,0x7ffdf681f424,86660004,0,0x0,8
tick,0x7ffdf681f424,86661991,0,0x0,8
tick,0x7ffdf681f424,86663995,0,0x0,8
tick,0x7ffdf681f424,86665979,0,0x0,8
tick,0x7ffdf681f424,86667989,0,0x0,8
tick,0x7ffdf681f424,86669976,0,0x0,8
tick,0x7ffdf681f424,86671971,0,0x0,8
tick,0x7ffdf681f424,86673960,0,0x0,8
tick,0x7ffdf681f424,86675953,0,0x0,8
tick,0x7ffdf681f424,86677947,0,0x0,8
tick,0x7ffdf681f424,86679958,0,0x0,8
tick,0x7ffdf681f424,86681939,0,0x0,8
tick,0x7ffdf681f424,86683932,0,0x0,8
tick,0x7ffdf681f424,86685923,0,0x0,8
tick,0x7ffdf681f424,86687918,0,0x0,8
tick,0x7ffdf681f424,86689925,0,0x0,8
tick,0x7ffdf681f424,86691969,0,0x0,8
tick,0x7ffdf681f424,86693819,0,0x0,8
tick,0x7ffdf681f424,86695842,0,0x0,8
tick,0x7ffdf681f424,86697898,0,0x0,8
tick,0x7ffdf681f424,86699889,0,0x0,8
tick,0x7ffdf681f424,86701954,0,0x0,8
tick,0x7ffdf681f424,86703877,0,0x0,8
tick,0x7ffdf681f424,86705879,0,0x0,8
tick,0x7ffdf681f424,86707867,0,0x0,8
tick,0x7ffdf681f424,86709862,0,0x0,8
tick,0x7ffdf681f424,86711872,0,0x0,8
tick,0x7ffdf681f424,86713881,0,0x0,8
tick,0x7ffdf681f424,86715878,0,0x0,8
tick,0x7ffdf681f424,86717842,0,0x0,8
tick,0x7ffdf681f424,86719842,0,0x0,8
tick,0x7ffdf681f424,86721832,0,0x0,8
tick,0x7ffdf681f424,86723830,0,0x0,8
tick,0x7ffdf681f424,86725836,0,0x0,8
tick,0x7ffdf681f424,86727865,0,0x0,8
tick,0x7ffdf681f424,86729808,0,0x0,8
tick,0x7ffdf681f424,86731803,0,0x0,8
tick,0x7ffdf681f424,86733817,0,0x0,8
tick,0x7ffdf681f424,86735799,0,0x0,8
tick,0x7ffdf681f424,86737796,0,0x0,8
tick,0x7ffdf681f424,86739781,0,0x0,8
tick,0x7ffdf681f424,86741661,0,0x0,8
tick,0x7ffdf681f424,86743722,0,0x0,8
tick,0x7ffdf681f424,86745765,0,0x0,8
tick,0x7ffdf681f424,86747761,0,0x0,8
tick,0x7ffdf681f424,86749761,0,0x0,8
tick,0x7ffdf681f424,86751749,0,0x0,8
tick,0x7ffdf681f424,86753760,0,0x0,8
tick,0x7ffdf681f424,86755639,0,0x0,8
tick,0x7ffdf681f424,86757836,0,0x0,8
tick,0x7ffdf681f424,86759769,0,0x0,8
tick,0x7ffdf681f424,86761724,0,0x0,8
tick,0x7ffdf681f424,86763724,0,0x0,8
tick,0x7ffdf681f424,86765712,0,0x0,8
tick,0x7ffdf681f424,86767707,0,0x0,8
tick,0x7ffdf681f424,86769704,0,0x0,8
tick,0x7ffdf681f424,86771591,0,0x0,8
tick,0x7ffdf681f424,86773587,0,0x0,8
tick,0x7ffdf681f424,86775694,0,0x0,8
tick,0x7ffdf681f424,86777658,0,0x0,8
tick,0x7ffdf681f424,86779737,0,0x0,8
tick,0x7ffdf681f424,86781695,0,0x0,8
tick,0x7ffdf681f424,86783664,0,0x0,8
tick,0x7ffdf681f424,86785609,0,0x0,8
tick,0x7ffdf681f424,86787653,0,0x0,8
tick,0x7ffdf681f424,86789651,0,0x0,8
tick,0x7ffdf681f424,86791642,0,0x0,8
tick,0x7ffdf681f424,86793642,0,0x0,8
tick,0x7ffdf681f424,86795633,0,0x0,8
tick,0x7ffdf681f424,86797629,0,0x0,8
tick,0x7ffdf681f424,86799628,0,0x0,8
tick,0x7ffdf681f424,86801622,0,0x0,8
tick,0x7ffdf681f424,86803622,0,0x0,8
tick,0x7ffdf681f424,86805602,0,0x0,8
tick,0x7ffdf681f424,86807612,0,0x0,8
tick,0x7ffdf681f424,86809641,0,0x0,8
tick,0x7ffdf681f424,86811590,0,0x0,8
tick,0x7ffdf681f424,86813587,0,0x0,8
tick,0x7ffdf681f424,86815580,0,0x0,8
tick,0x7ffdf681f424,86817576,0,0x0,8
tick,0x7ffdf681f424,86819460,0,0x0,8
tick,0x7ffdf681f424,86821583,0,0x0,8
tick,0x7ffdf681f424,86823601,0,0x0,8
tick,0x7ffdf681f424,86825586,0,0x0,8
tick,0x7ffdf681f424,86827548,0,0x0,8
tick,0x7ffdf681f424,86829551,0,0x0,8
tick,0x7ffdf681f424,86831531,0,0x0,8
tick,0x7ffdf681f424,86833533,0,0x0,8
tick,0x7ffdf681f424,86835421,0,0x0,8
tick,0x7ffdf681f424,86837521,0,0x0,8
tick,0x7ffdf681f424,86839515,0,0x0,8
tick,0x7ffdf681f424,86841521,0,0x0,8
tick,0x7ffdf681f424,86843513,0,0x0,8
tick,0x7ffdf681f424,86845505,0,0x0,8
tick,0x7ffdf681f424,86847499,0,0x0,8
tick,0x7ffdf681f424,86849376,0,0x0,8
tick,0x7ffdf681f424,86851489,0,0x0,8
tick,0x7ffdf681f424,86853480,0,0x0,8
tick,0x7ffdf681f424,86855473,0,0x0,8
tick,0x7ffdf681f424,86857472,0,0x0,8
tick,0x7ffdf681f424,86859466,0,0x0,8
tick,0x7ffdf681f424,86861347,0,0x0,8
tick,0x7ffdf681f424,86863451,0,0x0,8
tick,0x7ffdf681f424,86865454,0,0x0,8
tick,0x7ffdf681f424,86867326,0,0x0,8
tick,0x7ffdf681f424,86869335,0,0x0,8
tick,0x7ffdf681f424,86871429,0,0x0,8
tick,0x7ffdf681f424,86873427,0,0x0,8
tick,0x7ffdf681f424,86875419,0,0x0,8
tick,0x7ffdf681f424,86877354,0,0x0,8
tick,0x7ffdf681f424,86879405,0,0x0,8
tick,0x7ffdf681f424,86881406,0,0x0,8
tick,0x7ffdf681f424,86883401,0,0x0,8
tick,0x7ffdf681f424,86885344,0,0x0,8
tick,0x7ffdf681f424,86887394,0,0x0,8
tick,0x7ffdf681f424,86889443,0,0x0,8
tick,0x7ffdf681f424,86891430,0,0x0,8
tick,0x7ffdf681f424,86893371,0,0x0,8
tick,0x7ffdf681f424,86895373,0,0x0,8
tick,0x7ffdf681f424,86897357,0,0x0,8
tick,0x7ffdf681f424,86899361,0,0x0,8
tick,0x7ffdf681f424,86901354,0,0x0,8
tick,0x7ffdf681f424,86903345,0,0x0,8
tick,0x7ffdf681f424,86905347,0,0x0,8
tick,0x7ffdf681f424,86907334,0,0x0,8
tick,0x7ffdf681f424,86909345,0,0x0,8
tick,0x7ffdf681f424,86911403,0,0x0,8
tick,0x7ffdf681f424,86913375,0,0x0,8
tick,0x7ffdf681f424,86915203,0,0x0,8
tick,0x7ffdf681f424,86917309,0,0x0,8
tick,0x7ffdf681f424,86919314,0,0x0,8
tick,0x7ffdf681f424,86921308,0,0x0,8
tick,0x7ffdf681f424,86923308,0,0x0,8
tick,0x7ffdf681f424,86925176,0,0x0,8
tick,0x7ffdf681f424,86927171,0,0x0,8
tick,0x7ffdf681f424,86929280,0,0x0,8
tick,0x7ffdf681f424,86931280,0,0x0,8
tick,0x7ffdf681f424,86933270,0,0x0,8
tick,0x7ffdf681f424,86935139,0,0x0,8
tick,0x7ffdf681f424,86937112,0,0x0,8
tick,0x7ffdf681f424,86939139,0,0x0,8
tick,0x7ffdf681f424,86941246,0,0x0,8
tick,0x7ffdf681f424,86943246,0,0x0,8
tick,0x7ffdf681f424,86945230,0,0x0,8
tick,0x7ffdf681f424,86947227,0,0x0,8
tick,0x7ffdf681f424,86949225,0,0x0,8
tick,0x7ffdf681f424,86951216,0,0x0,8
tick,0x7ffdf681f424,86953220,0,0x0,8
tick,0x7ffdf681f424,86955276,0,0x0,8
tick,0x7ffdf681f424,86957238,0,0x0,8
tick,0x7ffdf681f424,86959195,0,0x0,8
tick,0x7ffdf681f424,86961192,0,0x0,8
tick,0x7ffdf681f424,86963193,0,0x0,8
tick,0x7ffdf681f424,86965201,0,0x0,8
tick,0x7ffdf681f424,86967180,0,0x0,8
tick,0x7ffdf681f424,86969171,0,0x0,8
tick,0x7ffdf681f424,86971164,0,0x0,8
tick,0x7ffdf681f424,86973209,0,0x0,8
tick,0x7ffdf681f424,86975159,0,0x0,8
tick,0x7ffdf681f424,86977038,0,0x0,8
tick,0x7ffdf681f424,86979148,0,0x0,8
tick,0x7ffdf681f424,86981146,0,0x0,8
tick,0x7ffdf681f424,86983132,0,0x0,8
tick,0x7ffdf681f424,86985127,0,0x0,8
tick,0x7ffdf681f424,86987134,0,0x0,8
tick,0x7ffdf681f424,86989120,0,0x0,8
tick,0x7ffdf681f424,86991111,0,0x0,8
tick,0x7ffdf681f424,86993107,0,0x0,8
tick,0x7ffdf681f424,86995109,0,0x0,8
tick,0x7ffdf681f424,86997111,0,0x0,8
tick,0x7ffdf681f424,86999159,0,0x0,8
tick,0x7ffdf681f424,87001120,0,0x0,8
tick,0x7ffdf681f424,87003041,0,0x0,8
tick,0x7ffdf681f424,87005082,0,0x0,8
tick,0x7ffdf681f424,87007092,0,0x0,8
tick,0x7ffdf681f424,87009065,0,0x0,8
tick,0x7ffdf681f424,87010991,0,0x0,8
tick,0x7ffdf681f424,87013061,0,0x0,8
tick,0x7ffdf681f424,87015046,0,0x0,8
tick,0x7ffdf681f424,87017041,0,0x0,8
tick,0x7ffdf681f424,87018949,0,0x0,8
tick,0x7ffdf681f424,87021093,0,0x0,8
tick,0x7ffdf681f424,87023061,0,0x0,8
tick,0x7ffdf681f424,87025030,0,0x0,8
tick,0x7ffdf681f424,87027014,0,0x0,8
tick,0x7ffdf681f424,87029018,0,0x0,8
tick,0x7ffdf681f424,87031003,0,0x0,8
tick,0x7ffdf681f424,87033001,0,0x0,8
tick,0x7ffdf681f424,87034993,0,0x0,8
tick,0x7ffdf681f424,87036990,0,0x0,8
tick,0x7ffdf681f424,87038982,0,0x0,8
tick,0x7ffdf681f424,87040987,0,0x0,8
tick,0x7ffdf681f424,87042978,0,0x0,8
tick,0x7ffdf681f424,87044975,0,0x0,8
tick,0x7ffdf681f424,87046962,0,0x0,8
tick,0x7ffdf681f424,87048955,0,0x0,8
tick,0x7ffdf681f424,87051002,0,0x0,8
tick,0x7ffdf681f424,87052956,0,0x0,8
tick,0x7ffdf681f424,87054982,0,0x0,8
tick,0x7ffdf681f424,87056937,0,0x0,8
tick,0x7ffdf681f424,87058928,0,0x0,8
tick,0x7ffdf681f424,87060925,0,0x0,8
tick,0x7ffdf681f424,87062940,0,0x0,8
tick,0x7ffdf681f424,87064937,0,0x0,8
tick,0x7ffdf681f424,87066947,0,0x0,8
tick,0x7ffdf681f424,87068795,0,0x0,8
tick,0x7ffdf681f424,87070898,0,0x0,8
tick,0x7ffdf681f424,87072894,0,0x0,8
tick,0x7ffdf681f424,87074886,0,0x0,8
tick,0x7ffdf681f424,87076884,0,0x0,8
tick,0x7ffdf681f424,87078761,0,0x0,8
tick,0x7ffdf681f424,87080756,0,0x0,8
tick,0x7ffdf681f424,87082870,0,0x0,8
tick,0x7ffdf681f424,87084870,0,0x0,8
tick,0x7ffdf681f424,87086965,0,0x0,8
tick,0x7ffdf681f424,87088869,0,0x0,8
tick,0x7ffdf681f424,87090843,0,0x0,8
tick,0x7ffdf681f424,87092838,0,0x0,8
tick,0x7ffdf681f424,87094746,0,0x0,8
tick,0x7ffdf681f424,87096858,0,0x0,8
tick,0x7ffdf681f424,87098822,0,0x0,8
tick,0x7ffdf681f424,87100818,0,0x0,8
tick,0x7ffdf681f424,87102817,0,0x0,8
tick,0x7ffdf681f424,87104814,0,0x0,8
tick,0x7ffdf681f424,87106812,0,0x0,8
tick,0x7ffdf681f424,87108860,0,0x0,8
tick,0x7ffdf681f424,87110755,0,0x0,8
tick,0x7ffdf681f424,87112820,0,0x0,8
tick,0x7ffdf681f424,87114780,0,0x0,8
tick,0x7ffdf681f424,87116774,0,0x0,8
tick,0x7ffdf681f424,87118691,0,0x0,8
tick,0x7ffdf681f424,87120760,0,0x0,8
tick,0x7ffdf681f424,87122766,0,0x0,8
tick,0x7ffdf681f424,87124753,0,0x0,8
tick,0x7ffdf681f424,87126646,0,0x0,8
tick,0x7ffdf681f424,87128756,0,0x0,8
tick,0x7ffdf681f424,87130723,0,0x0,8
tick,0x7ffdf681f424,87132739,0,0x0,8
tick,0x7ffdf681f424,87134726,0,0x0,8
tick,0x7ffdf681f424,87136776,0,0x0,8
tick,0x7ffdf681f424,87138715,0,0x0,8
tick,0x7ffdf681f424,87140712,0,0x0,8
tick,0x7ffdf681f424,87142712,0,0x0,8
tick,0x7ffdf681f424,87144705,0,0x0,8
tick,0x7ffdf681f424,87146694,0,0x0,8
tick,0x7ffdf681f424,87148688,0,0x0,8
tick,0x7ffdf681f424,87150698,0,0x0,8
tick,0x7ffdf681f424,87152710,0,0x0,8
tick,0x7ffdf681f424,87154705,0,0x0,8
tick,0x7ffdf681f424,87156575,0,0x0,8
tick,0x7ffdf681f424,87158672,0,0x0,8
tick,0x7ffdf681f424,87160553,0,0x0,8
tick,0x7ffdf681f424,87162651,0,0x0,8
tick,0x7ffdf681f424,87164662,0,0x0,8
tick,0x7ffdf681f424,87166642,0,0x0,8
tick,0x7ffdf681f424,87168643,0,0x0,8
tick,0x7ffdf681f424,87170631,0,0x0,8
tick,0x7ffdf681f424,87172642,0,0x0,8
tick,0x7ffdf681f424,87174615,0,0x0,8
tick,0x7ffdf681f424,87176635,0,0x0,8
tick,0x7ffdf681f424,87178609,0,0x0,8
tick,0x7ffdf681f424,87180610,0,0x0,8
tick,0x7ffdf681f424,87182620,0,0x0,8
tick,0x7ffdf681f424,87184595,0,0x0,8
tick,0x7ffdf681f424,87186582,0,0x0,8
tick,0x7ffdf681f424,87188581,0,0x0,8
tick,0x7ffdf681f424,87190583,0,0x0,8
tick,0x7ffdf681f424,87192574,0,0x0,8
tick,0x7ffdf681f424,87194577,0,0x0,8
tick,0x7ffdf681f424,87196606,0,0x0,8
tick,0x7ffdf681f424,87198577,0,0x0,8
tick,0x7ffdf681f424,87200552,0,0x0,8
tick,0x7ffdf681f424,87202550,0,0x0,8
tick,0x7ffdf681f424,87204542,0,0x0,8
tick,0x7ffdf681f424,87206534,0,0x0,8
tick,0x7ffdf681f424,87208528,0,0x0,8
tick,0x7ffdf681f424,87210412,0,0x0,8
tick,0x7ffdf681f424,87212518,0,0x0,8
tick,0x7ffdf681f424,87214519,0,0x0,8
tick,0x7ffdf681f424,87216519,0,0x0,8
tick,0x7ffdf681f424,87218547,0,0x0,8
tick,0x7ffdf681f424,87220505,0,0x0,8
tick,0x7ffdf681f424,87222503,0,0x0,8
tick,0x7ffdf681f424,87224489,0,0x0,8
tick,0x7ffdf681f424,87226482,0,0x0,8
tick,0x7ffdf681f424,87228483,0,0x0,8
tick,0x7ffdf681f424,87230477,0,0x0,8
tick,0x7ffdf681f424,87232359,0,0x0,8
tick,0x7ffdf681f424,87234350,0,0x0,8
tick,0x7ffdf681f424,87236464,0,0x0,8
tick,0x7ffdf681f424,87238460,0,0x0,8
tick,0x7ffdf681f424,87240543,0,0x0,8
tick,0x7ffdf681f424,87242471,0,0x0,8
tick,0x7ffdf681f424,87244406,0,0x0,8
tick,0x7ffdf681f424,87246429,0,0x0,8
tick,0x7ffdf681f424,87248424,0,0x0,8
tick,0x7ffdf681f424,87250417,0,0x0,8
tick,0x7ffdf681f424,87252356,0,0x0,8
tick,0x7ffdf681f424,87254406,0,0x0,8
tick,0x7ffdf681f424,87256403,0,0x0,8
tick,0x7ffdf681f424,87258395,0,0x0,8
tick,0x7ffdf681f424,87260378,0,0x0,8
tick,0x7ffdf681f424,87262447,0,0x0,8
tick,0x7ffdf681f424,87264421,0,0x0,8
tick,0x7ffdf681f424,87266374,0,0x0,8
tick,0x7ffdf681f424,87268371,0,0x0,8
tick,0x7ffdf681f424,87270363,0,0x0,8
tick,0x7ffdf681f424,87272364,0,0x0,8
tick,0x7ffdf681f424,87274353,0,0x0,8
tick,0x7ffdf681f424,87276348,0,0x0,8
tick,0x7ffdf681f424,87278341,0,0x0,8
tick,0x7ffdf681f424,87280338,0,0x0,8
tick,0x7ffdf681f424,87282345,0,0x0,8
tick,0x7ffdf681f424,87284316,0,0x0,8
tick,0x7ffdf681f424,87286329,0,0x0,8
tick,0x7ffdf681f424,87288318,0,0x0,8
tick,0x7ffdf681f424,87290310,0,0x0,8
tick,0x7ffdf681f424,87292315,0,0x0,8
tick,0x7ffdf681f424,87294313,0,0x0,8
tick,0x7ffdf681f424,87296322,0,0x0,8
tick,0x7ffdf681f424,87298288,0,0x0,8
tick,0x7ffdf681f424,87300331,0,0x0,8
tick,0x7ffdf681f424,87302173,0,0x0,8
tick,0x7ffdf681f424,87304284,0,0x0,8
tick,0x7ffdf681f424,87306280,0,0x0,8
tick,0x7ffdf681f424,87308270,0,0x0,8
tick,0x7ffdf681f424,87310225,0,0x0,8
tick,0x7ffdf681f424,87312258,0,0x0,8
tick,0x7ffdf681f424,87314246,0,0x0,8
tick,0x7ffdf681f424,87316242,0,0x0,8
tick,0x7ffdf681f424,87318244,0,0x0,8
tick,0x7ffdf681f424,87320233,0,0x0,8
tick,0x7ffdf681f424,87322225,0,0x0,8
tick,0x7ffdf681f424,87324222,0,0x0,8
tick,0x7ffdf681f424,87326225,0,0x0,8
tick,0x7ffdf681f424,87328254,0,0x0,8
tick,0x7ffdf681f424,87330250,0,0x0,8
tick,0x7ffdf681f424,87332199,0,0x0,8
tick,0x7ffdf681f424,87334193,0,0x0,8
tick,0x7ffdf681f424,87336195,0,0x0,8
tick,0x7ffdf681f424,87338188,0,0x0,8
tick,0x7ffdf681f424,87340176,0,0x0,8
tick,0x7ffdf681f424,87342171,0,0x0,8
tick,0x7ffdf681f424,87344118,0,0x0,8
tick,0x7ffdf681f424,87346160,0,0x0,8
tick,0x7ffdf681f424,87348166,0,0x0,8
tick,0x7ffdf681f424,87350209,0,0x0,8
tick,0x7ffdf681f424,87352073,0,0x0,8
tick,0x7ffdf681f424,87354146,0,0x0,8
tick,0x7ffdf681f424,87356136,0,0x0,8
tick,0x7ffdf681f424,87358147,0,0x0,8
tick,0x7ffdf681f424,87360133,0,0x0,8
tick,0x7ffdf681f424,87362119,0,0x0,8
tick,0x7ffdf681f424,87364114,0,0x0,8
tick,0x7ffdf681f424,87366107,0,0x0,8
tick,0x7ffdf681f424,87368102,0,0x0,8
tick,0x7ffdf681f424,87370109,0,0x0,8
tick,0x7ffdf681f424,87372150,0,0x0,8
tick,0x7ffdf681f424,87374109,0,0x0,8
tick,0x7ffdf681f424,87376084,0,0x0,8
tick,0x7ffdf681f424,87378075,0,0x0,8
tick,0x7ffdf681f424,87380070,0,0x0,8
tick,0x7ffdf681f424,87382116,0,0x0,8
tick,0x7ffdf681f424,87384057,0,0x0,8
tick,0x7ffdf681f424,87386043,0,0x0,8
tick,0x7ffdf681f424,87387943,0,0x0,8
tick,0x7ffdf681f424,87390049,0,0x0,8
tick,0x7ffdf681f424,87392036,0,0x0,8
tick,0x7ffdf681f424,87393988,0,0x0,8
tick,0x7ffdf681f424,87396063,0,0x0,8
tick,0x7ffdf681f424,87398021,0,0x0,8
tick,0x7ffdf681f424,87400016,0,0x0,8
tick,0x7ffdf681f424,87402017,0,0x0,8
tick,0x7ffdf681f424,87404006,0,0x0,8
tick,0x7ffdf681f424,87405995,0,0x0,8
tick,0x7ffdf681f424,87407997,0,0x0,8
tick,0x7ffdf681f424,87409989,0,0x0,8
tick,0x7ffdf681f424,87411985,0,0x0,8
tick,0x7ffdf681f424,87413990,0,0x0,8
tick,0x7ffdf681f424,87415998,0,0x0,8
tick,0x7ffdf681f424,87417998,0,0x0,8
tick,0x7ffdf681f424,87420002,0,0x0,8
tick,0x7ffdf681f424,87421958,0,0x0,8
tick,0x7ffdf681f424,87423955,0,0x0,8
tick,0x7ffdf681f424,87425947,0,0x0,8
tick,0x7ffdf681f424,87427944,0,0x0,8
tick,0x7ffdf681f424,87429937,0,0x0,8
tick,0x7ffdf681f424,87431937,0,0x0,8
tick,0x7ffdf681f424,87433812,0,0x0,8
tick,0x7ffdf681f424,87435934,0,0x0,8
tick,0x7ffdf681f424,87437911,0,0x0,8
tick,0x7ffdf681f424,87439932,0,0x0,8
tick,0x7ffdf681f424,87441826,0,0x0,8
tick,0x7ffdf681f424,87443795,0,0x0,8
tick,0x7ffdf681f424,87445894,0,0x0,8
tick,0x7ffdf681f424,87447891,0,0x0,8
tick,0x7ffdf681f424,87449883,0,0x0,8
tick,0x7ffdf681f424,87451881,0,0x0,8
tick,0x7ffdf681f424,87453922,0,0x0,8
tick,0x7ffdf681f424,87455856,0,0x0,8
tick,0x7ffdf681f424,87457874,0,0x0,8
tick,0x7ffdf681f424,87459942,0,0x0,8
tick,0x7ffdf681f424,87461883,0,0x0,8
tick,0x7ffdf681f424,87463818,0,0x0,8
tick,0x7ffdf681f424,87465841,0,0x0,8
tick,0x7ffdf681f424,87467839,0,0x0,8
tick,0x7ffdf681f424,87469721,0,0x0,8
tick,0x7ffdf681f424,87471826,0,0x0,8
tick,0x7ffdf681f424,87473820,0,0x0,8
tick,0x7ffdf681f424,87475818,0,0x0,8
tick,0x7ffdf681f424,87477812,0,0x0,8
tick,0x7ffdf681f424,87479817,0,0x0,8
tick,0x7ffdf681f424,87481838,0,0x0,8
tick,0x7ffdf681f424,87483828,0,0x0,8
tick,0x7ffdf681f424,87485682,0,0x0,8
tick,0x7ffdf681f424,87487791,0,0x0,8
tick,0x7ffdf681f424,87489779,0,0x0,8
tick,0x7ffdf681f424,87491773,0,0x0,8
tick,0x7ffdf681f424,87493741,0,0x0,8
tick,0x7ffdf681f424,87495755,0,0x0,8
tick,0x7ffdf681f424,87497755,0,0x0,8
tick,0x7ffdf681f424,87499750,0,0x0,8
tick,0x7ffdf681f424,87501749,0,0x0,8
tick,0x7ffdf681f424,87503726,0,0x0,8
tick,0x7ffdf681f424,87505742,0,0x0,8
tick,0x7ffdf681f424,87507723,0,0x0,8
tick,0x7ffdf681f424,87509723,0,0x0,8
tick,0x7ffdf681f424,87511721,0,0x0,8
tick,0x7ffdf681f424,87513718,0,0x0,8
tick,0x7ffdf681f424,87515704,0,0x0,8
tick,0x7ffdf681f424,87517700,0,0x0,8
tick,0x7ffdf681f424,87519704,0,0x0,8
tick,0x7ffdf681f424,87521691,0,0x0,8
tick,0x7ffdf681f424,87523762,0,0x0,8
tick,0x7ffdf681f424,87525690,0,0x0,8
tick,0x7ffdf681f424,87527567,0,0x0,8
tick,0x7ffdf681f424,87529646,0,0x0,8
tick,0x7ffdf681f424,87531665,0,0x0,8
tick,0x7ffdf681f424,87533660,0,0x0,8
tick,0x7ffdf681f424,87535539,0,0x0,8
tick,0x7ffdf681f424,87537650,0,0x0,8
tick,0x7ffdf681f424,87539536,0,0x0,8
tick,0x7ffdf681f424,87541526,0,0x0,8
tick,0x7ffdf681f424,87543640,0,0x0,8
tick,0x7ffdf681f424,87545671,0,0x0,8
tick,0x7ffdf681f424,87547630,0,0x0,8
tick,0x7ffdf681f424,87549618,0,0x0,8
tick,0x7ffdf681f424,87551614,0,0x0,8
tick,0x7ffdf681f424,87553607,0,0x0,8
tick,0x7ffdf681f424,87555597,0,0x0,8
tick,0x7ffdf681f424,87557595,0,0x0,8
tick,0x7ffdf681f424,87559601,0,0x0,8
tick,0x7ffdf681f424,87561593,0,0x0,8
tick,0x7ffdf681f424,87563585,0,0x0,8
tick,0x7ffdf681f424,87565574,0,0x0,8
tick,0x7ffdf681f424,87567579,0,0x0,8
tick,0x7ffdf681f424,87569595,0,0x0,8
tick,0x7ffdf681f424,87571594,0,0x0,8
tick,0x7ffdf681f424,87573553,0,0x0,8
tick,0x7ffdf681f424,87575550,0,0x0,8
tick,0x7ffdf681f424,87577509,0,0x0,8
tick,0x7ffdf681f424,87579540,0,0x0,8
tick,0x7ffdf681f424,87581531,0,0x0,8
tick,0x7ffdf681f424,87583528,0,0x0,8
tick,0x7ffdf681f424,87585423,0,0x0,8
tick,0x7ffdf681f424,87587518,0,0x0,8
tick,0x7ffdf681f424,87589524,0,0x0,8
tick,0x7ffdf681f424,87591566,0,0x0,8
tick,0x7ffdf681f424,87593531,0,0x0,8
tick,0x7ffdf681f424,87595504,0,0x0,8
tick,0x7ffdf681f424,87597489,0,0x0,8
tick,0x7ffdf681f424,87599485,0,0x0,8
tick,0x7ffdf681f424,87601477,0,0x0,8
tick,0x7ffdf681f424,87603485,0,0x0,8
tick,0x7ffdf681f424,87605467,0,0x0,8
tick,0x7ffdf681f424,87607465,0,0x0,8
tick,0x7ffdf681f424,87609459,0,0x0,8
tick,0x7ffdf681f424,87611450,0,0x0,8
tick,0x7ffdf681f424,87613507,0,0x0,8
tick,0x7ffdf681f424,87615356,0,0x0,8
tick,0x7ffdf681f424,87617332,0,0x0,8
tick,0x7ffdf681f424,87619432,0,0x0,8
tick,0x7ffdf681f424,87621427,0,0x0,8
tick,0x7ffdf681f424,87623419,0,0x0,8
tick,0x7ffdf681f424,87625440,0,0x0,8
tick,0x7ffdf681f424,87627331,0,0x0,8
tick,0x7ffdf681f424,87629403,0,0x0,8
tick,0x7ffdf681f424,87631399,0,0x0,8
tick,0x7ffdf681f424,87633405,0,0x0,8
tick,0x7ffdf681f424,87635388,0,0x0,8
tick,0x7ffdf681f424,87637404,0,0x0,8
tick,0x7ffdf681f424,87639379,0,0x0,8
tick,0x7ffdf681f424,87641371,0,0x0,8
tick,0x7ffdf681f424,87643368,0,0x0,8
tick,0x7ffdf681f424,87645362,0,0x0,8
tick,0x7ffdf681f424,87647355,0,0x0,8
tick,0x7ffdf681f424,87649350,0,0x0,8
tick,0x7ffdf681f424,87651346,0,0x0,8
tick,0x7ffdf681f424,87653339,0,0x0,8
tick,0x7ffdf681f424,87655376,0,0x0,8
tick,0x7ffdf681f424,87657402,0,0x0,8
tick,0x7ffdf681f424,87659348,0,0x0,8
tick,0x7ffdf681f424,87661318,0,0x0,8
tick,0x7ffdf681f424,87663315,0,0x0,8
tick,0x7ffdf681f424,87665319,0,0x0,8
tick,0x7ffdf681f424,87667301,0,0x0,8
tick,0x7ffdf681f424,87669291,0,0x0,8
tick,0x7ffdf681f424,87671294,0,0x0,8
tick,0x7ffdf681f424,87673286,0,0x0,8
tick,0x7ffdf681f424,87675286,0,0x0,8
tick,0x7ffdf681f424,87677188,0,0x0,8
tick,0x7ffdf681f424,87679276,0,0x0,8
tick,0x7ffdf681f424,87681271,0,0x0,8
tick,0x7ffdf681f424,87683261,0,0x0,8
tick,0x7ffdf681f424,87685262,0,0x0,8
tick,0x7ffdf681f424,87687248,0,0x0,8
tick,0x7ffdf681f424,87689243,0,0x0,8
tick,0x7ffdf681f424,87691239,0,0x0,8
tick,0x7ffdf681f424,87693134,0,0x0,8
tick,0x7ffdf681f424,87695119,0,0x0,8
tick,0x7ffdf681f424,87697231,0,0x0,8
tick,0x7ffdf681f424,87699230,0,0x0,8
tick,0x7ffdf681f424,87701203,0,0x0,8
tick,0x7ffdf681f424,87703120,0,0x0,8
tick,0x7ffdf681f424,87705195,0,0x0,8
tick,0x7ffdf681f424,87707198,0,0x0,8
tick,0x7ffdf681f424,87709237,0,0x0,8
tick,0x7ffdf681f424,87711187,0,0x0,8
tick,0x7ffdf681f424,87713179,0,0x0,8
tick,0x7ffdf681f424,87715184,0,0x0,8
tick,0x7ffdf681f424,87717171,0,0x0,8
tick,0x7ffdf681f424,87719055,0,0x0,8
tick,0x7ffdf681f424,87721175,0,0x0,8
tick,0x7ffdf681f424,87723159,0,0x0,8
tick,0x7ffdf681f424,87725153,0,0x0,8
tick,0x7ffdf681f424,87727117,0,0x0,8
tick,0x7ffdf681f424,87729137,0,0x0,8
tick,0x7ffdf681f424,87731131,0,0x0,8
tick,0x7ffdf681f424,87733127,0,0x0,8
tick,0x7ffdf681f424,87735122,0,0x0,8
tick,0x7ffdf681f424,87737115,0,0x0,8
tick,0x7ffdf681f424,87739112,0,0x0,8
tick,0x7ffdf681f424,87740985,0,0x0,8
tick,0x7ffdf681f424,87743113,0,0x0,8
tick,0x7ffdf681f424,87745157,0,0x0,8
tick,0x7ffdf681f424,87747129,0,0x0,8
tick,0x7ffdf681f424,87749080,0,0x0,8
tick,0x7ffdf681f424,87751078,0,0x0,8
tick,0x7ffdf681f424,87753073,0,0x0,8
tick,0x7ffdf681f424,87754963,0,0x0,8
tick,0x7ffdf681f424,87757065,0,0x0,8
tick,0x7ffdf681f424,87758943,0,0x0,8
tick,0x7ffdf681f424,87760946,0,0x0,8
tick,0x7ffdf681f424,87763059,0,0x0,8
tick,0x7ffdf681f424,87765056,0,0x0,8
tick,0x7ffdf681f424,87767081,0,0x0,8
tick,0x7ffdf681f424,87768941,0,0x0,8
tick,0x7ffdf681f424,87770913,0,0x0,8
tick,0x7ffdf681f424,87773028,0,0x0,8
tick,0x7ffdf681f424,87775016,0,0x0,8
tick,0x7ffdf681f424,87777016,0,0x0,8
tick,0x7ffdf681f424,87779006,0,0x0,8
tick,0x7ffdf681f424,87780998,0,0x0,8
tick,0x7ffdf681f424,87782992,0,0x0,8
tick,0x7ffdf681f424,87784987,0,0x0,8
tick,0x7ffdf681f424,87786993,0,0x0,8
tick,0x7ffdf681f424,87789026,0,0x0,8
tick,0x7ffdf681f424,87790933,0,0x0,8
tick,0x7ffdf681f424,87792966,0,0x0,8
tick,0x7ffdf681f424,87794961,0,0x0,8
tick,0x7ffdf681f424,87796955,0,0x0,8
tick,0x7ffdf681f424,87798953,0,0x0,8
tick,0x7ffdf681f424,87800939,0,0x0,8
tick,0x7ffdf681f424,87802818,0,0x0,8
tick,0x7ffdf681f424,87804931,0,0x0,8
tick,0x7ffdf681f424,87806931,0,0x0,8
tick,0x7ffdf681f424,87808935,0,0x0,8
tick,0x7ffdf681f424,87810846,0,0x0,8
tick,0x7ffdf681f424,87812927,0,0x0,8
tick,0x7ffdf681f424,87814907,0,0x0,8
tick,0x7ffdf681f424,87816902,0,0x0,8
tick,0x7ffdf681f424,87818803,0,0x0,8
tick,0x7ffdf681f424,87820891,0,0x0,8
tick,0x7ffdf681f424,87822882,0,0x0,8
tick,0x7ffdf681f424,87824766,0,0x0,8
tick,0x7ffdf681f424,87826877,0,0x0,8
tick,0x7ffdf681f424,87828871,0,0x0,8
tick,0x7ffdf681f424,87830882,0,0x0,8
tick,0x7ffdf681f424,87832870,0,0x0,8
tick,0x7ffdf681f424,87834862,0,0x0,8
tick,0x7ffdf681f424,87836848,0,0x0,8
tick,0x7ffdf681f424,87838845,0,0x0,8
tick,0x7ffdf681f424,87840838,0,0x0,8
tick,0x7ffdf681f424,87842840,0,0x0,8
tick,0x7ffdf681f424,87844834,0,0x0,8
tick,0x7ffdf681f424,87846713,0,0x0,8
tick,0x7ffdf681f424,87848703,0,0x0,8
tick,0x7ffdf681f424,87850829,0,0x0,8
tick,0x7ffdf681f424,87852753,0,0x0,8
tick,0x7ffdf681f424,87854808,0,0x0,8
tick,0x7ffdf681f424,87856825,0,0x0,8
tick,0x7ffdf681f424,87858790,0,0x0,8
tick,0x7ffdf681f424,87860678,0,0x0,8
tick,0x7ffdf681f424,87862788,0,0x0,8
tick,0x7ffdf681f424,87864774,0,0x0,8
tick,0x7ffdf681f424,87866771,0,0x0,8
tick,0x7ffdf681f424,87868769,0,0x0,8
tick,0x7ffdf681f424,87870760,0,0x0,8
tick,0x7ffdf681f424,87872794,0,0x0,8
tick,0x7ffdf681f424,87874751,0,0x0,8
tick,0x7ffdf681f424,87876781,0,0x0,8
tick,0x7ffdf681f424,87878770,0,0x0,8
tick,0x7ffdf681f424,87880731,0,0x0,8
tick,0x7ffdf681f424,87882616,0,0x0,8
tick,0x7ffdf681f424,87884720,0,0x0,8
tick,0x7ffdf681f424,87886717,0,0x0,8
tick,0x7ffdf681f424,87888705,0,0x0,8
tick,0x7ffdf681f424,87890705,0,0x0,8
tick,0x7ffdf681f424,87892705,0,0x0,8
tick,0x7ffdf681f424,87894701,0,0x0,8
tick,0x7ffdf681f424,87896696,0,0x0,8
tick,0x7ffdf681f424,87898691,0,0x0,8
tick,0x7ffdf681f424,87900684,0,0x0,8
tick,0x7ffdf681f424,87902675,0,0x0,8
tick,0x7ffdf681f424,87904668,0,0x0,8
tick,0x7ffdf681f424,87906664,0,0x0,8
tick,0x7ffdf681f424,87908656,0,0x0,8
tick,0x7ffdf681f424,87910542,0,0x0,8
tick,0x7ffdf681f424,87912658,0,0x0,8
tick,0x7ffdf681f424,87914542,0,0x0,8
tick,0x7ffdf681f424,87916636,0,0x0,8
tick,0x7ffdf681f424,87918666,0,0x0,8
tick,0x7ffdf681f424,87920618,0,0x0,8
tick,0x7ffdf681f424,87922653,0,0x0,8
tick,0x7ffdf681f424,87924511,0,0x0,8
tick,0x7ffdf681f424,87926616,0,0x0,8
tick,0x7ffdf681f424,87928597,0,0x0,8
tick,0x7ffdf681f424,87930601,0,0x0,8
tick,0x7ffdf681f424,87932594,0,0x0,8
tick,0x7ffdf681f424,87934597,0,0x0,8
tick,0x7ffdf681f424,87936467,0,0x0,8
tick,0x7ffdf681f424,87938481,0,0x0,8
tick,0x7ffdf681f424,87940576,0,0x0,8
tick,0x7ffdf681f424,87942662,0,0x0,8
tick,0x7ffdf681f424,87944584,0,0x0,8
tick,0x7ffdf681f424,87946555,0,0x0,8
tick,0x7ffdf681f424,87948554,0,0x0,8
tick,0x7ffdf681f424,87950546,0,0x0,8
tick,0x7ffdf681f424,87952499,0,0x0,8
tick,0x7ffdf681f424,87954586,0,0x0,8
tick,0x7ffdf681f424,87956536,0,0x0,8
tick,0x7ffdf681f424,87958522,0,0x0,8
tick,0x7ffdf681f424,87960482,0,0x0,8
tick,0x7ffdf681f424,87962575,0,0x0,8
tick,0x7ffdf681f424,87964512,0,0x0,8
tick,0x7ffdf681f424,87966505,0,0x0,8
tick,0x7ffdf681f424,87968501,0,0x0,8
tick,0x7ffdf681f424,87970493,0,0x0,8
tick,0x7ffdf681f424,87972485,0,0x0,8
tick,0x7ffdf681f424,87974492,0,0x0,8
tick,0x7ffdf681f424,87976489,0,0x0,8
tick,0x7ffdf681f424,87978470,0,0x0,8
tick,0x7ffdf681f424,87980467,0,0x0,8
tick,0x7ffdf681f424,87982461,0,0x0,8
tick,0x7ffdf681f424,87984351,0,0x0,8
tick,0x7ffdf681f424,87986547,0,0x0,8
tick,0x7ffdf681f424,87988466,0,0x0,8
tick,0x7ffdf681f424,87990441,0,0x0,8
tick,0x7ffdf681f424,87992440,0,0x0,8
tick,0x7ffdf681f424,87994429,0,0x0,8
tick,0x7ffdf681f424,87996419,0,0x0,8
tick,0x7ffdf681f424,87998414,0,0x0,8
tick,0x7ffdf681f424,88000366,0,0x0,8
tick,0x7ffdf681f424,88002297,0,0x0,8
tick,0x7ffdf681f424,88004413,0,0x0,8
tick,0x7ffdf681f424,88006406,0,0x0,8
tick,0x7ffdf681f424,88008274,0,0x0,8
tick,0x7ffdf681f424,88010386,0,0x0,8
tick,0x7ffdf681f424,88012374,0,0x0,8
tick,0x7ffdf681f424,88014376,0,0x0,8
tick,0x7ffdf681f424,88016368,0,0x0,8
tick,0x7ffdf681f424,88018364,0,0x0,8
tick,0x7ffdf681f424,88020358,0,0x0,8
tick,0x7ffdf681f424,88022355,0,0x0,8
tick,0x7ffdf681f424,88024347,0,0x0,8
tick,0x7ffdf681f424,88026347,0,0x0,8
tick,0x7ffdf681f424,88028376,0,0x0,8
tick,0x7ffdf681f424,88030355,0,0x0,8
tick,0x7ffdf681f424,88032359,0,0x0,8
tick,0x7ffdf681f424,88034322,0,0x0,8
tick,0x7ffdf681f424,88036367,0,0x0,8
tick,0x7ffdf681f424,88038310,0,0x0,8
tick,0x7ffdf681f424,88040307,0,0x0,8
tick,0x7ffdf681f424,88042189,0,0x0,8
tick,0x7ffdf681f424,88044291,0,0x0,8
tick,0x7ffdf681f424,88046290,0,0x0,8
tick,0x7ffdf681f424,88048199,0,0x0,8
tick,0x7ffdf681f424,88050289,0,0x0,8
tick,0x7ffdf681f424,88052227,0,0x0,8
tick,0x7ffdf681f424,88054301,0,0x0,8
tick,0x7ffdf681f424,88056262,0,0x0,8
tick,0x7ffdf681f424,88058284,0,0x0,8
tick,0x7ffdf681f424,88060251,0,0x0,8
tick,0x7ffdf681f424,88062253,0,0x0,8
tick,0x7ffdf681f424,88064235,0,0x0,8
tick,0x7ffdf681f424,88066237,0,0x0,8
tick,0x7ffdf681f424,88068229,0,0x0,8
tick,0x7ffdf681f424,88070230,0,0x0,8
tick,0x7ffdf681f424,88072255,0,0x0,8
tick,0x7ffdf681f424,88074253,0,0x0,8
tick,0x7ffdf681f424,88076245,0,0x0,8
tick,0x7ffdf681f424,88078094,0,0x0,8
tick,0x7ffdf681f424,88080198,0,0x0,8
tick,0x7ffdf681f424,88082193,0,0x0,8
tick,0x7ffdf681f424,88084187,0,0x0,8
tick,0x7ffdf681f424,88086177,0,0x0,8
tick,0x7ffdf681f424,88088177,0,0x0,8
tick,0x7ffdf681f424,88090173,0,0x0,8
tick,0x7ffdf681f424,88092166,0,0x0,8
tick,0x7ffdf681f424,88094071,0,0x0,8
tick,0x7ffdf681f424,88096255,0,0x0,8
tick,0x7ffdf681f424,88098185,0,0x0,8
tick,0x7ffdf681f424,88100144,0,0x0,8
tick,0x7ffdf681f424,88102147,0,0x0,8
tick,0x7ffdf681f424,88104134,0,0x0,8
tick,0x7ffdf681f424,88106128,0,0x0,8
tick,0x7ffdf681f424,88108123,0,0x0,8
tick,0x7ffdf681f424,88110120,0,0x0,8
tick,0x7ffdf681f424,88112112,0,0x0,8
tick,0x7ffdf681f424,88114107,0,0x0,8
tick,0x7ffdf681f424,88116113,0,0x0,8
tick,0x7ffdf681f424,88118144,0,0x0,8
tick,0x7ffdf681f424,88120102,0,0x0,8
tick,0x7ffdf681f424,88122082,0,0x0,8
tick,0x7ffdf681f424,88124081,0,0x0,8
tick,0x7ffdf681f424,88126073,0,0x0,8
tick,0x7ffdf681f424,88128071,0,0x0,8
tick,0x7ffdf681f424,88130067,0,0x0,8
tick,0x7ffdf681f424,88132060,0,0x0,8
tick,0x7ffdf681f424,88134054,0,0x0,8
tick,0x7ffdf681f424,88136049,0,0x0,8
tick,0x7ffdf681f424,88138055,0,0x0,8
tick,0x7ffdf681f424,88140130,0,0x0,8
tick,0x7ffdf681f424,88142055,0,0x0,8
tick,0x7ffdf681f424,88143933,0,0x0,8
tick,0x7ffdf681f424,88146022,0,0x0,8
tick,0x7ffdf681f424,88148017,0,0x0,8
tick,0x7ffdf681f424,88150019,0,0x0,8
tick,0x7ffdf681f424,88152007,0,0x0,8
tick,0x7ffdf681f424,88153896,0,0x0,8
tick,0x7ffdf681f424,88155881,0,0x0,8
tick,0x7ffdf681f424,88157998,0,0x0,8
tick,0x7ffdf681f424,88159996,0,0x0,8
tick,0x7ffdf681f424,88161987,0,0x0,8
tick,0x7ffdf681f424,88163985,0,0x0,8
tick,0x7ffdf681f424,88165972,0,0x0,8
tick,0x7ffdf681f424,88167964,0,0x0,8
tick,0x7ffdf681f424,88169958,0,0x0,8
tick,0x7ffdf681f424,88171953,0,0x0,8
tick,0x7ffdf681f424,88173948,0,0x0,8
tick,0x7ffdf681f424,88175942,0,0x0,8
tick,0x7ffdf681f424,88177938,0,0x0,8
tick,0x7ffdf681f424,88179938,0,0x0,8
tick,0x7ffdf681f424,88181941,0,0x0,8
tick,0x7ffdf681f424,88183913,0,0x0,8
tick,0x7ffdf681f424,88185861,0,0x0,8
tick,0x7ffdf681f424,88187910,0,0x0,8
tick,0x7ffdf681f424,88189907,0,0x0,8
tick,0x7ffdf681f424,88191900,0,0x0,8
tick,0x7ffdf681f424,88193854,0,0x0,8
tick,0x7ffdf681f424,88195892,0,0x0,8
tick,0x7ffdf681f424,88197883,0,0x0,8
tick,0x7ffdf681f424,88199929,0,0x0,8
tick,0x7ffdf681f424,88201873,0,0x0,8
tick,0x7ffdf681f424,88203871,0,0x0,8
tick,0x7ffdf681f424,88205907,0,0x0,8
tick,0x7ffdf681f424,88207891,0,0x0,8
tick,0x7ffdf681f424,88209851,0,0x0,8
tick,0x7ffdf681f424,88211846,0,0x0,8
tick,0x7ffdf681f424,88213843,0,0x0,8
tick,0x7ffdf681f424,88215829,0,0x0,8
tick,0x7ffdf681f424,88217832,0,0x0,8
tick,0x7ffdf681f424,88219825,0,0x0,8
tick,0x7ffdf681f424,88221822,0,0x0,8
tick,0x7ffdf681f424,88223813,0,0x0,8
tick,0x7ffdf681f424,88225837,0,0x0,8
tick,0x7ffdf681f424,88227864,0,0x0,8
tick,0x7ffdf681f424,88229831,0,0x0,8
tick,0x7ffdf681f424,88231695,0,0x0,8
tick,0x7ffdf681f424,88233787,0,0x0,8
tick,0x7ffdf681f424,88235731,0,0x0,8
tick,0x7ffdf681f424,88237779,0,0x0,8
tick,0x7ffdf681f424,88239765,0,0x0,8
tick,0x7ffdf681f424,88241766,0,0x0,8
tick,0x7ffdf681f424,88243766,0,0x0,8
tick,0x7ffdf681f424,88245758,0,0x0,8
tick,0x7ffdf681f424,88247781,0,0x0,8
tick,0x7ffdf681f424,88249790,0,0x0,8
tick,0x7ffdf681f424,88251772,0,0x0,8
tick,0x7ffdf681f424,88253742,0,0x0,8
tick,0x7ffdf681f424,88255728,0,0x0,8
tick,0x7ffdf681f424,88257725,0,0x0,8
tick,0x7ffdf681f424,88259746,0,0x0,8
tick,0x7ffdf681f424,88261713,0,0x0,8
tick,0x7ffdf681f424,88263714,0,0x0,8
tick,0x7ffdf681f424,88265702,0,0x0,8
tick,0x7ffdf681f424,88267696,0,0x0,8
tick,0x7ffdf681f424,88269722,0,0x0,8
tick,0x7ffdf681f424,88271783,0,0x0,8
tick,0x7ffdf681f424,88273719,0,0x0,8
tick,0x7ffdf681f424,88275671,0,0x0,8
tick,0x7ffdf681f424,88277678,0,0x0,8
tick,0x7ffdf681f424,88279673,0,0x0,8
tick,0x7ffdf681f424,88281711,0,0x0,8
tick,0x7ffdf681f424,88283654,0,0x0,8
tick,0x7ffdf681f424,88285545,0,0x0,8
tick,0x7ffdf681f424,88287643,0,0x0,8
tick,0x7ffdf681f424,88289642,0,0x0,8
tick,0x7ffdf681f424,88291673,0,0x0,8
tick,0x7ffdf681f424,88293636,0,0x0,8
tick,0x7ffdf681f424,88295659,0,0x0,8
tick,0x7ffdf681f424,88297617,0,0x0,8
tick,0x7ffdf681f424,88299611,0,0x0,8
tick,0x7ffdf681f424,88301613,0,0x0,8
tick,0x7ffdf681f424,88303601,0,0x0,8
tick,0x7ffdf681f424,88305597,0,0x0,8
tick,0x7ffdf681f424,88307484,0,0x0,8
tick,0x7ffdf681f424,88309476,0,0x0,8
tick,0x7ffdf681f424,88311587,0,0x0,8
tick,0x7ffdf681f424,88313591,0,0x0,8
tick,0x7ffdf681f424,88315630,0,0x0,8
tick,0x7ffdf681f424,88317586,0,0x0,8
tick,0x7ffdf681f424,88319545,0,0x0,8
tick,0x7ffdf681f424,88321564,0,0x0,8
tick,0x7ffdf681f424,88323547,0,0x0,8
tick,0x7ffdf681f424,88325550,0,0x0,8
tick,0x7ffdf681f424,88327428,0,0x0,8
tick,0x7ffdf681f424,88329539,0,0x0,8
tick,0x7ffdf681f424,88331527,0,0x0,8
tick,0x7ffdf681f424,88333534,0,0x0,8
tick,0x7ffdf681f424,88335389,0,0x0,8
tick,0x7ffdf681f424,88337497,0,0x0,8
tick,0x7ffdf681f424,88339510,0,0x0,8
tick,0x7ffdf681f424,88341508,0,0x0,8
tick,0x7ffdf681f424,88343531,0,0x0,8
tick,0x7ffdf681f424,88345496,0,0x0,8
tick,0x7ffdf681f424,88347485,0,0x0,8
tick,0x7ffdf681f424,88349369,0,0x0,8
tick,0x7ffdf681f424,88351472,0,0x0,8
tick,0x7ffdf681f424,88353469,0,0x0,8
tick,0x7ffdf681f424,88355370,0,0x0,8
tick,0x7ffdf681f424,88357483,0,0x0,8
tick,0x7ffdf681f424,88359497,0,0x0,8
tick,0x7ffdf681f424,88361477,0,0x0,8
tick,0x7ffdf681f424,88363489,0,0x0,8
tick,0x7ffdf681f424,88365445,0,0x0,8
tick,0x7ffdf681f424,88367437,0,0x0,8
tick,0x7ffdf681f424,88369425,0,0x0,8
tick,0x7ffdf681f424,88371420,0,0x0,8
tick,0x7ffdf681f424,88373417,0,0x0,8
tick,0x7ffdf681f424,88375407,0,0x0,8
tick,0x7ffdf681f424,88377297,0,0x0,8
tick,0x7ffdf681f424,88379423,0,0x0,8
tick,0x7ffdf681f424,88381432,0,0x0,8
tick,0x7ffdf681f424,88383424,0,0x0,8
tick,0x7ffdf681f424,88385308,0,0x0,8
tick,0x7ffdf681f424,88387389,0,0x0,8
tick,0x7ffdf681f424,88389372,0,0x0,8
tick,0x7ffdf681f424,88391378,0,0x0,8
tick,0x7ffdf681f424,88393360,0,0x0,8
tick,0x7ffdf681f424,88395355,0,0x0,8
tick,0x7ffdf681f424,88397351,0,0x0,8
tick,0x7ffdf681f424,88399345,0,0x0,8
tick,0x7ffdf681f424,88401366,0,0x0,8
tick,0x7ffdf681f424,88403321,0,0x0,8
tick,0x7ffdf681f424,88405342,0,0x0,8
tick,0x7ffdf681f424,88407323,0,0x0,8
tick,0x7ffdf681f424,88409320,0,0x0,8
tick,0x7ffdf681f424,88411319,0,0x0,8
tick,0x7ffdf681f424,88413309,0,0x0,8
tick,0x7ffdf681f424,88415302,0,0x0,8
tick,0x7ffdf681f424,88417298,0,0x0,8
tick,0x7ffdf681f424,88419178,0,0x0,8
tick,0x7ffdf681f424,88421286,0,0x0,8
tick,0x7ffdf681f424,88423305,0,0x0,8
tick,0x7ffdf681f424,88425270,0,0x0,8
tick,0x7ffdf681f424,88427259,0,0x0,8
tick,0x7ffdf681f424,88429266,0,0x0,8
tick,0x7ffdf681f424,88431259,0,0x0,8
tick,0x7ffdf681f424,88433258,0,0x0,8
tick,0x7ffdf681f424,88435258,0,0x0,8
tick,0x7ffdf681f424,88437242,0,0x0,8
tick,0x7ffdf681f424,88439132,0,0x0,8
tick,0x7ffdf681f424,88441235,0,0x0,8
tick,0x7ffdf681f424,88443227,0,0x0,8
tick,0x7ffdf681f424,88445230,0,0x0,8
tick,0x7ffdf681f424,88447279,0,0x0,8
tick,0x7ffdf681f424,88449236,0,0x0,8
tick,0x7ffdf681f424,88451140,0,0x0,8
tick,0x7ffdf681f424,88453200,0,0x0,8
tick,0x7ffdf681f424,88455190,0,0x0,8
tick,0x7ffdf681f424,88457190,0,0x0,8
tick,0x7ffdf681f424,88459186,0,0x0,8
tick,0x7ffdf681f424,88461125,0,0x0,8
tick,0x7ffdf681f424,88463070,0,0x0,8
tick,0x7ffdf681f424,88465175,0,0x0,8
tick,0x7ffdf681f424,88467180,0,0x0,8
tick,0x7ffdf681f424,88469069,0,0x0,8
tick,0x7ffdf681f424,88471175,0,0x0,8
tick,0x7ffdf681f424,88473156,0,0x0,8
tick,0x7ffdf681f424,88475143,0,0x0,8
tick,0x7ffdf681f424,88477144,0,0x0,8
tick,0x7ffdf681f424,88479115,0,0x0,8
tick,0x7ffdf681f424,88481128,0,0x0,8
tick,0x7ffdf681f424,88483118,0,0x0,8
tick,0x7ffdf681f424,88485117,0,0x0,8
tick,0x7ffdf681f424,88487138,0,0x0,8
tick,0x7ffdf681f424,88489124,0,0x0,8
tick,0x7ffdf681f424,88491143,0,0x0,8
tick,0x7ffdf681f424,88493127,0,0x0,8
tick,0x7ffdf681f424,88495089,0,0x0,8
tick,0x7ffdf681f424,88497084,0,0x0,8
tick,0x7ffdf681f424,88499079,0,0x0,8
tick,0x7ffdf681f424,88501075,0,0x0,8
tick,0x7ffdf681f424,88503064,0,0x0,8
tick,0x7ffdf681f424,88505064,0,0x0,8
tick,0x7ffdf681f424,88507056,0,0x0,8
tick,0x7ffdf681f424,88509059,0,0x0,8
tick,0x7ffdf681f424,88511059,0,0x0,8
tick,0x7ffdf681f424,88513072,0,0x0,8
tick,0x7ffdf681f424,88515070,0,0x0,8
tick,0x7ffdf681f424,88517030,0,0x0,8
tick,0x7ffdf681f424,88518914,0,0x0,8
tick,0x7ffdf681f424,88521019,0,0x0,8
tick,0x7ffdf681f424,88523013,0,0x0,8
tick,0x7ffdf681f424,88525006,0,0x0,8
tick,0x7ffdf681f424,88527041,0,0x0,8
tick,0x7ffdf681f424,88528998,0,0x0,8
tick,0x7ffdf681f424,88530992,0,0x0,8
tick,0x7ffdf681f424,88533004,0,0x0,8
tick,0x7ffdf681f424,88535012,0,0x0,8
tick,0x7ffdf681f424,88537005,0,0x0,8
tick,0x7ffdf681f424,88538898,0,0x0,8
tick,0x7ffdf681f424,88540968,0,0x0,8
tick,0x7ffdf681f424,88542961,0,0x0,8
tick,0x7ffdf681f424,88544847,0,0x0,8
tick,0x7ffdf681f424,88546948,0,0x0,8
tick,0x7ffdf681f424,88548944,0,0x0,8
tick,0x7ffdf681f424,88550942,0,0x0,8
tick,0x7ffdf681f424,88552810,0,0x0,8
tick,0x7ffdf681f424,88554943,0,0x0,8
tick,0x7ffdf681f424,88556963,0,0x0,8
tick,0x7ffdf681f424,88558951,0,0x0,8
tick,0x7ffdf681f424,88560813,0,0x0,8
tick,0x7ffdf681f424,88562913,0,0x0,8
tick,0x7ffdf681f424,88564919,0,0x0,8
tick,0x7ffdf681f424,88566909,0,0x0,8
tick,0x7ffdf681f424,88568889,0,0x0,8
tick,0x7ffdf681f424,88570886,0,0x0,8
tick,0x7ffdf681f424,88572882,0,0x0,8
tick,0x7ffdf681f424,88574875,0,0x0,8
tick,0x7ffdf681f424,88576888,0,0x0,8
tick,0x7ffdf681f424,88578908,0,0x0,8
tick,0x7ffdf681f424,88580897,0,0x0,8
tick,0x7ffdf681f424,88582854,0,0x0,8
tick,0x7ffdf681f424,88584848,0,0x0,8
tick,0x7ffdf681f424,88586848,0,0x0,8
tick,0x7ffdf681f424,88588840,0,0x0,8
tick,0x7ffdf681f424,88590833,0,0x0,8
tick,0x7ffdf681f424,88592827,0,0x0,8
tick,0x7ffdf681f424,88594822,0,0x0,8
tick,0x7ffdf681f424,88596825,0,0x0,8
tick,0x7ffdf681f424,88598822,0,0x0,8
tick,0x7ffdf681f424,88600851,0,0x0,8
tick,0x7ffdf681f424,88602838,0,0x0,8
tick,0x7ffdf681f424,88604797,0,0x0,8
tick,0x7ffdf681f424,88606794,0,0x0,8
tick,0x7ffdf681f424,88608816,0,0x0,8
tick,0x7ffdf681f424,88610671,0,0x0,8
tick,0x7ffdf681f424,88612775,0,0x0,8
tick,0x7ffdf681f424,88614653,0,0x0,8
tick,0x7ffdf681f424,88616659,0,0x0,8
tick,0x7ffdf681f424,88618767,0,0x0,8
tick,0x7ffdf681f424,88620765,0,0x0,8
tick,0x7ffdf681f424,88622832,0,0x0,8
tick,0x7ffdf681f424,88624776,0,0x0,8
tick,0x7ffdf681f424,88626737,0,0x0,8
tick,0x7ffdf681f424,88628734,0,0x0,8
tick,0x7ffdf681f424,88630726,0,0x0,8
tick,0x7ffdf681f424,88632723,0,0x0,8
tick,0x7ffdf681f424,88634718,0,0x0,8
tick,0x7ffdf681f424,88636712,0,0x0,8
tick,0x7ffdf681f424,88638713,0,0x0,8
tick,0x7ffdf681f424,88640700,0,0x0,8
tick,0x7ffdf681f424,88642604,0,0x0,8
tick,0x7ffdf681f424,88644695,0,0x0,8
tick,0x7ffdf681f424,88646717,0,0x0,8
tick,0x7ffdf681f424,88648678,0,0x0,8
tick,0x7ffdf681f424,88650672,0,0x0,8
tick,0x7ffdf681f424,88652559,0,0x0,8
tick,0x7ffdf681f424,88654663,0,0x0,8
tick,0x7ffdf681f424,88656662,0,0x0,8
tick,0x7ffdf681f424,88658651,0,0x0,8
tick,0x7ffdf681f424,88660586,0,0x0,8
tick,0x7ffdf681f424,88662610,0,0x0,8
tick,0x7ffdf681f424,88664694,0,0x0,8
tick,0x7ffdf681f424,88666636,0,0x0,8
tick,0x7ffdf681f424,88668657,0,0x0,8
tick,0x7ffdf681f424,88670619,0,0x0,8
tick,0x7ffdf681f424,88672616,0,0x0,8
tick,0x7ffdf681f424,88674609,0,0x0,8
tick,0x7ffdf681f424,88676605,0,0x0,8
tick,0x7ffdf681f424,88678598,0,0x0,8
tick,0x7ffdf681f424,88680592,0,0x0,8
tick,0x7ffdf681f424,88682589,0,0x0,8
tick,0x7ffdf681f424,88684583,0,0x0,8
tick,0x7ffdf681f424,88686600,0,0x0,8
tick,0x7ffdf681f424,88688640,0,0x0,8
tick,0x7ffdf681f424,88690622,0,0x0,8
tick,0x7ffdf681f424,88692454,0,0x0,8
tick,0x7ffdf681f424,88694464,0,0x0,8
tick,0x7ffdf681f424,88696435,0,0x0,8
tick,0x7ffdf681f424,88698544,0,0x0,8
tick,0x7ffdf681f424,88700536,0,0x0,8
tick,0x7ffdf681f424,88702419,0,0x0,8
tick,0x7ffdf681f424,88704525,0,0x0,8
tick,0x7ffdf681f424,88706523,0,0x0,8
tick,0x7ffdf681f424,88708525,0,0x0,8
tick,0x7ffdf681f424,88710509,0,0x0,8
tick,0x7ffdf681f424,88712524,0,0x0,8
tick,0x7ffdf681f424,88714508,0,0x0,8
tick,0x7ffdf681f424,88716498,0,0x0,8
tick,0x7ffdf681f424,88718491,0,0x0,8
tick,0x7ffdf681f424,88720486,0,0x0,8
tick,0x7ffdf681f424,88722475,0,0x0,8
tick,0x7ffdf681f424,88724478,0,0x0,8
tick,0x7ffdf681f424,88726484,0,0x0,8
tick,0x7ffdf681f424,88728466,0,0x0,8
tick,0x7ffdf681f424,88730467,0,0x0,8
tick,0x7ffdf681f424,88732483,0,0x0,8
tick,0x7ffdf681f424,88734479,0,0x0,8
tick,0x7ffdf681f424,88736453,0,0x0,8
tick,0x7ffdf681f424,88738438,0,0x0,8
tick,0x7ffdf681f424,88740438,0,0x0,8
tick,0x7ffdf681f424,88742427,0,0x0,8
tick,0x7ffdf681f424,88744424,0,0x0,8
tick,0x7ffdf681f424,88746424,0,0x0,8
tick,0x7ffdf681f424,88748417,0,0x0,8
tick,0x7ffdf681f424,88750414,0,0x0,8
tick,0x7ffdf681f424,88752302,0,0x0,8
tick,0x7ffdf681f424,88754307,0,0x0,8
tick,0x7ffdf681f424,88756395,0,0x0,8
tick,0x7ffdf681f424,88758390,0,0x0,8
tick,0x7ffdf681f424,88760381,0,0x0,8
tick,0x7ffdf681f424,88762374,0,0x0,8
tick,0x7ffdf681f424,88764381,0,0x0,8
tick,0x7ffdf681f424,88766369,0,0x0,8
tick,0x7ffdf681f424,88768225,0,0x0,8
tick,0x7ffdf681f424,88770261,0,0x0,8
tick,0x7ffdf681f424,88772381,0,0x0,8
tick,0x7ffdf681f424,88774348,0,0x0,8
tick,0x7ffdf681f424,88776413,0,0x0,8
tick,0x7ffdf681f424,88778242,0,0x0,8
tick,0x7ffdf681f424,88780330,0,0x0,8
tick,0x7ffdf681f424,88782320,0,0x0,8
tick,0x7ffdf681f424,88784316,0,0x0,8
tick,0x7ffdf681f424,88786312,0,0x0,8
tick,0x7ffdf681f424,88788307,0,0x0,8
tick,0x7ffdf681f424,88790299,0,0x0,8
tick,0x7ffdf681f424,88792296,0,0x0,8
tick,0x7ffdf681f424,88794180,0,0x0,8
tick,0x7ffdf681f424,88796300,0,0x0,8
tick,0x7ffdf681f424,88798342,0,0x0,8
tick,0x7ffdf681f424,88800312,0,0x0,8
tick,0x7ffdf681f424,88802275,0,0x0,8
tick,0x7ffdf681f424,88804262,0,0x0,8
tick,0x7ffdf681f424,88806262,0,0x0,8
tick,0x7ffdf681f424,88808251,0,0x0,8
tick,0x7ffdf681f424,88810240,0,0x0,8
tick,0x7ffdf681f424,88812252,0,0x0,8
tick,0x7ffdf681f424,88814235,0,0x0,8
tick,0x7ffdf681f424,88816225,0,0x0,8
tick,0x7ffdf681f424,88818231,0,0x0,8
tick,0x7ffdf681f424,88820226,0,0x0,8
tick,0x7ffdf681f424,88822215,0,0x0,8
tick,0x7ffdf681f424,88824217,0,0x0,8
tick,0x7ffdf681f424,88826204,0,0x0,8
tick,0x7ffdf681f424,88828200,0,0x0,8
tick,0x7ffdf681f424,88830192,0,0x0,8
tick,0x7ffdf681f424,88832184,0,0x0,8
tick,0x7ffdf681f424,88834189,0,0x0,8
tick,0x7ffdf681f424,88836182,0,0x0,8
tick,0x7ffdf681f424,88838179,0,0x0,8
tick,0x7ffdf681f424,88840173,0,0x0,8
tick,0x7ffdf681f424,88842213,0,0x0,8
tick,0x7ffdf681f424,88844075,0,0x0,8
tick,0x7ffdf681f424,88846089,0,0x0,8
tick,0x7ffdf681f424,88848145,0,0x0,8
tick,0x7ffdf681f424,88850139,0,0x0,8
tick,0x7ffdf681f424,88852145,0,0x0,8
tick,0x7ffdf681f424,88854179,0,0x0,8
tick,0x7ffdf681f424,88856125,0,0x0,8
tick,0x7ffdf681f424,88858118,0,0x0,8
tick,0x7ffdf681f424,88860115,0,0x0,8
tick,0x7ffdf681f424,88862114,0,0x0,8
tick,0x7ffdf681f424,88864150,0,0x0,8
tick,0x7ffdf681f424,88866132,0,0x0,8
tick,0x7ffdf681f424,88868102,0,0x0,8
tick,0x7ffdf681f424,88870086,0,0x0,8
tick,0x7ffdf681f424,88872080,0,0x0,8
tick,0x7ffdf681f424,88874085,0,0x0,8
tick,0x7ffdf681f424,88876069,0,0x0,8
tick,0x7ffdf681f424,88878064,0,0x0,8
tick,0x7ffdf681f424,88880059,0,0x0,8
tick,0x7ffdf681f424,88882056,0,0x0,8
tick,0x7ffdf681f424,88884047,0,0x0,8
tick,0x7ffdf681f424,88885955,0,0x0,8
tick,0x7ffdf681f424,88888032,0,0x0,8
tick,0x7ffdf681f424,88890037,0,0x0,8
tick,0x7ffdf681f424,88892030,0,0x0,8
tick,0x7ffdf681f424,88893951,0,0x0,8
tick,0x7ffdf681f424,88896020,0,0x0,8
tick,0x7ffdf681f424,88898011,0,0x0,8
tick,0x7ffdf681f424,88900005,0,0x0,8
tick,0x7ffdf681f424,88902000,0,0x0,8
tick,0x7ffdf681f424,88903995,0,0x0,8
tick,0x7ffdf681f424,88906002,0,0x0,8
tick,0x7ffdf681f424,88907989,0,0x0,8
tick,0x7ffdf681f424,88909987,0,0x0,8
tick,0x7ffdf681f424,88911985,0,0x0,8
tick,0x7ffdf681f424,88913854,0,0x0,8
tick,0x7ffdf681f424,88915966,0,0x0,8
tick,0x7ffdf681f424,88917958,0,0x0,8
tick,0x7ffdf681f424,88919959,0,0x0,8
tick,0x7ffdf681f424,88921827,0,0x0,8
tick,0x7ffdf681f424,88923833,0,0x0,8
tick,0x7ffdf681f424,88925944,0,0x0,8
tick,0x7ffdf681f424,88927844,0,0x0,8
tick,0x7ffdf681f424,88930007,0,0x0,8
tick,0x7ffdf681f424,88931952,0,0x0,8
tick,0x7ffdf681f424,88933923,0,0x0,8
tick,0x7ffdf681f424,88935859,0,0x0,8
tick,0x7ffdf681f424,88937908,0,0x0,8
tick,0x7ffdf681f424,88939908,0,0x0,8
tick,0x7ffdf681f424,88941915,0,0x0,8
tick,0x7ffdf681f424,88943784,0,0x0,8
tick,0x7ffdf681f424,88945884,0,0x0,8
tick,0x7ffdf681f424,88947881,0,0x0,8
tick,0x7ffdf681f424,88949883,0,0x0,8
tick,0x7ffdf681f424,88951866,0,0x0,8
tick,0x7ffdf681f424,88953876,0,0x0,8
tick,0x7ffdf681f424,88955859,0,0x0,8
tick,0x7ffdf681f424,88957851,0,0x0,8
tick,0x7ffdf681f424,88959843,0,0x0,8
tick,0x7ffdf681f424,88961841,0,0x0,8
tick,0x7ffdf681f424,88963830,0,0x0,8
tick,0x7ffdf681f424,88965835,0,0x0,8
tick,0x7ffdf681f424,88967825,0,0x0,8
tick,0x7ffdf681f424,88969767,0,0x0,8
tick,0x7ffdf681f424,88971826,0,0x0,8
tick,0x7ffdf681f424,88973885,0,0x0,8
tick,0x7ffdf681f424,88975839,0,0x0,8
tick,0x7ffdf681f424,88977798,0,0x0,8
tick,0x7ffdf681f424,88979795,0,0x0,8
tick,0x7ffdf681f424,88981787,0,0x0,8
tick,0x7ffdf681f424,88983765,0,0x0,8
tick,0x7ffdf681f424,88985662,0,0x0,8
tick,0x7ffdf681f424,88987779,0,0x0,8
tick,0x7ffdf681f424,88989765,0,0x0,8
tick,0x7ffdf681f424,88991763,0,0x0,8
tick,0x7ffdf681f424,88993762,0,0x0,8
tick,0x7ffdf681f424,88995736,0,0x0,8
tick,0x7ffdf681f424,88997758,0,0x0,8
tick,0x7ffdf681f424,88999636,0,0x0,8
tick,0x7ffdf681f424,89001734,0,0x0,8
tick,0x7ffdf681f424,89003731,0,0x0,8
tick,0x7ffdf681f424,89005732,0,0x0,8
tick,0x7ffdf681f424,89007744,0,0x0,8
tick,0x7ffdf681f424,89009718,0,0x0,8
tick,0x7ffdf681f424,89011598,0,0x0,8
tick,0x7ffdf681f424,89013702,0,0x0,8
tick,0x7ffdf681f424,89015706,0,0x0,8
tick,0x7ffdf681f424,89017735,0,0x0,8
tick,0x7ffdf681f424,89019694,0,0x0,8
tick,0x7ffdf681f424,89021684,0,0x0,8
tick,0x7ffdf681f424,89023677,0,0x0,8
tick,0x7ffdf681f424,89025667,0,0x0,8
tick,0x7ffdf681f424,89027556,0,0x0,8
tick,0x7ffdf681f424,89029538,0,0x0,8
tick,0x7ffdf681f424,89031645,0,0x0,8
tick,0x7ffdf681f424,89033651,0,0x0,8
tick,0x7ffdf681f424,89035646,0,0x0,8
tick,0x7ffdf681f424,89037646,0,0x0,8
tick,0x7ffdf681f424,89039639,0,0x0,8
tick,0x7ffdf681f424,89041650,0,0x0,8
tick,0x7ffdf681f424,89043624,0,0x0,8
tick,0x7ffdf681f424,89045625,0,0x0,8
tick,0x7ffdf681f424,89047613,0,0x0,8
tick,0x7ffdf681f424,89049606,0,0x0,8
tick,0x7ffdf681f424,89051598,0,0x0,8
tick,0x7ffdf681f424,89053607,0,0x0,8
tick,0x7ffdf681f424,89055587,0,0x0,8
tick,0x7ffdf681f424,89057586,0,0x0,8
tick,0x7ffdf681f424,89059587,0,0x0,8
tick,0x7ffdf681f424,89061653,0,0x0,8
tick,0x7ffdf681f424,89063600,0,0x0,8
tick,0x7ffdf681f424,89065595,0,0x0,8
tick,0x7ffdf681f424,89067560,0,0x0,8
tick,0x7ffdf681f424,89069552,0,0x0,8
tick,0x7ffdf681f424,89071549,0,0x0,8
tick,0x7ffdf681f424,89073549,0,0x0,8
tick,0x7ffdf681f424,89075471,0,0x0,8
tick,0x7ffdf681f424,89077427,0,0x0,8
tick,0x7ffdf681f424,89079534,0,0x0,8
tick,0x7ffdf681f424,89081527,0,0x0,8
tick,0x7ffdf681f424,89083577,0,0x0,8
tick,0x7ffdf681f424,89085530,0,0x0,8
tick,0x7ffdf681f424,89087506,0,0x0,8
tick,0x7ffdf681f424,89089391,0,0x0,8
tick,0x7ffdf681f424,89091494,0,0x0,8
tick,0x7ffdf681f424,89093521,0,0x0,8
tick,0x7ffdf681f424,89095507,0,0x0,8
tick,0x7ffdf681f424,89097484,0,0x0,8
tick,0x7ffdf681f424,89099524,0,0x0,8
tick,0x7ffdf681f424,89101475,0,0x0,8
tick,0x7ffdf681f424,89103478,0,0x0,8
tick,0x7ffdf681f424,89105500,0,0x0,8
tick,0x7ffdf681f424,89107480,0,0x0,8
tick,0x7ffdf681f424,89109445,0,0x0,8
tick,0x7ffdf681f424,89111442,0,0x0,8
tick,0x7ffdf681f424,89113464,0,0x0,8
tick,0x7ffdf681f424,89115426,0,0x0,8
tick,0x7ffdf681f424,89117419,0,0x0,8
tick,0x7ffdf681f424,89119386,0,0x0,8
tick,0x7ffdf681f424,89121414,0,0x0,8
tick,0x7ffdf681f424,89123409,0,0x0,8
tick,0x7ffdf681f424,89125414,0,0x0,8
tick,0x7ffdf681f424,89127356,0,0x0,8
tick,0x7ffdf681f424,89129428,0,0x0,8
tick,0x7ffdf681f424,89131389,0,0x0,8
tick,0x7ffdf681f424,89133383,0,0x0,8
tick,0x7ffdf681f424,89135377,0,0x0,8
tick,0x7ffdf681f424,89137371,0,0x0,8
tick,0x7ffdf681f424,89139369,0,0x0,8
tick,0x7ffdf681f424,89141371,0,0x0,8
tick,0x7ffdf681f424,89143267,0,0x0,8
tick,0x7ffdf681f424,89145378,0,0x0,8
tick,0x7ffdf681f424,89147359,0,0x0,8
tick,0x7ffdf681f424,89149439,0,0x0,8
tick,0x7ffdf681f424,89151358,0,0x0,8
tick,0x7ffdf681f424,89153278,0,0x0,8
tick,0x7ffdf681f424,89155323,0,0x0,8
tick,0x7ffdf681f424,89157312,0,0x0,8
tick,0x7ffdf681f424,89159313,0,0x0,8
tick,0x7ffdf681f424,89161290,0,0x0,8
tick,0x7ffdf681f424,89163307,0,0x0,8
tick,0x7ffdf681f424,89165284,0,0x0,8
tick,0x7ffdf681f424,89167300,0,0x0,8
tick,0x7ffdf681f424,89169186,0,0x0,8
tick,0x7ffdf681f424,89171346,0,0x0,8
tick,0x7ffdf681f424,89173315,0,0x0,8
tick,0x7ffdf681f424,89175267,0,0x0,8
tick,0x7ffdf681f424,89177270,0,0x0,8
tick,0x7ffdf681f424,89179261,0,0x0,8
tick,0x7ffdf681f424,89181255,0,0x0,8
tick,0x7ffdf681f424,89183280,0,0x0,8
tick,0x7ffdf681f424,89185258,0,0x0,8
tick,0x7ffdf681f424,89187238,0,0x0,8
tick,0x7ffdf681f424,89189240,0,0x0,8
tick,0x7ffdf681f424,89191234,0,0x0,8
tick,0x7ffdf681f424,89193299,0,0x0,8
tick,0x7ffdf681f424,89195250,0,0x0,8
tick,0x7ffdf681f424,89197211,0,0x0,8
tick,0x7ffdf681f424,89199205,0,0x0,8
tick,0x7ffdf681f424,89201200,0,0x0,8
tick,0x7ffdf681f424,89203198,0,0x0,8
tick,0x7ffdf681f424,89205187,0,0x0,8
tick,0x7ffdf681f424,89207253,0,0x0,8
tick,0x7ffdf681f424,89209180,0,0x0,8
tick,0x7ffdf681f424,89211176,0,0x0,8
tick,0x7ffdf681f424,89213177,0,0x0,8
tick,0x7ffdf681f424,89215175,0,0x0,8
tick,0x7ffdf681f424,89217163,0,0x0,8
tick,0x7ffdf681f424,89219040,0,0x0,8
tick,0x7ffdf681f424,89221147,0,0x0,8
tick,0x7ffdf681f424,89223148,0,0x0,8
tick,0x7ffdf681f424,89225141,0,0x0,8
tick,0x7ffdf681f424,89227139,0,0x0,8
tick,0x7ffdf681f424,89229030,0,0x0,8
tick,0x7ffdf681f424,89231013,0,0x0,8
tick,0x7ffdf681f424,89233122,0,0x0,8
tick,0x7ffdf681f424,89235120,0,0x0,8
tick,0x7ffdf681f424,89237126,0,0x0,8
tick,0x7ffdf681f424,89239135,0,0x0,8
tick,0x7ffdf681f424,89241111,0,0x0,8
tick,0x7ffdf681f424,89242980,0,0x0,8
tick,0x7ffdf681f424,89245099,0,0x0,8
tick,0x7ffdf681f424,89247085,0,0x0,8
tick,0x7ffdf681f424,89249076,0,0x0,8
tick,0x7ffdf681f424,89251076,0,0x0,8
tick,0x7ffdf681f424,89253062,0,0x0,8
tick,0x7ffdf681f424,89255057,0,0x0,8
tick,0x7ffdf681f424,89257058,0,0x0,8
tick,0x7ffdf681f424,89259032,0,0x0,8
tick,0x7ffdf681f424,89260926,0,0x0,8
tick,0x7ffdf681f424,89263075,0,0x0,8
tick,0x7ffdf681f424,89265030,0,0x0,8
tick,0x7ffdf681f424,89267051,0,0x0,8
tick,0x7ffdf681f424,89269009,0,0x0,8
tick,0x7ffdf681f424,89270958,0,0x0,8
tick,0x7ffdf681f424,89273017,0,0x0,8
tick,0x7ffdf681f424,89275006,0,0x0,8
tick,0x7ffdf681f424,89277028,0,0x0,8
tick,0x7ffdf681f424,89279002,0,0x0,8
tick,0x7ffdf681f424,89281058,0,0x0,8
tick,0x7ffdf681f424,89283015,0,0x0,8
tick,0x7ffdf681f424,89284973,0,0x0,8
tick,0x7ffdf681f424,89286978,0,0x0,8
tick,0x7ffdf681f424,89288972,0,0x0,8
tick,0x7ffdf681f424,89290962,0,0x0,8
tick,0x7ffdf681f424,89292950,0,0x0,8
tick,0x7ffdf681f424,89294990,0,0x0,8
tick,0x7ffdf681f424,89296969,0,0x0,8
tick,0x7ffdf681f424,89298942,0,0x0,8
tick,0x7ffdf681f424,89300943,0,0x0,8
tick,0x7ffdf681f424,89302967,0,0x0,8
tick,0x7ffdf681f424,89304948,0,0x0,8
tick,0x7ffdf681f424,89306815,0,0x0,8
tick,0x7ffdf681f424,89308912,0,0x0,8
tick,0x7ffdf681f424,89310850,0,0x0,8
tick,0x7ffdf681f424,89312908,0,0x0,8
tick,0x7ffdf681f424,89314900,0,0x0,8
tick,0x7ffdf681f424,89316898,0,0x0,8
tick,0x7ffdf681f424,89318892,0,0x0,8
tick,0x7ffdf681f424,89320812,0,0x0,8
tick,0x7ffdf681f424,89322882,0,0x0,8
tick,0x7ffdf681f424,89324915,0,0x0,8
tick,0x7ffdf681f424,89326889,0,0x0,8
tick,0x7ffdf681f424,89328859,0,0x0,8
tick,0x7ffdf681f424,89330856,0,0x0,8
tick,0x7ffdf681f424,89332848,0,0x0,8
tick,0x7ffdf681f424,89334827,0,0x0,8
tick,0x7ffdf681f424,89336729,0,0x0,8
tick,0x7ffdf681f424,89338839,0,0x0,8
tick,0x7ffdf681f424,89340827,0,0x0,8
tick,0x7ffdf681f424,89342824,0,0x0,8
tick,0x7ffdf681f424,89344866,0,0x0,8
tick,0x7ffdf681f424,89346718,0,0x0,8
tick,0x7ffdf681f424,89348819,0,0x0,8
tick,0x7ffdf681f424,89350805,0,0x0,8
tick,0x7ffdf681f424,89352743,0,0x0,8
tick,0x7ffdf681f424,89354792,0,0x0,8
tick,0x7ffdf681f424,89356784,0,0x0,8
tick,0x7ffdf681f424,89358698,0,0x0,8
tick,0x7ffdf681f424,89360687,0,0x0,8
tick,0x7ffdf681f424,89362771,0,0x0,8
tick,0x7ffdf681f424,89364772,0,0x0,8
tick,0x7ffdf681f424,89366767,0,0x0,8
tick,0x7ffdf681f424,89368795,0,0x0,8
tick,0x7ffdf681f424,89370758,0,0x0,8
tick,0x7ffdf681f424,89372752,0,0x0,8
tick,0x7ffdf681f424,89374739,0,0x0,8
tick,0x7ffdf681f424,89376731,0,0x0,8
tick,0x7ffdf681f424,89378727,0,0x0,8
tick,0x7ffdf681f424,89380728,0,0x0,8
tick,0x7ffdf681f424,89382667,0,0x0,8
tick,0x7ffdf681f424,89384600,0,0x0,8
tick,0x7ffdf681f424,89386712,0,0x0,8
tick,0x7ffdf681f424,89388712,0,0x0,8
tick,0x7ffdf681f424,89390737,0,0x0,8
tick,0x7ffdf681f424,89392722,0,0x0,8
tick,0x7ffdf681f424,89394683,0,0x0,8
tick,0x7ffdf681f424,89396684,0,0x0,8
tick,0x7ffdf681f424,89398674,0,0x0,8
tick,0x7ffdf681f424,89400666,0,0x0,8
tick,0x7ffdf681f424,89402553,0,0x0,8
tick,0x7ffdf681f424,89404662,0,0x0,8
tick,0x7ffdf681f424,89406647,0,0x0,8
tick,0x7ffdf681f424,89408643,0,0x0,8
tick,0x7ffdf681f424,89410647,0,0x0,8
tick,0x7ffdf681f424,89412647,0,0x0,8
tick,0x7ffdf681f424,89414637,0,0x0,8
tick,0x7ffdf681f424,89416626,0,0x0,8
tick,0x7ffdf681f424,89418620,0,0x0,8
tick,0x7ffdf681f424,89420614,0,0x0,8
tick,0x7ffdf681f424,89422603,0,0x0,8
tick,0x7ffdf681f424,89424613,0,0x0,8
tick,0x7ffdf681f424,89426654,0,0x0,8
tick,0x7ffdf681f424,89428592,0,0x0,8
tick,0x7ffdf681f424,89430589,0,0x0,8
tick,0x7ffdf681f424,89432589,0,0x0,8
tick,0x7ffdf681f424,89434654,0,0x0,8
tick,0x7ffdf681f424,89436609,0,0x0,8
tick,0x7ffdf681f424,89438452,0,0x0,8
tick,0x7ffdf681f424,89440450,0,0x0,8
tick,0x7ffdf681f424,89442556,0,0x0,8
tick,0x7ffdf681f424,89444560,0,0x0,8
tick,0x7ffdf681f424,89446544,0,0x0,8
tick,0x7ffdf681f424,89448550,0,0x0,8
tick,0x7ffdf681f424,89450536,0,0x0,8
tick,0x7ffdf681f424,89452423,0,0x0,8
tick,0x7ffdf681f424,89454530,0,0x0,8
tick,0x7ffdf681f424,89456524,0,0x0,8
tick,0x7ffdf681f424,89458535,0,0x0,8
tick,0x7ffdf681f424,89460398,0,0x0,8
tick,0x7ffdf681f424,89462503,0,0x0,8
tick,0x7ffdf681f424,89464496,0,0x0,8
tick,0x7ffdf681f424,89466501,0,0x0,8
tick,0x7ffdf681f424,89468511,0,0x0,8
tick,0x7ffdf681f424,89470493,0,0x0,8
tick,0x7ffdf681f424,89472475,0,0x0,8
tick,0x7ffdf681f424,89474470,0,0x0,8
tick,0x7ffdf681f424,89476479,0,0x0,8
tick,0x7ffdf681f424,89478519,0,0x0,8
tick,0x7ffdf681f424,89480489,0,0x0,8
tick,0x7ffdf681f424,89482451,0,0x0,8
tick,0x7ffdf681f424,89484443,0,0x0,8
tick,0x7ffdf681f424,89486441,0,0x0,8
tick,0x7ffdf681f424,89488440,0,0x0,8
tick,0x7ffdf681f424,89490425,0,0x0,8
tick,0x7ffdf681f424,89492426,0,0x0,8
tick,0x7ffdf681f424,89494312,0,0x0,8
tick,0x7ffdf681f424,89496412,0,0x0,8
tick,0x7ffdf681f424,89498421,0,0x0,8
tick,0x7ffdf681f424,89500464,0,0x0,8
tick,0x7ffdf681f424,89502425,0,0x0,8
tick,0x7ffdf681f424,89504390,0,0x0,8
tick,0x7ffdf681f424,89506384,0,0x0,8
tick,0x7ffdf681f424,89508412,0,0x0,8
tick,0x7ffdf681f424,89510270,0,0x0,8
tick,0x7ffdf681f424,89512372,0,0x0,8
tick,0x7ffdf681f424,89514371,0,0x0,8
tick,0x7ffdf681f424,89516357,0,0x0,8
tick,0x7ffdf681f424,89518357,0,0x0,8
tick,0x7ffdf681f424,89520354,0,0x0,8
tick,0x7ffdf681f424,89522385,0,0x0,8
tick,0x7ffdf681f424,89524359,0,0x0,8
tick,0x7ffdf681f424,89526343,0,0x0,8
tick,0x7ffdf681f424,89528326,0,0x0,8
tick,0x7ffdf681f424,89530323,0,0x0,8
tick,0x7ffdf681f424,89532315,0,0x0,8
tick,0x7ffdf681f424,89534318,0,0x0,8
tick,0x7ffdf681f424,89536313,0,0x0,8
tick,0x7ffdf681f424,89538191,0,0x0,8
tick,0x7ffdf681f424,89540300,0,0x0,8
tick,0x7ffdf681f424,89542295,0,0x0,8
tick,0x7ffdf681f424,89544162,0,0x0,8
tick,0x7ffdf681f424,89546286,0,0x0,8
tick,0x7ffdf681f424,89548272,0,0x0,8
tick,0x7ffdf681f424,89550273,0,0x0,8
tick,0x7ffdf681f424,89552268,0,0x0,8
tick,0x7ffdf681f424,89554211,0,0x0,8
tick,0x7ffdf681f424,89556257,0,0x0,8
tick,0x7ffdf681f424,89558248,0,0x0,8
tick,0x7ffdf681f424,89560240,0,0x0,8
tick,0x7ffdf681f424,89562243,0,0x0,8
tick,0x7ffdf681f424,89564246,0,0x0,8
tick,0x7ffdf681f424,89566290,0,0x0,8
tick,0x7ffdf681f424,89568255,0,0x0,8
tick,0x7ffdf681f424,89570109,0,0x0,8
tick,0x7ffdf681f424,89572208,0,0x0,8
tick,0x7ffdf681f424,89574214,0,0x0,8
tick,0x7ffdf681f424,89576195,0,0x0,8
tick,0x7ffdf681f424,89578194,0,0x0,8
tick,0x7ffdf681f424,89580187,0,0x0,8
tick,0x7ffdf681f424,89582182,0,0x0,8
tick,0x7ffdf681f424,89584238,0,0x0,8
tick,0x7ffdf681f424,89586136,0,0x0,8
tick,0x7ffdf681f424,89588215,0,0x0,8
tick,0x7ffdf681f424,89590212,0,0x0,8
tick,0x7ffdf681f424,89592155,0,0x0,8
tick,0x7ffdf681f424,89594091,0,0x0,8
tick,0x7ffdf681f424,89596144,0,0x0,8
tick,0x7ffdf681f424,89598141,0,0x0,8
tick,0x7ffdf681f424,89600110,0,0x0,8
tick,0x7ffdf681f424,89602124,0,0x0,8
tick,0x7ffdf681f424,89604123,0,0x0,8
tick,0x7ffdf681f424,89606118,0,0x0,8
tick,0x7ffdf681f424,89608139,0,0x0,8
tick,0x7ffdf681f424,89610187,0,0x0,8
tick,0x7ffdf681f424,89612127,0,0x0,8
tick,0x7ffdf681f424,89614029,0,0x0,8
tick,0x7ffdf681f424,89616092,0,0x0,8
tick,0x7ffdf681f424,89618088,0,0x0,8
tick,0x7ffdf681f424,89619974,0,0x0,8
tick,0x7ffdf681f424,89622078,0,0x0,8
tick,0x7ffdf681f424,89624070,0,0x0,8
tick,0x7ffdf681f424,89626067,0,0x0,8
tick,0x7ffdf681f424,89628059,0,0x0,8
tick,0x7ffdf681f424,89630067,0,0x0,8
tick,0x7ffdf681f424,89632127,0,0x0,8
tick,0x7ffdf681f424,89634077,0,0x0,8
tick,0x7ffdf681f424,89635930,0,0x0,8
tick,0x7ffdf681f424,89638032,0,0x0,8
tick,0x7ffdf681f424,89640021,0,0x0,8
tick,0x7ffdf681f424,89642023,0,0x0,8
tick,0x7ffdf681f424,89644023,0,0x0,8
tick,0x7ffdf681f424,89646022,0,0x0,8
tick,0x7ffdf681f424,89648006,0,0x0,8
tick,0x7ffdf681f424,89650000,0,0x0,8
tick,0x7ffdf681f424,89652025,0,0x0,8
tick,0x7ffdf681f424,89653998,0,0x0,8
tick,0x7ffdf681f424,89655964,0,0x0,8
tick,0x7ffdf681f424,89657982,0,0x0,8
tick,0x7ffdf681f424,89659974,0,0x0,8
tick,0x7ffdf681f424,89661971,0,0x0,8
tick,0x7ffdf681f424,89663963,0,0x0,8
tick,0x7ffdf681f424,89665961,0,0x0,8
tick,0x7ffdf681f424,89667994,0,0x0,8
tick,0x7ffdf681f424,89669983,0,0x0,8
tick,0x7ffdf681f424,89671975,0,0x0,8
tick,0x7ffdf681f424,89673951,0,0x0,8
tick,0x7ffdf681f424,89675993,0,0x0,8
tick,0x7ffdf681f424,89677950,0,0x0,8
tick,0x7ffdf681f424,89679920,0,0x0,8
tick,0x7ffdf681f424,89681918,0,0x0,8
tick,0x7ffdf681f424,89683911,0,0x0,8
tick,0x7ffdf681f424,89685798,0,0x0,8
tick,0x7ffdf681f424,89687905,0,0x0,8
tick,0x7ffdf681f424,89689783,0,0x0,8
tick,0x7ffdf681f424,89691825,0,0x0,8
tick,0x7ffdf681f424,89693892,0,0x0,8
tick,0x7ffdf681f424,89695891,0,0x0,8
tick,0x7ffdf681f424,89697934,0,0x0,8
tick,0x7ffdf681f424,89699907,0,0x0,8
tick,0x7ffdf681f424,89701874,0,0x0,8
tick,0x7ffdf681f424,89703884,0,0x0,8
tick,0x7ffdf681f424,89705853,0,0x0,8
tick,0x7ffdf681f424,89707845,0,0x0,8
tick,0x7ffdf681f424,89709736,0,0x0,8
tick,0x7ffdf681f424,89711835,0,0x0,8
tick,0x7ffdf681f424,89713832,0,0x0,8
tick,0x7ffdf681f424,89715819,0,0x0,8
tick,0x7ffdf681f424,89717835,0,0x0,8
tick,0x7ffdf681f424,89719842,0,0x0,8
tick,0x7ffdf681f424,89721847,0,0x0,8
tick,0x7ffdf681f424,89723814,0,0x0,8
tick,0x7ffdf681f424,89725800,0,0x0,8
tick,0x7ffdf681f424,89727752,0,0x0,8
tick,0x7ffdf681f424,89729791,0,0x0,8
tick,0x7ffdf681f424,89731782,0,0x0,8
tick,0x7ffdf681f424,89733770,0,0x0,8
tick,0x7ffdf681f424,89735744,0,0x0,8
tick,0x7ffdf681f424,89737767,0,0x0,8
tick,0x7ffdf681f424,89739776,0,0x0,8
tick,0x7ffdf681f424,89741837,0,0x0,8
tick,0x7ffdf681f424,89743783,0,0x0,8
tick,0x7ffdf681f424,89745744,0,0x0,8
tick,0x7ffdf681f424,89747739,0,0x0,8
tick,0x7ffdf681f424,89749736,0,0x0,8
tick,0x7ffdf681f424,89751730,0,0x0,8
tick,0x7ffdf681f424,89753766,0,0x0,8
tick,0x7ffdf681f424,89755621,0,0x0,8
tick,0x7ffdf681f424,89757725,0,0x0,8
tick,0x7ffdf681f424,89759598,0,0x0,8
tick,0x7ffdf681f424,89761593,0,0x0,8
tick,0x7ffdf681f424,89763689,0,0x0,8
tick,0x7ffdf681f424,89765661,0,0x0,8
tick,0x7ffdf681f424,89767579,0,0x0,8
tick,0x7ffdf681f424,89769683,0,0x0,8
tick,0x7ffdf681f424,89771682,0,0x0,8
tick,0x7ffdf681f424,89773669,0,0x0,8
tick,0x7ffdf681f424,89775678,0,0x0,8
tick,0x7ffdf681f424,89777619,0,0x0,8
tick,0x7ffdf681f424,89779653,0,0x0,8
tick,0x7ffdf681f424,89781650,0,0x0,8
tick,0x7ffdf681f424,89783654,0,0x0,8
tick,0x7ffdf681f424,89785681,0,0x0,8
tick,0x7ffdf681f424,89787658,0,0x0,8
tick,0x7ffdf681f424,89789624,0,0x0,8
tick,0x7ffdf681f424,89791627,0,0x0,8
tick,0x7ffdf681f424,89793616,0,0x0,8
tick,0x7ffdf681f424,89795611,0,0x0,8
tick,0x7ffdf681f424,89797606,0,0x0,8
tick,0x7ffdf681f424,89799601,0,0x0,8
tick,0x7ffdf681f424,89801597,0,0x0,8
tick,0x7ffdf681f424,89803590,0,0x0,8
tick,0x7ffdf681f424,89805595,0,0x0,8
tick,0x7ffdf681f424,89807565,0,0x0,8
tick,0x7ffdf681f424,89809607,0,0x0,8
tick,0x7ffdf681f424,89811569,0,0x0,8
tick,0x7ffdf681f424,89813566,0,0x0,8
tick,0x7ffdf681f424,89815558,0,0x0,8
tick,0x7ffdf681f424,89817555,0,0x0,8
tick,0x7ffdf681f424,89819552,0,0x0,8
tick,0x7ffdf681f424,89821544,0,0x0,8
tick,0x7ffdf681f424,89823536,0,0x0,8
tick,0x7ffdf681f424,89825532,0,0x0,8
tick,0x7ffdf681f424,89827437,0,0x0,8
tick,0x7ffdf681f424,89829604,0,0x0,8
tick,0x7ffdf681f424,89831549,0,0x0,8
tick,0x7ffdf681f424,89833512,0,0x0,8
tick,0x7ffdf681f424,89835547,0,0x0,8
tick,0x7ffdf681f424,89837499,0,0x0,8
tick,0x7ffdf681f424,89839494,0,0x0,8
tick,0x7ffdf681f424,89841496,0,0x0,8
tick,0x7ffdf681f424,89843413,0,0x0,8
tick,0x7ffdf681f424,89845371,0,0x0,8
tick,0x7ffdf681f424,89847479,0,0x0,8
tick,0x7ffdf681f424,89849479,0,0x0,8
tick,0x7ffdf681f424,89851548,0,0x0,8
tick,0x7ffdf681f424,89853390,0,0x0,8
tick,0x7ffdf681f424,89855457,0,0x0,8
tick,0x7ffdf681f424,89857447,0,0x0,8
tick,0x7ffdf681f424,89859446,0,0x0,8
tick,0x7ffdf681f424,89861435,0,0x0,8
tick,0x7ffdf681f424,89863434,0,0x0,8
tick,0x7ffdf681f424,89865422,0,0x0,8
tick,0x7ffdf681f424,89867428,0,0x0,8
tick,0x7ffdf681f424,89869310,0,0x0,8
tick,0x7ffdf681f424,89871450,0,0x0,8
tick,0x7ffdf681f424,89873469,0,0x0,8
tick,0x7ffdf681f424,89875429,0,0x0,8
tick,0x7ffdf681f424,89877400,0,0x0,8
tick,0x7ffdf681f424,89879387,0,0x0,8
tick,0x7ffdf681f424,89881384,0,0x0,8
tick,0x7ffdf681f424,89883377,0,0x0,8
tick,0x7ffdf681f424,89885262,0,0x0,8
tick,0x7ffdf681f424,89887365,0,0x0,8
tick,0x7ffdf681f424,89889361,0,0x0,8
tick,0x7ffdf681f424,89891410,0,0x0,8
tick,0x7ffdf681f424,89893368,0,0x0,8
tick,0x7ffdf681f424,89895350,0,0x0,8
tick,0x7ffdf681f424,89897345,0,0x0,8
tick,0x7ffdf681f424,89899333,0,0x0,8
tick,0x7ffdf681f424,89901328,0,0x0,8
tick,0x7ffdf681f424,89903325,0,0x0,8
tick,0x7ffdf681f424,89905320,0,0x0,8
tick,0x7ffdf681f424,89907312,0,0x0,8
tick,0x7ffdf681f424,89909309,0,0x0,8
tick,0x7ffdf681f424,89911304,0,0x0,8
tick,0x7ffdf681f424,89913308,0,0x0,8
tick,0x7ffdf681f424,89915207,0,0x0,8
tick,0x7ffdf681f424,89917294,0,0x0,8
tick,0x7ffdf681f424,89919198,0,0x0,8
tick,0x7ffdf681f424,89921304,0,0x0,8
tick,0x7ffdf681f424,89923292,0,0x0,8
tick,0x7ffdf681f424,89925258,0,0x0,8
tick,0x7ffdf681f424,89927261,0,0x0,8
tick,0x7ffdf681f424,89929256,0,0x0,8
tick,0x7ffdf681f424,89931248,0,0x0,8
tick,0x7ffdf681f424,89933242,0,0x0,8
tick,0x7ffdf681f424,89935244,0,0x0,8
tick,0x7ffdf681f424,89937230,0,0x0,8
tick,0x7ffdf681f424,89939125,0,0x0,8
tick,0x7ffdf681f424,89941234,0,0x0,8
tick,0x7ffdf681f424,89943216,0,0x0,8
tick,0x7ffdf681f424,89945213,0,0x0,8
tick,0x7ffdf681f424,89947212,0,0x0,8
tick,0x7ffdf681f424,89949202,0,0x0,8
tick,0x7ffdf681f424,89951195,0,0x0,8
tick,0x7ffdf681f424,89953189,0,0x0,8
tick,0x7ffdf681f424,89955179,0,0x0,8
tick,0x7ffdf681f424,89957186,0,0x0,8
tick,0x7ffdf681f424,89959184,0,0x0,8
tick,0x7ffdf681f424,89961153,0,0x0,8
tick,0x7ffdf681f424,89963197,0,0x0,8
tick,0x7ffdf681f424,89965204,0,0x0,8
tick,0x7ffdf681f424,89967171,0,0x0,8
tick,0x7ffdf681f424,89969116,0,0x0,8
tick,0x7ffdf681f424,89971142,0,0x0,8
tick,0x7ffdf681f424,89973139,0,0x0,8
tick,0x7ffdf681f424,89975131,0,0x0,8
tick,0x7ffdf681f424,89977136,0,0x0,8
tick,0x7ffdf681f424,89979116,0,0x0,8
tick,0x7ffdf681f424,89981129,0,0x0,8
tick,0x7ffdf681f424,89983194,0,0x0,8
tick,0x7ffdf681f424,89985124,0,0x0,8
tick,0x7ffdf681f424,89987106,0,0x0,8
tick,0x7ffdf681f424,89989094,0,0x0,8
tick,0x7ffdf681f424,89991090,0,0x0,8
tick,0x7ffdf681f424,89993084,0,0x0,8
tick,0x7ffdf681f424,89995086,0,0x0,8
tick,0x7ffdf681f424,89996976,0,0x0,8
tick,0x7ffdf681f424,89998999,0,0x0,8
tick,0x7ffdf681f424,90001069,0,0x0,8
tick,0x7ffdf681f424,90003010,0,0x0,8
tick,0x7ffdf681f424,90005127,0,0x0,8
tick,0x7ffdf681f424,90007068,0,0x0,8
tick,0x7ffdf681f424,90009043,0,0x0,8
tick,0x7ffdf681f424,90010927,0,0x0,8
tick,0x7ffdf681f424,90013032,0,0x0,8
tick,0x7ffdf681f424,90015024,0,0x0,8
tick,0x7ffdf681f424,90017022,0,0x0,8
tick,0x7ffdf681f424,90019023,0,0x0,8
tick,0x7ffdf681f424,90021008,0,0x0,8
tick,0x7ffdf681f424,90023003,0,0x0,8
tick,0x7ffdf681f424,90025010,0,0x0,8
tick,0x7ffdf681f424,90027038,0,0x0,8
tick,0x7ffdf681f424,90029011,0,0x0,8
tick,0x7ffdf681f424,90030981,0,0x0,8
tick,0x7ffdf681f424,90032979,0,0x0,8
tick,0x7ffdf681f424,90034971,0,0x0,8
tick,0x7ffdf681f424,90036968,0,0x0,8
tick,0x7ffdf681f424,90038967,0,0x0,8
tick,0x7ffdf681f424,90040958,0,0x0,8
tick,0x7ffdf681f424,90042950,0,0x0,8
tick,0x7ffdf681f424,90044947,0,0x0,8
tick,0x7ffdf681f424,90046954,0,0x0,8
tick,0x7ffdf681f424,90049028,0,0x0,8
tick,0x7ffdf681f424,90050962,0,0x0,8
tick,0x7ffdf681f424,90052913,0,0x0,8
tick,0x7ffdf681f424,90054918,0,0x0,8
tick,0x7ffdf681f424,90056915,0,0x0,8
tick,0x7ffdf681f424,90058920,0,0x0,8
tick,0x7ffdf681f424,90060801,0,0x0,8
tick,0x7ffdf681f424,90062907,0,0x0,8
tick,0x7ffdf681f424,90064894,0,0x0,8
tick,0x7ffdf681f424,90066891,0,0x0,8
tick,0x7ffdf681f424,90068897,0,0x0,8
tick,0x7ffdf681f424,90070931,0,0x0,8
tick,0x7ffdf681f424,90072920,0,0x0,8
tick,0x7ffdf681f424,90074766,0,0x0,8
tick,0x7ffdf681f424,90076861,0,0x0,8
tick,0x7ffdf681f424,90078854,0,0x0,8
tick,0x7ffdf681f424,90080879,0,0x0,8
tick,0x7ffdf681f424,90082840,0,0x0,8
tick,0x7ffdf681f424,90084837,0,0x0,8
tick,0x7ffdf681f424,90086723,0,0x0,8
tick,0x7ffdf681f424,90088829,0,0x0,8
tick,0x7ffdf681f424,90090838,0,0x0,8
tick,0x7ffdf681f424,90092807,0,0x0,8
tick,0x7ffdf681f424,90094714,0,0x0,8
tick,0x7ffdf681f424,90096826,0,0x0,8
tick,0x7ffdf681f424,90098802,0,0x0,8
tick,0x7ffdf681f424,90100803,0,0x0,8
tick,0x7ffdf681f424,90102749,0,0x0,8
tick,0x7ffdf681f424,90104784,0,0x0,8
tick,0x7ffdf681f424,90106773,0,0x0,8
tick,0x7ffdf681f424,90108775,0,0x0,8
tick,0x7ffdf681f424,90110774,0,0x0,8
tick,0x7ffdf681f424,90112774,0,0x0,8
tick,0x7ffdf681f424,90114760,0,0x0,8
tick,0x7ffdf681f424,90116759,0,0x0,8
tick,0x7ffdf681f424,90118747,0,0x0,8
tick,0x7ffdf681f424,90120744,0,0x0,8
tick,0x7ffdf681f424,90122736,0,0x0,8
tick,0x7ffdf681f424,90124732,0,0x0,8
tick,0x7ffdf681f424,90126726,0,0x0,8
tick,0x7ffdf681f424,90128723,0,0x0,8
tick,0x7ffdf681f424,90130715,0,0x0,8
tick,0x7ffdf681f424,90132712,0,0x0,8
tick,0x7ffdf681f424,90134714,0,0x0,8
tick,0x7ffdf681f424,90136743,0,0x0,8
tick,0x7ffdf681f424,90138727,0,0x0,8
tick,0x7ffdf681f424,90140691,0,0x0,8
tick,0x7ffdf681f424,90142690,0,0x0,8
tick,0x7ffdf681f424,90144592,0,0x0,8
tick,0x7ffdf681f424,90146680,0,0x0,8
tick,0x7ffdf681f424,90148673,0,0x0,8
tick,0x7ffdf681f424,90150666,0,0x0,8
tick,0x7ffdf681f424,90152549,0,0x0,8
tick,0x7ffdf681f424,90154660,0,0x0,8
tick,0x7ffdf681f424,90156663,0,0x0,8
tick,0x7ffdf681f424,90158708,0,0x0,8
tick,0x7ffdf681f424,90160732,0,0x0,8
tick,0x7ffdf681f424,90162667,0,0x0,8
tick,0x7ffdf681f424,90164634,0,0x0,8
tick,0x7ffdf681f424,90166620,0,0x0,8
tick,0x7ffdf681f424,90168624,0,0x0,8
tick,0x7ffdf681f424,90170608,0,0x0,8
tick,0x7ffdf681f424,90172605,0,0x0,8
tick,0x7ffdf681f424,90174612,0,0x0,8
tick,0x7ffdf681f424,90176592,0,0x0,8
tick,0x7ffdf681f424,90178637,0,0x0,8
tick,0x7ffdf681f424,90180446,0,0x0,8
tick,0x7ffdf681f424,90182466,0,0x0,8
tick,0x7ffdf681f424,90184592,0,0x0,8
tick,0x7ffdf681f424,90186567,0,0x0,8
tick,0x7ffdf681f424,90188560,0,0x0,8
tick,0x7ffdf681f424,90190558,0,0x0,8
tick,0x7ffdf681f424,90192552,0,0x0,8
tick,0x7ffdf681f424,90194473,0,0x0,8
tick,0x7ffdf681f424,90196541,0,0x0,8
tick,0x7ffdf681f424,90198540,0,0x0,8
tick,0x7ffdf681f424,90200541,0,0x0,8
tick,0x7ffdf681f424,90202475,0,0x0,8
tick,0x7ffdf681f424,90204553,0,0x0,8
tick,0x7ffdf681f424,90206512,0,0x0,8
tick,0x7ffdf681f424,90208507,0,0x0,8
tick,0x7ffdf681f424,90210501,0,0x0,8
tick,0x7ffdf681f424,90212496,0,0x0,8
tick,0x7ffdf681f424,90214511,0,0x0,8
tick,0x7ffdf681f424,90216488,0,0x0,8
tick,0x7ffdf681f424,90218487,0,0x0,8
tick,0x7ffdf681f424,90220479,0,0x0,8
tick,0x7ffdf681f424,90222481,0,0x0,8
tick,0x7ffdf681f424,90224508,0,0x0,8
tick,0x7ffdf681f424,90226492,0,0x0,8
tick,0x7ffdf681f424,90228415,0,0x0,8
tick,0x7ffdf681f424,90230445,0,0x0,8
tick,0x7ffdf681f424,90232445,0,0x0,8
tick,0x7ffdf681f424,90234439,0,0x0,8
tick,0x7ffdf681f424,90236324,0,0x0,8
tick,0x7ffdf681f424,90238427,0,0x0,8
tick,0x7ffdf681f424,90240423,0,0x0,8
tick,0x7ffdf681f424,90242416,0,0x0,8
tick,0x7ffdf681f424,90244385,0,0x0,8
tick,0x7ffdf681f424,90246412,0,0x0,8
tick,0x7ffdf681f424,90248407,0,0x0,8
tick,0x7ffdf681f424,90250395,0,0x0,8
tick,0x7ffdf681f424,90252407,0,0x0,8
tick,0x7ffdf681f424,90254385,0,0x0,8
tick,0x7ffdf681f424,90256382,0,0x0,8
tick,0x7ffdf681f424,90258374,0,0x0,8
tick,0x7ffdf681f424,90260371,0,0x0,8
tick,0x7ffdf681f424,90262370,0,0x0,8
tick,0x7ffdf681f424,90264365,0,0x0,8
tick,0x7ffdf681f424,90266374,0,0x0,8
tick,0x7ffdf681f424,90268373,0,0x0,8
tick,0x7ffdf681f424,90270371,0,0x0,8
tick,0x7ffdf681f424,90272336,0,0x0,8
tick,0x7ffdf681f424,90274382,0,0x0,8
tick,0x7ffdf681f424,90276330,0,0x0,8
tick,0x7ffdf681f424,90278317,0,0x0,8
tick,0x7ffdf681f424,90280317,0,0x0,8
tick,0x7ffdf681f424,90282316,0,0x0,8
tick,0x7ffdf681f424,90284304,0,0x0,8
tick,0x7ffdf681f424,90286301,0,0x0,8
tick,0x7ffdf681f424,90288304,0,0x0,8
tick,0x7ffdf681f424,90290329,0,0x0,8
tick,0x7ffdf681f424,90292323,0,0x0,8
tick,0x7ffdf681f424,90294149,0,0x0,8
tick,0x7ffdf681f424,90296282,0,0x0,8
tick,0x7ffdf681f424,90298267,0,0x0,8
tick,0x7ffdf681f424,90300264,0,0x0,8
tick,0x7ffdf681f424,90302257,0,0x0,8
tick,0x7ffdf681f424,90304142,0,0x0,8
tick,0x7ffdf681f424,90306136,0,0x0,8
tick,0x7ffdf681f424,90308247,0,0x0,8
tick,0x7ffdf681f424,90310273,0,0x0,8
tick,0x7ffdf681f424,90312226,0,0x0,8
tick,0x7ffdf681f424,90314260,0,0x0,8
tick,0x7ffdf681f424,90316222,0,0x0,8
tick,0x7ffdf681f424,90318224,0,0x0,8
tick,0x7ffdf681f424,90320211,0,0x0,8
tick,0x7ffdf681f424,90322203,0,0x0,8
tick,0x7ffdf681f424,90324200,0,0x0,8
tick,0x7ffdf681f424,90326209,0,0x0,8
tick,0x7ffdf681f424,90328185,0,0x0,8
tick,0x7ffdf681f424,90330182,0,0x0,8
tick,0x7ffdf681f424,90332190,0,0x0,8
tick,0x7ffdf681f424,90334232,0,0x0,8
tick,0x7ffdf681f424,90336123,0,0x0,8
tick,0x7ffdf681f424,90338171,0,0x0,8
tick,0x7ffdf681f424,90340154,0,0x0,8
tick,0x7ffdf681f424,90342150,0,0x0,8
tick,0x7ffdf681f424,90344197,0,0x0,8
tick,0x7ffdf681f424,90346151,0,0x0,8
tick,0x7ffdf681f424,90348180,0,0x0,8
tick,0x7ffdf681f424,90350128,0,0x0,8
tick,0x7ffdf681f424,90352126,0,0x0,8
tick,0x7ffdf681f424,90354129,0,0x0,8
tick,0x7ffdf681f424,90356139,0,0x0,8
tick,0x7ffdf681f424,90358137,0,0x0,8
tick,0x7ffdf681f424,90360104,0,0x0,8
tick,0x7ffdf681f424,90362096,0,0x0,8
tick,0x7ffdf681f424,90364094,0,0x0,8
tick,0x7ffdf681f424,90366086,0,0x0,8
tick,0x7ffdf681f424,90368062,0,0x0,8
tick,0x7ffdf681f424,90370075,0,0x0,8
tick,0x7ffdf681f424,90372069,0,0x0,8
tick,0x7ffdf681f424,90374064,0,0x0,8
tick,0x7ffdf681f424,90376061,0,0x0,8
tick,0x7ffdf681f424,90378085,0,0x0,8
tick,0x7ffdf681f424,90380062,0,0x0,8
tick,0x7ffdf681f424,90382013,0,0x0,8
tick,0x7ffdf681f424,90384045,0,0x0,8
tick,0x7ffdf681f424,90385923,0,0x0,8
tick,0x7ffdf681f424,90388029,0,0x0,8
tick,0x7ffdf681f424,90390030,0,0x0,8
tick,0x7ffdf681f424,90392027,0,0x0,8
tick,0x7ffdf681f424,90394011,0,0x0,8
tick,0x7ffdf681f424,90396008,0,0x0,8
tick,0x7ffdf681f424,90398011,0,0x0,8
tick,0x7ffdf681f424,90400036,0,0x0,8
tick,0x7ffdf681f424,90402010,0,0x0,8
tick,0x7ffdf681f424,90403984,0,0x0,8
tick,0x7ffdf681f424,90405979,0,0x0,8
tick,0x7ffdf681f424,90408016,0,0x0,8
tick,0x7ffdf681f424,90409978,0,0x0,8
tick,0x7ffdf681f424,90411964,0,0x0,8
tick,0x7ffdf681f424,90413959,0,0x0,8
tick,0x7ffdf681f424,90415955,0,0x0,8
tick,0x7ffdf681f424,90417949,0,0x0,8
tick,0x7ffdf681f424,90419956,0,0x0,8
tick,0x7ffdf681f424,90421979,0,0x0,8
tick,0x7ffdf681f424,90423960,0,0x0,8
tick,0x7ffdf681f424,90425926,0,0x0,8
tick,0x7ffdf681f424,90427839,0,0x0,8
tick,0x7ffdf681f424,90429915,0,0x0,8
tick,0x7ffdf681f424,90431909,0,0x0,8
tick,0x7ffdf681f424,90433900,0,0x0,8
tick,0x7ffdf681f424,90435852,0,0x0,8
tick,0x7ffdf681f424,90437903,0,0x0,8
tick,0x7ffdf681f424,90439895,0,0x0,8
tick,0x7ffdf681f424,90441896,0,0x0,8
tick,0x7ffdf681f424,90443937,0,0x0,8
tick,0x7ffdf681f424,90445904,0,0x0,8
tick,0x7ffdf681f424,90447870,0,0x0,8
tick,0x7ffdf681f424,90449863,0,0x0,8
tick,0x7ffdf681f424,90451859,0,0x0,8
tick,0x7ffdf681f424,90453850,0,0x0,8
tick,0x7ffdf681f424,90455853,0,0x0,8
tick,0x7ffdf681f424,90457732,0,0x0,8
tick,0x7ffdf681f424,90459726,0,0x0,8
tick,0x7ffdf681f424,90461838,0,0x0,8
tick,0x7ffdf681f424,90463836,0,0x0,8
tick,0x7ffdf681f424,90465875,0,0x0,8
tick,0x7ffdf681f424,90467845,0,0x0,8
tick,0x7ffdf681f424,90469743,0,0x0,8
tick,0x7ffdf681f424,90471804,0,0x0,8
tick,0x7ffdf681f424,90473807,0,0x0,8
tick,0x7ffdf681f424,90475818,0,0x0,8
tick,0x7ffdf681f424,90477678,0,0x0,8
tick,0x7ffdf681f424,90479784,0,0x0,8
tick,0x7ffdf681f424,90481777,0,0x0,8
tick,0x7ffdf681f424,90483773,0,0x0,8
tick,0x7ffdf681f424,90485786,0,0x0,8
tick,0x7ffdf681f424,90487840,0,0x0,8
tick,0x7ffdf681f424,90489818,0,0x0,8
tick,0x7ffdf681f424,90491751,0,0x0,8
tick,0x7ffdf681f424,90493744,0,0x0,8
tick,0x7ffdf681f424,90495740,0,0x0,8
tick,0x7ffdf681f424,90497733,0,0x0,8
tick,0x7ffdf681f424,90499728,0,0x0,8
tick,0x7ffdf681f424,90501719,0,0x0,8
tick,0x7ffdf681f424,90503720,0,0x0,8
tick,0x7ffdf681f424,90505721,0,0x0,8
tick,0x7ffdf681f424,90507718,0,0x0,8
tick,0x7ffdf681f424,90509730,0,0x0,8
tick,0x7ffdf681f424,90511724,0,0x0,8
tick,0x7ffdf681f424,90513691,0,0x0,8
tick,0x7ffdf681f424,90515690,0,0x0,8
tick,0x7ffdf681f424,90517681,0,0x0,8
tick,0x7ffdf681f424,90519673,0,0x0,8
tick,0x7ffdf681f424,90521675,0,0x0,8
tick,0x7ffdf681f424,90523667,0,0x0,8
tick,0x7ffdf681f424,90525656,0,0x0,8
tick,0x7ffdf681f424,90527545,0,0x0,8
tick,0x7ffdf681f424,90529661,0,0x0,8
tick,0x7ffdf681f424,90531725,0,0x0,8
tick,0x7ffdf681f424,90533672,0,0x0,8
tick,0x7ffdf681f424,90535523,0,0x0,8
tick,0x7ffdf681f424,90537627,0,0x0,8
tick,0x7ffdf681f424,90539621,0,0x0,8
tick,0x7ffdf681f424,90541619,0,0x0,8
tick,0x7ffdf681f424,90543614,0,0x0,8
tick,0x7ffdf681f424,90545606,0,0x0,8
tick,0x7ffdf681f424,90547602,0,0x0,8
tick,0x7ffdf681f424,90549595,0,0x0,8
tick,0x7ffdf681f424,90551662,0,0x0,8
tick,0x7ffdf681f424,90553654,0,0x0,8
tick,0x7ffdf681f424,90555615,0,0x0,8
tick,0x7ffdf681f424,90557573,0,0x0,8
tick,0x7ffdf681f424,90559568,0,0x0,8
tick,0x7ffdf681f424,90561583,0,0x0,8
tick,0x7ffdf681f424,90563448,0,0x0,8
tick,0x7ffdf681f424,90565559,0,0x0,8
tick,0x7ffdf681f424,90567549,0,0x0,8
tick,0x7ffdf681f424,90569438,0,0x0,8
tick,0x7ffdf681f424,90571575,0,0x0,8
tick,0x7ffdf681f424,90573542,0,0x0,8
tick,0x7ffdf681f424,90575595,0,0x0,8
tick,0x7ffdf681f424,90577547,0,0x0,8
tick,0x7ffdf681f424,90579517,0,0x0,8
tick,0x7ffdf681f424,90581520,0,0x0,8
tick,0x7ffdf681f424,90583514,0,0x0,8
tick,0x7ffdf681f424,90585494,0,0x0,8
tick,0x7ffdf681f424,90587496,0,0x0,8
tick,0x7ffdf681f424,90589488,0,0x0,8
tick,0x7ffdf681f424,90591482,0,0x0,8
tick,0x7ffdf681f424,90593478,0,0x0,8
tick,0x7ffdf681f424,90595489,0,0x0,8
tick,0x7ffdf681f424,90597461,0,0x0,8
tick,0x7ffdf681f424,90599468,0,0x0,8
tick,0x7ffdf681f424,90601462,0,0x0,8
tick,0x7ffdf681f424,90603451,0,0x0,8
tick,0x7ffdf681f424,90605446,0,0x0,8
tick,0x7ffdf681f424,90607443,0,0x0,8
tick,0x7ffdf681f424,90609444,0,0x0,8
tick,0x7ffdf681f424,90611411,0,0x0,8
tick,0x7ffdf681f424,90613317,0,0x0,8
tick,0x7ffdf681f424,90615417,0,0x0,8
tick,0x7ffdf681f424,90617483,0,0x0,8
tick,0x7ffdf681f424,90619296,0,0x0,8
tick,0x7ffdf681f424,90621409,0,0x0,8
tick,0x7ffdf681f424,90623397,0,0x0,8
tick,0x7ffdf681f424,90625392,0,0x0,8
tick,0x7ffdf681f424,90627406,0,0x0,8
tick,0x7ffdf681f424,90629381,0,0x0,8
tick,0x7ffdf681f424,90631378,0,0x0,8
tick,0x7ffdf681f424,90633371,0,0x0,8
tick,0x7ffdf681f424,90635365,0,0x0,8
tick,0x7ffdf681f424,90637360,0,0x0,8
tick,0x7ffdf681f424,90639372,0,0x0,8
tick,0x7ffdf681f424,90641409,0,0x0,8
tick,0x7ffdf681f424,90643418,0,0x0,8
tick,0x7ffdf681f424,90645336,0,0x0,8
tick,0x7ffdf681f424,90647344,0,0x0,8
tick,0x7ffdf681f424,90649328,0,0x0,8
tick,0x7ffdf681f424,90651325,0,0x0,8
tick,0x7ffdf681f424,90653353,0,0x0,8
tick,0x7ffdf681f424,90655312,0,0x0,8
tick,0x7ffdf681f424,90657308,0,0x0,8
tick,0x7ffdf681f424,90659301,0,0x0,8
tick,0x7ffdf681f424,90661225,0,0x0,8
tick,0x7ffdf681f424,90663287,0,0x0,8
tick,0x7ffdf681f424,90665317,0,0x0,8
tick,0x7ffdf681f424,90667281,0,0x0,8
tick,0x7ffdf681f424,90669226,0,0x0,8
tick,0x7ffdf681f424,90671272,0,0x0,8
tick,0x7ffdf681f424,90673247,0,0x0,8
tick,0x7ffdf681f424,90675261,0,0x0,8
tick,0x7ffdf681f424,90677304,0,0x0,8
tick,0x7ffdf681f424,90679250,0,0x0,8
tick,0x7ffdf681f424,90681243,0,0x0,8
tick,0x7ffdf681f424,90683251,0,0x0,8
tick,0x7ffdf681f424,90685218,0,0x0,8
tick,0x7ffdf681f424,90687233,0,0x0,8
tick,0x7ffdf681f424,90689227,0,0x0,8
tick,0x7ffdf681f424,90691222,0,0x0,8
tick,0x7ffdf681f424,90693211,0,0x0,8
tick,0x7ffdf681f424,90695092,0,0x0,8
tick,0x7ffdf681f424,90697206,0,0x0,8
tick,0x7ffdf681f424,90699195,0,0x0,8
tick,0x7ffdf681f424,90701190,0,0x0,8
tick,0x7ffdf681f424,90703187,0,0x0,8
tick,0x7ffdf681f424,90705192,0,0x0,8
tick,0x7ffdf681f424,90707183,0,0x0,8
tick,0x7ffdf681f424,90709207,0,0x0,8
tick,0x7ffdf681f424,90711055,0,0x0,8
tick,0x7ffdf681f424,90713169,0,0x0,8
tick,0x7ffdf681f424,90715155,0,0x0,8
tick,0x7ffdf681f424,90717147,0,0x0,8
tick,0x7ffdf681f424,90719142,0,0x0,8
tick,0x7ffdf681f424,90721136,0,0x0,8
tick,0x7ffdf681f424,90723131,0,0x0,8
tick,0x7ffdf681f424,90725126,0,0x0,8
tick,0x7ffdf681f424,90727163,0,0x0,8
tick,0x7ffdf681f424,90729190,0,0x0,8
tick,0x7ffdf681f424,90731141,0,0x0,8
tick,0x7ffdf681f424,90733105,0,0x0,8
tick,0x7ffdf681f424,90735149,0,0x0,8
tick,0x7ffdf681f424,90737094,0,0x0,8
tick,0x7ffdf681f424,90739091,0,0x0,8
tick,0x7ffdf681f424,90741089,0,0x0,8
tick,0x7ffdf681f424,90743080,0,0x0,8
tick,0x7ffdf681f424,90745073,0,0x0,8
tick,0x7ffdf681f424,90747070,0,0x0,8
tick,0x7ffdf681f424,90749077,0,0x0,8
tick,0x7ffdf681f424,90751099,0,0x0,8
tick,0x7ffdf681f424,90753089,0,0x0,8
tick,0x7ffdf681f424,90754941,0,0x0,8
tick,0x7ffdf681f424,90757040,0,0x0,8
tick,0x7ffdf681f424,90759037,0,0x0,8
tick,0x7ffdf681f424,90760917,0,0x0,8
tick,0x7ffdf681f424,90763034,0,0x0,8
tick,0x7ffdf681f424,90764945,0,0x0,8
tick,0x7ffdf681f424,90766950,0,0x0,8
tick,0x7ffdf681f424,90769017,0,0x0,8
tick,0x7ffdf681f424,90771015,0,0x0,8
tick,0x7ffdf681f424,90773041,0,0x0,8
tick,0x7ffdf681f424,90775036,0,0x0,8
tick,0x7ffdf681f424,90776987,0,0x0,8
tick,0x7ffdf681f424,90778983,0,0x0,8
tick,0x7ffdf681f424,90780976,0,0x0,8
tick,0x7ffdf681f424,90782981,0,0x0,8
tick,0x7ffdf681f424,90784961,0,0x0,8
tick,0x7ffdf681f424,90786961,0,0x0,8
tick,0x7ffdf681f424,90788955,0,0x0,8
tick,0x7ffdf681f424,90790952,0,0x0,8
tick,0x7ffdf681f424,90792958,0,0x0,8
tick,0x7ffdf681f424,90794984,0,0x0,8
tick,0x7ffdf681f424,90796959,0,0x0,8
tick,0x7ffdf681f424,90798931,0,0x0,8
tick,0x7ffdf681f424,90800923,0,0x0,8
tick,0x7ffdf681f424,90802811,0,0x0,8
tick,0x7ffdf681f424,90804912,0,0x0,8
tick,0x7ffdf681f424,90806799,0,0x0,8
tick,0x7ffdf681f424,90808902,0,0x0,8
tick,0x7ffdf681f424,90810908,0,0x0,8
tick,0x7ffdf681f424,90812940,0,0x0,8
tick,0x7ffdf681f424,90814901,0,0x0,8
tick,0x7ffdf681f424,90816891,0,0x0,8
tick,0x7ffdf681f424,90818883,0,0x0,8
tick,0x7ffdf681f424,90820869,0,0x0,8
tick,0x7ffdf681f424,90822867,0,0x0,8
tick,0x7ffdf681f424,90824859,0,0x0,8
tick,0x7ffdf681f424,90826848,0,0x0,8
tick,0x7ffdf681f424,90828848,0,0x0,8
tick,0x7ffdf681f424,90830846,0,0x0,8
tick,0x7ffdf681f424,90832838,0,0x0,8
tick,0x7ffdf681f424,90834835,0,0x0,8
tick,0x7ffdf681f424,90836903,0,0x0,8
tick,0x7ffdf681f424,90838884,0,0x0,8
tick,0x7ffdf681f424,90840850,0,0x0,8
tick,0x7ffdf681f424,90842708,0,0x0,8
tick,0x7ffdf681f424,90844805,0,0x0,8
tick,0x7ffdf681f424,90846801,0,0x0,8
tick,0x7ffdf681f424,90848795,0,0x0,8
tick,0x7ffdf681f424,90850790,0,0x0,8
tick,0x7ffdf681f424,90852669,0,0x0,8
tick,0x7ffdf681f424,90854781,0,0x0,8
tick,0x7ffdf681f424,90856774,0,0x0,8
tick,0x7ffdf681f424,90858785,0,0x0,8
tick,0x7ffdf681f424,90860883,0,0x0,8
tick,0x7ffdf681f424,90862780,0,0x0,8
tick,0x7ffdf681f424,90864759,0,0x0,8
tick,0x7ffdf681f424,90866756,0,0x0,8
tick,0x7ffdf681f424,90868742,0,0x0,8
tick,0x7ffdf681f424,90870739,0,0x0,8
tick,0x7ffdf681f424,90872734,0,0x0,8
tick,0x7ffdf681f424,90874733,0,0x0,8
tick,0x7ffdf681f424,90876727,0,0x0,8
tick,0x7ffdf681f424,90878731,0,0x0,8
tick,0x7ffdf681f424,90880723,0,0x0,8
tick,0x7ffdf681f424,90882587,0,0x0,8
tick,0x7ffdf681f424,90884734,0,0x0,8
tick,0x7ffdf681f424,90886696,0,0x0,8
tick,0x7ffdf681f424,90888688,0,0x0,8
tick,0x7ffdf681f424,90890682,0,0x0,8
tick,0x7ffdf681f424,90892678,0,0x0,8
tick,0x7ffdf681f424,90894682,0,0x0,8
tick,0x7ffdf681f424,90896667,0,0x0,8
tick,0x7ffdf681f424,90898712,0,0x0,8
tick,0x7ffdf681f424,90900656,0,0x0,8
tick,0x7ffdf681f424,90902595,0,0x0,8
tick,0x7ffdf681f424,90904654,0,0x0,8
tick,0x7ffdf681f424,90906556,0,0x0,8
tick,0x7ffdf681f424,90908602,0,0x0,8
tick,0x7ffdf681f424,90910564,0,0x0,8
tick,0x7ffdf681f424,90912584,0,0x0,8
tick,0x7ffdf681f424,90914504,0,0x0,8
tick,0x7ffdf681f424,90916548,0,0x0,8
tick,0x7ffdf681f424,90918459,0,0x0,8
tick,0x7ffdf681f424,90920471,0,0x0,8
tick,0x7ffdf681f424,90922454,0,0x0,8
tick,0x7ffdf681f424,90924454,0,0x0,8
tick,0x7ffdf681f424,90926422,0,0x0,8
tick,0x7ffdf681f424,90928419,0,0x0,8
tick,0x7ffdf681f424,90930407,0,0x0,8
tick,0x7ffdf681f424,90932434,0,0x0,8
tick,0x7ffdf681f424,90934398,0,0x0,8
tick,0x7ffdf681f424,90936421,0,0x0,8
tick,0x7ffdf681f424,90938409,0,0x0,8
tick,0x7ffdf681f424,90940412,0,0x0,8
tick,0x7ffdf681f424,90942373,0,0x0,8
tick,0x7ffdf681f424,90944399,0,0x0,8
tick,0x7ffdf681f424,90946367,0,0x0,8
tick,0x7ffdf681f424,90948359,0,0x0,8
tick,0x7ffdf681f424,90950390,0,0x0,8
tick,0x7ffdf681f424,90952350,0,0x0,8
tick,0x7ffdf681f424,90954381,0,0x0,8
tick,0x7ffdf681f424,90956370,0,0x0,8
tick,0x7ffdf681f424,90958361,0,0x0,8
tick,0x7ffdf681f424,90960335,0,0x0,8
tick,0x7ffdf681f424,90962321,0,0x0,8
tick,0x7ffdf681f424,90964343,0,0x0,8
tick,0x7ffdf681f424,90966413,0,0x0,8
tick,0x7ffdf681f424,90968314,0,0x0,8
tick,0x7ffdf681f424,90970330,0,0x0,8
tick,0x7ffdf681f424,90972299,0,0x0,8
tick,0x7ffdf681f424,90974321,0,0x0,8
tick,0x7ffdf681f424,90976287,0,0x0,8
tick,0x7ffdf681f424,90978320,0,0x0,8
tick,0x7ffdf681f424,90980299,0,0x0,8
tick,0x7ffdf681f424,90982377,0,0x0,8
tick,0x7ffdf681f424,90984432,0,0x0,8
tick,0x7ffdf681f424,90986261,0,0x0,8
tick,0x7ffdf681f424,90988255,0,0x0,8
tick,0x7ffdf681f424,90990247,0,0x0,8
tick,0x7ffdf681f424,90992249,0,0x0,8
tick,0x7ffdf681f424,90994255,0,0x0,8
tick,0x7ffdf681f424,90996246,0,0x0,8
tick,0x7ffdf681f424,90998269,0,0x0,8
tick,0x7ffdf681f424,91000217,0,0x0,8
tick,0x7ffdf681f424,91002326,0,0x0,8
tick,0x7ffdf681f424,91004328,0,0x0,8
tick,0x7ffdf681f424,91006310,0,0x0,8
tick,0x7ffdf681f424,91008341,0,0x0,8
tick,0x7ffdf681f424,91010321,0,0x0,8
tick,0x7ffdf681f424,91012320,0,0x0,8
tick,0x7ffdf681f424,91014332,0,0x0,8
tick,0x7ffdf681f424,91016279,0,0x0,8
tick,0x7ffdf681f424,91018304,0,0x0,8
tick,0x7ffdf681f424,91020275,0,0x0,8
tick,0x7ffdf681f424,91022261,0,0x0,8
tick,0x7ffdf681f424,91024262,0,0x0,8
tick,0x7ffdf681f424,91026243,0,0x0,8
tick,0x7ffdf681f424,91028287,0,0x0,8
tick,0x7ffdf681f424,91030275,0,0x0,8
tick,0x7ffdf681f424,91032249,0,0x0,8
tick,0x7ffdf681f424,91034252,0,0x0,8
tick,0x7ffdf681f424,91036144,0,0x0,8
tick,0x7ffdf681f424,91038246,0,0x0,8
tick,0x7ffdf681f424,91040250,0,0x0,8
tick,0x7ffdf681f424,91042232,0,0x0,8
tick,0x7ffdf681f424,91044244,0,0x0,8
tick,0x7ffdf681f424,91046222,0,0x0,8
tick,0x7ffdf681f424,91048221,0,0x0,8
tick,0x7ffdf681f424,91050229,0,0x0,8
tick,0x7ffdf681f424,91052225,0,0x0,8
tick,0x7ffdf681f424,91054213,0,0x0,8
tick,0x7ffdf681f424,91056196,0,0x0,8
tick,0x7ffdf681f424,91058199,0,0x0,8
tick,0x7ffdf681f424,91060193,0,0x0,8
tick,0x7ffdf681f424,91062218,0,0x0,8
tick,0x7ffdf681f424,91064185,0,0x0,8
tick,0x7ffdf681f424,91066176,0,0x0,8
tick,0x7ffdf681f424,91068170,0,0x0,8
tick,0x7ffdf681f424,91070173,0,0x0,8
tick,0x7ffdf681f424,91072177,0,0x0,8
tick,0x7ffdf681f424,91074078,0,0x0,8
tick,0x7ffdf681f424,91076112,0,0x0,8
tick,0x7ffdf681f424,91078141,0,0x0,8
tick,0x7ffdf681f424,91080196,0,0x0,8
tick,0x7ffdf681f424,91082126,0,0x0,8
tick,0x7ffdf681f424,91084122,0,0x0,8
tick,0x7ffdf681f424,91086113,0,0x0,8
tick,0x7ffdf681f424,91088109,0,0x0,8
tick,0x7ffdf681f424,91090089,0,0x0,8
tick,0x7ffdf681f424,91092115,0,0x0,8
tick,0x7ffdf681f424,91094107,0,0x0,8
tick,0x7ffdf681f424,91096112,0,0x0,8
tick,0x7ffdf681f424,91098104,0,0x0,8
tick,0x7ffdf681f424,91100065,0,0x0,8
tick,0x7ffdf681f424,91102022,0,0x0,8
tick,0x7ffdf681f424,91104056,0,0x0,8
tick,0x7ffdf681f424,91105988,0,0x0,8
tick,0x7ffdf681f424,91107983,0,0x0,8
tick,0x7ffdf681f424,91109990,0,0x0,8
tick,0x7ffdf681f424,91111983,0,0x0,8
tick,0x7ffdf681f424,91113987,0,0x0,8
tick,0x7ffdf681f424,91115966,0,0x0,8
tick,0x7ffdf681f424,91117963,0,0x0,8
tick,0x7ffdf681f424,91120055,0,0x0,8
tick,0x7ffdf681f424,91122087,0,0x0,8
tick,0x7ffdf681f424,91124043,0,0x0,8
tick,0x7ffdf681f424,91126046,0,0x0,8
tick,0x7ffdf681f424,91127941,0,0x0,8
tick,0x7ffdf681f424,91130043,0,0x0,8
tick,0x7ffdf681f424,91132035,0,0x0,8
tick,0x7ffdf681f424,91134026,0,0x0,8
tick,0x7ffdf681f424,91135968,0,0x0,8
tick,0x7ffdf681f424,91138015,0,0x0,8
tick,0x7ffdf681f424,91140010,0,0x0,8
tick,0x7ffdf681f424,91142015,0,0x0,8
tick,0x7ffdf681f424,91144031,0,0x0,8
tick,0x7ffdf681f424,91146070,0,0x0,8
tick,0x7ffdf681f424,91148020,0,0x0,8
tick,0x7ffdf681f424,91149987,0,0x0,8
tick,0x7ffdf681f424,91151875,0,0x0,8
tick,0x7ffdf681f424,91153918,0,0x0,8
tick,0x7ffdf681f424,91155973,0,0x0,8
tick,0x7ffdf681f424,91157967,0,0x0,8
tick,0x7ffdf681f424,91159957,0,0x0,8
tick,0x7ffdf681f424,91161847,0,0x0,8
tick,0x7ffdf681f424,91163957,0,0x0,8
tick,0x7ffdf681f424,91165953,0,0x0,8
tick,0x7ffdf681f424,91167962,0,0x0,8
tick,0x7ffdf681f424,91169940,0,0x0,8
tick,0x7ffdf681f424,91171934,0,0x0,8
tick,0x7ffdf681f424,91173920,0,0x0,8
tick,0x7ffdf681f424,91175913,0,0x0,8
tick,0x7ffdf681f424,91177809,0,0x0,8
tick,0x7ffdf681f424,91179910,0,0x0,8
tick,0x7ffdf681f424,91181902,0,0x0,8
tick,0x7ffdf681f424,91183911,0,0x0,8
tick,0x7ffdf681f424,91185909,0,0x0,8
tick,0x7ffdf681f424,91187894,0,0x0,8
tick,0x7ffdf681f424,91189904,0,0x0,8
tick,0x7ffdf681f424,91191896,0,0x0,8
tick,0x7ffdf681f424,91193872,0,0x0,8
tick,0x7ffdf681f424,91195864,0,0x0,8
tick,0x7ffdf681f424,91197856,0,0x0,8
tick,0x7ffdf681f424,91199849,0,0x0,8
tick,0x7ffdf681f424,91201851,0,0x0,8
tick,0x7ffdf681f424,91203845,0,0x0,8
tick,0x7ffdf681f424,91205834,0,0x0,8
tick,0x7ffdf681f424,91207880,0,0x0,8
tick,0x7ffdf681f424,91209829,0,0x0,8
tick,0x7ffdf681f424,91211886,0,0x0,8
tick,0x7ffdf681f424,91213849,0,0x0,8
tick,0x7ffdf681f424,91215820,0,0x0,8
tick,0x7ffdf681f424,91217802,0,0x0,8
tick,0x7ffdf681f424,91219766,0,0x0,8
tick,0x7ffdf681f424,91221795,0,0x0,8
tick,0x7ffdf681f424,91223854,0,0x0,8
tick,0x7ffdf681f424,91225813,0,0x0,8
tick,0x7ffdf681f424,91227667,0,0x0,8
tick,0x7ffdf681f424,91229670,0,0x0,8
tick,0x7ffdf681f424,91231771,0,0x0,8
tick,0x7ffdf681f424,91233788,0,0x0,8
tick,0x7ffdf681f424,91235783,0,0x0,8
tick,0x7ffdf681f424,91237748,0,0x0,8
tick,0x7ffdf681f424,91239744,0,0x0,8
tick,0x7ffdf681f424,91241737,0,0x0,8
tick,0x7ffdf681f424,91243680,0,0x0,8
tick,0x7ffdf681f424,91245799,0,0x0,8
tick,0x7ffdf681f424,91247728,0,0x0,8
tick,0x7ffdf681f424,91249724,0,0x0,8
tick,0x7ffdf681f424,91251718,0,0x0,8
tick,0x7ffdf681f424,91253721,0,0x0,8
tick,0x7ffdf681f424,91255777,0,0x0,8
tick,0x7ffdf681f424,91257727,0,0x0,8
tick,0x7ffdf681f424,91259702,0,0x0,8
tick,0x7ffdf681f424,91261691,0,0x0,8
tick,0x7ffdf681f424,91263696,0,0x0,8
tick,0x7ffdf681f424,91265680,0,0x0,8
tick,0x7ffdf681f424,91267689,0,0x0,8
tick,0x7ffdf681f424,91269563,0,0x0,8
tick,0x7ffdf681f424,91271665,0,0x0,8
tick,0x7ffdf681f424,91273642,0,0x0,8
tick,0x7ffdf681f424,91275661,0,0x0,8
tick,0x7ffdf681f424,91277709,0,0x0,8
tick,0x7ffdf681f424,91279669,0,0x0,8
tick,0x7ffdf681f424,91281663,0,0x0,8
tick,0x7ffdf681f424,91283637,0,0x0,8
tick,0x7ffdf681f424,91285637,0,0x0,8
tick,0x7ffdf681f424,91287621,0,0x0,8
tick,0x7ffdf681f424,91289632,0,0x0,8
tick,0x7ffdf681f424,91291611,0,0x0,8
tick,0x7ffdf681f424,91293605,0,0x0,8
tick,0x7ffdf681f424,91295614,0,0x0,8
tick,0x7ffdf681f424,91297619,0,0x0,8
tick,0x7ffdf681f424,91299601,0,0x0,8
tick,0x7ffdf681f424,91301579,0,0x0,8
tick,0x7ffdf681f424,91303589,0,0x0,8
tick,0x7ffdf681f424,91305458,0,0x0,8
tick,0x7ffdf681f424,91307504,0,0x0,8
tick,0x7ffdf681f424,91309571,0,0x0,8
tick,0x7ffdf681f424,91311470,0,0x0,8
tick,0x7ffdf681f424,91313553,0,0x0,8
tick,0x7ffdf681f424,91315554,0,0x0,8
tick,0x7ffdf681f424,91317544,0,0x0,8
tick,0x7ffdf681f424,91319427,0,0x0,8
tick,0x7ffdf681f424,91321538,0,0x0,8
tick,0x7ffdf681f424,91323529,0,0x0,8
tick,0x7ffdf681f424,91325520,0,0x0,8
tick,0x7ffdf681f424,91327528,0,0x0,8
tick,0x7ffdf681f424,91329510,0,0x0,8
tick,0x7ffdf681f424,91331505,0,0x0,8
tick,0x7ffdf681f424,91333559,0,0x0,8
tick,0x7ffdf681f424,91335488,0,0x0,8
tick,0x7ffdf681f424,91337488,0,0x0,8
tick,0x7ffdf681f424,91339483,0,0x0,8
tick,0x7ffdf681f424,91341487,0,0x0,8
tick,0x7ffdf681f424,91343479,0,0x0,8
tick,0x7ffdf681f424,91345463,0,0x0,8
tick,0x7ffdf681f424,91347467,0,0x0,8
tick,0x7ffdf681f424,91349459,0,0x0,8
tick,0x7ffdf681f424,91351451,0,0x0,8
tick,0x7ffdf681f424,91353446,0,0x0,8
tick,0x7ffdf681f424,91355475,0,0x0,8
tick,0x7ffdf681f424,91357435,0,0x0,8
tick,0x7ffdf681f424,91359428,0,0x0,8
tick,0x7ffdf681f424,91361315,0,0x0,8
tick,0x7ffdf681f424,91363426,0,0x0,8
tick,0x7ffdf681f424,91365422,0,0x0,8
tick,0x7ffdf681f424,91367407,0,0x0,8
tick,0x7ffdf681f424,91369324,0,0x0,8
tick,0x7ffdf681f424,91371400,0,0x0,8
tick,0x7ffdf681f424,91373395,0,0x0,8
tick,0x7ffdf681f424,91375419,0,0x0,8
tick,0x7ffdf681f424,91377380,0,0x0,8
tick,0x7ffdf681f424,91379376,0,0x0,8
tick,0x7ffdf681f424,91381374,0,0x0,8
tick,0x7ffdf681f424,91383262,0,0x0,8
tick,0x7ffdf681f424,91385375,0,0x0,8
tick,0x7ffdf681f424,91387355,0,0x0,8
tick,0x7ffdf681f424,91389403,0,0x0,8
tick,0x7ffdf681f424,91391345,0,0x0,8
tick,0x7ffdf681f424,91393342,0,0x0,8
tick,0x7ffdf681f424,91395219,0,0x0,8
tick,0x7ffdf681f424,91397330,0,0x0,8
tick,0x7ffdf681f424,91399339,0,0x0,8
tick,0x7ffdf681f424,91401319,0,0x0,8
tick,0x7ffdf681f424,91403312,0,0x0,8
tick,0x7ffdf681f424,91405310,0,0x0,8
tick,0x7ffdf681f424,91407316,0,0x0,8
tick,0x7ffdf681f424,91409337,0,0x0,8
tick,0x7ffdf681f424,91411207,0,0x0,8
tick,0x7ffdf681f424,91413288,0,0x0,8
tick,0x7ffdf681f424,91415285,0,0x0,8
tick,0x7ffdf681f424,91417280,0,0x0,8
tick,0x7ffdf681f424,91419275,0,0x0,8
tick,0x7ffdf681f424,91421191,0,0x0,8
tick,0x7ffdf681f424,91423258,0,0x0,8
tick,0x7ffdf681f424,91425248,0,0x0,8
tick,0x7ffdf681f424,91427267,0,0x0,8
tick,0x7ffdf681f424,91429141,0,0x0,8
tick,0x7ffdf681f424,91431150,0,0x0,8
tick,0x7ffdf681f424,91433128,0,0x0,8
tick,0x7ffdf681f424,91435113,0,0x0,8
tick,0x7ffdf681f424,91437103,0,0x0,8
tick,0x7ffdf681f424,91439109,0,0x0,8
tick,0x7ffdf681f424,91441103,0,0x0,8
tick,0x7ffdf681f424,91443186,0,0x0,8
tick,0x7ffdf681f424,91445114,0,0x0,8
tick,0x7ffdf681f424,91447134,0,0x0,8
tick,0x7ffdf681f424,91449098,0,0x0,8
tick,0x7ffdf681f424,91451059,0,0x0,8
tick,0x7ffdf681f424,91453041,0,0x0,8
tick,0x7ffdf681f424,91455031,0,0x0,8
tick,0x7ffdf681f424,91457046,0,0x0,8
tick,0x7ffdf681f424,91459105,0,0x0,8
tick,0x7ffdf681f424,91461095,0,0x0,8
tick,0x7ffdf681f424,91462183,0,0x0,8
tick,0x7ffdf681f424,91464218,0,0x0,8
tick,0x7ffdf681f424,91466175,0,0x0,8
tick,0x7ffdf681f424,91467313,0,0x0,8
tick,0x7ffdf681f424,91469318,0,0x0,8
tick,0x7ffdf681f424,91471300,0,0x0,8
tick,0x7ffdf681f424,91473432,0,0x0,8
tick,0x7ffdf681f424,91475363,0,0x0,8
tick,0x7ffdf681f424,91477249,0,0x0,8
tick,0x7ffdf681f424,91479265,0,0x0,8
tick,0x7ffdf681f424,91481263,0,0x0,8
tick,0x7ffdf681f424,91483291,0,0x0,8
tick,0x7ffdf681f424,91485251,0,0x0,8
tick,0x7ffdf681f424,91487247,0,0x0,8
tick,0x7ffdf681f424,91489242,0,0x0,8
tick,0x7ffdf681f424,91491235,0,0x0,8
tick,0x7ffdf681f424,91493235,0,0x0,8
tick,0x7ffdf681f424,91495238,0,0x0,8
tick,0x7ffdf681f424,91497238,0,0x0,8
tick,0x7ffdf681f424,91499109,0,0x0,8
tick,0x7ffdf681f424,91501141,0,0x0,8
tick,0x7ffdf681f424,91503178,0,0x0,8
tick,0x7ffdf681f424,91505189,0,0x0,8
tick,0x7ffdf681f424,91507156,0,0x0,8
tick,0x7ffdf681f424,91509153,0,0x0,8
tick,0x7ffdf681f424,91511159,0,0x0,8
tick,0x7ffdf681f424,91513136,0,0x0,8
tick,0x7ffdf681f424,91515081,0,0x0,8
tick,0x7ffdf681f424,91517027,0,0x0,8
tick,0x7ffdf681f424,91519032,0,0x0,8
tick,0x7ffdf681f424,91521003,0,0x0,8
tick,0x7ffdf681f424,91523111,0,0x0,8
tick,0x7ffdf681f424,91525105,0,0x0,8
tick,0x7ffdf681f424,91527127,0,0x0,8
tick,0x7ffdf681f424,91529094,0,0x0,8
tick,0x7ffdf681f424,91531090,0,0x0,8
tick,0x7ffdf681f424,91533092,0,0x0,8
tick,0x7ffdf681f424,91535101,0,0x0,8
tick,0x7ffdf681f424,91537072,0,0x0,8
tick,0x7ffdf681f424,91539084,0,0x0,8
tick,0x7ffdf681f424,91541190,0,0x0,8
tick,0x7ffdf681f424,91542359,0,0x0,8
tick,0x7ffdf681f424,91543594,0,0x0,8
tick,0x7ffdf681f424,91545789,0,0x0,8
tick,0x7ffdf681f424,91547753,0,0x0,8
tick,0x7ffdf681f424,91549745,0,0x0,8
tick,0x7ffdf681f424,91551800,0,0x0,8
tick,0x7ffdf681f424,91553736,0,0x0,8
tick,0x7ffdf681f424,91555738,0,0x0,8
tick,0x7ffdf681f424,91557611,0,0x0,8
tick,0x7ffdf681f424,91558746,0,0x0,8
tick,0x7ffdf681f424,91560715,0,0x0,8
tick,0x7ffdf681f424,91561932,0,0x0,8
tick,0x7ffdf681f424,91563910,0,0x0,8
tick,0x7ffdf681f424,91565889,0,0x0,8
tick,0x7ffdf681f424,91567861,0,0x0,8
tick,0x7ffdf681f424,91569040,0,0x0,8
tick,0x7ffdf681f424,91571021,0,0x0,8
tick,0x7ffdf681f424,91573040,0,0x0,8
tick,0x7ffdf681f424,91574197,0,0x0,8
tick,0x7ffdf681f424,91575363,0,0x0,8
tick,0x7ffdf681f424,91576501,0,0x0,8
tick,0x7ffdf681f424,91578529,0,0x0,8
tick,0x7ffdf681f424,91579643,0,0x0,8
tick,0x7ffdf681f424,91581651,0,0x0,8
tick,0x7ffdf681f424,91583711,0,0x0,8
tick,0x7ffdf681f424,91584869,0,0x0,8
tick,0x7ffdf681f424,91585999,0,0x0,8
tick,0x7ffdf681f424,91588033,0,0x0,8
tick,0x7ffdf681f424,91589952,0,0x0,8
tick,0x7ffdf681f424,91592054,0,0x0,8
tick,0x7ffdf681f424,91594054,0,0x0,8
tick,0x7ffdf681f424,91595258,0,0x0,8
tick,0x7ffdf681f424,91596429,0,0x0,8
tick,0x7ffdf681f424,91597598,0,0x0,8
tick,0x7ffdf681f424,91599609,0,0x0,8
tick,0x7ffdf681f424,91600768,0,0x0,8
tick,0x7ffdf681f424,91602688,0,0x0,8
tick,0x7ffdf681f424,91604805,0,0x0,8
tick,0x7ffdf681f424,91605887,0,0x0,8
tick,0x7ffdf681f424,91607044,0,0x0,8
tick,0x7ffdf681f424,91608137,0,0x0,8
tick,0x7ffdf681f424,91610144,0,0x0,8
tick,0x7ffdf681f424,91612026,0,0x0,8
tick,0x7ffdf681f424,91613184,0,0x0,8
tick,0x7ffdf681f424,91615145,0,0x0,8
tick,0x7ffdf681f424,91617276,0,0x0,8
tick,0x7ffdf681f424,91619241,0,0x0,8
tick,0x7ffdf681f424,91621221,0,0x0,8
tick,0x7ffdf681f424,91623216,0,0x0,8
tick,0x7ffdf681f424,91625224,0,0x0,8
tick,0x7ffdf681f424,91627214,0,0x0,8
tick,0x7ffdf681f424,91629217,0,0x0,8
tick,0x7ffdf681f424,91631202,0,0x0,8
tick,0x7ffdf681f424,91633249,0,0x0,8
tick,0x7ffdf681f424,91635217,0,0x0,8
tick,0x7ffdf681f424,91637186,0,0x0,8
tick,0x7ffdf681f424,91639194,0,0x0,8
tick,0x7ffdf681f424,91641176,0,0x0,8
tick,0x7ffdf681f424,91643172,0,0x0,8
tick,0x7ffdf681f424,91645171,0,0x0,8
tick,0x7ffdf681f424,91647174,0,0x0,8
tick,0x7ffdf681f424,91649162,0,0x0,8
tick,0x7ffdf681f424,91651152,0,0x0,8
tick,0x7ffdf681f424,91653041,0,0x0,8
tick,0x7ffdf681f424,91655140,0,0x0,8
tick,0x7ffdf681f424,91657165,0,0x0,8
tick,0x7ffdf681f424,91659134,0,0x0,8
tick,0x7ffdf681f424,91661060,0,0x0,8
tick,0x7ffdf681f424,91663123,0,0x0,8
tick,0x7ffdf681f424,91665128,0,0x0,8
tick,0x7ffdf681f424,91667117,0,0x0,8
tick,0x7ffdf681f424,91669116,0,0x0,8
tick,0x7ffdf681f424,91671103,0,0x0,8
tick,0x7ffdf681f424,91673127,0,0x0,8
tick,0x7ffdf681f424,91675096,0,0x0,8
tick,0x7ffdf681f424,91677145,0,0x0,8
tick,0x7ffdf681f424,91679106,0,0x0,8
tick,0x7ffdf681f424,91681071,0,0x0,8
tick,0x7ffdf681f424,91683032,0,0x0,8
tick,0x7ffdf681f424,91685073,0,0x0,8
tick,0x7ffdf681f424,91686952,0,0x0,8
tick,0x7ffdf681f424,91688965,0,0x0,8
tick,0x7ffdf681f424,91691062,0,0x0,8
tick,0x7ffdf681f424,91693054,0,0x0,8
tick,0x7ffdf681f424,91695020,0,0x0,8
tick,0x7ffdf681f424,91697030,0,0x0,8
tick,0x7ffdf681f424,91699111,0,0x0,8
tick,0x7ffdf681f424,91701047,0,0x0,8
tick,0x7ffdf681f424,91702922,0,0x0,8
tick,0x7ffdf681f424,91705023,0,0x0,8
tick,0x7ffdf681f424,91707011,0,0x0,8
tick,0x7ffdf681f424,91709001,0,0x0,8
tick,0x7ffdf681f424,91711001,0,0x0,8
tick,0x7ffdf681f424,91712996,0,0x0,8
tick,0x7ffdf681f424,91714985,0,0x0,8
tick,0x7ffdf681f424,91716975,0,0x0,8
tick,0x7ffdf681f424,91718975,0,0x0,8
tick,0x7ffdf681f424,91720964,0,0x0,8
tick,0x7ffdf681f424,91722988,0,0x0,8
tick,0x7ffdf681f424,91724968,0,0x0,8
tick,0x7ffdf681f424,91726963,0,0x0,8
tick,0x7ffdf681f424,91728947,0,0x0,8
tick,0x7ffdf681f424,91730947,0,0x0,8
tick,0x7ffdf681f424,91732940,0,0x0,8
tick,0x7ffdf681f424,91734835,0,0x0,8
tick,0x7ffdf681f424,91736925,0,0x0,8
tick,0x7ffdf681f424,91738925,0,0x0,8
tick,0x7ffdf681f424,91740916,0,0x0,8
tick,0x7ffdf681f424,91742938,0,0x0,8
tick,0x7ffdf681f424,91744928,0,0x0,8
tick,0x7ffdf681f424,91746899,0,0x0,8
tick,0x7ffdf681f424,91748900,0,0x0,8
tick,0x7ffdf681f424,91750889,0,0x0,8
tick,0x7ffdf681f424,91752768,0,0x0,8
tick,0x7ffdf681f424,91754743,0,0x0,8
tick,0x7ffdf681f424,91756883,0,0x0,8
tick,0x7ffdf681f424,91758757,0,0x0,8
tick,0x7ffdf681f424,91760754,0,0x0,8
tick,0x7ffdf681f424,91762743,0,0x0,8
tick,0x7ffdf681f424,91764834,0,0x0,8
tick,0x7ffdf681f424,91766789,0,0x0,8
tick,0x7ffdf681f424,91768789,0,0x0,8
tick,0x7ffdf681f424,91770726,0,0x0,8
tick,0x7ffdf681f424,91772772,0,0x0,8
tick,0x7ffdf681f424,91774777,0,0x0,8
tick,0x7ffdf681f424,91776763,0,0x0,8
tick,0x7ffdf681f424,91778764,0,0x0,8
tick,0x7ffdf681f424,91780751,0,0x0,8
tick,0x7ffdf681f424,91782696,0,0x0,8
tick,0x7ffdf681f424,91784706,0,0x0,8
tick,0x7ffdf681f424,91786789,0,0x0,8
tick,0x7ffdf681f424,91788684,0,0x0,8
tick,0x7ffdf681f424,91790719,0,0x0,8
tick,0x7ffdf681f424,91792725,0,0x0,8
tick,0x7ffdf681f424,91794726,0,0x0,8
tick,0x7ffdf681f424,91796711,0,0x0,8
tick,0x7ffdf681f424,91798715,0,0x0,8
tick,0x7ffdf681f424,91800702,0,0x0,8
tick,0x7ffdf681f424,91802690,0,0x0,8
tick,0x7ffdf681f424,91804692,0,0x0,8
tick,0x7ffdf681f424,91806676,0,0x0,8
tick,0x7ffdf681f424,91808714,0,0x0,8
tick,0x7ffdf681f424,91810678,0,0x0,8
tick,0x7ffdf681f424,91812696,0,0x0,8
tick,0x7ffdf681f424,91814663,0,0x0,8
tick,0x7ffdf681f424,91816655,0,0x0,8
tick,0x7ffdf681f424,91818661,0,0x0,8
tick,0x7ffdf681f424,91820647,0,0x0,8
tick,0x7ffdf681f424,91822652,0,0x0,8
tick,0x7ffdf681f424,91824576,0,0x0,8
tick,0x7ffdf681f424,91826622,0,0x0,8
tick,0x7ffdf681f424,91828575,0,0x0,8
tick,0x7ffdf681f424,91830629,0,0x0,8
tick,0x7ffdf681f424,91832591,0,0x0,8
tick,0x7ffdf681f424,91834550,0,0x0,8
tick,0x7ffdf681f424,91836551,0,0x0,8
tick,0x7ffdf681f424,91838546,0,0x0,8
tick,0x7ffdf681f424,91840564,0,0x0,8
tick,0x7ffdf681f424,91842530,0,0x0,8
tick,0x7ffdf681f424,91844516,0,0x0,8
tick,0x7ffdf681f424,91846544,0,0x0,8
tick,0x7ffdf681f424,91848507,0,0x0,8
tick,0x7ffdf681f424,91850566,0,0x0,8
tick,0x7ffdf681f424,91852506,0,0x0,8
tick,0x7ffdf681f424,91854566,0,0x0,8
tick,0x7ffdf681f424,91856552,0,0x0,8
tick,0x7ffdf681f424,91858553,0,0x0,8
tick,0x7ffdf681f424,91860491,0,0x0,8
tick,0x7ffdf681f424,91862471,0,0x0,8
tick,0x7ffdf681f424,91864508,0,0x0,8
tick,0x7ffdf681f424,91866516,0,0x0,8
tick,0x7ffdf681f424,91868457,0,0x0,8
tick,0x7ffdf681f424,91870449,0,0x0,8
tick,0x7ffdf681f424,91872445,0,0x0,8
tick,0x7ffdf681f424,91874457,0,0x0,8
tick,0x7ffdf681f424,91876487,0,0x0,8
tick,0x7ffdf681f424,91878483,0,0x0,8
tick,0x7ffdf681f424,91880418,0,0x0,8
tick,0x7ffdf681f424,91882467,0,0x0,8
tick,0x7ffdf681f424,91884476,0,0x0,8
tick,0x7ffdf681f424,91886429,0,0x0,8
tick,0x7ffdf681f424,91888394,0,0x0,8
tick,0x7ffdf681f424,91890373,0,0x0,8
tick,0x7ffdf681f424,91892410,0,0x0,8
tick,0x7ffdf681f424,91894410,0,0x0,8
tick,0x7ffdf681f424,91896356,0,0x0,8
tick,0x7ffdf681f424,91898380,0,0x0,8
tick,0x7ffdf681f424,91900348,0,0x0,8
tick,0x7ffdf681f424,91902346,0,0x0,8
tick,0x7ffdf681f424,91904393,0,0x0,8
tick,0x7ffdf681f424,91906345,0,0x0,8
tick,0x7ffdf681f424,91908393,0,0x0,8
tick,0x7ffdf681f424,91910386,0,0x0,8
tick,0x7ffdf681f424,91912402,0,0x0,8
tick,0x7ffdf681f424,91914344,0,0x0,8
tick,0x7ffdf681f424,91916334,0,0x0,8
tick,0x7ffdf681f424,91918310,0,0x0,8
tick,0x7ffdf681f424,91920328,0,0x0,8
tick,0x7ffdf681f424,91922316,0,0x0,8
tick,0x7ffdf681f424,91924296,0,0x0,8
tick,0x7ffdf681f424,91926298,0,0x0,8
tick,0x7ffdf681f424,91928299,0,0x0,8
tick,0x7ffdf681f424,91930353,0,0x0,8
tick,0x7ffdf681f424,91932347,0,0x0,8
tick,0x7ffdf681f424,91934336,0,0x0,8
tick,0x7ffdf681f424,91936340,0,0x0,8
tick,0x7ffdf681f424,91938331,0,0x0,8
tick,0x7ffdf681f424,91940270,0,0x0,8
tick,0x7ffdf681f424,91942327,0,0x0,8
tick,0x7ffdf681f424,91944313,0,0x0,8
tick,0x7ffdf681f424,91946325,0,0x0,8
tick,0x7ffdf681f424,91948263,0,0x0,8
tick,0x7ffdf681f424,91950272,0,0x0,8
tick,0x7ffdf681f424,91952270,0,0x0,8
tick,0x7ffdf681f424,91954265,0,0x0,8
tick,0x7ffdf681f424,91956263,0,0x0,8
tick,0x7ffdf681f424,91958275,0,0x0,8
tick,0x7ffdf681f424,91960294,0,0x0,8
tick,0x7ffdf681f424,91962259,0,0x0,8
tick,0x7ffdf681f424,91964317,0,0x0,8
tick,0x7ffdf681f424,91966284,0,0x0,8
tick,0x7ffdf681f424,91968261,0,0x0,8
tick,0x7ffdf681f424,91970243,0,0x0,8
tick,0x7ffdf681f424,91972260,0,0x0,8
tick,0x7ffdf681f424,91974325,0,0x0,8
tick,0x7ffdf681f424,91976301,0,0x0,8
tick,0x7ffdf681f424,91978165,0,0x0,8
tick,0x7ffdf681f424,91980274,0,0x0,8
tick,0x7ffdf681f424,91982263,0,0x0,8
tick,0x7ffdf681f424,91984291,0,0x0,8
tick,0x7ffdf681f424,91986204,0,0x0,8
tick,0x7ffdf681f424,91988242,0,0x0,8
tick,0x7ffdf681f424,91990245,0,0x0,8
tick,0x7ffdf681f424,91992243,0,0x0,8
tick,0x7ffdf681f424,91994173,0,0x0,8
tick,0x7ffdf681f424,91996186,0,0x0,8
tick,0x7ffdf681f424,91998238,0,0x0,8
tick,0x7ffdf681f424,92000228,0,0x0,8
tick,0x7ffdf681f424,92002210,0,0x0,8
tick,0x7ffdf681f424,92004205,0,0x0,8
tick,0x7ffdf681f424,92006203,0,0x0,8
tick,0x7ffdf681f424,92008194,0,0x0,8
tick,0x7ffdf681f424,92010190,0,0x0,8
tick,0x7ffdf681f424,92012179,0,0x0,8
tick,0x7ffdf681f424,92014178,0,0x0,8
tick,0x7ffdf681f424,92016179,0,0x0,8
tick,0x7ffdf681f424,92018160,0,0x0,8
tick,0x7ffdf681f424,92020149,0,0x0,8
tick,0x7ffdf681f424,92022159,0,0x0,8
tick,0x7ffdf681f424,92024158,0,0x0,8
tick,0x7ffdf681f424,92026148,0,0x0,8
tick,0x7ffdf681f424,92028106,0,0x0,8
tick,0x7ffdf681f424,92030164,0,0x0,8
tick,0x7ffdf681f424,92032131,0,0x0,8
tick,0x7ffdf681f424,92034125,0,0x0,8
tick,0x7ffdf681f424,92036051,0,0x0,8
tick,0x7ffdf681f424,92038114,0,0x0,8
tick,0x7ffdf681f424,92040120,0,0x0,8
tick,0x7ffdf681f424,92041995,0,0x0,8
tick,0x7ffdf681f424,92044030,0,0x0,8
tick,0x7ffdf681f424,92046104,0,0x0,8
tick,0x7ffdf681f424,92048092,0,0x0,8
tick,0x7ffdf681f424,92050080,0,0x0,8
tick,0x7ffdf681f424,92052083,0,0x0,8
tick,0x7ffdf681f424,92054074,0,0x0,8
tick,0x7ffdf681f424,92056071,0,0x0,8
tick,0x7ffdf681f424,92058072,0,0x0,8
tick,0x7ffdf681f424,92060063,0,0x0,8
tick,0x7ffdf681f424,92061953,0,0x0,8
tick,0x7ffdf681f424,92064060,0,0x0,8
tick,0x7ffdf681f424,92066046,0,0x0,8
tick,0x7ffdf681f424,92068041,0,0x0,8
tick,0x7ffdf681f424,92070030,0,0x0,8
tick,0x7ffdf681f424,92071932,0,0x0,8
tick,0x7ffdf681f424,92073944,0,0x0,8
tick,0x7ffdf681f424,92075985,0,0x0,8
tick,0x7ffdf681f424,92077874,0,0x0,8
tick,0x7ffdf681f424,92080009,0,0x0,8
tick,0x7ffdf681f424,92082050,0,0x0,8
tick,0x7ffdf681f424,92084001,0,0x0,8
tick,0x7ffdf681f424,92086027,0,0x0,8
tick,0x7ffdf681f424,92087985,0,0x0,8
tick,0x7ffdf681f424,92089986,0,0x0,8
tick,0x7ffdf681f424,92091989,0,0x0,8
tick,0x7ffdf681f424,92094047,0,0x0,8
tick,0x7ffdf681f424,92095989,0,0x0,8
tick,0x7ffdf681f424,92097974,0,0x0,8
tick,0x7ffdf681f424,92099979,0,0x0,8
tick,0x7ffdf681f424,92101950,0,0x0,8
tick,0x7ffdf681f424,92103944,0,0x0,8
tick,0x7ffdf681f424,92105947,0,0x0,8
tick,0x7ffdf681f424,92107945,0,0x0,8
tick,0x7ffdf681f424,92109930,0,0x0,8
tick,0x7ffdf681f424,92111922,0,0x0,8
tick,0x7ffdf681f424,92113923,0,0x0,8
tick,0x7ffdf681f424,92115921,0,0x0,8
tick,0x7ffdf681f424,92117938,0,0x0,8
tick,0x7ffdf681f424,92119841,0,0x0,8
tick,0x7ffdf681f424,92121896,0,0x0,8
tick,0x7ffdf681f424,92123892,0,0x0,8
tick,0x7ffdf681f424,92125893,0,0x0,8
tick,0x7ffdf681f424,92127783,0,0x0,8
tick,0x7ffdf681f424,92129889,0,0x0,8
tick,0x7ffdf681f424,92131871,0,0x0,8
tick,0x7ffdf681f424,92133865,0,0x0,8
tick,0x7ffdf681f424,92135860,0,0x0,8
tick,0x7ffdf681f424,92137780,0,0x0,8
tick,0x7ffdf681f424,92139871,0,0x0,8
tick,0x7ffdf681f424,92141843,0,0x0,8
tick,0x7ffdf681f424,92143836,0,0x0,8
tick,0x7ffdf681f424,92145837,0,0x0,8
tick,0x7ffdf681f424,92147723,0,0x0,8
tick,0x7ffdf681f424,92149783,0,0x0,8
tick,0x7ffdf681f424,92151828,0,0x0,8
tick,0x7ffdf681f424,92153703,0,0x0,8
tick,0x7ffdf681f424,92155806,0,0x0,8
tick,0x7ffdf681f424,92157701,0,0x0,8
tick,0x7ffdf681f424,92159834,0,0x0,8
tick,0x7ffdf681f424,92161817,0,0x0,8
tick,0x7ffdf681f424,92163670,0,0x0,8
tick,0x7ffdf681f424,92165774,0,0x0,8
tick,0x7ffdf681f424,92167774,0,0x0,8
tick,0x7ffdf681f424,92169660,0,0x0,8
tick,0x7ffdf681f424,92171760,0,0x0,8
tick,0x7ffdf681f424,92173766,0,0x0,8
tick,0x7ffdf681f424,92175730,0,0x0,8
tick,0x7ffdf681f424,92177767,0,0x0,8
tick,0x7ffdf681f424,92179745,0,0x0,8
tick,0x7ffdf681f424,92181804,0,0x0,8
tick,0x7ffdf681f424,92183753,0,0x0,8
tick,0x7ffdf681f424,92185720,0,0x0,8
tick,0x7ffdf681f424,92187712,0,0x0,8
tick,0x7ffdf681f424,92189741,0,0x0,8
tick,0x7ffdf681f424,92191711,0,0x0,8
tick,0x7ffdf681f424,92193737,0,0x0,8
tick,0x7ffdf681f424,92195621,0,0x0,8
tick,0x7ffdf681f424,92197727,0,0x0,8
tick,0x7ffdf681f424,92199683,0,0x0,8
tick,0x7ffdf681f424,92201684,0,0x0,8
tick,0x7ffdf681f424,92203728,0,0x0,8
tick,0x7ffdf681f424,92205699,0,0x0,8
tick,0x7ffdf681f424,92207583,0,0x0,8
tick,0x7ffdf681f424,92209688,0,0x0,8
tick,0x7ffdf681f424,92211660,0,0x0,8
tick,0x7ffdf681f424,92213544,0,0x0,8
tick,0x7ffdf681f424,92215655,0,0x0,8
tick,0x7ffdf681f424,92217654,0,0x0,8
tick,0x7ffdf681f424,92219524,0,0x0,8
tick,0x7ffdf681f424,92221630,0,0x0,8
tick,0x7ffdf681f424,92223619,0,0x0,8
tick,0x7ffdf681f424,92225517,0,0x0,8
tick,0x7ffdf681f424,92227614,0,0x0,8
tick,0x7ffdf681f424,92229529,0,0x0,8
tick,0x7ffdf681f424,92231495,0,0x0,8
tick,0x7ffdf681f424,92233599,0,0x0,8
tick,0x7ffdf681f424,92235588,0,0x0,8
tick,0x7ffdf681f424,92237636,0,0x0,8
tick,0x7ffdf681f424,92239548,0,0x0,8
tick,0x7ffdf681f424,92241575,0,0x0,8
tick,0x7ffdf681f424,92243585,0,0x0,8
tick,0x7ffdf681f424,92245617,0,0x0,8
tick,0x7ffdf681f424,92247548,0,0x0,8
tick,0x7ffdf681f424,92249443,0,0x0,8
tick,0x7ffdf681f424,92251552,0,0x0,8
tick,0x7ffdf681f424,92253556,0,0x0,8
tick,0x7ffdf681f424,92255544,0,0x0,8
tick,0x7ffdf681f424,92257426,0,0x0,8
tick,0x7ffdf681f424,92259538,0,0x0,8
tick,0x7ffdf681f424,92261430,0,0x0,8
tick,0x7ffdf681f424,92263455,0,0x0,8
tick,0x7ffdf681f424,92265513,0,0x0,8
tick,0x7ffdf681f424,92267510,0,0x0,8
tick,0x7ffdf681f424,92269452,0,0x0,8
tick,0x7ffdf681f424,92271489,0,0x0,8
tick,0x7ffdf681f424,92273496,0,0x0,8
tick,0x7ffdf681f424,92275484,0,0x0,8
tick,0x7ffdf681f424,92277481,0,0x0,8
tick,0x7ffdf681f424,92279473,0,0x0,8
tick,0x7ffdf681f424,92281462,0,0x0,8
tick,0x7ffdf681f424,92283473,0,0x0,8
tick,0x7ffdf681f424,92285464,0,0x0,8
tick,0x7ffdf681f424,92287341,0,0x0,8
tick,0x7ffdf681f424,92289451,0,0x0,8
tick,0x7ffdf681f424,92291481,0,0x0,8
tick,0x7ffdf681f424,92293396,0,0x0,8
tick,0x7ffdf681f424,92295433,0,0x0,8
tick,0x7ffdf681f424,92297423,0,0x0,8
tick,0x7ffdf681f424,92299437,0,0x0,8
tick,0x7ffdf681f424,92301309,0,0x0,8
tick,0x7ffdf681f424,92303343,0,0x0,8
tick,0x7ffdf681f424,92305420,0,0x0,8
tick,0x7ffdf681f424,92307404,0,0x0,8
tick,0x7ffdf681f424,92309402,0,0x0,8
tick,0x7ffdf681f424,92311275,0,0x0,8
tick,0x7ffdf681f424,92313383,0,0x0,8
tick,0x7ffdf681f424,92315359,0,0x0,8
tick,0x7ffdf681f424,92317375,0,0x0,8
tick,0x7ffdf681f424,92319375,0,0x0,8
tick,0x7ffdf681f424,92321364,0,0x0,8
tick,0x7ffdf681f424,92323358,0,0x0,8
tick,0x7ffdf681f424,92325364,0,0x0,8
tick,0x7ffdf681f424,92327346,0,0x0,8
tick,0x7ffdf681f424,92329343,0,0x0,8
tick,0x7ffdf681f424,92331340,0,0x0,8
tick,0x7ffdf681f424,92333272,0,0x0,8
tick,0x7ffdf681f424,92335313,0,0x0,8
tick,0x7ffdf681f424,92337319,0,0x0,8
tick,0x7ffdf681f424,92339318,0,0x0,8
tick,0x7ffdf681f424,92341317,0,0x0,8
tick,0x7ffdf681f424,92343302,0,0x0,8
tick,0x7ffdf681f424,92345286,0,0x0,8
tick,0x7ffdf681f424,92347306,0,0x0,8
tick,0x7ffdf681f424,92349227,0,0x0,8
tick,0x7ffdf681f424,92351283,0,0x0,8
tick,0x7ffdf681f424,92353160,0,0x0,8
tick,0x7ffdf681f424,92355273,0,0x0,8
tick,0x7ffdf681f424,92357310,0,0x0,8
tick,0x7ffdf681f424,92359178,0,0x0,8
tick,0x7ffdf681f424,92361150,0,0x0,8
tick,0x7ffdf681f424,92363254,0,0x0,8
tick,0x7ffdf681f424,92365246,0,0x0,8
tick,0x7ffdf681f424,92367245,0,0x0,8
tick,0x7ffdf681f424,92369243,0,0x0,8
tick,0x7ffdf681f424,92371241,0,0x0,8
tick,0x7ffdf681f424,92373229,0,0x0,8
tick,0x7ffdf681f424,92375217,0,0x0,8
tick,0x7ffdf681f424,92377211,0,0x0,8
tick,0x7ffdf681f424,92379104,0,0x0,8
tick,0x7ffdf681f424,92381204,0,0x0,8
tick,0x7ffdf681f424,92383198,0,0x0,8
tick,0x7ffdf681f424,92385199,0,0x0,8
tick,0x7ffdf681f424,92387078,0,0x0,8
tick,0x7ffdf681f424,92389203,0,0x0,8
tick,0x7ffdf681f424,92391209,0,0x0,8
tick,0x7ffdf681f424,92393202,0,0x0,8
tick,0x7ffdf681f424,92395173,0,0x0,8
tick,0x7ffdf681f424,92397160,0,0x0,8
tick,0x7ffdf681f424,92399177,0,0x0,8
tick,0x7ffdf681f424,92401243,0,0x0,8
tick,0x7ffdf681f424,92403065,0,0x0,8
tick,0x7ffdf681f424,92405139,0,0x0,8
tick,0x7ffdf681f424,92407132,0,0x0,8
tick,0x7ffdf681f424,92409188,0,0x0,8
tick,0x7ffdf681f424,92411134,0,0x0,8
tick,0x7ffdf681f424,92413123,0,0x0,8
tick,0x7ffdf681f424,92415120,0,0x0,8
tick,0x7ffdf681f424,92417107,0,0x0,8
tick,0x7ffdf681f424,92419103,0,0x0,8
tick,0x7ffdf681f424,92421098,0,0x0,8
tick,0x7ffdf681f424,92423087,0,0x0,8
tick,0x7ffdf681f424,92425144,0,0x0,8
tick,0x7ffdf681f424,92427085,0,0x0,8
tick,0x7ffdf681f424,92428943,0,0x0,8
tick,0x7ffdf681f424,92430968,0,0x0,8
tick,0x7ffdf681f424,92432897,0,0x0,8
tick,0x7ffdf681f424,92434889,0,0x0,8
tick,0x7ffdf681f424,92436906,0,0x0,8
tick,0x7ffdf681f424,92438883,0,0x0,8
tick,0x7ffdf681f424,92440878,0,0x0,8
tick,0x7ffdf681f424,92442882,0,0x0,8
tick,0x7ffdf681f424,92444875,0,0x0,8
tick,0x7ffdf681f424,92446865,0,0x0,8
tick,0x7ffdf681f424,92448861,0,0x0,8
tick,0x7ffdf681f424,92450851,0,0x0,8
tick,0x7ffdf681f424,92452853,0,0x0,8
tick,0x7ffdf681f424,92454848,0,0x0,8
tick,0x7ffdf681f424,92456836,0,0x0,8
tick,0x7ffdf681f424,92458870,0,0x0,8
tick,0x7ffdf681f424,92460834,0,0x0,8
tick,0x7ffdf681f424,92462854,0,0x0,8
tick,0x7ffdf681f424,92464889,0,0x0,8
tick,0x7ffdf681f424,92466840,0,0x0,8
tick,0x7ffdf681f424,92468833,0,0x0,8
tick,0x7ffdf681f424,92470829,0,0x0,8
tick,0x7ffdf681f424,92472820,0,0x0,8
tick,0x7ffdf681f424,92474781,0,0x0,8
tick,0x7ffdf681f424,92476806,0,0x0,8
tick,0x7ffdf681f424,92478845,0,0x0,8
tick,0x7ffdf681f424,92480827,0,0x0,8
tick,0x7ffdf681f424,92482809,0,0x0,8
tick,0x7ffdf681f424,92484871,0,0x0,8
tick,0x7ffdf681f424,92486859,0,0x0,8
tick,0x7ffdf681f424,92488770,0,0x0,8
tick,0x7ffdf681f424,92490748,0,0x0,8
tick,0x7ffdf681f424,92492727,0,0x0,8
tick,0x7ffdf681f424,92494844,0,0x0,8
tick,0x7ffdf681f424,92496831,0,0x0,8
tick,0x7ffdf681f424,92498776,0,0x0,8
tick,0x7ffdf681f424,92500881,0,0x0,8
tick,0x7ffdf681f424,92502847,0,0x0,8
tick,0x7ffdf681f424,92504851,0,0x0,8
tick,0x7ffdf681f424,92506861,0,0x0,8
tick,0x7ffdf681f424,92508853,0,0x0,8
tick,0x7ffdf681f424,92510858,0,0x0,8
tick,0x7ffdf681f424,92512871,0,0x0,8
tick,0x7ffdf681f424,92514835,0,0x0,8
tick,0x7ffdf681f424,92516834,0,0x0,8
tick,0x7ffdf681f424,92518825,0,0x0,8
tick,0x7ffdf681f424,92520789,0,0x0,8
tick,0x7ffdf681f424,92522714,0,0x0,8
tick,0x7ffdf681f424,92524817,0,0x0,8
tick,0x7ffdf681f424,92526808,0,0x0,8
tick,0x7ffdf681f424,92528689,0,0x0,8
tick,0x7ffdf681f424,92530747,0,0x0,8
tick,0x7ffdf681f424,92532797,0,0x0,8
tick,0x7ffdf681f424,92534753,0,0x0,8
tick,0x7ffdf681f424,92536701,0,0x0,8
tick,0x7ffdf681f424,92538780,0,0x0,8
tick,0x7ffdf681f424,92540774,0,0x0,8
tick,0x7ffdf681f424,92542765,0,0x0,8
tick,0x7ffdf681f424,92544732,0,0x0,8
tick,0x7ffdf681f424,92546648,0,0x0,8
tick,0x7ffdf681f424,92548653,0,0x0,8
tick,0x7ffdf681f424,92550739,0,0x0,8
tick,0x7ffdf681f424,92552746,0,0x0,8
tick,0x7ffdf681f424,92554772,0,0x0,8
tick,0x7ffdf681f424,92556771,0,0x0,8
tick,0x7ffdf681f424,92558748,0,0x0,8
tick,0x7ffdf681f424,92560720,0,0x0,8
tick,0x7ffdf681f424,92562716,0,0x0,8
tick,0x7ffdf681f424,92564710,0,0x0,8
tick,0x7ffdf681f424,92566696,0,0x0,8
tick,0x7ffdf681f424,92568704,0,0x0,8
tick,0x7ffdf681f424,92570587,0,0x0,8
tick,0x7ffdf681f424,92572597,0,0x0,8
tick,0x7ffdf681f424,92574680,0,0x0,8
tick,0x7ffdf681f424,92576675,0,0x0,8
tick,0x7ffdf681f424,92578613,0,0x0,8
tick,0x7ffdf681f424,92580670,0,0x0,8
tick,0x7ffdf681f424,92582658,0,0x0,8
tick,0x7ffdf681f424,92584654,0,0x0,8
tick,0x7ffdf681f424,92586537,0,0x0,8
tick,0x7ffdf681f424,92588542,0,0x0,8
tick,0x7ffdf681f424,92590672,0,0x0,8
tick,0x7ffdf681f424,92592656,0,0x0,8
tick,0x7ffdf681f424,92594535,0,0x0,8
tick,0x7ffdf681f424,92596518,0,0x0,8
tick,0x7ffdf681f424,92598544,0,0x0,8
tick,0x7ffdf681f424,92600615,0,0x0,8
tick,0x7ffdf681f424,92602605,0,0x0,8
tick,0x7ffdf681f424,92604607,0,0x0,8
tick,0x7ffdf681f424,92606596,0,0x0,8
tick,0x7ffdf681f424,92608589,0,0x0,8
tick,0x7ffdf681f424,92610585,0,0x0,8
tick,0x7ffdf681f424,92612489,0,0x0,8
tick,0x7ffdf681f424,92614573,0,0x0,8
tick,0x7ffdf681f424,92616601,0,0x0,8
tick,0x7ffdf681f424,92618575,0,0x0,8
tick,0x7ffdf681f424,92620616,0,0x0,8
tick,0x7ffdf681f424,92622562,0,0x0,8
tick,0x7ffdf681f424,92624541,0,0x0,8
tick,0x7ffdf681f424,92626541,0,0x0,8
tick,0x7ffdf681f424,92628429,0,0x0,8
tick,0x7ffdf681f424,92630531,0,0x0,8
tick,0x7ffdf681f424,92632527,0,0x0,8
tick,0x7ffdf681f424,92634424,0,0x0,8
tick,0x7ffdf681f424,92636409,0,0x0,8
tick,0x7ffdf681f424,92638504,0,0x0,8
tick,0x7ffdf681f424,92640506,0,0x0,8
tick,0x7ffdf681f424,92642562,0,0x0,8
tick,0x7ffdf681f424,92644496,0,0x0,8
tick,0x7ffdf681f424,92646532,0,0x0,8
tick,0x7ffdf681f424,92648483,0,0x0,8
tick,0x7ffdf681f424,92650477,0,0x0,8
tick,0x7ffdf681f424,92652471,0,0x0,8
tick,0x7ffdf681f424,92654485,0,0x0,8
tick,0x7ffdf681f424,92656356,0,0x0,8
tick,0x7ffdf681f424,92658455,0,0x0,8
tick,0x7ffdf681f424,92660453,0,0x0,8
tick,0x7ffdf681f424,92662340,0,0x0,8
tick,0x7ffdf681f424,92664398,0,0x0,8
tick,0x7ffdf681f424,92666415,0,0x0,8
tick,0x7ffdf681f424,92668367,0,0x0,8
tick,0x7ffdf681f424,92670468,0,0x0,8
tick,0x7ffdf681f424,92672366,0,0x0,8
tick,0x7ffdf681f424,92674410,0,0x0,8
tick,0x7ffdf681f424,92676414,0,0x0,8
tick,0x7ffdf681f424,92678365,0,0x0,8
tick,0x7ffdf681f424,92680381,0,0x0,8
tick,0x7ffdf681f424,92682419,0,0x0,8
tick,0x7ffdf681f424,92684518,0,0x0,8
tick,0x7ffdf681f424,92686549,0,0x0,8
tick,0x7ffdf681f424,92688523,0,0x0,8
tick,0x7ffdf681f424,92690602,0,0x0,8
tick,0x7ffdf681f424,92692666,0,0x0,8
tick,0x7ffdf681f424,92694539,0,0x0,8
tick,0x7ffdf681f424,92696634,0,0x0,8
tick,0x7ffdf681f424,92698634,0,0x0,8
tick,0x7ffdf681f424,92700606,0,0x0,8
tick,0x7ffdf681f424,92702637,0,0x0,8
tick,0x7ffdf681f424,92704681,0,0x0,8
tick,0x7ffdf681f424,92706653,0,0x0,8
tick,0x7ffdf681f424,92708604,0,0x0,8
tick,0x7ffdf681f424,92710646,0,0x0,8
tick,0x7ffdf681f424,92712658,0,0x0,8
tick,0x7ffdf681f424,92714620,0,0x0,8
tick,0x7ffdf681f424,92716667,0,0x0,8
tick,0x7ffdf681f424,92718593,0,0x0,8
tick,0x7ffdf681f424,92720619,0,0x0,8
tick,0x7ffdf681f424,92722671,0,0x0,8
tick,0x7ffdf681f424,92724607,0,0x0,8
tick,0x7ffdf681f424,92726593,0,0x0,8
tick,0x7ffdf681f424,92728594,0,0x0,8
tick,0x7ffdf681f424,92730598,0,0x0,8
tick,0x7ffdf681f424,92732569,0,0x0,8
tick,0x7ffdf681f424,92734556,0,0x0,8
tick,0x7ffdf681f424,92736567,0,0x0,8
tick,0x7ffdf681f424,92738553,0,0x0,8
tick,0x7ffdf681f424,92740599,0,0x0,8
tick,0x7ffdf681f424,92742548,0,0x0,8
tick,0x7ffdf681f424,92744513,0,0x0,8
tick,0x7ffdf681f424,92746539,0,0x0,8
tick,0x7ffdf681f424,92748511,0,0x0,8
tick,0x7ffdf681f424,92750490,0,0x0,8
tick,0x7ffdf681f424,92752484,0,0x0,8
tick,0x7ffdf681f424,92754489,0,0x0,8
tick,0x7ffdf681f424,92756481,0,0x0,8
tick,0x7ffdf681f424,92758553,0,0x0,8
tick,0x7ffdf681f424,92760534,0,0x0,8
tick,0x7ffdf681f424,92762573,0,0x0,8
tick,0x7ffdf681f424,92764534,0,0x0,8
tick,0x7ffdf681f424,92766504,0,0x0,8
tick,0x7ffdf681f424,92768485,0,0x0,8
tick,0x7ffdf681f424,92770555,0,0x0,8
tick,0x7ffdf681f424,92772572,0,0x0,8
tick,0x7ffdf681f424,92774495,0,0x0,8
tick,0x7ffdf681f424,92776553,0,0x0,8
tick,0x7ffdf681f424,92778532,0,0x0,8
tick,0x7ffdf681f424,92780529,0,0x0,8
tick,0x7ffdf681f424,92782483,0,0x0,8
tick,0x7ffdf681f424,92784542,0,0x0,8
tick,0x7ffdf681f424,92786508,0,0x0,8
tick,0x7ffdf681f424,92788539,0,0x0,8
tick,0x7ffdf681f424,92790519,0,0x0,8
tick,0x7ffdf681f424,92792469,0,0x0,8
tick,0x7ffdf681f424,92794429,0,0x0,8
tick,0x7ffdf681f424,92795508,0,0x0,8
tick,0x7ffdf681f424,92797489,0,0x0,8
tick,0x7ffdf681f424,92799435,0,0x0,8
tick,0x7ffdf681f424,92801529,0,0x0,8
tick,0x7ffdf681f424,92803462,0,0x0,8
tick,0x7ffdf681f424,92805449,0,0x0,8
tick,0x7ffdf681f424,92807423,0,0x0,8
tick,0x7ffdf681f424,92809408,0,0x0,8
tick,0x7ffdf681f424,92811441,0,0x0,8
tick,0x7ffdf681f424,92813453,0,0x0,8
tick,0x7ffdf681f424,92815423,0,0x0,8
tick,0x7ffdf681f424,92817401,0,0x0,8
tick,0x7ffdf681f424,92819417,0,0x0,8
tick,0x7ffdf681f424,92821438,0,0x0,8
tick,0x7ffdf681f424,92823397,0,0x0,8
tick,0x7ffdf681f424,92825406,0,0x0,8
tick,0x7ffdf681f424,92827388,0,0x0,8
tick,0x7ffdf681f424,92829363,0,0x0,8
tick,0x7ffdf681f424,92831369,0,0x0,8
tick,0x7ffdf681f424,92833406,0,0x0,8
tick,0x7ffdf681f424,92835387,0,0x0,8
tick,0x7ffdf681f424,92837404,0,0x0,8
tick,0x7ffdf681f424,92839369,0,0x0,8
tick,0x7ffdf681f424,92841355,0,0x0,8
tick,0x7ffdf681f424,92843295,0,0x0,8
tick,0x7ffdf681f424,92845327,0,0x0,8
tick,0x7ffdf681f424,92847357,0,0x0,8
tick,0x7ffdf681f424,92849331,0,0x0,8
tick,0x7ffdf681f424,92851373,0,0x0,8
tick,0x7ffdf681f424,92853357,0,0x0,8
tick,0x7ffdf681f424,92855324,0,0x0,8
tick,0x7ffdf681f424,92857346,0,0x0,8
tick,0x7ffdf681f424,92859311,0,0x0,8
tick,0x7ffdf681f424,92861368,0,0x0,8
tick,0x7ffdf681f424,92863298,0,0x0,8
tick,0x7ffdf681f424,92865292,0,0x0,8
tick,0x7ffdf681f424,92867273,0,0x0,8
tick,0x7ffdf681f424,92869280,0,0x0,8
tick,0x7ffdf681f424,92871289,0,0x0,8
tick,0x7ffdf681f424,92873284,0,0x0,8
tick,0x7ffdf681f424,92875326,0,0x0,8
tick,0x7ffdf681f424,92877313,0,0x0,8
tick,0x7ffdf681f424,92879263,0,0x0,8
tick,0x7ffdf681f424,92881311,0,0x0,8
tick,0x7ffdf681f424,92883236,0,0x0,8
tick,0x7ffdf681f424,92885259,0,0x0,8
tick,0x7ffdf681f424,92887283,0,0x0,8
tick,0x7ffdf681f424,92889217,0,0x0,8
tick,0x7ffdf681f424,92891230,0,0x0,8
tick,0x7ffdf681f424,92893285,0,0x0,8
tick,0x7ffdf681f424,92895211,0,0x0,8
tick,0x7ffdf681f424,92897281,0,0x0,8
tick,0x7ffdf681f424,92899250,0,0x0,8
tick,0x7ffdf681f424,92901227,0,0x0,8
tick,0x7ffdf681f424,92903160,0,0x0,8
tick,0x7ffdf681f424,92905260,0,0x0,8
tick,0x7ffdf681f424,92907234,0,0x0,8
tick,0x7ffdf681f424,92909278,0,0x0,8
tick,0x7ffdf681f424,92911209,0,0x0,8
tick,0x7ffdf681f424,92913167,0,0x0,8
tick,0x7ffdf681f424,92915166,0,0x0,8
tick,0x7ffdf681f424,92917372,0,0x0,8
tick,0x7ffdf681f424,92919231,0,0x0,8
tick,0x7ffdf681f424,92921143,0,0x0,8
tick,0x7ffdf681f424,92923272,0,0x0,8
tick,0x7ffdf681f424,92925234,0,0x0,8
tick,0x7ffdf681f424,92927225,0,0x0,8
tick,0x7ffdf681f424,92929165,0,0x0,8
tick,0x7ffdf681f424,92931263,0,0x0,8
tick,0x7ffdf681f424,92933127,0,0x0,8
tick,0x7ffdf681f424,92935172,0,0x0,8
tick,0x7ffdf681f424,92937183,0,0x0,8
tick,0x7ffdf681f424,92939121,0,0x0,8
tick,0x7ffdf681f424,92941127,0,0x0,8
tick,0x7ffdf681f424,92943124,0,0x0,8
tick,0x7ffdf681f424,92945132,0,0x0,8
tick,0x7ffdf681f424,92947121,0,0x0,8
tick,0x7ffdf681f424,92949069,0,0x0,8
tick,0x7ffdf681f424,92951119,0,0x0,8
tick,0x7ffdf681f424,92953106,0,0x0,8
tick,0x7ffdf681f424,92955027,0,0x0,8
tick,0x7ffdf681f424,92957068,0,0x0,8
tick,0x7ffdf681f424,92959020,0,0x0,8
tick,0x7ffdf681f424,92960978,0,0x0,8
tick,0x7ffdf681f424,92963044,0,0x0,8
tick,0x7ffdf681f424,92965057,0,0x0,8
tick,0x7ffdf681f424,92967132,0,0x0,8
tick,0x7ffdf681f424,92969021,0,0x0,8
tick,0x7ffdf681f424,92971018,0,0x0,8
tick,0x7ffdf681f424,92973010,0,0x0,8
tick,0x7ffdf681f424,92975077,0,0x0,8
tick,0x7ffdf681f424,92977091,0,0x0,8
tick,0x7ffdf681f424,92979118,0,0x0,8
tick,0x7ffdf681f424,92981144,0,0x0,8
tick,0x7ffdf681f424,92983059,0,0x0,8
tick,0x7ffdf681f424,92985051,0,0x0,8
tick,0x7ffdf681f424,92986939,0,0x0,8
tick,0x7ffdf681f424,92989038,0,0x0,8
tick,0x7ffdf681f424,92991058,0,0x0,8
tick,0x7ffdf681f424,92993058,0,0x0,8
tick,0x7ffdf681f424,92994934,0,0x0,8
tick,0x7ffdf681f424,92996935,0,0x0,8
tick,0x7ffdf681f424,92999010,0,0x0,8
tick,0x7ffdf681f424,93001017,0,0x0,8
tick,0x7ffdf681f424,93002899,0,0x0,8
tick,0x7ffdf681f424,93004992,0,0x0,8
tick,0x7ffdf681f424,93006986,0,0x0,8
tick,0x7ffdf681f424,93008980,0,0x0,8
tick,0x7ffdf681f424,93010975,0,0x0,8
tick,0x7ffdf681f424,93013001,0,0x0,8
tick,0x7ffdf681f424,93014969,0,0x0,8
tick,0x7ffdf681f424,93016961,0,0x0,8
tick,0x7ffdf681f424,93018955,0,0x0,8
tick,0x7ffdf681f424,93020962,0,0x0,8
tick,0x7ffdf681f424,93022975,0,0x0,8
tick,0x7ffdf681f424,93024938,0,0x0,8
tick,0x7ffdf681f424,93026935,0,0x0,8
tick,0x7ffdf681f424,93028851,0,0x0,8
tick,0x7ffdf681f424,93030923,0,0x0,8
tick,0x7ffdf681f424,93032916,0,0x0,8
tick,0x7ffdf681f424,93034947,0,0x0,8
tick,0x7ffdf681f424,93036802,0,0x0,8
tick,0x7ffdf681f424,93038955,0,0x0,8
tick,0x7ffdf681f424,93040937,0,0x0,8
tick,0x7ffdf681f424,93042921,0,0x0,8
tick,0x7ffdf681f424,93044866,0,0x0,8
tick,0x7ffdf681f424,93046810,0,0x0,8
tick,0x7ffdf681f424,93048927,0,0x0,8
tick,0x7ffdf681f424,93050901,0,0x0,8
tick,0x7ffdf681f424,93052859,0,0x0,8
tick,0x7ffdf681f424,93054890,0,0x0,8
tick,0x7ffdf681f424,93056872,0,0x0,8
tick,0x7ffdf681f424,93058856,0,0x0,8
tick,0x7ffdf681f424,93060852,0,0x0,8
tick,0x7ffdf681f424,93062836,0,0x0,8
tick,0x7ffdf681f424,93064833,0,0x0,8
tick,0x7ffdf681f424,93066823,0,0x0,8
tick,0x7ffdf681f424,93068856,0,0x0,8
tick,0x7ffdf681f424,93070807,0,0x0,8
tick,0x7ffdf681f424,93072783,0,0x0,8
tick,0x7ffdf681f424,93074832,0,0x0,8
tick,0x7ffdf681f424,93076738,0,0x0,8
tick,0x7ffdf681f424,93078716,0,0x0,8
tick,0x7ffdf681f424,93080708,0,0x0,8
tick,0x7ffdf681f424,93082704,0,0x0,8
tick,0x7ffdf681f424,93084699,0,0x0,8
tick,0x7ffdf681f424,93086739,0,0x0,8
tick,0x7ffdf681f424,93088690,0,0x0,8
tick,0x7ffdf681f424,93090681,0,0x0,8
tick,0x7ffdf681f424,93092684,0,0x0,8
tick,0x7ffdf681f424,93094672,0,0x0,8
tick,0x7ffdf681f424,93096667,0,0x0,8
tick,0x7ffdf681f424,93098696,0,0x0,8
tick,0x7ffdf681f424,93100651,0,0x0,8
tick,0x7ffdf681f424,93102649,0,0x0,8
tick,0x7ffdf681f424,93104644,0,0x0,8
tick,0x7ffdf681f424,93106640,0,0x0,8
tick,0x7ffdf681f424,93108633,0,0x0,8
tick,0x7ffdf681f424,93110627,0,0x0,8
tick,0x7ffdf681f424,93112633,0,0x0,8
tick,0x7ffdf681f424,93114661,0,0x0,8
tick,0x7ffdf681f424,93116594,0,0x0,8
tick,0x7ffdf681f424,93118586,0,0x0,8
tick,0x7ffdf681f424,93120606,0,0x0,8
tick,0x7ffdf681f424,93122596,0,0x0,8
tick,0x7ffdf681f424,93124595,0,0x0,8
tick,0x7ffdf681f424,93126585,0,0x0,8
tick,0x7ffdf681f424,93128582,0,0x0,8
tick,0x7ffdf681f424,93130575,0,0x0,8
tick,0x7ffdf681f424,93132609,0,0x0,8
tick,0x7ffdf681f424,93134567,0,0x0,8
tick,0x7ffdf681f424,93136652,0,0x0,8
tick,0x7ffdf681f424,93138583,0,0x0,8
tick,0x7ffdf681f424,93140525,0,0x0,8
tick,0x7ffdf681f424,93142542,0,0x0,8
tick,0x7ffdf681f424,93144556,0,0x0,8
tick,0x7ffdf681f424,93146580,0,0x0,8
tick,0x7ffdf681f424,93148532,0,0x0,8
tick,0x7ffdf681f424,93150521,0,0x0,8
tick,0x7ffdf681f424,93152516,0,0x0,8
tick,0x7ffdf681f424,93154517,0,0x0,8
tick,0x7ffdf681f424,93156510,0,0x0,8
tick,0x7ffdf681f424,93158545,0,0x0,8
tick,0x7ffdf681f424,93160523,0,0x0,8
tick,0x7ffdf681f424,93162484,0,0x0,8
tick,0x7ffdf681f424,93164442,0,0x0,8
tick,0x7ffdf681f424,93166452,0,0x0,8
tick,0x7ffdf681f424,93168513,0,0x0,8
tick,0x7ffdf681f424,93170499,0,0x0,8
tick,0x7ffdf681f424,93172535,0,0x0,8
tick,0x7ffdf681f424,93174507,0,0x0,8
tick,0x7ffdf681f424,93176425,0,0x0,8
tick,0x7ffdf681f424,93178432,0,0x0,8
tick,0x7ffdf681f424,93180476,0,0x0,8
tick,0x7ffdf681f424,93182483,0,0x0,8
tick,0x7ffdf681f424,93184472,0,0x0,8
tick,0x7ffdf681f424,93186496,0,0x0,8
tick,0x7ffdf681f424,93188458,0,0x0,8
tick,0x7ffdf681f424,93190443,0,0x0,8
tick,0x7ffdf681f424,93192478,0,0x0,8
tick,0x7ffdf681f424,93194433,0,0x0,8
tick,0x7ffdf681f424,93196410,0,0x0,8
tick,0x7ffdf681f424,93198384,0,0x0,8
tick,0x7ffdf681f424,93200369,0,0x0,8
tick,0x7ffdf681f424,93202375,0,0x0,8
tick,0x7ffdf681f424,93204382,0,0x0,8
tick,0x7ffdf681f424,93206377,0,0x0,8
tick,0x7ffdf681f424,93208371,0,0x0,8
tick,0x7ffdf681f424,93210384,0,0x0,8
tick,0x7ffdf681f424,93212368,0,0x0,8
tick,0x7ffdf681f424,93214352,0,0x0,8
tick,0x7ffdf681f424,93216409,0,0x0,8
tick,0x7ffdf681f424,93218397,0,0x0,8
tick,0x7ffdf681f424,93220320,0,0x0,8
tick,0x7ffdf681f424,93222425,0,0x0,8
tick,0x7ffdf681f424,93224410,0,0x0,8
tick,0x7ffdf681f424,93226420,0,0x0,8
tick,0x7ffdf681f424,93228303,0,0x0,8
tick,0x7ffdf681f424,93230314,0,0x0,8
tick,0x7ffdf681f424,93232330,0,0x0,8
tick,0x7ffdf681f424,93234317,0,0x0,8
tick,0x7ffdf681f424,93236300,0,0x0,8
tick,0x7ffdf681f424,93238276,0,0x0,8
tick,0x7ffdf681f424,93240294,0,0x0,8
tick,0x7ffdf681f424,93242286,0,0x0,8
tick,0x7ffdf681f424,93244307,0,0x0,8
tick,0x7ffdf681f424,93246334,0,0x0,8
tick,0x7ffdf681f424,93248268,0,0x0,8
tick,0x7ffdf681f424,93250259,0,0x0,8
tick,0x7ffdf681f424,93252258,0,0x0,8
tick,0x7ffdf681f424,93254322,0,0x0,8
tick,0x7ffdf681f424,93256250,0,0x0,8
tick,0x7ffdf681f424,93258250,0,0x0,8
tick,0x7ffdf681f424,93260301,0,0x0,8
tick,0x7ffdf681f424,93262248,0,0x0,8
tick,0x7ffdf681f424,93264252,0,0x0,8
tick,0x7ffdf681f424,93266271,0,0x0,8
tick,0x7ffdf681f424,93268252,0,0x0,8
tick,0x7ffdf681f424,93270218,0,0x0,8
tick,0x7ffdf681f424,93272232,0,0x0,8
tick,0x7ffdf681f424,93274264,0,0x0,8
tick,0x7ffdf681f424,93276293,0,0x0,8
tick,0x7ffdf681f424,93278189,0,0x0,8
tick,0x7ffdf681f424,93280230,0,0x0,8
tick,0x7ffdf681f424,93282231,0,0x0,8
tick,0x7ffdf681f424,93284260,0,0x0,8
tick,0x7ffdf681f424,93286319,0,0x0,8
tick,0x7ffdf681f424,93288282,0,0x0,8
tick,0x7ffdf681f424,93290301,0,0x0,8
tick,0x7ffdf681f424,93292288,0,0x0,8
tick,0x7ffdf681f424,93294303,0,0x0,8
tick,0x7ffdf681f424,93296290,0,0x0,8
tick,0x7ffdf681f424,93298315,0,0x0,8
tick,0x7ffdf681f424,93300296,0,0x0,8
tick,0x7ffdf681f424,93302316,0,0x0,8
tick,0x7ffdf681f424,93304204,0,0x0,8
tick,0x7ffdf681f424,93306176,0,0x0,8
tick,0x7ffdf681f424,93308260,0,0x0,8
tick,0x7ffdf681f424,93310263,0,0x0,8
tick,0x7ffdf681f424,93312282,0,0x0,8
tick,0x7ffdf681f424,93314270,0,0x0,8
tick,0x7ffdf681f424,93316309,0,0x0,8
tick,0x7ffdf681f424,93318253,0,0x0,8
tick,0x7ffdf681f424,93320140,0,0x0,8
tick,0x7ffdf681f424,93322224,0,0x0,8
tick,0x7ffdf681f424,93324233,0,0x0,8
tick,0x7ffdf681f424,93326230,0,0x0,8
tick,0x7ffdf681f424,93328107,0,0x0,8
tick,0x7ffdf681f424,93330233,0,0x0,8
tick,0x7ffdf681f424,93332215,0,0x0,8
tick,0x7ffdf681f424,93334238,0,0x0,8
tick,0x7ffdf681f424,93336105,0,0x0,8
tick,0x7ffdf681f424,93338237,0,0x0,8
tick,0x7ffdf681f424,93340171,0,0x0,8
tick,0x7ffdf681f424,93342180,0,0x0,8
tick,0x7ffdf681f424,93344189,0,0x0,8
tick,0x7ffdf681f424,93346179,0,0x0,8
tick,0x7ffdf681f424,93348152,0,0x0,8
tick,0x7ffdf681f424,93350161,0,0x0,8
tick,0x7ffdf681f424,93352149,0,0x0,8
tick,0x7ffdf681f424,93354159,0,0x0,8
tick,0x7ffdf681f424,93356141,0,0x0,8
tick,0x7ffdf681f424,93358155,0,0x0,8
tick,0x7ffdf681f424,93360110,0,0x0,8
tick,0x7ffdf681f424,93362137,0,0x0,8
tick,0x7ffdf681f424,93364136,0,0x0,8
tick,0x7ffdf681f424,93366125,0,0x0,8
tick,0x7ffdf681f424,93368118,0,0x0,8
tick,0x7ffdf681f424,93370052,0,0x0,8
tick,0x7ffdf681f424,93372105,0,0x0,8
tick,0x7ffdf681f424,93374095,0,0x0,8
tick,0x7ffdf681f424,93376100,0,0x0,8
tick,0x7ffdf681f424,93378000,0,0x0,8
tick,0x7ffdf681f424,93380076,0,0x0,8
tick,0x7ffdf681f424,93381996,0,0x0,8
tick,0x7ffdf681f424,93384069,0,0x0,8
tick,0x7ffdf681f424,93386060,0,0x0,8
tick,0x7ffdf681f424,93388054,0,0x0,8
tick,0x7ffdf681f424,93390076,0,0x0,8
tick,0x7ffdf681f424,93392048,0,0x0,8
tick,0x7ffdf681f424,93394006,0,0x0,8
tick,0x7ffdf681f424,93395977,0,0x0,8
tick,0x7ffdf681f424,93398031,0,0x0,8
tick,0x7ffdf681f424,93400023,0,0x0,8
tick,0x7ffdf681f424,93402016,0,0x0,8
tick,0x7ffdf681f424,93404041,0,0x0,8
tick,0x7ffdf681f424,93406009,0,0x0,8
tick,0x7ffdf681f424,93408004,0,0x0,8
tick,0x7ffdf681f424,93410002,0,0x0,8
tick,0x7ffdf681f424,93411991,0,0x0,8
tick,0x7ffdf681f424,93413984,0,0x0,8
tick,0x7ffdf681f424,93415941,0,0x0,8
tick,0x7ffdf681f424,93417988,0,0x0,8
tick,0x7ffdf681f424,93419877,0,0x0,8
tick,0x7ffdf681f424,93421977,0,0x0,8
tick,0x7ffdf681f424,93423964,0,0x0,8
tick,0x7ffdf681f424,93425930,0,0x0,8
tick,0x7ffdf681f424,93427943,0,0x0,8
tick,0x7ffdf681f424,93429956,0,0x0,8
tick,0x7ffdf681f424,93431936,0,0x0,8
tick,0x7ffdf681f424,93433942,0,0x0,8
tick,0x7ffdf681f424,93435878,0,0x0,8
tick,0x7ffdf681f424,93437924,0,0x0,8
tick,0x7ffdf681f424,93439921,0,0x0,8
tick,0x7ffdf681f424,93441930,0,0x0,8
tick,0x7ffdf681f424,93443911,0,0x0,8
tick,0x7ffdf681f424,93445902,0,0x0,8
tick,0x7ffdf681f424,93447940,0,0x0,8
tick,0x7ffdf681f424,93449893,0,0x0,8
tick,0x7ffdf681f424,93451897,0,0x0,8
tick,0x7ffdf681f424,93453879,0,0x0,8
tick,0x7ffdf681f424,93455883,0,0x0,8
tick,0x7ffdf681f424,93457797,0,0x0,8
tick,0x7ffdf681f424,93459775,0,0x0,8
tick,0x7ffdf681f424,93461880,0,0x0,8
tick,0x7ffdf681f424,93463880,0,0x0,8
tick,0x7ffdf681f424,93465861,0,0x0,8
tick,0x7ffdf681f424,93467844,0,0x0,8
tick,0x7ffdf681f424,93469705,0,0x0,8
tick,0x7ffdf681f424,93471811,0,0x0,8
tick,0x7ffdf681f424,93473824,0,0x0,8
tick,0x7ffdf681f424,93475777,0,0x0,8
tick,0x7ffdf681f424,93477699,0,0x0,8
tick,0x7ffdf681f424,93479705,0,0x0,8
tick,0x7ffdf681f424,93481700,0,0x0,8
tick,0x7ffdf681f424,93483689,0,0x0,8
tick,0x7ffdf681f424,93485688,0,0x0,8
tick,0x7ffdf681f424,93487633,0,0x0,8
tick,0x7ffdf681f424,93489625,0,0x0,8
tick,0x7ffdf681f424,93491600,0,0x0,8
tick,0x7ffdf681f424,93493673,0,0x0,8
tick,0x7ffdf681f424,93495643,0,0x0,8
tick,0x7ffdf681f424,93497573,0,0x0,8
tick,0x7ffdf681f424,93499579,0,0x0,8
tick,0x7ffdf681f424,93501557,0,0x0,8
tick,0x7ffdf681f424,93503552,0,0x0,8
tick,0x7ffdf681f424,93505677,0,0x0,8
tick,0x7ffdf681f424,93507575,0,0x0,8
tick,0x7ffdf681f424,93509594,0,0x0,8
tick,0x7ffdf681f424,93511563,0,0x0,8
tick,0x7ffdf681f424,93513576,0,0x0,8
tick,0x7ffdf681f424,93515543,0,0x0,8
tick,0x7ffdf681f424,93517552,0,0x0,8
tick,0x7ffdf681f424,93519516,0,0x0,8
tick,0x7ffdf681f424,93521538,0,0x0,8
tick,0x7ffdf681f424,93523529,0,0x0,8
tick,0x7ffdf681f424,93525524,0,0x0,8
tick,0x7ffdf681f424,93527519,0,0x0,8
tick,0x7ffdf681f424,93529513,0,0x0,8
tick,0x7ffdf681f424,93531525,0,0x0,8
tick,0x7ffdf681f424,93533584,0,0x0,8
tick,0x7ffdf681f424,93535528,0,0x0,8
tick,0x7ffdf681f424,93537492,0,0x0,8
tick,0x7ffdf681f424,93539517,0,0x0,8
tick,0x7ffdf681f424,93541594,0,0x0,8
tick,0x7ffdf681f424,93543479,0,0x0,8
tick,0x7ffdf681f424,93545528,0,0x0,8
tick,0x7ffdf681f424,93547527,0,0x0,8
tick,0x7ffdf681f424,93549524,0,0x0,8
tick,0x7ffdf681f424,93551516,0,0x0,8
tick,0x7ffdf681f424,93553552,0,0x0,8
tick,0x7ffdf681f424,93555518,0,0x0,8
tick,0x7ffdf681f424,93557482,0,0x0,8
tick,0x7ffdf681f424,93559492,0,0x0,8
tick,0x7ffdf681f424,93561489,0,0x0,8
tick,0x7ffdf681f424,93563486,0,0x0,8
tick,0x7ffdf681f424,93565480,0,0x0,8
tick,0x7ffdf681f424,93567585,0,0x0,8
tick,0x7ffdf681f424,93569464,0,0x0,8
tick,0x7ffdf681f424,93571434,0,0x0,8
tick,0x7ffdf681f424,93573393,0,0x0,8
tick,0x7ffdf681f424,93575409,0,0x0,8
tick,0x7ffdf681f424,93577389,0,0x0,8
tick,0x7ffdf681f424,93579380,0,0x0,8
tick,0x7ffdf681f424,93581388,0,0x0,8
tick,0x7ffdf681f424,93583407,0,0x0,8
tick,0x7ffdf681f424,93585417,0,0x0,8
tick,0x7ffdf681f424,93587360,0,0x0,8
tick,0x7ffdf681f424,93589368,0,0x0,8
tick,0x7ffdf681f424,93591420,0,0x0,8
tick,0x7ffdf681f424,93593392,0,0x0,8
tick,0x7ffdf681f424,93595343,0,0x0,8
tick,0x7ffdf681f424,93597338,0,0x0,8
tick,0x7ffdf681f424,93599352,0,0x0,8
tick,0x7ffdf681f424,93601357,0,0x0,8
tick,0x7ffdf681f424,93603291,0,0x0,8
tick,0x7ffdf681f424,93605350,0,0x0,8
tick,0x7ffdf681f424,93607309,0,0x0,8
tick,0x7ffdf681f424,93609392,0,0x0,8
tick,0x7ffdf681f424,93611296,0,0x0,8
tick,0x7ffdf681f424,93613323,0,0x0,8
tick,0x7ffdf681f424,93615316,0,0x0,8
tick,0x7ffdf681f424,93617290,0,0x0,8
tick,0x7ffdf681f424,93619274,0,0x0,8
tick,0x7ffdf681f424,93621339,0,0x0,8
tick,0x7ffdf681f424,93623365,0,0x0,8
tick,0x7ffdf681f424,93625318,0,0x0,8
tick,0x7ffdf681f424,93627376,0,0x0,8
tick,0x7ffdf681f424,93629358,0,0x0,8
tick,0x7ffdf681f424,93631361,0,0x0,8
tick,0x7ffdf681f424,93633349,0,0x0,8
tick,0x7ffdf681f424,93635418,0,0x0,8
tick,0x7ffdf681f424,93637271,0,0x0,8
tick,0x7ffdf681f424,93639387,0,0x0,8
tick,0x7ffdf681f424,93641386,0,0x0,8
tick,0x7ffdf681f424,93643374,0,0x0,8
tick,0x7ffdf681f424,93645412,0,0x0,8
tick,0x7ffdf681f424,93647360,0,0x0,8
tick,0x7ffdf681f424,93649370,0,0x0,8
tick,0x7ffdf681f424,93651360,0,0x0,8
tick,0x7ffdf681f424,93653252,0,0x0,8
tick,0x7ffdf681f424,93655346,0,0x0,8
tick,0x7ffdf681f424,93657366,0,0x0,8
tick,0x7ffdf681f424,93659340,0,0x0,8
tick,0x7ffdf681f424,93661296,0,0x0,8
tick,0x7ffdf681f424,93663291,0,0x0,8
tick,0x7ffdf681f424,93665321,0,0x0,8
tick,0x7ffdf681f424,93667344,0,0x0,8
tick,0x7ffdf681f424,93669305,0,0x0,8
tick,0x7ffdf681f424,93671315,0,0x0,8
tick,0x7ffdf681f424,93673305,0,0x0,8
tick,0x7ffdf681f424,93675289,0,0x0,8
tick,0x7ffdf681f424,93677286,0,0x0,8
tick,0x7ffdf681f424,93679276,0,0x0,8
tick,0x7ffdf681f424,93681273,0,0x0,8
tick,0x7ffdf681f424,93683266,0,0x0,8
tick,0x7ffdf681f424,93685271,0,0x0,8
tick,0x7ffdf681f424,93687257,0,0x0,8
tick,0x7ffdf681f424,93689199,0,0x0,8
tick,0x7ffdf681f424,93691257,0,0x0,8
tick,0x7ffdf681f424,93693246,0,0x0,8
tick,0x7ffdf681f424,93695131,0,0x0,8
tick,0x7ffdf681f424,93697230,0,0x0,8
tick,0x7ffdf681f424,93699225,0,0x0,8
tick,0x7ffdf681f424,93701216,0,0x0,8
tick,0x7ffdf681f424,93703135,0,0x0,8
tick,0x7ffdf681f424,93705211,0,0x0,8
tick,0x7ffdf681f424,93707212,0,0x0,8
tick,0x7ffdf681f424,93709205,0,0x0,8
tick,0x7ffdf681f424,93711229,0,0x0,8
tick,0x7ffdf681f424,93713189,0,0x0,8
tick,0x7ffdf681f424,93715193,0,0x0,8
tick,0x7ffdf681f424,93717205,0,0x0,8
tick,0x7ffdf681f424,93719173,0,0x0,8
tick,0x7ffdf681f424,93721167,0,0x0,8
tick,0x7ffdf681f424,93723158,0,0x0,8
tick,0x7ffdf681f424,93725167,0,0x0,8
tick,0x7ffdf681f424,93727164,0,0x0,8
tick,0x7ffdf681f424,93729160,0,0x0,8
tick,0x7ffdf681f424,93731162,0,0x0,8
tick,0x7ffdf681f424,93733135,0,0x0,8
tick,0x7ffdf681f424,93735153,0,0x0,8
tick,0x7ffdf681f424,93737016,0,0x0,8
tick,0x7ffdf681f424,93739119,0,0x0,8
tick,0x7ffdf681f424,93741107,0,0x0,8
tick,0x7ffdf681f424,93743108,0,0x0,8
tick,0x7ffdf681f424,93745008,0,0x0,8
tick,0x7ffdf681f424,93747099,0,0x0,8
tick,0x7ffdf681f424,93749108,0,0x0,8
tick,0x7ffdf681f424,93751094,0,0x0,8
tick,0x7ffdf681f424,93753009,0,0x0,8
tick,0x7ffdf681f424,93754924,0,0x0,8
tick,0x7ffdf681f424,93757066,0,0x0,8
tick,0x7ffdf681f424,93758992,0,0x0,8
tick,0x7ffdf681f424,93760937,0,0x0,8
tick,0x7ffdf681f424,93762864,0,0x0,8
tick,0x7ffdf681f424,93764931,0,0x0,8
tick,0x7ffdf681f424,93766987,0,0x0,8
tick,0x7ffdf681f424,93768988,0,0x0,8
tick,0x7ffdf681f424,93770863,0,0x0,8
tick,0x7ffdf681f424,93772951,0,0x0,8
tick,0x7ffdf681f424,93774997,0,0x0,8
tick,0x7ffdf681f424,93777014,0,0x0,8
tick,0x7ffdf681f424,93778986,0,0x0,8
tick,0x7ffdf681f424,93780956,0,0x0,8
tick,0x7ffdf681f424,93782864,0,0x0,8
tick,0x7ffdf681f424,93784938,0,0x0,8
tick,0x7ffdf681f424,93786839,0,0x0,8
tick,0x7ffdf681f424,93788931,0,0x0,8
tick,0x7ffdf681f424,93790920,0,0x0,8
tick,0x7ffdf681f424,93792930,0,0x0,8
tick,0x7ffdf681f424,93794861,0,0x0,8
tick,0x7ffdf681f424,93796894,0,0x0,8
tick,0x7ffdf681f424,93798892,0,0x0,8
tick,0x7ffdf681f424,93800892,0,0x0,8
tick,0x7ffdf681f424,93802893,0,0x0,8
tick,0x7ffdf681f424,93804894,0,0x0,8
tick,0x7ffdf681f424,93806882,0,0x0,8
tick,0x7ffdf681f424,93808875,0,0x0,8
tick,0x7ffdf681f424,93810880,0,0x0,8
tick,0x7ffdf681f424,93812885,0,0x0,8
tick,0x7ffdf681f424,93814871,0,0x0,8
tick,0x7ffdf681f424,93816874,0,0x0,8
tick,0x7ffdf681f424,93818870,0,0x0,8
tick,0x7ffdf681f424,93820846,0,0x0,8
tick,0x7ffdf681f424,93822842,0,0x0,8
tick,0x7ffdf681f424,93824833,0,0x0,8
tick,0x7ffdf681f424,93826822,0,0x0,8
tick,0x7ffdf681f424,93828742,0,0x0,8
tick,0x7ffdf681f424,93830764,0,0x0,8
tick,0x7ffdf681f424,93832789,0,0x0,8
tick,0x7ffdf681f424,93834778,0,0x0,8
tick,0x7ffdf681f424,93836701,0,0x0,8
tick,0x7ffdf681f424,93838702,0,0x0,8
tick,0x7ffdf681f424,93840734,0,0x0,8
tick,0x7ffdf681f424,93842649,0,0x0,8
tick,0x7ffdf681f424,93844670,0,0x0,8
tick,0x7ffdf681f424,93846709,0,0x0,8
tick,0x7ffdf681f424,93848659,0,0x0,8
tick,0x7ffdf681f424,93850657,0,0x0,8
tick,0x7ffdf681f424,93852649,0,0x0,8
tick,0x7ffdf681f424,93854643,0,0x0,8
tick,0x7ffdf681f424,93856635,0,0x0,8
tick,0x7ffdf681f424,93858634,0,0x0,8
tick,0x7ffdf681f424,93860636,0,0x0,8
tick,0x7ffdf681f424,93862620,0,0x0,8
tick,0x7ffdf681f424,93864660,0,0x0,8
tick,0x7ffdf681f424,93866634,0,0x0,8
tick,0x7ffdf681f424,93868616,0,0x0,8
tick,0x7ffdf681f424,93870678,0,0x0,8
tick,0x7ffdf681f424,93872598,0,0x0,8
tick,0x7ffdf681f424,93874593,0,0x0,8
tick,0x7ffdf681f424,93876592,0,0x0,8
tick,0x7ffdf681f424,93878585,0,0x0,8
tick,0x7ffdf681f424,93880596,0,0x0,8
tick,0x7ffdf681f424,93882582,0,0x0,8
tick,0x7ffdf681f424,93884560,0,0x0,8
tick,0x7ffdf681f424,93886575,0,0x0,8
tick,0x7ffdf681f424,93888553,0,0x0,8
tick,0x7ffdf681f424,93890592,0,0x0,8
tick,0x7ffdf681f424,93892572,0,0x0,8
tick,0x7ffdf681f424,93894569,0,0x0,8
tick,0x7ffdf681f424,93896526,0,0x0,8
tick,0x7ffdf681f424,93898538,0,0x0,8
tick,0x7ffdf681f424,93900526,0,0x0,8
tick,0x7ffdf681f424,93902526,0,0x0,8
tick,0x7ffdf681f424,93904527,0,0x0,8
tick,0x7ffdf681f424,93906501,0,0x0,8
tick,0x7ffdf681f424,93908497,0,0x0,8
tick,0x7ffdf681f424,93910563,0,0x0,8
tick,0x7ffdf681f424,93912491,0,0x0,8
tick,0x7ffdf681f424,93914465,0,0x0,8
tick,0x7ffdf681f424,93916498,0,0x0,8
tick,0x7ffdf681f424,93918475,0,0x0,8
tick,0x7ffdf681f424,93920442,0,0x0,8
tick,0x7ffdf681f424,93922456,0,0x0,8
tick,0x7ffdf681f424,93924454,0,0x0,8
tick,0x7ffdf681f424,93926481,0,0x0,8
tick,0x7ffdf681f424,93928500,0,0x0,8
tick,0x7ffdf681f424,93930425,0,0x0,8
tick,0x7ffdf681f424,93932424,0,0x0,8
tick,0x7ffdf681f424,93934503,0,0x0,8
tick,0x7ffdf681f424,93936476,0,0x0,8
tick,0x7ffdf681f424,93938450,0,0x0,8
tick,0x7ffdf681f424,93940409,0,0x0,8
tick,0x7ffdf681f424,93942447,0,0x0,8
tick,0x7ffdf681f424,93944404,0,0x0,8
tick,0x7ffdf681f424,93946405,0,0x0,8
tick,0x7ffdf681f424,93948420,0,0x0,8
tick,0x7ffdf681f424,93950399,0,0x0,8
tick,0x7ffdf681f424,93952351,0,0x0,8
tick,0x7ffdf681f424,93954401,0,0x0,8
tick,0x7ffdf681f424,93956381,0,0x0,8
tick,0x7ffdf681f424,93958385,0,0x0,8
tick,0x7ffdf681f424,93960414,0,0x0,8
tick,0x7ffdf681f424,93962463,0,0x0,8
tick,0x7ffdf681f424,93964376,0,0x0,8
tick,0x7ffdf681f424,93966317,0,0x0,8
tick,0x7ffdf681f424,93968315,0,0x0,8
tick,0x7ffdf681f424,93970311,0,0x0,8
tick,0x7ffdf681f424,93972329,0,0x0,8
tick,0x7ffdf681f424,93974389,0,0x0,8
tick,0x7ffdf681f424,93976328,0,0x0,8
tick,0x7ffdf681f424,93978308,0,0x0,8
tick,0x7ffdf681f424,93980287,0,0x0,8
tick,0x7ffdf681f424,93982308,0,0x0,8
tick,0x7ffdf681f424,93984305,0,0x0,8
tick,0x7ffdf681f424,93986258,0,0x0,8
tick,0x7ffdf681f424,93988291,0,0x0,8
tick,0x7ffdf681f424,93990284,0,0x0,8
tick,0x7ffdf681f424,93992285,0,0x0,8
tick,0x7ffdf681f424,93994273,0,0x0,8
tick,0x7ffdf681f424,93996277,0,0x0,8
tick,0x7ffdf681f424,93998320,0,0x0,8
tick,0x7ffdf681f424,94000277,0,0x0,8
tick,0x7ffdf681f424,94002272,0,0x0,8
tick,0x7ffdf681f424,94004318,0,0x0,8
tick,0x7ffdf681f424,94006306,0,0x0,8
tick,0x7ffdf681f424,94008287,0,0x0,8
tick,0x7ffdf681f424,94010271,0,0x0,8
tick,0x7ffdf681f424,94012228,0,0x0,8
tick,0x7ffdf681f424,94014242,0,0x0,8
tick,0x7ffdf681f424,94016237,0,0x0,8
tick,0x7ffdf681f424,94018284,0,0x0,8
tick,0x7ffdf681f424,94020277,0,0x0,8
tick,0x7ffdf681f424,94022245,0,0x0,8
tick,0x7ffdf681f424,94024233,0,0x0,8
tick,0x7ffdf681f424,94026234,0,0x0,8
tick,0x7ffdf681f424,94028230,0,0x0,8
tick,0x7ffdf681f424,94030291,0,0x0,8
tick,0x7ffdf681f424,94032230,0,0x0,8
tick,0x7ffdf681f424,94034230,0,0x0,8
tick,0x7ffdf681f424,94036242,0,0x0,8
tick,0x7ffdf681f424,94038229,0,0x0,8
tick,0x7ffdf681f424,94040323,0,0x0,8
tick,0x7ffdf681f424,94042310,0,0x0,8
tick,0x7ffdf681f424,94044217,0,0x0,8
tick,0x7ffdf681f424,94046248,0,0x0,8
tick,0x7ffdf681f424,94048256,0,0x0,8
tick,0x7ffdf681f424,94050228,0,0x0,8
tick,0x7ffdf681f424,94052267,0,0x0,8
tick,0x7ffdf681f424,94054151,0,0x0,8
tick,0x7ffdf681f424,94056261,0,0x0,8
tick,0x7ffdf681f424,94058223,0,0x0,8
tick,0x7ffdf681f424,94060208,0,0x0,8
tick,0x7ffdf681f424,94062089,0,0x0,8
tick,0x7ffdf681f424,94064253,0,0x0,8
tick,0x7ffdf681f424,94066203,0,0x0,8
tick,0x7ffdf681f424,94068190,0,0x0,8
tick,0x7ffdf681f424,94070069,0,0x0,8
tick,0x7ffdf681f424,94072177,0,0x0,8
tick,0x7ffdf681f424,94074157,0,0x0,8
tick,0x7ffdf681f424,94076216,0,0x0,8
tick,0x7ffdf681f424,94078052,0,0x0,8
tick,0x7ffdf681f424,94080122,0,0x0,8
tick,0x7ffdf681f424,94082212,0,0x0,8
tick,0x7ffdf681f424,94084220,0,0x0,8
tick,0x7ffdf681f424,94086186,0,0x0,8
tick,0x7ffdf681f424,94088201,0,0x0,8
tick,0x7ffdf681f424,94090162,0,0x0,8
tick,0x7ffdf681f424,94092152,0,0x0,8
tick,0x7ffdf681f424,94094151,0,0x0,8
tick,0x7ffdf681f424,94096139,0,0x0,8
tick,0x7ffdf681f424,94098142,0,0x0,8
tick,0x7ffdf681f424,94100128,0,0x0,8
tick,0x7ffdf681f424,94102122,0,0x0,8
tick,0x7ffdf681f424,94104094,0,0x0,8
tick,0x7ffdf681f424,94106092,0,0x0,8
tick,0x7ffdf681f424,94108127,0,0x0,8
tick,0x7ffdf681f424,94110079,0,0x0,8
tick,0x7ffdf681f424,94111958,0,0x0,8
tick,0x7ffdf681f424,94114065,0,0x0,8
tick,0x7ffdf681f424,94116056,0,0x0,8
tick,0x7ffdf681f424,94118061,0,0x0,8
tick,0x7ffdf681f424,94119973,0,0x0,8
tick,0x7ffdf681f424,94122038,0,0x0,8
tick,0x7ffdf681f424,94124042,0,0x0,8
tick,0x7ffdf681f424,94126062,0,0x0,8
tick,0x7ffdf681f424,94128013,0,0x0,8
tick,0x7ffdf681f424,94130023,0,0x0,8
tick,0x7ffdf681f424,94132018,0,0x0,8
tick,0x7ffdf681f424,94134009,0,0x0,8
tick,0x7ffdf681f424,94136004,0,0x0,8
tick,0x7ffdf681f424,94137908,0,0x0,8
tick,0x7ffdf681f424,94139993,0,0x0,8
tick,0x7ffdf681f424,94141989,0,0x0,8
tick,0x7ffdf681f424,94143984,0,0x0,8
tick,0x7ffdf681f424,94145981,0,0x0,8
tick,0x7ffdf681f424,94147975,0,0x0,8
tick,0x7ffdf681f424,94149866,0,0x0,8
tick,0x7ffdf681f424,94151978,0,0x0,8
tick,0x7ffdf681f424,94153985,0,0x0,8
tick,0x7ffdf681f424,94155955,0,0x0,8
tick,0x7ffdf681f424,94157992,0,0x0,8
tick,0x7ffdf681f424,94159939,0,0x0,8
tick,0x7ffdf681f424,94161829,0,0x0,8
tick,0x7ffdf681f424,94163895,0,0x0,8
tick,0x7ffdf681f424,94165912,0,0x0,8
tick,0x7ffdf681f424,94167851,0,0x0,8
tick,0x7ffdf681f424,94169853,0,0x0,8
tick,0x7ffdf681f424,94171891,0,0x0,8
tick,0x7ffdf681f424,94173882,0,0x0,8
tick,0x7ffdf681f424,94175866,0,0x0,8
tick,0x7ffdf681f424,94177854,0,0x0,8
tick,0x7ffdf681f424,94179868,0,0x0,8
tick,0x7ffdf681f424,94181819,0,0x0,8
tick,0x7ffdf681f424,94183764,0,0x0,8
tick,0x7ffdf681f424,94185820,0,0x0,8
tick,0x7ffdf681f424,94187888,0,0x0,8
tick,0x7ffdf681f424,94189777,0,0x0,8
tick,0x7ffdf681f424,94191777,0,0x0,8
tick,0x7ffdf681f424,94193834,0,0x0,8
tick,0x7ffdf681f424,94195728,0,0x0,8
tick,0x7ffdf681f424,94197870,0,0x0,8
tick,0x7ffdf681f424,94199730,0,0x0,8
tick,0x7ffdf681f424,94201766,0,0x0,8
tick,0x7ffdf681f424,94203750,0,0x0,8
tick,0x7ffdf681f424,94205750,0,0x0,8
tick,0x7ffdf681f424,94207709,0,0x0,8
tick,0x7ffdf681f424,94209672,0,0x0,8
tick,0x7ffdf681f424,94211764,0,0x0,8
tick,0x7ffdf681f424,94213678,0,0x0,8
tick,0x7ffdf681f424,94215684,0,0x0,8
tick,0x7ffdf681f424,94217668,0,0x0,8
tick,0x7ffdf681f424,94219682,0,0x0,8
tick,0x7ffdf681f424,94221696,0,0x0,8
tick,0x7ffdf681f424,94223734,0,0x0,8
tick,0x7ffdf681f424,94225676,0,0x0,8
tick,0x7ffdf681f424,94227641,0,0x0,8
tick,0x7ffdf681f424,94229637,0,0x0,8
tick,0x7ffdf681f424,94231670,0,0x0,8
tick,0x7ffdf681f424,94233632,0,0x0,8
tick,0x7ffdf681f424,94235620,0,0x0,8
tick,0x7ffdf681f424,94237595,0,0x0,8
tick,0x7ffdf681f424,94239689,0,0x0,8
tick,0x7ffdf681f424,94241609,0,0x0,8
tick,0x7ffdf681f424,94243660,0,0x0,8
tick,0x7ffdf681f424,94245731,0,0x0,8
tick,0x7ffdf681f424,94247593,0,0x0,8
tick,0x7ffdf681f424,94249583,0,0x0,8
tick,0x7ffdf681f424,94251577,0,0x0,8
tick,0x7ffdf681f424,94253577,0,0x0,8
tick,0x7ffdf681f424,94255649,0,0x0,8
tick,0x7ffdf681f424,94257565,0,0x0,8
tick,0x7ffdf681f424,94259686,0,0x0,8
tick,0x7ffdf681f424,94261599,0,0x0,8
tick,0x7ffdf681f424,94263587,0,0x0,8
tick,0x7ffdf681f424,94265561,0,0x0,8
tick,0x7ffdf681f424,94267565,0,0x0,8
tick,0x7ffdf681f424,94269562,0,0x0,8
tick,0x7ffdf681f424,94271592,0,0x0,8
tick,0x7ffdf681f424,94273527,0,0x0,8
tick,0x7ffdf681f424,94275523,0,0x0,8
tick,0x7ffdf681f424,94277515,0,0x0,8
tick,0x7ffdf681f424,94279537,0,0x0,8
tick,0x7ffdf681f424,94281558,0,0x0,8
tick,0x7ffdf681f424,94283507,0,0x0,8
tick,0x7ffdf681f424,94285565,0,0x0,8
tick,0x7ffdf681f424,94287564,0,0x0,8
tick,0x7ffdf681f424,94289544,0,0x0,8
tick,0x7ffdf681f424,94291539,0,0x0,8
tick,0x7ffdf681f424,94293548,0,0x0,8
tick,0x7ffdf681f424,94295503,0,0x0,8
tick,0x7ffdf681f424,94297473,0,0x0,8
tick,0x7ffdf681f424,94299502,0,0x0,8
tick,0x7ffdf681f424,94301482,0,0x0,8
tick,0x7ffdf681f424,94303431,0,0x0,8
tick,0x7ffdf681f424,94305447,0,0x0,8
tick,0x7ffdf681f424,94307485,0,0x0,8
tick,0x7ffdf681f424,94309432,0,0x0,8
tick,0x7ffdf681f424,94311445,0,0x0,8
tick,0x7ffdf681f424,94313419,0,0x0,8
tick,0x7ffdf681f424,94315424,0,0x0,8
tick,0x7ffdf681f424,94317410,0,0x0,8
tick,0x7ffdf681f424,94319405,0,0x0,8
tick,0x7ffdf681f424,94321420,0,0x0,8
tick,0x7ffdf681f424,94323415,0,0x0,8
tick,0x7ffdf681f424,94325395,0,0x0,8
tick,0x7ffdf681f424,94327384,0,0x0,8
tick,0x7ffdf681f424,94329398,0,0x0,8
tick,0x7ffdf681f424,94331470,0,0x0,8
tick,0x7ffdf681f424,94333483,0,0x0,8
tick,0x7ffdf681f424,94335493,0,0x0,8
tick,0x7ffdf681f424,94337472,0,0x0,8
tick,0x7ffdf681f424,94339352,0,0x0,8
tick,0x7ffdf681f424,94341464,0,0x0,8
tick,0x7ffdf681f424,94343457,0,0x0,8
tick,0x7ffdf681f424,94345334,0,0x0,8
tick,0x7ffdf681f424,94347437,0,0x0,8
tick,0x7ffdf681f424,94349325,0,0x0,8
tick,0x7ffdf681f424,94351327,0,0x0,8
tick,0x7ffdf681f424,94353394,0,0x0,8
tick,0x7ffdf681f424,94355338,0,0x0,8
tick,0x7ffdf681f424,94357304,0,0x0,8
tick,0x7ffdf681f424,94359359,0,0x0,8
tick,0x7ffdf681f424,94361313,0,0x0,8
tick,0x7ffdf681f424,94363394,0,0x0,8
tick,0x7ffdf681f424,94365283,0,0x0,8
tick,0x7ffdf681f424,94367273,0,0x0,8
tick,0x7ffdf681f424,94369278,0,0x0,8
tick,0x7ffdf681f424,94371284,0,0x0,8
tick,0x7ffdf681f424,94373318,0,0x0,8
tick,0x7ffdf681f424,94375375,0,0x0,8
tick,0x7ffdf681f424,94377322,0,0x0,8
tick,0x7ffdf681f424,94379309,0,0x0,8
tick,0x7ffdf681f424,94381314,0,0x0,8
tick,0x7ffdf681f424,94383418,0,0x0,8
tick,0x7ffdf681f424,94385307,0,0x0,8
tick,0x7ffdf681f424,94387398,0,0x0,8
tick,0x7ffdf681f424,94389379,0,0x0,8
tick,0x7ffdf681f424,94391290,0,0x0,8
tick,0x7ffdf681f424,94393374,0,0x0,8
tick,0x7ffdf681f424,94395260,0,0x0,8
tick,0x7ffdf681f424,94397259,0,0x0,8
tick,0x7ffdf681f424,94399248,0,0x0,8
tick,0x7ffdf681f424,94401346,0,0x0,8
tick,0x7ffdf681f424,94403254,0,0x0,8
tick,0x7ffdf681f424,94405334,0,0x0,8
tick,0x7ffdf681f424,94407285,0,0x0,8
tick,0x7ffdf681f424,94409328,0,0x0,8
tick,0x7ffdf681f424,94411292,0,0x0,8
tick,0x7ffdf681f424,94413355,0,0x0,8
tick,0x7ffdf681f424,94415307,0,0x0,8
tick,0x7ffdf681f424,94417317,0,0x0,8
tick,0x7ffdf681f424,94419303,0,0x0,8
tick,0x7ffdf681f424,94421300,0,0x0,8
tick,0x7ffdf681f424,94423246,0,0x0,8
tick,0x7ffdf681f424,94425286,0,0x0,8
tick,0x7ffdf681f424,94427305,0,0x0,8
tick,0x7ffdf681f424,94429283,0,0x0,8
tick,0x7ffdf681f424,94431276,0,0x0,8
tick,0x7ffdf681f424,94433275,0,0x0,8
tick,0x7ffdf681f424,94435302,0,0x0,8
tick,0x7ffdf681f424,94437264,0,0x0,8
tick,0x7ffdf681f424,94439145,0,0x0,8
tick,0x7ffdf681f424,94441241,0,0x0,8
tick,0x7ffdf681f424,94443236,0,0x0,8
tick,0x7ffdf681f424,94445187,0,0x0,8
tick,0x7ffdf681f424,94447229,0,0x0,8
tick,0x7ffdf681f424,94449218,0,0x0,8
tick,0x7ffdf681f424,94451218,0,0x0,8
tick,0x7ffdf681f424,94453126,0,0x0,8
tick,0x7ffdf681f424,94455204,0,0x0,8
tick,0x7ffdf681f424,94457055,0,0x0,8
tick,0x7ffdf681f424,94459218,0,0x0,8
tick,0x7ffdf681f424,94461192,0,0x0,8
tick,0x7ffdf681f424,94463077,0,0x0,8
tick,0x7ffdf681f424,94465045,0,0x0,8
tick,0x7ffdf681f424,94466991,0,0x0,8
tick,0x7ffdf681f424,94469083,0,0x0,8
tick,0x7ffdf681f424,94471015,0,0x0,8
tick,0x7ffdf681f424,94473063,0,0x0,8
tick,0x7ffdf681f424,94475138,0,0x0,8
tick,0x7ffdf681f424,94477159,0,0x0,8
tick,0x7ffdf681f424,94479022,0,0x0,8
tick,0x7ffdf681f424,94481101,0,0x0,8
tick,0x7ffdf681f424,94483133,0,0x0,8
tick,0x7ffdf681f424,94485126,0,0x0,8
tick,0x7ffdf681f424,94487014,0,0x0,8
tick,0x7ffdf681f424,94489114,0,0x0,8
tick,0x7ffdf681f424,94491111,0,0x0,8
tick,0x7ffdf681f424,94493105,0,0x0,8
tick,0x7ffdf681f424,94494997,0,0x0,8
tick,0x7ffdf681f424,94497010,0,0x0,8
tick,0x7ffdf681f424,94499078,0,0x0,8
tick,0x7ffdf681f424,94501079,0,0x0,8
tick,0x7ffdf681f424,94503092,0,0x0,8
tick,0x7ffdf681f424,94504976,0,0x0,8
tick,0x7ffdf681f424,94507060,0,0x0,8
tick,0x7ffdf681f424,94509061,0,0x0,8
tick,0x7ffdf681f424,94511056,0,0x0,8
tick,0x7ffdf681f424,94512964,0,0x0,8
tick,0x7ffdf681f424,94514963,0,0x0,8
tick,0x7ffdf681f424,94517027,0,0x0,8
tick,0x7ffdf681f424,94519025,0,0x0,8
tick,0x7ffdf681f424,94520936,0,0x0,8
tick,0x7ffdf681f424,94522911,0,0x0,8
tick,0x7ffdf681f424,94525002,0,0x0,8
tick,0x7ffdf681f424,94527014,0,0x0,8
tick,0x7ffdf681f424,94528900,0,0x0,8
tick,0x7ffdf681f424,94530930,0,0x0,8
tick,0x7ffdf681f424,94532876,0,0x0,8
tick,0x7ffdf681f424,94535008,0,0x0,8
tick,0x7ffdf681f424,94536899,0,0x0,8
tick,0x7ffdf681f424,94538951,0,0x0,8
tick,0x7ffdf681f424,94540971,0,0x0,8
tick,0x7ffdf681f424,94542958,0,0x0,8
tick,0x7ffdf681f424,94544784,0,0x0,8
tick,0x7ffdf681f424,94546856,0,0x0,8
tick,0x7ffdf681f424,94548950,0,0x0,8
tick,0x7ffdf681f424,94550933,0,0x0,8
tick,0x7ffdf681f424,94552933,0,0x0,8
tick,0x7ffdf681f424,94554801,0,0x0,8
tick,0x7ffdf681f424,94556929,0,0x0,8
tick,0x7ffdf681f424,94558816,0,0x0,8
tick,0x7ffdf681f424,94560811,0,0x0,8
tick,0x7ffdf681f424,94562848,0,0x0,8
tick,0x7ffdf681f424,94564827,0,0x0,8
tick,0x7ffdf681f424,94566827,0,0x0,8
tick,0x7ffdf681f424,94568873,0,0x0,8
tick,0x7ffdf681f424,94570819,0,0x0,8
tick,0x7ffdf681f424,94572800,0,0x0,8
tick,0x7ffdf681f424,94574817,0,0x0,8
tick,0x7ffdf681f424,94576786,0,0x0,8
tick,0x7ffdf681f424,94577914,0,0x0,8
tick,0x7ffdf681f424,94579797,0,0x0,8
tick,0x7ffdf681f424,94581767,0,0x0,8
tick,0x7ffdf681f424,94582950,0,0x0,8
tick,0x7ffdf681f424,94584891,0,0x0,8
tick,0x7ffdf681f424,94586789,0,0x0,8
tick,0x7ffdf681f424,94588922,0,0x0,8
tick,0x7ffdf681f424,94590908,0,0x0,8
tick,0x7ffdf681f424,94592890,0,0x0,8
tick,0x7ffdf681f424,94594088,0,0x0,8
tick,0x7ffdf681f424,94596200,0,0x0,8
tick,0x7ffdf681f424,94597423,0,0x0,8
tick,0x7ffdf681f424,94598574,0,0x0,8
tick,0x7ffdf681f424,94600597,0,0x0,8
tick,0x7ffdf681f424,94601712,0,0x0,8
tick,0x7ffdf681f424,94603622,0,0x0,8
tick,0x7ffdf681f424,94605715,0,0x0,8
tick,0x7ffdf681f424,94607716,0,0x0,8
tick,0x7ffdf681f424,94609584,0,0x0,8
tick,0x7ffdf681f424,94611596,0,0x0,8
tick,0x7ffdf681f424,94613717,0,0x0,8
tick,0x7ffdf681f424,94614833,0,0x0,8
tick,0x7ffdf681f424,94616795,0,0x0,8
tick,0x7ffdf681f424,94618905,0,0x0,8
tick,0x7ffdf681f424,94620703,0,0x0,8
tick,0x7ffdf681f424,94622819,0,0x0,8
tick,0x7ffdf681f424,94624859,0,0x0,8
tick,0x7ffdf681f424,94626809,0,0x0,8
tick,0x7ffdf681f424,94628743,0,0x0,8
tick,0x7ffdf681f424,94630842,0,0x0,8
tick,0x7ffdf681f424,94632861,0,0x0,8
tick,0x7ffdf681f424,94634970,0,0x0,8
tick,0x7ffdf681f424,94636830,0,0x0,8
tick,0x7ffdf681f424,94637993,0,0x0,8
tick,0x7ffdf681f424,94639125,0,0x0,8
tick,0x7ffdf681f424,94641155,0,0x0,8
tick,0x7ffdf681f424,94643130,0,0x0,8
tick,0x7ffdf681f424,94644224,0,0x0,8
tick,0x7ffdf681f424,94646185,0,0x0,8
tick,0x7ffdf681f424,94648197,0,0x0,8
tick,0x7ffdf681f424,94650184,0,0x0,8
tick,0x7ffdf681f424,94652311,0,0x0,8
tick,0x7ffdf681f424,94654241,0,0x0,8
tick,0x7ffdf681f424,94656214,0,0x0,8
tick,0x7ffdf681f424,94658279,0,0x0,8
tick,0x7ffdf681f424,94660258,0,0x0,8
tick,0x7ffdf681f424,94662212,0,0x0,8
tick,0x7ffdf681f424,94664248,0,0x0,8
tick,0x7ffdf681f424,94666257,0,0x0,8
tick,0x7ffdf681f424,94668242,0,0x0,8
tick,0x7ffdf681f424,94670190,0,0x0,8
tick,0x7ffdf681f424,94672226,0,0x0,8
tick,0x7ffdf681f424,94674234,0,0x0,8
tick,0x7ffdf681f424,94676292,0,0x0,8
tick,0x7ffdf681f424,94678105,0,0x0,8
tick,0x7ffdf681f424,94680263,0,0x0,8
tick,0x7ffdf681f424,94682270,0,0x0,8
tick,0x7ffdf681f424,94684279,0,0x0,8
tick,0x7ffdf681f424,94686259,0,0x0,8
tick,0x7ffdf681f424,94688351,0,0x0,8
tick,0x7ffdf681f424,94690238,0,0x0,8
tick,0x7ffdf681f424,94692321,0,0x0,8
tick,0x7ffdf681f424,94694253,0,0x0,8
tick,0x7ffdf681f424,94696296,0,0x0,8
tick,0x7ffdf681f424,94698242,0,0x0,8
tick,0x7ffdf681f424,94700248,0,0x0,8
tick,0x7ffdf681f424,94702281,0,0x0,8
tick,0x7ffdf681f424,94704220,0,0x0,8
tick,0x7ffdf681f424,94706209,0,0x0,8
tick,0x7ffdf681f424,94708262,0,0x0,8
tick,0x7ffdf681f424,94710295,0,0x0,8
tick,0x7ffdf681f424,94712216,0,0x0,8
tick,0x7ffdf681f424,94714254,0,0x0,8
tick,0x7ffdf681f424,94716251,0,0x0,8
tick,0x7ffdf681f424,94718234,0,0x0,8
tick,0x7ffdf681f424,94720228,0,0x0,8
tick,0x7ffdf681f424,94722270,0,0x0,8
tick,0x7ffdf681f424,94724287,0,0x0,8
tick,0x7ffdf681f424,94726289,0,0x0,8
tick,0x7ffdf681f424,94728150,0,0x0,8
tick,0x7ffdf681f424,94730195,0,0x0,8
tick,0x7ffdf681f424,94732134,0,0x0,8
tick,0x7ffdf681f424,94734285,0,0x0,8
tick,0x7ffdf681f424,94736252,0,0x0,8
tick,0x7ffdf681f424,94738163,0,0x0,8
tick,0x7ffdf681f424,94740264,0,0x0,8
tick,0x7ffdf681f424,94742250,0,0x0,8
tick,0x7ffdf681f424,94744244,0,0x0,8
tick,0x7ffdf681f424,94746192,0,0x0,8
tick,0x7ffdf681f424,94748234,0,0x0,8
tick,0x7ffdf681f424,94750285,0,0x0,8
tick,0x7ffdf681f424,94752259,0,0x0,8
tick,0x7ffdf681f424,94754175,0,0x0,8
tick,0x7ffdf681f424,94756245,0,0x0,8
tick,0x7ffdf681f424,94758296,0,0x0,8
tick,0x7ffdf681f424,94760251,0,0x0,8
tick,0x7ffdf681f424,94762177,0,0x0,8
tick,0x7ffdf681f424,94764104,0,0x0,8
tick,0x7ffdf681f424,94766267,0,0x0,8
tick,0x7ffdf681f424,94768222,0,0x0,8
tick,0x7ffdf681f424,94770100,0,0x0,8
tick,0x7ffdf681f424,94772103,0,0x0,8
tick,0x7ffdf681f424,94774125,0,0x0,8
tick,0x7ffdf681f424,94776087,0,0x0,8
tick,0x7ffdf681f424,94778233,0,0x0,8
tick,0x7ffdf681f424,94780088,0,0x0,8
tick,0x7ffdf681f424,94782116,0,0x0,8
tick,0x7ffdf681f424,94784289,0,0x0,8
tick,0x7ffdf681f424,94786337,0,0x0,8
tick,0x7ffdf681f424,94788135,0,0x0,8
tick,0x7ffdf681f424,94790123,0,0x0,8
tick,0x7ffdf681f424,94792233,0,0x0,8
tick,0x7ffdf681f424,94794253,0,0x0,8
tick,0x7ffdf681f424,94796128,0,0x0,8
tick,0x7ffdf681f424,94798187,0,0x0,8
tick,0x7ffdf681f424,94800148,0,0x0,8
tick,0x7ffdf681f424,94802248,0,0x0,8
tick,0x7ffdf681f424,94804121,0,0x0,8
tick,0x7ffdf681f424,94806251,0,0x0,8
tick,0x7ffdf681f424,94808257,0,0x0,8
tick,0x7ffdf681f424,94810212,0,0x0,8
tick,0x7ffdf681f424,94812129,0,0x0,8
tick,0x7ffdf681f424,94814285,0,0x0,8
tick,0x7ffdf681f424,94816289,0,0x0,8
tick,0x7ffdf681f424,94818236,0,0x0,8
tick,0x7ffdf681f424,94820170,0,0x0,8
tick,0x7ffdf681f424,94822255,0,0x0,8
tick,0x7ffdf681f424,94824272,0,0x0,8
tick,0x7ffdf681f424,94826256,0,0x0,8
tick,0x7ffdf681f424,94828148,0,0x0,8
tick,0x7ffdf681f424,94830324,0,0x0,8
tick,0x7ffdf681f424,94832261,0,0x0,8
tick,0x7ffdf681f424,94834273,0,0x0,8
tick,0x7ffdf681f424,94836258,0,0x0,8
tick,0x7ffdf681f424,94838136,0,0x0,8
tick,0x7ffdf681f424,94840287,0,0x0,8
tick,0x7ffdf681f424,94842280,0,0x0,8
tick,0x7ffdf681f424,94844259,0,0x0,8
tick,0x7ffdf681f424,94846152,0,0x0,8
tick,0x7ffdf681f424,94848280,0,0x0,8
tick,0x7ffdf681f424,94850247,0,0x0,8
tick,0x7ffdf681f424,94852325,0,0x0,8
tick,0x7ffdf681f424,94854279,0,0x0,8
tick,0x7ffdf681f424,94856353,0,0x0,8
tick,0x7ffdf681f424,94858307,0,0x0,8
tick,0x7ffdf681f424,94860318,0,0x0,8
tick,0x7ffdf681f424,94862255,0,0x0,8
tick,0x7ffdf681f424,94864347,0,0x0,8
tick,0x7ffdf681f424,94866373,0,0x0,8
tick,0x7ffdf681f424,94868301,0,0x0,8
tick,0x7ffdf681f424,94870297,0,0x0,8
tick,0x7ffdf681f424,94872339,0,0x0,8
tick,0x7ffdf681f424,94874289,0,0x0,8
tick,0x7ffdf681f424,94876351,0,0x0,8
tick,0x7ffdf681f424,94878270,0,0x0,8
tick,0x7ffdf681f424,94880319,0,0x0,8
tick,0x7ffdf681f424,94882332,0,0x0,8
tick,0x7ffdf681f424,94884391,0,0x0,8
tick,0x7ffdf681f424,94886383,0,0x0,8
tick,0x7ffdf681f424,94888321,0,0x0,8
tick,0x7ffdf681f424,94890393,0,0x0,8
tick,0x7ffdf681f424,94892356,0,0x0,8
tick,0x7ffdf681f424,94894340,0,0x0,8
tick,0x7ffdf681f424,94896354,0,0x0,8
tick,0x7ffdf681f424,94898349,0,0x0,8
tick,0x7ffdf681f424,94900447,0,0x0,8
tick,0x7ffdf681f424,94902404,0,0x0,8
tick,0x7ffdf681f424,94904454,0,0x0,8
tick,0x7ffdf681f424,94906561,0,0x0,8
tick,0x7ffdf681f424,94908594,0,0x0,8
tick,0x7ffdf681f424,94910588,0,0x0,8
tick,0x7ffdf681f424,94912544,0,0x0,8
tick,0x7ffdf681f424,94914606,0,0x0,8
tick,0x7ffdf681f424,94916614,0,0x0,8
tick,0x7ffdf681f424,94918537,0,0x0,8
tick,0x7ffdf681f424,94920543,0,0x0,8
tick,0x7ffdf681f424,94922582,0,0x0,8
tick,0x7ffdf681f424,94924619,0,0x0,8
tick,0x7ffdf681f424,94926729,0,0x0,8
tick,0x7ffdf681f424,94928653,0,0x0,8
tick,0x7ffdf681f424,94930625,0,0x0,8
tick,0x7ffdf681f424,94931802,0,0x0,8
tick,0x7ffdf681f424,94933700,0,0x0,8
tick,0x7ffdf681f424,94935704,0,0x0,8
tick,0x7ffdf681f424,94937761,0,0x0,8
tick,0x7ffdf681f424,94939708,0,0x0,8
tick,0x7ffdf681f424,94941694,0,0x0,8
tick,0x7ffdf681f424,94943862,0,0x0,8
tick,0x7ffdf681f424,94945763,0,0x0,8
tick,0x7ffdf681f424,94947708,0,0x0,8
tick,0x7ffdf681f424,94949778,0,0x0,8
tick,0x7ffdf681f424,94951984,0,0x0,8
tick,0x7ffdf681f424,94953752,0,0x0,8
tick,0x7ffdf681f424,94955866,0,0x0,8
tick,0x7ffdf681f424,94957711,0,0x0,8
tick,0x7ffdf681f424,94959740,0,0x0,8
tick,0x7ffdf681f424,94961793,0,0x0,8
tick,0x7ffdf681f424,94963885,0,0x0,8
tick,0x7ffdf681f424,94965876,0,0x0,8
tick,0x7ffdf681f424,94967744,0,0x0,8
tick,0x7ffdf681f424,94968921,0,0x0,8
tick,0x7ffdf681f424,94970833,0,0x0,8
tick,0x7ffdf681f424,94972767,0,0x0,8
tick,0x7ffdf681f424,94974737,0,0x0,8
tick,0x7ffdf681f424,94976807,0,0x0,8
tick,0x7ffdf681f424,94978752,0,0x0,8
tick,0x7ffdf681f424,94980843,0,0x0,8
tick,0x7ffdf681f424,94982853,0,0x0,8
tick,0x7ffdf681f424,94984030,0,0x0,8
tick,0x7ffdf681f424,94985977,0,0x0,8
tick,0x7ffdf681f424,94988016,0,0x0,8
tick,0x7ffdf681f424,94989987,0,0x0,8
tick,0x7ffdf681f424,94991161,0,0x0,8
tick,0x7ffdf681f424,94993112,0,0x0,8
tick,0x7ffdf681f424,94995002,0,0x0,8
tick,0x7ffdf681f424,94997137,0,0x0,8
tick,0x7ffdf681f424,94999188,0,0x0,8
tick,0x7ffdf681f424,95001263,0,0x0,8
tick,0x7ffdf681f424,95003267,0,0x0,8
tick,0x7ffdf681f424,95005142,0,0x0,8
tick,0x7ffdf681f424,95007248,0,0x0,8
tick,0x7ffdf681f424,95009276,0,0x0,8
tick,0x7ffdf681f424,95011231,0,0x0,8
tick,0x7ffdf681f424,95013231,0,0x0,8
tick,0x7ffdf681f424,95015230,0,0x0,8
tick,0x7ffdf681f424,95017269,0,0x0,8
tick,0x7ffdf681f424,95019205,0,0x0,8
tick,0x7ffdf681f424,95021199,0,0x0,8
tick,0x7ffdf681f424,95023194,0,0x0,8
tick,0x7ffdf681f424,95025196,0,0x0,8
tick,0x7ffdf681f424,95027175,0,0x0,8
tick,0x7ffdf681f424,95029180,0,0x0,8
tick,0x7ffdf681f424,95031215,0,0x0,8
tick,0x7ffdf681f424,95033217,0,0x0,8
tick,0x7ffdf681f424,95035214,0,0x0,8
tick,0x7ffdf681f424,95037119,0,0x0,8
tick,0x7ffdf681f424,95039201,0,0x0,8
tick,0x7ffdf681f424,95041199,0,0x0,8
tick,0x7ffdf681f424,95043178,0,0x0,8
tick,0x7ffdf681f424,95045078,0,0x0,8
tick,0x7ffdf681f424,95047168,0,0x0,8
tick,0x7ffdf681f424,95049179,0,0x0,8
tick,0x7ffdf681f424,95051186,0,0x0,8
tick,0x7ffdf681f424,95053173,0,0x0,8
tick,0x7ffdf681f424,95055149,0,0x0,8
tick,0x7ffdf681f424,95057153,0,0x0,8
tick,0x7ffdf681f424,95059145,0,0x0,8
tick,0x7ffdf681f424,95061162,0,0x0,8
tick,0x7ffdf681f424,95063132,0,0x0,8
tick,0x7ffdf681f424,95065123,0,0x0,8
tick,0x7ffdf681f424,95067127,0,0x0,8
tick,0x7ffdf681f424,95069012,0,0x0,8
tick,0x7ffdf681f424,95070999,0,0x0,8
tick,0x7ffdf681f424,95073109,0,0x0,8
tick,0x7ffdf681f424,95075094,0,0x0,8
tick,0x7ffdf681f424,95077102,0,0x0,8
tick,0x7ffdf681f424,95078979,0,0x0,8
tick,0x7ffdf681f424,95081079,0,0x0,8
tick,0x7ffdf681f424,95083072,0,0x0,8
tick,0x7ffdf681f424,95085079,0,0x0,8
tick,0x7ffdf681f424,95087008,0,0x0,8
tick,0x7ffdf681f424,95089056,0,0x0,8
tick,0x7ffdf681f424,95091059,0,0x0,8
tick,0x7ffdf681f424,95093109,0,0x0,8
tick,0x7ffdf681f424,95094939,0,0x0,8
tick,0x7ffdf681f424,95097033,0,0x0,8
tick,0x7ffdf681f424,95098938,0,0x0,8
tick,0x7ffdf681f424,95101028,0,0x0,8
tick,0x7ffdf681f424,95103028,0,0x0,8
tick,0x7ffdf681f424,95105008,0,0x0,8
tick,0x7ffdf681f424,95106913,0,0x0,8
tick,0x7ffdf681f424,95109010,0,0x0,8
tick,0x7ffdf681f424,95110998,0,0x0,8
tick,0x7ffdf681f424,95113012,0,0x0,8
tick,0x7ffdf681f424,95115016,0,0x0,8
tick,0x7ffdf681f424,95116982,0,0x0,8
tick,0x7ffdf681f424,95118956,0,0x0,8
tick,0x7ffdf681f424,95120973,0,0x0,8
tick,0x7ffdf681f424,95122868,0,0x0,8
tick,0x7ffdf681f424,95124959,0,0x0,8
tick,0x7ffdf681f424,95126962,0,0x0,8
tick,0x7ffdf681f424,95128959,0,0x0,8
tick,0x7ffdf681f424,95130947,0,0x0,8
tick,0x7ffdf681f424,95132937,0,0x0,8
tick,0x7ffdf681f424,95134833,0,0x0,8
tick,0x7ffdf681f424,95136753,0,0x0,8
tick,0x7ffdf681f424,95138810,0,0x0,8
tick,0x7ffdf681f424,95140867,0,0x0,8
tick,0x7ffdf681f424,95142879,0,0x0,8
tick,0x7ffdf681f424,95144941,0,0x0,8
tick,0x7ffdf681f424,95146743,0,0x0,8
tick,0x7ffdf681f424,95148848,0,0x0,8
tick,0x7ffdf681f424,95150841,0,0x0,8
tick,0x7ffdf681f424,95152725,0,0x0,8
tick,0x7ffdf681f424,95154832,0,0x0,8
tick,0x7ffdf681f424,95156832,0,0x0,8
tick,0x7ffdf681f424,95158812,0,0x0,8
tick,0x7ffdf681f424,95160852,0,0x0,8
tick,0x7ffdf681f424,95162841,0,0x0,8
tick,0x7ffdf681f424,95164805,0,0x0,8
tick,0x7ffdf681f424,95166810,0,0x0,8
tick,0x7ffdf681f424,95168794,0,0x0,8
tick,0x7ffdf681f424,95170795,0,0x0,8
tick,0x7ffdf681f424,95172797,0,0x0,8
tick,0x7ffdf681f424,95174781,0,0x0,8
tick,0x7ffdf681f424,95176781,0,0x0,8
tick,0x7ffdf681f424,95178739,0,0x0,8
tick,0x7ffdf681f424,95180777,0,0x0,8
tick,0x7ffdf681f424,95182818,0,0x0,8
tick,0x7ffdf681f424,95184802,0,0x0,8
tick,0x7ffdf681f424,95186757,0,0x0,8
tick,0x7ffdf681f424,95188791,0,0x0,8
tick,0x7ffdf681f424,95190790,0,0x0,8
tick,0x7ffdf681f424,95192796,0,0x0,8
tick,0x7ffdf681f424,95194755,0,0x0,8
tick,0x7ffdf681f424,95196776,0,0x0,8
tick,0x7ffdf681f424,95198772,0,0x0,8
tick,0x7ffdf681f424,95200770,0,0x0,8
tick,0x7ffdf681f424,95202804,0,0x0,8
tick,0x7ffdf681f424,95204754,0,0x0,8
tick,0x7ffdf681f424,95206746,0,0x0,8
tick,0x7ffdf681f424,95208757,0,0x0,8
tick,0x7ffdf681f424,95210735,0,0x0,8
tick,0x7ffdf681f424,95212735,0,0x0,8
tick,0x7ffdf681f424,95214725,0,0x0,8
tick,0x7ffdf681f424,95216697,0,0x0,8
tick,0x7ffdf681f424,95218716,0,0x0,8
tick,0x7ffdf681f424,95220728,0,0x0,8
tick,0x7ffdf681f424,95222607,0,0x0,8
tick,0x7ffdf681f424,95224589,0,0x0,8
tick,0x7ffdf681f424,95226690,0,0x0,8
tick,0x7ffdf681f424,95228579,0,0x0,8
tick,0x7ffdf681f424,95230686,0,0x0,8
tick,0x7ffdf681f424,95232682,0,0x0,8
tick,0x7ffdf681f424,95234678,0,0x0,8
tick,0x7ffdf681f424,95236604,0,0x0,8
tick,0x7ffdf681f424,95238668,0,0x0,8
tick,0x7ffdf681f424,95240655,0,0x0,8
tick,0x7ffdf681f424,95242657,0,0x0,8
tick,0x7ffdf681f424,95244655,0,0x0,8
tick,0x7ffdf681f424,95246672,0,0x0,8
tick,0x7ffdf681f424,95248639,0,0x0,8
tick,0x7ffdf681f424,95250634,0,0x0,8
tick,0x7ffdf681f424,95252623,0,0x0,8
tick,0x7ffdf681f424,95254619,0,0x0,8
tick,0x7ffdf681f424,95256610,0,0x0,8
tick,0x7ffdf681f424,95258610,0,0x0,8
tick,0x7ffdf681f424,95260604,0,0x0,8
tick,0x7ffdf681f424,95262604,0,0x0,8
tick,0x7ffdf681f424,95264594,0,0x0,8
tick,0x7ffdf681f424,95266504,0,0x0,8
tick,0x7ffdf681f424,95268578,0,0x0,8
tick,0x7ffdf681f424,95270535,0,0x0,8
tick,0x7ffdf681f424,95272555,0,0x0,8
tick,0x7ffdf681f424,95274511,0,0x0,8
tick,0x7ffdf681f424,95276459,0,0x0,8
tick,0x7ffdf681f424,95278452,0,0x0,8
tick,0x7ffdf681f424,95280562,0,0x0,8
tick,0x7ffdf681f424,95282545,0,0x0,8
tick,0x7ffdf681f424,95284537,0,0x0,8
tick,0x7ffdf681f424,95286532,0,0x0,8
tick,0x7ffdf681f424,95288538,0,0x0,8
tick,0x7ffdf681f424,95290553,0,0x0,8
tick,0x7ffdf681f424,95292520,0,0x0,8
tick,0x7ffdf681f424,95294516,0,0x0,8
tick,0x7ffdf681f424,95296517,0,0x0,8
tick,0x7ffdf681f424,95298534,0,0x0,8
tick,0x7ffdf681f424,95300398,0,0x0,8
tick,0x7ffdf681f424,95302490,0,0x0,8
tick,0x7ffdf681f424,95304489,0,0x0,8
tick,0x7ffdf681f424,95306501,0,0x0,8
tick,0x7ffdf681f424,95308474,0,0x0,8
tick,0x7ffdf681f424,95310392,0,0x0,8
tick,0x7ffdf681f424,95312449,0,0x0,8
tick,0x7ffdf681f424,95314486,0,0x0,8
tick,0x7ffdf681f424,95316456,0,0x0,8
tick,0x7ffdf681f424,95318452,0,0x0,8
tick,0x7ffdf681f424,95320450,0,0x0,8
tick,0x7ffdf681f424,95322439,0,0x0,8
tick,0x7ffdf681f424,95324433,0,0x0,8
tick,0x7ffdf681f424,95326431,0,0x0,8
tick,0x7ffdf681f424,95328317,0,0x0,8
tick,0x7ffdf681f424,95330416,0,0x0,8
tick,0x7ffdf681f424,95332409,0,0x0,8
tick,0x7ffdf681f424,95334445,0,0x0,8
tick,0x7ffdf681f424,95336407,0,0x0,8
tick,0x7ffdf681f424,95338398,0,0x0,8
tick,0x7ffdf681f424,95340387,0,0x0,8
tick,0x7ffdf681f424,95342383,0,0x0,8
tick,0x7ffdf681f424,95344378,0,0x0,8
tick,0x7ffdf681f424,95346376,0,0x0,8
tick,0x7ffdf681f424,95348372,0,0x0,8
tick,0x7ffdf681f424,95350365,0,0x0,8
tick,0x7ffdf681f424,95352357,0,0x0,8
tick,0x7ffdf681f424,95354362,0,0x0,8
tick,0x7ffdf681f424,95356382,0,0x0,8
tick,0x7ffdf681f424,95358351,0,0x0,8
tick,0x7ffdf681f424,95360338,0,0x0,8
tick,0x7ffdf681f424,95362333,0,0x0,8
tick,0x7ffdf681f424,95364322,0,0x0,8
tick,0x7ffdf681f424,95366319,0,0x0,8
tick,0x7ffdf681f424,95368316,0,0x0,8
tick,0x7ffdf681f424,95370224,0,0x0,8
tick,0x7ffdf681f424,95372301,0,0x0,8
tick,0x7ffdf681f424,95374312,0,0x0,8
tick,0x7ffdf681f424,95376200,0,0x0,8
tick,0x7ffdf681f424,95378264,0,0x0,8
tick,0x7ffdf681f424,95380275,0,0x0,8
tick,0x7ffdf681f424,95382281,0,0x0,8
tick,0x7ffdf681f424,95384271,0,0x0,8
tick,0x7ffdf681f424,95386267,0,0x0,8
tick,0x7ffdf681f424,95388284,0,0x0,8
tick,0x7ffdf681f424,95390259,0,0x0,8
tick,0x7ffdf681f424,95392256,0,0x0,8
tick,0x7ffdf681f424,95394241,0,0x0,8
tick,0x7ffdf681f424,95396248,0,0x0,8
tick,0x7ffdf681f424,95398242,0,0x0,8
tick,0x7ffdf681f424,95400263,0,0x0,8
tick,0x7ffdf681f424,95402238,0,0x0,8
tick,0x7ffdf681f424,95404222,0,0x0,8
tick,0x7ffdf681f424,95406211,0,0x0,8
tick,0x7ffdf681f424,95408206,0,0x0,8
tick,0x7ffdf681f424,95410218,0,0x0,8
tick,0x7ffdf681f424,95412196,0,0x0,8
tick,0x7ffdf681f424,95414061,0,0x0,8
tick,0x7ffdf681f424,95416059,0,0x0,8
tick,0x7ffdf681f424,95418189,0,0x0,8
tick,0x7ffdf681f424,95420065,0,0x0,8
tick,0x7ffdf681f424,95422167,0,0x0,8
tick,0x7ffdf681f424,95424170,0,0x0,8
tick,0x7ffdf681f424,95426170,0,0x0,8
tick,0x7ffdf681f424,95428149,0,0x0,8
tick,0x7ffdf681f424,95430154,0,0x0,8
tick,0x7ffdf681f424,95432151,0,0x0,8
tick,0x7ffdf681f424,95434136,0,0x0,8
tick,0x7ffdf681f424,95436141,0,0x0,8
tick,0x7ffdf681f424,95438132,0,0x0,8
tick,0x7ffdf681f424,95440121,0,0x0,8
tick,0x7ffdf681f424,95442123,0,0x0,8
tick,0x7ffdf681f424,95444152,0,0x0,8
tick,0x7ffdf681f424,95446135,0,0x0,8
tick,0x7ffdf681f424,95448122,0,0x0,8
tick,0x7ffdf681f424,95450102,0,0x0,8
tick,0x7ffdf681f424,95452087,0,0x0,8
tick,0x7ffdf681f424,95454093,0,0x0,8
tick,0x7ffdf681f424,95456084,0,0x0,8
tick,0x7ffdf681f424,95458076,0,0x0,8
tick,0x7ffdf681f424,95460096,0,0x0,8
tick,0x7ffdf681f424,95461956,0,0x0,8
tick,0x7ffdf681f424,95464082,0,0x0,8
tick,0x7ffdf681f424,95466028,0,0x0,8
tick,0x7ffdf681f424,95468058,0,0x0,8
tick,0x7ffdf681f424,95469994,0,0x0,8
tick,0x7ffdf681f424,95472044,0,0x0,8
tick,0x7ffdf681f424,95474034,0,0x0,8
tick,0x7ffdf681f424,95476025,0,0x0,8
tick,0x7ffdf681f424,95478023,0,0x0,8
tick,0x7ffdf681f424,95480022,0,0x0,8
tick,0x7ffdf681f424,95482010,0,0x0,8
tick,0x7ffdf681f424,95484005,0,0x0,8
tick,0x7ffdf681f424,95486014,0,0x0,8
tick,0x7ffdf681f424,95488032,0,0x0,8
tick,0x7ffdf681f424,95489988,0,0x0,8
tick,0x7ffdf681f424,95491980,0,0x0,8
tick,0x7ffdf681f424,95493976,0,0x0,8
tick,0x7ffdf681f424,95495979,0,0x0,8
tick,0x7ffdf681f424,95497972,0,0x0,8
tick,0x7ffdf681f424,95499964,0,0x0,8
tick,0x7ffdf681f424,95501962,0,0x0,8
tick,0x7ffdf681f424,95503951,0,0x0,8
tick,0x7ffdf681f424,95505953,0,0x0,8
tick,0x7ffdf681f424,95507948,0,0x0,8
tick,0x7ffdf681f424,95509975,0,0x0,8
tick,0x7ffdf681f424,95511849,0,0x0,8
tick,0x7ffdf681f424,95513928,0,0x0,8
tick,0x7ffdf681f424,95515928,0,0x0,8
tick,0x7ffdf681f424,95517926,0,0x0,8
tick,0x7ffdf681f424,95519906,0,0x0,8
tick,0x7ffdf681f424,95521902,0,0x0,8
tick,0x7ffdf681f424,95523853,0,0x0,8
tick,0x7ffdf681f424,95525902,0,0x0,8
tick,0x7ffdf681f424,95527891,0,0x0,8
tick,0x7ffdf681f424,95529780,0,0x0,8
tick,0x7ffdf681f424,95531847,0,0x0,8
tick,0x7ffdf681f424,95533878,0,0x0,8
tick,0x7ffdf681f424,95535866,0,0x0,8
tick,0x7ffdf681f424,95537754,0,0x0,8
tick,0x7ffdf681f424,95539862,0,0x0,8
tick,0x7ffdf681f424,95541852,0,0x0,8
tick,0x7ffdf681f424,95543854,0,0x0,8
tick,0x7ffdf681f424,95545848,0,0x0,8
tick,0x7ffdf681f424,95547837,0,0x0,8
tick,0x7ffdf681f424,95549833,0,0x0,8
tick,0x7ffdf681f424,95551813,0,0x0,8
tick,0x7ffdf681f424,95553857,0,0x0,8
tick,0x7ffdf681f424,95555814,0,0x0,8
tick,0x7ffdf681f424,95557807,0,0x0,8
tick,0x7ffdf681f424,95559804,0,0x0,8
tick,0x7ffdf681f424,95561689,0,0x0,8
tick,0x7ffdf681f424,95563800,0,0x0,8
tick,0x7ffdf681f424,95565786,0,0x0,8
tick,0x7ffdf681f424,95567787,0,0x0,8
tick,0x7ffdf681f424,95569776,0,0x0,8
tick,0x7ffdf681f424,95571777,0,0x0,8
tick,0x7ffdf681f424,95573769,0,0x0,8
tick,0x7ffdf681f424,95575807,0,0x0,8
tick,0x7ffdf681f424,95577780,0,0x0,8
tick,0x7ffdf681f424,95579751,0,0x0,8
tick,0x7ffdf681f424,95581744,0,0x0,8
tick,0x7ffdf681f424,95583740,0,0x0,8
tick,0x7ffdf681f424,95585733,0,0x0,8
tick,0x7ffdf681f424,95587727,0,0x0,8
tick,0x7ffdf681f424,95589727,0,0x0,8
tick,0x7ffdf681f424,95591718,0,0x0,8
tick,0x7ffdf681f424,95593717,0,0x0,8
tick,0x7ffdf681f424,95595724,0,0x0,8
tick,0x7ffdf681f424,95597739,0,0x0,8
tick,0x7ffdf681f424,95599707,0,0x0,8
tick,0x7ffdf681f424,95601691,0,0x0,8
tick,0x7ffdf681f424,95603579,0,0x0,8
tick,0x7ffdf681f424,95605680,0,0x0,8
tick,0x7ffdf681f424,95607591,0,0x0,8
tick,0x7ffdf681f424,95609680,0,0x0,8
tick,0x7ffdf681f424,95611661,0,0x0,8
tick,0x7ffdf681f424,95613658,0,0x0,8
tick,0x7ffdf681f424,95615551,0,0x0,8
tick,0x7ffdf681f424,95617560,0,0x0,8
tick,0x7ffdf681f424,95619465,0,0x0,8
tick,0x7ffdf681f424,95621560,0,0x0,8
tick,0x7ffdf681f424,95623569,0,0x0,8
tick,0x7ffdf681f424,95625642,0,0x0,8
tick,0x7ffdf681f424,95627517,0,0x0,8
tick,0x7ffdf681f424,95629502,0,0x0,8
tick,0x7ffdf681f424,95631596,0,0x0,8
tick,0x7ffdf681f424,95633631,0,0x0,8
tick,0x7ffdf681f424,95635594,0,0x0,8
tick,0x7ffdf681f424,95637595,0,0x0,8
tick,0x7ffdf681f424,95639585,0,0x0,8
tick,0x7ffdf681f424,95641612,0,0x0,8
tick,0x7ffdf681f424,95643580,0,0x0,8
tick,0x7ffdf681f424,95645445,0,0x0,8
tick,0x7ffdf681f424,95647452,0,0x0,8
tick,0x7ffdf681f424,95649451,0,0x0,8
tick,0x7ffdf681f424,95651446,0,0x0,8
tick,0x7ffdf681f424,95653469,0,0x0,8
tick,0x7ffdf681f424,95655426,0,0x0,8
tick,0x7ffdf681f424,95657426,0,0x0,8
tick,0x7ffdf681f424,95659522,0,0x0,8
tick,0x7ffdf681f424,95661432,0,0x0,8
tick,0x7ffdf681f424,95663400,0,0x0,8
tick,0x7ffdf681f424,95665516,0,0x0,8
tick,0x7ffdf681f424,95667398,0,0x0,8
tick,0x7ffdf681f424,95669414,0,0x0,8
tick,0x7ffdf681f424,95671387,0,0x0,8
tick,0x7ffdf681f424,95673484,0,0x0,8
tick,0x7ffdf681f424,95675476,0,0x0,8
tick,0x7ffdf681f424,95677483,0,0x0,8
tick,0x7ffdf681f424,95679485,0,0x0,8
tick,0x7ffdf681f424,95681476,0,0x0,8
tick,0x7ffdf681f424,95683436,0,0x0,8
tick,0x7ffdf681f424,95685403,0,0x0,8
tick,0x7ffdf681f424,95687464,0,0x0,8
tick,0x7ffdf681f424,95689453,0,0x0,8
tick,0x7ffdf681f424,95691448,0,0x0,8
tick,0x7ffdf681f424,95693440,0,0x0,8
tick,0x7ffdf681f424,95695366,0,0x0,8
tick,0x7ffdf681f424,95697434,0,0x0,8
tick,0x7ffdf681f424,95699439,0,0x0,8
tick,0x7ffdf681f424,95701422,0,0x0,8
tick,0x7ffdf681f424,95703371,0,0x0,8
tick,0x7ffdf681f424,95705419,0,0x0,8
tick,0x7ffdf681f424,95707427,0,0x0,8
tick,0x7ffdf681f424,95709275,0,0x0,8
tick,0x7ffdf681f424,95711362,0,0x0,8
tick,0x7ffdf681f424,95713380,0,0x0,8
tick,0x7ffdf681f424,95715404,0,0x0,8
tick,0x7ffdf681f424,95717361,0,0x0,8
tick,0x7ffdf681f424,95719365,0,0x0,8
tick,0x7ffdf681f424,95721362,0,0x0,8
tick,0x7ffdf681f424,95723364,0,0x0,8
tick,0x7ffdf681f424,95725353,0,0x0,8
tick,0x7ffdf681f424,95727356,0,0x0,8
tick,0x7ffdf681f424,95729352,0,0x0,8
tick,0x7ffdf681f424,95731355,0,0x0,8
tick,0x7ffdf681f424,95733336,0,0x0,8
tick,0x7ffdf681f424,95735326,0,0x0,8
tick,0x7ffdf681f424,95737334,0,0x0,8
tick,0x7ffdf681f424,95739361,0,0x0,8
tick,0x7ffdf681f424,95741315,0,0x0,8
tick,0x7ffdf681f424,95743309,0,0x0,8
tick,0x7ffdf681f424,95745198,0,0x0,8
tick,0x7ffdf681f424,95747294,0,0x0,8
tick,0x7ffdf681f424,95749300,0,0x0,8
tick,0x7ffdf681f424,95751297,0,0x0,8
tick,0x7ffdf681f424,95753307,0,0x0,8
tick,0x7ffdf681f424,95755170,0,0x0,8
tick,0x7ffdf681f424,95757269,0,0x0,8
tick,0x7ffdf681f424,95759169,0,0x0,8
tick,0x7ffdf681f424,95761087,0,0x0,8
tick,0x7ffdf681f424,95763106,0,0x0,8
tick,0x7ffdf681f424,95765188,0,0x0,8
tick,0x7ffdf681f424,95767094,0,0x0,8
tick,0x7ffdf681f424,95769243,0,0x0,8
tick,0x7ffdf681f424,95771134,0,0x0,8
tick,0x7ffdf681f424,95773243,0,0x0,8
tick,0x7ffdf681f424,95775232,0,0x0,8
tick,0x7ffdf681f424,95777223,0,0x0,8
tick,0x7ffdf681f424,95779213,0,0x0,8
tick,0x7ffdf681f424,95781215,0,0x0,8
tick,0x7ffdf681f424,95783239,0,0x0,8
tick,0x7ffdf681f424,95785204,0,0x0,8
tick,0x7ffdf681f424,95787198,0,0x0,8
tick,0x7ffdf681f424,95789187,0,0x0,8
tick,0x7ffdf681f424,95791184,0,0x0,8
tick,0x7ffdf681f424,95793179,0,0x0,8
tick,0x7ffdf681f424,95795063,0,0x0,8
tick,0x7ffdf681f424,95797198,0,0x0,8
tick,0x7ffdf681f424,95799158,0,0x0,8
tick,0x7ffdf681f424,95801159,0,0x0,8
tick,0x7ffdf681f424,95803163,0,0x0,8
tick,0x7ffdf681f424,95805202,0,0x0,8
tick,0x7ffdf681f424,95807145,0,0x0,8
tick,0x7ffdf681f424,95809136,0,0x0,8
tick,0x7ffdf681f424,95811131,0,0x0,8
tick,0x7ffdf681f424,95813139,0,0x0,8
tick,0x7ffdf681f424,95815122,0,0x0,8
tick,0x7ffdf681f424,95817119,0,0x0,8
tick,0x7ffdf681f424,95819110,0,0x0,8
tick,0x7ffdf681f424,95821106,0,0x0,8
tick,0x7ffdf681f424,95823110,0,0x0,8
tick,0x7ffdf681f424,95825102,0,0x0,8
tick,0x7ffdf681f424,95827100,0,0x0,8
tick,0x7ffdf681f424,95829089,0,0x0,8
tick,0x7ffdf681f424,95830975,0,0x0,8
tick,0x7ffdf681f424,95833087,0,0x0,8
tick,0x7ffdf681f424,95835069,0,0x0,8
tick,0x7ffdf681f424,95836960,0,0x0,8
tick,0x7ffdf681f424,95838946,0,0x0,8
tick,0x7ffdf681f424,95841071,0,0x0,8
tick,0x7ffdf681f424,95843041,0,0x0,8
tick,0x7ffdf681f424,95845012,0,0x0,8
tick,0x7ffdf681f424,95847042,0,0x0,8
tick,0x7ffdf681f424,95849064,0,0x0,8
tick,0x7ffdf681f424,95851027,0,0x0,8
tick,0x7ffdf681f424,95853032,0,0x0,8
tick,0x7ffdf681f424,95855017,0,0x0,8
tick,0x7ffdf681f424,95857013,0,0x0,8
tick,0x7ffdf681f424,95859002,0,0x0,8
tick,0x7ffdf681f424,95861001,0,0x0,8
tick,0x7ffdf681f424,95863000,0,0x0,8
tick,0x7ffdf681f424,95864986,0,0x0,8
tick,0x7ffdf681f424,95866984,0,0x0,8
tick,0x7ffdf681f424,95868980,0,0x0,8
tick,0x7ffdf681f424,95871012,0,0x0,8
tick,0x7ffdf681f424,95872970,0,0x0,8
tick,0x7ffdf681f424,95874965,0,0x0,8
tick,0x7ffdf681f424,95876956,0,0x0,8
tick,0x7ffdf681f424,95878969,0,0x0,8
tick,0x7ffdf681f424,95880943,0,0x0,8
tick,0x7ffdf681f424,95882942,0,0x0,8
tick,0x7ffdf681f424,95884938,0,0x0,8
tick,0x7ffdf681f424,95886825,0,0x0,8
tick,0x7ffdf681f424,95888933,0,0x0,8
tick,0x7ffdf681f424,95890919,0,0x0,8
tick,0x7ffdf681f424,95892961,0,0x0,8
tick,0x7ffdf681f424,95894909,0,0x0,8
tick,0x7ffdf681f424,95896908,0,0x0,8
tick,0x7ffdf681f424,95898894,0,0x0,8
tick,0x7ffdf681f424,95900895,0,0x0,8
tick,0x7ffdf681f424,95902888,0,0x0,8
tick,0x7ffdf681f424,95904891,0,0x0,8
tick,0x7ffdf681f424,95906873,0,0x0,8
tick,0x7ffdf681f424,95908869,0,0x0,8
tick,0x7ffdf681f424,95910867,0,0x0,8
tick,0x7ffdf681f424,95912877,0,0x0,8
tick,0x7ffdf681f424,95914711,0,0x0,8
tick,0x7ffdf681f424,95916850,0,0x0,8
tick,0x7ffdf681f424,95918847,0,0x0,8
tick,0x7ffdf681f424,95920778,0,0x0,8
tick,0x7ffdf681f424,95922836,0,0x0,8
tick,0x7ffdf681f424,95924824,0,0x0,8
tick,0x7ffdf681f424,95926718,0,0x0,8
tick,0x7ffdf681f424,95928784,0,0x0,8
tick,0x7ffdf681f424,95930834,0,0x0,8
tick,0x7ffdf681f424,95932808,0,0x0,8
tick,0x7ffdf681f424,95934802,0,0x0,8
tick,0x7ffdf681f424,95936736,0,0x0,8
tick,0x7ffdf681f424,95938686,0,0x0,8
tick,0x7ffdf681f424,95940680,0,0x0,8
tick,0x7ffdf681f424,95942668,0,0x0,8
tick,0x7ffdf681f424,95944602,0,0x0,8
tick,0x7ffdf681f424,95958217,0,0x0,8
tick,0x7ffdf681f424,95959700,0,0x0,8
tick,0x7ffdf681f424,95961698,0,0x0,8
tick,0x7ffdf681f424,95963556,0,0x0,8
tick,0x7ffdf681f424,95965644,0,0x0,8
tick,0x7ffdf681f424,95967525,0,0x0,8
tick,0x7ffdf681f424,95969724,0,0x0,8
tick,0x7ffdf681f424,95971747,0,0x0,8
tick,0x7ffdf681f424,95973017,0,0x0,8
tick,0x7ffdf681f424,95974973,0,0x0,8
tick,0x7ffdf681f424,95976164,0,0x0,8
tick,0x7ffdf681f424,95977386,0,0x0,8
tick,0x7ffdf681f424,95979393,0,0x0,8
tick,0x7ffdf681f424,95980632,0,0x0,8
tick,0x7ffdf681f424,95982620,0,0x0,8
tick,0x7ffdf681f424,95984626,0,0x0,8
tick,0x7ffdf681f424,95985869,0,0x0,8
tick,0x7ffdf681f424,95988032,0,0x0,8
tick,0x7ffdf681f424,95989960,0,0x0,8
tick,0x7ffdf681f424,95991884,0,0x0,8
tick,0x7ffdf681f424,95993044,0,0x0,8
tick,0x7ffdf681f424,95994306,0,0x0,8
tick,0x7ffdf681f424,95996292,0,0x0,8
tick,0x7ffdf681f424,95997498,0,0x0,8
tick,0x7ffdf681f424,95998738,0,0x0,8
tick,0x7ffdf681f424,96000756,0,0x0,8
tick,0x7ffdf681f424,96001907,0,0x0,8
tick,0x7ffdf681f424,96003920,0,0x0,8
tick,0x7ffdf681f424,96005089,0,0x0,8
tick,0x7ffdf681f424,96007112,0,0x0,8
tick,0x7ffdf681f424,96009073,0,0x0,8
tick,0x7ffdf681f424,96011059,0,0x0,8
tick,0x7ffdf681f424,96012247,0,0x0,8
tick,0x7ffdf681f424,96013407,0,0x0,8
tick,0x7ffdf681f424,96015381,0,0x0,8
tick,0x7ffdf681f424,96017390,0,0x0,8
tick,0x7ffdf681f424,96018560,0,0x0,8
tick,0x7ffdf681f424,96020587,0,0x0,8
tick,0x7ffdf681f424,96022572,0,0x0,8
tick,0x7ffdf681f424,96023742,0,0x0,8
tick,0x7ffdf681f424,96024823,0,0x0,8
tick,0x7ffdf681f424,96025967,0,0x0,8
tick,0x7ffdf681f424,96027981,0,0x0,8
tick,0x7ffdf681f424,96030120,0,0x0,8
tick,0x7ffdf681f424,96032133,0,0x0,8
tick,0x7ffdf681f424,96033280,0,0x0,8
tick,0x7ffdf681f424,96035292,0,0x0,8
tick,0x7ffdf681f424,96036414,0,0x0,8
tick,0x7ffdf681f424,96038425,0,0x0,8
tick,0x7ffdf681f424,96039590,0,0x0,8
tick,0x7ffdf681f424,96041638,0,0x0,8
tick,0x7ffdf681f424,96043686,0,0x0,8
tick,0x7ffdf681f424,96045675,0,0x0,8
tick,0x7ffdf681f424,96047799,0,0x0,8
tick,0x7ffdf681f424,96048954,0,0x0,8
tick,0x7ffdf681f424,96050115,0,0x0,8
tick,0x7ffdf681f424,96052171,0,0x0,8
tick,0x7ffdf681f424,96054099,0,0x0,8
tick,0x7ffdf681f424,96056237,0,0x0,8
tick,0x7ffdf681f424,96058308,0,0x0,8
tick,0x7ffdf681f424,96060407,0,0x0,8
tick,0x7ffdf681f424,96062468,0,0x0,8
tick,0x7ffdf681f424,96064542,0,0x0,8
tick,0x7ffdf681f424,96066473,0,0x0,8
tick,0x7ffdf681f424,96068513,0,0x0,8
tick,0x7ffdf681f424,96070491,0,0x0,8
tick,0x7ffdf681f424,96072487,0,0x0,8
tick,0x7ffdf681f424,96074414,0,0x0,8
tick,0x7ffdf681f424,96076235,0,0x0,8
tick,0x7ffdf681f424,96078301,0,0x0,8
tick,0x7ffdf681f424,96080428,0,0x0,8
tick,0x7ffdf681f424,96082503,0,0x0,8
tick,0x7ffdf681f424,96084434,0,0x0,8
tick,0x7ffdf681f424,96086419,0,0x0,8
tick,0x7ffdf681f424,96088637,0,0x0,8
tick,0x7ffdf681f424,96090580,0,0x0,8
tick,0x7ffdf681f424,96092563,0,0x0,8
tick,0x7ffdf681f424,96094564,0,0x0,8
tick,0x7ffdf681f424,96096566,0,0x0,8
tick,0x7ffdf681f424,96098557,0,0x0,8
tick,0x7ffdf681f424,96100564,0,0x0,8
tick,0x7ffdf681f424,96102550,0,0x0,8
tick,0x7ffdf681f424,96104564,0,0x0,8
tick,0x7ffdf681f424,96106539,0,0x0,8
tick,0x7ffdf681f424,96108509,0,0x0,8
tick,0x7ffdf681f424,96110508,0,0x0,8
tick,0x7ffdf681f424,96112493,0,0x0,8
tick,0x7ffdf681f424,96114513,0,0x0,8
tick,0x7ffdf681f424,96116482,0,0x0,8
tick,0x7ffdf681f424,96118478,0,0x0,8
tick,0x7ffdf681f424,96120407,0,0x0,8
tick,0x7ffdf681f424,96122467,0,0x0,8
tick,0x7ffdf681f424,96124462,0,0x0,8
tick,0x7ffdf681f424,96126444,0,0x0,8
tick,0x7ffdf681f424,96128379,0,0x0,8
tick,0x7ffdf681f424,96130448,0,0x0,8
tick,0x7ffdf681f424,96132465,0,0x0,8
tick,0x7ffdf681f424,96134356,0,0x0,8
tick,0x7ffdf681f424,96136429,0,0x0,8
tick,0x7ffdf681f424,96138421,0,0x0,8
tick,0x7ffdf681f424,96140419,0,0x0,8
tick,0x7ffdf681f424,96142304,0,0x0,8
tick,0x7ffdf681f424,96144318,0,0x0,8
tick,0x7ffdf681f424,96146409,0,0x0,8
tick,0x7ffdf681f424,96148381,0,0x0,8
tick,0x7ffdf681f424,96150395,0,0x0,8
tick,0x7ffdf681f424,96152386,0,0x0,8
tick,0x7ffdf681f424,96154392,0,0x0,8
tick,0x7ffdf681f424,96156376,0,0x0,8
tick,0x7ffdf681f424,96158373,0,0x0,8
tick,0x7ffdf681f424,96160359,0,0x0,8
tick,0x7ffdf681f424,96162254,0,0x0,8
tick,0x7ffdf681f424,96164372,0,0x0,8
tick,0x7ffdf681f424,96166343,0,0x0,8
tick,0x7ffdf681f424,96168343,0,0x0,8
tick,0x7ffdf681f424,96170220,0,0x0,8
tick,0x7ffdf681f424,96172346,0,0x0,8
tick,0x7ffdf681f424,96174336,0,0x0,8
tick,0x7ffdf681f424,96176253,0,0x0,8
tick,0x7ffdf681f424,96178357,0,0x0,8
tick,0x7ffdf681f424,96180311,0,0x0,8
tick,0x7ffdf681f424,96182307,0,0x0,8
tick,0x7ffdf681f424,96184200,0,0x0,8
tick,0x7ffdf681f424,96186302,0,0x0,8
tick,0x7ffdf681f424,96188284,0,0x0,8
tick,0x7ffdf681f424,96190283,0,0x0,8
tick,0x7ffdf681f424,96192358,0,0x0,8
tick,0x7ffdf681f424,96194310,0,0x0,8
tick,0x7ffdf681f424,96196269,0,0x0,8
tick,0x7ffdf681f424,96198288,0,0x0,8
tick,0x7ffdf681f424,96200258,0,0x0,8
tick,0x7ffdf681f424,96202255,0,0x0,8
tick,0x7ffdf681f424,96204248,0,0x0,8
tick,0x7ffdf681f424,96206242,0,0x0,8
tick,0x7ffdf681f424,96208237,0,0x0,8
tick,0x7ffdf681f424,96210238,0,0x0,8
tick,0x7ffdf681f424,96212210,0,0x0,8
tick,0x7ffdf681f424,96214293,0,0x0,8
tick,0x7ffdf681f424,96216249,0,0x0,8
tick,0x7ffdf681f424,96218213,0,0x0,8
tick,0x7ffdf681f424,96220132,0,0x0,8
tick,0x7ffdf681f424,96222096,0,0x0,8
tick,0x7ffdf681f424,96224204,0,0x0,8
tick,0x7ffdf681f424,96226186,0,0x0,8
tick,0x7ffdf681f424,96228188,0,0x0,8
tick,0x7ffdf681f424,96230188,0,0x0,8
tick,0x7ffdf681f424,96232173,0,0x0,8
tick,0x7ffdf681f424,96234173,0,0x0,8
tick,0x7ffdf681f424,96236156,0,0x0,8
tick,0x7ffdf681f424,96238171,0,0x0,8
tick,0x7ffdf681f424,96240157,0,0x0,8
tick,0x7ffdf681f424,96242168,0,0x0,8
tick,0x7ffdf681f424,96244148,0,0x0,8
tick,0x7ffdf681f424,96246174,0,0x0,8
tick,0x7ffdf681f424,96248148,0,0x0,8
tick,0x7ffdf681f424,96250135,0,0x0,8
tick,0x7ffdf681f424,96252188,0,0x0,8
tick,0x7ffdf681f424,96254125,0,0x0,8
tick,0x7ffdf681f424,96256123,0,0x0,8
tick,0x7ffdf681f424,96258182,0,0x0,8
tick,0x7ffdf681f424,96260131,0,0x0,8
tick,0x7ffdf681f424,96261991,0,0x0,8
tick,0x7ffdf681f424,96264138,0,0x0,8
tick,0x7ffdf681f424,96266089,0,0x0,8
tick,0x7ffdf681f424,96268084,0,0x0,8
tick,0x7ffdf681f424,96270055,0,0x0,8
tick,0x7ffdf681f424,96272073,0,0x0,8
tick,0x7ffdf681f424,96274071,0,0x0,8
tick,0x7ffdf681f424,96276057,0,0x0,8
tick,0x7ffdf681f424,96278059,0,0x0,8
tick,0x7ffdf681f424,96280057,0,0x0,8
tick,0x7ffdf681f424,96282063,0,0x0,8
tick,0x7ffdf681f424,96284038,0,0x0,8
tick,0x7ffdf681f424,96286060,0,0x0,8
tick,0x7ffdf681f424,96288033,0,0x0,8
tick,0x7ffdf681f424,96290025,0,0x0,8
tick,0x7ffdf681f424,96292025,0,0x0,8
tick,0x7ffdf681f424,96294018,0,0x0,8
tick,0x7ffdf681f424,96295920,0,0x0,8
tick,0x7ffdf681f424,96297895,0,0x0,8
tick,0x7ffdf681f424,96300013,0,0x0,8
tick,0x7ffdf681f424,96302003,0,0x0,8
tick,0x7ffdf681f424,96303847,0,0x0,8
tick,0x7ffdf681f424,96305983,0,0x0,8
tick,0x7ffdf681f424,96308004,0,0x0,8
tick,0x7ffdf681f424,96309972,0,0x0,8
tick,0x7ffdf681f424,96311859,0,0x0,8
tick,0x7ffdf681f424,96313962,0,0x0,8
tick,0x7ffdf681f424,96316011,0,0x0,8
tick,0x7ffdf681f424,96317954,0,0x0,8
tick,0x7ffdf681f424,96319948,0,0x0,8
tick,0x7ffdf681f424,96321947,0,0x0,8
tick,0x7ffdf681f424,96323993,0,0x0,8
tick,0x7ffdf681f424,96325958,0,0x0,8
tick,0x7ffdf681f424,96327973,0,0x0,8
tick,0x7ffdf681f424,96329930,0,0x0,8
tick,0x7ffdf681f424,96331913,0,0x0,8
tick,0x7ffdf681f424,96333910,0,0x0,8
tick,0x7ffdf681f424,96335903,0,0x0,8
tick,0x7ffdf681f424,96337898,0,0x0,8
tick,0x7ffdf681f424,96339892,0,0x0,8
tick,0x7ffdf681f424,96341887,0,0x0,8
tick,0x7ffdf681f424,96343890,0,0x0,8
tick,0x7ffdf681f424,96345873,0,0x0,8
tick,0x7ffdf681f424,96347898,0,0x0,8
tick,0x7ffdf681f424,96349869,0,0x0,8
tick,0x7ffdf681f424,96351884,0,0x0,8
tick,0x7ffdf681f424,96353782,0,0x0,8
tick,0x7ffdf681f424,96355846,0,0x0,8
tick,0x7ffdf681f424,96357847,0,0x0,8
tick,0x7ffdf681f424,96359833,0,0x0,8
tick,0x7ffdf681f424,96361741,0,0x0,8
tick,0x7ffdf681f424,96363828,0,0x0,8
tick,0x7ffdf681f424,96365823,0,0x0,8
tick,0x7ffdf681f424,96367891,0,0x0,8
tick,0x7ffdf681f424,96369841,0,0x0,8
tick,0x7ffdf681f424,96371802,0,0x0,8
tick,0x7ffdf681f424,96373722,0,0x0,8
tick,0x7ffdf681f424,96375798,0,0x0,8
tick,0x7ffdf681f424,96377791,0,0x0,8
tick,0x7ffdf681f424,96379672,0,0x0,8
tick,0x7ffdf681f424,96381784,0,0x0,8
tick,0x7ffdf681f424,96383776,0,0x0,8
tick,0x7ffdf681f424,96385770,0,0x0,8
tick,0x7ffdf681f424,96387762,0,0x0,8
tick,0x7ffdf681f424,96389745,0,0x0,8
tick,0x7ffdf681f424,96391767,0,0x0,8
tick,0x7ffdf681f424,96393748,0,0x0,8
tick,0x7ffdf681f424,96395794,0,0x0,8
tick,0x7ffdf681f424,96397738,0,0x0,8
tick,0x7ffdf681f424,96399732,0,0x0,8
tick,0x7ffdf681f424,96401726,0,0x0,8
tick,0x7ffdf681f424,96403612,0,0x0,8
tick,0x7ffdf681f424,96405711,0,0x0,8
tick,0x7ffdf681f424,96407713,0,0x0,8
tick,0x7ffdf681f424,96409763,0,0x0,8
tick,0x7ffdf681f424,96411687,0,0x0,8
tick,0x7ffdf681f424,96413714,0,0x0,8
tick,0x7ffdf681f424,96415691,0,0x0,8
tick,0x7ffdf681f424,96417692,0,0x0,8
tick,0x7ffdf681f424,96419676,0,0x0,8
tick,0x7ffdf681f424,96421677,0,0x0,8
tick,0x7ffdf681f424,96423668,0,0x0,8
tick,0x7ffdf681f424,96425670,0,0x0,8
tick,0x7ffdf681f424,96427658,0,0x0,8
tick,0x7ffdf681f424,96429652,0,0x0,8
tick,0x7ffdf681f424,96431645,0,0x0,8
tick,0x7ffdf681f424,96433683,0,0x0,8
tick,0x7ffdf681f424,96435692,0,0x0,8
tick,0x7ffdf681f424,96437673,0,0x0,8
tick,0x7ffdf681f424,96439631,0,0x0,8
tick,0x7ffdf681f424,96441623,0,0x0,8
tick,0x7ffdf681f424,96443502,0,0x0,8
tick,0x7ffdf681f424,96445570,0,0x0,8
tick,0x7ffdf681f424,96447612,0,0x0,8
tick,0x7ffdf681f424,96449491,0,0x0,8
tick,0x7ffdf681f424,96451491,0,0x0,8
tick,0x7ffdf681f424,96453481,0,0x0,8
tick,0x7ffdf681f424,96455569,0,0x0,8
tick,0x7ffdf681f424,96457591,0,0x0,8
tick,0x7ffdf681f424,96459572,0,0x0,8
tick,0x7ffdf681f424,96461578,0,0x0,8
tick,0x7ffdf681f424,96463557,0,0x0,8
tick,0x7ffdf681f424,96465550,0,0x0,8
tick,0x7ffdf681f424,96467553,0,0x0,8
tick,0x7ffdf681f424,96469547,0,0x0,8
tick,0x7ffdf681f424,96471542,0,0x0,8
tick,0x7ffdf681f424,96473534,0,0x0,8
tick,0x7ffdf681f424,96475469,0,0x0,8
tick,0x7ffdf681f424,96477520,0,0x0,8
tick,0x7ffdf681f424,96479529,0,0x0,8
tick,0x7ffdf681f424,96481513,0,0x0,8
tick,0x7ffdf681f424,96483516,0,0x0,8
tick,0x7ffdf681f424,96485506,0,0x0,8
tick,0x7ffdf681f424,96487492,0,0x0,8
tick,0x7ffdf681f424,96489489,0,0x0,8
tick,0x7ffdf681f424,96491519,0,0x0,8
tick,0x7ffdf681f424,96493482,0,0x0,8
tick,0x7ffdf681f424,96495362,0,0x0,8
tick,0x7ffdf681f424,96497471,0,0x0,8
tick,0x7ffdf681f424,96499474,0,0x0,8
tick,0x7ffdf681f424,96501473,0,0x0,8
tick,0x7ffdf681f424,96503420,0,0x0,8
tick,0x7ffdf681f424,96505457,0,0x0,8
tick,0x7ffdf681f424,96507436,0,0x0,8
tick,0x7ffdf681f424,96509442,0,0x0,8
tick,0x7ffdf681f424,96511435,0,0x0,8
tick,0x7ffdf681f424,96513428,0,0x0,8
tick,0x7ffdf681f424,96515426,0,0x0,8
tick,0x7ffdf681f424,96517443,0,0x0,8
tick,0x7ffdf681f424,96519411,0,0x0,8
tick,0x7ffdf681f424,96521486,0,0x0,8
tick,0x7ffdf681f424,96523457,0,0x0,8
tick,0x7ffdf681f424,96525391,0,0x0,8
tick,0x7ffdf681f424,96527323,0,0x0,8
tick,0x7ffdf681f424,96529386,0,0x0,8
tick,0x7ffdf681f424,96531380,0,0x0,8
tick,0x7ffdf681f424,96533369,0,0x0,8
tick,0x7ffdf681f424,96535371,0,0x0,8
tick,0x7ffdf681f424,96537256,0,0x0,8
tick,0x7ffdf681f424,96539351,0,0x0,8
tick,0x7ffdf681f424,96541246,0,0x0,8
tick,0x7ffdf681f424,96543372,0,0x0,8
tick,0x7ffdf681f424,96545242,0,0x0,8
tick,0x7ffdf681f424,96547437,0,0x0,8
tick,0x7ffdf681f424,96549316,0,0x0,8
tick,0x7ffdf681f424,96551326,0,0x0,8
tick,0x7ffdf681f424,96553327,0,0x0,8
tick,0x7ffdf681f424,96555310,0,0x0,8
tick,0x7ffdf681f424,96557311,0,0x0,8
tick,0x7ffdf681f424,96559305,0,0x0,8
tick,0x7ffdf681f424,96561300,0,0x0,8
tick,0x7ffdf681f424,96563294,0,0x0,8
tick,0x7ffdf681f424,96565337,0,0x0,8
tick,0x7ffdf681f424,96567334,0,0x0,8
tick,0x7ffdf681f424,96569278,0,0x0,8
tick,0x7ffdf681f424,96571282,0,0x0,8
tick,0x7ffdf681f424,96573300,0,0x0,8
tick,0x7ffdf681f424,96575256,0,0x0,8
tick,0x7ffdf681f424,96577260,0,0x0,8
tick,0x7ffdf681f424,96579254,0,0x0,8
tick,0x7ffdf681f424,96581250,0,0x0,8
tick,0x7ffdf681f424,96583241,0,0x0,8
tick,0x7ffdf681f424,96585231,0,0x0,8
tick,0x7ffdf681f424,96587163,0,0x0,8
tick,0x7ffdf681f424,96589240,0,0x0,8
tick,0x7ffdf681f424,96591214,0,0x0,8
tick,0x7ffdf681f424,96593224,0,0x0,8
tick,0x7ffdf681f424,96595106,0,0x0,8
tick,0x7ffdf681f424,96597204,0,0x0,8
tick,0x7ffdf681f424,96599193,0,0x0,8
tick,0x7ffdf681f424,96601200,0,0x0,8
tick,0x7ffdf681f424,96603085,0,0x0,8
tick,0x7ffdf681f424,96605114,0,0x0,8
tick,0x7ffdf681f424,96607192,0,0x0,8
tick,0x7ffdf681f424,96609287,0,0x0,8
tick,0x7ffdf681f424,96611178,0,0x0,8
tick,0x7ffdf681f424,96613047,0,0x0,8
tick,0x7ffdf681f424,96615162,0,0x0,8
tick,0x7ffdf681f424,96617157,0,0x0,8
tick,0x7ffdf681f424,96619146,0,0x0,8
tick,0x7ffdf681f424,96621141,0,0x0,8
tick,0x7ffdf681f424,96623135,0,0x0,8
tick,0x7ffdf681f424,96625129,0,0x0,8
tick,0x7ffdf681f424,96627133,0,0x0,8
tick,0x7ffdf681f424,96629120,0,0x0,8
tick,0x7ffdf681f424,96631169,0,0x0,8
tick,0x7ffdf681f424,96633124,0,0x0,8
tick,0x7ffdf681f424,96635106,0,0x0,8
tick,0x7ffdf681f424,96637061,0,0x0,8
tick,0x7ffdf681f424,96639100,0,0x0,8
tick,0x7ffdf681f424,96641091,0,0x0,8
tick,0x7ffdf681f424,96643078,0,0x0,8
tick,0x7ffdf681f424,96645075,0,0x0,8
tick,0x7ffdf681f424,96647067,0,0x0,8
tick,0x7ffdf681f424,96649066,0,0x0,8
tick,0x7ffdf681f424,96651057,0,0x0,8
tick,0x7ffdf681f424,96653093,0,0x0,8
tick,0x7ffdf681f424,96655117,0,0x0,8
tick,0x7ffdf681f424,96657044,0,0x0,8
tick,0x7ffdf681f424,96659045,0,0x0,8
tick,0x7ffdf681f424,96661034,0,0x0,8
tick,0x7ffdf681f424,96663030,0,0x0,8
tick,0x7ffdf681f424,96665023,0,0x0,8
tick,0x7ffdf681f424,96667015,0,0x0,8
tick,0x7ffdf681f424,96669009,0,0x0,8
tick,0x7ffdf681f424,96671009,0,0x0,8
tick,0x7ffdf681f424,96673001,0,0x0,8
tick,0x7ffdf681f424,96675066,0,0x0,8
tick,0x7ffdf681f424,96677025,0,0x0,8
tick,0x7ffdf681f424,96678986,0,0x0,8
tick,0x7ffdf681f424,96680899,0,0x0,8
tick,0x7ffdf681f424,96682975,0,0x0,8
tick,0x7ffdf681f424,96684970,0,0x0,8
tick,0x7ffdf681f424,96686845,0,0x0,8
tick,0x7ffdf681f424,96688958,0,0x0,8
tick,0x7ffdf681f424,96690947,0,0x0,8
tick,0x7ffdf681f424,96692948,0,0x0,8
tick,0x7ffdf681f424,96694944,0,0x0,8
tick,0x7ffdf681f424,96696923,0,0x0,8
tick,0x7ffdf681f424,96698942,0,0x0,8
tick,0x7ffdf681f424,96700930,0,0x0,8
tick,0x7ffdf681f424,96702927,0,0x0,8
tick,0x7ffdf681f424,96704913,0,0x0,8
tick,0x7ffdf681f424,96706904,0,0x0,8
tick,0x7ffdf681f424,96708902,0,0x0,8
tick,0x7ffdf681f424,96710896,0,0x0,8
tick,0x7ffdf681f424,96712895,0,0x0,8
tick,0x7ffdf681f424,96714885,0,0x0,8
tick,0x7ffdf681f424,96716883,0,0x0,8
tick,0x7ffdf681f424,96718927,0,0x0,8
tick,0x7ffdf681f424,96720901,0,0x0,8
tick,0x7ffdf681f424,96722870,0,0x0,8
tick,0x7ffdf681f424,96724917,0,0x0,8
tick,0x7ffdf681f424,96726869,0,0x0,8
tick,0x7ffdf681f424,96728746,0,0x0,8
tick,0x7ffdf681f424,96730838,0,0x0,8
tick,0x7ffdf681f424,96732845,0,0x0,8
tick,0x7ffdf681f424,96734843,0,0x0,8
tick,0x7ffdf681f424,96736813,0,0x0,8
tick,0x7ffdf681f424,96738872,0,0x0,8
tick,0x7ffdf681f424,96740864,0,0x0,8
tick,0x7ffdf681f424,96742842,0,0x0,8
tick,0x7ffdf681f424,96744810,0,0x0,8
tick,0x7ffdf681f424,96746831,0,0x0,8
tick,0x7ffdf681f424,96748808,0,0x0,8
tick,0x7ffdf681f424,96750793,0,0x0,8
tick,0x7ffdf681f424,96752789,0,0x0,8
tick,0x7ffdf681f424,96754811,0,0x0,8
tick,0x7ffdf681f424,96756663,0,0x0,8
tick,0x7ffdf681f424,96758667,0,0x0,8
tick,0x7ffdf681f424,96760772,0,0x0,8
tick,0x7ffdf681f424,96762748,0,0x0,8
tick,0x7ffdf681f424,96764754,0,0x0,8
tick,0x7ffdf681f424,96766752,0,0x0,8
tick,0x7ffdf681f424,96768754,0,0x0,8
tick,0x7ffdf681f424,96770617,0,0x0,8
tick,0x7ffdf681f424,96772738,0,0x0,8
tick,0x7ffdf681f424,96774724,0,0x0,8
tick,0x7ffdf681f424,96776725,0,0x0,8
tick,0x7ffdf681f424,96778610,0,0x0,8
tick,0x7ffdf681f424,96780717,0,0x0,8
tick,0x7ffdf681f424,96782708,0,0x0,8
tick,0x7ffdf681f424,96784805,0,0x0,8
tick,0x7ffdf681f424,96786783,0,0x0,8
tick,0x7ffdf681f424,96788699,0,0x0,8
tick,0x7ffdf681f424,96790691,0,0x0,8
tick,0x7ffdf681f424,96792681,0,0x0,8
tick,0x7ffdf681f424,96794679,0,0x0,8
tick,0x7ffdf681f424,96796674,0,0x0,8
tick,0x7ffdf681f424,96798667,0,0x0,8
tick,0x7ffdf681f424,96800660,0,0x0,8
tick,0x7ffdf681f424,96802652,0,0x0,8
tick,0x7ffdf681f424,96804653,0,0x0,8
tick,0x7ffdf681f424,96806629,0,0x0,8
tick,0x7ffdf681f424,96808652,0,0x0,8
tick,0x7ffdf681f424,96810633,0,0x0,8
tick,0x7ffdf681f424,96812645,0,0x0,8
tick,0x7ffdf681f424,96814623,0,0x0,8
tick,0x7ffdf681f424,96816617,0,0x0,8
tick,0x7ffdf681f424,96818651,0,0x0,8
tick,0x7ffdf681f424,96820562,0,0x0,8
tick,0x7ffdf681f424,96822605,0,0x0,8
tick,0x7ffdf681f424,96824596,0,0x0,8
tick,0x7ffdf681f424,96826588,0,0x0,8
tick,0x7ffdf681f424,96828550,0,0x0,8
tick,0x7ffdf681f424,96830608,0,0x0,8
tick,0x7ffdf681f424,96832575,0,0x0,8
tick,0x7ffdf681f424,96834510,0,0x0,8
tick,0x7ffdf681f424,96836593,0,0x0,8
tick,0x7ffdf681f424,96838561,0,0x0,8
tick,0x7ffdf681f424,96840554,0,0x0,8
tick,0x7ffdf681f424,96842549,0,0x0,8
tick,0x7ffdf681f424,96844539,0,0x0,8
tick,0x7ffdf681f424,96846428,0,0x0,8
tick,0x7ffdf681f424,96848492,0,0x0,8
tick,0x7ffdf681f424,96850532,0,0x0,8
tick,0x7ffdf681f424,96852518,0,0x0,8
tick,0x7ffdf681f424,96854523,0,0x0,8
tick,0x7ffdf681f424,96856515,0,0x0,8
tick,0x7ffdf681f424,96858526,0,0x0,8
tick,0x7ffdf681f424,96860503,0,0x0,8
tick,0x7ffdf681f424,96862497,0,0x0,8
tick,0x7ffdf681f424,96864490,0,0x0,8
tick,0x7ffdf681f424,96866481,0,0x0,8
tick,0x7ffdf681f424,96868482,0,0x0,8
tick,0x7ffdf681f424,96870364,0,0x0,8
tick,0x7ffdf681f424,96872529,0,0x0,8
tick,0x7ffdf681f424,96874493,0,0x0,8
tick,0x7ffdf681f424,96876457,0,0x0,8
tick,0x7ffdf681f424,96878472,0,0x0,8
tick,0x7ffdf681f424,96880446,0,0x0,8
tick,0x7ffdf681f424,96882441,0,0x0,8
tick,0x7ffdf681f424,96884436,0,0x0,8
tick,0x7ffdf681f424,96886432,0,0x0,8
tick,0x7ffdf681f424,96888425,0,0x0,8
tick,0x7ffdf681f424,96890418,0,0x0,8
tick,0x7ffdf681f424,96892418,0,0x0,8
tick,0x7ffdf681f424,96894415,0,0x0,8
tick,0x7ffdf681f424,96896429,0,0x0,8
tick,0x7ffdf681f424,96898424,0,0x0,8
tick,0x7ffdf681f424,96900429,0,0x0,8
tick,0x7ffdf681f424,96902388,0,0x0,8
tick,0x7ffdf681f424,96904382,0,0x0,8
tick,0x7ffdf681f424,96906383,0,0x0,8
tick,0x7ffdf681f424,96908384,0,0x0,8
tick,0x7ffdf681f424,96910258,0,0x0,8
tick,0x7ffdf681f424,96912351,0,0x0,8
tick,0x7ffdf681f424,96914247,0,0x0,8
tick,0x7ffdf681f424,96916380,0,0x0,8
tick,0x7ffdf681f424,96918344,0,0x0,8
tick,0x7ffdf681f424,96920287,0,0x0,8
tick,0x7ffdf681f424,96922345,0,0x0,8
tick,0x7ffdf681f424,96924336,0,0x0,8
tick,0x7ffdf681f424,96926337,0,0x0,8
tick,0x7ffdf681f424,96928318,0,0x0,8
tick,0x7ffdf681f424,96930306,0,0x0,8
tick,0x7ffdf681f424,96932311,0,0x0,8
tick,0x7ffdf681f424,96934303,0,0x0,8
tick,0x7ffdf681f424,96936297,0,0x0,8
tick,0x7ffdf681f424,96938288,0,0x0,8
tick,0x7ffdf681f424,96940314,0,0x0,8
tick,0x7ffdf681f424,96942281,0,0x0,8
tick,0x7ffdf681f424,96944281,0,0x0,8
tick,0x7ffdf681f424,96946270,0,0x0,8
tick,0x7ffdf681f424,96948265,0,0x0,8
tick,0x7ffdf681f424,96950262,0,0x0,8
tick,0x7ffdf681f424,96952250,0,0x0,8
tick,0x7ffdf681f424,96954246,0,0x0,8
tick,0x7ffdf681f424,96956250,0,0x0,8
tick,0x7ffdf681f424,96958277,0,0x0,8
tick,0x7ffdf681f424,96960233,0,0x0,8
tick,0x7ffdf681f424,96962114,0,0x0,8
tick,0x7ffdf681f424,96964226,0,0x0,8
tick,0x7ffdf681f424,96966222,0,0x0,8
tick,0x7ffdf681f424,96968228,0,0x0,8
tick,0x7ffdf681f424,96970170,0,0x0,8
tick,0x7ffdf681f424,96972202,0,0x0,8
tick,0x7ffdf681f424,96974196,0,0x0,8
tick,0x7ffdf681f424,96976185,0,0x0,8
tick,0x7ffdf681f424,96978186,0,0x0,8
tick,0x7ffdf681f424,96980180,0,0x0,8
tick,0x7ffdf681f424,96982182,0,0x0,8
tick,0x7ffdf681f424,96984064,0,0x0,8
tick,0x7ffdf681f424,96986168,0,0x0,8
tick,0x7ffdf681f424,96988088,0,0x0,8
tick,0x7ffdf681f424,96990177,0,0x0,8
tick,0x7ffdf681f424,96992148,0,0x0,8
tick,0x7ffdf681f424,96994140,0,0x0,8
tick,0x7ffdf681f424,96996141,0,0x0,8
tick,0x7ffdf681f424,96998132,0,0x0,8
tick,0x7ffdf681f424,97000133,0,0x0,8
tick,0x7ffdf681f424,97002123,0,0x0,8
tick,0x7ffdf681f424,97004108,0,0x0,8
tick,0x7ffdf681f424,97006116,0,0x0,8
tick,0x7ffdf681f424,97008099,0,0x0,8
tick,0x7ffdf681f424,97010112,0,0x0,8
tick,0x7ffdf681f424,97012007,0,0x0,8
tick,0x7ffdf681f424,97014098,0,0x0,8
tick,0x7ffdf681f424,97016084,0,0x0,8
tick,0x7ffdf681f424,97018077,0,0x0,8
tick,0x7ffdf681f424,97020079,0,0x0,8
tick,0x7ffdf681f424,97022069,0,0x0,8
tick,0x7ffdf681f424,97024098,0,0x0,8
tick,0x7ffdf681f424,97026067,0,0x0,8
tick,0x7ffdf681f424,97028066,0,0x0,8
tick,0x7ffdf681f424,97030053,0,0x0,8
tick,0x7ffdf681f424,97032055,0,0x0,8
tick,0x7ffdf681f424,97034036,0,0x0,8
tick,0x7ffdf681f424,97036031,0,0x0,8
tick,0x7ffdf681f424,97038026,0,0x0,8
tick,0x7ffdf681f424,97040020,0,0x0,8
tick,0x7ffdf681f424,97042014,0,0x0,8
tick,0x7ffdf681f424,97044012,0,0x0,8
tick,0x7ffdf681f424,97046006,0,0x0,8
tick,0x7ffdf681f424,97048061,0,0x0,8
tick,0x7ffdf681f424,97050020,0,0x0,8
tick,0x7ffdf681f424,97051992,0,0x0,8
tick,0x7ffdf681f424,97053947,0,0x0,8
tick,0x7ffdf681f424,97055977,0,0x0,8
tick,0x7ffdf681f424,97057969,0,0x0,8
tick,0x7ffdf681f424,97059965,0,0x0,8
tick,0x7ffdf681f424,97061848,0,0x0,8
tick,0x7ffdf681f424,97063985,0,0x0,8
tick,0x7ffdf681f424,97065836,0,0x0,8
tick,0x7ffdf681f424,97067955,0,0x0,8
tick,0x7ffdf681f424,97070057,0,0x0,8
tick,0x7ffdf681f424,97071965,0,0x0,8
tick,0x7ffdf681f424,97073930,0,0x0,8
tick,0x7ffdf681f424,97075934,0,0x0,8
tick,0x7ffdf681f424,97077920,0,0x0,8
tick,0x7ffdf681f424,97079925,0,0x0,8
tick,0x7ffdf681f424,97081906,0,0x0,8
tick,0x7ffdf681f424,97083906,0,0x0,8
tick,0x7ffdf681f424,97085900,0,0x0,8
tick,0x7ffdf681f424,97087893,0,0x0,8
tick,0x7ffdf681f424,97089884,0,0x0,8
tick,0x7ffdf681f424,97091867,0,0x0,8
tick,0x7ffdf681f424,97093890,0,0x0,8
tick,0x7ffdf681f424,97095865,0,0x0,8
tick,0x7ffdf681f424,97097871,0,0x0,8
tick,0x7ffdf681f424,97099896,0,0x0,8
tick,0x7ffdf681f424,97101854,0,0x0,8
tick,0x7ffdf681f424,97103741,0,0x0,8
tick,0x7ffdf681f424,97105844,0,0x0,8
tick,0x7ffdf681f424,97107840,0,0x0,8
tick,0x7ffdf681f424,97109843,0,0x0,8
tick,0x7ffdf681f424,97111837,0,0x0,8
tick,0x7ffdf681f424,97113825,0,0x0,8
tick,0x7ffdf681f424,97115831,0,0x0,8
tick,0x7ffdf681f424,97117819,0,0x0,8
tick,0x7ffdf681f424,97119811,0,0x0,8
tick,0x7ffdf681f424,97121799,0,0x0,8
tick,0x7ffdf681f424,97123799,0,0x0,8
tick,0x7ffdf681f424,97125791,0,0x0,8
tick,0x7ffdf681f424,97127786,0,0x0,8
tick,0x7ffdf681f424,97129781,0,0x0,8
tick,0x7ffdf681f424,97131774,0,0x0,8
tick,0x7ffdf681f424,97133770,0,0x0,8
tick,0x7ffdf681f424,97135770,0,0x0,8
tick,0x7ffdf681f424,97137773,0,0x0,8
tick,0x7ffdf681f424,97139753,0,0x0,8
tick,0x7ffdf681f424,97141659,0,0x0,8
tick,0x7ffdf681f424,97143744,0,0x0,8
tick,0x7ffdf681f424,97145654,0,0x0,8
tick,0x7ffdf681f424,97147737,0,0x0,8
tick,0x7ffdf681f424,97149731,0,0x0,8
tick,0x7ffdf681f424,97151721,0,0x0,8
tick,0x7ffdf681f424,97153601,0,0x0,8
tick,0x7ffdf681f424,97155643,0,0x0,8
tick,0x7ffdf681f424,97157743,0,0x0,8
tick,0x7ffdf681f424,97159736,0,0x0,8
tick,0x7ffdf681f424,97161695,0,0x0,8
tick,0x7ffdf681f424,97163694,0,0x0,8
tick,0x7ffdf681f424,97165689,0,0x0,8
tick,0x7ffdf681f424,97167678,0,0x0,8
tick,0x7ffdf681f424,97169676,0,0x0,8
tick,0x7ffdf681f424,97171675,0,0x0,8
tick,0x7ffdf681f424,97173664,0,0x0,8
tick,0x7ffdf681f424,97175658,0,0x0,8
tick,0x7ffdf681f424,97177649,0,0x0,8
tick,0x7ffdf681f424,97179720,0,0x0,8
tick,0x7ffdf681f424,97181694,0,0x0,8
tick,0x7ffdf681f424,97183630,0,0x0,8
tick,0x7ffdf681f424,97185639,0,0x0,8
tick,0x7ffdf681f424,97187648,0,0x0,8
tick,0x7ffdf681f424,97189624,0,0x0,8
tick,0x7ffdf681f424,97191616,0,0x0,8
tick,0x7ffdf681f424,97193609,0,0x0,8
tick,0x7ffdf681f424,97195495,0,0x0,8
tick,0x7ffdf681f424,97197599,0,0x0,8
tick,0x7ffdf681f424,97199594,0,0x0,8
tick,0x7ffdf681f424,97201593,0,0x0,8
tick,0x7ffdf681f424,97203549,0,0x0,8
tick,0x7ffdf681f424,97205579,0,0x0,8
tick,0x7ffdf681f424,97207578,0,0x0,8
tick,0x7ffdf681f424,97209563,0,0x0,8
tick,0x7ffdf681f424,97211565,0,0x0,8
tick,0x7ffdf681f424,97213558,0,0x0,8
tick,0x7ffdf681f424,97215552,0,0x0,8
tick,0x7ffdf681f424,97217440,0,0x0,8
tick,0x7ffdf681f424,97219431,0,0x0,8
tick,0x7ffdf681f424,97221540,0,0x0,8
tick,0x7ffdf681f424,97223536,0,0x0,8
tick,0x7ffdf681f424,97225548,0,0x0,8
tick,0x7ffdf681f424,97227572,0,0x0,8
tick,0x7ffdf681f424,97229531,0,0x0,8
tick,0x7ffdf681f424,97231516,0,0x0,8
tick,0x7ffdf681f424,97233509,0,0x0,8
tick,0x7ffdf681f424,97235494,0,0x0,8
tick,0x7ffdf681f424,97237494,0,0x0,8
tick,0x7ffdf681f424,97239486,0,0x0,8
tick,0x7ffdf681f424,97241522,0,0x0,8
tick,0x7ffdf681f424,97243479,0,0x0,8
tick,0x7ffdf681f424,97245360,0,0x0,8
tick,0x7ffdf681f424,97247479,0,0x0,8
tick,0x7ffdf681f424,97249466,0,0x0,8
tick,0x7ffdf681f424,97251465,0,0x0,8
tick,0x7ffdf681f424,97253455,0,0x0,8
tick,0x7ffdf681f424,97255444,0,0x0,8
tick,0x7ffdf681f424,97257434,0,0x0,8
tick,0x7ffdf681f424,97259433,0,0x0,8
tick,0x7ffdf681f424,97261440,0,0x0,8
tick,0x7ffdf681f424,97263424,0,0x0,8
tick,0x7ffdf681f424,97265417,0,0x0,8
tick,0x7ffdf681f424,97267472,0,0x0,8
tick,0x7ffdf681f424,97269436,0,0x0,8
tick,0x7ffdf681f424,97271401,0,0x0,8
tick,0x7ffdf681f424,97273397,0,0x0,8
tick,0x7ffdf681f424,97275394,0,0x0,8
tick,0x7ffdf681f424,97277387,0,0x0,8
tick,0x7ffdf681f424,97279374,0,0x0,8
tick,0x7ffdf681f424,97281379,0,0x0,8
tick,0x7ffdf681f424,97283373,0,0x0,8
tick,0x7ffdf681f424,97285363,0,0x0,8
tick,0x7ffdf681f424,97287302,0,0x0,8
tick,0x7ffdf681f424,97289432,0,0x0,8
tick,0x7ffdf681f424,97291377,0,0x0,8
tick,0x7ffdf681f424,97293342,0,0x0,8
tick,0x7ffdf681f424,97295260,0,0x0,8
tick,0x7ffdf681f424,97297331,0,0x0,8
tick,0x7ffdf681f424,97299339,0,0x0,8
tick,0x7ffdf681f424,97301359,0,0x0,8
tick,0x7ffdf681f424,97303316,0,0x0,8
tick,0x7ffdf681f424,97305309,0,0x0,8
tick,0x7ffdf681f424,97307309,0,0x0,8
tick,0x7ffdf681f424,97309352,0,0x0,8
tick,0x7ffdf681f424,97311334,0,0x0,8
tick,0x7ffdf681f424,97313315,0,0x0,8
tick,0x7ffdf681f424,97315287,0,0x0,8
tick,0x7ffdf681f424,97317284,0,0x0,8
tick,0x7ffdf681f424,97319273,0,0x0,8
tick,0x7ffdf681f424,97321267,0,0x0,8
tick,0x7ffdf681f424,97323253,0,0x0,8
tick,0x7ffdf681f424,97325257,0,0x0,8
tick,0x7ffdf681f424,97327252,0,0x0,8
tick,0x7ffdf681f424,97329262,0,0x0,8
tick,0x7ffdf681f424,97331241,0,0x0,8
tick,0x7ffdf681f424,97333240,0,0x0,8
tick,0x7ffdf681f424,97335247,0,0x0,8
tick,0x7ffdf681f424,97337124,0,0x0,8
tick,0x7ffdf681f424,97339224,0,0x0,8
tick,0x7ffdf681f424,97341221,0,0x0,8
tick,0x7ffdf681f424,97343209,0,0x0,8
tick,0x7ffdf681f424,97345210,0,0x0,8
tick,0x7ffdf681f424,97347202,0,0x0,8
tick,0x7ffdf681f424,97349084,0,0x0,8
tick,0x7ffdf681f424,97351188,0,0x0,8
tick,0x7ffdf681f424,97353183,0,0x0,8
tick,0x7ffdf681f424,97355282,0,0x0,8
tick,0x7ffdf681f424,97357198,0,0x0,8
tick,0x7ffdf681f424,97359167,0,0x0,8
tick,0x7ffdf681f424,97361169,0,0x0,8
tick,0x7ffdf681f424,97363156,0,0x0,8
tick,0x7ffdf681f424,97365145,0,0x0,8
tick,0x7ffdf681f424,97367139,0,0x0,8
tick,0x7ffdf681f424,97369143,0,0x0,8
tick,0x7ffdf681f424,97371056,0,0x0,8
tick,0x7ffdf681f424,97373018,0,0x0,8
tick,0x7ffdf681f424,97375131,0,0x0,8
tick,0x7ffdf681f424,97377121,0,0x0,8
tick,0x7ffdf681f424,97379020,0,0x0,8
tick,0x7ffdf681f424,97381108,0,0x0,8
tick,0x7ffdf681f424,97383107,0,0x0,8
tick,0x7ffdf681f424,97385098,0,0x0,8
tick,0x7ffdf681f424,97386978,0,0x0,8
tick,0x7ffdf681f424,97389090,0,0x0,8
tick,0x7ffdf681f424,97391131,0,0x0,8
tick,0x7ffdf681f424,97393084,0,0x0,8
tick,0x7ffdf681f424,97395082,0,0x0,8
tick,0x7ffdf681f424,97397059,0,0x0,8
tick,0x7ffdf681f424,97399145,0,0x0,8
tick,0x7ffdf681f424,97401080,0,0x0,8
tick,0x7ffdf681f424,97403053,0,0x0,8
tick,0x7ffdf681f424,97405054,0,0x0,8
tick,0x7ffdf681f424,97407039,0,0x0,8
tick,0x7ffdf681f424,97409031,0,0x0,8
tick,0x7ffdf681f424,97411020,0,0x0,8
tick,0x7ffdf681f424,97413022,0,0x0,8
tick,0x7ffdf681f424,97415017,0,0x0,8
tick,0x7ffdf681f424,97417011,0,0x0,8
tick,0x7ffdf681f424,97419011,0,0x0,8
tick,0x7ffdf681f424,97421079,0,0x0,8
tick,0x7ffdf681f424,97423024,0,0x0,8
tick,0x7ffdf681f424,97424990,0,0x0,8
tick,0x7ffdf681f424,97426990,0,0x0,8
tick,0x7ffdf681f424,97428875,0,0x0,8
tick,0x7ffdf681f424,97430974,0,0x0,8
tick,0x7ffdf681f424,97432967,0,0x0,8
tick,0x7ffdf681f424,97434967,0,0x0,8
tick,0x7ffdf681f424,97436891,0,0x0,8
tick,0x7ffdf681f424,97438829,0,0x0,8
tick,0x7ffdf681f424,97440946,0,0x0,8
tick,0x7ffdf681f424,97442981,0,0x0,8
tick,0x7ffdf681f424,97444950,0,0x0,8
tick,0x7ffdf681f424,97446926,0,0x0,8
tick,0x7ffdf681f424,97448918,0,0x0,8
tick,0x7ffdf681f424,97450925,0,0x0,8
tick,0x7ffdf681f424,97452910,0,0x0,8
tick,0x7ffdf681f424,97454798,0,0x0,8
tick,0x7ffdf681f424,97456905,0,0x0,8
tick,0x7ffdf681f424,97458908,0,0x0,8
tick,0x7ffdf681f424,97460931,0,0x0,8
tick,0x7ffdf681f424,97462779,0,0x0,8
tick,0x7ffdf681f424,97464971,0,0x0,8
tick,0x7ffdf681f424,97466896,0,0x0,8
tick,0x7ffdf681f424,97468875,0,0x0,8
tick,0x7ffdf681f424,97470878,0,0x0,8
tick,0x7ffdf681f424,97472908,0,0x0,8
tick,0x7ffdf681f424,97474861,0,0x0,8
tick,0x7ffdf681f424,97476861,0,0x0,8
tick,0x7ffdf681f424,97478742,0,0x0,8
tick,0x7ffdf681f424,97480845,0,0x0,8
tick,0x7ffdf681f424,97482835,0,0x0,8
tick,0x7ffdf681f424,97484841,0,0x0,8
tick,0x7ffdf681f424,97486815,0,0x0,8
tick,0x7ffdf681f424,97488833,0,0x0,8
tick,0x7ffdf681f424,97490815,0,0x0,8
tick,0x7ffdf681f424,97492833,0,0x0,8
tick,0x7ffdf681f424,97494798,0,0x0,8
tick,0x7ffdf681f424,97496796,0,0x0,8
tick,0x7ffdf681f424,97498792,0,0x0,8
tick,0x7ffdf681f424,97500803,0,0x0,8
tick,0x7ffdf681f424,97502784,0,0x0,8
tick,0x7ffdf681f424,97504775,0,0x0,8
tick,0x7ffdf681f424,97506771,0,0x0,8
tick,0x7ffdf681f424,97508773,0,0x0,8
tick,0x7ffdf681f424,97510775,0,0x0,8
tick,0x7ffdf681f424,97512750,0,0x0,8
tick,0x7ffdf681f424,97514753,0,0x0,8
tick,0x7ffdf681f424,97516746,0,0x0,8
tick,0x7ffdf681f424,97518740,0,0x0,8
tick,0x7ffdf681f424,97520736,0,0x0,8
tick,0x7ffdf681f424,97522738,0,0x0,8
tick,0x7ffdf681f424,97524621,0,0x0,8
tick,0x7ffdf681f424,97526610,0,0x0,8
tick,0x7ffdf681f424,97528611,0,0x0,8
tick,0x7ffdf681f424,97530703,0,0x0,8
tick,0x7ffdf681f424,97532721,0,0x0,8
tick,0x7ffdf681f424,97534576,0,0x0,8
tick,0x7ffdf681f424,97536696,0,0x0,8
tick,0x7ffdf681f424,97538690,0,0x0,8
tick,0x7ffdf681f424,97540681,0,0x0,8
tick,0x7ffdf681f424,97542676,0,0x0,8
tick,0x7ffdf681f424,97544714,0,0x0,8
tick,0x7ffdf681f424,97546659,0,0x0,8
tick,0x7ffdf681f424,97548660,0,0x0,8
tick,0x7ffdf681f424,97550654,0,0x0,8
tick,0x7ffdf681f424,97552691,0,0x0,8
tick,0x7ffdf681f424,97554671,0,0x0,8
tick,0x7ffdf681f424,97556640,0,0x0,8
tick,0x7ffdf681f424,97558638,0,0x0,8
tick,0x7ffdf681f424,97560625,0,0x0,8
tick,0x7ffdf681f424,97562628,0,0x0,8
tick,0x7ffdf681f424,97564612,0,0x0,8
tick,0x7ffdf681f424,97566612,0,0x0,8
tick,0x7ffdf681f424,97568604,0,0x0,8
tick,0x7ffdf681f424,97570492,0,0x0,8
tick,0x7ffdf681f424,97572596,0,0x0,8
tick,0x7ffdf681f424,97574596,0,0x0,8
tick,0x7ffdf681f424,97576599,0,0x0,8
tick,0x7ffdf681f424,97578578,0,0x0,8
tick,0x7ffdf681f424,97580578,0,0x0,8
tick,0x7ffdf681f424,97582569,0,0x0,8
tick,0x7ffdf681f424,97584563,0,0x0,8
tick,0x7ffdf681f424,97586559,0,0x0,8
tick,0x7ffdf681f424,97588555,0,0x0,8
tick,0x7ffdf681f424,97590548,0,0x0,8
tick,0x7ffdf681f424,97592540,0,0x0,8
tick,0x7ffdf681f424,97594541,0,0x0,8
tick,0x7ffdf681f424,97596574,0,0x0,8
tick,0x7ffdf681f424,97598555,0,0x0,8
tick,0x7ffdf681f424,97600518,0,0x0,8
tick,0x7ffdf681f424,97602485,0,0x0,8
tick,0x7ffdf681f424,97604510,0,0x0,8
tick,0x7ffdf681f424,97606505,0,0x0,8
tick,0x7ffdf681f424,97608500,0,0x0,8
tick,0x7ffdf681f424,97610498,0,0x0,8
tick,0x7ffdf681f424,97612381,0,0x0,8
tick,0x7ffdf681f424,97614484,0,0x0,8
tick,0x7ffdf681f424,97616418,0,0x0,8
tick,0x7ffdf681f424,97618459,0,0x0,8
tick,0x7ffdf681f424,97620370,0,0x0,8
tick,0x7ffdf681f424,97622480,0,0x0,8
tick,0x7ffdf681f424,97624444,0,0x0,8
tick,0x7ffdf681f424,97626460,0,0x0,8
tick,0x7ffdf681f424,97628449,0,0x0,8
tick,0x7ffdf681f424,97630436,0,0x0,8
tick,0x7ffdf681f424,97632433,0,0x0,8
tick,0x7ffdf681f424,97634463,0,0x0,8
tick,0x7ffdf681f424,97636432,0,0x0,8
tick,0x7ffdf681f424,97638420,0,0x0,8
tick,0x7ffdf681f424,97640490,0,0x0,8
tick,0x7ffdf681f424,97642438,0,0x0,8
tick,0x7ffdf681f424,97644405,0,0x0,8
tick,0x7ffdf681f424,97646406,0,0x0,8
tick,0x7ffdf681f424,97648393,0,0x0,8
tick,0x7ffdf681f424,97650389,0,0x0,8
tick,0x7ffdf681f424,97652384,0,0x0,8
tick,0x7ffdf681f424,97654378,0,0x0,8
tick,0x7ffdf681f424,97656369,0,0x0,8
tick,0x7ffdf681f424,97658370,0,0x0,8
tick,0x7ffdf681f424,97660363,0,0x0,8
tick,0x7ffdf681f424,97662252,0,0x0,8
tick,0x7ffdf681f424,97664362,0,0x0,8
tick,0x7ffdf681f424,97666349,0,0x0,8
tick,0x7ffdf681f424,97668345,0,0x0,8
tick,0x7ffdf681f424,97670258,0,0x0,8
tick,0x7ffdf681f424,97672329,0,0x0,8
tick,0x7ffdf681f424,97674321,0,0x0,8
tick,0x7ffdf681f424,97676325,0,0x0,8
tick,0x7ffdf681f424,97678205,0,0x0,8
tick,0x7ffdf681f424,97680198,0,0x0,8
tick,0x7ffdf681f424,97682309,0,0x0,8
tick,0x7ffdf681f424,97684396,0,0x0,8
tick,0x7ffdf681f424,97686320,0,0x0,8
tick,0x7ffdf681f424,97688186,0,0x0,8
tick,0x7ffdf681f424,97690287,0,0x0,8
tick,0x7ffdf681f424,97692278,0,0x0,8
tick,0x7ffdf681f424,97694270,0,0x0,8
tick,0x7ffdf681f424,97696263,0,0x0,8
tick,0x7ffdf681f424,97698263,0,0x0,8
tick,0x7ffdf681f424,97700254,0,0x0,8
tick,0x7ffdf681f424,97702260,0,0x0,8
tick,0x7ffdf681f424,97704270,0,0x0,8
tick,0x7ffdf681f424,97706278,0,0x0,8
tick,0x7ffdf681f424,97708270,0,0x0,8
tick,0x7ffdf681f424,97710228,0,0x0,8
tick,0x7ffdf681f424,97712121,0,0x0,8
tick,0x7ffdf681f424,97714218,0,0x0,8
tick,0x7ffdf681f424,97716222,0,0x0,8
tick,0x7ffdf681f424,97718240,0,0x0,8
tick,0x7ffdf681f424,97720204,0,0x0,8
tick,0x7ffdf681f424,97722200,0,0x0,8
tick,0x7ffdf681f424,97724228,0,0x0,8
tick,0x7ffdf681f424,97726175,0,0x0,8
tick,0x7ffdf681f424,97728220,0,0x0,8
tick,0x7ffdf681f424,97730208,0,0x0,8
tick,0x7ffdf681f424,97732194,0,0x0,8
tick,0x7ffdf681f424,97734172,0,0x0,8
tick,0x7ffdf681f424,97736165,0,0x0,8
tick,0x7ffdf681f424,97738153,0,0x0,8
tick,0x7ffdf681f424,97740148,0,0x0,8
tick,0x7ffdf681f424,97742143,0,0x0,8
tick,0x7ffdf681f424,97744137,0,0x0,8
tick,0x7ffdf681f424,97746133,0,0x0,8
tick,0x7ffdf681f424,97748133,0,0x0,8
tick,0x7ffdf681f424,97750110,0,0x0,8
tick,0x7ffdf681f424,97752127,0,0x0,8
tick,0x7ffdf681f424,97754114,0,0x0,8
tick,0x7ffdf681f424,97756013,0,0x0,8
tick,0x7ffdf681f424,97758100,0,0x0,8
tick,0x7ffdf681f424,97759971,0,0x0,8
tick,0x7ffdf681f424,97762059,0,0x0,8
tick,0x7ffdf681f424,97764087,0,0x0,8
tick,0x7ffdf681f424,97765971,0,0x0,8
tick,0x7ffdf681f424,97768073,0,0x0,8
tick,0x7ffdf681f424,97769961,0,0x0,8
tick,0x7ffdf681f424,97772055,0,0x0,8
tick,0x7ffdf681f424,97774072,0,0x0,8
tick,0x7ffdf681f424,97776052,0,0x0,8
tick,0x7ffdf681f424,97778052,0,0x0,8
tick,0x7ffdf681f424,97780043,0,0x0,8
tick,0x7ffdf681f424,97782035,0,0x0,8
tick,0x7ffdf681f424,97784028,0,0x0,8
tick,0x7ffdf681f424,97786022,0,0x0,8
tick,0x7ffdf681f424,97788025,0,0x0,8
tick,0x7ffdf681f424,97790015,0,0x0,8
tick,0x7ffdf681f424,97792006,0,0x0,8
tick,0x7ffdf681f424,97794093,0,0x0,8
tick,0x7ffdf681f424,97796031,0,0x0,8
tick,0x7ffdf681f424,97797994,0,0x0,8
tick,0x7ffdf681f424,97800034,0,0x0,8
tick,0x7ffdf681f424,97801983,0,0x0,8
tick,0x7ffdf681f424,97803878,0,0x0,8
tick,0x7ffdf681f424,97805966,0,0x0,8
tick,0x7ffdf681f424,97807966,0,0x0,8
tick,0x7ffdf681f424,97809961,0,0x0,8
tick,0x7ffdf681f424,97811945,0,0x0,8
tick,0x7ffdf681f424,97813951,0,0x0,8
tick,0x7ffdf681f424,97815947,0,0x0,8
tick,0x7ffdf681f424,97817958,0,0x0,8
tick,0x7ffdf681f424,97819937,0,0x0,8
tick,0x7ffdf681f424,97821934,0,0x0,8
tick,0x7ffdf681f424,97823921,0,0x0,8
tick,0x7ffdf681f424,97825922,0,0x0,8
tick,0x7ffdf681f424,97827914,0,0x0,8
tick,0x7ffdf681f424,97829914,0,0x0,8
tick,0x7ffdf681f424,97831794,0,0x0,8
tick,0x7ffdf681f424,97833783,0,0x0,8
tick,0x7ffdf681f424,97835915,0,0x0,8
tick,0x7ffdf681f424,97837887,0,0x0,8
tick,0x7ffdf681f424,97839897,0,0x0,8
tick,0x7ffdf681f424,97841876,0,0x0,8
tick,0x7ffdf681f424,97843887,0,0x0,8
tick,0x7ffdf681f424,97845759,0,0x0,8
tick,0x7ffdf681f424,97847879,0,0x0,8
tick,0x7ffdf681f424,97849858,0,0x0,8
tick,0x7ffdf681f424,97851851,0,0x0,8
tick,0x7ffdf681f424,97853722,0,0x0,8
tick,0x7ffdf681f424,97855844,0,0x0,8
tick,0x7ffdf681f424,97857837,0,0x0,8
tick,0x7ffdf681f424,97859856,0,0x0,8
tick,0x7ffdf681f424,97861908,0,0x0,8
tick,0x7ffdf681f424,97863813,0,0x0,8
tick,0x7ffdf681f424,97865813,0,0x0,8
tick,0x7ffdf681f424,97867806,0,0x0,8
tick,0x7ffdf681f424,97869801,0,0x0,8
tick,0x7ffdf681f424,97871799,0,0x0,8
tick,0x7ffdf681f424,97873790,0,0x0,8
tick,0x7ffdf681f424,97875779,0,0x0,8
tick,0x7ffdf681f424,97877786,0,0x0,8
tick,0x7ffdf681f424,97879772,0,0x0,8
tick,0x7ffdf681f424,97881821,0,0x0,8
tick,0x7ffdf681f424,97883776,0,0x0,8
tick,0x7ffdf681f424,97885760,0,0x0,8
tick,0x7ffdf681f424,97887757,0,0x0,8
tick,0x7ffdf681f424,97889752,0,0x0,8
tick,0x7ffdf681f424,97891736,0,0x0,8
tick,0x7ffdf681f424,97893734,0,0x0,8
tick,0x7ffdf681f424,97895618,0,0x0,8
tick,0x7ffdf681f424,97897726,0,0x0,8
tick,0x7ffdf681f424,97899721,0,0x0,8
tick,0x7ffdf681f424,97901725,0,0x0,8
tick,0x7ffdf681f424,97903682,0,0x0,8
tick,0x7ffdf681f424,97905738,0,0x0,8
tick,0x7ffdf681f424,97907709,0,0x0,8
tick,0x7ffdf681f424,97909767,0,0x0,8
tick,0x7ffdf681f424,97911709,0,0x0,8
tick,0x7ffdf681f424,97913695,0,0x0,8
tick,0x7ffdf681f424,97915591,0,0x0,8
tick,0x7ffdf681f424,97917675,0,0x0,8
tick,0x7ffdf681f424,97919664,0,0x0,8
tick,0x7ffdf681f424,97921548,0,0x0,8
tick,0x7ffdf681f424,97923655,0,0x0,8
tick,0x7ffdf681f424,97925739,0,0x0,8
tick,0x7ffdf681f424,97927699,0,0x0,8
tick,0x7ffdf681f424,97929641,0,0x0,8
tick,0x7ffdf681f424,97931644,0,0x0,8
tick,0x7ffdf681f424,97933637,0,0x0,8
tick,0x7ffdf681f424,97935626,0,0x0,8
tick,0x7ffdf681f424,97937628,0,0x0,8
tick,0x7ffdf681f424,97939618,0,0x0,8
tick,0x7ffdf681f424,97941609,0,0x0,8
tick,0x7ffdf681f424,97943601,0,0x0,8
tick,0x7ffdf681f424,97945489,0,0x0,8
tick,0x7ffdf681f424,97947622,0,0x0,8
tick,0x7ffdf681f424,97949624,0,0x0,8
tick,0x7ffdf681f424,97951580,0,0x0,8
tick,0x7ffdf681f424,97953592,0,0x0,8
tick,0x7ffdf681f424,97955571,0,0x0,8
tick,0x7ffdf681f424,97957566,0,0x0,8
tick,0x7ffdf681f424,97959556,0,0x0,8
tick,0x7ffdf681f424,97961556,0,0x0,8
tick,0x7ffdf681f424,97963586,0,0x0,8
tick,0x7ffdf681f424,97965539,0,0x0,8
tick,0x7ffdf681f424,97967540,0,0x0,8
tick,0x7ffdf681f424,97969537,0,0x0,8
tick,0x7ffdf681f424,97971569,0,0x0,8
tick,0x7ffdf681f424,97973524,0,0x0,8
tick,0x7ffdf681f424,97975521,0,0x0,8
tick,0x7ffdf681f424,97977517,0,0x0,8
tick,0x7ffdf681f424,97979509,0,0x0,8
tick,0x7ffdf681f424,97981442,0,0x0,8
tick,0x7ffdf681f424,97983501,0,0x0,8
tick,0x7ffdf681f424,97985383,0,0x0,8
tick,0x7ffdf681f424,97987415,0,0x0,8
tick,0x7ffdf681f424,97989488,0,0x0,8
tick,0x7ffdf681f424,97991462,0,0x0,8
tick,0x7ffdf681f424,97993512,0,0x0,8
tick,0x7ffdf681f424,97995344,0,0x0,8
tick,0x7ffdf681f424,97997467,0,0x0,8
tick,0x7ffdf681f424,97999455,0,0x0,8
tick,0x7ffdf681f424,98001449,0,0x0,8
tick,0x7ffdf681f424,98003446,0,0x0,8
tick,0x7ffdf681f424,98005438,0,0x0,8
tick,0x7ffdf681f424,98007434,0,0x0,8
tick,0x7ffdf681f424,98009431,0,0x0,8
tick,0x7ffdf681f424,98011432,0,0x0,8
tick,0x7ffdf681f424,98013535,0,0x0,8
tick,0x7ffdf681f424,98015442,0,0x0,8
tick,0x7ffdf681f424,98017410,0,0x0,8
tick,0x7ffdf681f424,98019409,0,0x0,8
tick,0x7ffdf681f424,98021401,0,0x0,8
tick,0x7ffdf681f424,98023390,0,0x0,8
tick,0x7ffdf681f424,98025379,0,0x0,8
tick,0x7ffdf681f424,98027382,0,0x0,8
tick,0x7ffdf681f424,98029374,0,0x0,8
tick,0x7ffdf681f424,98031369,0,0x0,8
tick,0x7ffdf681f424,98033365,0,0x0,8
tick,0x7ffdf681f424,98035414,0,0x0,8
tick,0x7ffdf681f424,98037303,0,0x0,8
tick,0x7ffdf681f424,98039345,0,0x0,8
tick,0x7ffdf681f424,98041358,0,0x0,8
tick,0x7ffdf681f424,98043339,0,0x0,8
tick,0x7ffdf681f424,98045354,0,0x0,8
tick,0x7ffdf681f424,98047328,0,0x0,8
tick,0x7ffdf681f424,98049325,0,0x0,8
tick,0x7ffdf681f424,98051316,0,0x0,8
tick,0x7ffdf681f424,98053310,0,0x0,8
tick,0x7ffdf681f424,98055299,0,0x0,8
tick,0x7ffdf681f424,98057404,0,0x0,8
tick,0x7ffdf681f424,98059345,0,0x0,8
tick,0x7ffdf681f424,98061289,0,0x0,8
tick,0x7ffdf681f424,98063211,0,0x0,8
tick,0x7ffdf681f424,98065279,0,0x0,8
tick,0x7ffdf681f424,98067275,0,0x0,8
tick,0x7ffdf681f424,98069265,0,0x0,8
tick,0x7ffdf681f424,98071266,0,0x0,8
tick,0x7ffdf681f424,98073261,0,0x0,8
tick,0x7ffdf681f424,98075259,0,0x0,8
tick,0x7ffdf681f424,98077176,0,0x0,8
tick,0x7ffdf681f424,98079176,0,0x0,8
tick,0x7ffdf681f424,98081249,0,0x0,8
tick,0x7ffdf681f424,98083231,0,0x0,8
tick,0x7ffdf681f424,98085230,0,0x0,8
tick,0x7ffdf681f424,98087112,0,0x0,8
tick,0x7ffdf681f424,98089209,0,0x0,8
tick,0x7ffdf681f424,98091213,0,0x0,8
tick,0x7ffdf681f424,98093205,0,0x0,8
tick,0x7ffdf681f424,98095205,0,0x0,8
tick,0x7ffdf681f424,98097193,0,0x0,8
tick,0x7ffdf681f424,98099189,0,0x0,8
tick,0x7ffdf681f424,98101274,0,0x0,8
tick,0x7ffdf681f424,98103203,0,0x0,8
tick,0x7ffdf681f424,98105164,0,0x0,8
tick,0x7ffdf681f424,98107175,0,0x0,8
tick,0x7ffdf681f424,98109161,0,0x0,8
tick,0x7ffdf681f424,98111153,0,0x0,8
tick,0x7ffdf681f424,98113154,0,0x0,8
tick,0x7ffdf681f424,98115141,0,0x0,8
tick,0x7ffdf681f424,98117140,0,0x0,8
tick,0x7ffdf681f424,98119134,0,0x0,8
tick,0x7ffdf681f424,98121128,0,0x0,8
tick,0x7ffdf681f424,98123197,0,0x0,8
tick,0x7ffdf681f424,98125148,0,0x0,8
tick,0x7ffdf681f424,98127147,0,0x0,8
tick,0x7ffdf681f424,98129070,0,0x0,8
tick,0x7ffdf681f424,98131112,0,0x0,8
tick,0x7ffdf681f424,98133097,0,0x0,8
tick,0x7ffdf681f424,98135106,0,0x0,8
tick,0x7ffdf681f424,98136995,0,0x0,8
tick,0x7ffdf681f424,98139089,0,0x0,8
tick,0x7ffdf681f424,98140968,0,0x0,8
tick,0x7ffdf681f424,98143084,0,0x0,8
tick,0x7ffdf681f424,98145058,0,0x0,8
tick,0x7ffdf681f424,98147095,0,0x0,8
tick,0x7ffdf681f424,98149056,0,0x0,8
tick,0x7ffdf681f424,98151055,0,0x0,8
tick,0x7ffdf681f424,98153044,0,0x0,8
tick,0x7ffdf681f424,98155038,0,0x0,8
tick,0x7ffdf681f424,98157033,0,0x0,8
tick,0x7ffdf681f424,98159033,0,0x0,8
tick,0x7ffdf681f424,98161023,0,0x0,8
tick,0x7ffdf681f424,98163019,0,0x0,8
tick,0x7ffdf681f424,98165012,0,0x0,8
tick,0x7ffdf681f424,98167046,0,0x0,8
tick,0x7ffdf681f424,98169032,0,0x0,8
tick,0x7ffdf681f424,98170998,0,0x0,8
tick,0x7ffdf681f424,98172998,0,0x0,8
tick,0x7ffdf681f424,98174988,0,0x0,8
tick,0x7ffdf681f424,98176983,0,0x0,8
tick,0x7ffdf681f424,98178866,0,0x0,8
tick,0x7ffdf681f424,98180969,0,0x0,8
tick,0x7ffdf681f424,98182964,0,0x0,8
tick,0x7ffdf681f424,98184959,0,0x0,8
tick,0x7ffdf681f424,98186977,0,0x0,8
tick,0x7ffdf681f424,98188933,0,0x0,8
tick,0x7ffdf681f424,98190956,0,0x0,8
tick,0x7ffdf681f424,98192938,0,0x0,8
tick,0x7ffdf681f424,98194937,0,0x0,8
tick,0x7ffdf681f424,98196928,0,0x0,8
tick,0x7ffdf681f424,98198920,0,0x0,8
tick,0x7ffdf681f424,98200919,0,0x0,8
tick,0x7ffdf681f424,98202925,0,0x0,8
tick,0x7ffdf681f424,98204906,0,0x0,8
tick,0x7ffdf681f424,98206897,0,0x0,8
tick,0x7ffdf681f424,98208944,0,0x0,8
tick,0x7ffdf681f424,98210882,0,0x0,8
tick,0x7ffdf681f424,98212914,0,0x0,8
tick,0x7ffdf681f424,98214878,0,0x0,8
tick,0x7ffdf681f424,98216799,0,0x0,8
tick,0x7ffdf681f424,98218891,0,0x0,8
tick,0x7ffdf681f424,98220754,0,0x0,8
tick,0x7ffdf681f424,98222862,0,0x0,8
tick,0x7ffdf681f424,98224852,0,0x0,8
tick,0x7ffdf681f424,98226848,0,0x0,8
tick,0x7ffdf681f424,98228726,0,0x0,8
tick,0x7ffdf681f424,98230827,0,0x0,8
tick,0x7ffdf681f424,98232821,0,0x0,8
tick,0x7ffdf681f424,98234844,0,0x0,8
tick,0x7ffdf681f424,98236814,0,0x0,8
tick,0x7ffdf681f424,98238837,0,0x0,8
tick,0x7ffdf681f424,98240816,0,0x0,8
tick,0x7ffdf681f424,98242804,0,0x0,8
tick,0x7ffdf681f424,98244804,0,0x0,8
tick,0x7ffdf681f424,98246793,0,0x0,8
tick,0x7ffdf681f424,98248790,0,0x0,8
tick,0x7ffdf681f424,98250791,0,0x0,8
tick,0x7ffdf681f424,98252777,0,0x0,8
tick,0x7ffdf681f424,98254801,0,0x0,8
tick,0x7ffdf681f424,98256783,0,0x0,8
tick,0x7ffdf681f424,98258764,0,0x0,8
tick,0x7ffdf681f424,98260762,0,0x0,8
tick,0x7ffdf681f424,98262755,0,0x0,8
tick,0x7ffdf681f424,98264756,0,0x0,8
tick,0x7ffdf681f424,98266744,0,0x0,8
tick,0x7ffdf681f424,98268734,0,0x0,8
tick,0x7ffdf681f424,98270621,0,0x0,8
tick,0x7ffdf681f424,98272727,0,0x0,8
tick,0x7ffdf681f424,98274719,0,0x0,8
tick,0x7ffdf681f424,98276734,0,0x0,8
tick,0x7ffdf681f424,98278708,0,0x0,8
tick,0x7ffdf681f424,98280702,0,0x0,8
tick,0x7ffdf681f424,98282706,0,0x0,8
tick,0x7ffdf681f424,98284686,0,0x0,8
tick,0x7ffdf681f424,98286692,0,0x0,8
tick,0x7ffdf681f424,98288608,0,0x0,8
tick,0x7ffdf681f424,98290726,0,0x0,8
tick,0x7ffdf681f424,98292562,0,0x0,8
tick,0x7ffdf681f424,98294579,0,0x0,8
tick,0x7ffdf681f424,98296648,0,0x0,8
tick,0x7ffdf681f424,98298641,0,0x0,8
tick,0x7ffdf681f424,98300664,0,0x0,8
tick,0x7ffdf681f424,98302642,0,0x0,8
tick,0x7ffdf681f424,98304654,0,0x0,8
tick,0x7ffdf681f424,98306633,0,0x0,8
tick,0x7ffdf681f424,98308628,0,0x0,8
tick,0x7ffdf681f424,98310617,0,0x0,8
tick,0x7ffdf681f424,98312624,0,0x0,8
tick,0x7ffdf681f424,98314612,0,0x0,8
tick,0x7ffdf681f424,98316606,0,0x0,8
tick,0x7ffdf681f424,98318600,0,0x0,8
tick,0x7ffdf681f424,98320507,0,0x0,8
tick,0x7ffdf681f424,98322609,0,0x0,8
tick,0x7ffdf681f424,98324585,0,0x0,8
tick,0x7ffdf681f424,98326583,0,0x0,8
tick,0x7ffdf681f424,98328580,0,0x0,8
tick,0x7ffdf681f424,98330597,0,0x0,8
tick,0x7ffdf681f424,98332564,0,0x0,8
tick,0x7ffdf681f424,98334556,0,0x0,8
tick,0x7ffdf681f424,98336564,0,0x0,8
tick,0x7ffdf681f424,98338553,0,0x0,8
tick,0x7ffdf681f424,98340542,0,0x0,8
tick,0x7ffdf681f424,98342621,0,0x0,8
tick,0x7ffdf681f424,98344569,0,0x0,8
tick,0x7ffdf681f424,98346526,0,0x0,8
tick,0x7ffdf681f424,98348400,0,0x0,8
tick,0x7ffdf681f424,98350542,0,0x0,8
tick,0x7ffdf681f424,98352510,0,0x0,8
tick,0x7ffdf681f424,98354511,0,0x0,8
tick,0x7ffdf681f424,98356500,0,0x0,8
tick,0x7ffdf681f424,98358498,0,0x0,8
tick,0x7ffdf681f424,98360493,0,0x0,8
tick,0x7ffdf681f424,98362379,0,0x0,8
tick,0x7ffdf681f424,98364499,0,0x0,8
tick,0x7ffdf681f424,98366499,0,0x0,8
tick,0x7ffdf681f424,98368471,0,0x0,8
tick,0x7ffdf681f424,98370448,0,0x0,8
tick,0x7ffdf681f424,98372511,0,0x0,8
tick,0x7ffdf681f424,98374455,0,0x0,8
tick,0x7ffdf681f424,98376447,0,0x0,8
tick,0x7ffdf681f424,98378442,0,0x0,8
tick,0x7ffdf681f424,98380430,0,0x0,8
tick,0x7ffdf681f424,98382432,0,0x0,8
tick,0x7ffdf681f424,98384316,0,0x0,8
tick,0x7ffdf681f424,98386423,0,0x0,8
tick,0x7ffdf681f424,98388427,0,0x0,8
tick,0x7ffdf681f424,98390406,0,0x0,8
tick,0x7ffdf681f424,98392414,0,0x0,8
tick,0x7ffdf681f424,98394401,0,0x0,8
tick,0x7ffdf681f424,98396437,0,0x0,8
tick,0x7ffdf681f424,98398386,0,0x0,8
tick,0x7ffdf681f424,98400386,0,0x0,8
tick,0x7ffdf681f424,98402377,0,0x0,8
tick,0x7ffdf681f424,98404380,0,0x0,8
tick,0x7ffdf681f424,98406366,0,0x0,8
tick,0x7ffdf681f424,98408403,0,0x0,8
tick,0x7ffdf681f424,98410386,0,0x0,8
tick,0x7ffdf681f424,98412242,0,0x0,8
tick,0x7ffdf681f424,98414351,0,0x0,8
tick,0x7ffdf681f424,98416340,0,0x0,8
tick,0x7ffdf681f424,98418336,0,0x0,8
tick,0x7ffdf681f424,98420335,0,0x0,8
tick,0x7ffdf681f424,98422324,0,0x0,8
tick,0x7ffdf681f424,98424322,0,0x0,8
tick,0x7ffdf681f424,98426320,0,0x0,8
tick,0x7ffdf681f424,98428307,0,0x0,8
tick,0x7ffdf681f424,98430302,0,0x0,8
tick,0x7ffdf681f424,98432325,0,0x0,8
tick,0x7ffdf681f424,98434300,0,0x0,8
tick,0x7ffdf681f424,98436323,0,0x0,8
tick,0x7ffdf681f424,98438348,0,0x0,8
tick,0x7ffdf681f424,98440253,0,0x0,8
tick,0x7ffdf681f424,98442271,0,0x0,8
tick,0x7ffdf681f424,98444271,0,0x0,8
tick,0x7ffdf681f424,98446157,0,0x0,8
tick,0x7ffdf681f424,98448146,0,0x0,8
tick,0x7ffdf681f424,98450260,0,0x0,8
tick,0x7ffdf681f424,98452287,0,0x0,8
tick,0x7ffdf681f424,98454131,0,0x0,8
tick,0x7ffdf681f424,98456262,0,0x0,8
tick,0x7ffdf681f424,98458230,0,0x0,8
tick,0x7ffdf681f424,98460224,0,0x0,8
tick,0x7ffdf681f424,98462109,0,0x0,8
tick,0x7ffdf681f424,98464215,0,0x0,8
tick,0x7ffdf681f424,98466083,0,0x0,8
tick,0x7ffdf681f424,98468196,0,0x0,8
tick,0x7ffdf681f424,98470195,0,0x0,8
tick,0x7ffdf681f424,98472190,0,0x0,8
tick,0x7ffdf681f424,98474228,0,0x0,8
tick,0x7ffdf681f424,98476208,0,0x0,8
tick,0x7ffdf681f424,98478179,0,0x0,8
tick,0x7ffdf681f424,98480173,0,0x0,8
tick,0x7ffdf681f424,98482165,0,0x0,8
tick,0x7ffdf681f424,98484160,0,0x0,8
tick,0x7ffdf681f424,98486150,0,0x0,8
tick,0x7ffdf681f424,98488151,0,0x0,8
tick,0x7ffdf681f424,98490145,0,0x0,8
tick,0x7ffdf681f424,98492146,0,0x0,8
tick,0x7ffdf681f424,98494129,0,0x0,8
tick,0x7ffdf681f424,98496169,0,0x0,8
tick,0x7ffdf681f424,98498159,0,0x0,8
tick,0x7ffdf681f424,98500120,0,0x0,8
tick,0x7ffdf681f424,98502118,0,0x0,8
tick,0x7ffdf681f424,98503997,0,0x0,8
tick,0x7ffdf681f424,98506104,0,0x0,8
tick,0x7ffdf681f424,98508090,0,0x0,8
tick,0x7ffdf681f424,98510089,0,0x0,8
tick,0x7ffdf681f424,98512049,0,0x0,8
tick,0x7ffdf681f424,98514088,0,0x0,8
tick,0x7ffdf681f424,98516073,0,0x0,8
tick,0x7ffdf681f424,98518150,0,0x0,8
tick,0x7ffdf681f424,98520091,0,0x0,8
tick,0x7ffdf681f424,98522059,0,0x0,8
tick,0x7ffdf681f424,98523992,0,0x0,8
tick,0x7ffdf681f424,98526045,0,0x0,8
tick,0x7ffdf681f424,98528045,0,0x0,8
tick,0x7ffdf681f424,98529927,0,0x0,8
tick,0x7ffdf681f424,98532020,0,0x0,8
tick,0x7ffdf681f424,98534026,0,0x0,8
tick,0x7ffdf681f424,98536051,0,0x0,8
tick,0x7ffdf681f424,98538025,0,0x0,8
tick,0x7ffdf681f424,98540112,0,0x0,8
tick,0x7ffdf681f424,98542030,0,0x0,8
tick,0x7ffdf681f424,98543999,0,0x0,8
tick,0x7ffdf681f424,98546016,0,0x0,8
tick,0x7ffdf681f424,98547987,0,0x0,8
tick,0x7ffdf681f424,98549979,0,0x0,8
tick,0x7ffdf681f424,98551981,0,0x0,8
tick,0x7ffdf681f424,98553866,0,0x0,8
tick,0x7ffdf681f424,98555968,0,0x0,8
tick,0x7ffdf681f424,98557959,0,0x0,8
tick,0x7ffdf681f424,98559959,0,0x0,8
tick,0x7ffdf681f424,98561940,0,0x0,8
tick,0x7ffdf681f424,98563959,0,0x0,8
tick,0x7ffdf681f424,98565941,0,0x0,8
tick,0x7ffdf681f424,98567940,0,0x0,8
tick,0x7ffdf681f424,98569924,0,0x0,8
tick,0x7ffdf681f424,98571924,0,0x0,8
tick,0x7ffdf681f424,98573913,0,0x0,8
tick,0x7ffdf681f424,98575913,0,0x0,8
tick,0x7ffdf681f424,98577910,0,0x0,8
tick,0x7ffdf681f424,98579902,0,0x0,8
tick,0x7ffdf681f424,98581894,0,0x0,8
tick,0x7ffdf681f424,98584001,0,0x0,8
tick,0x7ffdf681f424,98585914,0,0x0,8
tick,0x7ffdf681f424,98587876,0,0x0,8
tick,0x7ffdf681f424,98589884,0,0x0,8
tick,0x7ffdf681f424,98591874,0,0x0,8
tick,0x7ffdf681f424,98593765,0,0x0,8
tick,0x7ffdf681f424,98595740,0,0x0,8
tick,0x7ffdf681f424,98597754,0,0x0,8
tick,0x7ffdf681f424,98599855,0,0x0,8
tick,0x7ffdf681f424,98601735,0,0x0,8
tick,0x7ffdf681f424,98603764,0,0x0,8
tick,0x7ffdf681f424,98605892,0,0x0,8
tick,0x7ffdf681f424,98607841,0,0x0,8
tick,0x7ffdf681f424,98609824,0,0x0,8
tick,0x7ffdf681f424,98611807,0,0x0,8
tick,0x7ffdf681f424,98613815,0,0x0,8
tick,0x7ffdf681f424,98615810,0,0x0,8
tick,0x7ffdf681f424,98617838,0,0x0,8
tick,0x7ffdf681f424,98619796,0,0x0,8
tick,0x7ffdf681f424,98621788,0,0x0,8
tick,0x7ffdf681f424,98623805,0,0x0,8
tick,0x7ffdf681f424,98625784,0,0x0,8
tick,0x7ffdf681f424,98627875,0,0x0,8
tick,0x7ffdf681f424,98629794,0,0x0,8
tick,0x7ffdf681f424,98631764,0,0x0,8
tick,0x7ffdf681f424,98633763,0,0x0,8
tick,0x7ffdf681f424,98635753,0,0x0,8
tick,0x7ffdf681f424,98637749,0,0x0,8
tick,0x7ffdf681f424,98639743,0,0x0,8
tick,0x7ffdf681f424,98641754,0,0x0,8
tick,0x7ffdf681f424,98643732,0,0x0,8
tick,0x7ffdf681f424,98645617,0,0x0,8
tick,0x7ffdf681f424,98647726,0,0x0,8
tick,0x7ffdf681f424,98649801,0,0x0,8
tick,0x7ffdf681f424,98651726,0,0x0,8
tick,0x7ffdf681f424,98653713,0,0x0,8
tick,0x7ffdf681f424,98655706,0,0x0,8
tick,0x7ffdf681f424,98657701,0,0x0,8
tick,0x7ffdf681f424,98659689,0,0x0,8
tick,0x7ffdf681f424,98661690,0,0x0,8
tick,0x7ffdf681f424,98663678,0,0x0,8
tick,0x7ffdf681f424,98665673,0,0x0,8
tick,0x7ffdf681f424,98667667,0,0x0,8
tick,0x7ffdf681f424,98669664,0,0x0,8
tick,0x7ffdf681f424,98671730,0,0x0,8
tick,0x7ffdf681f424,98673682,0,0x0,8
tick,0x7ffdf681f424,98675641,0,0x0,8
tick,0x7ffdf681f424,98677551,0,0x0,8
tick,0x7ffdf681f424,98679639,0,0x0,8
tick,0x7ffdf681f424,98681632,0,0x0,8
tick,0x7ffdf681f424,98683625,0,0x0,8
tick,0x7ffdf681f424,98685613,0,0x0,8
tick,0x7ffdf681f424,98687506,0,0x0,8
tick,0x7ffdf681f424,98689609,0,0x0,8
tick,0x7ffdf681f424,98691611,0,0x0,8
tick,0x7ffdf681f424,98693605,0,0x0,8
tick,0x7ffdf681f424,98695445,0,0x0,8
tick,0x7ffdf681f424,98697588,0,0x0,8
tick,0x7ffdf681f424,98699610,0,0x0,8
tick,0x7ffdf681f424,98701489,0,0x0,8
tick,0x7ffdf681f424,98703572,0,0x0,8
tick,0x7ffdf681f424,98705576,0,0x0,8
tick,0x7ffdf681f424,98707561,0,0x0,8
tick,0x7ffdf681f424,98709554,0,0x0,8
tick,0x7ffdf681f424,98711554,0,0x0,8
tick,0x7ffdf681f424,98713548,0,0x0,8
tick,0x7ffdf681f424,98715545,0,0x0,8
tick,0x7ffdf681f424,98717550,0,0x0,8
tick,0x7ffdf681f424,98719533,0,0x0,8
tick,0x7ffdf681f424,98721531,0,0x0,8
tick,0x7ffdf681f424,98723519,0,0x0,8
tick,0x7ffdf681f424,98725513,0,0x0,8
tick,0x7ffdf681f424,98727503,0,0x0,8
tick,0x7ffdf681f424,98729515,0,0x0,8
tick,0x7ffdf681f424,98731497,0,0x0,8
tick,0x7ffdf681f424,98733518,0,0x0,8
tick,0x7ffdf681f424,98735487,0,0x0,8
tick,0x7ffdf681f424,98737380,0,0x0,8
tick,0x7ffdf681f424,98739494,0,0x0,8
tick,0x7ffdf681f424,98741474,0,0x0,8
tick,0x7ffdf681f424,98743472,0,0x0,8
tick,0x7ffdf681f424,98745417,0,0x0,8
tick,0x7ffdf681f424,98747466,0,0x0,8
tick,0x7ffdf681f424,98749462,0,0x0,8
tick,0x7ffdf681f424,98751458,0,0x0,8
tick,0x7ffdf681f424,98753329,0,0x0,8
tick,0x7ffdf681f424,98755379,0,0x0,8
tick,0x7ffdf681f424,98757434,0,0x0,8
tick,0x7ffdf681f424,98759493,0,0x0,8
tick,0x7ffdf681f424,98761448,0,0x0,8
tick,0x7ffdf681f424,98763303,0,0x0,8
tick,0x7ffdf681f424,98765414,0,0x0,8
tick,0x7ffdf681f424,98767401,0,0x0,8
tick,0x7ffdf681f424,98769399,0,0x0,8
tick,0x7ffdf681f424,98771282,0,0x0,8
tick,0x7ffdf681f424,98773382,0,0x0,8
tick,0x7ffdf681f424,98775378,0,0x0,8
tick,0x7ffdf681f424,98777379,0,0x0,8
tick,0x7ffdf681f424,98779364,0,0x0,8
tick,0x7ffdf681f424,98781367,0,0x0,8
tick,0x7ffdf681f424,98783395,0,0x0,8
tick,0x7ffdf681f424,98785348,0,0x0,8
tick,0x7ffdf681f424,98787298,0,0x0,8
tick,0x7ffdf681f424,98789343,0,0x0,8
tick,0x7ffdf681f424,98791337,0,0x0,8
tick,0x7ffdf681f424,98793332,0,0x0,8
tick,0x7ffdf681f424,98795340,0,0x0,8
tick,0x7ffdf681f424,98797321,0,0x0,8
tick,0x7ffdf681f424,98799317,0,0x0,8
tick,0x7ffdf681f424,98801312,0,0x0,8
tick,0x7ffdf681f424,98803300,0,0x0,8
tick,0x7ffdf681f424,98805337,0,0x0,8
tick,0x7ffdf681f424,98807298,0,0x0,8
tick,0x7ffdf681f424,98809293,0,0x0,8
tick,0x7ffdf681f424,98811284,0,0x0,8
tick,0x7ffdf681f424,98813276,0,0x0,8
tick,0x7ffdf681f424,98815277,0,0x0,8
tick,0x7ffdf681f424,98817268,0,0x0,8
tick,0x7ffdf681f424,98819262,0,0x0,8
tick,0x7ffdf681f424,98821257,0,0x0,8
tick,0x7ffdf681f424,98823252,0,0x0,8
tick,0x7ffdf681f424,98825288,0,0x0,8
tick,0x7ffdf681f424,98827269,0,0x0,8
tick,0x7ffdf681f424,98829215,0,0x0,8
tick,0x7ffdf681f424,98831189,0,0x0,8
tick,0x7ffdf681f424,98833227,0,0x0,8
tick,0x7ffdf681f424,98835215,0,0x0,8
tick,0x7ffdf681f424,98837112,0,0x0,8
tick,0x7ffdf681f424,98839212,0,0x0,8
tick,0x7ffdf681f424,98841207,0,0x0,8
tick,0x7ffdf681f424,98843212,0,0x0,8
tick,0x7ffdf681f424,98845190,0,0x0,8
tick,0x7ffdf681f424,98847193,0,0x0,8
tick,0x7ffdf681f424,98849196,0,0x0,8
tick,0x7ffdf681f424,98851189,0,0x0,8
tick,0x7ffdf681f424,98853168,0,0x0,8
tick,0x7ffdf681f424,98855166,0,0x0,8
tick,0x7ffdf681f424,98857161,0,0x0,8
tick,0x7ffdf681f424,98859157,0,0x0,8
tick,0x7ffdf681f424,98861150,0,0x0,8
tick,0x7ffdf681f424,98863174,0,0x0,8
tick,0x7ffdf681f424,98865134,0,0x0,8
tick,0x7ffdf681f424,98867135,0,0x0,8
tick,0x7ffdf681f424,98869168,0,0x0,8
tick,0x7ffdf681f424,98871153,0,0x0,8
tick,0x7ffdf681f424,98873125,0,0x0,8
tick,0x7ffdf681f424,98875116,0,0x0,8
tick,0x7ffdf681f424,98877106,0,0x0,8
tick,0x7ffdf681f424,98878994,0,0x0,8
tick,0x7ffdf681f424,98881097,0,0x0,8
tick,0x7ffdf681f424,98883097,0,0x0,8
tick,0x7ffdf681f424,98885087,0,0x0,8
tick,0x7ffdf681f424,98887092,0,0x0,8
tick,0x7ffdf681f424,98889076,0,0x0,8
tick,0x7ffdf681f424,98891136,0,0x0,8
tick,0x7ffdf681f424,98893097,0,0x0,8
tick,0x7ffdf681f424,98895061,0,0x0,8
tick,0x7ffdf681f424,98897070,0,0x0,8
tick,0x7ffdf681f424,98899049,0,0x0,8
tick,0x7ffdf681f424,98901047,0,0x0,8
tick,0x7ffdf681f424,98902953,0,0x0,8
tick,0x7ffdf681f424,98905049,0,0x0,8
tick,0x7ffdf681f424,98906920,0,0x0,8
tick,0x7ffdf681f424,98908988,0,0x0,8
tick,0x7ffdf681f424,98911029,0,0x0,8
tick,0x7ffdf681f424,98913018,0,0x0,8
tick,0x7ffdf681f424,98914911,0,0x0,8
tick,0x7ffdf681f424,98917029,0,0x0,8
tick,0x7ffdf681f424,98919011,0,0x0,8
tick,0x7ffdf681f424,98920991,0,0x0,8
tick,0x7ffdf681f424,98922984,0,0x0,8
tick,0x7ffdf681f424,98924989,0,0x0,8
tick,0x7ffdf681f424,98926974,0,0x0,8
tick,0x7ffdf681f424,98928860,0,0x0,8
tick,0x7ffdf681f424,98930970,0,0x0,8
tick,0x7ffdf681f424,98932956,0,0x0,8
tick,0x7ffdf681f424,98934959,0,0x0,8
tick,0x7ffdf681f424,98936967,0,0x0,8
tick,0x7ffdf681f424,98938840,0,0x0,8
tick,0x7ffdf681f424,98940952,0,0x0,8
tick,0x7ffdf681f424,98942935,0,0x0,8
tick,0x7ffdf681f424,98944956,0,0x0,8
tick,0x7ffdf681f424,98946925,0,0x0,8
tick,0x7ffdf681f424,98948915,0,0x0,8
tick,0x7ffdf681f424,98950910,0,0x0,8
tick,0x7ffdf681f424,98952934,0,0x0,8
tick,0x7ffdf681f424,98954901,0,0x0,8
tick,0x7ffdf681f424,98956923,0,0x0,8
tick,0x7ffdf681f424,98958917,0,0x0,8
tick,0x7ffdf681f424,98960893,0,0x0,8
tick,0x7ffdf681f424,98962883,0,0x0,8
tick,0x7ffdf681f424,98964871,0,0x0,8
tick,0x7ffdf681f424,98966871,0,0x0,8
tick,0x7ffdf681f424,98968865,0,0x0,8
tick,0x7ffdf681f424,98970749,0,0x0,8
tick,0x7ffdf681f424,98972861,0,0x0,8
tick,0x7ffdf681f424,98974850,0,0x0,8
tick,0x7ffdf681f424,98976843,0,0x0,8
tick,0x7ffdf681f424,98978778,0,0x0,8
tick,0x7ffdf681f424,98980870,0,0x0,8
tick,0x7ffdf681f424,98982826,0,0x0,8
tick,0x7ffdf681f424,98984727,0,0x0,8
tick,0x7ffdf681f424,98986815,0,0x0,8
tick,0x7ffdf681f424,98988809,0,0x0,8
tick,0x7ffdf681f424,98990809,0,0x0,8
tick,0x7ffdf681f424,98992800,0,0x0,8
tick,0x7ffdf681f424,98994793,0,0x0,8
tick,0x7ffdf681f424,98996679,0,0x0,8
tick,0x7ffdf681f424,98998675,0,0x0,8
tick,0x7ffdf681f424,99000803,0,0x0,8
tick,0x7ffdf681f424,99002817,0,0x0,8
tick,0x7ffdf681f424,99004772,0,0x0,8
tick,0x7ffdf681f424,99006777,0,0x0,8
tick,0x7ffdf681f424,99008758,0,0x0,8
tick,0x7ffdf681f424,99010751,0,0x0,8
tick,0x7ffdf681f424,99012745,0,0x0,8
tick,0x7ffdf681f424,99014739,0,0x0,8
tick,0x7ffdf681f424,99016734,0,0x0,8
tick,0x7ffdf681f424,99018728,0,0x0,8
tick,0x7ffdf681f424,99020615,0,0x0,8
tick,0x7ffdf681f424,99022817,0,0x0,8
tick,0x7ffdf681f424,99024759,0,0x0,8
tick,0x7ffdf681f424,99026740,0,0x0,8
tick,0x7ffdf681f424,99028710,0,0x0,8
tick,0x7ffdf681f424,99030700,0,0x0,8
tick,0x7ffdf681f424,99032699,0,0x0,8
tick,0x7ffdf681f424,99034688,0,0x0,8
tick,0x7ffdf681f424,99036679,0,0x0,8
tick,0x7ffdf681f424,99038679,0,0x0,8
tick,0x7ffdf681f424,99040670,0,0x0,8
tick,0x7ffdf681f424,99042673,0,0x0,8
tick,0x7ffdf681f424,99044658,0,0x0,8
tick,0x7ffdf681f424,99046563,0,0x0,8
tick,0x7ffdf681f424,99048650,0,0x0,8
tick,0x7ffdf681f424,99050648,0,0x0,8
tick,0x7ffdf681f424,99052638,0,0x0,8
tick,0x7ffdf681f424,99054639,0,0x0,8
tick,0x7ffdf681f424,99056622,0,0x0,8
tick,0x7ffdf681f424,99058638,0,0x0,8
tick,0x7ffdf681f424,99060512,0,0x0,8
tick,0x7ffdf681f424,99062557,0,0x0,8
tick,0x7ffdf681f424,99064613,0,0x0,8
tick,0x7ffdf681f424,99066663,0,0x0,8
tick,0x7ffdf681f424,99068641,0,0x0,8
tick,0x7ffdf681f424,99070479,0,0x0,8
tick,0x7ffdf681f424,99072589,0,0x0,8
tick,0x7ffdf681f424,99074580,0,0x0,8
tick,0x7ffdf681f424,99076572,0,0x0,8
tick,0x7ffdf681f424,99078569,0,0x0,8
tick,0x7ffdf681f424,99080568,0,0x0,8
tick,0x7ffdf681f424,99082558,0,0x0,8
tick,0x7ffdf681f424,99084553,0,0x0,8
tick,0x7ffdf681f424,99086554,0,0x0,8
tick,0x7ffdf681f424,99088615,0,0x0,8
tick,0x7ffdf681f424,99090554,0,0x0,8
tick,0x7ffdf681f424,99092528,0,0x0,8
tick,0x7ffdf681f424,99094532,0,0x0,8
tick,0x7ffdf681f424,99096523,0,0x0,8
tick,0x7ffdf681f424,99098516,0,0x0,8
tick,0x7ffdf681f424,99100540,0,0x0,8
tick,0x7ffdf681f424,99102509,0,0x0,8
tick,0x7ffdf681f424,99104494,0,0x0,8
tick,0x7ffdf681f424,99106499,0,0x0,8
tick,0x7ffdf681f424,99108528,0,0x0,8
tick,0x7ffdf681f424,99110566,0,0x0,8
tick,0x7ffdf681f424,99112369,0,0x0,8
tick,0x7ffdf681f424,99114498,0,0x0,8
tick,0x7ffdf681f424,99116474,0,0x0,8
tick,0x7ffdf681f424,99118463,0,0x0,8
tick,0x7ffdf681f424,99120468,0,0x0,8
tick,0x7ffdf681f424,99122468,0,0x0,8
tick,0x7ffdf681f424,99124330,0,0x0,8
tick,0x7ffdf681f424,99126439,0,0x0,8
tick,0x7ffdf681f424,99128439,0,0x0,8
tick,0x7ffdf681f424,99130436,0,0x0,8
tick,0x7ffdf681f424,99132522,0,0x0,8
tick,0x7ffdf681f424,99134466,0,0x0,8
tick,0x7ffdf681f424,99136437,0,0x0,8
tick,0x7ffdf681f424,99138315,0,0x0,8
tick,0x7ffdf681f424,99140404,0,0x0,8
tick,0x7ffdf681f424,99142409,0,0x0,8
tick,0x7ffdf681f424,99144394,0,0x0,8
tick,0x7ffdf681f424,99146388,0,0x0,8
tick,0x7ffdf681f424,99148385,0,0x0,8
tick,0x7ffdf681f424,99150378,0,0x0,8
tick,0x7ffdf681f424,99152375,0,0x0,8
tick,0x7ffdf681f424,99154450,0,0x0,8
tick,0x7ffdf681f424,99156380,0,0x0,8
tick,0x7ffdf681f424,99158359,0,0x0,8
tick,0x7ffdf681f424,99160354,0,0x0,8
tick,0x7ffdf681f424,99162232,0,0x0,8
tick,0x7ffdf681f424,99164337,0,0x0,8
tick,0x7ffdf681f424,99166333,0,0x0,8
tick,0x7ffdf681f424,99168329,0,0x0,8
tick,0x7ffdf681f424,99170343,0,0x0,8
tick,0x7ffdf681f424,99172319,0,0x0,8
tick,0x7ffdf681f424,99174307,0,0x0,8
tick,0x7ffdf681f424,99176337,0,0x0,8
tick,0x7ffdf681f424,99178330,0,0x0,8
tick,0x7ffdf681f424,99180297,0,0x0,8
tick,0x7ffdf681f424,99182303,0,0x0,8
tick,0x7ffdf681f424,99184288,0,0x0,8
tick,0x7ffdf681f424,99186281,0,0x0,8
tick,0x7ffdf681f424,99188326,0,0x0,8
tick,0x7ffdf681f424,99190300,0,0x0,8
tick,0x7ffdf681f424,99192267,0,0x0,8
tick,0x7ffdf681f424,99194260,0,0x0,8
tick,0x7ffdf681f424,99196256,0,0x0,8
tick,0x7ffdf681f424,99198253,0,0x0,8
tick,0x7ffdf681f424,99200257,0,0x0,8
tick,0x7ffdf681f424,99202238,0,0x0,8
tick,0x7ffdf681f424,99204166,0,0x0,8
tick,0x7ffdf681f424,99206228,0,0x0,8
tick,0x7ffdf681f424,99208223,0,0x0,8
tick,0x7ffdf681f424,99210120,0,0x0,8
tick,0x7ffdf681f424,99212163,0,0x0,8
tick,0x7ffdf681f424,99214208,0,0x0,8
tick,0x7ffdf681f424,99216119,0,0x0,8
tick,0x7ffdf681f424,99218202,0,0x0,8
tick,0x7ffdf681f424,99220183,0,0x0,8
tick,0x7ffdf681f424,99222182,0,0x0,8
tick,0x7ffdf681f424,99224181,0,0x0,8
tick,0x7ffdf681f424,99226180,0,0x0,8
tick,0x7ffdf681f424,99228172,0,0x0,8
tick,0x7ffdf681f424,99230167,0,0x0,8
tick,0x7ffdf681f424,99232158,0,0x0,8
tick,0x7ffdf681f424,99234153,0,0x0,8
tick,0x7ffdf681f424,99236148,0,0x0,8
tick,0x7ffdf681f424,99238149,0,0x0,8
tick,0x7ffdf681f424,99240140,0,0x0,8
tick,0x7ffdf681f424,99242140,0,0x0,8
tick,0x7ffdf681f424,99244141,0,0x0,8
tick,0x7ffdf681f424,99246134,0,0x0,8
tick,0x7ffdf681f424,99248121,0,0x0,8
tick,0x7ffdf681f424,99250111,0,0x0,8
tick,0x7ffdf681f424,99252112,0,0x0,8
tick,0x7ffdf681f424,99253992,0,0x0,8
tick,0x7ffdf681f424,99256097,0,0x0,8
tick,0x7ffdf681f424,99258094,0,0x0,8
tick,0x7ffdf681f424,99260082,0,0x0,8
tick,0x7ffdf681f424,99262086,0,0x0,8
tick,0x7ffdf681f424,99264156,0,0x0,8
tick,0x7ffdf681f424,99266098,0,0x0,8
tick,0x7ffdf681f424,99268062,0,0x0,8
tick,0x7ffdf681f424,99270062,0,0x0,8
tick,0x7ffdf681f424,99272084,0,0x0,8
tick,0x7ffdf681f424,99274046,0,0x0,8
tick,0x7ffdf681f424,99276048,0,0x0,8
tick,0x7ffdf681f424,99278036,0,0x0,8
tick,0x7ffdf681f424,99280040,0,0x0,8
tick,0x7ffdf681f424,99282025,0,0x0,8
tick,0x7ffdf681f424,99284016,0,0x0,8
tick,0x7ffdf681f424,99286019,0,0x0,8
tick,0x7ffdf681f424,99288028,0,0x0,8
tick,0x7ffdf681f424,99290006,0,0x0,8
tick,0x7ffdf681f424,99291918,0,0x0,8
tick,0x7ffdf681f424,99293997,0,0x0,8
tick,0x7ffdf681f424,99295879,0,0x0,8
tick,0x7ffdf681f424,99297982,0,0x0,8
tick,0x7ffdf681f424,99299989,0,0x0,8
tick,0x7ffdf681f424,99302007,0,0x0,8
tick,0x7ffdf681f424,99303851,0,0x0,8
tick,0x7ffdf681f424,99305847,0,0x0,8
tick,0x7ffdf681f424,99308033,0,0x0,8
tick,0x7ffdf681f424,99309983,0,0x0,8
tick,0x7ffdf681f424,99311953,0,0x0,8
tick,0x7ffdf681f424,99313949,0,0x0,8
tick,0x7ffdf681f424,99315927,0,0x0,8
tick,0x7ffdf681f424,99317933,0,0x0,8
tick,0x7ffdf681f424,99319926,0,0x0,8
tick,0x7ffdf681f424,99321923,0,0x0,8
tick,0x7ffdf681f424,99323914,0,0x0,8
tick,0x7ffdf681f424,99325911,0,0x0,8
tick,0x7ffdf681f424,99327903,0,0x0,8
tick,0x7ffdf681f424,99329926,0,0x0,8
tick,0x7ffdf681f424,99331917,0,0x0,8
tick,0x7ffdf681f424,99333887,0,0x0,8
tick,0x7ffdf681f424,99335887,0,0x0,8
tick,0x7ffdf681f424,99337897,0,0x0,8
tick,0x7ffdf681f424,99339870,0,0x0,8
tick,0x7ffdf681f424,99341775,0,0x0,8
tick,0x7ffdf681f424,99343863,0,0x0,8
tick,0x7ffdf681f424,99345743,0,0x0,8
tick,0x7ffdf681f424,99347852,0,0x0,8
tick,0x7ffdf681f424,99349854,0,0x0,8
tick,0x7ffdf681f424,99351842,0,0x0,8
tick,0x7ffdf681f424,99353901,0,0x0,8
tick,0x7ffdf681f424,99355825,0,0x0,8
tick,0x7ffdf681f424,99357837,0,0x0,8
tick,0x7ffdf681f424,99359747,0,0x0,8
tick,0x7ffdf681f424,99361818,0,0x0,8
tick,0x7ffdf681f424,99363727,0,0x0,8
tick,0x7ffdf681f424,99365810,0,0x0,8
tick,0x7ffdf681f424,99367687,0,0x0,8
tick,0x7ffdf681f424,99369682,0,0x0,8
tick,0x7ffdf681f424,99371790,0,0x0,8
tick,0x7ffdf681f424,99373822,0,0x0,8
tick,0x7ffdf681f424,99375804,0,0x0,8
tick,0x7ffdf681f424,99377769,0,0x0,8
tick,0x7ffdf681f424,99379829,0,0x0,8
tick,0x7ffdf681f424,99381762,0,0x0,8
tick,0x7ffdf681f424,99383755,0,0x0,8
tick,0x7ffdf681f424,99385753,0,0x0,8
tick,0x7ffdf681f424,99387740,0,0x0,8
tick,0x7ffdf681f424,99389736,0,0x0,8
tick,0x7ffdf681f424,99391732,0,0x0,8
tick,0x7ffdf681f424,99393726,0,0x0,8
tick,0x7ffdf681f424,99395608,0,0x0,8
tick,0x7ffdf681f424,99397721,0,0x0,8
tick,0x7ffdf681f424,99399714,0,0x0,8
tick,0x7ffdf681f424,99401709,0,0x0,8
tick,0x7ffdf681f424,99403707,0,0x0,8
tick,0x7ffdf681f424,99405691,0,0x0,8
tick,0x7ffdf681f424,99407691,0,0x0,8
tick,0x7ffdf681f424,99409683,0,0x0,8
tick,0x7ffdf681f424,99411676,0,0x0,8
tick,0x7ffdf681f424,99413678,0,0x0,8
tick,0x7ffdf681f424,99415670,0,0x0,8
tick,0x7ffdf681f424,99417705,0,0x0,8
tick,0x7ffdf681f424,99419683,0,0x0,8
tick,0x7ffdf681f424,99421644,0,0x0,8
tick,0x7ffdf681f424,99423654,0,0x0,8
tick,0x7ffdf681f424,99425643,0,0x0,8
tick,0x7ffdf681f424,99427636,0,0x0,8
tick,0x7ffdf681f424,99429624,0,0x0,8
tick,0x7ffdf681f424,99431631,0,0x0,8
tick,0x7ffdf681f424,99433620,0,0x0,8
tick,0x7ffdf681f424,99435646,0,0x0,8
tick,0x7ffdf681f424,99437517,0,0x0,8
tick,0x7ffdf681f424,99439666,0,0x0,8
tick,0x7ffdf681f424,99441633,0,0x0,8
tick,0x7ffdf681f424,99443591,0,0x0,8
tick,0x7ffdf681f424,99445498,0,0x0,8
tick,0x7ffdf681f424,99447592,0,0x0,8
tick,0x7ffdf681f424,99449585,0,0x0,8
tick,0x7ffdf681f424,99451569,0,0x0,8
tick,0x7ffdf681f424,99453570,0,0x0,8
tick,0x7ffdf681f424,99455561,0,0x0,8
tick,0x7ffdf681f424,99457560,0,0x0,8
tick,0x7ffdf681f424,99459557,0,0x0,8
tick,0x7ffdf681f424,99461549,0,0x0,8
tick,0x7ffdf681f424,99463573,0,0x0,8
tick,0x7ffdf681f424,99465530,0,0x0,8
tick,0x7ffdf681f424,99467543,0,0x0,8
tick,0x7ffdf681f424,99469518,0,0x0,8
tick,0x7ffdf681f424,99471517,0,0x0,8
tick,0x7ffdf681f424,99473510,0,0x0,8
tick,0x7ffdf681f424,99475505,0,0x0,8
tick,0x7ffdf681f424,99477506,0,0x0,8
tick,0x7ffdf681f424,99479499,0,0x0,8
tick,0x7ffdf681f424,99481491,0,0x0,8
tick,0x7ffdf681f424,99483580,0,0x0,8
tick,0x7ffdf681f424,99485510,0,0x0,8
tick,0x7ffdf681f424,99487367,0,0x0,8
tick,0x7ffdf681f424,99489475,0,0x0,8
tick,0x7ffdf681f424,99491465,0,0x0,8
tick,0x7ffdf681f424,99493464,0,0x0,8
tick,0x7ffdf681f424,99495455,0,0x0,8
tick,0x7ffdf681f424,99497450,0,0x0,8
tick,0x7ffdf681f424,99499443,0,0x0,8
tick,0x7ffdf681f424,99501439,0,0x0,8
tick,0x7ffdf681f424,99503434,0,0x0,8
tick,0x7ffdf681f424,99505488,0,0x0,8
tick,0x7ffdf681f424,99507453,0,0x0,8
tick,0x7ffdf681f424,99509421,0,0x0,8
tick,0x7ffdf681f424,99511415,0,0x0,8
tick,0x7ffdf681f424,99513406,0,0x0,8
tick,0x7ffdf681f424,99515431,0,0x0,8
tick,0x7ffdf681f424,99517305,0,0x0,8
tick,0x7ffdf681f424,99519396,0,0x0,8
tick,0x7ffdf681f424,99521277,0,0x0,8
tick,0x7ffdf681f424,99523271,0,0x0,8
tick,0x7ffdf681f424,99525380,0,0x0,8
tick,0x7ffdf681f424,99527469,0,0x0,8
tick,0x7ffdf681f424,99529289,0,0x0,8
tick,0x7ffdf681f424,99531359,0,0x0,8
tick,0x7ffdf681f424,99533361,0,0x0,8
tick,0x7ffdf681f424,99535357,0,0x0,8
tick,0x7ffdf681f424,99537232,0,0x0,8
tick,0x7ffdf681f424,99539361,0,0x0,8
tick,0x7ffdf681f424,99541335,0,0x0,8
tick,0x7ffdf681f424,99543327,0,0x0,8
tick,0x7ffdf681f424,99545352,0,0x0,8
tick,0x7ffdf681f424,99547314,0,0x0,8
tick,0x7ffdf681f424,99549352,0,0x0,8
tick,0x7ffdf681f424,99551365,0,0x0,8
tick,0x7ffdf681f424,99553299,0,0x0,8
tick,0x7ffdf681f424,99555299,0,0x0,8
tick,0x7ffdf681f424,99557289,0,0x0,8
tick,0x7ffdf681f424,99559283,0,0x0,8
tick,0x7ffdf681f424,99561278,0,0x0,8
tick,0x7ffdf681f424,99563272,0,0x0,8
tick,0x7ffdf681f424,99565262,0,0x0,8
tick,0x7ffdf681f424,99567276,0,0x0,8
tick,0x7ffdf681f424,99569256,0,0x0,8
tick,0x7ffdf681f424,99571255,0,0x0,8
tick,0x7ffdf681f424,99573266,0,0x0,8
tick,0x7ffdf681f424,99575242,0,0x0,8
tick,0x7ffdf681f424,99577248,0,0x0,8
tick,0x7ffdf681f424,99579122,0,0x0,8
tick,0x7ffdf681f424,99581228,0,0x0,8
tick,0x7ffdf681f424,99583215,0,0x0,8
tick,0x7ffdf681f424,99585208,0,0x0,8
tick,0x7ffdf681f424,99587210,0,0x0,8
tick,0x7ffdf681f424,99589205,0,0x0,8
tick,0x7ffdf681f424,99591198,0,0x0,8
tick,0x7ffdf681f424,99593274,0,0x0,8
tick,0x7ffdf681f424,99595214,0,0x0,8
tick,0x7ffdf681f424,99597194,0,0x0,8
tick,0x7ffdf681f424,99599095,0,0x0,8
tick,0x7ffdf681f424,99601195,0,0x0,8
tick,0x7ffdf681f424,99603164,0,0x0,8
tick,0x7ffdf681f424,99605063,0,0x0,8
tick,0x7ffdf681f424,99607158,0,0x0,8
tick,0x7ffdf681f424,99609151,0,0x0,8
tick,0x7ffdf681f424,99611142,0,0x0,8
tick,0x7ffdf681f424,99613143,0,0x0,8
tick,0x7ffdf681f424,99615139,0,0x0,8
tick,0x7ffdf681f424,99617149,0,0x0,8
tick,0x7ffdf681f424,99619123,0,0x0,8
tick,0x7ffdf681f424,99621142,0,0x0,8
tick,0x7ffdf681f424,99623130,0,0x0,8
tick,0x7ffdf681f424,99625102,0,0x0,8
tick,0x7ffdf681f424,99627102,0,0x0,8
tick,0x7ffdf681f424,99628982,0,0x0,8
tick,0x7ffdf681f424,99631096,0,0x0,8
tick,0x7ffdf681f424,99633090,0,0x0,8
tick,0x7ffdf681f424,99635079,0,0x0,8
tick,0x7ffdf681f424,99637205,0,0x0,8
tick,0x7ffdf681f424,99639117,0,0x0,8
tick,0x7ffdf681f424,99641066,0,0x0,8
tick,0x7ffdf681f424,99643065,0,0x0,8
tick,0x7ffdf681f424,99645053,0,0x0,8
tick,0x7ffdf681f424,99646940,0,0x0,8
tick,0x7ffdf681f424,99649057,0,0x0,8
tick,0x7ffdf681f424,99651041,0,0x0,8
tick,0x7ffdf681f424,99653031,0,0x0,8
tick,0x7ffdf681f424,99654938,0,0x0,8
tick,0x7ffdf681f424,99657032,0,0x0,8
tick,0x7ffdf681f424,99658946,0,0x0,8
tick,0x7ffdf681f424,99661052,0,0x0,8
tick,0x7ffdf681f424,99663001,0,0x0,8
tick,0x7ffdf681f424,99664986,0,0x0,8
tick,0x7ffdf681f424,99666993,0,0x0,8
tick,0x7ffdf681f424,99668994,0,0x0,8
tick,0x7ffdf681f424,99670875,0,0x0,8
tick,0x7ffdf681f424,99672986,0,0x0,8
tick,0x7ffdf681f424,99674865,0,0x0,8
tick,0x7ffdf681f424,99676861,0,0x0,8
tick,0x7ffdf681f424,99678913,0,0x0,8
tick,0x7ffdf681f424,99680969,0,0x0,8
tick,0x7ffdf681f424,99682968,0,0x0,8
tick,0x7ffdf681f424,99684949,0,0x0,8
tick,0x7ffdf681f424,99686952,0,0x0,8
tick,0x7ffdf681f424,99688937,0,0x0,8
tick,0x7ffdf681f424,99690932,0,0x0,8
tick,0x7ffdf681f424,99692928,0,0x0,8
tick,0x7ffdf681f424,99694923,0,0x0,8
tick,0x7ffdf681f424,99696918,0,0x0,8
tick,0x7ffdf681f424,99698916,0,0x0,8
tick,0x7ffdf681f424,99700909,0,0x0,8
tick,0x7ffdf681f424,99702891,0,0x0,8
tick,0x7ffdf681f424,99704925,0,0x0,8
tick,0x7ffdf681f424,99706886,0,0x0,8
tick,0x7ffdf681f424,99708910,0,0x0,8
tick,0x7ffdf681f424,99710878,0,0x0,8
tick,0x7ffdf681f424,99712873,0,0x0,8
tick,0x7ffdf681f424,99714862,0,0x0,8
tick,0x7ffdf681f424,99716863,0,0x0,8
tick,0x7ffdf681f424,99718863,0,0x0,8
tick,0x7ffdf681f424,99720743,0,0x0,8
tick,0x7ffdf681f424,99722859,0,0x0,8
tick,0x7ffdf681f424,99724831,0,0x0,8
tick,0x7ffdf681f424,99726852,0,0x0,8
tick,0x7ffdf681f424,99728837,0,0x0,8
tick,0x7ffdf681f424,99730895,0,0x0,8
tick,0x7ffdf681f424,99732823,0,0x0,8
tick,0x7ffdf681f424,99734816,0,0x0,8
tick,0x7ffdf681f424,99736807,0,0x0,8
tick,0x7ffdf681f424,99738802,0,0x0,8
tick,0x7ffdf681f424,99740821,0,0x0,8
tick,0x7ffdf681f424,99742793,0,0x0,8
tick,0x7ffdf681f424,99744787,0,0x0,8
tick,0x7ffdf681f424,99746776,0,0x0,8
tick,0x7ffdf681f424,99748805,0,0x0,8
tick,0x7ffdf681f424,99750771,0,0x0,8
tick,0x7ffdf681f424,99752685,0,0x0,8
tick,0x7ffdf681f424,99754763,0,0x0,8
tick,0x7ffdf681f424,99756756,0,0x0,8
tick,0x7ffdf681f424,99758744,0,0x0,8
tick,0x7ffdf681f424,99760633,0,0x0,8
tick,0x7ffdf681f424,99762633,0,0x0,8
tick,0x7ffdf681f424,99764637,0,0x0,8
tick,0x7ffdf681f424,99766766,0,0x0,8
tick,0x7ffdf681f424,99768710,0,0x0,8
tick,0x7ffdf681f424,99770656,0,0x0,8
tick,0x7ffdf681f424,99772717,0,0x0,8
tick,0x7ffdf681f424,99774732,0,0x0,8
tick,0x7ffdf681f424,99776703,0,0x0,8
tick,0x7ffdf681f424,99778697,0,0x0,8
tick,0x7ffdf681f424,99780692,0,0x0,8
tick,0x7ffdf681f424,99782686,0,0x0,8
tick,0x7ffdf681f424,99784681,0,0x0,8
tick,0x7ffdf681f424,99786678,0,0x0,8
tick,0x7ffdf681f424,99788671,0,0x0,8
tick,0x7ffdf681f424,99790707,0,0x0,8
tick,0x7ffdf681f424,99792696,0,0x0,8
tick,0x7ffdf681f424,99794656,0,0x0,8
tick,0x7ffdf681f424,99796655,0,0x0,8
tick,0x7ffdf681f424,99798645,0,0x0,8
tick,0x7ffdf681f424,99800638,0,0x0,8
tick,0x7ffdf681f424,99802631,0,0x0,8
tick,0x7ffdf681f424,99804631,0,0x0,8
tick,0x7ffdf681f424,99806623,0,0x0,8
tick,0x7ffdf681f424,99808617,0,0x0,8
tick,0x7ffdf681f424,99810611,0,0x0,8
tick,0x7ffdf681f424,99812494,0,0x0,8
tick,0x7ffdf681f424,99814631,0,0x0,8
tick,0x7ffdf681f424,99816596,0,0x0,8
tick,0x7ffdf681f424,99818616,0,0x0,8
tick,0x7ffdf681f424,99820583,0,0x0,8
tick,0x7ffdf681f424,99822582,0,0x0,8
tick,0x7ffdf681f424,99824471,0,0x0,8
tick,0x7ffdf681f424,99826565,0,0x0,8
tick,0x7ffdf681f424,99828456,0,0x0,8
tick,0x7ffdf681f424,99830504,0,0x0,8
tick,0x7ffdf681f424,99832558,0,0x0,8
tick,0x7ffdf681f424,99834621,0,0x0,8
tick,0x7ffdf681f424,99836578,0,0x0,8
tick,0x7ffdf681f424,99838428,0,0x0,8
tick,0x7ffdf681f424,99840562,0,0x0,8
tick,0x7ffdf681f424,99842526,0,0x0,8
tick,0x7ffdf681f424,99844550,0,0x0,8
tick,0x7ffdf681f424,99846520,0,0x0,8
tick,0x7ffdf681f424,99848510,0,0x0,8
tick,0x7ffdf681f424,99850479,0,0x0,8
tick,0x7ffdf681f424,99852500,0,0x0,8
tick,0x7ffdf681f424,99854496,0,0x0,8
tick,0x7ffdf681f424,99856494,0,0x0,8
tick,0x7ffdf681f424,99858495,0,0x0,8
tick,0x7ffdf681f424,99860475,0,0x0,8
tick,0x7ffdf681f424,99862424,0,0x0,8
tick,0x7ffdf681f424,99864469,0,0x0,8
tick,0x7ffdf681f424,99866459,0,0x0,8
tick,0x7ffdf681f424,99868449,0,0x0,8
tick,0x7ffdf681f424,99870455,0,0x0,8
tick,0x7ffdf681f424,99872446,0,0x0,8
tick,0x7ffdf681f424,99874442,0,0x0,8
tick,0x7ffdf681f424,99876436,0,0x0,8
tick,0x7ffdf681f424,99878508,0,0x0,8
tick,0x7ffdf681f424,99880460,0,0x0,8
tick,0x7ffdf681f424,99882419,0,0x0,8
tick,0x7ffdf681f424,99884427,0,0x0,8
tick,0x7ffdf681f424,99886414,0,0x0,8
tick,0x7ffdf681f424,99888403,0,0x0,8
tick,0x7ffdf681f424,99890396,0,0x0,8
tick,0x7ffdf681f424,99892396,0,0x0,8
tick,0x7ffdf681f424,99894389,0,0x0,8
tick,0x7ffdf681f424,99896382,0,0x0,8
tick,0x7ffdf681f424,99898374,0,0x0,8
tick,0x7ffdf681f424,99900444,0,0x0,8
tick,0x7ffdf681f424,99902401,0,0x0,8
tick,0x7ffdf681f424,99904308,0,0x0,8
tick,0x7ffdf681f424,99906262,0,0x0,8
tick,0x7ffdf681f424,99908350,0,0x0,8
tick,0x7ffdf681f424,99910346,0,0x0,8
tick,0x7ffdf681f424,99912257,0,0x0,8
tick,0x7ffdf681f424,99914220,0,0x0,8
tick,0x7ffdf681f424,99916333,0,0x0,8
tick,0x7ffdf681f424,99918330,0,0x0,8
tick,0x7ffdf681f424,99920210,0,0x0,8
tick,0x7ffdf681f424,99922383,0,0x0,8
tick,0x7ffdf681f424,99924329,0,0x0,8
tick,0x7ffdf681f424,99926332,0,0x0,8
tick,0x7ffdf681f424,99928303,0,0x0,8
tick,0x7ffdf681f424,99930289,0,0x0,8
tick,0x7ffdf681f424,99932316,0,0x0,8
tick,0x7ffdf681f424,99934278,0,0x0,8
tick,0x7ffdf681f424,99936275,0,0x0,8
tick,0x7ffdf681f424,99938284,0,0x0,8
tick,0x7ffdf681f424,99940265,0,0x0,8
tick,0x7ffdf681f424,99942282,0,0x0,8
tick,0x7ffdf681f424,99944339,0,0x0,8
tick,0x7ffdf681f424,99946280,0,0x0,8
tick,0x7ffdf681f424,99948255,0,0x0,8
tick,0x7ffdf681f424,99950245,0,0x0,8
tick,0x7ffdf681f424,99952233,0,0x0,8
tick,0x7ffdf681f424,99954119,0,0x0,8
tick,0x7ffdf681f424,99956226,0,0x0,8
tick,0x7ffdf681f424,99958219,0,0x0,8
tick,0x7ffdf681f424,99960212,0,0x0,8
tick,0x7ffdf681f424,99962211,0,0x0,8
tick,0x7ffdf681f424,99964204,0,0x0,8
tick,0x7ffdf681f424,99966202,0,0x0,8
tick,0x7ffdf681f424,99968204,0,0x0,8
tick,0x7ffdf681f424,99970217,0,0x0,8
tick,0x7ffdf681f424,99972191,0,0x0,8
tick,0x7ffdf681f424,99974174,0,0x0,8
tick,0x7ffdf681f424,99976170,0,0x0,8
tick,0x7ffdf681f424,99978164,0,0x0,8
tick,0x7ffdf681f424,99980164,0,0x0,8
tick,0x7ffdf681f424,99982048,0,0x0,8
tick,0x7ffdf681f424,99984040,0,0x0,8
tick,0x7ffdf681f424,99986161,0,0x0,8
tick,0x7ffdf681f424,99988142,0,0x0,8
tick,0x7ffdf681f424,99990143,0,0x0,8
tick,0x7ffdf681f424,99992129,0,0x0,8
tick,0x7ffdf681f424,99994125,0,0x0,8
tick,0x7ffdf681f424,99996092,0,0x0,8
tick,0x7ffdf681f424,99998110,0,0x0,8
tick,0x7ffdf681f424,100000105,0,0x0,8
tick,0x7ffdf681f424,100002099,0,0x0,8
tick,0x7ffdf681f424,100003980,0,0x0,8
tick,0x7ffdf681f424,100006089,0,0x0,8
tick,0x7ffdf681f424,100008117,0,0x0,8
tick,0x7ffdf681f424,100010175,0,0x0,8
tick,0x7ffdf681f424,100012159,0,0x0,8
tick,0x7ffdf681f424,100014072,0,0x0,8
tick,0x7ffdf681f424,100016076,0,0x0,8
tick,0x7ffdf681f424,100018055,0,0x0,8
tick,0x7ffdf681f424,100020055,0,0x0,8
tick,0x7ffdf681f424,100022048,0,0x0,8
tick,0x7ffdf681f424,100024046,0,0x0,8
tick,0x7ffdf681f424,100026032,0,0x0,8
tick,0x7ffdf681f424,100028034,0,0x0,8
tick,0x7ffdf681f424,100030025,0,0x0,8
tick,0x7ffdf681f424,100032081,0,0x0,8
tick,0x7ffdf681f424,100034039,0,0x0,8
tick,0x7ffdf681f424,100036007,0,0x0,8
tick,0x7ffdf681f424,100038009,0,0x0,8
tick,0x7ffdf681f424,100039998,0,0x0,8
tick,0x7ffdf681f424,100041987,0,0x0,8
tick,0x7ffdf681f424,100043988,0,0x0,8
tick,0x7ffdf681f424,100045877,0,0x0,8
tick,0x7ffdf681f424,100047977,0,0x0,8
tick,0x7ffdf681f424,100049970,0,0x0,8
tick,0x7ffdf681f424,100051978,0,0x0,8
tick,0x7ffdf681f424,100053938,0,0x0,8
tick,0x7ffdf681f424,100055985,0,0x0,8
tick,0x7ffdf681f424,100057948,0,0x0,8
tick,0x7ffdf681f424,100059911,0,0x0,8
tick,0x7ffdf681f424,100061946,0,0x0,8
tick,0x7ffdf681f424,100063934,0,0x0,8
tick,0x7ffdf681f424,100065931,0,0x0,8
tick,0x7ffdf681f424,100067924,0,0x0,8
tick,0x7ffdf681f424,100069918,0,0x0,8
tick,0x7ffdf681f424,100071805,0,0x0,8
tick,0x7ffdf681f424,100073908,0,0x0,8
tick,0x7ffdf681f424,100075897,0,0x0,8
tick,0x7ffdf681f424,100077958,0,0x0,8
tick,0x7ffdf681f424,100079894,0,0x0,8
tick,0x7ffdf681f424,100081889,0,0x0,8
tick,0x7ffdf681f424,100083884,0,0x0,8
tick,0x7ffdf681f424,100085878,0,0x0,8
tick,0x7ffdf681f424,100087876,0,0x0,8
tick,0x7ffdf681f424,100089912,0,0x0,8
tick,0x7ffdf681f424,100091863,0,0x0,8
tick,0x7ffdf681f424,100093854,0,0x0,8
tick,0x7ffdf681f424,100095735,0,0x0,8
tick,0x7ffdf681f424,100097849,0,0x0,8
tick,0x7ffdf681f424,100099852,0,0x0,8
tick,0x7ffdf681f424,100101848,0,0x0,8
tick,0x7ffdf681f424,100103890,0,0x0,8
tick,0x7ffdf681f424,100105847,0,0x0,8
tick,0x7ffdf681f424,100107817,0,0x0,8
tick,0x7ffdf681f424,100109813,0,0x0,8
tick,0x7ffdf681f424,100111806,0,0x0,8
tick,0x7ffdf681f424,100113798,0,0x0,8
tick,0x7ffdf681f424,100115799,0,0x0,8
tick,0x7ffdf681f424,100117793,0,0x0,8
tick,0x7ffdf681f424,100119808,0,0x0,8
tick,0x7ffdf681f424,100121807,0,0x0,8
tick,0x7ffdf681f424,100123789,0,0x0,8
tick,0x7ffdf681f424,100125775,0,0x0,8
tick,0x7ffdf681f424,100127764,0,0x0,8
tick,0x7ffdf681f424,100129758,0,0x0,8
tick,0x7ffdf681f424,100131634,0,0x0,8
tick,0x7ffdf681f424,100133748,0,0x0,8
tick,0x7ffdf681f424,100135634,0,0x0,8
tick,0x7ffdf681f424,100137628,0,0x0,8
tick,0x7ffdf681f424,100139737,0,0x0,8
tick,0x7ffdf681f424,100141730,0,0x0,8
tick,0x7ffdf681f424,100143781,0,0x0,8
tick,0x7ffdf681f424,100145630,0,0x0,8
tick,0x7ffdf681f424,100147713,0,0x0,8
tick,0x7ffdf681f424,100149712,0,0x0,8
tick,0x7ffdf681f424,100151699,0,0x0,8
tick,0x7ffdf681f424,100153699,0,0x0,8
tick,0x7ffdf681f424,100155681,0,0x0,8
tick,0x7ffdf681f424,100157684,0,0x0,8
tick,0x7ffdf681f424,100159683,0,0x0,8
tick,0x7ffdf681f424,100161673,0,0x0,8
tick,0x7ffdf681f424,100163659,0,0x0,8
tick,0x7ffdf681f424,100165678,0,0x0,8
tick,0x7ffdf681f424,100167657,0,0x0,8
tick,0x7ffdf681f424,100169657,0,0x0,8
tick,0x7ffdf681f424,100171678,0,0x0,8
tick,0x7ffdf681f424,100173654,0,0x0,8
tick,0x7ffdf681f424,100175641,0,0x0,8
tick,0x7ffdf681f424,100177635,0,0x0,8
tick,0x7ffdf681f424,100179629,0,0x0,8
tick,0x7ffdf681f424,100181510,0,0x0,8
tick,0x7ffdf681f424,100183538,0,0x0,8
tick,0x7ffdf681f424,100185650,0,0x0,8
tick,0x7ffdf681f424,100187512,0,0x0,8
tick,0x7ffdf681f424,100189598,0,0x0,8
tick,0x7ffdf681f424,100191623,0,0x0,8
tick,0x7ffdf681f424,100193616,0,0x0,8
tick,0x7ffdf681f424,100195590,0,0x0,8
tick,0x7ffdf681f424,100197576,0,0x0,8
tick,0x7ffdf681f424,100199572,0,0x0,8
tick,0x7ffdf681f424,100201566,0,0x0,8
tick,0x7ffdf681f424,100203561,0,0x0,8
tick,0x7ffdf681f424,100205563,0,0x0,8
tick,0x7ffdf681f424,100207619,0,0x0,8
tick,0x7ffdf681f424,100209571,0,0x0,8
tick,0x7ffdf681f424,100211543,0,0x0,8
tick,0x7ffdf681f424,100213428,0,0x0,8
tick,0x7ffdf681f424,100215523,0,0x0,8
tick,0x7ffdf681f424,100217528,0,0x0,8
tick,0x7ffdf681f424,100219522,0,0x0,8
tick,0x7ffdf681f424,100221517,0,0x0,8
tick,0x7ffdf681f424,100223508,0,0x0,8
tick,0x7ffdf681f424,100225511,0,0x0,8
tick,0x7ffdf681f424,100227509,0,0x0,8
tick,0x7ffdf681f424,100229536,0,0x0,8
tick,0x7ffdf681f424,100231515,0,0x0,8
tick,0x7ffdf681f424,100233481,0,0x0,8
tick,0x7ffdf681f424,100235486,0,0x0,8
tick,0x7ffdf681f424,100237358,0,0x0,8
tick,0x7ffdf681f424,100239465,0,0x0,8
tick,0x7ffdf681f424,100241452,0,0x0,8
tick,0x7ffdf681f424,100243458,0,0x0,8
tick,0x7ffdf681f424,100245453,0,0x0,8
tick,0x7ffdf681f424,100247452,0,0x0,8
tick,0x7ffdf681f424,100249435,0,0x0,8
tick,0x7ffdf681f424,100251425,0,0x0,8
tick,0x7ffdf681f424,100253372,0,0x0,8
tick,0x7ffdf681f424,100255433,0,0x0,8
tick,0x7ffdf681f424,100257423,0,0x0,8
tick,0x7ffdf681f424,100259411,0,0x0,8
tick,0x7ffdf681f424,100261412,0,0x0,8
tick,0x7ffdf681f424,100263402,0,0x0,8
tick,0x7ffdf681f424,100265406,0,0x0,8
tick,0x7ffdf681f424,100267391,0,0x0,8
tick,0x7ffdf681f424,100269394,0,0x0,8
tick,0x7ffdf681f424,100271380,0,0x0,8
tick,0x7ffdf681f424,100273396,0,0x0,8
tick,0x7ffdf681f424,100275397,0,0x0,8
tick,0x7ffdf681f424,100277366,0,0x0,8
tick,0x7ffdf681f424,100279310,0,0x0,8
tick,0x7ffdf681f424,100281350,0,0x0,8
tick,0x7ffdf681f424,100283351,0,0x0,8
tick,0x7ffdf681f424,100285344,0,0x0,8
tick,0x7ffdf681f424,100287313,0,0x0,8
tick,0x7ffdf681f424,100289224,0,0x0,8
tick,0x7ffdf681f424,100291220,0,0x0,8
tick,0x7ffdf681f424,100293327,0,0x0,8
tick,0x7ffdf681f424,100295360,0,0x0,8
tick,0x7ffdf681f424,100297305,0,0x0,8
tick,0x7ffdf681f424,100299305,0,0x0,8
tick,0x7ffdf681f424,100301367,0,0x0,8
tick,0x7ffdf681f424,100303296,0,0x0,8
tick,0x7ffdf681f424,100305281,0,0x0,8
tick,0x7ffdf681f424,100307276,0,0x0,8
tick,0x7ffdf681f424,100309280,0,0x0,8
tick,0x7ffdf681f424,100311273,0,0x0,8
tick,0x7ffdf681f424,100313265,0,0x0,8
tick,0x7ffdf681f424,100315269,0,0x0,8
tick,0x7ffdf681f424,100317291,0,0x0,8
tick,0x7ffdf681f424,100319265,0,0x0,8
tick,0x7ffdf681f424,100321246,0,0x0,8
tick,0x7ffdf681f424,100323245,0,0x0,8
tick,0x7ffdf681f424,100325235,0,0x0,8
tick,0x7ffdf681f424,100327230,0,0x0,8
tick,0x7ffdf681f424,100329121,0,0x0,8
tick,0x7ffdf681f424,100331112,0,0x0,8
tick,0x7ffdf681f424,100333217,0,0x0,8
tick,0x7ffdf681f424,100335243,0,0x0,8
tick,0x7ffdf681f424,100337202,0,0x0,8
tick,0x7ffdf681f424,100339206,0,0x0,8
tick,0x7ffdf681f424,100341204,0,0x0,8
tick,0x7ffdf681f424,100343189,0,0x0,8
tick,0x7ffdf681f424,100345174,0,0x0,8
tick,0x7ffdf681f424,100347200,0,0x0,8
tick,0x7ffdf681f424,100349182,0,0x0,8
tick,0x7ffdf681f424,100351173,0,0x0,8
tick,0x7ffdf681f424,100353168,0,0x0,8
tick,0x7ffdf681f424,100355156,0,0x0,8
tick,0x7ffdf681f424,100357150,0,0x0,8
tick,0x7ffdf681f424,100359151,0,0x0,8
tick,0x7ffdf681f424,100361181,0,0x0,8
tick,0x7ffdf681f424,100363163,0,0x0,8
tick,0x7ffdf681f424,100365134,0,0x0,8
tick,0x7ffdf681f424,100367040,0,0x0,8
tick,0x7ffdf681f424,100369115,0,0x0,8
tick,0x7ffdf681f424,100370997,0,0x0,8
tick,0x7ffdf681f424,100373117,0,0x0,8
tick,0x7ffdf681f424,100375102,0,0x0,8
tick,0x7ffdf681f424,100377153,0,0x0,8
tick,0x7ffdf681f424,100378990,0,0x0,8
tick,0x7ffdf681f424,100381086,0,0x0,8
tick,0x7ffdf681f424,100383145,0,0x0,8
tick,0x7ffdf681f424,100385106,0,0x0,8
tick,0x7ffdf681f424,100387071,0,0x0,8
tick,0x7ffdf681f424,100389071,0,0x0,8
tick,0x7ffdf681f424,100391064,0,0x0,8
tick,0x7ffdf681f424,100393055,0,0x0,8
tick,0x7ffdf681f424,100395049,0,0x0,8
tick,0x7ffdf681f424,100397063,0,0x0,8
tick,0x7ffdf681f424,100399038,0,0x0,8
tick,0x7ffdf681f424,100401030,0,0x0,8
tick,0x7ffdf681f424,100403031,0,0x0,8
tick,0x7ffdf681f424,100405033,0,0x0,8
tick,0x7ffdf681f424,100407031,0,0x0,8
tick,0x7ffdf681f424,100409009,0,0x0,8
tick,0x7ffdf681f424,100411013,0,0x0,8
tick,0x7ffdf681f424,100413002,0,0x0,8
tick,0x7ffdf681f424,100414996,0,0x0,8
tick,0x7ffdf681f424,100417023,0,0x0,8
tick,0x7ffdf681f424,100418985,0,0x0,8
tick,0x7ffdf681f424,100420870,0,0x0,8
tick,0x7ffdf681f424,100422974,0,0x0,8
tick,0x7ffdf681f424,100424969,0,0x0,8
tick,0x7ffdf681f424,100426991,0,0x0,8
tick,0x7ffdf681f424,100429046,0,0x0,8
tick,0x7ffdf681f424,100430958,0,0x0,8
tick,0x7ffdf681f424,100432974,0,0x0,8
tick,0x7ffdf681f424,100434946,0,0x0,8
tick,0x7ffdf681f424,100436941,0,0x0,8
tick,0x7ffdf681f424,100438824,0,0x0,8
tick,0x7ffdf681f424,100440929,0,0x0,8
tick,0x7ffdf681f424,100442822,0,0x0,8
tick,0x7ffdf681f424,100444807,0,0x0,8
tick,0x7ffdf681f424,100446918,0,0x0,8
tick,0x7ffdf681f424,100449002,0,0x0,8
tick,0x7ffdf681f424,100450930,0,0x0,8
tick,0x7ffdf681f424,100452895,0,0x0,8
tick,0x7ffdf681f424,100454915,0,0x0,8
tick,0x7ffdf681f424,100456884,0,0x0,8
tick,0x7ffdf681f424,100458878,0,0x0,8
tick,0x7ffdf681f424,100460882,0,0x0,8
tick,0x7ffdf681f424,100462868,0,0x0,8
tick,0x7ffdf681f424,100464864,0,0x0,8
tick,0x7ffdf681f424,100466861,0,0x0,8
tick,0x7ffdf681f424,100468853,0,0x0,8
tick,0x7ffdf681f424,100470727,0,0x0,8
tick,0x7ffdf681f424,100472835,0,0x0,8
tick,0x7ffdf681f424,100474839,0,0x0,8
tick,0x7ffdf681f424,100476834,0,0x0,8
tick,0x7ffdf681f424,100478827,0,0x0,8
tick,0x7ffdf681f424,100480820,0,0x0,8
tick,0x7ffdf681f424,100482816,0,0x0,8
tick,0x7ffdf681f424,100484809,0,0x0,8
tick,0x7ffdf681f424,100486804,0,0x0,8
tick,0x7ffdf681f424,100488804,0,0x0,8
tick,0x7ffdf681f424,100490794,0,0x0,8
tick,0x7ffdf681f424,100492794,0,0x0,8
tick,0x7ffdf681f424,100494799,0,0x0,8
tick,0x7ffdf681f424,100496774,0,0x0,8
tick,0x7ffdf681f424,100498816,0,0x0,8
tick,0x7ffdf681f424,100500770,0,0x0,8
tick,0x7ffdf681f424,100502767,0,0x0,8
tick,0x7ffdf681f424,100504753,0,0x0,8
tick,0x7ffdf681f424,100506754,0,0x0,8
tick,0x7ffdf681f424,100508744,0,0x0,8
tick,0x7ffdf681f424,100510742,0,0x0,8
tick,0x7ffdf681f424,100512625,0,0x0,8
tick,0x7ffdf681f424,100514771,0,0x0,8
tick,0x7ffdf681f424,100516755,0,0x0,8
tick,0x7ffdf681f424,100518718,0,0x0,8
tick,0x7ffdf681f424,100520649,0,0x0,8
tick,0x7ffdf681f424,100522731,0,0x0,8
tick,0x7ffdf681f424,100524704,0,0x0,8
tick,0x7ffdf681f424,100526706,0,0x0,8
tick,0x7ffdf681f424,100528695,0,0x0,8
tick,0x7ffdf681f424,100530690,0,0x0,8
tick,0x7ffdf681f424,100532688,0,0x0,8
tick,0x7ffdf681f424,100534641,0,0x0,8
tick,0x7ffdf681f424,100536671,0,0x0,8
tick,0x7ffdf681f424,100538679,0,0x0,8
tick,0x7ffdf681f424,100540659,0,0x0,8
tick,0x7ffdf681f424,100542658,0,0x0,8
tick,0x7ffdf681f424,100544649,0,0x0,8
tick,0x7ffdf681f424,100546669,0,0x0,8
tick,0x7ffdf681f424,100548646,0,0x0,8
tick,0x7ffdf681f424,100550633,0,0x0,8
tick,0x7ffdf681f424,100552637,0,0x0,8
tick,0x7ffdf681f424,100554623,0,0x0,8
tick,0x7ffdf681f424,100556618,0,0x0,8
tick,0x7ffdf681f424,100558679,0,0x0,8
tick,0x7ffdf681f424,100560632,0,0x0,8
tick,0x7ffdf681f424,100562498,0,0x0,8
tick,0x7ffdf681f424,100564600,0,0x0,8
tick,0x7ffdf681f424,100566590,0,0x0,8
tick,0x7ffdf681f424,100568582,0,0x0,8
tick,0x7ffdf681f424,100570587,0,0x0,8
tick,0x7ffdf681f424,100572574,0,0x0,8
tick,0x7ffdf681f424,100574569,0,0x0,8
tick,0x7ffdf681f424,100576564,0,0x0,8
tick,0x7ffdf681f424,100578558,0,0x0,8
tick,0x7ffdf681f424,100580563,0,0x0,8
tick,0x7ffdf681f424,100582563,0,0x0,8
tick,0x7ffdf681f424,100584542,0,0x0,8
tick,0x7ffdf681f424,100586541,0,0x0,8
tick,0x7ffdf681f424,100588533,0,0x0,8
tick,0x7ffdf681f424,100590527,0,0x0,8
tick,0x7ffdf681f424,100592513,0,0x0,8
tick,0x7ffdf681f424,100594521,0,0x0,8
tick,0x7ffdf681f424,100596434,0,0x0,8
tick,0x7ffdf681f424,100598397,0,0x0,8
tick,0x7ffdf681f424,100600502,0,0x0,8
tick,0x7ffdf681f424,100602534,0,0x0,8
tick,0x7ffdf681f424,100604409,0,0x0,8
tick,0x7ffdf681f424,100606483,0,0x0,8
tick,0x7ffdf681f424,100608489,0,0x0,8
tick,0x7ffdf681f424,100610472,0,0x0,8
tick,0x7ffdf681f424,100612373,0,0x0,8
tick,0x7ffdf681f424,100614465,0,0x0,8
tick,0x7ffdf681f424,100616456,0,0x0,8
tick,0x7ffdf681f424,100618451,0,0x0,8
tick,0x7ffdf681f424,100620452,0,0x0,8
tick,0x7ffdf681f424,100622441,0,0x0,8
tick,0x7ffdf681f424,100624428,0,0x0,8
tick,0x7ffdf681f424,100626444,0,0x0,8
tick,0x7ffdf681f424,100628427,0,0x0,8
tick,0x7ffdf681f424,100630424,0,0x0,8
tick,0x7ffdf681f424,100632412,0,0x0,8
tick,0x7ffdf681f424,100634415,0,0x0,8
tick,0x7ffdf681f424,100636402,0,0x0,8
tick,0x7ffdf681f424,100638398,0,0x0,8
tick,0x7ffdf681f424,100640393,0,0x0,8
tick,0x7ffdf681f424,100642388,0,0x0,8
tick,0x7ffdf681f424,100644387,0,0x0,8
tick,0x7ffdf681f424,100646493,0,0x0,8
tick,0x7ffdf681f424,100648402,0,0x0,8
tick,0x7ffdf681f424,100650373,0,0x0,8
tick,0x7ffdf681f424,100652401,0,0x0,8
tick,0x7ffdf681f424,100654247,0,0x0,8
tick,0x7ffdf681f424,100656360,0,0x0,8
tick,0x7ffdf681f424,100658348,0,0x0,8
tick,0x7ffdf681f424,100660342,0,0x0,8
tick,0x7ffdf681f424,100662360,0,0x0,8
tick,0x7ffdf681f424,100664327,0,0x0,8
tick,0x7ffdf681f424,100666325,0,0x0,8
tick,0x7ffdf681f424,100668346,0,0x0,8
tick,0x7ffdf681f424,100670341,0,0x0,8
tick,0x7ffdf681f424,100672307,0,0x0,8
tick,0x7ffdf681f424,100674272,0,0x0,8
tick,0x7ffdf681f424,100676296,0,0x0,8
tick,0x7ffdf681f424,100678292,0,0x0,8
tick,0x7ffdf681f424,100680194,0,0x0,8
tick,0x7ffdf681f424,100682281,0,0x0,8
tick,0x7ffdf681f424,100684285,0,0x0,8
tick,0x7ffdf681f424,100686270,0,0x0,8
tick,0x7ffdf681f424,100688262,0,0x0,8
tick,0x7ffdf681f424,100690355,0,0x0,8
tick,0x7ffdf681f424,100692293,0,0x0,8
tick,0x7ffdf681f424,100694249,0,0x0,8
tick,0x7ffdf681f424,100696248,0,0x0,8
tick,0x7ffdf681f424,100698242,0,0x0,8
tick,0x7ffdf681f424,100700232,0,0x0,8
tick,0x7ffdf681f424,100702222,0,0x0,8
tick,0x7ffdf681f424,100704110,0,0x0,8
tick,0x7ffdf681f424,100706225,0,0x0,8
tick,0x7ffdf681f424,100708211,0,0x0,8
tick,0x7ffdf681f424,100710207,0,0x0,8
tick,0x7ffdf681f424,100712204,0,0x0,8
tick,0x7ffdf681f424,100714147,0,0x0,8
tick,0x7ffdf681f424,100716184,0,0x0,8
tick,0x7ffdf681f424,100718194,0,0x0,8
tick,0x7ffdf681f424,100720177,0,0x0,8
tick,0x7ffdf681f424,100722178,0,0x0,8
tick,0x7ffdf681f424,100724171,0,0x0,8
tick,0x7ffdf681f424,100726163,0,0x0,8
tick,0x7ffdf681f424,100728156,0,0x0,8
tick,0x7ffdf681f424,100730159,0,0x0,8
tick,0x7ffdf681f424,100732148,0,0x0,8
tick,0x7ffdf681f424,100734243,0,0x0,8
tick,0x7ffdf681f424,100736156,0,0x0,8
tick,0x7ffdf681f424,100738156,0,0x0,8
tick,0x7ffdf681f424,100740131,0,0x0,8
tick,0x7ffdf681f424,100742120,0,0x0,8
tick,0x7ffdf681f424,100744148,0,0x0,8
tick,0x7ffdf681f424,100745991,0,0x0,8
tick,0x7ffdf681f424,100748159,0,0x0,8
tick,0x7ffdf681f424,100749991,0,0x0,8
tick,0x7ffdf681f424,100751985,0,0x0,8
tick,0x7ffdf681f424,100754124,0,0x0,8
tick,0x7ffdf681f424,100756146,0,0x0,8
tick,0x7ffdf681f424,100758107,0,0x0,8
tick,0x7ffdf681f424,100760077,0,0x0,8
tick,0x7ffdf681f424,100762074,0,0x0,8
tick,0x7ffdf681f424,100764062,0,0x0,8
tick,0x7ffdf681f424,100766057,0,0x0,8
tick,0x7ffdf681f424,100768046,0,0x0,8
tick,0x7ffdf681f424,100769941,0,0x0,8
tick,0x7ffdf681f424,100772043,0,0x0,8
tick,0x7ffdf681f424,100774043,0,0x0,8
tick,0x7ffdf681f424,100776034,0,0x0,8
tick,0x7ffdf681f424,100778098,0,0x0,8
tick,0x7ffdf681f424,100780053,0,0x0,8
tick,0x7ffdf681f424,100782014,0,0x0,8
tick,0x7ffdf681f424,100784009,0,0x0,8
tick,0x7ffdf681f424,100785997,0,0x0,8
tick,0x7ffdf681f424,100788000,0,0x0,8
tick,0x7ffdf681f424,100789993,0,0x0,8
tick,0x7ffdf681f424,100791985,0,0x0,8
tick,0x7ffdf681f424,100793989,0,0x0,8
tick,0x7ffdf681f424,100795868,0,0x0,8
tick,0x7ffdf681f424,100797972,0,0x0,8
tick,0x7ffdf681f424,100800033,0,0x0,8
tick,0x7ffdf681f424,100801987,0,0x0,8
tick,0x7ffdf681f424,100803962,0,0x0,8
tick,0x7ffdf681f424,100805960,0,0x0,8
tick,0x7ffdf681f424,100807945,0,0x0,8
tick,0x7ffdf681f424,100809939,0,0x0,8
tick,0x7ffdf681f424,100811929,0,0x0,8
tick,0x7ffdf681f424,100813929,0,0x0,8
tick,0x7ffdf681f424,100815915,0,0x0,8
tick,0x7ffdf681f424,100817922,0,0x0,8
tick,0x7ffdf681f424,100819915,0,0x0,8
tick,0x7ffdf681f424,100821966,0,0x0,8
tick,0x7ffdf681f424,100823928,0,0x0,8
tick,0x7ffdf681f424,100825935,0,0x0,8
tick,0x7ffdf681f424,100827825,0,0x0,8
tick,0x7ffdf681f424,100829886,0,0x0,8
tick,0x7ffdf681f424,100831881,0,0x0,8
tick,0x7ffdf681f424,100833870,0,0x0,8
tick,0x7ffdf681f424,100835874,0,0x0,8
tick,0x7ffdf681f424,100837763,0,0x0,8
tick,0x7ffdf681f424,100839860,0,0x0,8
tick,0x7ffdf681f424,100841764,0,0x0,8
tick,0x7ffdf681f424,100843854,0,0x0,8
tick,0x7ffdf681f424,100845795,0,0x0,8
tick,0x7ffdf681f424,100847830,0,0x0,8
tick,0x7ffdf681f424,100849842,0,0x0,8
tick,0x7ffdf681f424,100851829,0,0x0,8
tick,0x7ffdf681f424,100853822,0,0x0,8
tick,0x7ffdf681f424,100855810,0,0x0,8
tick,0x7ffdf681f424,100857825,0,0x0,8
tick,0x7ffdf681f424,100859806,0,0x0,8
tick,0x7ffdf681f424,100861801,0,0x0,8
tick,0x7ffdf681f424,100863795,0,0x0,8
tick,0x7ffdf681f424,100865831,0,0x0,8
tick,0x7ffdf681f424,100867836,0,0x0,8
tick,0x7ffdf681f424,100869779,0,0x0,8
tick,0x7ffdf681f424,100871779,0,0x0,8
tick,0x7ffdf681f424,100873769,0,0x0,8
tick,0x7ffdf681f424,100875766,0,0x0,8
tick,0x7ffdf681f424,100877758,0,0x0,8
tick,0x7ffdf681f424,100879750,0,0x0,8
tick,0x7ffdf681f424,100881751,0,0x0,8
tick,0x7ffdf681f424,100883744,0,0x0,8
tick,0x7ffdf681f424,100885736,0,0x0,8
tick,0x7ffdf681f424,100887632,0,0x0,8
tick,0x7ffdf681f424,100889740,0,0x0,8
tick,0x7ffdf681f424,100891721,0,0x0,8
tick,0x7ffdf681f424,100893724,0,0x0,8
tick,0x7ffdf681f424,100895737,0,0x0,8
tick,0x7ffdf681f424,100897707,0,0x0,8
tick,0x7ffdf681f424,100899703,0,0x0,8
tick,0x7ffdf681f424,100901700,0,0x0,8
tick,0x7ffdf681f424,100903580,0,0x0,8
tick,0x7ffdf681f424,100905674,0,0x0,8
tick,0x7ffdf681f424,100907709,0,0x0,8
tick,0x7ffdf681f424,100909752,0,0x0,8
tick,0x7ffdf681f424,100911694,0,0x0,8
tick,0x7ffdf681f424,100913593,0,0x0,8
tick,0x7ffdf681f424,100915572,0,0x0,8
tick,0x7ffdf681f424,100917677,0,0x0,8
tick,0x7ffdf681f424,100919644,0,0x0,8
tick,0x7ffdf681f424,100921645,0,0x0,8
tick,0x7ffdf681f424,100923636,0,0x0,8
tick,0x7ffdf681f424,100925630,0,0x0,8
tick,0x7ffdf681f424,100927625,0,0x0,8
tick,0x7ffdf681f424,100929619,0,0x0,8
tick,0x7ffdf681f424,100931644,0,0x0,8
tick,0x7ffdf681f424,100933650,0,0x0,8
tick,0x7ffdf681f424,100935604,0,0x0,8
tick,0x7ffdf681f424,100937507,0,0x0,8
tick,0x7ffdf681f424,100939601,0,0x0,8
tick,0x7ffdf681f424,100941589,0,0x0,8
tick,0x7ffdf681f424,100943579,0,0x0,8
tick,0x7ffdf681f424,100945582,0,0x0,8
tick,0x7ffdf681f424,100947574,0,0x0,8
tick,0x7ffdf681f424,100949589,0,0x0,8
tick,0x7ffdf681f424,100951558,0,0x0,8
tick,0x7ffdf681f424,100953593,0,0x0,8
tick,0x7ffdf681f424,100955602,0,0x0,8
tick,0x7ffdf681f424,100957545,0,0x0,8
tick,0x7ffdf681f424,100959545,0,0x0,8
tick,0x7ffdf681f424,100961536,0,0x0,8
tick,0x7ffdf681f424,100963528,0,0x0,8
tick,0x7ffdf681f424,100965412,0,0x0,8
tick,0x7ffdf681f424,100967399,0,0x0,8
tick,0x7ffdf681f424,100969513,0,0x0,8
tick,0x7ffdf681f424,100971392,0,0x0,8
tick,0x7ffdf681f424,100973502,0,0x0,8
tick,0x7ffdf681f424,100975514,0,0x0,8
tick,0x7ffdf681f424,100977505,0,0x0,8
tick,0x7ffdf681f424,100979372,0,0x0,8
tick,0x7ffdf681f424,100981394,0,0x0,8
tick,0x7ffdf681f424,100983473,0,0x0,8
tick,0x7ffdf681f424,100985462,0,0x0,8
tick,0x7ffdf681f424,100987411,0,0x0,8
tick,0x7ffdf681f424,100989462,0,0x0,8
tick,0x7ffdf681f424,100991453,0,0x0,8
tick,0x7ffdf681f424,100993449,0,0x0,8
tick,0x7ffdf681f424,100995441,0,0x0,8
tick,0x7ffdf681f424,100997436,0,0x0,8
tick,0x7ffdf681f424,100999466,0,0x0,8
tick,0x7ffdf681f424,101001429,0,0x0,8
tick,0x7ffdf681f424,101003424,0,0x0,8
tick,0x7ffdf681f424,101005416,0,0x0,8
tick,0x7ffdf681f424,101007422,0,0x0,8
tick,0x7ffdf681f424,101009398,0,0x0,8
tick,0x7ffdf681f424,101011408,0,0x0,8
tick,0x7ffdf681f424,101013396,0,0x0,8
tick,0x7ffdf681f424,101015387,0,0x0,8
tick,0x7ffdf681f424,101017388,0,0x0,8
tick,0x7ffdf681f424,101019462,0,0x0,8
tick,0x7ffdf681f424,101021404,0,0x0,8
tick,0x7ffdf681f424,101023369,0,0x0,8
tick,0x7ffdf681f424,101025358,0,0x0,8
tick,0x7ffdf681f424,101027361,0,0x0,8
tick,0x7ffdf681f424,101029250,0,0x0,8
tick,0x7ffdf681f424,101031342,0,0x0,8
tick,0x7ffdf681f424,101033342,0,0x0,8
tick,0x7ffdf681f424,101035338,0,0x0,8
tick,0x7ffdf681f424,101037338,0,0x0,8
tick,0x7ffdf681f424,101039324,0,0x0,8
tick,0x7ffdf681f424,101041394,0,0x0,8
tick,0x7ffdf681f424,101043342,0,0x0,8
tick,0x7ffdf681f424,101045310,0,0x0,8
tick,0x7ffdf681f424,101047316,0,0x0,8
tick,0x7ffdf681f424,101049303,0,0x0,8
tick,0x7ffdf681f424,101051300,0,0x0,8
tick,0x7ffdf681f424,101053175,0,0x0,8
tick,0x7ffdf681f424,101055290,0,0x0,8
tick,0x7ffdf681f424,101057170,0,0x0,8
tick,0x7ffdf681f424,101059180,0,0x0,8
tick,0x7ffdf681f424,101061274,0,0x0,8
tick,0x7ffdf681f424,101063251,0,0x0,8
tick,0x7ffdf681f424,101065272,0,0x0,8
tick,0x7ffdf681f424,101067261,0,0x0,8
tick,0x7ffdf681f424,101069247,0,0x0,8
tick,0x7ffdf681f424,101071219,0,0x0,8
tick,0x7ffdf681f424,101073239,0,0x0,8
tick,0x7ffdf681f424,101075236,0,0x0,8
tick,0x7ffdf681f424,101077225,0,0x0,8
tick,0x7ffdf681f424,101079120,0,0x0,8
tick,0x7ffdf681f424,101081095,0,0x0,8
tick,0x7ffdf681f424,101083099,0,0x0,8
tick,0x7ffdf681f424,101085112,0,0x0,8
tick,0x7ffdf681f424,101087104,0,0x0,8
tick,0x7ffdf681f424,101089192,0,0x0,8
tick,0x7ffdf681f424,101091191,0,0x0,8
tick,0x7ffdf681f424,101093209,0,0x0,8
tick,0x7ffdf681f424,101095185,0,0x0,8
tick,0x7ffdf681f424,101097173,0,0x0,8
tick,0x7ffdf681f424,101099169,0,0x0,8
tick,0x7ffdf681f424,101101200,0,0x0,8
tick,0x7ffdf681f424,101103158,0,0x0,8
tick,0x7ffdf681f424,101105154,0,0x0,8
tick,0x7ffdf681f424,101107185,0,0x0,8
tick,0x7ffdf681f424,101109167,0,0x0,8
tick,0x7ffdf681f424,101111131,0,0x0,8
tick,0x7ffdf681f424,101113131,0,0x0,8
tick,0x7ffdf681f424,101115123,0,0x0,8
tick,0x7ffdf681f424,101117119,0,0x0,8
tick,0x7ffdf681f424,101119113,0,0x0,8
tick,0x7ffdf681f424,101120999,0,0x0,8
tick,0x7ffdf681f424,101123105,0,0x0,8
tick,0x7ffdf681f424,101125115,0,0x0,8
tick,0x7ffdf681f424,101127092,0,0x0,8
tick,0x7ffdf681f424,101129129,0,0x0,8
tick,0x7ffdf681f424,101131110,0,0x0,8
tick,0x7ffdf681f424,101133075,0,0x0,8
tick,0x7ffdf681f424,101134981,0,0x0,8
tick,0x7ffdf681f424,101137092,0,0x0,8
tick,0x7ffdf681f424,101139062,0,0x0,8
tick,0x7ffdf681f424,101141056,0,0x0,8
tick,0x7ffdf681f424,101143065,0,0x0,8
tick,0x7ffdf681f424,101145048,0,0x0,8
tick,0x7ffdf681f424,101146927,0,0x0,8
tick,0x7ffdf681f424,101149039,0,0x0,8
tick,0x7ffdf681f424,101151034,0,0x0,8
tick,0x7ffdf681f424,101153061,0,0x0,8
tick,0x7ffdf681f424,101155016,0,0x0,8
tick,0x7ffdf681f424,101157017,0,0x0,8
tick,0x7ffdf681f424,101159006,0,0x0,8
tick,0x7ffdf681f424,101161001,0,0x0,8
tick,0x7ffdf681f424,101163005,0,0x0,8
tick,0x7ffdf681f424,101164990,0,0x0,8
tick,0x7ffdf681f424,101166982,0,0x0,8
tick,0x7ffdf681f424,101168983,0,0x0,8
tick,0x7ffdf681f424,101170869,0,0x0,8
tick,0x7ffdf681f424,101173036,0,0x0,8
tick,0x7ffdf681f424,101174991,0,0x0,8
tick,0x7ffdf681f424,101176962,0,0x0,8
tick,0x7ffdf681f424,101178961,0,0x0,8
tick,0x7ffdf681f424,101180948,0,0x0,8
tick,0x7ffdf681f424,101182943,0,0x0,8
tick,0x7ffdf681f424,101184937,0,0x0,8
tick,0x7ffdf681f424,101186931,0,0x0,8
tick,0x7ffdf681f424,101188924,0,0x0,8
tick,0x7ffdf681f424,101190921,0,0x0,8
tick,0x7ffdf681f424,101192918,0,0x0,8
tick,0x7ffdf681f424,101194951,0,0x0,8
tick,0x7ffdf681f424,101196933,0,0x0,8
tick,0x7ffdf681f424,101198897,0,0x0,8
tick,0x7ffdf681f424,101200908,0,0x0,8
tick,0x7ffdf681f424,101202890,0,0x0,8
tick,0x7ffdf681f424,101204884,0,0x0,8
tick,0x7ffdf681f424,101206881,0,0x0,8
tick,0x7ffdf681f424,101208879,0,0x0,8
tick,0x7ffdf681f424,101210759,0,0x0,8
tick,0x7ffdf681f424,101212790,0,0x0,8
tick,0x7ffdf681f424,101214864,0,0x0,8
tick,0x7ffdf681f424,101216879,0,0x0,8
tick,0x7ffdf681f424,101218876,0,0x0,8
tick,0x7ffdf681f424,101220785,0,0x0,8
tick,0x7ffdf681f424,101222848,0,0x0,8
tick,0x7ffdf681f424,101224831,0,0x0,8
tick,0x7ffdf681f424,101226826,0,0x0,8
tick,0x7ffdf681f424,101228820,0,0x0,8
tick,0x7ffdf681f424,101230813,0,0x0,8
tick,0x7ffdf681f424,101232812,0,0x0,8
tick,0x7ffdf681f424,101234838,0,0x0,8
tick,0x7ffdf681f424,101236800,0,0x0,8
tick,0x7ffdf681f424,101238876,0,0x0,8
tick,0x7ffdf681f424,101240816,0,0x0,8
tick,0x7ffdf681f424,101242782,0,0x0,8
tick,0x7ffdf681f424,101244812,0,0x0,8
tick,0x7ffdf681f424,101246781,0,0x0,8
tick,0x7ffdf681f424,101248766,0,0x0,8
tick,0x7ffdf681f424,101250766,0,0x0,8
tick,0x7ffdf681f424,101252758,0,0x0,8
tick,0x7ffdf681f424,101254759,0,0x0,8
tick,0x7ffdf681f424,101256746,0,0x0,8
tick,0x7ffdf681f424,101258742,0,0x0,8
tick,0x7ffdf681f424,101260808,0,0x0,8
tick,0x7ffdf681f424,101262649,0,0x0,8
tick,0x7ffdf681f424,101264754,0,0x0,8
tick,0x7ffdf681f424,101266723,0,0x0,8
tick,0x7ffdf681f424,101268712,0,0x0,8
tick,0x7ffdf681f424,101270713,0,0x0,8
tick,0x7ffdf681f424,101272706,0,0x0,8
tick,0x7ffdf681f424,101274697,0,0x0,8
tick,0x7ffdf681f424,101276698,0,0x0,8
tick,0x7ffdf681f424,101278686,0,0x0,8
tick,0x7ffdf681f424,101280682,0,0x0,8
tick,0x7ffdf681f424,101282734,0,0x0,8
tick,0x7ffdf681f424,101284699,0,0x0,8
tick,0x7ffdf681f424,101286664,0,0x0,8
tick,0x7ffdf681f424,101288635,0,0x0,8
tick,0x7ffdf681f424,101290656,0,0x0,8
tick,0x7ffdf681f424,101292648,0,0x0,8
tick,0x7ffdf681f424,101294641,0,0x0,8
tick,0x7ffdf681f424,101296649,0,0x0,8
tick,0x7ffdf681f424,101298634,0,0x0,8
tick,0x7ffdf681f424,101300640,0,0x0,8
tick,0x7ffdf681f424,101302656,0,0x0,8
tick,0x7ffdf681f424,101304610,0,0x0,8
tick,0x7ffdf681f424,101306669,0,0x0,8
tick,0x7ffdf681f424,101308606,0,0x0,8
tick,0x7ffdf681f424,101310608,0,0x0,8
tick,0x7ffdf681f424,101312497,0,0x0,8
tick,0x7ffdf681f424,101314590,0,0x0,8
tick,0x7ffdf681f424,101316628,0,0x0,8
tick,0x7ffdf681f424,101318580,0,0x0,8
tick,0x7ffdf681f424,101320574,0,0x0,8
tick,0x7ffdf681f424,101322571,0,0x0,8
tick,0x7ffdf681f424,101324558,0,0x0,8
tick,0x7ffdf681f424,101326560,0,0x0,8
tick,0x7ffdf681f424,101328566,0,0x0,8
tick,0x7ffdf681f424,101330550,0,0x0,8
tick,0x7ffdf681f424,101332547,0,0x0,8
tick,0x7ffdf681f424,101334534,0,0x0,8
tick,0x7ffdf681f424,101336535,0,0x0,8
tick,0x7ffdf681f424,101338523,0,0x0,8
tick,0x7ffdf681f424,101340520,0,0x0,8
tick,0x7ffdf681f424,101342516,0,0x0,8
tick,0x7ffdf681f424,101344514,0,0x0,8
tick,0x7ffdf681f424,101346511,0,0x0,8
tick,0x7ffdf681f424,101348584,0,0x0,8
tick,0x7ffdf681f424,101350518,0,0x0,8
tick,0x7ffdf681f424,101352512,0,0x0,8
tick,0x7ffdf681f424,101354431,0,0x0,8
tick,0x7ffdf681f424,101356505,0,0x0,8
tick,0x7ffdf681f424,101358471,0,0x0,8
tick,0x7ffdf681f424,101360344,0,0x0,8
tick,0x7ffdf681f424,101362464,0,0x0,8
tick,0x7ffdf681f424,101364407,0,0x0,8
tick,0x7ffdf681f424,101366338,0,0x0,8
tick,0x7ffdf681f424,101368452,0,0x0,8
tick,0x7ffdf681f424,101370447,0,0x0,8
tick,0x7ffdf681f424,101372449,0,0x0,8
tick,0x7ffdf681f424,101374436,0,0x0,8
tick,0x7ffdf681f424,101376435,0,0x0,8
tick,0x7ffdf681f424,101378419,0,0x0,8
tick,0x7ffdf681f424,101380414,0,0x0,8
tick,0x7ffdf681f424,101382405,0,0x0,8
tick,0x7ffdf681f424,101384404,0,0x0,8
tick,0x7ffdf681f424,101386401,0,0x0,8
tick,0x7ffdf681f424,101388393,0,0x0,8
tick,0x7ffdf681f424,101390385,0,0x0,8
tick,0x7ffdf681f424,101392386,0,0x0,8
tick,0x7ffdf681f424,101394387,0,0x0,8
tick,0x7ffdf681f424,101396371,0,0x0,8
tick,0x7ffdf681f424,101398415,0,0x0,8
tick,0x7ffdf681f424,101400364,0,0x0,8
tick,0x7ffdf681f424,101402355,0,0x0,8
tick,0x7ffdf681f424,101404257,0,0x0,8
tick,0x7ffdf681f424,101406353,0,0x0,8
tick,0x7ffdf681f424,101408339,0,0x0,8
tick,0x7ffdf681f424,101410334,0,0x0,8
tick,0x7ffdf681f424,101412336,0,0x0,8
tick,0x7ffdf681f424,101414393,0,0x0,8
tick,0x7ffdf681f424,101416346,0,0x0,8
tick,0x7ffdf681f424,101418315,0,0x0,8
tick,0x7ffdf681f424,101420312,0,0x0,8
tick,0x7ffdf681f424,101422300,0,0x0,8
tick,0x7ffdf681f424,101424300,0,0x0,8
tick,0x7ffdf681f424,101426296,0,0x0,8
tick,0x7ffdf681f424,101428288,0,0x0,8
tick,0x7ffdf681f424,101430278,0,0x0,8
tick,0x7ffdf681f424,101432274,0,0x0,8
tick,0x7ffdf681f424,101434294,0,0x0,8
tick,0x7ffdf681f424,101436351,0,0x0,8
tick,0x7ffdf681f424,101438295,0,0x0,8
tick,0x7ffdf681f424,101440261,0,0x0,8
tick,0x7ffdf681f424,101442158,0,0x0,8
tick,0x7ffdf681f424,101444268,0,0x0,8
tick,0x7ffdf681f424,101446129,0,0x0,8
tick,0x7ffdf681f424,101448233,0,0x0,8
tick,0x7ffdf681f424,101450230,0,0x0,8
tick,0x7ffdf681f424,101452222,0,0x0,8
tick,0x7ffdf681f424,101454167,0,0x0,8
tick,0x7ffdf681f424,101456141,0,0x0,8
tick,0x7ffdf681f424,101458303,0,0x0,8
tick,0x7ffdf681f424,101460229,0,0x0,8
tick,0x7ffdf681f424,101462218,0,0x0,8
tick,0x7ffdf681f424,101464201,0,0x0,8
tick,0x7ffdf681f424,101466209,0,0x0,8
tick,0x7ffdf681f424,101468180,0,0x0,8
tick,0x7ffdf681f424,101470174,0,0x0,8
tick,0x7ffdf681f424,101472169,0,0x0,8
tick,0x7ffdf681f424,101474164,0,0x0,8
tick,0x7ffdf681f424,101476158,0,0x0,8
tick,0x7ffdf681f424,101478153,0,0x0,8
tick,0x7ffdf681f424,101480153,0,0x0,8
tick,0x7ffdf681f424,101482161,0,0x0,8
tick,0x7ffdf681f424,101484137,0,0x0,8
tick,0x7ffdf681f424,101486142,0,0x0,8
tick,0x7ffdf681f424,101488133,0,0x0,8
tick,0x7ffdf681f424,101490123,0,0x0,8
tick,0x7ffdf681f424,101492116,0,0x0,8
tick,0x7ffdf681f424,101494108,0,0x0,8
tick,0x7ffdf681f424,101495996,0,0x0,8
tick,0x7ffdf681f424,101498100,0,0x0,8
tick,0x7ffdf681f424,101500095,0,0x0,8
tick,0x7ffdf681f424,101502190,0,0x0,8
tick,0x7ffdf681f424,101504102,0,0x0,8
tick,0x7ffdf681f424,101506079,0,0x0,8
tick,0x7ffdf681f424,101508083,0,0x0,8
tick,0x7ffdf681f424,101510093,0,0x0,8
tick,0x7ffdf681f424,101512062,0,0x0,8
tick,0x7ffdf681f424,101514071,0,0x0,8
tick,0x7ffdf681f424,101516057,0,0x0,8
tick,0x7ffdf681f424,101517938,0,0x0,8
tick,0x7ffdf681f424,101519930,0,0x0,8
tick,0x7ffdf681f424,101522050,0,0x0,8
tick,0x7ffdf681f424,101524058,0,0x0,8
tick,0x7ffdf681f424,101526051,0,0x0,8
tick,0x7ffdf681f424,101528023,0,0x0,8
tick,0x7ffdf681f424,101530012,0,0x0,8
tick,0x7ffdf681f424,101532008,0,0x0,8
tick,0x7ffdf681f424,101534006,0,0x0,8
tick,0x7ffdf681f424,101535995,0,0x0,8
tick,0x7ffdf681f424,101537970,0,0x0,8
tick,0x7ffdf681f424,101539992,0,0x0,8
tick,0x7ffdf681f424,101541982,0,0x0,8
tick,0x7ffdf681f424,101543978,0,0x0,8
tick,0x7ffdf681f424,101545923,0,0x0,8
tick,0x7ffdf681f424,101547992,0,0x0,8
tick,0x7ffdf681f424,101549965,0,0x0,8
tick,0x7ffdf681f424,101551964,0,0x0,8
tick,0x7ffdf681f424,101553974,0,0x0,8
tick,0x7ffdf681f424,101555967,0,0x0,8
tick,0x7ffdf681f424,101557937,0,0x0,8
tick,0x7ffdf681f424,101559940,0,0x0,8
tick,0x7ffdf681f424,101561969,0,0x0,8
tick,0x7ffdf681f424,101563923,0,0x0,8
tick,0x7ffdf681f424,101565920,0,0x0,8
tick,0x7ffdf681f424,101567951,0,0x0,8
tick,0x7ffdf681f424,101569939,0,0x0,8
tick,0x7ffdf681f424,101571902,0,0x0,8
tick,0x7ffdf681f424,101573901,0,0x0,8
tick,0x7ffdf681f424,101575892,0,0x0,8
tick,0x7ffdf681f424,101577895,0,0x0,8
tick,0x7ffdf681f424,101579875,0,0x0,8
tick,0x7ffdf681f424,101581877,0,0x0,8
tick,0x7ffdf681f424,101583874,0,0x0,8
tick,0x7ffdf681f424,101585867,0,0x0,8
tick,0x7ffdf681f424,101587752,0,0x0,8
tick,0x7ffdf681f424,101589893,0,0x0,8
tick,0x7ffdf681f424,101591875,0,0x0,8
tick,0x7ffdf681f424,101593838,0,0x0,8
tick,0x7ffdf681f424,101595798,0,0x0,8
tick,0x7ffdf681f424,101597833,0,0x0,8
tick,0x7ffdf681f424,101599827,0,0x0,8
tick,0x7ffdf681f424,101601822,0,0x0,8
tick,0x7ffdf681f424,101603820,0,0x0,8
tick,0x7ffdf681f424,101605811,0,0x0,8
tick,0x7ffdf681f424,101607815,0,0x0,8
tick,0x7ffdf681f424,101609802,0,0x0,8
tick,0x7ffdf681f424,101611875,0,0x0,8
tick,0x7ffdf681f424,101613818,0,0x0,8
tick,0x7ffdf681f424,101615696,0,0x0,8
tick,0x7ffdf681f424,101617783,0,0x0,8
tick,0x7ffdf681f424,101619774,0,0x0,8
tick,0x7ffdf681f424,101621767,0,0x0,8
tick,0x7ffdf681f424,101623767,0,0x0,8
tick,0x7ffdf681f424,101625758,0,0x0,8
tick,0x7ffdf681f424,101627747,0,0x0,8
tick,0x7ffdf681f424,101629756,0,0x0,8
tick,0x7ffdf681f424,101631742,0,0x0,8
tick,0x7ffdf681f424,101633816,0,0x0,8
tick,0x7ffdf681f424,101635762,0,0x0,8
tick,0x7ffdf681f424,101637617,0,0x0,8
tick,0x7ffdf681f424,101639728,0,0x0,8
tick,0x7ffdf681f424,101641717,0,0x0,8
tick,0x7ffdf681f424,101643765,0,0x0,8
tick,0x7ffdf681f424,101645720,0,0x0,8
tick,0x7ffdf681f424,101647628,0,0x0,8
tick,0x7ffdf681f424,101649697,0,0x0,8
tick,0x7ffdf681f424,101651690,0,0x0,8
tick,0x7ffdf681f424,101653681,0,0x0,8
tick,0x7ffdf681f424,101655684,0,0x0,8
tick,0x7ffdf681f424,101657678,0,0x0,8
tick,0x7ffdf681f424,101659667,0,0x0,8
tick,0x7ffdf681f424,101661668,0,0x0,8
tick,0x7ffdf681f424,101663665,0,0x0,8
tick,0x7ffdf681f424,101665655,0,0x0,8
tick,0x7ffdf681f424,101667551,0,0x0,8
tick,0x7ffdf681f424,101669646,0,0x0,8
tick,0x7ffdf681f424,101671638,0,0x0,8
tick,0x7ffdf681f424,101673543,0,0x0,8
tick,0x7ffdf681f424,101675631,0,0x0,8
tick,0x7ffdf681f424,101677640,0,0x0,8
tick,0x7ffdf681f424,101679555,0,0x0,8
tick,0x7ffdf681f424,101681611,0,0x0,8
tick,0x7ffdf681f424,101683608,0,0x0,8
tick,0x7ffdf681f424,101685591,0,0x0,8
tick,0x7ffdf681f424,101687527,0,0x0,8
tick,0x7ffdf681f424,101689589,0,0x0,8
tick,0x7ffdf681f424,101691582,0,0x0,8
tick,0x7ffdf681f424,101693577,0,0x0,8
tick,0x7ffdf681f424,101695571,0,0x0,8
tick,0x7ffdf681f424,101697570,0,0x0,8
tick,0x7ffdf681f424,101699624,0,0x0,8
tick,0x7ffdf681f424,101701580,0,0x0,8
tick,0x7ffdf681f424,101703567,0,0x0,8
tick,0x7ffdf681f424,101705574,0,0x0,8
tick,0x7ffdf681f424,101707540,0,0x0,8
tick,0x7ffdf681f424,101709531,0,0x0,8
tick,0x7ffdf681f424,101711532,0,0x0,8
tick,0x7ffdf681f424,101713525,0,0x0,8
tick,0x7ffdf681f424,101715515,0,0x0,8
tick,0x7ffdf681f424,101717517,0,0x0,8
tick,0x7ffdf681f424,101719512,0,0x0,8
tick,0x7ffdf681f424,101721543,0,0x0,8
tick,0x7ffdf681f424,101723525,0,0x0,8
tick,0x7ffdf681f424,101725539,0,0x0,8
tick,0x7ffdf681f424,101727490,0,0x0,8
tick,0x7ffdf681f424,101729376,0,0x0,8
tick,0x7ffdf681f424,101731481,0,0x0,8
tick,0x7ffdf681f424,101733472,0,0x0,8
tick,0x7ffdf681f424,101735465,0,0x0,8
tick,0x7ffdf681f424,101737463,0,0x0,8
tick,0x7ffdf681f424,101739454,0,0x0,8
tick,0x7ffdf681f424,101741446,0,0x0,8
tick,0x7ffdf681f424,101743485,0,0x0,8
tick,0x7ffdf681f424,101745465,0,0x0,8
tick,0x7ffdf681f424,101747432,0,0x0,8
tick,0x7ffdf681f424,101749340,0,0x0,8
tick,0x7ffdf681f424,101751426,0,0x0,8
tick,0x7ffdf681f424,101753428,0,0x0,8
tick,0x7ffdf681f424,101755307,0,0x0,8
tick,0x7ffdf681f424,101757430,0,0x0,8
tick,0x7ffdf681f424,101759402,0,0x0,8
tick,0x7ffdf681f424,101761227,0,0x0,8
tick,0x7ffdf681f424,101763259,0,0x0,8
tick,0x7ffdf681f424,101765222,0,0x0,8
tick,0x7ffdf681f424,101767283,0,0x0,8
tick,0x7ffdf681f424,101769263,0,0x0,8
tick,0x7ffdf681f424,101771300,0,0x0,8
tick,0x7ffdf681f424,101773405,0,0x0,8
tick,0x7ffdf681f424,101775356,0,0x0,8
tick,0x7ffdf681f424,101777355,0,0x0,8
tick,0x7ffdf681f424,101779264,0,0x0,8
tick,0x7ffdf681f424,101781345,0,0x0,8
tick,0x7ffdf681f424,101783340,0,0x0,8
tick,0x7ffdf681f424,101785333,0,0x0,8
tick,0x7ffdf681f424,101787339,0,0x0,8
tick,0x7ffdf681f424,101789336,0,0x0,8
tick,0x7ffdf681f424,101791315,0,0x0,8
tick,0x7ffdf681f424,101793315,0,0x0,8
tick,0x7ffdf681f424,101795304,0,0x0,8
tick,0x7ffdf681f424,101797299,0,0x0,8
tick,0x7ffdf681f424,101799294,0,0x0,8
tick,0x7ffdf681f424,101801295,0,0x0,8
tick,0x7ffdf681f424,101803283,0,0x0,8
tick,0x7ffdf681f424,101805270,0,0x0,8
tick,0x7ffdf681f424,101807320,0,0x0,8
tick,0x7ffdf681f424,101809342,0,0x0,8
tick,0x7ffdf681f424,101811304,0,0x0,8
tick,0x7ffdf681f424,101813254,0,0x0,8
tick,0x7ffdf681f424,101815262,0,0x0,8
tick,0x7ffdf681f424,101817246,0,0x0,8
tick,0x7ffdf681f424,101819240,0,0x0,8
tick,0x7ffdf681f424,101821128,0,0x0,8
tick,0x7ffdf681f424,101823235,0,0x0,8
tick,0x7ffdf681f424,101825120,0,0x0,8
tick,0x7ffdf681f424,101827112,0,0x0,8
tick,0x7ffdf681f424,101829210,0,0x0,8
tick,0x7ffdf681f424,101831249,0,0x0,8
tick,0x7ffdf681f424,101833242,0,0x0,8
tick,0x7ffdf681f424,101835199,0,0x0,8
tick,0x7ffdf681f424,101837196,0,0x0,8
tick,0x7ffdf681f424,101839191,0,0x0,8
tick,0x7ffdf681f424,101841184,0,0x0,8
tick,0x7ffdf681f424,101843171,0,0x0,8
tick,0x7ffdf681f424,101845165,0,0x0,8
tick,0x7ffdf681f424,101847153,0,0x0,8
tick,0x7ffdf681f424,101849158,0,0x0,8
tick,0x7ffdf681f424,101851151,0,0x0,8
tick,0x7ffdf681f424,101853171,0,0x0,8
tick,0x7ffdf681f424,101855174,0,0x0,8
tick,0x7ffdf681f424,101857136,0,0x0,8
tick,0x7ffdf681f424,101859135,0,0x0,8
tick,0x7ffdf681f424,101861122,0,0x0,8
tick,0x7ffdf681f424,101863117,0,0x0,8
tick,0x7ffdf681f424,101865120,0,0x0,8
tick,0x7ffdf681f424,101867106,0,0x0,8
tick,0x7ffdf681f424,101869111,0,0x0,8
tick,0x7ffdf681f424,101870991,0,0x0,8
tick,0x7ffdf681f424,101873094,0,0x0,8
tick,0x7ffdf681f424,101875078,0,0x0,8
tick,0x7ffdf681f424,101877113,0,0x0,8
tick,0x7ffdf681f424,101879084,0,0x0,8
tick,0x7ffdf681f424,101881072,0,0x0,8
tick,0x7ffdf681f424,101883066,0,0x0,8
tick,0x7ffdf681f424,101885060,0,0x0,8
tick,0x7ffdf681f424,101887055,0,0x0,8
tick,0x7ffdf681f424,101889079,0,0x0,8
tick,0x7ffdf681f424,101891041,0,0x0,8
tick,0x7ffdf681f424,101893036,0,0x0,8
tick,0x7ffdf681f424,101895038,0,0x0,8
tick,0x7ffdf681f424,101897013,0,0x0,8
tick,0x7ffdf681f424,101899034,0,0x0,8
tick,0x7ffdf681f424,101901015,0,0x0,8
tick,0x7ffdf681f424,101902928,0,0x0,8
tick,0x7ffdf681f424,101905004,0,0x0,8
tick,0x7ffdf681f424,101907002,0,0x0,8
tick,0x7ffdf681f424,101908994,0,0x0,8
tick,0x7ffdf681f424,101910983,0,0x0,8
tick,0x7ffdf681f424,101912958,0,0x0,8
tick,0x7ffdf681f424,101914868,0,0x0,8
tick,0x7ffdf681f424,101916973,0,0x0,8
tick,0x7ffdf681f424,101918985,0,0x0,8
tick,0x7ffdf681f424,101920873,0,0x0,8
tick,0x7ffdf681f424,101922957,0,0x0,8
tick,0x7ffdf681f424,101924961,0,0x0,8
tick,0x7ffdf681f424,101926946,0,0x0,8
tick,0x7ffdf681f424,101928940,0,0x0,8
tick,0x7ffdf681f424,101930935,0,0x0,8
tick,0x7ffdf681f424,101932932,0,0x0,8
tick,0x7ffdf681f424,101934946,0,0x0,8
tick,0x7ffdf681f424,101936919,0,0x0,8
tick,0x7ffdf681f424,101938806,0,0x0,8
tick,0x7ffdf681f424,101940894,0,0x0,8
tick,0x7ffdf681f424,101942919,0,0x0,8
tick,0x7ffdf681f424,101944905,0,0x0,8
tick,0x7ffdf681f424,101946911,0,0x0,8
tick,0x7ffdf681f424,101948895,0,0x0,8
tick,0x7ffdf681f424,101950889,0,0x0,8
tick,0x7ffdf681f424,101952889,0,0x0,8
tick,0x7ffdf681f424,101954878,0,0x0,8
tick,0x7ffdf681f424,101956925,0,0x0,8
tick,0x7ffdf681f424,101958893,0,0x0,8
tick,0x7ffdf681f424,101960864,0,0x0,8
tick,0x7ffdf681f424,101962819,0,0x0,8
tick,0x7ffdf681f424,101964881,0,0x0,8
tick,0x7ffdf681f424,101966850,0,0x0,8
tick,0x7ffdf681f424,101968851,0,0x0,8
tick,0x7ffdf681f424,101970886,0,0x0,8
tick,0x7ffdf681f424,101972834,0,0x0,8
tick,0x7ffdf681f424,101974777,0,0x0,8
tick,0x7ffdf681f424,101976825,0,0x0,8
tick,0x7ffdf681f424,101978705,0,0x0,8
tick,0x7ffdf681f424,101980700,0,0x0,8
tick,0x7ffdf681f424,101982816,0,0x0,8
tick,0x7ffdf681f424,101984785,0,0x0,8
tick,0x7ffdf681f424,101986812,0,0x0,8
tick,0x7ffdf681f424,101988672,0,0x0,8
tick,0x7ffdf681f424,101990788,0,0x0,8
tick,0x7ffdf681f424,101992778,0,0x0,8
tick,0x7ffdf681f424,101994772,0,0x0,8
tick,0x7ffdf681f424,101996770,0,0x0,8
tick,0x7ffdf681f424,101998765,0,0x0,8
tick,0x7ffdf681f424,102000763,0,0x0,8
tick,0x7ffdf681f424,102002753,0,0x0,8
tick,0x7ffdf681f424,102004742,0,0x0,8
tick,0x7ffdf681f424,102006729,0,0x0,8
tick,0x7ffdf681f424,102008748,0,0x0,8
tick,0x7ffdf681f424,102010734,0,0x0,8
tick,0x7ffdf681f424,102012653,0,0x0,8
tick,0x7ffdf681f424,102014745,0,0x0,8
tick,0x7ffdf681f424,102016712,0,0x0,8
tick,0x7ffdf681f424,102018702,0,0x0,8
tick,0x7ffdf681f424,102020702,0,0x0,8
tick,0x7ffdf681f424,102022697,0,0x0,8
tick,0x7ffdf681f424,102024739,0,0x0,8
tick,0x7ffdf681f424,102026686,0,0x0,8
tick,0x7ffdf681f424,102028712,0,0x0,8
tick,0x7ffdf681f424,102030704,0,0x0,8
tick,0x7ffdf681f424,102032672,0,0x0,8
tick,0x7ffdf681f424,102034670,0,0x0,8
tick,0x7ffdf681f424,102036657,0,0x0,8
tick,0x7ffdf681f424,102038658,0,0x0,8
tick,0x7ffdf681f424,102040654,0,0x0,8
tick,0x7ffdf681f424,102042643,0,0x0,8
tick,0x7ffdf681f424,102044638,0,0x0,8
tick,0x7ffdf681f424,102046634,0,0x0,8
tick,0x7ffdf681f424,102048627,0,0x0,8
tick,0x7ffdf681f424,102050650,0,0x0,8
tick,0x7ffdf681f424,102052668,0,0x0,8
tick,0x7ffdf681f424,102054575,0,0x0,8
tick,0x7ffdf681f424,102056563,0,0x0,8
tick,0x7ffdf681f424,102058606,0,0x0,8
tick,0x7ffdf681f424,102060593,0,0x0,8
tick,0x7ffdf681f424,102062585,0,0x0,8
tick,0x7ffdf681f424,102064591,0,0x0,8
tick,0x7ffdf681f424,102066588,0,0x0,8
tick,0x7ffdf681f424,102068572,0,0x0,8
tick,0x7ffdf681f424,102070569,0,0x0,8
tick,0x7ffdf681f424,102072558,0,0x0,8
tick,0x7ffdf681f424,102074571,0,0x0,8
tick,0x7ffdf681f424,102076565,0,0x0,8
tick,0x7ffdf681f424,102078567,0,0x0,8
tick,0x7ffdf681f424,102080542,0,0x0,8
tick,0x7ffdf681f424,102082536,0,0x0,8
tick,0x7ffdf681f424,102084529,0,0x0,8
tick,0x7ffdf681f424,102086526,0,0x0,8
tick,0x7ffdf681f424,102088523,0,0x0,8
tick,0x7ffdf681f424,102090516,0,0x0,8
tick,0x7ffdf681f424,102092508,0,0x0,8
tick,0x7ffdf681f424,102094532,0,0x0,8
tick,0x7ffdf681f424,102096527,0,0x0,8
tick,0x7ffdf681f424,102098499,0,0x0,8
tick,0x7ffdf681f424,102100493,0,0x0,8
tick,0x7ffdf681f424,102102505,0,0x0,8
tick,0x7ffdf681f424,102104394,0,0x0,8
tick,0x7ffdf681f424,102106473,0,0x0,8
tick,0x7ffdf681f424,102108467,0,0x0,8
tick,0x7ffdf681f424,102110462,0,0x0,8
tick,0x7ffdf681f424,102112463,0,0x0,8
tick,0x7ffdf681f424,102114451,0,0x0,8
tick,0x7ffdf681f424,102116524,0,0x0,8
tick,0x7ffdf681f424,102118468,0,0x0,8
tick,0x7ffdf681f424,102120454,0,0x0,8
tick,0x7ffdf681f424,102122435,0,0x0,8
tick,0x7ffdf681f424,102124438,0,0x0,8
tick,0x7ffdf681f424,102126412,0,0x0,8
tick,0x7ffdf681f424,102128416,0,0x0,8
tick,0x7ffdf681f424,102130416,0,0x0,8
tick,0x7ffdf681f424,102132295,0,0x0,8
tick,0x7ffdf681f424,102134349,0,0x0,8
tick,0x7ffdf681f424,102136401,0,0x0,8
tick,0x7ffdf681f424,102138395,0,0x0,8
tick,0x7ffdf681f424,102140396,0,0x0,8
tick,0x7ffdf681f424,102142377,0,0x0,8
tick,0x7ffdf681f424,102144384,0,0x0,8
tick,0x7ffdf681f424,102146291,0,0x0,8
tick,0x7ffdf681f424,102148356,0,0x0,8
tick,0x7ffdf681f424,102150355,0,0x0,8
tick,0x7ffdf681f424,102152352,0,0x0,8
tick,0x7ffdf681f424,102154257,0,0x0,8
tick,0x7ffdf681f424,102156339,0,0x0,8
tick,0x7ffdf681f424,102158357,0,0x0,8
tick,0x7ffdf681f424,102160389,0,0x0,8
tick,0x7ffdf681f424,102162353,0,0x0,8
tick,0x7ffdf681f424,102164322,0,0x0,8
tick,0x7ffdf681f424,102166319,0,0x0,8
tick,0x7ffdf681f424,102168313,0,0x0,8
tick,0x7ffdf681f424,102170302,0,0x0,8
tick,0x7ffdf681f424,102172297,0,0x0,8
tick,0x7ffdf681f424,102174302,0,0x0,8
tick,0x7ffdf681f424,102176306,0,0x0,8
tick,0x7ffdf681f424,102178280,0,0x0,8
tick,0x7ffdf681f424,102180275,0,0x0,8
tick,0x7ffdf681f424,102182336,0,0x0,8
tick,0x7ffdf681f424,102184298,0,0x0,8
tick,0x7ffdf681f424,102186264,0,0x0,8
tick,0x7ffdf681f424,102188259,0,0x0,8
tick,0x7ffdf681f424,102190259,0,0x0,8
tick,0x7ffdf681f424,102192245,0,0x0,8
tick,0x7ffdf681f424,102194238,0,0x0,8
tick,0x7ffdf681f424,102196124,0,0x0,8
tick,0x7ffdf681f424,102198231,0,0x0,8
tick,0x7ffdf681f424,102200222,0,0x0,8
tick,0x7ffdf681f424,102202216,0,0x0,8
tick,0x7ffdf681f424,102204201,0,0x0,8
tick,0x7ffdf681f424,102206220,0,0x0,8
tick,0x7ffdf681f424,102208201,0,0x0,8
tick,0x7ffdf681f424,102210123,0,0x0,8
tick,0x7ffdf681f424,102212191,0,0x0,8
tick,0x7ffdf681f424,102214180,0,0x0,8
tick,0x7ffdf681f424,102216192,0,0x0,8
tick,0x7ffdf681f424,102218174,0,0x0,8
tick,0x7ffdf681f424,102220167,0,0x0,8
tick,0x7ffdf681f424,102222056,0,0x0,8
tick,0x7ffdf681f424,102224160,0,0x0,8
tick,0x7ffdf681f424,102226151,0,0x0,8
tick,0x7ffdf681f424,102228174,0,0x0,8
tick,0x7ffdf681f424,102230177,0,0x0,8
tick,0x7ffdf681f424,102232143,0,0x0,8
tick,0x7ffdf681f424,102234132,0,0x0,8
tick,0x7ffdf681f424,102236126,0,0x0,8
tick,0x7ffdf681f424,102238122,0,0x0,8
tick,0x7ffdf681f424,102240119,0,0x0,8
tick,0x7ffdf681f424,102242109,0,0x0,8
tick,0x7ffdf681f424,102244105,0,0x0,8
tick,0x7ffdf681f424,102245992,0,0x0,8
tick,0x7ffdf681f424,102248025,0,0x0,8
tick,0x7ffdf681f424,102250119,0,0x0,8
tick,0x7ffdf681f424,102252081,0,0x0,8
tick,0x7ffdf681f424,102254086,0,0x0,8
tick,0x7ffdf681f424,102256084,0,0x0,8
tick,0x7ffdf681f424,102258068,0,0x0,8
tick,0x7ffdf681f424,102260067,0,0x0,8
tick,0x7ffdf681f424,102262062,0,0x0,8
tick,0x7ffdf681f424,102264051,0,0x0,8
tick,0x7ffdf681f424,102266065,0,0x0,8
tick,0x7ffdf681f424,102268049,0,0x0,8
tick,0x7ffdf681f424,102270107,0,0x0,8
tick,0x7ffdf681f424,102272061,0,0x0,8
tick,0x7ffdf681f424,102274024,0,0x0,8
tick,0x7ffdf681f424,102276024,0,0x0,8
tick,0x7ffdf681f424,102278020,0,0x0,8
tick,0x7ffdf681f424,102280011,0,0x0,8
tick,0x7ffdf681f424,102281937,0,0x0,8
tick,0x7ffdf681f424,102283995,0,0x0,8
tick,0x7ffdf681f424,102285879,0,0x0,8
tick,0x7ffdf681f424,102287876,0,0x0,8
tick,0x7ffdf681f424,102289988,0,0x0,8
tick,0x7ffdf681f424,102292063,0,0x0,8
tick,0x7ffdf681f424,102294000,0,0x0,8
tick,0x7ffdf681f424,102295948,0,0x0,8
tick,0x7ffdf681f424,102297962,0,0x0,8
tick,0x7ffdf681f424,102299956,0,0x0,8
tick,0x7ffdf681f424,102301966,0,0x0,8
tick,0x7ffdf681f424,102303830,0,0x0,8
tick,0x7ffdf681f424,102305939,0,0x0,8
tick,0x7ffdf681f424,102307935,0,0x0,8
tick,0x7ffdf681f424,102309929,0,0x0,8
tick,0x7ffdf681f424,102311926,0,0x0,8
tick,0x7ffdf681f424,102313911,0,0x0,8
tick,0x7ffdf681f424,102315924,0,0x0,8
tick,0x7ffdf681f424,102317911,0,0x0,8
tick,0x7ffdf681f424,102319915,0,0x0,8
tick,0x7ffdf681f424,102321892,0,0x0,8
tick,0x7ffdf681f424,102323908,0,0x0,8
tick,0x7ffdf681f424,102325890,0,0x0,8
tick,0x7ffdf681f424,102327881,0,0x0,8
tick,0x7ffdf681f424,102329858,0,0x0,8
tick,0x7ffdf681f424,102331870,0,0x0,8
tick,0x7ffdf681f424,102333864,0,0x0,8
tick,0x7ffdf681f424,102335932,0,0x0,8
tick,0x7ffdf681f424,102337779,0,0x0,8
tick,0x7ffdf681f424,102339848,0,0x0,8
tick,0x7ffdf681f424,102341852,0,0x0,8
tick,0x7ffdf681f424,102343847,0,0x0,8
tick,0x7ffdf681f424,102345836,0,0x0,8
tick,0x7ffdf681f424,102347831,0,0x0,8
tick,0x7ffdf681f424,102349828,0,0x0,8
tick,0x7ffdf681f424,102351819,0,0x0,8
tick,0x7ffdf681f424,102353811,0,0x0,8
tick,0x7ffdf681f424,102355803,0,0x0,8
tick,0x7ffdf681f424,102357800,0,0x0,8
tick,0x7ffdf681f424,102359968,0,0x0,8
tick,0x7ffdf681f424,102361784,0,0x0,8
tick,0x7ffdf681f424,102363751,0,0x0,8
tick,0x7ffdf681f424,102365790,0,0x0,8
tick,0x7ffdf681f424,102367774,0,0x0,8
tick,0x7ffdf681f424,102369769,0,0x0,8
tick,0x7ffdf681f424,102371765,0,0x0,8
tick,0x7ffdf681f424,102373758,0,0x0,8
tick,0x7ffdf681f424,102375755,0,0x0,8
tick,0x7ffdf681f424,102377763,0,0x0,8
tick,0x7ffdf681f424,102379634,0,0x0,8
tick,0x7ffdf681f424,102381751,0,0x0,8
tick,0x7ffdf681f424,102383734,0,0x0,8
tick,0x7ffdf681f424,102385732,0,0x0,8
tick,0x7ffdf681f424,102387621,0,0x0,8
tick,0x7ffdf681f424,102389719,0,0x0,8
tick,0x7ffdf681f424,102391710,0,0x0,8
tick,0x7ffdf681f424,102393705,0,0x0,8
tick,0x7ffdf681f424,102395699,0,0x0,8
tick,0x7ffdf681f424,102397708,0,0x0,8
tick,0x7ffdf681f424,102399689,0,0x0,8
tick,0x7ffdf681f424,102401745,0,0x0,8
tick,0x7ffdf681f424,102403704,0,0x0,8
tick,0x7ffdf681f424,102405668,0,0x0,8
tick,0x7ffdf681f424,102407673,0,0x0,8
tick,0x7ffdf681f424,102409662,0,0x0,8
tick,0x7ffdf681f424,102411654,0,0x0,8
tick,0x7ffdf681f424,102413655,0,0x0,8
tick,0x7ffdf681f424,102415648,0,0x0,8
tick,0x7ffdf681f424,102417640,0,0x0,8
tick,0x7ffdf681f424,102419633,0,0x0,8
tick,0x7ffdf681f424,102421634,0,0x0,8
tick,0x7ffdf681f424,102423668,0,0x0,8
tick,0x7ffdf681f424,102425649,0,0x0,8
tick,0x7ffdf681f424,102427614,0,0x0,8
tick,0x7ffdf681f424,102429539,0,0x0,8
tick,0x7ffdf681f424,102431628,0,0x0,8
tick,0x7ffdf681f424,102433598,0,0x0,8
tick,0x7ffdf681f424,102435593,0,0x0,8
tick,0x7ffdf681f424,102437624,0,0x0,8
tick,0x7ffdf681f424,102439483,0,0x0,8
tick,0x7ffdf681f424,102441469,0,0x0,8
tick,0x7ffdf681f424,102443575,0,0x0,8
tick,0x7ffdf681f424,102445665,0,0x0,8
tick,0x7ffdf681f424,102447592,0,0x0,8
tick,0x7ffdf681f424,102449556,0,0x0,8
tick,0x7ffdf681f424,102451554,0,0x0,8
tick,0x7ffdf681f424,102453550,0,0x0,8
tick,0x7ffdf681f424,102455539,0,0x0,8
tick,0x7ffdf681f424,102457534,0,0x0,8
tick,0x7ffdf681f424,102459531,0,0x0,8
tick,0x7ffdf681f424,102461554,0,0x0,8
tick,0x7ffdf681f424,102463522,0,0x0,8
tick,0x7ffdf681f424,102465513,0,0x0,8
tick,0x7ffdf681f424,102467568,0,0x0,8
tick,0x7ffdf681f424,102469545,0,0x0,8
tick,0x7ffdf681f424,102471496,0,0x0,8
tick,0x7ffdf681f424,102473520,0,0x0,8
tick,0x7ffdf681f424,102475484,0,0x0,8
tick,0x7ffdf681f424,102477484,0,0x0,8
tick,0x7ffdf681f424,102479421,0,0x0,8
tick,0x7ffdf681f424,102481470,0,0x0,8
tick,0x7ffdf681f424,102483462,0,0x0,8
tick,0x7ffdf681f424,102485463,0,0x0,8
tick,0x7ffdf681f424,102487459,0,0x0,8
tick,0x7ffdf681f424,102489534,0,0x0,8
tick,0x7ffdf681f424,102491474,0,0x0,8
tick,0x7ffdf681f424,102493437,0,0x0,8
tick,0x7ffdf681f424,102495437,0,0x0,8
tick,0x7ffdf681f424,102497431,0,0x0,8
tick,0x7ffdf681f424,102499422,0,0x0,8
tick,0x7ffdf681f424,102501417,0,0x0,8
tick,0x7ffdf681f424,102503413,0,0x0,8
tick,0x7ffdf681f424,102505408,0,0x0,8
tick,0x7ffdf681f424,102507393,0,0x0,8
tick,0x7ffdf681f424,102509399,0,0x0,8
tick,0x7ffdf681f424,102511463,0,0x0,8
tick,0x7ffdf681f424,102513413,0,0x0,8
tick,0x7ffdf681f424,102515377,0,0x0,8
tick,0x7ffdf681f424,102517346,0,0x0,8
tick,0x7ffdf681f424,102519363,0,0x0,8
tick,0x7ffdf681f424,102521246,0,0x0,8
tick,0x7ffdf681f424,102523361,0,0x0,8
tick,0x7ffdf681f424,102525353,0,0x0,8
tick,0x7ffdf681f424,102527347,0,0x0,8
tick,0x7ffdf681f424,102529312,0,0x0,8
tick,0x7ffdf681f424,102531336,0,0x0,8
tick,0x7ffdf681f424,102533393,0,0x0,8
tick,0x7ffdf681f424,102535357,0,0x0,8
tick,0x7ffdf681f424,102537321,0,0x0,8
tick,0x7ffdf681f424,102539319,0,0x0,8
tick,0x7ffdf681f424,102541314,0,0x0,8
tick,0x7ffdf681f424,102543356,0,0x0,8
tick,0x7ffdf681f424,102545299,0,0x0,8
tick,0x7ffdf681f424,102547291,0,0x0,8
tick,0x7ffdf681f424,102549292,0,0x0,8
tick,0x7ffdf681f424,102551283,0,0x0,8
tick,0x7ffdf681f424,102553277,0,0x0,8
tick,0x7ffdf681f424,102555279,0,0x0,8
tick,0x7ffdf681f424,102557278,0,0x0,8
tick,0x7ffdf681f424,102559266,0,0x0,8
tick,0x7ffdf681f424,102561306,0,0x0,8
tick,0x7ffdf681f424,102563276,0,0x0,8
tick,0x7ffdf681f424,102565246,0,0x0,8
tick,0x7ffdf681f424,102567262,0,0x0,8
tick,0x7ffdf681f424,102569235,0,0x0,8
tick,0x7ffdf681f424,102571121,0,0x0,8
tick,0x7ffdf681f424,102573228,0,0x0,8
tick,0x7ffdf681f424,102575228,0,0x0,8
tick,0x7ffdf681f424,102577237,0,0x0,8
tick,0x7ffdf681f424,102579296,0,0x0,8
tick,0x7ffdf681f424,102581218,0,0x0,8
tick,0x7ffdf681f424,102583204,0,0x0,8
tick,0x7ffdf681f424,102585187,0,0x0,8
tick,0x7ffdf681f424,102587188,0,0x0,8
tick,0x7ffdf681f424,102589152,0,0x0,8
tick,0x7ffdf681f424,102591189,0,0x0,8
tick,0x7ffdf681f424,102593078,0,0x0,8
tick,0x7ffdf681f424,102595091,0,0x0,8
tick,0x7ffdf681f424,102597166,0,0x0,8
tick,0x7ffdf681f424,102599162,0,0x0,8
tick,0x7ffdf681f424,102601167,0,0x0,8
tick,0x7ffdf681f424,102603142,0,0x0,8
tick,0x7ffdf681f424,102605143,0,0x0,8
tick,0x7ffdf681f424,102607137,0,0x0,8
tick,0x7ffdf681f424,102609128,0,0x0,8
tick,0x7ffdf681f424,102611127,0,0x0,8
tick,0x7ffdf681f424,102613053,0,0x0,8
tick,0x7ffdf681f424,102615113,0,0x0,8
tick,0x7ffdf681f424,102617107,0,0x0,8
tick,0x7ffdf681f424,102619102,0,0x0,8
tick,0x7ffdf681f424,102621006,0,0x0,8
tick,0x7ffdf681f424,102623107,0,0x0,8
tick,0x7ffdf681f424,102625125,0,0x0,8
tick,0x7ffdf681f424,102627084,0,0x0,8
tick,0x7ffdf681f424,102629075,0,0x0,8
tick,0x7ffdf681f424,102631072,0,0x0,8
tick,0x7ffdf681f424,102633064,0,0x0,8
tick,0x7ffdf681f424,102635057,0,0x0,8
tick,0x7ffdf681f424,102637058,0,0x0,8
tick,0x7ffdf681f424,102639051,0,0x0,8
tick,0x7ffdf681f424,102641043,0,0x0,8
tick,0x7ffdf681f424,102643078,0,0x0,8
tick,0x7ffdf681f424,102645061,0,0x0,8
tick,0x7ffdf681f424,102647027,0,0x0,8
tick,0x7ffdf681f424,102649035,0,0x0,8
tick,0x7ffdf681f424,102651011,0,0x0,8
tick,0x7ffdf681f424,102653011,0,0x0,8
tick,0x7ffdf681f424,102655006,0,0x0,8
tick,0x7ffdf681f424,102657001,0,0x0,8
tick,0x7ffdf681f424,102658989,0,0x0,8
tick,0x7ffdf681f424,102660991,0,0x0,8
tick,0x7ffdf681f424,102662880,0,0x0,8
tick,0x7ffdf681f424,102665040,0,0x0,8
tick,0x7ffdf681f424,102667007,0,0x0,8
tick,0x7ffdf681f424,102668949,0,0x0,8
tick,0x7ffdf681f424,102670884,0,0x0,8
tick,0x7ffdf681f424,102672958,0,0x0,8
tick,0x7ffdf681f424,102674950,0,0x0,8
tick,0x7ffdf681f424,102676951,0,0x0,8
tick,0x7ffdf681f424,102678942,0,0x0,8
tick,0x7ffdf681f424,102680938,0,0x0,8
tick,0x7ffdf681f424,102682940,0,0x0,8
tick,0x7ffdf681f424,102684925,0,0x0,8
tick,0x7ffdf681f424,102686927,0,0x0,8
tick,0x7ffdf681f424,102688932,0,0x0,8
tick,0x7ffdf681f424,102690910,0,0x0,8
tick,0x7ffdf681f424,102692911,0,0x0,8
tick,0x7ffdf681f424,102694901,0,0x0,8
tick,0x7ffdf681f424,102696895,0,0x0,8
tick,0x7ffdf681f424,102698886,0,0x0,8
tick,0x7ffdf681f424,102700887,0,0x0,8
tick,0x7ffdf681f424,102702880,0,0x0,8
tick,0x7ffdf681f424,102704875,0,0x0,8
tick,0x7ffdf681f424,102706923,0,0x0,8
tick,0x7ffdf681f424,102708900,0,0x0,8
tick,0x7ffdf681f424,102710887,0,0x0,8
tick,0x7ffdf681f424,102712745,0,0x0,8
tick,0x7ffdf681f424,102714857,0,0x0,8
tick,0x7ffdf681f424,102716841,0,0x0,8
tick,0x7ffdf681f424,102718835,0,0x0,8
tick,0x7ffdf681f424,102720828,0,0x0,8
tick,0x7ffdf681f424,102722826,0,0x0,8
tick,0x7ffdf681f424,102724832,0,0x0,8
tick,0x7ffdf681f424,102726817,0,0x0,8
tick,0x7ffdf681f424,102728809,0,0x0,8
tick,0x7ffdf681f424,102730864,0,0x0,8
tick,0x7ffdf681f424,102732827,0,0x0,8
tick,0x7ffdf681f424,102734795,0,0x0,8
tick,0x7ffdf681f424,102736791,0,0x0,8
tick,0x7ffdf681f424,102738780,0,0x0,8
tick,0x7ffdf681f424,102740780,0,0x0,8
tick,0x7ffdf681f424,102742775,0,0x0,8
tick,0x7ffdf681f424,102744778,0,0x0,8
tick,0x7ffdf681f424,102746760,0,0x0,8
tick,0x7ffdf681f424,102748647,0,0x0,8
tick,0x7ffdf681f424,102750756,0,0x0,8
tick,0x7ffdf681f424,102752796,0,0x0,8
tick,0x7ffdf681f424,102754677,0,0x0,8
tick,0x7ffdf681f424,102756743,0,0x0,8
tick,0x7ffdf681f424,102758735,0,0x0,8
tick,0x7ffdf681f424,102760729,0,0x0,8
tick,0x7ffdf681f424,102762592,0,0x0,8
tick,0x7ffdf681f424,102764744,0,0x0,8
tick,0x7ffdf681f424,102766701,0,0x0,8
tick,0x7ffdf681f424,102768712,0,0x0,8
tick,0x7ffdf681f424,102770586,0,0x0,8
tick,0x7ffdf681f424,102772696,0,0x0,8
tick,0x7ffdf681f424,102774681,0,0x0,8
tick,0x7ffdf681f424,102776708,0,0x0,8
tick,0x7ffdf681f424,102778675,0,0x0,8
tick,0x7ffdf681f424,102780679,0,0x0,8
tick,0x7ffdf681f424,102782664,0,0x0,8
tick,0x7ffdf681f424,102784664,0,0x0,8
tick,0x7ffdf681f424,102786652,0,0x0,8
tick,0x7ffdf681f424,102788695,0,0x0,8
tick,0x7ffdf681f424,102790637,0,0x0,8
tick,0x7ffdf681f424,102792638,0,0x0,8
tick,0x7ffdf681f424,102794637,0,0x0,8
tick,0x7ffdf681f424,102796631,0,0x0,8
tick,0x7ffdf681f424,102798632,0,0x0,8
tick,0x7ffdf681f424,102800619,0,0x0,8
tick,0x7ffdf681f424,102802616,0,0x0,8
tick,0x7ffdf681f424,102804498,0,0x0,8
tick,0x7ffdf681f424,102806601,0,0x0,8
tick,0x7ffdf681f424,102808590,0,0x0,8
tick,0x7ffdf681f424,102810591,0,0x0,8
tick,0x7ffdf681f424,102812597,0,0x0,8
tick,0x7ffdf681f424,102814579,0,0x0,8
tick,0x7ffdf681f424,102816574,0,0x0,8
tick,0x7ffdf681f424,102818658,0,0x0,8
tick,0x7ffdf681f424,102820593,0,0x0,8
tick,0x7ffdf681f424,102822560,0,0x0,8
tick,0x7ffdf681f424,102824499,0,0x0,8
tick,0x7ffdf681f424,102826466,0,0x0,8
tick,0x7ffdf681f424,102828552,0,0x0,8
tick,0x7ffdf681f424,102830513,0,0x0,8
tick,0x7ffdf681f424,102832531,0,0x0,8
tick,0x7ffdf681f424,102834525,0,0x0,8
tick,0x7ffdf681f424,102836518,0,0x0,8
tick,0x7ffdf681f424,102838510,0,0x0,8
tick,0x7ffdf681f424,102840532,0,0x0,8
tick,0x7ffdf681f424,102842524,0,0x0,8
tick,0x7ffdf681f424,102844499,0,0x0,8
tick,0x7ffdf681f424,102846440,0,0x0,8
tick,0x7ffdf681f424,102848451,0,0x0,8
tick,0x7ffdf681f424,102850483,0,0x0,8
tick,0x7ffdf681f424,102852472,0,0x0,8
tick,0x7ffdf681f424,102854407,0,0x0,8
tick,0x7ffdf681f424,102856468,0,0x0,8
tick,0x7ffdf681f424,102858460,0,0x0,8
tick,0x7ffdf681f424,102860460,0,0x0,8
tick,0x7ffdf681f424,102862640,0,0x0,8
tick,0x7ffdf681f424,102864360,0,0x0,8
tick,0x7ffdf681f424,102866434,0,0x0,8
tick,0x7ffdf681f424,102868442,0,0x0,8
tick,0x7ffdf681f424,102870477,0,0x0,8
tick,0x7ffdf681f424,102872413,0,0x0,8
tick,0x7ffdf681f424,102874421,0,0x0,8
tick,0x7ffdf681f424,102876416,0,0x0,8
tick,0x7ffdf681f424,102878409,0,0x0,8
tick,0x7ffdf681f424,102880403,0,0x0,8
tick,0x7ffdf681f424,102882399,0,0x0,8
tick,0x7ffdf681f424,102884498,0,0x0,8
tick,0x7ffdf681f424,102886421,0,0x0,8
tick,0x7ffdf681f424,102888388,0,0x0,8
tick,0x7ffdf681f424,102890307,0,0x0,8
tick,0x7ffdf681f424,102892375,0,0x0,8
tick,0x7ffdf681f424,102894367,0,0x0,8
tick,0x7ffdf681f424,102896249,0,0x0,8
tick,0x7ffdf681f424,102898359,0,0x0,8
tick,0x7ffdf681f424,102900241,0,0x0,8
tick,0x7ffdf681f424,102902236,0,0x0,8
tick,0x7ffdf681f424,102904350,0,0x0,8
tick,0x7ffdf681f424,102906395,0,0x0,8
tick,0x7ffdf681f424,102908356,0,0x0,8
tick,0x7ffdf681f424,102910325,0,0x0,8
tick,0x7ffdf681f424,102912325,0,0x0,8
tick,0x7ffdf681f424,102914194,0,0x0,8
tick,0x7ffdf681f424,102916302,0,0x0,8
tick,0x7ffdf681f424,102918304,0,0x0,8
tick,0x7ffdf681f424,102920296,0,0x0,8
tick,0x7ffdf681f424,102922289,0,0x0,8
tick,0x7ffdf681f424,102924293,0,0x0,8
tick,0x7ffdf681f424,102926283,0,0x0,8
tick,0x7ffdf681f424,102928360,0,0x0,8
tick,0x7ffdf681f424,102930295,0,0x0,8
tick,0x7ffdf681f424,102932268,0,0x0,8
tick,0x7ffdf681f424,102934266,0,0x0,8
tick,0x7ffdf681f424,102936278,0,0x0,8
tick,0x7ffdf681f424,102938262,0,0x0,8
tick,0x7ffdf681f424,102940244,0,0x0,8
tick,0x7ffdf681f424,102942238,0,0x0,8
tick,0x7ffdf681f424,102944233,0,0x0,8
tick,0x7ffdf681f424,102946118,0,0x0,8
tick,0x7ffdf681f424,102948222,0,0x0,8
tick,0x7ffdf681f424,102950259,0,0x0,8
tick,0x7ffdf681f424,102952245,0,0x0,8
tick,0x7ffdf681f424,102954204,0,0x0,8
tick,0x7ffdf681f424,102956207,0,0x0,8
tick,0x7ffdf681f424,102958190,0,0x0,8
tick,0x7ffdf681f424,102960190,0,0x0,8
tick,0x7ffdf681f424,102962183,0,0x0,8
tick,0x7ffdf681f424,102964203,0,0x0,8
tick,0x7ffdf681f424,102966199,0,0x0,8
tick,0x7ffdf681f424,102968171,0,0x0,8
tick,0x7ffdf681f424,102970168,0,0x0,8
tick,0x7ffdf681f424,102972256,0,0x0,8
tick,0x7ffdf681f424,102974227,0,0x0,8
tick,0x7ffdf681f424,102976149,0,0x0,8
tick,0x7ffdf681f424,102978053,0,0x0,8
tick,0x7ffdf681f424,102980023,0,0x0,8
tick,0x7ffdf681f424,102982146,0,0x0,8
tick,0x7ffdf681f424,102984126,0,0x0,8
tick,0x7ffdf681f424,102986118,0,0x0,8
tick,0x7ffdf681f424,102988050,0,0x0,8
tick,0x7ffdf681f424,102990117,0,0x0,8
tick,0x7ffdf681f424,102992110,0,0x0,8
tick,0x7ffdf681f424,102994180,0,0x0,8
tick,0x7ffdf681f424,102996062,0,0x0,8
tick,0x7ffdf681f424,102998089,0,0x0,8
tick,0x7ffdf681f424,103000092,0,0x0,8
tick,0x7ffdf681f424,103002078,0,0x0,8
tick,0x7ffdf681f424,103004073,0,0x0,8
tick,0x7ffdf681f424,103006062,0,0x0,8
tick,0x7ffdf681f424,103008065,0,0x0,8
tick,0x7ffdf681f424,103010056,0,0x0,8
tick,0x7ffdf681f424,103012052,0,0x0,8
tick,0x7ffdf681f424,103014048,0,0x0,8
tick,0x7ffdf681f424,103016082,0,0x0,8
tick,0x7ffdf681f424,103018057,0,0x0,8
tick,0x7ffdf681f424,103020034,0,0x0,8
tick,0x7ffdf681f424,103022028,0,0x0,8
tick,0x7ffdf681f424,103024019,0,0x0,8
tick,0x7ffdf681f424,103026011,0,0x0,8
tick,0x7ffdf681f424,103028012,0,0x0,8
tick,0x7ffdf681f424,103030004,0,0x0,8
tick,0x7ffdf681f424,103031962,0,0x0,8
code-creation,LazyCompile,10,103033024,0xc761d26c7e,130,exit node:internal/process/per_thread:181:16,0x273fd318b00,~
code-source-info,0xc761d26c7e,30,4965,5449,C0O4979C5O4987C17O4999C20O4987C26O5026C31O5043C36O5057C43O5074C47O5089C52O5102C58O5121C64O5138C68O5153C73O5161C86O5182C94O5161C100O5402C105O5410C115O5429C123O5410C129O5448,,
